void sub_1002D4588()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;
  uint64_t vars8;

  if (qword_100907270 != -1) {
    swift_once();
  }
  v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100912C20);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "ðŸ“” RDSyncActivityEngine: Notifications posted successfully", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1002D4670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_t v13 = dispatch_group_create();
  dispatch_group_t v19 = v13;
  uint64_t v20 = v3;
  sub_1002D8D88(a1, (void (*)(uint64_t, uint64_t, unsigned char *))sub_1002DA080);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  aBlock[4] = sub_1002DA0C8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C0B40;
  v15 = _Block_copy(aBlock);
  sub_1000E4F30(a2);
  static DispatchQoS.unspecified.getter();
  v21 = _swiftEmptyArrayStorage;
  sub_1002DA110((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();

  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

void sub_1002D4978(void *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_100907270 != -1) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_100912C20);
    v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "ðŸ“” RDSyncActivityEngine: Starting Fetch", v7, 2u);
      swift_slowDealloc();
    }

    id v8 = sub_1002D9298();
    type metadata accessor for REMCKSharedEntitySyncActivity();
    unint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();
    if (v2)
    {

      return;
    }
    unint64_t v10 = v9;
    v23 = &_swiftEmptyDictionarySingleton;
    if (v9 >> 62) {
      break;
    }
    uint64_t v11 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v11) {
      goto LABEL_18;
    }
LABEL_8:
    v21 = a1;
    uint64_t v12 = 4;
    while (1)
    {
      id v13 = (v10 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v10 + 8 * v12);
      uint64_t v14 = v13;
      a1 = (void *)(v12 - 3);
      if (__OFADD__(v12 - 4, 1)) {
        break;
      }
      v22 = v13;
      sub_1002D4CA4((uint64_t)&v23, &v22);
      uint64_t v2 = 0;

      ++v12;
      if (a1 == (void *)v11)
      {
        swift_bridgeObjectRelease_n();
        v15 = v23;
        a1 = v21;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_16:
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (v11) {
    goto LABEL_8;
  }
LABEL_18:
  swift_bridgeObjectRelease_n();
  v15 = &_swiftEmptyDictionarySingleton;
LABEL_19:
  unint64_t v16 = swift_bridgeObjectRetain();
  sub_10020B6D0(v16);
  uint64_t v17 = swift_bridgeObjectRelease();
  __chkstk_darwin(v17);
  sub_100094134(&qword_100912F60);
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  swift_release();
  uint64_t v18 = (uint64_t)v23;
  swift_bridgeObjectRetain();
  sub_1002D8F58((unint64_t)_swiftEmptyArrayStorage, (unint64_t)v15, v18);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease_n();
  *a1 = v20;
}

void sub_1002D4CA4(uint64_t a1, void **a2)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v6 = *a2;
  id v7 = sub_100234424();
  if (v7)
  {
    id v8 = v7;
    id v9 = [v6 objectID];
    id v10 = v8;
    sub_1001A6C8C((uint64_t)v10, (uint64_t)v9);
  }
  else
  {
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100912C20);
    id v12 = v6;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v25 = v16;
      *(_DWORD *)v15 = 136446210;
      id v17 = [v12 uuidForChangeTracking];
      v24[0] = v16;
      if (v17)
      {
        uint64_t v18 = v17;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 0, 1, v19);
      }
      else
      {
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
      }
      uint64_t v21 = Optional.descriptionOrNil.getter();
      unint64_t v23 = v22;
      sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
      v24[1] = sub_1000C51B8(v21, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ“” RDSyncActivityEngine: Unable to make activity object for journal entry {identifier: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_1002D4FB4(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  v50 = a1;
  uint64_t v47 = sub_100094134(&qword_100912F48);
  uint64_t v49 = *(void *)(v47 - 8);
  uint64_t v5 = __chkstk_darwin(v47);
  v48 = (id *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  id v9 = (id *)((char *)&v46 - v8);
  __chkstk_darwin(v7);
  v51 = (id *)((char *)&v46 - v10);
  updated = (int *)type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  id v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v14 = *(void **)a2;
  v15 = *(void **)(a2 + 8);
  id v16 = v14;
  id v17 = v15;
  id v18 = [v17 ckIdentifier];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (*(void *)(a3 + 16) && (unint64_t v22 = sub_1001806F8(v19, v21), (v23 & 1) != 0))
  {
    id v46 = *(id *)(*(void *)(a3 + 56) + 8 * v22);
    swift_bridgeObjectRelease();
    id v24 = [v17 activityDate];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v25 = [v17 activityType];
    id v26 = [v17 authorUserRecordIDString];
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;

    *(void *)&v13[updated[5]] = v25;
    v30 = (uint64_t *)&v13[updated[6]];
    uint64_t *v30 = v27;
    v30[1] = v29;
    uint64_t v31 = updated[7];
    v33 = v46;
    uint64_t v32 = v47;
    *(void *)&v13[v31] = v46;
    uint64_t v34 = *(int *)(v32 + 48);
    v35 = v51;
    uint64_t v36 = (uint64_t)v51 + v34;
    void *v51 = v16;
    sub_100265D1C((uint64_t)v13, (uint64_t)v35 + v34);
    uint64_t v37 = (uint64_t)v9 + *(int *)(v32 + 48);
    void *v9 = v16;
    sub_100265D1C(v36, v37);
    uint64_t v38 = (uint64_t)v48;
    uint64_t v39 = (uint64_t)v48 + *(int *)(v32 + 48);
    void *v48 = v16;
    sub_100265E34(v37, v39);
    v40 = v50;
    unint64_t v41 = *v50;
    id v42 = v16;
    id v43 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v41 = sub_10030B7DC(0, *(void *)(v41 + 16) + 1, 1, v41);
    }
    unint64_t v45 = *(void *)(v41 + 16);
    unint64_t v44 = *(void *)(v41 + 24);
    if (v45 >= v44 >> 1) {
      unint64_t v41 = sub_10030B7DC(v44 > 1, v45 + 1, 1, v41);
    }
    *(void *)(v41 + 16) = v45 + 1;
    sub_1002DA284(v38, v41+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(void *)(v49 + 72) * v45);

    unint64_t *v40 = v41;
    sub_1000966BC((uint64_t)v51, &qword_100912F48);
    sub_1002DA314((uint64_t)v13, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

void sub_1002D534C(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  id v8 = (id)_s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v12 = _swiftEmptyArrayStorage;
  v40 = (void *)a3;
  unint64_t v42 = a2;
  unint64_t v43 = v4;
  if (v11)
  {
    unint64_t v45 = _swiftEmptyArrayStorage;
    id v13 = &v45;
    sub_1001DE058(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }
    id v39 = v8;
    unint64_t v41 = v10;
    uint64_t v14 = 0;
    uint64_t v12 = v45;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v15 = *(id *)(a1 + 8 * v14 + 32);
      }
      id v16 = v15;
      id v17 = [v15 ckIdentifier:v39];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      unint64_t v45 = v12;
      unint64_t v22 = v12[2];
      unint64_t v21 = v12[3];
      if (v22 >= v21 >> 1)
      {
        sub_1001DE058(v21 > 1, v22 + 1, 1);
        uint64_t v12 = v45;
      }
      ++v14;
      v12[2] = v22 + 1;
      char v23 = &v12[2 * v22];
      v23[4] = v18;
      v23[5] = v20;
    }
    while (v11 != v14);
    uint64_t v10 = v41;
  }
  uint64_t KeyPath = swift_getKeyPath();
  id v25 = sub_1001FFB00((uint64_t)v12);
  swift_bridgeObjectRelease();
  id v26 = (void *)sub_10039B758(KeyPath, (uint64_t)v25);
  swift_release();
  *(void *)uint64_t v10 = v26;
  v10[8] = 0;
  swift_storeEnumTagMultiPayload();
  id v8 = v26;
  uint64_t v27 = (void *)sub_10038F1F0();
  sub_100094134((uint64_t *)&unk_10090AF20);
  inited = (void *)swift_initStackObject();
  *((_OWORD *)inited + 1) = xmmword_10077DE90;
  inited[4] = swift_getKeyPath();
  inited[5] = swift_getKeyPath();
  inited[6] = swift_getKeyPath();
  unint64_t v45 = inited;
  specialized Array._endMutation()();
  uint64_t v29 = v45;
  v30 = (void *)swift_initStackObject();
  *((_OWORD *)v30 + 1) = xmmword_10077A530;
  v30[4] = swift_getKeyPath();
  unint64_t v45 = v30;
  specialized Array._endMutation()();
  a1 = sub_1003BC8C4((unint64_t)v29, (unint64_t)v45, 0, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v31 = (void *)swift_allocObject();
  *((_OWORD *)v31 + 1) = xmmword_10077B710;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  v31[4] = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  v31[5] = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  unint64_t v45 = v31;
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [(id)a1 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  v33 = (void **)v43;
  unint64_t v34 = NSManagedObjectContext.fetch<A>(_:)();
  id v13 = v33;
  if (v33)
  {
    sub_1002DA314((uint64_t)v10, _s10PredicatesOMa);

    return;
  }
  a2 = v34;
  unint64_t v45 = &_swiftEmptyDictionarySingleton;
  if (!(v34 >> 62))
  {
    a3 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (a3) {
      goto LABEL_17;
    }
LABEL_29:

    swift_bridgeObjectRelease();
    uint64_t v38 = &_swiftEmptyDictionarySingleton;
LABEL_30:

    sub_1002DA314((uint64_t)v10, _s10PredicatesOMa);
    swift_bridgeObjectRelease();
    void *v40 = v38;
    return;
  }
LABEL_28:
  swift_bridgeObjectRetain();
  a3 = _CocoaArrayWrapper.endIndex.getter();
  if (!a3) {
    goto LABEL_29;
  }
LABEL_17:
  unint64_t v41 = v10;
  unint64_t v4 = a2 & 0xC000000000000001;
  uint64_t v35 = 4;
  while (1)
  {
    if (v4) {
      uint64_t v36 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v36 = (char *)*(id *)(a2 + 8 * v35);
    }
    uint64_t v10 = v36;
    uint64_t v37 = v35 - 3;
    if (__OFADD__(v35 - 4, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    id v44 = v36;
    sub_1002D588C((uint64_t *)&v45, &v44);
    if (v13) {
      break;
    }
    id v13 = 0;

    ++v35;
    if (v37 == a3)
    {

      swift_bridgeObjectRelease();
      uint64_t v38 = v45;
      uint64_t v10 = v41;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  __break(1u);
}

void sub_1002D588C(uint64_t *a1, id *a2)
{
  id v3 = *a2;
  id v4 = [*a2 ckIdentifier];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    id v9 = v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *a1;
    *a1 = 0x8000000000000000;
    sub_1002C3E8C((uint64_t)v9, v6, v8, isUniquelyReferenced_nonNull_native);
    *a1 = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_100912C20);
    id v12 = v3;
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)id v15 = 136446210;
      id v16 = [v12 remObjectID];
      if (v16)
      {
        id v17 = v16;
        id v18 = [v16 description];

        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v21 = v20;
      }
      else
      {
        unint64_t v21 = 0xE300000000000000;
        uint64_t v19 = 7104878;
      }
      sub_1000C51B8(v19, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ“” RDSyncActivityEngine: Unable to get ckIdentifier for reminder {identifier: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t sub_1002D5B20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100912F48);
  uint64_t v5 = v4 - 8;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v83 = *(void *)(updated - 8);
  uint64_t v9 = __chkstk_darwin(updated);
  uint64_t v11 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  os_log_type_t v14 = (char *)&v83 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v83 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = *(int *)(v5 + 56);
  uint64_t v19 = (uint64_t)&v7[v18];
  unint64_t v21 = (char *)&v83 - v20;
  sub_100265D1C(a2 + v18, v19);
  sub_100265E34(v19, (uint64_t)v21);
  if (sub_1002D6730((uint64_t)v21))
  {
    switch(*(void *)&v21[*(int *)(updated + 20)])
    {
      case 0:
      case 2:
      case 3:
      case 4:
        if (qword_100907270 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_10008E2DC(v22, (uint64_t)qword_100912C20);
        sub_100265D1C((uint64_t)v21, (uint64_t)v17);
        char v23 = Logger.logObject.getter();
        id v24 = v21;
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v23, v25))
        {

          uint64_t v37 = (uint64_t)v17;
          goto LABEL_32;
        }
        id v26 = (uint8_t *)swift_slowAlloc();
        v87[0] = swift_slowAlloc();
        *(_DWORD *)id v26 = 136446210;
        uint64_t v27 = 0x6E776F6E6B6E75;
        unint64_t v28 = 0xE700000000000000;
        switch(*(void *)&v17[*(int *)(updated + 20)])
        {
          case 0:
            break;
          case 1:
            unint64_t v28 = 0xE300000000000000;
            uint64_t v27 = 6579297;
            break;
          case 2:
            v80 = "titleMayHaveDirtyHashtag";
            goto LABEL_41;
          case 3:
            v80 = "notesMayHaveDirtyHashtag";
LABEL_41:
            unint64_t v28 = (unint64_t)(v80 - 32) | 0x8000000000000000;
            uint64_t v27 = 0xD000000000000018;
            break;
          case 4:
            uint64_t v27 = 0xD00000000000001BLL;
            unint64_t v28 = 0x80000001007CF560;
            break;
          case 5:
            unint64_t v28 = 0xE800000000000000;
            uint64_t v27 = 0x6574656C706D6F63;
            break;
          default:
            uint64_t v27 = 0x206E776F6E6B6E75;
            unint64_t v28 = 0xEF746C7561666564;
            break;
        }
        *(void *)&long long v84 = sub_1000C51B8(v27, v28, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1002DA314((uint64_t)v17, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "ðŸ“” RDSyncActivityEngine: Received a journal entry with an unsupported activity type {type: %{public}s}", v26, 0xCu);
        swift_arrayDestroy();
        goto LABEL_52;
      case 1:
        id v43 = sub_1002CED08();
        uint64_t v45 = *a1;
        if (*(void *)(*a1 + 16) && (unint64_t v46 = sub_1001806F8((uint64_t)v43, v44), (v47 & 1) != 0))
        {
          sub_100096838(*(void *)(v45 + 56) + 40 * v46, (uint64_t)&v84);
        }
        else
        {
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v85 + 1))
        {
          sub_1000967D4(&v84, (uint64_t)v87);
          uint64_t v53 = (uint64_t)v88;
          v54 = v89;
          sub_1000C0DE0(v87, (uint64_t)v88);
          uint64_t v55 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v54[1])(v53, v54);
          sub_100094134(&qword_100914AF0);
          unint64_t v56 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          uint64_t v57 = swift_allocObject();
          *(_OWORD *)(v57 + 16) = xmmword_100776E40;
          v58 = v21;
          sub_100265D1C((uint64_t)v21, v57 + v56);
          *(void *)&long long v84 = v55;
          sub_1002034F8(v57);
          v59 = sub_100265B7C((void *)v84);
          uint64_t v61 = v60;
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v87);
        }
        else
        {
          sub_1000966BC((uint64_t)&v84, &qword_100912F58);
          sub_100094134(&qword_100914AF0);
          unint64_t v68 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          uint64_t v69 = swift_allocObject();
          *(_OWORD *)(v69 + 16) = xmmword_100776E40;
          v58 = v21;
          sub_100265D1C((uint64_t)v21, v69 + v68);
          v59 = sub_100265B7C((void *)v69);
          uint64_t v61 = v70;
        }
        id v71 = sub_1002CED08();
        uint64_t v73 = v72;
        v74 = &type metadata for RDAddedReminderNotificationContent;
        v75 = &off_1008BF840;
        goto LABEL_37;
      case 5:
        id v48 = sub_1002CED08();
        uint64_t v50 = *a1;
        if (*(void *)(*a1 + 16) && (unint64_t v51 = sub_1001806F8((uint64_t)v48, v49), (v52 & 1) != 0))
        {
          sub_100096838(*(void *)(v50 + 56) + 40 * v51, (uint64_t)&v84);
        }
        else
        {
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((void *)&v85 + 1))
        {
          sub_1000967D4(&v84, (uint64_t)v87);
          uint64_t v62 = (uint64_t)v88;
          v63 = v89;
          sub_1000C0DE0(v87, (uint64_t)v88);
          uint64_t v64 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v63[1])(v62, v63);
          sub_100094134(&qword_100914AF0);
          unint64_t v65 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          uint64_t v66 = swift_allocObject();
          *(_OWORD *)(v66 + 16) = xmmword_100776E40;
          v58 = v21;
          sub_100265D1C((uint64_t)v21, v66 + v65);
          *(void *)&long long v84 = v64;
          sub_1002034F8(v66);
          v59 = sub_1002E2BEC((void *)v84);
          uint64_t v61 = v67;
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v87);
        }
        else
        {
          sub_1000966BC((uint64_t)&v84, &qword_100912F58);
          sub_100094134(&qword_100914AF0);
          unint64_t v76 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          uint64_t v77 = swift_allocObject();
          *(_OWORD *)(v77 + 16) = xmmword_100776E40;
          v58 = v21;
          sub_100265D1C((uint64_t)v21, v77 + v76);
          v59 = sub_1002E2BEC((void *)v77);
          uint64_t v61 = v78;
        }
        id v71 = sub_1002CED08();
        uint64_t v73 = v79;
        v74 = &type metadata for RDCompletedReminderNotificationContent;
        v75 = &off_1008C0FD0;
LABEL_37:
        v88 = v74;
        v89 = v75;
        v87[0] = (uint64_t)v59;
        v87[1] = v61;
        sub_10035DB60((uint64_t)v87, (uint64_t)v71, v73);
        uint64_t v36 = (uint64_t)v58;
        break;
      default:
        if (qword_100907270 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        sub_10008E2DC(v38, (uint64_t)qword_100912C20);
        sub_100265D1C((uint64_t)v21, (uint64_t)v14);
        char v23 = Logger.logObject.getter();
        id v24 = v21;
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc();
          v87[0] = swift_slowAlloc();
          *(_DWORD *)v40 = 136446210;
          uint64_t v41 = 0x6E776F6E6B6E75;
          unint64_t v42 = 0xE700000000000000;
          switch(*(void *)&v14[*(int *)(updated + 20)])
          {
            case 0:
              break;
            case 1:
              unint64_t v42 = 0xE300000000000000;
              uint64_t v41 = 6579297;
              break;
            case 2:
              v81 = "titleMayHaveDirtyHashtag";
              goto LABEL_48;
            case 3:
              v81 = "notesMayHaveDirtyHashtag";
LABEL_48:
              unint64_t v42 = (unint64_t)(v81 - 32) | 0x8000000000000000;
              uint64_t v41 = 0xD000000000000018;
              break;
            case 4:
              uint64_t v41 = 0xD00000000000001BLL;
              unint64_t v42 = 0x80000001007CF560;
              break;
            case 5:
              unint64_t v42 = 0xE800000000000000;
              uint64_t v41 = 0x6574656C706D6F63;
              break;
            default:
              uint64_t v41 = 0x206E776F6E6B6E75;
              unint64_t v42 = 0xEF746C7561666564;
              break;
          }
          *(void *)&long long v84 = sub_1000C51B8(v41, v42, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1002DA314((uint64_t)v14, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
          _os_log_impl((void *)&_mh_execute_header, v23, v39, "ðŸ“” RDSyncActivityEngine: Received a journal entry with an unknown activity type {type: %{public}s}", v40, 0xCu);
          swift_arrayDestroy();
LABEL_52:
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v37 = (uint64_t)v14;
LABEL_32:
          sub_1002DA314(v37, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
        }
        uint64_t v36 = (uint64_t)v24;
        break;
    }
  }
  else
  {
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_100912C20);
    sub_100265D1C((uint64_t)v21, (uint64_t)v11);
    v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = v21;
      v33 = (uint8_t *)swift_slowAlloc();
      v87[0] = swift_slowAlloc();
      *(_DWORD *)v33 = 136446210;
      id v34 = sub_1002CEAE0();
      *(void *)&long long v84 = sub_1000C51B8((uint64_t)v34, v35, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1002DA314((uint64_t)v11, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "ðŸ“” RDSyncActivityEngine: Entry is not eligible for notifications {%{public}s}", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v36 = (uint64_t)v32;
    }
    else
    {

      sub_1002DA314((uint64_t)v11, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
      uint64_t v36 = (uint64_t)v21;
    }
  }
  return sub_1002DA314(v36, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1002D6730(uint64_t a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v3 = __chkstk_darwin(updated);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [*(id *)(a1 + *(int *)(v3 + 28)) list];
  v13[1] = v6;
  sub_100094134((uint64_t *)&unk_100914200);
  Optional.tryUnwrap(_:file:line:)();

  id v7 = v14;
  id v8 = [v14 remObjectID];

  id v14 = v8;
  sub_100094134((uint64_t *)&unk_100914BC0);
  Optional.tryUnwrap(_:file:line:)();

  uint64_t v10 = v15;
  char v11 = sub_1002D6964(v15, *(void *)(a1 + *(int *)(updated + 20)));
  sub_100265D1C(a1, (uint64_t)v5);
  if (v11)
  {
    sub_1002DA314((uint64_t)v5, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);

    char v12 = 0;
  }
  else
  {
    char v12 = sub_1002D6B54();

    sub_1002DA314((uint64_t)v5, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
  }
  return v12 & 1;
}

uint64_t sub_1002D6964(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
  uint64_t ObjectType = swift_getObjectType();
  id v7 = [a1 stringRepresentation];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(v8, v10, ObjectType, v5);
  swift_bridgeObjectRelease();
  switch(a2)
  {
    case 1:
      uint64_t result = v11 & 1;
      break;
    case 5:
      uint64_t result = (v11 >> 1) & 1;
      break;
    default:
      if (qword_100907270 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10008E2DC(v12, (uint64_t)qword_100912C20);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134349056;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "ðŸ“” RDSyncActivityEngine: Unsupported notification type: %{public}ld", v15, 0xCu);
        swift_slowDealloc();
      }

      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t sub_1002D6B54()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v24[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1002CE468();
  uint64_t v12 = v11;
  id v13 = [v11 remObjectID];

  if (v13)
  {
    id v14 = [v13 stringRepresentation];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults + 8);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(ObjectType, v18);
    if (!v20) {
      unint64_t v20 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
    }
    unint64_t v21 = v20;
    if (*(void *)(v20 + 16) && (unint64_t v22 = sub_1001806F8(v15, v17), (v23 & 1) != 0))
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v6 + 16))(v4, *(void *)(v21 + 56) + *(void *)(v6 + 72) * v22, v5);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32))(v8, v4, v5);
      char v9 = static Date.< infix(_:_:)();

      (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
      return v9 & 1;
    }

    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
  }
  char v9 = 1;
  return v9 & 1;
}

id sub_1002D6E2C(unint64_t a1, void *a2, void *a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (!v6) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_13;
    }
  }
  if (v6 < 1) {
    __break(1u);
  }
  uint64_t v7 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(a1 + 8 * v7 + 32);
    }
    char v9 = v8;
    id v10 = [a2 objectWithID:v8];
    [a2 deleteObject:v10];
    id v11 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v7;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  while (v6 != v7);
LABEL_13:
  swift_bridgeObjectRelease();
  id v14 = 0;
  if ([a2 save:&v14]) {
    return v14;
  }
  id v13 = v14;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

void sub_1002D7028(uint64_t a1, void *a2, void *a3, NSObject *a4, uint64_t a5)
{
  uint64_t v30 = a5;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_group_enter(a4);
  uint64_t v13 = a3[3];
  uint64_t v14 = a3[4];
  sub_1000C0DE0(a3, v13);
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  unint64_t v31 = 0xD000000000000031;
  unint64_t v32 = 0x80000001007D0F50;
  v16._countAndFlagsBits = a1;
  v16._object = a2;
  String.append(_:)(v16);
  id v17 = v15;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = 46;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  unint64_t v20 = v31;
  unint64_t v19 = v32;
  UUID.init()();
  uint64_t v21 = UUID.uuidString.getter();
  char v23 = v22;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  unint64_t v31 = v20;
  unint64_t v32 = v19;
  swift_bridgeObjectRetain();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v26 = v31;
  uint64_t v25 = v32;
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v26;
  v27[3] = v25;
  v27[4] = v17;
  v27[5] = a4;
  id v28 = v17;
  swift_bridgeObjectRetain();
  uint64_t v29 = a4;
  sub_10050E738(v26, v25, v28, (uint64_t)sub_1002DA1A0, (uint64_t)v27);
  swift_bridgeObjectRelease();
  swift_release();
}

void sub_1002D72B8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, NSObject *a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100912C20);
    swift_bridgeObjectRetain();
    id v10 = a4;
    swift_errorRetain();
    swift_bridgeObjectRetain();
    id v11 = v10;
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315650;
      swift_getErrorValue();
      uint64_t v15 = Error.rem_errorDescription.getter();
      unint64_t v32 = a5;
      sub_1000C51B8(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 22) = 2082;
      id v17 = [v11 body];
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      uint64_t v21 = v18;
      a5 = v32;
      sub_1000C51B8(v21, v20, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "ðŸ“” RDSyncActivityEngine: Unable to post Shared List Activity notification {error: %s, identifier: %{public}s, body: %{public}s}", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100912C20);
    swift_bridgeObjectRetain_n();
    id v23 = a4;
    Swift::String v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a2, a3, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2082;
      id v27 = [v23 body];
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v30 = v29;

      sub_1000C51B8(v28, v30, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ðŸ“” RDSyncActivityEngine: Posted Shared List Activity notification {identifier: %{public}s, body: %{public}s}", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for Analytics();
    sub_100094134((uint64_t *)&unk_10090A420);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 0x696669746E656449;
    *(void *)(inited + 40) = 0xEA00000000007265;
    sub_1000963CC(0, (unint64_t *)&unk_100910040);
    *(void *)(inited + 48) = NSString.init(stringLiteral:)();
    sub_1002ED104(inited);
    static Analytics.postEvent(_:payload:duration:)();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a5);
}

uint64_t sub_1002D7860()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_fetchedJournalEntries;
  uint64_t v2 = sub_100094134(&qword_100908258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_processedJournalEntries;
  uint64_t v4 = sub_100094134(&qword_100908250);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_staleObjectIDs;
  uint64_t v6 = sub_100094134(&qword_100908248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine__started;
  uint64_t v8 = sub_100094134(&qword_100908240);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1002D7A10()
{
  sub_1002D7860();

  return swift_deallocClassInstance();
}

void sub_1002D7A68(uint64_t a1, NSObject *a2, uint64_t a3, NSObject *a4)
{
}

uint64_t sub_1002D7A78()
{
  return REMSharedEntitySyncActivityType.description.getter();
}

uint64_t sub_1002D7A80()
{
  return type metadata accessor for RDSharedListActivityNotificationsEngine(0);
}

uint64_t type metadata accessor for RDSharedListActivityNotificationsEngine(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100912CC0);
}

void sub_1002D7AA8()
{
  sub_1002D7C5C(319, &qword_100912CD0, &qword_100908260);
  if (v0 <= 0x3F)
  {
    sub_1002D7C5C(319, &qword_100912CD8, &qword_100908268);
    if (v1 <= 0x3F)
    {
      sub_1002D7C5C(319, &qword_100912CE0, &qword_100908270);
      if (v2 <= 0x3F)
      {
        sub_1002D7CAC();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_1002D7C5C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100096058(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1002D7CAC()
{
  if (!qword_100912CE8)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100912CE8);
    }
  }
}

uint64_t getEnumTagSinglePayload for RDSharedListActivityNotificationsEngine.EngineConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[33]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSharedListActivityNotificationsEngine.EngineConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSharedListActivityNotificationsEngine.EngineConfiguration()
{
  return &type metadata for RDSharedListActivityNotificationsEngine.EngineConfiguration;
}

uint64_t *sub_1002D7DB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    id v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    uint64_t v12 = a3[7];
    os_log_type_t v13 = *(void **)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = (uint64_t)v13;
    swift_bridgeObjectRetain();
    id v14 = v13;
  }
  return a1;
}

void sub_1002D7EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + *(int *)(a2 + 28));
}

uint64_t sub_1002D7F24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = a3[7];
  uint64_t v12 = *(void **)(a2 + v11);
  *(void *)(a1 + v11) = v12;
  swift_bridgeObjectRetain();
  id v13 = v12;
  return a1;
}

uint64_t sub_1002D7FC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  uint64_t v11 = *(void **)(a2 + v10);
  uint64_t v12 = *(void **)(a1 + v10);
  *(void *)(a1 + v10) = v11;
  id v13 = v11;

  return a1;
}

uint64_t sub_1002D8084(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1002D8114(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  id v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);

  return a1;
}

uint64_t sub_1002D81BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002D81D0);
}

uint64_t sub_1002D81D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1002D8290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002D82A4);
}

uint64_t sub_1002D82A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100912E18);
}

uint64_t sub_1002D8380()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1002D8434()
{
  unint64_t result = qword_100912E58;
  if (!qword_100912E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100912E58);
  }
  return result;
}

uint64_t sub_1002D8488@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1002D8504()
{
  return static Published.subscript.setter();
}

uint64_t sub_1002D857C()
{
  return swift_release();
}

void sub_1002D85FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    sub_1000E4F40((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v29;
    uint64_t v26 = v30;
    uint64_t v4 = v31;
    int64_t v5 = v32;
    unint64_t v6 = v33;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    int64_t v5 = 0;
  }
  uint64_t v24 = v4;
  int64_t v25 = (unint64_t)(v4 + 64) >> 6;
  while (v3 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v34;
    swift_unknownObjectRelease();
    uint64_t v12 = v6;
    if (!v34) {
      goto LABEL_37;
    }
LABEL_33:
    id v19 = [v14 ckIdentifier:v24];
    if (v19)
    {
      unint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if (v21 == a2 && v23 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_37:
        sub_1000C1AF8();
        return;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_37;
      }
    }

    unint64_t v6 = v12;
  }
  if (v6)
  {
    uint64_t v12 = (v6 - 1) & v6;
    unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
LABEL_32:
    id v14 = *(id *)(*(void *)(v3 + 48) + 8 * v13);
    if (!v14) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v15 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    if (v15 >= v25) {
      goto LABEL_37;
    }
    int64_t v16 = v5;
    unint64_t v17 = *(void *)(v26 + 8 * v15);
    ++v5;
    if (!v17)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v25) {
        goto LABEL_37;
      }
      unint64_t v17 = *(void *)(v26 + 8 * v5);
      if (!v17)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v25) {
          goto LABEL_37;
        }
        unint64_t v17 = *(void *)(v26 + 8 * v5);
        if (!v17)
        {
          int64_t v5 = v15 + 3;
          if (v15 + 3 >= v25) {
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v26 + 8 * v5);
          if (!v17)
          {
            int64_t v5 = v15 + 4;
            if (v15 + 4 >= v25) {
              goto LABEL_37;
            }
            unint64_t v17 = *(void *)(v26 + 8 * v5);
            if (!v17)
            {
              uint64_t v18 = v16 + 6;
              while (v25 != v18)
              {
                unint64_t v17 = *(void *)(v26 + 8 * v18++);
                if (v17)
                {
                  int64_t v5 = v18 - 1;
                  goto LABEL_31;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v12 = (v17 - 1) & v17;
    unint64_t v13 = __clz(__rbit64(v17)) + (v5 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1002D898C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v41 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v39 = a1 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v6;
  uint64_t v42 = a2 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults;
  int64_t v40 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  uint64_t v38 = a1;
  while (1)
  {
    if (v9)
    {
      int64_t v43 = v11;
      uint64_t v44 = (v9 - 1) & v9;
      unint64_t v14 = __clz(__rbit64(v9)) | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v15 >= v40) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v39 + 8 * v15);
    int64_t v17 = v11 + 1;
    if (!v16)
    {
      int64_t v17 = v11 + 2;
      if (v11 + 2 >= v40) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v39 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v11 + 3;
        if (v11 + 3 >= v40) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v39 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v11 + 4;
          if (v11 + 4 >= v40) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v39 + 8 * v17);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_23:
    int64_t v43 = v17;
    uint64_t v44 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    id v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(v42 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
    swift_bridgeObjectRetain();
    unint64_t v25 = v24(ObjectType, v22);
    if (!v25) {
      unint64_t v25 = sub_1002EF078((uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v26 = v25;
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1001806F8(v20, v21);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if (v29)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = v26;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10031B214();
        uint64_t v26 = v45;
      }
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(v26 + 56);
      uint64_t v32 = type metadata accessor for Date();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = v31 + *(void *)(v33 + 72) * v27;
      unint64_t v35 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(v41, v34, v32);
      unint64_t v36 = v27;
      uint64_t v13 = (uint64_t)v35;
      sub_1002C2CB4(v36, v26);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
      a1 = v38;
    }
    else
    {
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = (uint64_t)v41;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v41, 1, 1, v12);
    }
    int64_t v11 = v43;
    sub_1000966BC(v13, (uint64_t *)&unk_100909A40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v26, ObjectType, v22);
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v9 = v44;
  }
  uint64_t v18 = v11 + 5;
  if (v11 + 5 >= v40) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v39 + 8 * v18);
  if (v16)
  {
    int64_t v17 = v11 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v40) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v39 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1002D8D88(uint64_t a1, void (*a2)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v20 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v20 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v20 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    sub_100096838(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v19);
    v18[0] = v13;
    v18[1] = v14;
    swift_bridgeObjectRetain();
    a2(v13, v14, v19);
    uint64_t result = sub_1000966BC((uint64_t)v18, &qword_100912F50);
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v7) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    int64_t v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1002D8F58(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v26 = a1;
  uint64_t v4 = v3;
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v23 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v5 = ~v8;
    unint64_t v23 = a2 + 64;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a2 + 64);
    unint64_t v7 = a2;
  }
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  int64_t v22 = (unint64_t)(v5 + 64) >> 6;
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaDictionary.Iterator.next()()) {
    goto LABEL_35;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v12 = (id)v25[0];
  swift_unknownObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_1009102A0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v13 = (id)v25[0];
  swift_unknownObjectRelease();
  int64_t v14 = v11;
  uint64_t v15 = v6;
  if (!v12) {
    goto LABEL_35;
  }
  while (1)
  {
    v25[0] = v12;
    v25[1] = v13;
    sub_1002D4FB4(&v26, (uint64_t)v25, a3);
    if (v4)
    {

      swift_bridgeObjectRelease();
      sub_1000C1AF8();
      return;
    }

    int64_t v11 = v14;
    unint64_t v6 = v15;
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v6) {
      break;
    }
    uint64_t v15 = (v6 - 1) & v6;
    unint64_t v16 = __clz(__rbit64(v6)) | (v11 << 6);
    int64_t v14 = v11;
LABEL_24:
    uint64_t v19 = 8 * v16;
    uint64_t v20 = *(void **)(*(void *)(v7 + 56) + v19);
    id v12 = *(id *)(*(void *)(v7 + 48) + v19);
    id v13 = v20;
    if (!v12) {
      goto LABEL_35;
    }
  }
  int64_t v14 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    return;
  }
  if (v14 >= v22) {
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v14);
  if (v17)
  {
LABEL_23:
    uint64_t v15 = (v17 - 1) & v17;
    unint64_t v16 = __clz(__rbit64(v17)) + (v14 << 6);
    goto LABEL_24;
  }
  int64_t v18 = v11 + 2;
  if (v11 + 2 >= v22) {
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v18 = v11 + 3;
  if (v11 + 3 >= v22) {
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  int64_t v18 = v11 + 4;
  if (v11 + 4 >= v22) {
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v18);
  if (v17)
  {
LABEL_22:
    int64_t v14 = v18;
    goto LABEL_23;
  }
  int64_t v14 = v11 + 5;
  if (v11 + 5 >= v22) {
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v23 + 8 * v14);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v21 = v11 + 6;
  while (v22 != v21)
  {
    unint64_t v17 = *(void *)(v23 + 8 * v21++);
    if (v17)
    {
      int64_t v14 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_35:
  sub_1000C1AF8();
}

id sub_1002D9298()
{
  uint64_t KeyPath = swift_getKeyPath();
  unint64_t v1 = (void *)sub_1003A02E0(KeyPath, (uint64_t)&off_1008B62A8);
  swift_release();
  type metadata accessor for REMCKSharedEntitySyncActivity();
  id v2 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  [v2 setEntity:v3];

  [v2 setAffectedStores:0];
  [v2 setPredicate:v1];
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  uint64_t v4 = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  uint64_t v5 = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077B710;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 40) = v5;
  specialized Array._endMutation()();
  id v7 = v4;
  id v8 = v5;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setSortDescriptors:isa];

  return v2;
}

void sub_1002D9454(NSObject *a1, uint64_t a2, NSObject *a3)
{
  os_log_t v64 = a3;
  uint64_t v5 = type metadata accessor for RDUserNotificationAction();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v65 = (void *)v5;
  uint64_t v66 = v6;
  __chkstk_darwin(v5);
  id v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v63 = (char *)v60 - v10;
  uint64_t v11 = type metadata accessor for RDUserNotificationType();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v17 = (char *)v60 - v16;
  __n128 v19 = __chkstk_darwin(v18);
  int64_t v21 = (id *)((char *)v60 - v20);
  unint64_t v23 = (char *)(v12 + 16);
  int64_t v22 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16);
  v22((char *)v60 - v20, a2, v11, v19);
  int v24 = (*(uint64_t (**)(id *, uint64_t))(v12 + 88))(v21, v11);
  if (v24 == enum case for RDUserNotificationType.reminderAlarm(_:)
    || v24 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
    goto LABEL_3;
  }
  if (v24 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(id *, uint64_t))(v12 + 96))(v21, v11);

    goto LABEL_4;
  }
  if (v24 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(id *, uint64_t))(v12 + 96))(v21, v11);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  if (v24 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
  {
    (*(void (**)(id *, uint64_t))(v12 + 96))(v21, v11);
    if (qword_100907270 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E2DC(v35, (uint64_t)qword_100912C20);
    int64_t v21 = a1;
    swift_bridgeObjectRetain();
    a1 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    unint64_t v23 = v8;
    if (os_log_type_enabled(a1, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v62 = v8;
      uint64_t v38 = v37;
      uint64_t v61 = swift_slowAlloc();
      uint64_t v68 = v61;
      *(_DWORD *)uint64_t v38 = 136315394;
      v60[1] = v38 + 4;
      id v39 = [v21 actionIdentifier];
      int64_t v40 = a1;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      uint64_t v67 = sub_1000C51B8(v41, v43, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2080;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v44 = Array.description.getter();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v67 = sub_1000C51B8(v44, v46, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v36, "ðŸ“” RDSyncActivityEngine: Processing shared list update notification {actionIdentifier:%s, reminderIDs: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v23 = v62;
      swift_slowDealloc();

      goto LABEL_29;
    }
  }
  else
  {
    if (v24 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:))
    {
LABEL_3:
      (*(void (**)(id *, uint64_t))(v12 + 8))(v21, v11);
      goto LABEL_4;
    }
    if (v24 == enum case for RDUserNotificationType.todayNotification(_:)
      || v24 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
      || v24 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
LABEL_4:
      unint64_t v25 = v17;
      if (qword_100907270 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_100912C20);
      ((void (*)(char *, uint64_t, uint64_t))v22)(v17, a2, v11);
      unint64_t v27 = a1;
      char v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        unint64_t v65 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        uint64_t v68 = v66;
        *(_DWORD *)uint64_t v30 = 136315394;
        os_log_t v64 = v28;
        ((void (*)(char *, char *, uint64_t))v22)(v14, v25, v11);
        uint64_t v31 = String.init<A>(describing:)();
        uint64_t v67 = sub_1000C51B8(v31, v32, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
        *(_WORD *)(v30 + 12) = 2112;
        uint64_t v67 = (uint64_t)v27;
        uint64_t v33 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v65 = v27;

        os_log_t v34 = v64;
        _os_log_impl((void *)&_mh_execute_header, v64, v29, "ðŸ“” RDSyncActivityEngine: Unexpected notification type {type: %s, response: %@}", (uint8_t *)v30, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v25, v11);
      }
      return;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }

  swift_bridgeObjectRelease_n();
LABEL_29:
  uint64_t v50 = v65;
  uint64_t v49 = v66;
  unint64_t v51 = *(void (**)(char *, os_log_t, void *))(v66 + 16);
  char v52 = v63;
  os_log_t v53 = v64;
  v51(v63, v64, v65);
  int v54 = (*(uint64_t (**)(char *, void *))(v49 + 88))(v52, v50);
  if (v54 != enum case for RDUserNotificationAction.defaultDismiss(_:)
    && v54 != enum case for RDUserNotificationAction.debugDismiss(_:)
    && v54 != enum case for RDUserNotificationAction.markAsCompleted(_:)
    && v54 != enum case for RDUserNotificationAction.snoozeForOneHour(_:)
    && v54 != enum case for RDUserNotificationAction.snoozeForOneDay(_:)
    && v54 != enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
    && v54 != enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
    && v54 != enum case for RDUserNotificationAction.addToReminders(_:)
    && v54 != enum case for RDUserNotificationAction.viewAssignmentInList(_:)
    && v54 != enum case for RDUserNotificationAction.declineAssignment(_:))
  {
    if (v54 == enum case for RDUserNotificationAction.viewRemindersInList(_:)) {
      return;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  v51(v23, v53, v50);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 136315138;
    uint64_t v58 = RDUserNotificationAction.rawValue.getter();
    uint64_t v67 = sub_1000C51B8(v58, v59, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void *))(v66 + 8))(v23, v50);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "ðŸ“” RDSyncActivityEngine: Unexpected action %s for notification type .sharedListAddedReminderNotification", v57, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, void *))(v66 + 8))(v23, v50);
  }
}

BOOL sub_1002D9E8C()
{
  return (**(unsigned char **)(v0 + 16) & 1) == 0;
}

uint64_t sub_1002D9EA0()
{
  return _swift_deallocObject(v0, 49, 7);
}

BOOL sub_1002D9EB0()
{
  return (*(unsigned char *)(v0 + 32) & 1) == 0;
}

uint64_t sub_1002D9EC0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D9EF8()
{
  return sub_1002D3C54();
}

uint64_t sub_1002D9F00()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002D9F38()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002D9F70()
{
  return sub_1002D857C();
}

uint64_t sub_1002D9FA0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002D9FE0(uint64_t a1, uint64_t *a2)
{
  return sub_10019838C(a1, *a2, a2[1], *(void *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24));
}

void sub_1002D9FF4()
{
  sub_1002D41B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

id sub_1002DA010()
{
  return sub_1002D6E2C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1002DA030@<X0>(void *a1@<X8>)
{
  return sub_1002D8488(a1);
}

uint64_t sub_1002DA058()
{
  return sub_1002D8504();
}

void sub_1002DA080(uint64_t a1, void *a2, void *a3)
{
  sub_1002D7028(a1, a2, a3, *(NSObject **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_1002DA088()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002DA0C8()
{
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1002DA0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002DA108()
{
  return swift_release();
}

uint64_t sub_1002DA110(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002DA158()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002DA1A0(uint64_t a1)
{
  sub_1002D72B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1002DA1AC@<X0>(void *a1@<X8>)
{
  return sub_1002D8488(a1);
}

uint64_t sub_1002DA1D4()
{
  return sub_1002D8504();
}

void sub_1002DA1FC(void *a1@<X8>)
{
}

uint64_t sub_1002DA218@<X0>(void *a1@<X8>)
{
  return sub_1002D8488(a1);
}

uint64_t sub_1002DA240()
{
  return sub_1002D8504();
}

void sub_1002DA268(uint64_t a1@<X8>)
{
  sub_1002D534C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1002DA284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100912F48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002DA314(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1002DA384()
{
  return sub_1002D857C();
}

void sub_1002DA3BC()
{
  sub_1002D3298(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void *sub_1002DA3F0()
{
  if ((sub_1002DC9A8() & 1) == 0)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100917E30);
    id v13 = v0;
    int64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_1000C51B8(0xD000000000000023, 0x80000001007D1050, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2082;
      id v17 = [v13 remObjectID];
      if (v17)
      {
        uint64_t v18 = v17;
        id v19 = [v17 description];

        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v22 = v21;
      }
      else
      {
        uint64_t v20 = 7104878;
        unint64_t v22 = 0xE300000000000000;
      }
      sub_1000C51B8(v20, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v38 = v15;
      id v39 = "ðŸ““ %s: Object is not eligible for journaling {remObjectID: %{public}s}";
      goto LABEL_25;
    }
LABEL_20:

    return _swiftEmptyArrayStorage;
  }
  if (qword_1009074F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917E30);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    sub_1000C51B8(0xD000000000000023, 0x80000001007D1050, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2082;
    id v6 = [v2 remObjectID];
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = [v6 description];

      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      uint64_t v9 = 7104878;
      unint64_t v11 = 0xE300000000000000;
    }
    sub_1000C51B8(v9, v11, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ðŸ““ %s: Considering reminder activity {remObjectID: %{public}s}", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v23 = [v2 storeControllerManagedObjectContext];
  if (!v23)
  {
    id v13 = v2;
    int64_t v14 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v31))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      sub_1000C51B8(0xD000000000000023, 0x80000001007D1050, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2082;
      id v32 = [v13 remObjectID];
      if (v32)
      {
        uint64_t v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 7104878;
        unint64_t v37 = 0xE300000000000000;
      }
      sub_1000C51B8(v35, v37, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v38 = v31;
      id v39 = "ðŸ““ %s: Unable to unwrap optional storeControllerManagedObjectContext {remObjectID: %{public}s}";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v14, v38, v39, (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return _swiftEmptyArrayStorage;
    }
    goto LABEL_20;
  }
  int v24 = v23;
  unint64_t v25 = sub_1001FD530();
  id v26 = v2;
  unint64_t v27 = sub_1002DD8D4((uint64_t)v25);
  swift_bridgeObjectRelease();

  id v28 = v26;
  id v29 = v24;
  uint64_t v30 = sub_1002DD9C4((unint64_t)v27, v29, v28);
  swift_bridgeObjectRelease();

  return v30;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDReminder.validateForInsert_Swift()()
{
}

Swift::Void __swiftcall REMCDReminder.willSave_Swift()()
{
  if ((objc_msgSend(v0, "willSave_hasProcessedDueDateDeltaAlertsDataChanges") & 1) == 0)
  {
    [v0 setWillSave_hasProcessedDueDateDeltaAlertsDataChanges:1];
    id v1 = [v0 changedValues];
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v3 = sub_1001261C0(v2);
    LOBYTE(v2) = sub_1001CBC20(0xD000000000000016, 0x80000001007C6970, v3);
    swift_bridgeObjectRelease();
    if (v2)
    {
      [v0 processDueDateDeltaAlertsDataChanges];
    }
  }
}

Swift::Void __swiftcall REMCDReminder.didSave_Swift()()
{
  [v0 setWillSave_hasProcessedDueDateDeltaAlertsDataChanges:0];
}

Swift::Void __swiftcall REMCDReminder.willChangeValue_Swift(for:)(Swift::String a1)
{
  [v1 setCachedDeserializedDueDateDeltaAlerts:0];
}

BOOL sub_1002DAC60()
{
  id v1 = v0;
  id v2 = [v0 currentUserShareParticipantID];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_100917E30);
    id v8 = v0;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 136446210;
      id v12 = [v8 remObjectID];
      if (v12)
      {
        id v13 = v12;
        id v14 = [v12 description];

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v17 = v16;
      }
      else
      {
        uint64_t v15 = 7104878;
        unint64_t v17 = 0xE300000000000000;
      }
      sub_1000C51B8(v15, v17, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ðŸ““ REMSharedActivityJournaling: Unable to get currentUserShareParticipantID from reminder. Assuming unit testing and returning CKCurrentUserDefaultName {reminderObjectID: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v18;
  }
  sub_1002DB0CC();
  if (v19)
  {
    v34[0] = v4;
    v34[1] = v6;
    sub_1000E4FD8();
    uint64_t v20 = StringProtocol.caseInsensitiveCompare<A>(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v20 == 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100917E30);
    id v23 = v1;
    int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)id v26 = 136446210;
      id v27 = [v23 remObjectID];
      if (v27)
      {
        id v28 = v27;
        id v29 = [v27 description];

        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v32 = v31;
      }
      else
      {
        uint64_t v30 = 7104878;
        unint64_t v32 = 0xE300000000000000;
      }
      sub_1000C51B8(v30, v32, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "ðŸ““: Unable to get authorUserID for reminder {reminderObjectID: %{public}s}", v26, 0xCu);
      uint64_t v21 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      return 1;
    }
  }
  return v21;
}

uint64_t sub_1002DB0CC()
{
  id v1 = [v0 list];
  if (!v1)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_100917E30);
    id v7 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446466;
      id v20 = [v7 remObjectID];
      if (v20)
      {
        uint64_t v21 = v20;
        id v22 = [v20 description];

        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v25 = v24;
      }
      else
      {
        uint64_t v23 = 7104878;
        unint64_t v25 = 0xE300000000000000;
      }
      sub_1000C51B8(v23, v25, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      [v7 isConcealed];
      uint64_t v68 = Bool.yesno.getter();
      sub_1000C51B8(v68, v69, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v18, "ðŸ““ REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_62;
    }

LABEL_25:
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = [v0 ckServerRecord];
  if (!v3)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100917E30);
    id v27 = v0;
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)id v29 = 136446210;
      id v30 = [v27 remObjectID];
      if (v30)
      {
        unint64_t v31 = v30;
        id v32 = [v30 description];

        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;
      }
      else
      {
        uint64_t v33 = 7104878;
        unint64_t v35 = 0xE300000000000000;
      }
      sub_1000C51B8(v33, v35, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v28, "ðŸ““ REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_62;
    }

    return 0;
  }
  uint64_t v4 = v3;
  if ([v0 isInserted])
  {
    id v5 = [v4 creatorUserRecordID];
    if (!v5)
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_100917E30);
      id v7 = v0;
      id v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v10 = 136446210;
        id v11 = [v7 remObjectID];
        if (v11)
        {
          id v12 = v11;
          id v13 = [v11 description];

          uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v16 = v15;
        }
        else
        {
          uint64_t v14 = 7104878;
          unint64_t v16 = 0xE300000000000000;
        }
        sub_1000C51B8(v14, v16, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_type_t v87 = v9;
        v88 = "ðŸ““ REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}";
        goto LABEL_59;
      }

      goto LABEL_25;
    }
  }
  else
  {
    id v5 = [v4 lastModifiedUserRecordID];
    if (!v5)
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v59 = type metadata accessor for Logger();
      sub_10008E2DC(v59, (uint64_t)qword_100917E30);
      id v60 = v0;
      id v8 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v8, v61))
      {

LABEL_62:
        return 0;
      }
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136446210;
      id v62 = [v60 remObjectID];
      if (v62)
      {
        v63 = v62;
        id v64 = [v62 description];

        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;
      }
      else
      {
        uint64_t v65 = 7104878;
        unint64_t v67 = 0xE300000000000000;
      }
      sub_1000C51B8(v65, v67, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v87 = v61;
      v88 = "ðŸ““ REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}";
LABEL_59:
      _os_log_impl((void *)&_mh_execute_header, v8, v87, v88, v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_62;
    }
  }
  id v36 = [v5 recordName];

  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v39 = v38;

  id v40 = [v2 ckServerShare];
  if (v40)
  {
    uint64_t v41 = v40;
    id v42 = [v40 participants];
    sub_1000963CC(0, (unint64_t *)&qword_100912FF0);
    unint64_t v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    swift_bridgeObjectRetain();
    uint64_t v44 = sub_10040B52C(v43, v37, v39);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v44)
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      sub_10008E2DC(v70, (uint64_t)qword_100917E30);
      id v71 = v0;
      swift_bridgeObjectRetain();
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 136446466;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v37, v39, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v74 + 12) = 2082;
        id v75 = [v71 remObjectID];
        if (v75)
        {
          unint64_t v76 = v75;
          id v77 = [v75 description];

          uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v80 = v79;
        }
        else
        {
          uint64_t v78 = 7104878;
          unint64_t v80 = 0xE300000000000000;
        }
        sub_1000C51B8(v78, v80, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "ðŸ““ REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_62;
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = CKShareParticipant.participantID.getter();
  }
  else
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10008E2DC(v45, (uint64_t)qword_100917E30);
    id v46 = v0;
    id v47 = v2;
    id v48 = v46;
    id v49 = v47;
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      os_log_type_t v90 = v51;
      uint64_t v52 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136446466;
      id v53 = [v48 remObjectID];
      if (v53)
      {
        int v54 = v53;
        id v55 = [v53 description];

        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v58 = v57;
      }
      else
      {
        unint64_t v58 = 0xE300000000000000;
        uint64_t v56 = 7104878;
      }
      sub_1000C51B8(v56, v58, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2082;
      id v81 = [v49 remObjectID];
      if (v81)
      {
        v82 = v81;
        id v83 = [v81 description];

        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v86 = v85;
      }
      else
      {
        unint64_t v86 = 0xE300000000000000;
        uint64_t v84 = 7104878;
      }
      sub_1000C51B8(v84, v86, &v91);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v90, "ðŸ““ REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return v37;
}

uint64_t sub_1002DBE8C(uint64_t a1)
{
  id v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v97 = *(void *)(v7 - 8);
  uint64_t v98 = v7;
  __chkstk_darwin(v7);
  v95 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v96 = (char *)&v84 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)&v84 - v19;
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  unint64_t v24 = (char *)&v84 - v23;
  id v25 = [v2 account:v22];
  if (!v25) {
    goto LABEL_7;
  }
  uint64_t v26 = v25;
  uint64_t v94 = a1;
  id v27 = [v25 identifier];

  if (v27)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v28(v20, 0, 1, v11);
  }
  else
  {
    os_log_type_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v28(v20, 1, 1, v11);
  }
  sub_100096408((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v24, 1, v11))
  {
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
LABEL_7:
    id v29 = self;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v31 = String._bridgeToObjectiveC()();
    [v29 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v31];

    swift_willThrow();
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v24, v11);
  sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
  uint64_t v45 = UUID.uuidString.getter();
  uint64_t v47 = v46;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  sub_1002DD620((uint64_t)v6);
  uint64_t v49 = v97;
  uint64_t v48 = v98;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v6, 1, v98) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v80 = sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
    __chkstk_darwin(v80);
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  }
  else
  {
    uint64_t v89 = v45;
    uint64_t v92 = v47;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v96, v6, v48);
    uint64_t v50 = sub_1002DB0CC();
    uint64_t v93 = v51;
    if (v51)
    {
      uint64_t v52 = v50;
      id v53 = [v2 parentCloudObject];
      os_log_type_t v90 = v28;
      if (v53)
      {
        int v54 = v53;
        id v55 = [(id)swift_getObjCClassFromObject() cdEntityName];
        uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v57 = v56;

        id v58 = [v54 ckIdentifier];
        if (v58)
        {
          uint64_t v59 = v58;
          uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v91 = v60;
        }
        else
        {

          uint64_t v88 = 0;
          uint64_t v91 = 0;
        }
      }
      else
      {
        uint64_t v88 = 0;
        uint64_t v91 = 0;
        uint64_t v86 = 0;
        uint64_t v57 = 0;
      }
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      v63 = (void *)swift_getObjCClassFromMetadata();
      id v64 = [v63 cdEntityName];
      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;

      id v67 = [v2 ckIdentifier];
      if (v67)
      {
        uint64_t v68 = v67;
        uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v85 = v52;
        uint64_t v70 = v69;

        uint64_t v71 = (uint64_t)v95;
        uint64_t v72 = qword_100785748[(char)v94];
        uint64_t v94 = v57;
        os_log_type_t v73 = v96;
        uint64_t v74 = v97;
        uint64_t v75 = v98;
        (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v95, v96, v98);
        v90(v17, 1, 1, v11);
        id v76 = objc_allocWithZone((Class)REMSharedEntitySyncActivity);
        id v44 = sub_10010B65C(v89, v92, v71, v72, v85, v93, v86, v94, v88, v91, v84, v70, v87, v66, (uint64_t)v17);
        (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
        return (uint64_t)v44;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v78 = self;
      NSString v79 = String._bridgeToObjectiveC()();
      [v78 unexpectedNilPropertyWithClass:v63 property:v79];

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
LABEL_8:
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10008E2DC(v32, (uint64_t)qword_100917E30);
      id v33 = v2;
      swift_errorRetain();
      id v34 = v33;
      swift_errorRetain();
      unint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        v99[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315650;
        uint64_t v100 = sub_1000C51B8(0xD000000000000010, 0x80000001007D1080, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v37 + 12) = 2082;
        id v38 = [v34 remObjectID];
        if (v38)
        {
          unint64_t v39 = v38;
          id v40 = [v38 description];

          uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v43 = v42;
        }
        else
        {
          unint64_t v43 = 0xE300000000000000;
          uint64_t v41 = 7104878;
        }
        uint64_t v100 = sub_1000C51B8(v41, v43, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 22) = 2082;
        swift_getErrorValue();
        uint64_t v61 = Error.rem_errorDescription.getter();
        uint64_t v100 = sub_1000C51B8(v61, v62, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "ðŸ““ %s: An unexpected error occurred {remObjectID: %{public}s, description: %{public}s}", (uint8_t *)v37, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        return 0;
      }
      else
      {
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();

        return 0;
      }
    }
    uint64_t v81 = swift_bridgeObjectRelease();
    __chkstk_darwin(v81);
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  }
  uint64_t KeyPath = swift_getKeyPath();
  v99[0] = 0;
  v99[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v83._object = (void *)0x80000001007CAF70;
  v83._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v83);
  uint64_t v100 = KeyPath;
  sub_100094134((uint64_t *)&unk_10090B070);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002DC9A8()
{
  if (![v0 isSharedViaICloud])
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_100917E30);
    id v2 = v0;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v34 = sub_1000C51B8(0xD000000000000017, 0x80000001007D10A0, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      [v2 isSharedViaICloud:v34];
      uint64_t v10 = Bool.yesno.getter();
      sub_1000C51B8(v10, v11, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      uint64_t v8 = "ðŸ““ %s: Object is not eligible for journaling {isSharedViaICloud: %s}";
      goto LABEL_11;
    }
LABEL_29:

    return 0;
  }
  if (([v0 isConcealed] & 1) == 0)
  {
    if (sub_1002DAC60())
    {
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_100917E30);
      id v2 = v0;
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v3, v15))
      {
        uint64_t v16 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 136315394;
        sub_1000C51B8(0xD000000000000017, 0x80000001007D10A0, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v16 + 12) = 2080;
        sub_1002DAC60();
        uint64_t v17 = Bool.yesno.getter();
        sub_1000C51B8(v17, v18, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v3, v15, "ðŸ““ %s: Object is not eligible for journaling {isAuthoredByCurrentUser: %s}", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_13;
      }
    }
    else
    {
      id v19 = [v0 managedObjectContext];
      if (v19)
      {
        id v20 = v19;
        id v21 = [v19 transactionAuthor];

        if (v21)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          v22._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
          Swift::Bool v23 = String.hasPrefix(_:)(v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v23) {
            return 1;
          }
        }
      }
      if (qword_1009074F8 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E2DC(v25, (uint64_t)qword_100917E30);
      id v2 = v0;
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v3, v26))
      {
        uint64_t v27 = 7104878;
        uint64_t v5 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v5 = 136315394;
        uint64_t v35 = sub_1000C51B8(0xD000000000000017, 0x80000001007D10A0, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v5 + 12) = 2082;
        id v28 = [v2 managedObjectContext:v35];
        if (v28
          && (id v29 = v28,
              id v30 = [v28 transactionAuthor],
              v29,
              v30))
        {
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v32 = v31;
        }
        else
        {
          unint64_t v32 = 0xE300000000000000;
        }
        sub_1000C51B8(v27, v32, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_type_t v13 = v26;
        uint64_t v8 = "ðŸ““ %s: Object is not eligible for journaling - transactionAuthor: %{public}s";
        uint64_t v12 = v3;
        goto LABEL_12;
      }
    }
    goto LABEL_29;
  }
  if (qword_1009074F8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100917E30);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v3, v4)) {
    goto LABEL_29;
  }
  uint64_t v5 = swift_slowAlloc();
  uint64_t v36 = swift_slowAlloc();
  *(_DWORD *)uint64_t v5 = 136315394;
  uint64_t v33 = sub_1000C51B8(0xD000000000000017, 0x80000001007D10A0, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v5 + 12) = 2080;
  [v2 isConcealed:v33];
  uint64_t v6 = Bool.yesno.getter();
  sub_1000C51B8(v6, v7, &v36);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  uint64_t v8 = "ðŸ““ %s: Object is not eligible for journaling {isConcealed: %s}";
LABEL_11:
  uint64_t v12 = v3;
  os_log_type_t v13 = v4;
LABEL_12:
  _os_log_impl((void *)&_mh_execute_header, v12, v13, v8, (uint8_t *)v5, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_13:
  swift_slowDealloc();

  return 0;
}

uint64_t sub_1002DD0EC(void *a1, void *a2, void *a3)
{
  uint64_t v5 = sub_100236284(a1, a2);
  if (v5)
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100917E30);
    id v7 = a1;
    id v8 = a3;
    id v9 = v7;
    id v10 = v8;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v41 = v12;
      uint64_t v43 = v5;
      uint64_t v13 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      sub_1000C51B8(0xD000000000000023, 0x80000001007D1050, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      id v14 = [v9 activityTypeDescription];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      sub_1000C51B8(v15, v17, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2082;
      id v18 = [v10 remObjectID];
      if (v18)
      {
        id v19 = v18;
        id v20 = [v18 description];

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;
      }
      else
      {
        uint64_t v21 = 7104878;
        unint64_t v23 = 0xE300000000000000;
      }
      uint64_t v5 = v43;
      sub_1000C51B8(v21, v23, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v38 = v41;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v11, v38, v39, (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v5;
    }
  }
  else
  {
    if (qword_1009074F8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_100917E30);
    id v25 = a1;
    id v26 = a3;
    id v9 = v25;
    id v10 = v26;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v27))
    {
      os_log_type_t v42 = v27;
      uint64_t v13 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      sub_1000C51B8(0xD000000000000023, 0x80000001007D1050, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2082;
      id v28 = [v9 activityTypeDescription];
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      sub_1000C51B8(v29, v31, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2082;
      id v32 = [v10 remObjectID];
      if (v32)
      {
        uint64_t v33 = v32;
        id v34 = [v32 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v37 = v36;
      }
      else
      {
        uint64_t v35 = 7104878;
        unint64_t v37 = 0xE300000000000000;
      }
      uint64_t v5 = 0;
      sub_1000C51B8(v35, v37, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_type_t v38 = v42;
      goto LABEL_17;
    }
  }

  return v5;
}

uint64_t sub_1002DD620@<X0>(uint64_t a1@<X8>)
{
  id v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v8 = __chkstk_darwin(v7).n128_u64[0];
  id v10 = (char *)&v24 - v9;
  unsigned int v11 = [v2 isInserted:v8];
  id v12 = [v2 ckServerRecord];
  uint64_t v13 = v12;
  if (v11)
  {
    if (v12)
    {
      id v14 = [v12 creationDate];

      if (v14)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
      }
      else
      {
        uint64_t v21 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
      }
      uint64_t v22 = (uint64_t)v10;
      return sub_100096408(v22, a1, (uint64_t *)&unk_100909A40);
    }
  }
  else if (v12)
  {
    id v16 = [v12 modificationDate];

    if (v16)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v6, 0, 1, v17);
    }
    else
    {
      uint64_t v23 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v6, 1, 1, v23);
    }
    uint64_t v22 = (uint64_t)v6;
    return sub_100096408(v22, a1, (uint64_t *)&unk_100909A40);
  }
  uint64_t v18 = type metadata accessor for Date();
  id v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);

  return v19(a1, 1, 1, v18);
}

void *sub_1002DD8D4(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v3; ++i)
    {
      if (sub_1002DBE8C(*(unsigned __int8 *)(a1 + i + 32)))
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1002DD9C4(unint64_t a1, void *a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      double v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v10 = sub_1002DD0EC(v7, a2, a3);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }
      uint64_t v11 = v10;

      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002DDB58@<X0>(uint64_t a1@<X8>)
{
  return sub_10040B248(a1);
}

uint64_t sub_1002DDB88()
{
  return 8;
}

void *sub_1002DDB94(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002DDBA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10040A690();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1002DDBD8()
{
  return 8;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> REMCDReminder.validateForUpdate_Swift()()
{
}

uint64_t sub_1002DDC04@<X0>(unint64_t *a1@<X8>)
{
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E60;
  *(void *)(inited + 32) = 0x7265646E696D6572;
  *(void *)(inited + 40) = 0xEA00000000004449;
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0x44646574656C6564;
  *(void *)(inited + 88) = 0xEB00000000657461;
  type metadata accessor for RDPermanentlyHiddenReminder();
  Date.timeIntervalSinceReferenceDate.getter();
  *(void *)(inited + 96) = v4;
  *(void *)(inited + 120) = &type metadata for Double;
  *(void *)(inited + 128) = 0xD000000000000017;
  *(void *)(inited + 168) = &type metadata for Int;
  uint64_t v5 = kREMSupportedVersionFor2024;
  *(void *)(inited + 136) = 0x80000001007C63B0;
  *(void *)(inited + 144) = v5;
  *a1 = sub_1001805C0(inited);
  uint64_t v6 = enum case for REMJSONType.jsonObject(_:);
  uint64_t v7 = type metadata accessor for REMJSONType();
  return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(a1, v6, v7);
}

uint64_t sub_1002DDD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100913060);
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  __chkstk_darwin(v3);
  os_log_type_t v42 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  os_log_type_t v41 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_100909CE0);
  uint64_t v46 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v48 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_100909CD0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMJSONType();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, a1, v14, v16);
  int v19 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v18, v14);
  if (v19 == enum case for REMJSONType.jsonObject(_:))
  {
    (*(void (**)(char *, uint64_t))(v15 + 96))(v18, v14);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v10);
    uint64_t v50 = kREMSupportedVersionFor2024;
    uint64_t v20 = v49;
    Dictionary<>.deserializeOptional<A>(key:valueType:defaultValue:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    if (v20) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v26 = v51;
    if (rem_isUnsupportedVersionByRuntime())
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for REMJSONDeserializationError();
      sub_1002DE470();
      swift_allocError();
      uint64_t v24 = v27;
      *os_log_type_t v27 = v26;
      id v25 = (unsigned int *)&enum case for REMJSONDeserializationError.notSupported(_:);
      goto LABEL_6;
    }
    uint64_t v28 = v46;
    (*(void (**)(char *, void, uint64_t))(v46 + 104))(v8, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v6);
    uint64_t v29 = v47;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
    uint64_t v31 = v44;
    uint64_t v30 = v45;
    id v32 = v42;
    (*(void (**)(char *, void, uint64_t))(v44 + 104))(v42, enum case for Dictionary<>.DeserializableValueType.date<A, B><A1>(_:), v45);
    uint64_t v33 = v41;
    uint64_t v34 = v43;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
    swift_bridgeObjectRelease();
    uint64_t v35 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v39, v48, v29);
    uint64_t v36 = type metadata accessor for RDPermanentlyHiddenReminder();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v35 + *(int *)(v36 + 20), v33, v34);
  }
  else
  {
    if (v19 == enum case for REMJSONType.jsonArray(_:))
    {
      (*(void (**)(char *, uint64_t))(v15 + 96))(v18, v14);
      swift_bridgeObjectRelease();
      uint64_t v22 = type metadata accessor for REMJSONDeserializationError();
      sub_1002DE470();
      swift_allocError();
      uint64_t v24 = v23;
      id v25 = (unsigned int *)&enum case for REMJSONDeserializationError.invalidData(_:);
LABEL_6:
      (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *v25, v22);
      return swift_willThrow();
    }
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1002DE440@<X0>(unint64_t *a1@<X8>)
{
  return sub_1002DDC04(a1);
}

uint64_t sub_1002DE458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002DDD5C(a1, a2);
}

unint64_t sub_1002DE470()
{
  unint64_t result = qword_100909CE8;
  if (!qword_100909CE8)
  {
    type metadata accessor for REMJSONDeserializationError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909CE8);
  }
  return result;
}

uint64_t sub_1002DE4C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10022B134(a1, (uint64_t)&v20);
  if (v21)
  {
    sub_1000967D4(&v20, (uint64_t)v22);
    sub_100096838((uint64_t)v22, (uint64_t)&v20);
    uint64_t v3 = sub_100096204((uint64_t)&v20, v21);
    __chkstk_darwin(v3);
    uint64_t v5 = (void *)((char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v6 + 16))(v5);
    uint64_t v7 = *v5;
    uint64_t v8 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
    v19[3] = v8;
    v19[4] = &off_1008C0CC0;
    v19[0] = v7;
    uint64_t v9 = type metadata accessor for _MobileKeybagStateProvider();
    uint64_t v10 = swift_allocObject();
    uint64_t v11 = sub_100096204((uint64_t)v19, v8);
    __chkstk_darwin(v11);
    uint64_t v13 = (void *)((char *)&v19[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v14 + 16))(v13);
    uint64_t v15 = sub_1002E0558(*v13, v10);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v19);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v20);
    a2[3] = v9;
    a2[4] = (uint64_t)&off_1008C0CE8;
    *a2 = v15;
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
  }
  else
  {
    sub_1002E0AD4((uint64_t)&v20);
    if (qword_100907288 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_100913088;
    a2[3] = type metadata accessor for _MobileKeybagStateProvider();
    a2[4] = (uint64_t)&off_1008C0CE8;
    *a2 = v17;
    return swift_retain();
  }
}

uint64_t sub_1002DE744()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100913070);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100913070);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_1002DE80C(char a1)
{
  unint64_t result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64656B636F6C6E75;
      break;
    case 2:
      unint64_t result = 0x64656B636F6CLL;
      break;
    case 3:
      unint64_t result = 0x676E696B636F6CLL;
      break;
    case 4:
      unint64_t result = 0x64656C6261736964;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x5065636172476E69;
      break;
    case 7:
      unint64_t result = 0x7472657373416E69;
      break;
    case 8:
      unint64_t result = 0x6C6E556F69426E69;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1002DE948()
{
  return sub_1002DE80C(*v0);
}

uint64_t type metadata accessor for RDKeybagStateProviderFactory()
{
  return self;
}

uint64_t sub_1002DE974()
{
  uint64_t v9 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  uint64_t v10 = &off_1008C0CC0;
  v8[0] = swift_initStaticObject();
  type metadata accessor for _MobileKeybagStateProvider();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = sub_100096204((uint64_t)v8, v9);
  __chkstk_darwin(v1);
  uint64_t v3 = (void *)((char *)&v8[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v4 + 16))(v3);
  uint64_t v5 = sub_1002E0558(*v3, v0);
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v8);
  qword_100913088 = v5;
  return result;
}

uint64_t sub_1002DEA94@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 97);
  return result;
}

uint64_t sub_1002DEAA0()
{
  if (*(void *)(v0 + 72)) {
    MKBEventsUnregister();
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);

  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _MobileKeybagStateProvider()
{
  return self;
}

void sub_1002DEB28(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = os_transaction_create();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100913070);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v15, 2u);
    swift_slowDealloc();
  }

  __n128 v16 = *(void **)(v1 + 56);
  *uint64_t v11 = v16;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x1002DF364);
  }
  uint64_t v18 = a1;
  uint64_t v19 = *(unsigned __int8 *)(v1 + 96);
  long long v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  if (v19 == v18)
  {
    if (v22)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v23, 2u);
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (v22)
    {
      uint64_t v24 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446466;
      unint64_t v25 = 0xE700000000000000;
      uint64_t v26 = 0x6E776F6E6B6E75;
      switch(v18)
      {
        case 1:
          unint64_t v25 = 0xE800000000000000;
          uint64_t v26 = 0x64656B636F6C6E75;
          break;
        case 2:
          unint64_t v25 = 0xE600000000000000;
          uint64_t v26 = 0x64656B636F6CLL;
          break;
        case 3:
          uint64_t v26 = 0x676E696B636F6CLL;
          break;
        case 4:
          unint64_t v25 = 0xE800000000000000;
          uint64_t v26 = 0x64656C6261736964;
          break;
        case 5:
          unint64_t v25 = 0x80000001007D1290;
          uint64_t v26 = 0xD000000000000010;
          break;
        case 6:
          uint64_t v26 = 0x5065636172476E69;
          unint64_t v25 = 0xED0000646F697265;
          break;
        case 7:
          uint64_t v26 = 0x7472657373416E69;
          unint64_t v25 = 0xED000079616C6544;
          break;
        case 8:
          uint64_t v26 = 0x6C6E556F69426E69;
          unint64_t v25 = 0xEB000000006B636FLL;
          break;
        default:
          break;
      }
      os_log_type_t v42 = (void *)sub_1000C51B8(v26, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2082;
      unint64_t v27 = 0xE700000000000000;
      uint64_t v28 = 0x6E776F6E6B6E75;
      switch(v19)
      {
        case 1:
          unint64_t v27 = 0xE800000000000000;
          uint64_t v28 = 0x64656B636F6C6E75;
          break;
        case 2:
          unint64_t v27 = 0xE600000000000000;
          uint64_t v28 = 0x64656B636F6CLL;
          break;
        case 3:
          uint64_t v28 = 0x676E696B636F6CLL;
          break;
        case 4:
          unint64_t v27 = 0xE800000000000000;
          uint64_t v28 = 0x64656C6261736964;
          break;
        case 5:
          unint64_t v27 = 0x80000001007D1290;
          uint64_t v28 = 0xD000000000000010;
          break;
        case 6:
          uint64_t v28 = 0x5065636172476E69;
          unint64_t v27 = 0xED0000646F697265;
          break;
        case 7:
          uint64_t v28 = 0x7472657373416E69;
          unint64_t v27 = 0xED000079616C6544;
          break;
        case 8:
          uint64_t v28 = 0x6C6E556F69426E69;
          unint64_t v27 = 0xEB000000006B636FLL;
          break;
        default:
          break;
      }
      os_log_type_t v42 = (void *)sub_1000C51B8(v28, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "_MobileKeybagStateProvider: Transition: %{public}s -> %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v29 = *(void **)(v2 + 64);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v2;
    *(unsigned char *)(v30 + 24) = v19;
    *(void *)(v30 + 32) = v41;
    aBlock[4] = (uint64_t)sub_1002E0A70;
    aBlock[5] = v30;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100236C78;
    aBlock[3] = (uint64_t)&unk_1008C0DC0;
    uint64_t v31 = _Block_copy(aBlock);
    id v32 = v29;
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    os_log_type_t v42 = _swiftEmptyArrayStorage;
    sub_1002E0B34((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    uint64_t v33 = v37;
    uint64_t v34 = v40;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v38);
    swift_release();
  }
}

void sub_1002DF3AC()
{
  PassthroughSubject.send(_:)();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100913070);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_lockState.didSet}", v3, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1002DF49C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v2 - 8);
  uint64_t v32 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v5 - 8);
  uint64_t v30 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = os_transaction_create();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100913070);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_hasUnlockedSinceBoot.didSet}", v15, 2u);
    swift_slowDealloc();
  }

  __n128 v16 = *(void **)(v0 + 56);
  *uint64_t v11 = v16;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v16)
  {
    int v19 = *(unsigned __int8 *)(v0 + 97);
    long long v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      BOOL v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v22 = 67109120;
      LODWORD(aBlock[0]) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "_MobileKeybagStateProvider: Has unlocked since boot: %{BOOL}d", v22, 8u);
      swift_slowDealloc();
    }

    uint64_t v23 = *(void **)(v1 + 64);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v1;
    *(unsigned char *)(v24 + 24) = v19;
    *(void *)(v24 + 32) = v28;
    aBlock[4] = sub_1002E0AC4;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008C0E10;
    unint64_t v25 = _Block_copy(aBlock);
    id v26 = v23;
    swift_retain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_1002E0B34((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    uint64_t v27 = v32;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v25);
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v27);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v30);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002DF9A0()
{
  swift_retain();
  CurrentValueSubject.send(_:)();
  swift_release();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100913070);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.eventQueue_hasUnlockedSinceBoot.didSet}", v3, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1002DFAA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = os_transaction_create();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100913070);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.updateInternalStates}", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = *(void **)(v1 + 56);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  *(void *)(v8 + 24) = v2;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1002E00A4;
  *(void *)(v9 + 24) = v8;
  v14[4] = sub_10008F6F4;
  v14[5] = v9;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1003B3260;
  v14[3] = &unk_1008C0D70;
  uint64_t v10 = _Block_copy(v14);
  uint64_t v11 = v7;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v10);

  swift_unknownObjectRelease();
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void sub_1002DFCDC(uint64_t a1)
{
  if (sub_1002E08E8() != *(unsigned char *)(a1 + 97))
  {
    *(unsigned char *)(a1 + 97) = sub_1002E08E8();
    sub_1002DF49C();
  }
  if (*(unsigned __int8 *)(a1 + 96) != sub_1002E0A14())
  {
    char v2 = sub_1002E0A14();
    unsigned __int8 v3 = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(a1 + 96) = v2;
    sub_1002DEB28(v3);
  }
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100913070);
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.updateInternalStates}", v6, 2u);
    swift_slowDealloc();
  }
}

void sub_1002DFE10(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1002DFE88()
{
  sub_1002EF2A0((uint64_t)&off_1008B62D0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t result = swift_bridgeObjectRelease();
  qword_100913090 = (uint64_t)isa;
  return result;
}

uint64_t type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RDKeybagLockState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002DFFD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDKeybagLockState()
{
  return &type metadata for RDKeybagLockState;
}

unint64_t sub_1002E0010()
{
  unint64_t result = qword_100913388;
  if (!qword_100913388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100913388);
  }
  return result;
}

uint64_t sub_1002E0064()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002E00A4()
{
  sub_1002DFCDC(*(void *)(v0 + 16));
}

uint64_t sub_1002E00AC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E00BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002E00CC()
{
  return swift_release();
}

void sub_1002E00D4(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_transaction_create();
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_100913070);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd._MobileKeybagStateProvider.mkbEventRegistration.callback}", v9, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = *(void **)(Strong + 56);
    void *v5 = v12;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
    id v13 = v12;
    LOBYTE(v12) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
    if ((v12 & 1) == 0)
    {
      __break(1u);
      return;
    }
    if (a1)
    {
      if (a1 == 1)
      {
        *(unsigned char *)(v11 + 97) = 1;
        sub_1002DF49C();
      }
      else
      {
        char v14 = sub_1002E0A14();
        unsigned __int8 v15 = *(unsigned char *)(v11 + 96);
        *(unsigned char *)(v11 + 96) = v14;
        sub_1002DEB28(v15);
      }
    }
    swift_release();
  }
  __n128 v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "os_transaction RELEASE {name: com.apple.remindd._MobileKeybagStateProvider.mkbEventRegistration.callback}", v18, 2u);
    swift_slowDealloc();
  }
  swift_unknownObjectRelease();
}

uint64_t sub_1002E0398(uint64_t a1, uint64_t a2)
{
  v14[3] = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  v14[4] = &off_1008C0CC0;
  v14[0] = a2;
  swift_retain();
  sub_1002DFAA0();
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  sub_100096838((uint64_t)v14, (uint64_t)v13);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  sub_1000967D4(v13, v6 + 24);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1002E0BF4;
  *(void *)(v7 + 24) = v6;
  v12[4] = sub_1002E0C38;
  v12[5] = v7;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1002DFE10;
  v12[3] = &unk_1008C0EB0;
  os_log_type_t v8 = _Block_copy(v12);
  id v9 = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v10 = MKBEventsRegister();
  _Block_release(v8);
  swift_release();
  swift_release();

  swift_release();
  *(void *)(a1 + 72) = v10;
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v14);
}

uint64_t sub_1002E0558(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v21 = type metadata accessor for _MobileKeybagStateProvider._MKBEventsControllerImplementation();
  BOOL v22 = &off_1008C0CC0;
  v20[0] = a1;
  v16[0] = sub_1000D0FD4();
  static DispatchQoS.userInteractive.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  v16[3] = sub_1002E0B34((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v16[2] = sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000BFEAC((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v8 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v9 = v3 + 104;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v16[1] = v9;
  uint64_t v11 = v17;
  v10(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v17);
  uint64_t v12 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v13 = v18;
  *(void *)(v18 + 56) = v12;
  static DispatchQoS.userInteractive.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v10(v5, v8, v11);
  *(void *)(v13 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v13 + 72) = 0;
  sub_100094134(&qword_100913390);
  swift_allocObject();
  *(void *)(v13 + 80) = PassthroughSubject.init()();
  LOBYTE(v19) = 0;
  sub_100094134(&qword_100910AE8);
  swift_allocObject();
  *(void *)(v13 + 88) = CurrentValueSubject.init(_:)();
  *(_WORD *)(v13 + 96) = 4;
  sub_100096838((uint64_t)v20, v13 + 16);
  char v14 = sub_1000C0DE0(v20, v21);
  sub_1002E0398(v13, *v14);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  return v13;
}

BOOL sub_1002E08E8()
{
  int v0 = MKBDeviceUnlockedSinceBoot();
  if ((v0 & 0x80000000) == 0) {
    return v0 == 1;
  }
  if (qword_100907280 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100913070);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "_MobileKeybagStateProvider: MKBDeviceUnlockedSinceBoot() unexpectedly returned %d. Assuming device is before first unlock.", v5, 8u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_1002E0A14()
{
  if (qword_100907290 != -1) {
    swift_once();
  }
  unsigned int v0 = MKBGetDeviceLockState();
  if (v0 < 8) {
    return v0 + 1;
  }
  else {
    return 0;
  }
}

void sub_1002E0A70()
{
}

uint64_t sub_1002E0A84()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002E0AC4()
{
}

uint64_t sub_1002E0AD4(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100908140);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002E0B34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E0B7C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002E0BB4()
{
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1002E0BF4(char a1)
{
}

uint64_t sub_1002E0C00()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E0C38(int a1)
{
  if (a1) {
    uint64_t v2 = 2 * (a1 == 1);
  }
  else {
    uint64_t v2 = 1;
  }
  return (*(uint64_t (**)(uint64_t))(v1 + 16))(v2);
}

void sub_1002E0C8C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 sharedToMeReminderCKIdentifier];
  if (v3)
  {
    os_log_type_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1002E0CF4(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setSharedToMeReminderCKIdentifier:];
}

uint64_t sub_1002E0D64(void *a1, char a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = _swiftEmptyArrayStorage;
  switch(a2)
  {
    case 1:
      uint64_t KeyPath = swift_getKeyPath();
      sub_1002E13B8(a1, 1);
      sub_10032EDA0(KeyPath, 1);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1)
      {
        uint64_t v31 = v33[2];
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v12 = swift_getKeyPath();
      id v13 = [a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 0, 1, v14);
      sub_10032EDAC(v12, (uint64_t)v6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unsigned __int8 v15 = a1;
      char v16 = 1;
      goto LABEL_15;
    case 2:
      uint64_t v17 = swift_getKeyPath();
      sub_1002E13B8(a1, 2);
      sub_10032EDA0(v17, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1)
      {
        uint64_t v31 = v33[2];
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v18 = swift_getKeyPath();
      id v19 = [a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v6, 0, 1, v20);
      sub_10032EDAC(v18, (uint64_t)v6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unsigned __int8 v15 = a1;
      char v16 = 2;
LABEL_15:
      sub_1002E1434(v15, v16);
      goto LABEL_16;
    case 3:
      if (!a1)
      {
        uint64_t v29 = swift_getKeyPath();
        sub_10039F51C(v29);
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v33[2] >= v33[3] >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_16;
      }
      if (a1 != (void *)1)
      {
LABEL_16:
        sub_1002F51CC(0);
        goto LABEL_17;
      }
      uint64_t v22 = swift_getKeyPath();
      sub_10039F540(v22);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_100094134(&qword_10090DCD0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      uint64_t v24 = swift_getKeyPath();
      uint64_t v25 = sub_10039F51C(v24);
      swift_release();
      *(void *)(inited + 32) = v25;
      uint64_t v26 = swift_getKeyPath();
      uint64_t v27 = swift_getKeyPath();
      uint64_t v28 = sub_1002E1D24(v26, v27, &qword_10090DC60);
      swift_release();
      swift_release();
      *(void *)(inited + 40) = v28;
      uint64_t v32 = inited;
      specialized Array._endMutation()();
      sub_100397E58(v32);
LABEL_17:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      return sub_1002F52FC(v33);
    default:
      uint64_t v7 = swift_getKeyPath();
      uint64_t v8 = sub_1001FF8A4((uint64_t)a1);
      uint64_t v9 = (void *)sub_10039F564(v7, (uint64_t)v8);
      swift_release();
      id v10 = v9;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v33[2] >= v33[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_16;
  }
}

id sub_1002E1320@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 hashtagLabel];
  *a2 = result;
  return result;
}

id sub_1002E135C(void *a1, id *a2)
{
  return [*a2 setHashtagLabel:*a1];
}

id sub_1002E1370@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 type];
  *a2 = (_WORD)result;
  return result;
}

id sub_1002E13A4(__int16 *a1, id *a2)
{
  return [*a2 setType:*a1];
}

id sub_1002E13B8(id result, char a2)
{
  if (a2 == 2 || a2 == 1) {
    return result;
  }
  if (!a2) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

id sub_1002E13DC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1002E1418(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

void sub_1002E1434(void *a1, char a2)
{
  if (a2 == 2 || a2 == 1)
  {
  }
  else if (!a2)
  {
    swift_bridgeObjectRelease();
  }
}

id sub_1002E1458@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_1002E1494(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

id sub_1002E14C0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 hashtagLabel];
  *a2 = result;
  return result;
}

id sub_1002E14FC(void *a1, id *a2)
{
  return [*a2 setHashtagLabel:*a1];
}

uint64_t sub_1002E1510(void *a1, unint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v56 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)sub_1002E0D64(a1, 0);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];
  id v53 = v10;
  [v10 setResultType:2];

  uint64_t v55 = sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  *(void *)&long long v63 = inited;
  specialized Array._endMutation()();
  Class isa = (Class)v63;
  uint64_t v65 = (objc_class *)_swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 2, 0);
  uint64_t v14 = v65;
  unint64_t v15 = (unint64_t)isa & 0xC000000000000001;
  v52[2] = v6;
  unint64_t v60 = a2;
  if (((unint64_t)isa & 0xC000000000000001) != 0)
  {
    unint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    unint64_t v16 = *((void *)isa + 4);
    swift_retain();
  }
  uint64_t v17 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v18) {
    goto LABEL_48;
  }
  uint64_t v19 = v17;
  uint64_t v20 = v18;
  uint64_t v21 = (uint64_t *)&type metadata for String;
  id v64 = &type metadata for String;
  swift_release();
  *(void *)&long long v63 = v19;
  *((void *)&v63 + 1) = v20;
  unint64_t v23 = *((void *)v14 + 2);
  unint64_t v22 = *((void *)v14 + 3);
  unint64_t v16 = v23 + 1;
  if (v23 >= v22 >> 1)
  {
LABEL_45:
    sub_1001DE1C4(v22 > 1, v16, 1);
    uint64_t v14 = v65;
  }
  *((void *)v14 + 2) = v16;
  sub_10009A1A0(&v63, (_OWORD *)v14 + 2 * v23 + 2);
  if (v15)
  {
    unint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    unint64_t v16 = *((void *)isa + 5);
    swift_retain();
  }
  uint64_t v24 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  id v26 = v53;
  if (v25)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    id v64 = v21;
    swift_release();
    *(void *)&long long v63 = v27;
    *((void *)&v63 + 1) = v28;
    uint64_t v65 = v14;
    unint64_t v30 = *((void *)v14 + 2);
    unint64_t v29 = *((void *)v14 + 3);
    if (v30 >= v29 >> 1)
    {
      sub_1001DE1C4(v29 > 1, v30 + 1, 1);
      uint64_t v14 = v65;
    }
    *((void *)v14 + 2) = v30 + 1;
    sub_10009A1A0(&v63, (_OWORD *)v14 + 2 * v30 + 2);
    swift_bridgeObjectRelease();
    unint64_t v16 = (unint64_t)&type metadata for Any;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v26 setPropertiesToFetch:isa];

    sub_1000963CC(0, &qword_10090E4F0);
    unint64_t v31 = NSManagedObjectContext.fetch<A>(_:)();
    if (v3)
    {
    }
    else
    {
      unint64_t v3 = v31;
      uint64_t v65 = (objc_class *)_swiftEmptyDictionarySingleton;
      if (v31 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v32 = *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v52[1] = 0;
      if (v32)
      {
        unint64_t v60 = v3 & 0xC000000000000001;
        Class isa = (Class)_swiftEmptyDictionarySingleton;
        unint64_t v15 = 4;
        unint64_t v59 = 0x8000000100785A00;
        uint64_t v21 = &qword_100908190;
        long long v54 = xmmword_10077A530;
        uint64_t v57 = (char *)&type metadata for Any + 8;
        uint64_t v58 = v32;
        while (1)
        {
          if (v60) {
            id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v34 = *(id *)(v3 + 8 * v15);
          }
          unint64_t v23 = (unint64_t)v34;
          unint64_t v35 = v15 - 3;
          if (__OFADD__(v15 - 4, 1))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            goto LABEL_45;
          }
          NSString v36 = String._bridgeToObjectiveC()();
          id v37 = [(id)v23 valueForKey:v36];

          if (v37)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v61, 0, sizeof(v61));
          }
          sub_100096408((uint64_t)v61, (uint64_t)&v63, &qword_100908190);
          if (v64)
          {
            uint64_t v38 = type metadata accessor for UUID();
            int v39 = swift_dynamicCast();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v8, v39 ^ 1u, 1, v38);
          }
          else
          {
            sub_1000966BC((uint64_t)&v63, &qword_100908190);
            uint64_t v40 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v8, 1, 1, v40);
          }
          unint64_t v16 = sub_10030768C((uint64_t)v8);
          unint64_t v22 = *((void *)isa + 2);
          BOOL v42 = (v41 & 1) == 0;
          uint64_t v43 = v22 + v42;
          if (__OFADD__(v22, v42)) {
            goto LABEL_43;
          }
          uint64_t v21 = v41;
          if (*((void *)isa + 3) < v43)
          {
            sub_1003126C4(v43, 1);
            Class isa = v65;
            unint64_t v44 = sub_10030768C((uint64_t)v8);
            if ((v21 & 1) != (v45 & 1))
            {
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_48;
            }
            unint64_t v16 = v44;
          }
          if (v21)
          {
            sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
            Class isa = v65;
            uint64_t v33 = (void *)(*((void *)v65 + 7) + 8 * v16);
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            unint64_t v16 = *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v16 >= *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            uint64_t v46 = swift_allocObject();
            *(_OWORD *)(v46 + 16) = v54;
            *(void *)(v46 + 32) = v23;
            *(void *)&long long v63 = v46;
            specialized Array._endMutation()();
            uint64_t v47 = v63;
            *((void *)isa + (v16 >> 6) + 8) |= 1 << v16;
            sub_100096408((uint64_t)v8, *((void *)isa + 6) + *(void *)(v56 + 72) * v16, (uint64_t *)&unk_100909E50);
            *(void *)(*((void *)isa + 7) + 8 * v16) = v47;
            uint64_t v48 = *((void *)isa + 2);
            BOOL v49 = __OFADD__(v48, 1);
            unint64_t v22 = v48 + 1;
            if (v49) {
              goto LABEL_44;
            }
            *((void *)isa + 2) = v22;
          }
          uint64_t v21 = &qword_100908190;
          ++v15;
          if (v35 == v58) {
            goto LABEL_40;
          }
        }
      }
      Class isa = (Class)_swiftEmptyDictionarySingleton;
LABEL_40:

      swift_bridgeObjectRelease();
    }
    return (uint64_t)isa;
  }
  else
  {
LABEL_48:
    *(void *)&v61[0] = 0;
    *((void *)&v61[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v51._countAndFlagsBits = 0xD00000000000002CLL;
    v51._object = (void *)0x80000001007CAF70;
    String.append(_:)(v51);
    unint64_t v62 = v16;
    sub_100094134(&qword_10090DC60);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1002E1D18(uint64_t a1, uint64_t a2)
{
  return sub_1002E1D24(a1, a2, &qword_10090DC68);
}

uint64_t sub_1002E1D24(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100776E80;
  uint64_t v5 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v6
    && (*(void *)(v4 + 56) = &type metadata for String,
        *(void *)(v4 + 32) = v5,
        *(void *)(v4 + 40) = v6,
        swift_retain(),
        uint64_t v7 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter(),
        v8))
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    swift_release();
    *(void *)(v4 + 88) = &type metadata for String;
    *(void *)(v4 + 64) = v9;
    *(void *)(v4 + 72) = v10;
    NSString v11 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [self predicateWithFormat:v11 argumentArray:isa];

    return (uint64_t)v13;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v15._object = (void *)0x80000001007CAF70;
    v15._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v15);
    sub_100094134(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id sub_1002E201C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver();
  return [super dealloc];
}

uint64_t type metadata accessor for RDStoreControllerCloudKitNetworkActivityObserver()
{
  return self;
}

uint64_t sub_1002E2084(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100911B18);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v7 = *(void *)(updated - 8);
  uint64_t v8 = v7;
  if (v5)
  {
    sub_100265D1C(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, updated);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v4, 1, 1, updated);
  }
  Optional.tryUnwrap(_:file:line:)();
  return sub_1002664BC((uint64_t)v4);
}

uint64_t sub_1002E21FC(uint64_t a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E2084(a1);
  if (!v1)
  {
    id v6 = [*(id *)&v5[*(int *)(updated + 28)] list];
    v8[1] = v6;
    sub_100094134((uint64_t *)&unk_100914200);
    Optional.tryUnwrap(_:file:line:)();

    uint64_t updated = v8[3];
    sub_100265D80((uint64_t)v5);
  }
  return updated;
}

void sub_1002E2350(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v77 = a1;
  uint64_t v5 = type metadata accessor for RDUserNotificationCategory();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v62[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  __chkstk_darwin(updated - 8);
  NSString v11 = &v62[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v13 = v12;
  }
  uint64_t v70 = v8;
  uint64_t v71 = v6;
  uint64_t v72 = v12;
  if (v13)
  {
    if ((a2 & 0xC000000000000001) != 0)
    {
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_38:
        swift_bridgeObjectRelease();
        unint64_t v44 = (void *)v75;
        uint64_t v45 = v72;
        uint64_t v46 = v67;
        goto LABEL_40;
      }
      id v14 = *(id *)(a2 + 32);
    }
    Swift::String v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    Swift::String v15 = 0;
  }
  uint64_t v73 = (uint64_t)v15;
  sub_100094134(&qword_100914760);
  Optional.tryUnwrap(_:file:line:)();
  if (v2)
  {

    return;
  }
  uint64_t v68 = v5;

  id v69 = (id)v75;
  id v16 = [(id)v75 title];
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v20 = 0;
  }
  uint64_t v73 = v18;
  uint64_t v74 = v20;
  sub_100094134((uint64_t *)&unk_10090A4C0);
  Optional.tryUnwrap(_:file:line:)();
  id v67 = (void *)v13;
  swift_bridgeObjectRelease();
  unint64_t v22 = v75;
  uint64_t v21 = v76;
  uint64_t v23 = v77;
  sub_1002E2084(v77);
  uint64_t v65 = v22;
  uint64_t v66 = v21;
  uint64_t v3 = 0;
  uint64_t v24 = (void *)sub_1002E2D9C((uint64_t)v11);
  sub_100265D80((uint64_t)v11);
  if (v24)
  {
    id v25 = [v24 shortName];

    uint64_t v26 = (uint64_t)v67;
    if (v25)
    {
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;
    }
    else
    {
      uint64_t v64 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v23 = v77;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v28 = 0;
    uint64_t v26 = (uint64_t)v67;
  }
  unint64_t v29 = (void *)sub_1002E21FC(v23);
  id v67 = v28;
  id v30 = [v29 name];

  if (v30)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  uint64_t v73 = v31;
  uint64_t v74 = v33;
  Optional.tryUnwrap(_:file:line:)();
  uint64_t v34 = (uint64_t)v67;
  swift_bridgeObjectRelease();
  int64_t v35 = v75;
  uint64_t v36 = v76;
  id v37 = (void *)sub_1002E21FC(v77);
  unsigned int v63 = [v37 shouldCategorizeGroceryItems];

  NSString v11 = [objc_allocWithZone((Class)UNMutableNotificationContent) init];
  uint64_t v38 = v65;
  uint64_t v65 = v35;
  sub_1002E3008(v64, v34, v38, v66, v72, v35, v36, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 setBody:v39];

  unint64_t v75 = (unint64_t)_swiftEmptyArrayStorage;
  if (v26)
  {
    id v67 = (void *)v36;
    if (v26 < 1)
    {
      __break(1u);
      return;
    }
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v26; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v41 = *(id *)(a2 + 8 * i + 32);
      }
      BOOL v42 = v41;
      id v43 = [v41 remObjectID];

      if (v43)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        {
          uint64_t v66 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  unint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v46 = (void *)v36;
  uint64_t v45 = v72;
LABEL_40:
  swift_bridgeObjectRelease();
  v78.value._rawValue = v44;
  UNMutableNotificationContent.setReminderIDs(_:)(v78);
  swift_bridgeObjectRelease();
  uint64_t v47 = (void *)sub_1002E21FC(v77);
  BOOL v49 = v70;
  uint64_t v48 = v71;
  if (v3)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v50 = v47;
    id v51 = [v47 remObjectID];

    UNMutableNotificationContent.setListID(_:)();
    uint64_t v52 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListSingleReminderCompletedNotification(_:);
    if (v45 != 1) {
      uint64_t v52 = (unsigned int *)&enum case for RDUserNotificationCategory.sharedListMultipleRemindersCompletedNotification(_:);
    }
    uint64_t v53 = v68;
    (*(void (**)(unsigned char *, void, uint64_t))(v48 + 104))(v49, *v52, v68);
    unint64_t v54 = RDUserNotificationCategory.rawValue.getter();
    uint64_t v56 = v55;
    (*(void (**)(unsigned char *, uint64_t))(v48 + 8))(v49, v53);
    NSString v57 = String._bridgeToObjectiveC()();
    [v11 setCategoryIdentifier:v57];

    unint64_t v75 = v54;
    uint64_t v76 = v56;
    swift_bridgeObjectRetain();
    v58._countAndFlagsBits = 45;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = v65;
    v59._object = v46;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v11 setThreadIdentifier:v60];

    id v61 = [self soundWithAlertType:11];
    [v11 setSound:v61];
  }
}

void sub_1002E2BD0()
{
  sub_1002E2350(*(void *)v0, *(void *)(v0 + 8));
}

void *sub_1002E2BEC(void *a1)
{
  uint64_t updated = type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0);
  uint64_t v3 = *(void *)(updated - 8);
  __chkstk_darwin(updated);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1;
  swift_bridgeObjectRetain();
  sub_1002646E8(&v13);
  uint64_t v6 = v13;
  uint64_t v7 = v13[2];
  if (v7)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v8 = (uint64_t)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      sub_100265D1C(v8, (uint64_t)v5);
      id v10 = *(id *)&v5[*(int *)(updated + 28)];
      sub_100265D80((uint64_t)v5);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for RDCompletedReminderNotificationContent()
{
  return &type metadata for RDCompletedReminderNotificationContent;
}

uint64_t sub_1002E2D9C(uint64_t a1)
{
  uint64_t v3 = sub_1002CE1CC();
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = a1;
  sub_1002CE468();
  if (v1)
  {
  }
  else
  {
    uint64_t v7 = v6;
    id v8 = [v6 remObjectID];

    sub_100094134((uint64_t *)&unk_100914BC0);
    Optional.tryUnwrap(_:file:line:)();

    id v9 = [*(id *)(a1+ *(int *)(type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem(0)+ 28)) list];
    sub_100094134((uint64_t *)&unk_100914200);
    Optional.tryUnwrap(_:file:line:)();

    id v10 = [v8 remObjectID:v9];
    Optional.tryUnwrap(_:file:line:)();

    id v12 = v15;
    id v13 = v15;
    sub_100441580(v4);
    uint64_t v5 = v14;
  }
  return v5;
}

uint64_t sub_1002E3008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a2)
  {
    if (a5 == 1)
    {
      swift_bridgeObjectRetain();
      id v14 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_100776E60;
      *(void *)(v15 + 56) = &type metadata for String;
      unint64_t v16 = sub_1000C5B38();
      *(void *)(v15 + 32) = a1;
      *(void *)(v15 + 40) = a2;
      *(void *)(v15 + 96) = &type metadata for String;
      *(void *)(v15 + 104) = v16;
      *(void *)(v15 + 64) = v16;
      *(void *)(v15 + 72) = a3;
      *(void *)(v15 + 80) = a4;
      *(void *)(v15 + 136) = &type metadata for String;
      *(void *)(v15 + 144) = v16;
      *(void *)(v15 + 112) = a6;
      *(void *)(v15 + 120) = a7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v17 = static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if (a8)
    {
      if (a5 >= 2) {
        goto LABEL_13;
      }
    }
    else if (a5 >= 2)
    {
LABEL_13:
      swift_bridgeObjectRetain();
      id v23 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = xmmword_100776E60;
      *(void *)(v24 + 56) = &type metadata for String;
      unint64_t v25 = sub_1000C5B38();
      *(void *)(v24 + 32) = a1;
      *(void *)(v24 + 40) = a2;
      *(void *)(v24 + 96) = &type metadata for Int;
      *(void *)(v24 + 104) = &protocol witness table for Int;
      *(void *)(v24 + 64) = v25;
      *(void *)(v24 + 72) = a5;
      *(void *)(v24 + 136) = &type metadata for String;
      *(void *)(v24 + 144) = v25;
      *(void *)(v24 + 112) = a6;
      *(void *)(v24 + 120) = a7;
      swift_bridgeObjectRetain();
      uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
      goto LABEL_16;
    }
LABEL_15:
    uint64_t v26 = self;
    _StringGuts.grow(_:)(84);
    v27._object = (void *)0x80000001007CFD10;
    v27._countAndFlagsBits = 0xD000000000000052;
    String.append(_:)(v27);
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 internalErrorWithDebugDescription:v29];

    return swift_willThrow();
  }
  if (a5 == 1)
  {
    id v19 = (id)_REMGetLocalizedString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_100776E80;
    *(void *)(v20 + 56) = &type metadata for String;
    unint64_t v21 = sub_1000C5B38();
    *(void *)(v20 + 32) = a3;
    *(void *)(v20 + 40) = a4;
    *(void *)(v20 + 96) = &type metadata for String;
    *(void *)(v20 + 104) = v21;
    *(void *)(v20 + 64) = v21;
    *(void *)(v20 + 72) = a6;
    *(void *)(v20 + 80) = a7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
  }
  else
  {
    if (a8)
    {
      if (a5 < 2) {
        goto LABEL_15;
      }
    }
    else if (a5 < 2)
    {
      goto LABEL_15;
    }
    id v30 = (id)_REMGetLocalizedString();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100776E80;
    *(void *)(v31 + 56) = &type metadata for Int;
    *(void *)(v31 + 64) = &protocol witness table for Int;
    *(void *)(v31 + 32) = a5;
    *(void *)(v31 + 96) = &type metadata for String;
    *(void *)(v31 + 104) = sub_1000C5B38();
    *(void *)(v31 + 72) = a6;
    *(void *)(v31 + 80) = a7;
    swift_bridgeObjectRetain();
    uint64_t v22 = static String.localizedStringWithFormat(_:_:)();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_1002E3480()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009133C8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009133C8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002E3548(unint64_t a1, int a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  id v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v26 - v9;
  NSString v29 = _swiftEmptyArrayStorage;
  if (a2 >> 6)
  {
    if (a2 >> 6 == 1)
    {
      uint64_t KeyPath = swift_getKeyPath();
      id v12 = [(id)a1 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 0, 1, v13);
      sub_10032ED24(KeyPath, (uint64_t)v8);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v29[2] >= v29[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      sub_1002E4168((void *)a1, a2);
    }
    else
    {
      uint64_t v25 = swift_getKeyPath();
      sub_10039F2D8(v25);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v29[2] >= v29[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
LABEL_24:
    sub_1002F51CC(0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v29[2] >= v29[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return sub_1002F52FC(v29);
  }
  uint64_t v14 = swift_getKeyPath();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    sub_1002E4168((void *)a1, a2);
  }
  else
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_21:
    sub_10039F2C4(v14, (uint64_t)v16);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v29[2] >= v29[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((a2 & 1) == 0) {
      return sub_1002F52FC(v29);
    }
    goto LABEL_24;
  }
  uint64_t v26 = v14;
  int v27 = a2;
  Swift::String v28 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE118(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = 0;
    unint64_t v16 = v28;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(a1 + 8 * v18 + 32);
      }
      uint64_t v20 = v19;
      id v21 = [v19 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v10, 0, 1, v22);

      Swift::String v28 = v16;
      unint64_t v24 = v16[2];
      unint64_t v23 = v16[3];
      if (v24 >= v23 >> 1)
      {
        sub_1001DE118(v23 > 1, v24 + 1, 1);
        unint64_t v16 = v28;
      }
      ++v18;
      v16[2] = v24 + 1;
      sub_1000F44F4((uint64_t)v10, (uint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v24);
    }
    while (v15 != v18);
    LOBYTE(a2) = v27;
    uint64_t v14 = v26;
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E39BC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 sourceListIDURL];
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1002E3A84(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016D52C(a1, (uint64_t)v6);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  NSString v11 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    URL._bridgeToObjectiveC()(v10);
    NSString v11 = v12;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setSourceListIDURL:v11];
}

uint64_t sub_1002E3BB0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942100 = v0;
  return result;
}

id sub_1002E3C48@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  id result = sub_10028AA2C(*a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002E3C78(void *a1, uint64_t a2, Class isa, Class a4)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_10077A530;
  *(void *)(v8 + 32) = a1;
  uint64_t v29 = v8;
  specialized Array._endMutation()();
  uint64_t v9 = v29;
  id type = a1;
  unint64_t v10 = swift_bridgeObjectRetain();
  NSString v11 = (void *)sub_1002E3548(v10, 1);
  type metadata accessor for REMCDTemplate();
  id v12 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v13 = [(id)swift_getObjCClassFromMetadata() entity];
  [v12 setEntity:v13];

  [v12 setAffectedStores:0];
  [v12 setPredicate:v11];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v12 setPropertiesToFetch:isa];

  if (a4) {
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v12 setRelationshipKeyPathsForPrefetching:a4];

  unint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease_n();

  if (!v4)
  {
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_9:
        if ((v14 & 0xC000000000000001) != 0)
        {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_24;
          }
          id v17 = *(id *)(v14 + 32);
        }
        uint64_t v9 = (uint64_t)v17;
        swift_bridgeObjectRelease();
        if (v14 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v18 < 2) {
            goto LABEL_14;
          }
        }
        else if (*(uint64_t *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
        {
LABEL_14:
          swift_bridgeObjectRelease();
          return v9;
        }
        if (qword_100907298 == -1)
        {
LABEL_17:
          uint64_t v19 = type metadata accessor for Logger();
          sub_10008E2DC(v19, (uint64_t)qword_1009133C8);
          id v20 = type;
          swift_bridgeObjectRetain();
          id v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v21, v22))
          {
            os_log_type_t typea = v22;
            uint64_t v23 = swift_slowAlloc();
            unint64_t v24 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v23 = 138412546;
            log = v21;
            id v25 = v20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v24 = v20;

            *(_WORD *)(v23 + 12) = 2048;
            swift_bridgeObjectRelease();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, log, typea, "Found multiple instances of REMCDTemplate with identical objectID {objectID: %@, matches: %ld}", (uint8_t *)v23, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          return v9;
        }
LABEL_24:
        swift_once();
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v16) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease_n();
    [self noSuchObjectErrorWithObjectID:type];
    swift_willThrow();
  }
  return v9;
}

id sub_1002E4110@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 parentAccount];
  *a2 = result;
  return result;
}

id sub_1002E414C(void *a1, id *a2)
{
  return [*a2 setParentAccount:*a1];
}

void sub_1002E4168(void *a1, unsigned __int8 a2)
{
  if (a2 >> 6 == 1)
  {
  }
  else if (!(a2 >> 6))
  {
    swift_bridgeObjectRelease();
  }
}

void *sub_1002E418C(unint64_t a1)
{
  uint64_t v2 = (__objc2_meth *)type metadata accessor for Logger();
  unint64_t imp = (unint64_t)v2[-1].imp;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v27 = imp;
    if (!v6) {
      break;
    }
    id v30 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v6 < 0)
    {
      __break(1u);
      goto LABEL_23;
    }
    id v25 = v2;
    uint64_t v8 = 0;
    unint64_t imp = a1 & 0xC000000000000001;
    uint64_t v2 = &stru_1008F6000;
    while (v6 != v8)
    {
      if (imp) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(a1 + 8 * v8 + 32);
      }
      unint64_t v10 = v9;
      if (![v9 account])
      {
        uint64_t v16 = self;
        unint64_t v28 = 0;
        unint64_t v29 = 0xE000000000000000;
        _StringGuts.grow(_:)(36);
        swift_bridgeObjectRelease();
        unint64_t v28 = 0xD000000000000021;
        unint64_t v29 = 0x80000001007CC960;
        id v17 = [v10 description];
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v19;

        v20._countAndFlagsBits = v18;
        v20._object = v15;
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._countAndFlagsBits = 125;
        v21._object = (void *)0xE100000000000000;
        String.append(_:)(v21);
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v16 internalErrorWithDebugDescription:v22];

        swift_willThrow();
        swift_release();
        return v15;
      }
      ++v8;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v6 == v8)
      {
        uint64_t v7 = v30;
        uint64_t v2 = v25;
        unint64_t imp = v27;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_13:
  if (qword_100907298 == -1) {
    goto LABEL_14;
  }
LABEL_23:
  swift_once();
LABEL_14:
  uint64_t v11 = sub_10008E2DC((uint64_t)v2, (uint64_t)qword_1009133C8);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t, __objc2_meth *))(imp + 16))(v5, v11, v2);
  unint64_t v28 = (unint64_t)v7;
  __chkstk_darwin(v12);
  *(&v24 - 2) = (uint64_t)v5;
  sub_100094134(&qword_100910070);
  sub_1000963CC(0, &qword_100910180);
  sub_1002E49F8();
  uint64_t v13 = v26;
  uint64_t v14 = Sequence.map<A>(skippingError:_:)();
  if (v13)
  {
    swift_errorRelease();
    uint64_t v15 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v15 = (void *)v14;
  }
  (*(void (**)(char *, __objc2_meth *))(v27 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  return v15;
}

void *sub_1002E4598()
{
  sub_1001DE058(0, 5, 0);
  uint64_t v0 = 0;
  id result = _swiftEmptyArrayStorage;
  unint64_t v2 = (unint64_t)"migrateListData(in:)";
  unint64_t v3 = 0xD000000000000010;
  unint64_t v4 = (unint64_t)"";
  unint64_t v5 = (unint64_t)"acknowledgedDate";
  unint64_t v6 = (unint64_t)"sectionIDsOrderingAsData";
  unint64_t v7 = 0xD000000000000011;
  unint64_t v8 = (unint64_t)"entifier";
  unint64_t v9 = (unint64_t)"LinkUpdateRequestDate";
  unint64_t v10 = (unint64_t)"publicLinkConfigurationData";
  unint64_t v11 = (unint64_t)"publicLinkCreationDate";
  do
  {
    unint64_t v12 = 0xEB000000006D656CLL;
    unint64_t v13 = 0x626D456567646162;
    switch(*((unsigned char *)&off_1008B3018 + v0 + 32))
    {
      case 1:
        unint64_t v12 = 0xE500000000000000;
        unint64_t v13 = 0x726F6C6F63;
        break;
      case 2:
        unint64_t v13 = 0xD000000000000023;
        unint64_t v12 = v2 | 0x8000000000000000;
        break;
      case 3:
        unint64_t v12 = 0xEA00000000007265;
        unint64_t v13 = 0x696669746E656469;
        break;
      case 4:
        unint64_t v12 = v4 | 0x8000000000000000;
        unint64_t v13 = v3;
        break;
      case 5:
        unint64_t v12 = v5 | 0x8000000000000000;
        goto LABEL_14;
      case 6:
        unint64_t v13 = 0xD000000000000025;
        unint64_t v12 = v6 | 0x8000000000000000;
        break;
      case 7:
        unint64_t v12 = 0xE400000000000000;
        unint64_t v13 = 1701667182;
        break;
      case 8:
        unint64_t v12 = v8 | 0x8000000000000000;
        unint64_t v13 = v7;
        break;
      case 9:
        unint64_t v13 = 0xD00000000000001BLL;
        unint64_t v12 = v9 | 0x8000000000000000;
        break;
      case 0xA:
        unint64_t v13 = 0xD000000000000016;
        unint64_t v12 = v10 | 0x8000000000000000;
        break;
      case 0xB:
        unint64_t v12 = v11 | 0x8000000000000000;
LABEL_14:
        unint64_t v13 = 0xD00000000000001ALL;
        break;
      case 0xC:
        unint64_t v13 = 0xD000000000000018;
        unint64_t v12 = 0x80000001007C61A0;
        break;
      case 0xD:
        unint64_t v13 = 0xD00000000000001ELL;
        unint64_t v12 = 0x80000001007C8BC0;
        break;
      case 0xE:
        unint64_t v12 = 0xEC000000656C7974;
        unint64_t v13 = 0x53676E6974726F73;
        break;
      default:
        break;
    }
    unint64_t v27 = result;
    unint64_t v15 = result[2];
    unint64_t v14 = result[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v18 = (const char *)v10;
      uint64_t v19 = (char *)v9;
      unint64_t v25 = v3;
      uint64_t v26 = (const char *)v2;
      uint64_t v23 = (const char *)v5;
      uint64_t v24 = (const char *)v4;
      unint64_t v21 = v7;
      NSString v22 = (const char *)v6;
      Swift::String v20 = (char *)v8;
      id v17 = (const char *)v11;
      sub_1001DE058(v14 > 1, v15 + 1, 1);
      unint64_t v11 = (unint64_t)v17;
      unint64_t v10 = (unint64_t)v18;
      unint64_t v9 = (unint64_t)v19;
      unint64_t v8 = (unint64_t)v20;
      unint64_t v7 = v21;
      unint64_t v6 = (unint64_t)v22;
      unint64_t v5 = (unint64_t)v23;
      unint64_t v4 = (unint64_t)v24;
      unint64_t v3 = v25;
      unint64_t v2 = (unint64_t)v26;
      id result = v27;
    }
    ++v0;
    result[2] = v15 + 1;
    uint64_t v16 = &result[2 * v15];
    void v16[4] = v13;
    v16[5] = v12;
  }
  while (v0 != 5);
  return result;
}

uint64_t sub_1002E4864(uint64_t a1, uint64_t a2, Class isa, Class a4)
{
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = (void *)sub_1002E3548(v6, 1);
  type metadata accessor for REMCDTemplate();
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v8 setPropertiesToFetch:isa];

  if (a4) {
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v8 setRelationshipKeyPathsForPrefetching:a4];

  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  swift_bridgeObjectRelease();

  return v10;
}

uint64_t sub_1002E49F0()
{
  return sub_10039AC10();
}

unint64_t sub_1002E49F8()
{
  unint64_t result = qword_1009133E0;
  if (!qword_1009133E0)
  {
    sub_100096058(&qword_100910070);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009133E0);
  }
  return result;
}

uint64_t sub_1002E4A54(void *a1, uint64_t a2, Class isa, Class a4)
{
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v11 = a1;
  id v12 = [v11 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v9, 0, 1, v13);
  sub_10032ED24(KeyPath, (uint64_t)v9);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v21[2] >= v21[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v21[2] >= v21[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v14 = (void *)sub_1002F52FC(v21);
  type metadata accessor for REMCDTemplate();
  id v15 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v16 = [(id)swift_getObjCClassFromMetadata() entity];
  [v15 setEntity:v16];

  [v15 setAffectedStores:0];
  [v15 setPredicate:v14];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v15 setPropertiesToFetch:isa];

  if (a4) {
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v15 setRelationshipKeyPathsForPrefetching:a4];

  if (qword_1009072A0 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v17 = Array._bridgeToObjectiveC()().super.isa;
  [v15 setSortDescriptors:v17];

  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  return v18;
}

void *sub_1002E4DD0()
{
  uint64_t v0 = 15;
  sub_1001DE058(0, 15, 0);
  unint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = (unint64_t)"migrateListData(in:)";
  unint64_t v3 = 0xD000000000000010;
  unint64_t v4 = (unint64_t)"";
  unint64_t v5 = (unint64_t)"acknowledgedDate";
  unint64_t v6 = (unint64_t)"sectionIDsOrderingAsData";
  unint64_t v7 = 0xD000000000000011;
  unint64_t v8 = (unint64_t)"entifier";
  unint64_t v9 = (unint64_t)"LinkUpdateRequestDate";
  unint64_t v10 = (unint64_t)"publicLinkConfigurationData";
  unint64_t v11 = (unint64_t)"publicLinkCreationDate";
  id v12 = &byte_1008B6328;
  do
  {
    int v13 = *v12++;
    unint64_t v14 = 0xEB000000006D656CLL;
    unint64_t v15 = 0x626D456567646162;
    switch(v13)
    {
      case 1:
        unint64_t v14 = 0xE500000000000000;
        unint64_t v15 = 0x726F6C6F63;
        break;
      case 2:
        unint64_t v15 = 0xD000000000000023;
        unint64_t v14 = v2 | 0x8000000000000000;
        break;
      case 3:
        unint64_t v14 = 0xEA00000000007265;
        unint64_t v15 = 0x696669746E656469;
        break;
      case 4:
        unint64_t v14 = v4 | 0x8000000000000000;
        unint64_t v15 = v3;
        break;
      case 5:
        unint64_t v14 = v5 | 0x8000000000000000;
        goto LABEL_14;
      case 6:
        unint64_t v15 = 0xD000000000000025;
        unint64_t v14 = v6 | 0x8000000000000000;
        break;
      case 7:
        unint64_t v14 = 0xE400000000000000;
        unint64_t v15 = 1701667182;
        break;
      case 8:
        unint64_t v14 = v8 | 0x8000000000000000;
        unint64_t v15 = v7;
        break;
      case 9:
        unint64_t v15 = 0xD00000000000001BLL;
        unint64_t v14 = v9 | 0x8000000000000000;
        break;
      case 10:
        unint64_t v15 = 0xD000000000000016;
        unint64_t v14 = v10 | 0x8000000000000000;
        break;
      case 11:
        unint64_t v14 = v11 | 0x8000000000000000;
LABEL_14:
        unint64_t v15 = 0xD00000000000001ALL;
        break;
      case 12:
        unint64_t v15 = 0xD000000000000018;
        unint64_t v14 = 0x80000001007C61A0;
        break;
      case 13:
        unint64_t v15 = 0xD00000000000001ELL;
        unint64_t v14 = 0x80000001007C8BC0;
        break;
      case 14:
        unint64_t v14 = 0xEC000000656C7974;
        unint64_t v15 = 0x53676E6974726F73;
        break;
      default:
        break;
    }
    unint64_t v29 = result;
    unint64_t v17 = result[2];
    unint64_t v16 = result[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v20 = (const char *)v10;
      unint64_t v21 = (char *)v9;
      unint64_t v27 = v3;
      unint64_t v28 = (const char *)v2;
      unint64_t v25 = (const char *)v5;
      uint64_t v26 = (const char *)v4;
      unint64_t v23 = v7;
      uint64_t v24 = (const char *)v6;
      NSString v22 = (char *)v8;
      uint64_t v19 = (const char *)v11;
      sub_1001DE058(v16 > 1, v17 + 1, 1);
      unint64_t v11 = (unint64_t)v19;
      unint64_t v10 = (unint64_t)v20;
      unint64_t v9 = (unint64_t)v21;
      unint64_t v8 = (unint64_t)v22;
      unint64_t v7 = v23;
      unint64_t v6 = (unint64_t)v24;
      unint64_t v5 = (unint64_t)v25;
      unint64_t v4 = (unint64_t)v26;
      unint64_t v3 = v27;
      unint64_t v2 = (unint64_t)v28;
      unint64_t result = v29;
    }
    result[2] = v17 + 1;
    uint64_t v18 = &result[2 * v17];
    v18[4] = v15;
    v18[5] = v14;
    --v0;
  }
  while (v0);
  return result;
}

uint64_t sub_1002E50A4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  int v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (void *)((char *)v26 - v14);
  id v16 = a1;
  id v17 = a2;
  v26[1] = v17;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  void *v15 = v16;
  v15[1] = v17;
  v15[2] = 0x4024000000000000;
  type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v16;
  sub_1002E5460((uint64_t)v15, (uint64_t)v13);
  type metadata accessor for RDSharedInlineTagAutoConvertEngine(0);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables) = &_swiftEmptySetSingleton;
  uint64_t v20 = OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_babysitTarget;
  id v21 = objc_allocWithZone((Class)type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget());
  id v22 = v16;
  swift_retain();
  *(void *)(v19 + v20) = [v21 init];
  sub_1002E54C4((uint64_t)v13, v19 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  unint64_t v23 = (uint64_t *)(v19 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler);
  uint64_t *v23 = v18;
  v23[1] = (uint64_t)&off_1008BB080;
  aBlock[4] = sub_1002E5528;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C0FE8;
  uint64_t v24 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v30 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  swift_release();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
  sub_1001C8338((uint64_t)v15);
  swift_release();
  return v19;
}

uint64_t sub_1002E5460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E54C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E552C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002E553C()
{
  return swift_release();
}

id sub_1002E5544()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  id result = [v0 metadata];
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = result;
  uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v6 + 16) || (unint64_t v7 = sub_1001806F8(v1, v3), (v8 & 1) == 0))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  sub_10009A1B0(*(void *)(v6 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_10:
    sub_1000F5B8C((uint64_t)&v10);
    return 0;
  }
  if (swift_dynamicCast()) {
    return (id)v9;
  }
  else {
    return 0;
  }
}

uint64_t sub_1002E5674(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  unint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (!v8) {
      return (uint64_t)v9;
    }
    uint64_t v19 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE118(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    v18[1] = v2;
    uint64_t v11 = 0;
    uint64_t v9 = v19;
    unint64_t v2 = a1 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v2) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a1 + 8 * v11 + 32);
      }
      int v13 = v12;
      id v14 = [v12 uuid];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 0, 1, v15);

      uint64_t v19 = v9;
      unint64_t v17 = v9[2];
      unint64_t v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        sub_1001DE118(v16 > 1, v17 + 1, 1);
        uint64_t v9 = v19;
      }
      ++v11;
      v9[2] = v17 + 1;
      sub_1000F44F4((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v17);
      if (v8 == v11) {
        return (uint64_t)v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E58B8(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 < 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    if (a1) {
      sub_1003A056C(KeyPath);
    }
    else {
      sub_1003A052C(KeyPath);
    }
    goto LABEL_18;
  }
  if (a3)
  {
    uint64_t v5 = swift_getKeyPath();
    sub_1003A052C(v5);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v6 = swift_getKeyPath();
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    sub_1001DE560(0, v7, 0);
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = (unsigned __int8 *)(a1 + 32);
    unint64_t v10 = _swiftEmptyArrayStorage[2];
    do
    {
      __int16 v12 = *v9++;
      __int16 v11 = v12;
      uint64_t v18 = v8;
      unint64_t v13 = v8[3];
      if (v10 >= v13 >> 1)
      {
        sub_1001DE560(v13 > 1, v10 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v10 + 1;
      *((_WORD *)v8 + v10++ + 16) = v11 + 1;
      --v7;
    }
    while (v7);
  }
  sub_1003A031C(v6, (uint64_t)v8);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (a2)
  {
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_1002E5674(a2);
    sub_1003A0330(v14, v15);
LABEL_18:
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

id sub_1002E5B30(void *a1)
{
  id v3 = [(id)swift_getObjCClassFromMetadata() entity];
  id v4 = [objc_allocWithZone((Class)NSBatchUpdateRequest) initWithEntity:v3];

  *(void *)&long long v27 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A052C(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(v27 + 16) >= *(void *)(v27 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v6 = (void *)sub_1002F52FC(v27);
  [v4 setPredicate:v6];

  id v7 = (id)sub_100094134(&qword_10090AF50);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)&long long v27 = 0x656C706D6F437369;
  *((void *)&v27 + 1) = 0xEB00000000646574;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  sub_1002EE418(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v4 setPropertiesToUpdate:isa];

  [v4 setResultType:1];
  id v25 = 0;
  id v10 = [a1 executeRequest:v4 error:&v25];
  id v11 = v25;
  if (v10)
  {
    id v12 = v10;
    *((void *)&v28 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
    *(void *)&long long v27 = v12;
    sub_1000963CC(0, &qword_1009133F0);
    id v13 = v11;
    throwingCast<A>(_:as:failureMessage:)();
    if (v1)
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v27);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v27);
      id v14 = v26;
      if ([v26 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v27 = 0u;
        long long v28 = 0u;
      }
      uint64_t v15 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000F5B8C((uint64_t)&v27);
      unint64_t v16 = (unint64_t)v26;
      id v24 = self;
      uint64_t v17 = swift_initStackObject();
      *(_OWORD *)(v17 + 16) = xmmword_100776E40;
      *(void *)&long long v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v27 + 1) = v18;
      AnyHashable.init<A>(_:)();
      *(void *)(v17 + 96) = v15;
      *(void *)(v17 + 72) = v16;
      swift_bridgeObjectRetain();
      sub_1002EE418(v17);
      Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = a1;
      *(void *)&long long v27 = v20;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v21 = a1;
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v24 mergeChangesFromRemoteContextSave:v19 intoContexts:v22];

      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        id v7 = (id)_CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease_n();
      }
      else
      {
        id v7 = *(id *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);

        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    id v7 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_1002E6060()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  *(void *)(v0 + 40) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_1009133E8 = v0;
  return result;
}

void sub_1002E6110(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

uint64_t sub_1002E6258(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_10077A530;
    *(void *)(v3 + 32) = a2;
    unint64_t v13 = v3;
    specialized Array._endMutation()();
    unint64_t v4 = v13;
  }
  else
  {
    unint64_t v4 = 0;
  }
  id v5 = a2;
  uint64_t v6 = swift_bridgeObjectRetain();
  id v7 = (void *)sub_1002E58B8(v6, v4, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for REMCDGroceryOperationQueueItem();
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];

  if (qword_1009072A8 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v8 setSortDescriptors:isa];

  [v8 setReturnsObjectsAsFaults:0];
  uint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();

  return v11;
}

const char *sub_1002E644C()
{
  return "priorityRawValue";
}

id sub_1002E6458@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 priorityRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_1002E648C(__int16 *a1, id *a2)
{
  return [*a2 setPriorityRawValue:*a1];
}

uint64_t sub_1002E64A0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1002E64E8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1002E6538()
{
  return "isCompleted";
}

id sub_1002E6544@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isCompleted];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1002E6578(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsCompleted:*a1];
}

const char *sub_1002E658C()
{
  return "operationTypeRawValue";
}

id sub_1002E6598@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 operationTypeRawValue];
  *a2 = (_WORD)result;
  return result;
}

id sub_1002E65CC(__int16 *a1, id *a2)
{
  return [*a2 setOperationTypeRawValue:*a1];
}

const char *sub_1002E65E0()
{
  return "listIdentifier";
}

uint64_t sub_1002E65EC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_listIdentifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1002E6634(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

unint64_t sub_1002E6684(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A052C(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  unint64_t v4 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  type metadata accessor for REMCDGroceryOperationQueueItem();
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  [v5 setFetchLimit:1];
  if (qword_1009072A8 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v5 setSortDescriptors:isa];

  [v5 setReturnsObjectsAsFaults:0];
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    return a1;
  }
  unint64_t v9 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    a1 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!a1) {
      goto LABEL_13;
    }
  }
  else
  {
    a1 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!a1)
    {
LABEL_13:
      swift_bridgeObjectRelease();

      return a1;
    }
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_12;
  }
  if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v9 + 32);
LABEL_12:
    a1 = (uint64_t)v10;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

id sub_1002E6924(void *a1)
{
  *(void *)&long long v25 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1003A056C(KeyPath);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(v25 + 16) >= *(void *)(v25 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v4 = (id)sub_1002F52FC(v25);
  uint64_t v5 = sub_100551A34((uint64_t)v4);
  if (v1)
  {
  }
  else
  {
    id v7 = (void *)v5;

    id v8 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v7];
    [v8 setResultType:1];
    id v23 = 0;
    id v9 = [a1 executeRequest:v8 error:&v23];
    id v4 = v23;
    if (v9)
    {
      id v10 = v9;
      *((void *)&v26 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
      *(void *)&long long v25 = v10;
      sub_1000963CC(0, (unint64_t *)&unk_10090B030);
      id v11 = v4;
      throwingCast<A>(_:as:failureMessage:)();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v25);
      id v13 = v24;
      if ([v24 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v25 = 0u;
        long long v26 = 0u;
      }
      uint64_t v14 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      sub_1000F5B8C((uint64_t)&v25);
      unint64_t v15 = (unint64_t)v24;
      id v22 = self;
      sub_100094134(&qword_10090AF50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(void *)&long long v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v25 + 1) = v17;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = v14;
      *(void *)(inited + 72) = v15;
      swift_bridgeObjectRetain();
      sub_1002EE418(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_10077A530;
      *(void *)(v19 + 32) = a1;
      *(void *)&long long v25 = v19;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v20 = a1;
      Class v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v22 mergeChangesFromRemoteContextSave:isa intoContexts:v21];

      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        id v4 = (id)_CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
        id v4 = *(id *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      id v12 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  return v4;
}

uint64_t sub_1002E6D88()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009133F8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009133F8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002E6E50(uint64_t a1)
{
  id v3 = [*v1 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = sub_1002E7078(a1, v4, 128, 0);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002E6EF4(uint64_t a1)
{
  id v3 = [*v1 templateObjectID];
  if (qword_100907478 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1002E7078(a1, (unint64_t)v3, 1, (objc_class *)qword_100942200);

  return v4;
}

NSString sub_1002E6F9C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  type metadata accessor for REMTemplateSectionStorageCDIngestor();
  swift_initStackObject();
  NSString result = sub_10047B284(v4);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

id sub_1002E7000@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id v5 = [self sharedConfiguration];
  [v5 templatePublicLinkTTL];

  id result = sub_100166628(v4);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002E7078(uint64_t a1, unint64_t a2, char a3, objc_class *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v13 = (void (*)(char *, uint64_t))((char *)&v43 - v12);
  uint64_t v14 = (objc_class *)sub_1003DCBA4();
  unint64_t v15 = (objc_class *)sub_1003DD0C4();
  uint64_t v16 = v51;
  unint64_t v17 = sub_1003DD360(a2, a3, a1, a4, v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    return (uint64_t)v15;
  }
  BOOL v49 = v13;
  uint64_t v50 = v10;
  uint64_t v18 = v52;
  uint64_t v51 = v8;
  if (qword_1009072B0 != -1) {
    swift_once();
  }
  uint64_t v19 = v51;
  uint64_t v20 = sub_10008E2DC(v51, (uint64_t)qword_1009133F8);
  Class v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
  id v22 = v49;
  uint64_t v45 = v20;
  uint64_t v46 = v18 + 16;
  unint64_t v44 = v21;
  uint64_t v23 = ((uint64_t (*)(void (*)(char *, uint64_t)))v21)(v49);
  unint64_t v53 = v17;
  __chkstk_darwin(v23);
  *(&v43 - 2) = v22;
  sub_100094134(&qword_100913410);
  uint64_t v24 = sub_1000963CC(0, &qword_100913418);
  sub_1000BFEAC(&qword_100913420, &qword_100913410);
  uint64_t v48 = v24;
  uint64_t v25 = Sequence.map<A>(skippingError:_:)();
  long long v26 = v50;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v28 = v18 + 8;
  long long v27 = v29;
  v29((char *)v49, v19);
  unint64_t v53 = (unint64_t)_swiftEmptyArrayStorage;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v30 = result;
  }
  else
  {
    uint64_t v30 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v52 = v28;
  uint64_t v47 = v25;
  id v43 = v27;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = _swiftEmptyArrayStorage;
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v53 = (unint64_t)v36;
    sub_100094134(&qword_100921A90);
    sub_1000BFEAC(&qword_10090FD88, &qword_100921A90);
    sub_1002E7618();
    uint64_t v37 = Sequence<>.unique()();
    swift_bridgeObjectRelease();
    uint64_t v38 = v44(v26, v45, v51);
    unint64_t v53 = v37;
    __chkstk_darwin(v38);
    *(&v43 - 2) = v39;
    sub_1000963CC(0, &qword_10090D2A0);
    Sequence.map<A>(skippingError:_:)();
    v43(v50, v51);
    swift_bridgeObjectRelease();
    id v40 = objc_allocWithZone((Class)REMTemplateSectionsDataViewInvocationResult);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v42 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v15 = (objc_class *)[v40 initWithTemplateStorages:isa templateSectionStorages:v42];

    return (uint64_t)v15;
  }
  if (v30 >= 1)
  {
    for (uint64_t i = 0; i != v30; ++i)
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v33 = *(id *)(v17 + 8 * i + 32);
      }
      uint64_t v34 = v33;
      id v35 = [v33 template:v43];

      if (v35)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = (void *)v53;
    long long v26 = v50;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002E760C()
{
  return sub_1003EACF4();
}

unint64_t sub_1002E7618()
{
  unint64_t result = qword_100914BB0;
  if (!qword_100914BB0)
  {
    type metadata accessor for REMCDTemplate();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914BB0);
  }
  return result;
}

uint64_t sub_1002E7670()
{
  return sub_1003EAAA8();
}

uint64_t sub_1002E767C(uint64_t a1)
{
  uint64_t v21 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  uint64_t v20 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v19 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v18 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002E79CC(*(void **)(v1 + 24), a1);
  if (!v2)
  {
    id v13 = v12;
    unsigned int v14 = [*(id *)(v1 + 40) shouldSaveCompleted];
    unint64_t v15 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.on(_:);
    if (!v14) {
      unint64_t v15 = (unsigned int *)&enum case for REMRemindersListDataView.ShowCompleted.off(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v11, *v15, v9);
    (*(void (**)(char *, void, uint64_t))(v19 + 104))(v8, enum case for REMRemindersListDataView.FetchSubtasks.on(_:), Subtasks);
    (*(void (**)(char *, void, uint64_t))(v20 + 104))(v5, enum case for REMRemindersListDataView.SortingStyle.manual(_:), v21);
    uint64_t v1 = sub_100410DC0(v13, a1, (uint64_t)v11, v8, (uint64_t)v5, 0);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v21);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v8, Subtasks);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v11, v9);
  }
  return v1;
}

void sub_1002E79CC(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_10077A530;
  uint64_t v8 = *(void **)(v2 + 24);
  *(void *)(v7 + 32) = v8;
  specialized Array._endMutation()();
  id v9 = objc_allocWithZone((Class)REMListsDataViewInvocation_fetchByObjectIDs);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  id v10 = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v12 = [v9 initWithObjectIDs:isa];

  id v13 = (void *)sub_10016BAB4(a2);
  if (!v3)
  {
    self;
    uint64_t v14 = swift_dynamicCastObjCClass();
    if (v14)
    {
      unint64_t v15 = (void *)v14;
      id v28 = v13;
      Class v16 = (Class)[v15 accountStorages];
      if (!v16)
      {
        sub_1000963CC(0, &qword_100910180);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class v16 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      Class v17 = (Class)[v15 listStorages:v13];
      if (!v17)
      {
        sub_1000963CC(0, (unint64_t *)&unk_100914440);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class v17 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      uint64_t v18 = self;
      uint64_t v19 = *(void *)(v4 + 48);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_10077A530;
      *(void *)(v20 + 32) = a1;
      specialized Array._endMutation()();
      id v21 = a1;
      Class v22 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v18 listsFromAccountStorages:v16 listStorages:v17 store:v19 requestedListIDs:v22];

      if (v23)
      {
        sub_1000963CC(0, &qword_10090E198);
        unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v25 = v21;
        long long v26 = sub_10012083C(v24);
        swift_bridgeObjectRelease();

        if (v26)
        {
          REMList.codable.getter();

          return;
        }
      }
      [self noSuchObjectErrorWithObjectID:v21];
      swift_willThrow();

      id v13 = v27;
    }
    else
    {
      [self noSuchObjectErrorWithObjectID:a1];
      swift_willThrow();
    }
  }
}

id sub_1002E7D60(uint64_t a1)
{
  uint64_t v4 = *(void **)(v1 + 24);
  uint64_t v5 = qword_100907908;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = (objc_class *)qword_100942578;
  uint64_t v8 = (objc_class *)sub_1005868C0();
  id v9 = (objc_class *)sub_100586DE0();
  unint64_t v10 = sub_10058707C((unint64_t)v4, 1, a1, v7, v8, v9);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v10 >> 62)
    {
      type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain();
      id v6 = (id)_bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for REMCDBaseSection();
      id v6 = (id)v10;
    }
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_1002E7EA0()
{
  uint64_t v2 = _s10PredicatesOMa_1();
  __chkstk_darwin(v2);
  uint64_t v4 = (unint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v5 = swift_allocObject();
  long long v26 = xmmword_10077A530;
  *(_OWORD *)(v5 + 16) = xmmword_10077A530;
  id v6 = *(void **)(v0 + 24);
  *(void *)(v5 + 32) = v6;
  unint64_t v27 = v5;
  specialized Array._endMutation()();
  *uint64_t v4 = v27;
  swift_storeEnumTagMultiPayload();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v26;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v27 = inited;
  specialized Array._endMutation()();
  unint64_t v8 = v27;
  uint64_t v9 = swift_initStackObject();
  *(_OWORD *)(v9 + 16) = v26;
  *(void *)(v9 + 32) = swift_getKeyPath();
  unint64_t v27 = v9;
  specialized Array._endMutation()();
  unint64_t v10 = v27;
  id v11 = v6;
  id v12 = (void *)sub_100535B3C();
  id v13 = (void *)sub_1003BD0F4(v8, v10, 0, (uint64_t)v12);

  if (qword_100907888 != -1) {
    swift_once();
  }
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v13 setSortDescriptors:isa];

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  uint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    sub_1000ECFE0((uint64_t)v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  *(void *)&long long v26 = v11;
  unint64_t v27 = v15;
  sub_100094134(&qword_100910160);
  sub_1000ED03C();
  unint64_t v16 = Sequence.elements<A>(ofType:)();
  swift_bridgeObjectRelease();

  sub_1000ECFE0((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v16 >> 62))
  {
    uint64_t v17 = v26;
    if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v17];
    swift_willThrow();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v17 = v26;
  if (!v25) {
    goto LABEL_15;
  }
LABEL_7:
  if ((v16 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v18 = *(id *)(v16 + 32);
  }
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  id v20 = [v19 membershipsOfRemindersInSectionsAsData];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    sub_1000963CC(0, (unint64_t *)&qword_100910240);
    static REMJSONRepresentable.fromJSONData(_:)();
    sub_100097F34(v22, v24);
  }
}

uint64_t type metadata accessor for RDTemplateOperationCopyRemindersFromREMListToTemplate()
{
  return self;
}

uint64_t sub_1002E82EC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100913540);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100913540);
  if (qword_100907810 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942478);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002E83B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
  swift_beginAccess();
  sub_1000E5250(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_10090A4B0);
  }
  else
  {
    sub_1000E5318((uint64_t)v4, (uint64_t)v8);
    if (qword_1009072B8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100913540);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Removing RDDataStoreApplicationShortcutListProvider observer on store controller", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = *(void *)(v1 + 48);
    uint64_t v15 = *(os_unfair_lock_s **)(v14 + 40);
    os_unfair_lock_lock(v15);
    __chkstk_darwin(v16);
    *(void *)&v20[-16] = v8;
    swift_beginAccess();
    uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
    uint64_t v18 = *(void *)(*(void *)(v14 + 48) + 16);
    if (v18 < result)
    {
      __break(1u);
      return result;
    }
    sub_1001ECEB0(result, v18);
    swift_endAccess();
    os_unfair_lock_unlock(v15);
    sub_100094178((uint64_t)v8);
  }
  uint64_t v19 = *(void **)(v1
                 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken);
  if (v19) {
    [v19 stopObserving];
  }
  swift_bridgeObjectRelease();
  sub_1000F3DB4(v1 + 24);

  swift_release();
  sub_1000966BC(v9, (uint64_t *)&unk_10090A4B0);
  swift_unknownObjectRelease();

  return v1;
}

uint64_t sub_1002E86E4()
{
  sub_1002E83B4();

  return swift_deallocClassInstance();
}

uint64_t sub_1002E873C()
{
  return type metadata accessor for RDDataStoreApplicationShortcutListProvider();
}

uint64_t type metadata accessor for RDDataStoreApplicationShortcutListProvider()
{
  uint64_t result = qword_1009135A0;
  if (!qword_1009135A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1002E8790()
{
  sub_1000DF350();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1002E8868()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)aBlock - v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (void *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v12 = *(void **)(v1 + 40);
  *id v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) & 1) == 0)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) = 1;
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    id v20 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *(void *)(inited + 32) = v21;
    *(void *)(inited + 40) = v23;
    Swift::Int v24 = sub_10032D9A0(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    sub_100401C48(v24, v13, (uint64_t)sub_1002EA20C, v25, (uint64_t)v7);
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t v26 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 0, 1, v26);
    sub_1000E50E8((uint64_t)v7, (uint64_t)v5);
    uint64_t v27 = v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
    swift_beginAccess();
    sub_1000E5150((uint64_t)v5, v27);
    swift_endAccess();
    id v28 = [self daemonUserDefaults];
    uint64_t v29 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_1002EA214;
    aBlock[5] = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1002AE6B0;
    aBlock[3] = &unk_1008C10A0;
    uint64_t v30 = _Block_copy(aBlock);
    swift_release();
    id v31 = [v28 observePreferredDefaultListIDWithBlock:v30];
    _Block_release(v30);

    *(void *)(v1
              + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken) = v31;
    swift_unknownObjectRelease();
    sub_1002E8E60();
    return;
  }
  if (qword_1009072B8 != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100913540);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDDataStoreApplicationShortcutListProvider must be started at most once", v18, 2u);
    swift_slowDealloc();
  }
}

void sub_1002E8D48()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1002E8E60();
    swift_release();
  }
  else
  {
    if (qword_1009072B8 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_10008E2DC(v0, (uint64_t)qword_100913540);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received store controller change notification after RDDataStoreApplicationShortcutListProvider was deallocated", v3, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1002E8E60()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134(&qword_100913748);
  __chkstk_darwin(v2 - 8);
  v123 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for REMAccountsListDataView.Model.GroupChild();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  v128 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v122 = (char *)&v111 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v127 = (char *)&v111 - v11;
  __chkstk_darwin(v10);
  uint64_t v117 = (uint64_t)&v111 - v12;
  uint64_t v121 = type metadata accessor for REMAccountsListDataView.Model.Group();
  uint64_t v129 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  v120 = (char *)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for REMAccountsListDataView.Model.AccountChild();
  v137 = *(void **)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  v135 = (char *)&v111 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v111 - v17;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t *)((char *)&v111 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(void **)(v1 + 40);
  void *v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v24 = v23;
  uint64_t v25 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
LABEL_80:
    __break(1u);
LABEL_81:
    swift_once();
LABEL_6:
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E2DC(v30, (uint64_t)qword_100913540);
    swift_errorRetain();
    swift_errorRetain();
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v139 = swift_slowAlloc();
      *(_DWORD *)id v33 = 136315138;
      uint64_t v138 = v25;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v138 = sub_1000C51B8(v34, v35, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to fetch lists to use as application shortcuts {error: %s}", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return;
  }
  uint64_t v26 = *(void **)(v1 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_store);
  uint64_t v139 = 0;
  id v27 = [v26 fetchDefaultListWithError:&v139];
  id v28 = v27;
  if (v139)
  {
    uint64_t v25 = (uint64_t)(id)v139;

    swift_willThrow();
    if (qword_1009072B8 == -1) {
      goto LABEL_6;
    }
    goto LABEL_81;
  }
  id v116 = v27;
  type metadata accessor for REMAccountsListDataView();
  uint64_t v29 = static REMAccountsListDataView.fetchAccounts(store:diffingAgainst:)();
  uint64_t v36 = v29;
  uint64_t v126 = v5;
  uint64_t v111 = v1;
  uint64_t v37 = *(void *)(v29 + 16);
  unint64_t v136 = (unint64_t)v18;
  if (v37)
  {
    uint64_t v38 = *(void *)(type metadata accessor for REMAccountsListDataView.Model.Account() - 8);
    uint64_t v39 = v36;
    unint64_t v40 = v36 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    uint64_t v41 = *(void *)(v38 + 72);
    uint64_t v134 = v39;
    swift_bridgeObjectRetain();
    Class v42 = _swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v43 = REMAccountsListDataView.Model.Account.children.getter();
      uint64_t v44 = *(void *)(v43 + 16);
      int64_t v45 = v42[2];
      int64_t v46 = v45 + v44;
      if (__OFADD__(v45, v44))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      uint64_t v25 = v43;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v46 > v42[3] >> 1)
      {
        if (v45 <= v46) {
          int64_t v48 = v45 + v44;
        }
        else {
          int64_t v48 = v45;
        }
        Class v42 = (void *)sub_1003098C8(isUniquelyReferenced_nonNull_native, v48, 1, (unint64_t)v42);
      }
      uint64_t v18 = (char *)v136;
      if (*(void *)(v25 + 16))
      {
        uint64_t v49 = v42[2];
        if ((v42[3] >> 1) - v49 < v44) {
          goto LABEL_78;
        }
        unint64_t v50 = (*((unsigned __int8 *)v137 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v137 + 80);
        uint64_t v51 = v137[9];
        uint64_t v52 = (char *)v42 + v50 + v51 * v49;
        if (v25 + v50 < (unint64_t)&v52[v51 * v44] && (unint64_t)v52 < v25 + v50 + v51 * v44)
        {
          _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
LABEL_83:
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v44)
        {
          uint64_t v54 = v42[2];
          BOOL v55 = __OFADD__(v54, v44);
          uint64_t v56 = v54 + v44;
          if (v55) {
            goto LABEL_79;
          }
          v42[2] = v56;
        }
      }
      else if (v44)
      {
        goto LABEL_77;
      }
      swift_bridgeObjectRelease();
      v40 += v41;
      if (!--v37)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_32;
      }
    }
  }
  swift_bridgeObjectRelease();
  Class v42 = _swiftEmptyArrayStorage;
LABEL_32:
  uint64_t v139 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v57 = v42[2];
  uint64_t v134 = v4;
  Swift::String v58 = (uint64_t *)v135;
  if (v57)
  {
    v133 = (void (*)(uint64_t *, char *, uint64_t))v137[2];
    Swift::String v59 = (char *)v42 + ((*((unsigned __int8 *)v137 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v137 + 80));
    v132 = (uint64_t (**)(uint64_t *, uint64_t))(v137 + 11);
    LODWORD(v131) = enum case for REMAccountsListDataView.Model.AccountChild.list(_:);
    int v119 = enum case for REMAccountsListDataView.Model.AccountChild.customSmartList(_:);
    int v115 = enum case for REMAccountsListDataView.Model.AccountChild.group(_:);
    v130 = (void (**)(uint64_t *, uint64_t))(v137 + 12);
    v114 = (void (**)(char *, uint64_t *, uint64_t))(v129 + 32);
    v113 = (void (**)(char *, uint64_t))(v129 + 8);
    int v112 = enum case for REMAccountsListDataView.Model.GroupChild.customSmartList(_:);
    uint64_t v125 = v126 + 104;
    int v118 = enum case for REMAccountsListDataView.Model.GroupChild.list(_:);
    NSString v60 = (void (**)(char *, uint64_t))(v137 + 1);
    v137 += 2;
    uint64_t v129 = v137[7];
    swift_bridgeObjectRetain();
    long long v124 = xmmword_100776E40;
    do
    {
      uint64_t v66 = v4;
      id v67 = v133;
      v133((uint64_t *)v18, v59, v14);
      v67(v58, v18, v14);
      int v68 = (*v132)(v58, v14);
      if (v68 == v131 || v68 == v119)
      {
        (*v130)(v58, v14);
        uint64_t v61 = *v58;
        sub_100094134(&qword_100913750);
        uint64_t v62 = v126;
        unint64_t v63 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
        uint64_t v64 = swift_allocObject();
        *(_OWORD *)(v64 + 16) = v124;
        uint64_t v65 = (void *)(v64 + v63);
        uint64_t v4 = v134;
        *uint64_t v65 = v61;
        (*(void (**)(void))(v62 + 104))();
      }
      else
      {
        if (v68 != v115) {
          goto LABEL_83;
        }
        (*v130)(v58, v14);
        id v69 = v120;
        uint64_t v70 = v121;
        (*v114)(v120, v58, v121);
        uint64_t v64 = REMAccountsListDataView.Model.Group.lists.getter();
        (*v113)(v69, v70);
        uint64_t v4 = v66;
      }
      uint64_t v18 = (char *)v136;
      (*v60)((char *)v136, v14);
      sub_100202B58(v64);
      v59 += v129;
      --v57;
      Swift::String v58 = (uint64_t *)v135;
    }
    while (v57);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v71 = (void *)v139;
  uint64_t v72 = v111;
  uint64_t v73 = v126;
  id v74 = v116;
  if (v116)
  {
    uint64_t v75 = *(void *)(v139 + 16);
    if (v75)
    {
      unint64_t v136 = *(unsigned __int8 *)(v126 + 80);
      v132 = (uint64_t (**)(uint64_t *, uint64_t))((v136 + 32) & ~v136);
      uint64_t v76 = (char *)v132 + v139;
      sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      uint64_t v77 = *(char **)(v73 + 72);
      id v78 = v74;
      v137 = v71;
      swift_bridgeObjectRetain();
      unint64_t v79 = 0;
      while (1)
      {
        uint64_t v80 = (void *)REMAccountsListDataView.Model.GroupChild.objectID.getter();
        id v81 = [v78 objectID];
        char v82 = static NSObject.== infix(_:_:)();

        if (v82) {
          break;
        }
        ++v79;
        uint64_t v76 = &v77[(void)v76];
        if (v75 == v79)
        {
          swift_bridgeObjectRelease();
          uint64_t v73 = v126;
          id v83 = v116;
          uint64_t v4 = v134;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v86 = v117;
      sub_100452FFC(v79, v117);
      uint64_t v73 = v126;
      uint64_t v4 = v134;
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v86, v134);
      id v83 = v116;
LABEL_50:
      unint64_t v84 = (unint64_t)v132;
    }
    else
    {
      uint64_t v77 = *(char **)(v126 + 72);
      unint64_t v84 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      id v85 = v116;
      id v83 = v74;
    }
    sub_100094134(&qword_100913750);
    unint64_t v136 = (unint64_t)v77;
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = xmmword_100776E40;
    *(void *)(v87 + v84) = REMList.codable.getter();
    (*(void (**)(unint64_t, void, uint64_t))(v73 + 104))(v87 + v84, enum case for REMAccountsListDataView.Model.GroupChild.list(_:), v4);
    uint64_t v138 = v87;
    uint64_t v88 = swift_bridgeObjectRetain();
    sub_100202B58(v88);
    uint64_t v131 = v138;
    uint64_t v89 = *(void *)(v138 + 16);
    if (v89)
    {
      unint64_t v90 = v131 + v84;
      uint64_t v92 = *(char **)(v73 + 16);
      uint64_t v91 = v73 + 16;
      v135 = v92;
      v132 = (uint64_t (**)(uint64_t *, uint64_t))v84;
      v133 = (void (*)(uint64_t *, char *, uint64_t))(v91 + 40);
      uint64_t v93 = (void (**)(char *, uint64_t, uint64_t))(v91 + 16);
      swift_bridgeObjectRetain();
      v137 = _swiftEmptyArrayStorage;
      uint64_t v94 = (uint64_t)v123;
      v95 = (void (*)(char *, unint64_t, uint64_t))v135;
      do
      {
        uint64_t v97 = v127;
        v95(v127, v90, v4);
        v95((char *)v94, (unint64_t)v97, v4);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v133)(v94, 0, 1, v4);
        (*(void (**)(char *, uint64_t))(v91 - 8))(v97, v4);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v94, 1, v4) == 1)
        {
          sub_1000966BC(v94, &qword_100913748);
          unint64_t v96 = v136;
        }
        else
        {
          uint64_t v98 = v94;
          v99 = *v93;
          uint64_t v100 = v122;
          (*v93)(v122, v98, v4);
          v99(v128, (uint64_t)v100, v4);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v101 = (unint64_t)v137;
          }
          else {
            unint64_t v101 = sub_100309894(0, v137[2] + 1, 1, (unint64_t)v137);
          }
          unint64_t v103 = *(void *)(v101 + 16);
          unint64_t v102 = *(void *)(v101 + 24);
          if (v103 >= v102 >> 1) {
            unint64_t v101 = sub_100309894(v102 > 1, v103 + 1, 1, v101);
          }
          *(void *)(v101 + 16) = v103 + 1;
          v137 = (void *)v101;
          unint64_t v96 = v136;
          v104 = (char *)v132 + v101 + v103 * v136;
          uint64_t v4 = v134;
          v99(v104, (uint64_t)v128, v134);
          uint64_t v94 = (uint64_t)v123;
        }
        v90 += v96;
        --v89;
      }
      while (v89);

      swift_bridgeObjectRelease_n();
      uint64_t v73 = v126;
      uint64_t v71 = v137;
    }
    else
    {
      swift_bridgeObjectRelease();

      uint64_t v71 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v139 = (uint64_t)v71;
    uint64_t v72 = v111;
  }
  if (v71[2] >= 4uLL) {
    uint64_t v105 = 4;
  }
  else {
    uint64_t v105 = v71[2];
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v106 = (void *)swift_dynamicCastClass();
  if (!v106)
  {
    swift_bridgeObjectRelease();
    v106 = _swiftEmptyArrayStorage;
  }
  uint64_t v107 = v106[2];
  swift_release();
  if (v107 == v105)
  {
    v108 = (void *)swift_dynamicCastClass();
    id v109 = v116;
    if (!v108)
    {
      swift_bridgeObjectRelease();
      v108 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v108 = sub_10020A3D0((uint64_t)v71, (uint64_t)v71+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80)), 0, (2 * v105) | 1);
    id v109 = v116;
  }
  swift_bridgeObjectRelease();
  *(void *)(v72 + 16) = v108;
  swift_bridgeObjectRelease();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    sub_1002EA330(Strong);

    swift_unknownObjectRelease();
  }
  else
  {
  }
}

uint64_t sub_1002E9E6C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v10[1] = *(void *)(result + 40);
    aBlock[4] = sub_1002EA588;
    aBlock[5] = result;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008C10F0;
    uint64_t v9 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v10[2] = _swiftEmptyArrayStorage;
    sub_1000D1088();
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000D10E0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v9);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1002EA0F0()
{
  if (qword_1009072B8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100913540);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received preferred default list ID changed after RDDataStoreApplicationShortcutListProvider was deallocated", v3, 2u);
    swift_slowDealloc();
  }

  sub_1002E8E60();
}

uint64_t sub_1002EA1D4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002EA20C()
{
}

uint64_t sub_1002EA214()
{
  return sub_1002E9E6C();
}

uint64_t sub_1002EA21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002EA22C()
{
  return swift_release();
}

void *sub_1002EA234(void *a1, uint64_t a2, uint64_t a3)
{
  v3[4] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v7 = (char *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_storeControllerObservationToken;
  uint64_t v8 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)((char *)v3
            + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_preferredDefaultListIDObservationToken) = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_isStarted) = 0;
  v3[5] = a1;
  v3[6] = a2;
  id v9 = objc_allocWithZone((Class)REMStore);
  id v10 = a1;
  swift_retain();
  id v11 = [v9 initWithDaemonController:a3];
  *(void *)((char *)v3 + OBJC_IVAR____TtC7remindd42RDDataStoreApplicationShortcutListProvider_store) = v11;
  v3[2] = _swiftEmptyArrayStorage;
  return v3;
}

uint64_t sub_1002EA330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_1002EA580;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008C10C8;
  id v10 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release();
}

void sub_1002EA580()
{
}

void sub_1002EA588()
{
}

uint64_t sub_1002EA5A0(uint64_t a1)
{
  uint64_t result = sub_1002ECE8C(&qword_100913790, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.AppIntentsSectionsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002EA5F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100913758);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100913758);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002EA6C0@<X0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v29 = a3;
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v28 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v35 = (uint64_t)&v26 - v14;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v16 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.AppIntentsSectionsInvocation.Parameters.configuration.getter();
  uint64_t v34 = (uint64_t)a1;
  uint64_t v19 = v36;
  sub_1002EC3EC(a1);
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, Configuration);
  }
  id v27 = v12;
  uint64_t v36 = v10;
  uint64_t v21 = v31;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, Configuration);
  id v22 = [v32 fetchResultTokenToDiffAgainst];
  sub_10051F2BC(v22, v34, v35);

  uint64_t v23 = v9;
  REMRemindersListDataView.ListsSectionsModel.init(lists:completedRemindersCount:hasCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  uint64_t v24 = v30;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v6, v9, v21);
  uint64_t v25 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v27, v35, v36);
  sub_1002ECE8C(&qword_1009138B8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel);
  sub_1002ECE8C(&qword_1009138C0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v35, v36);
}

void sub_1002EAA90(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (!*(void *)a2) {
    return;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  id v8 = *(id *)a2;
  id v9 = [v8 remObjectID];
  if (!v9)
  {

    return;
  }
  uint64_t v10 = v9;
  if (v7 >> 62)
  {
    id v17 = v9;
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 > 1) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRetain();

    goto LABEL_14;
  }
  uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v12 = v9;
  if (v11 <= 1) {
    goto LABEL_13;
  }
LABEL_5:
  unint64_t v13 = sub_10022914C(v10, a3);
  if (v3)
  {

    swift_errorRelease();
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v14 = (void *)v13;
    if (v13)
    {
      _s8BaseListCMa();
      id v15 = v14;
      unint64_t v7 = REMOrderedIdentifierMap.reorder<A>(objects:)();

      uint64_t v16 = v15;
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRetain();
LABEL_14:
  uint64_t v16 = 0;
  id v15 = v10;
LABEL_15:

  id v19 = a3;
  uint64_t v20 = sub_1002EBA00(v7, (unint64_t)v19);
  swift_bridgeObjectRelease();
  if (v4)
  {
  }
  else
  {

    uint64_t v21 = *a1;
    uint64_t v22 = *(void *)(*a1 + 16);
    id v23 = v10;
    uint64_t v24 = v23;
    if (v22 && (unint64_t v25 = sub_100306FE8((uint64_t)v23), (v26 & 1) != 0))
    {
      id v27 = *(void **)(*(void *)(v21 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    else
    {
      id v27 = _swiftEmptyArrayStorage;
    }

    sub_100202928((uint64_t)v20);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *a1;
    *a1 = 0x8000000000000000;
    sub_1002C5EC0((uint64_t)v27, v24, isUniquelyReferenced_nonNull_native);
    *a1 = v29;

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1002EAD18@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v79 = a1;
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v70 = *(void *)(v5 - 8);
  uint64_t v71 = v5;
  __chkstk_darwin(v5);
  id v69 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for REMRemindersListDataView.SectionLite();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v80 = v7;
  uint64_t v81 = v8;
  __chkstk_darwin(v7);
  char v82 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List.ListType();
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  __chkstk_darwin(v10);
  uint64_t v72 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  uint64_t v74 = v2;
  uint64_t v75 = (char *)&v68 - v14;
  id v15 = *(void ***)(v2 + 16);
  id v16 = [v15 entityName:v13];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v20 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  uint64_t v73 = a2;
  if (v21 == v17 && v23 == v19)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      sub_1000963CC(0, (unint64_t *)&unk_100910210);
      id v33 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v36 = v35;

      if (v34 == v17 && v36 == v19)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) == 0)
        {
          uint64_t v49 = v15;
          if (qword_1009072C0 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_10008E2DC(v50, (uint64_t)qword_100913758);
          swift_retain_n();
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v51, v52))
          {
            unint64_t v53 = (uint8_t *)swift_slowAlloc();
            uint64_t v54 = (void *)swift_slowAlloc();
            *(_DWORD *)unint64_t v53 = 138412290;
            unint64_t v84 = v49;
            BOOL v55 = v49;
            a2 = v73;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v54 = v49;
            swift_release_n();
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "[AppIntentsSectionsInvocation] Unexpected list type to fetch sections: %@", v53, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          uint64_t v56 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(a2, 1, 1, v56);
        }
      }
      uint64_t v38 = qword_100907100;
      unint64_t v26 = v15;
      if (v38 != -1) {
        goto LABEL_48;
      }
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = qword_100907908;
  unint64_t v26 = v15;
  if (v25 != -1) {
LABEL_37:
  }
    swift_once();
  id v27 = (objc_class *)qword_100942578;
  uint64_t v28 = (objc_class *)sub_1005868C0();
  uint64_t v29 = (objc_class *)sub_100586DE0();
  unint64_t v30 = sub_10058707C((unint64_t)v15, 1, v79, v27, v28, v29);

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    int v68 = v15;
    if (!(v30 >> 62))
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      type metadata accessor for REMCDBaseSection();
      uint64_t i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
LABEL_17:
      unint64_t v42 = v30;
      goto LABEL_18;
    }
    type metadata accessor for REMCDBaseSection();
    swift_bridgeObjectRetain();
    unint64_t v42 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    for (uint64_t i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.regular(_:);
          ;
          uint64_t i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:))
    {
LABEL_18:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v76 + 104))(v75, *i, v77);
      if (v42 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_39:
          swift_bridgeObjectRelease();
          int64_t v45 = _swiftEmptyArrayStorage;
LABEL_40:
          unint64_t v84 = v45;
          sub_100094134(&qword_1009142E0);
          uint64_t v57 = swift_allocObject();
          *(_OWORD *)(v57 + 16) = xmmword_100776E40;
          (*(void (**)(char *, void, uint64_t))(v70 + 104))(v69, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v71);
          REMRemindersListDataView.SectionLite.init(type:reminders:)();
          sub_100203524(v57);
          char v82 = (char *)REMObjectID.codable.getter();
          Swift::String v58 = *(void **)(v74 + 24);
          id v59 = [v58 name:v68];
          if (v59)
          {
            NSString v60 = v59;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          uint64_t v61 = v73;
          id v62 = [v58 color];
          if (v62)
          {
            unint64_t v63 = v62;
            REMColor.codable.getter();
          }
          uint64_t v65 = v75;
          uint64_t v64 = v76;
          uint64_t v66 = v77;
          (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v72, v75, v77);
          REMRemindersListDataView.ListsSectionsModel.List.init(listID:listName:listColor:listType:sections:)();
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
          uint64_t v67 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v61, 0, 1, v67);
        }
      }
      else
      {
        uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v43) {
          goto LABEL_39;
        }
      }
      id v83 = _swiftEmptyArrayStorage;
      id v15 = &v83;
      sub_1001DE1E4(0, v43 & ~(v43 >> 63), 0);
      if ((v43 & 0x8000000000000000) == 0)
      {
        uint64_t v44 = 0;
        int64_t v45 = v83;
        uint64_t v78 = v81 + 32;
        unint64_t v79 = v42 & 0xC000000000000001;
        while (v43 != v44)
        {
          if (v79) {
            id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v46 = *(id *)(v42 + 8 * v44 + 32);
          }
          uint64_t v47 = v46;
          sub_1002EB794();

          id v83 = v45;
          unint64_t v26 = v45[2];
          unint64_t v48 = v45[3];
          if (v26 >= v48 >> 1)
          {
            sub_1001DE1E4(v48 > 1, v26 + 1, 1);
            int64_t v45 = v83;
          }
          ++v44;
          v45[2] = v26 + 1;
          id v15 = (void **)((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
          (*(void (**)(char *, char *, uint64_t))(v81 + 32))((char *)v15 + (void)v45 + *(void *)(v81 + 72) * v26, v82, v80);
          if (v43 == v44)
          {
            swift_bridgeObjectRelease();
            goto LABEL_40;
          }
        }
        __break(1u);
        goto LABEL_37;
      }
      __break(1u);
LABEL_48:
      swift_once();
LABEL_14:
      uint64_t v39 = (objc_class *)qword_100942090;
      unint64_t v40 = (objc_class *)sub_1001D6E88();
      uint64_t v41 = (objc_class *)sub_1001D73A8();
      unint64_t v30 = sub_1001D7584((unint64_t)v15, 1, v79, v39, v40, v41);

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v3) {
        return result;
      }
      int v68 = v15;
      if (!(v30 >> 62))
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        type metadata accessor for REMCDBaseSection();
        uint64_t i = (unsigned int *)&enum case for REMRemindersListDataView.ListsSectionsModel.List.ListType.customSmartList(_:);
        goto LABEL_17;
      }
      type metadata accessor for REMCDBaseSection();
      swift_bridgeObjectRetain();
      unint64_t v42 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1002EB794()
{
  uint64_t v1 = v0;
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v19 = 0;
  id v7 = [v0 remObjectIDWithError:&v19 v4];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = v19;
    id v10 = [v1 displayName];
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      *uint64_t v6 = REMObjectID.codable.getter();
      v6[1] = v12;
      v6[3] = 0;
      v6[4] = 0;
      v6[2] = v14;
      (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v6, enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:), v2);
      REMRemindersListDataView.SectionLite.init(type:reminders:)();
    }
    else
    {
      id v16 = self;
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      NSString v18 = String._bridgeToObjectiveC()();
      [v16 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v18];

      swift_willThrow();
    }
  }
  else
  {
    id v15 = v19;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t _s8BaseListCMa()
{
  return self;
}

void *sub_1002EBA00(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100094134(&qword_1009138C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List();
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v36 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v30 = (char *)&v27 - v12;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_3:
      unint64_t v35 = a1 & 0xC000000000000001;
      uint64_t v32 = v31 + 32;
      id v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
      char v37 = _swiftEmptyArrayStorage;
      uint64_t v14 = 4;
      unint64_t v28 = a2;
      unint64_t v29 = a1;
      uint64_t v34 = v13;
      id v15 = (void (**)(char *, char *, uint64_t))(v31 + 32);
      while (1)
      {
        uint64_t v16 = v9;
        uint64_t v17 = v14 - 4;
        if (v35)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v18 = __OFADD__(v17, 1);
          uint64_t v19 = v14 - 3;
          if (v18) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 8 * v14);
          swift_retain();
          BOOL v18 = __OFADD__(v17, 1);
          uint64_t v19 = v14 - 3;
          if (v18)
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        sub_1002EAD18(a2, (uint64_t)v8);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return (void *)swift_release();
        }
        swift_release();
        uint64_t v9 = v16;
        if ((*v33)(v8, 1, v16) == 1)
        {
          sub_1002ECED4((uint64_t)v8);
        }
        else
        {
          id v20 = *v15;
          uint64_t v21 = v30;
          (*v15)(v30, v8, v16);
          v20(v36, v21, v16);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v22 = (unint64_t)v37;
          }
          else {
            unint64_t v22 = sub_100309604(0, v37[2] + 1, 1, (unint64_t)v37);
          }
          unint64_t v24 = *(void *)(v22 + 16);
          unint64_t v23 = *(void *)(v22 + 24);
          if (v24 >= v23 >> 1) {
            unint64_t v22 = sub_100309604(v23 > 1, v24 + 1, 1, v22);
          }
          *(void *)(v22 + 16) = v24 + 1;
          unint64_t v25 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
          char v37 = (void *)v22;
          uint64_t v9 = v16;
          v20((char *)(v22 + v25 + *(void *)(v31 + 72) * v24), v36, v16);
          a2 = v28;
          a1 = v29;
        }
        ++v14;
        if (v19 == v34)
        {
          swift_bridgeObjectRelease();
          return v37;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1002EBD74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = a1;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = 8 * i;
    BOOL v18 = *(void **)(*(void *)(a2 + 56) + v17);
    v20[0] = *(id *)(*(void *)(a2 + 48) + v17);
    v20[1] = v18;
    id v19 = v20[0];
    swift_bridgeObjectRetain();
    sub_1002EAA90(&v21, (uint64_t)v20, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      return;
    }
    swift_bridgeObjectRelease();

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v10) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_17:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v10) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v10) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v10) {
    goto LABEL_26;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15) {
    goto LABEL_16;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v10)
  {
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    int64_t v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_1002EBF4C(uint64_t result, char a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void **)(result + 40);
    uint64_t v8 = (void *)*a3;
    id v9 = *(id *)(result + 32);
    id v10 = v7;
    uint64_t v45 = v6;
    swift_bridgeObjectRetain();
    unint64_t v12 = sub_100306FE8((uint64_t)v9);
    uint64_t v13 = v8[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    char v16 = v11;
    if (v8[3] < v15)
    {
      sub_10030F64C(v15, a2 & 1);
      unint64_t v17 = sub_100306FE8((uint64_t)v9);
      if ((v16 & 1) != (v18 & 1))
      {
LABEL_27:
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      unint64_t v12 = v17;
      id v19 = (void *)*a3;
      if ((v16 & 1) == 0) {
        goto LABEL_12;
      }
LABEL_9:
      id v20 = *(id *)(v19[7] + 8 * v12);

      uint64_t v21 = v19[7];
      *(void *)(v21 + 8 * v12) = v20;
      uint64_t v22 = v3 - 1;
      if (!v22) {
        return swift_bridgeObjectRelease();
      }
LABEL_16:
      for (unint64_t i = (void **)(v45 + 56); ; i += 2)
      {
        unint64_t v30 = *i;
        uint64_t v31 = (void *)*a3;
        id v32 = *(i - 1);
        id v33 = v30;
        unint64_t v34 = sub_100306FE8((uint64_t)v32);
        uint64_t v36 = v31[2];
        BOOL v37 = (v35 & 1) == 0;
        BOOL v25 = __OFADD__(v36, v37);
        uint64_t v38 = v36 + v37;
        if (v25) {
          break;
        }
        char v39 = v35;
        if (v31[3] < v38)
        {
          sub_10030F64C(v38, 1);
          unint64_t v34 = sub_100306FE8((uint64_t)v32);
          if ((v39 & 1) != (v40 & 1)) {
            goto LABEL_27;
          }
        }
        uint64_t v41 = (void *)*a3;
        uint64_t v42 = 8 * v34;
        if (v39)
        {
          id v28 = *(id *)(v41[7] + 8 * v34);

          uint64_t v29 = v41[7];
          *(void *)(v29 + v42) = v28;
        }
        else
        {
          v41[(v34 >> 6) + 8] |= 1 << v34;
          *(void *)(v41[6] + 8 * v34) = v32;
          *(void *)(v41[7] + 8 * v34) = v33;
          uint64_t v43 = v41[2];
          BOOL v25 = __OFADD__(v43, 1);
          uint64_t v44 = v43 + 1;
          if (v25) {
            goto LABEL_26;
          }
          v41[2] = v44;
        }
        if (!--v22) {
          return swift_bridgeObjectRelease();
        }
      }
      goto LABEL_25;
    }
    if (a2)
    {
      id v19 = (void *)*a3;
      if (v11) {
        goto LABEL_9;
      }
    }
    else
    {
      sub_100319158();
      id v19 = (void *)*a3;
      if (v16) {
        goto LABEL_9;
      }
    }
LABEL_12:
    v19[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v23 = 8 * v12;
    *(void *)(v19[6] + v23) = v9;
    *(void *)(v19[7] + v23) = v10;
    uint64_t v24 = v19[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v19[2] = v26;
    uint64_t v22 = v3 - 1;
    if (!v22) {
      return swift_bridgeObjectRelease();
    }
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1002EC200(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v21 = a1;
  if (a2 >> 62) {
    goto LABEL_17;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      uint64_t v5 = i - 4;
      id v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a2 + 8 * i);
      id v9 = v8;
      uint64_t v10 = i - 3;
      if (__OFADD__(v5, 1)) {
        break;
      }
      id v20 = 0;
      id v11 = [v8 remObjectIDWithError:&v20];
      if (!v11)
      {
        id v18 = v20;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v5 = v21;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return v5;
      }
      unint64_t v12 = v11;
      uint64_t v13 = *(void *)(a3 + 16);
      id v14 = v20;
      if (v13 && (unint64_t v15 = sub_100306FE8((uint64_t)v12), (v16 & 1) != 0))
      {
        uint64_t v17 = *(void *)(*(void *)(a3 + 56) + 8 * v15);
        swift_bridgeObjectRetain();

        sub_100202928(v17);
        unint64_t v12 = v9;
      }
      else
      {
      }
      if (v10 == v6)
      {
        swift_bridgeObjectRelease();
        return v21;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1002EC3EC(void *a1)
{
  unint64_t v5 = (unint64_t)a1;
  uint64_t v6 = sub_100125148(a1);
  if (v2) {
    return v1;
  }
  unint64_t v7 = (unint64_t)v6;
  unint64_t v75 = sub_1003AFCD0(0, (void *)v5, 0);
  if (v7 >> 62) {
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v70 = (void *)v5;
    if (v8)
    {
      unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v8 < 0) {
        goto LABEL_54;
      }
      uint64_t v9 = 0;
      unint64_t v5 = v7 & 0xC000000000000001;
      while (v8 != v9)
      {
        if (v5) {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v10 = *(id *)(v7 + 8 * v9 + 32);
        }
        id v11 = v10;
        unint64_t v4 = _s8BaseListCMa();
        uint64_t v3 = (void *)swift_allocObject();
        v3[3] = v11;
        id v78 = 0;
        id v12 = v11;
        id v13 = [v12 remObjectIDWithError:&v78];
        if (!v13)
        {
LABEL_26:
          id v25 = v78;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_deallocPartialClassInstance();

          unint64_t v1 = v79;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return v1;
        }
        id v14 = v13;
        ++v9;
        id v15 = v78;

        v3[2] = v14;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v8 == v9)
        {
          char v16 = (void *)v79;
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      __break(1u);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    char v16 = _swiftEmptyArrayStorage;
LABEL_15:
    if (!(v75 >> 62))
    {
      unint64_t v7 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v7) {
        break;
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    unint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      break;
    }
LABEL_17:
    unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_85;
    }
    uint64_t v17 = 0;
    unint64_t v18 = v75;
    unint64_t v5 = v75 & 0xC000000000000001;
    while (v7 != v17)
    {
      if (v5) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(v18 + 8 * v17 + 32);
      }
      id v20 = v19;
      unint64_t v4 = _s8BaseListCMa();
      uint64_t v3 = (void *)swift_allocObject();
      v3[3] = v20;
      id v78 = 0;
      id v12 = v20;
      id v21 = [v12 remObjectIDWithError:&v78];
      if (!v21) {
        goto LABEL_26;
      }
      id v22 = v21;
      ++v17;
      id v23 = v78;

      v3[2] = v22;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v18 = v75;
      if (v7 == v17)
      {
        uint64_t v24 = (void *)v79;
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = _swiftEmptyArrayStorage;
LABEL_32:
  unint64_t v79 = (unint64_t)v16;
  sub_100202954((unint64_t)v24);
  unint64_t v4 = v79;
  unint64_t v79 = (unint64_t)_swiftEmptyDictionarySingleton;
  if (v4 >> 62) {
    goto LABEL_55;
  }
  uint64_t v26 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v76 = v26;
  if (v26)
  {
LABEL_34:
    unint64_t v73 = v4 & 0xC000000000000001;
    uint64_t v27 = _swiftEmptyDictionarySingleton;
    uint64_t v28 = 4;
    while (1)
    {
      uint64_t v30 = v28 - 4;
      if (v73)
      {
        uint64_t v31 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v32 = v28 - 3;
        if (__OFADD__(v30, 1)) {
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v31 = *(void *)(v4 + 8 * v28);
        swift_retain();
        uint64_t v32 = v28 - 3;
        if (__OFADD__(v30, 1))
        {
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          swift_bridgeObjectRetain_n();
          uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v76 = v26;
          if (!v26) {
            break;
          }
          goto LABEL_34;
        }
      }
      unint64_t v33 = v4;
      unint64_t v4 = (unint64_t)[*(id *)(v31 + 24) account:v70];
      unint64_t v35 = sub_100307238((void *)v4);
      uint64_t v36 = v27[2];
      BOOL v37 = (v34 & 1) == 0;
      uint64_t v38 = v36 + v37;
      if (__OFADD__(v36, v37)) {
        goto LABEL_52;
      }
      char v39 = v34;
      if (v27[3] < v38)
      {
        sub_10030F658(v38, 1);
        uint64_t v27 = (void *)v79;
        unint64_t v40 = sub_100307238((void *)v4);
        if ((v39 & 1) != (v41 & 1))
        {
          sub_100094134((uint64_t *)&unk_10090AF30);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          goto LABEL_100;
        }
        unint64_t v35 = v40;
      }
      if (v39)
      {

        uint64_t v29 = (void *)(v27[7] + 8 * v35);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v42 = swift_allocObject();
        *(_OWORD *)(v42 + 16) = xmmword_10077A530;
        *(void *)(v42 + 32) = v31;
        id v78 = (id)v42;
        specialized Array._endMutation()();
        id v43 = v78;
        v27[(v35 >> 6) + 8] |= 1 << v35;
        uint64_t v44 = 8 * v35;
        *(void *)(v27[6] + v44) = v4;
        *(void *)(v27[7] + v44) = v43;
        uint64_t v45 = v27[2];
        BOOL v46 = __OFADD__(v45, 1);
        uint64_t v47 = v45 + 1;
        if (v46) {
          goto LABEL_53;
        }
        v27[2] = v47;
      }
      unint64_t v4 = v33;
      ++v28;
      uint64_t v26 = v76;
      if (v32 == v76) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v27 = _swiftEmptyDictionarySingleton;
LABEL_57:
  swift_bridgeObjectRelease();
  id v48 = v70;
  sub_1002EBD74((uint64_t)_swiftEmptyDictionarySingleton, (uint64_t)v27, v48);
  char v16 = 0;
  uint64_t v70 = v49;
  swift_release();

  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v26)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
    unint64_t v5 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_70;
  }
  if (v26 < 1)
  {
    __break(1u);
    goto LABEL_98;
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v26; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v51 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v51 = *(void *)(v4 + 8 * i + 32);
      swift_retain();
    }
    id v52 = [*(id *)(v51 + 24) account:v70];
    swift_release();
    if (v52)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v26 = v76;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v5 = v79;
LABEL_70:
  swift_bridgeObjectRelease();
  if (v5 >> 62) {
    goto LABEL_86;
  }
  uint64_t v53 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v53)
  {
    while (1)
    {
      unint64_t v79 = (unint64_t)v3;
      sub_1001DE484(0, v53 & ~(v53 >> 63), 0);
      if (v53 < 0) {
        break;
      }
      uint64_t v54 = 0;
      unint64_t v74 = v5 & 0xC000000000000001;
      unint64_t v77 = v79;
      uint64_t v71 = v16;
      unint64_t v72 = v5;
      while (v53 != v54)
      {
        if (v74) {
          id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v55 = *(id *)(v5 + 8 * v54 + 32);
        }
        uint64_t v56 = v55;
        id v78 = 0;
        id v57 = [v55 remObjectIDWithError:&v78 v70];
        unint64_t v1 = (unint64_t)v78;
        if (!v57)
        {
          id v63 = v78;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();

          return v1;
        }
        id v58 = v57;
        uint64_t v3 = (void *)v77;
        unint64_t v79 = v77;
        unint64_t v60 = *(void *)(v77 + 16);
        unint64_t v59 = *(void *)(v77 + 24);
        id v61 = v78;
        if (v60 >= v59 >> 1)
        {
          sub_1001DE484(v59 > 1, v60 + 1, 1);
          uint64_t v3 = (void *)v79;
        }
        ++v54;
        v3[2] = v60 + 1;
        unint64_t v77 = (unint64_t)v3;
        id v62 = &v3[2 * v60];
        unsigned char v62[4] = v58;
        v62[5] = v56;
        char v16 = v71;
        unint64_t v5 = v72;
        if (v53 == v54)
        {
          swift_bridgeObjectRelease();
          uint64_t v64 = v3;
          goto LABEL_88;
        }
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      swift_bridgeObjectRetain();
      uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v53) {
        goto LABEL_87;
      }
    }
LABEL_98:
    __break(1u);
  }
LABEL_87:
  swift_bridgeObjectRelease();
  uint64_t v64 = _swiftEmptyArrayStorage;
LABEL_88:
  if (v64[2])
  {
    sub_100094134(&qword_10090E168);
    uint64_t v65 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v65 = _swiftEmptyDictionarySingleton;
  }
  unint64_t v79 = (unint64_t)v65;
  sub_1002EBF4C((uint64_t)v64, 1, &v79);
  if (v16)
  {
LABEL_100:
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v66 = (unint64_t)sub_10020A148(v79);
    swift_release();
    swift_bridgeObjectRetain();
    if ((v66 & 0x8000000000000000) != 0 || (uint64_t v67 = (void *)v66, (v66 & 0x4000000000000000) != 0))
    {
      uint64_t v67 = sub_100209D74(v66);
      swift_release();
    }
    unint64_t v79 = (unint64_t)v67;
    sub_1006891D4((uint64_t *)&v79);
    swift_release();
    unint64_t v68 = v79;
    swift_bridgeObjectRetain();
    unint64_t v1 = sub_1002EC200((uint64_t)_swiftEmptyArrayStorage, v68, (uint64_t)v70);
    swift_release();
    swift_bridgeObjectRelease_n();
    return v1;
  }
  return result;
}

uint64_t sub_1002ECE8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002ECED4(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009138C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1002ECF34()
{
  uint64_t v1 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100776E80;
  id v5 = [v0 URL];
  if (v5)
  {
    uint64_t v6 = v5;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 0, 1, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 1, 1, v8);
  }
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000C5B38();
  *(void *)(v4 + 64) = v12;
  *(void *)(v4 + 32) = v9;
  *(void *)(v4 + 40) = v11;
  id result = [v0 identifier];
  if (result)
  {
    id v14 = result;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;

    *(void *)(v4 + 96) = &type metadata for String;
    *(void *)(v4 + 104) = v12;
    *(void *)(v4 + 72) = v15;
    *(void *)(v4 + 80) = v17;
    return (id)String.init(format:_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_1002ED104(uint64_t a1)
{
  return sub_1002EF9D0(a1, (uint64_t *)&unk_100913970);
}

unint64_t sub_1002ED110(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913BC0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED224(uint64_t a1)
{
  return sub_1002ED8E8(a1, &qword_10090E160);
}

unint64_t sub_1002ED230(uint64_t a1)
{
  return sub_1002EF9D0(a1, (uint64_t *)&unk_100914410);
}

unint64_t sub_1002ED23C(uint64_t a1)
{
  return sub_1002ED3C0(a1, &qword_1009142F0, &qword_1009142E8, (uint64_t (*)(char *))sub_100306EC4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

unint64_t sub_1002ED278(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_10090EAB8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100307A5C(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED384(uint64_t a1)
{
  return sub_1002ED3C0(a1, &qword_100914740, &qword_100914730, (uint64_t (*)(char *))sub_100306EC4, (uint64_t (*)(void))&type metadata accessor for UUID);
}

unint64_t sub_1002ED3C0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(char *), uint64_t (*a5)(void))
{
  uint64_t v29 = a5;
  uint64_t v30 = a4;
  uint64_t v8 = sub_100094134(a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  BOOL v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v13 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a3);
  uint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = (void *)v12;
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  uint64_t v15 = *(int *)(v8 + 48);
  uint64_t v16 = v12 + 64;
  unint64_t v17 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v28[1] = a1;
  uint64_t v18 = a1 + v17;
  uint64_t v19 = *(void *)(v9 + 72);
  swift_retain();
  while (1)
  {
    sub_1000BF710(v18, (uint64_t)v11, a2);
    unint64_t result = v30(v11);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = v13[6];
    uint64_t v24 = v29(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v11, v24);
    *(void *)(v13[7] + 8 * v22) = *(void *)&v11[v15];
    uint64_t v25 = v13[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_11;
    }
    long long v13[2] = v27;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED5C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009139A8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED6E4(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100913DF0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913DE8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000BF710(v12, (uint64_t)v5, (uint64_t *)&unk_100913DF0);
    uint64_t v14 = *v5;
    unint64_t result = sub_100306FE8(*v5);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v7[6] + 8 * result) = v14;
    uint64_t v18 = v7[7];
    uint64_t v19 = type metadata accessor for REMManualOrdering.PinnedList();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v9, v19);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED8DC(uint64_t a1)
{
  return sub_1002ED8E8(a1, &qword_10090E158);
}

unint64_t sub_1002ED8E8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_retain();
    unint64_t result = sub_100306FE8((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002ED9F0(uint64_t a1)
{
  return sub_1002EF0A0(a1, (uint64_t *)&unk_100914700, &qword_1009146F8, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

unint64_t sub_1002EDA18(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009146D8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_100307084((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EDB18(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_1009147C8);
}

unint64_t sub_1002EDB24(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_100914400);
}

unint64_t sub_1002EDB30(uint64_t a1)
{
  return sub_1002EFC2C(a1, (uint64_t *)&unk_1009147D0);
}

unint64_t sub_1002EDB3C(uint64_t a1)
{
  return sub_1002EF8AC(a1, (uint64_t *)&unk_1009146C0, (uint64_t (*)(id))sub_100307040);
}

unint64_t sub_1002EDB5C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_100914430);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_100306F98((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EDC5C(uint64_t a1)
{
  return sub_1002EF9D0(a1, (uint64_t *)&unk_100913AC0);
}

unint64_t sub_1002EDC68(uint64_t a1)
{
  return sub_1002EF5D4(a1, &qword_100913AA8);
}

unint64_t sub_1002EDC74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100914810);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    id v6 = *v4;
    id v7 = v5;
    id v8 = v6;
    unint64_t result = sub_10030724C(v5, (unint64_t *)&qword_10090A3B0);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v2[6] + v11) = v5;
    *(void *)(v2[7] + v11) = v8;
    uint64_t v12 = v2[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EDD9C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100914748);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100307194(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EDEB8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_100914660);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000BF710(v6, (uint64_t)&v13, &qword_100914698);
    uint64_t v7 = v13;
    unint64_t result = sub_100306FE8(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10009A1A0(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EDFE8(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_100913938);
}

unint64_t sub_1002EDFF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100914940);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1003074FC((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE10C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100914948);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_unknownObjectRetain();
    unint64_t result = sub_10030754C((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE218(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_100913DB8);
}

unint64_t sub_1002EE224(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009141C0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009141A8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000BF710(v12, (uint64_t)v5, &qword_1009141C0);
    unint64_t result = sub_100306EC4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE418(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913960);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000BF710(v6, (uint64_t)v15, &qword_100913968);
    unint64_t result = sub_100307418((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_10009A1A0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE55C(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_100914800);
}

unint64_t sub_1002EE568(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100913A28);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913A20);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v25 = &v5[*(int *)(v2 + 48)];
  uint64_t v9 = v6 + 64;
  uint64_t v10 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v11 = *(void *)(v3 + 72);
  v23[1] = a1;
  uint64_t v24 = v11;
  swift_retain();
  while (1)
  {
    sub_1000BF710(v10, (uint64_t)v5, &qword_100913A28);
    unint64_t result = sub_100306EC4((uint64_t)v5);
    if (v13) {
      break;
    }
    unint64_t v14 = result;
    *(void *)(v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v15 = v7[6];
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(unint64_t, char *, uint64_t))(v17 + 32);
    unint64_t v19 = *(void *)(v17 + 72) * v14;
    v18(v15 + v19, v5, v16);
    unint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v18)(v7[7] + v19, v25, v16);
    uint64_t v20 = v7[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v7[2] = v22;
    v10 += v24;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE780(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913EB8);
}

unint64_t sub_1002EE78C(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913C20);
}

unint64_t sub_1002EE798(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = *(v5 - 1);
    id v8 = v6;
    unint64_t result = sub_100307A5C(v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = 8 * result;
    *(void *)(v3[6] + v11) = v7;
    *(void *)(v3[7] + v11) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE8A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_100914AE0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EE9BC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913CA8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EEAD8(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100914048);
}

unint64_t sub_1002EEAE4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100914568);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_100097E38(v7, v8);
    unint64_t result = sub_1001806F8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (uint64_t *)(v2[7] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EEC0C(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100913D80);
}

unint64_t sub_1002EEC18(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100921FE0);
}

unint64_t sub_1002EEC24(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_1009144D0);
}

unint64_t sub_1002EEC30(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100921F50);
}

unint64_t sub_1002EEC3C(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100914470);
}

unint64_t sub_1002EEC48(uint64_t a1)
{
  return sub_1002EF8AC(a1, &qword_10090E168, (uint64_t (*)(id))sub_100306FE8);
}

unint64_t sub_1002EEC68(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_100913B90);
}

unint64_t sub_1002EEC74(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009140A8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EED88(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913F60);
}

unint64_t sub_1002EED94(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913F88);
}

unint64_t sub_1002EEDA0(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913FC0);
}

unint64_t sub_1002EEDAC(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913FE8);
}

unint64_t sub_1002EEDB8(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100914020);
}

unint64_t sub_1002EEDC4(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100914080);
}

unint64_t sub_1002EEDD0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009139D0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    uint64_t v11 = v5[2];
    uint64_t v10 = v5[3];
    uint64_t v13 = v5[4];
    uint64_t v12 = v5[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v16 = v6;
    v16[1] = v7;
    uint64_t v17 = (void *)(v3[7] + 48 * result);
    *uint64_t v17 = v8;
    v17[1] = v9;
    v17[2] = v11;
    v17[3] = v10;
    v17[4] = v13;
    v17[5] = v12;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 8;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EEF34(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_1009139E8);
}

unint64_t sub_1002EEF40(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_100913A08);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = (void *)*(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    id v8 = (id)*(v4 - 3);
    id v9 = v5;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100306FE8((uint64_t)v8);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v8;
    uint64_t v12 = (void *)(v2[7] + 24 * result);
    void *v12 = v9;
    v12[1] = v6;
    void v12[2] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF078(uint64_t a1)
{
  return sub_1002EF0A0(a1, &qword_100913DC8, &qword_100913DC0, (uint64_t (*)(void))&type metadata accessor for Date);
}

unint64_t sub_1002EF0A0(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v30 = a4;
  uint64_t v31 = a2;
  uint64_t v6 = sub_100094134(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (void *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    char v11 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a3);
  uint64_t v10 = static _DictionaryStorage.allocate(capacity:)();
  char v11 = (void *)v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  uint64_t v13 = (char *)v9 + *(int *)(v6 + 48);
  uint64_t v14 = v10 + 64;
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29[1] = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_1000BF710(v16, (uint64_t)v9, v31);
    uint64_t v18 = *v9;
    uint64_t v19 = v9[1];
    unint64_t result = sub_1001806F8(*v9, v19);
    if (v21) {
      break;
    }
    unint64_t v22 = result;
    *(void *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v23 = (uint64_t *)(v11[6] + 16 * result);
    uint64_t *v23 = v18;
    v23[1] = v19;
    uint64_t v24 = v11[7];
    uint64_t v25 = v30(0);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v24 + *(void *)(*(void *)(v25 - 8) + 72) * v22, v13, v25);
    uint64_t v26 = v11[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_11;
    }
    v11[2] = v28;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF2A0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_100914450);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF3B4(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009142F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    char v7 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009142B8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  char v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000BF710(v12, (uint64_t)v5, &qword_1009142F8);
    unint64_t result = sub_100306EC4((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(_OWORD *)(v7[7] + 16 * v16) = *(_OWORD *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF5A8(uint64_t a1)
{
  return sub_1002EF8AC(a1, &qword_10090E170, (uint64_t (*)(id))sub_100306FE8);
}

unint64_t sub_1002EF5C8(uint64_t a1)
{
  return sub_1002EF5D4(a1, &qword_100913C78);
}

unint64_t sub_1002EF5D4(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_100306FE8((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF6DC(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100913C80);
}

unint64_t sub_1002EF6E8(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100921E10);
}

unint64_t sub_1002EF6F4(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100914240);
}

unint64_t sub_1002EF700(uint64_t a1)
{
  return sub_1002EF8AC(a1, &qword_10090E190, (uint64_t (*)(id))sub_1003075EC);
}

unint64_t sub_1002EF720(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_100914820);
}

unint64_t sub_1002EF72C(uint64_t a1)
{
  return sub_1002ED3C0(a1, &qword_100914858, &qword_100914840, (uint64_t (*)(char *))sub_100307890, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

unint64_t sub_1002EF768(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_1009143D0);
}

unint64_t sub_1002EF774(uint64_t a1)
{
  return sub_1002EFC2C(a1, (uint64_t *)&unk_100914AA0);
}

unint64_t sub_1002EF780(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134((uint64_t *)&unk_100913B00);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *(v4 - 1);
    uint64_t v5 = *v4;
    swift_retain();
    swift_retain();
    unint64_t result = sub_1003079AC(v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF88C(uint64_t a1)
{
  return sub_1002EF8AC(a1, &qword_10090E1D0, (uint64_t (*)(id))sub_100306FE8);
}

unint64_t sub_1002EF8AC(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  id v7 = (void **)(a1 + 40);
  while (1)
  {
    char v8 = *v7;
    id v9 = *(v7 - 1);
    id v10 = v8;
    unint64_t result = a3(v9);
    if (v12) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = 8 * result;
    *(void *)(v5[6] + v13) = v9;
    *(void *)(v5[7] + v13) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EF9C4(uint64_t a1)
{
  return sub_1002EF9D0(a1, &qword_1009139C8);
}

unint64_t sub_1002EF9D0(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    char v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_1001806F8(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v12 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EFAE8(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_1009142B0);
}

unint64_t sub_1002EFAF4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(&qword_1009141D0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_1001806F8(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v9 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EFC20(uint64_t a1)
{
  return sub_1002EFC2C(a1, &qword_100913BA8);
}

unint64_t sub_1002EFC2C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100094134(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1001806F8(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1002EFD44(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100914960);
}

unint64_t sub_1002EFD50(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100913BF0);
}

unint64_t sub_1002EFD5C(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913CB0);
}

unint64_t sub_1002EFD68(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100921A40);
}

unint64_t sub_1002EFD74(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913D30);
}

unint64_t sub_1002EFD80(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100913E18);
}

unint64_t sub_1002EFD8C(uint64_t a1)
{
  return sub_1002EE798(a1, (uint64_t *)&unk_100913E70);
}

unint64_t sub_1002EFD98(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100921BF0);
}

unint64_t sub_1002EFDA4(uint64_t a1)
{
  return sub_1002EE798(a1, &qword_100921DA0);
}

uint64_t sub_1002EFDB4(void *a1, uint64_t a2)
{
  return sub_1002EFF2C(a1, a2, (void (*)(void))type metadata accessor for RDElementManualSortID);
}

uint64_t sub_1002EFDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_1001806F8(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

void *sub_1002EFE24(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, (unint64_t *)&qword_100909AD0);
}

void *sub_1002EFE4C(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_100307040((uint64_t)a1);
      if (v7)
      {
        char v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for REMList_Codable();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  char v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1002EFF14(void *a1, uint64_t a2)
{
  return sub_1002EFF2C(a1, a2, (void (*)(void))type metadata accessor for RDAccountManualSortID);
}

uint64_t sub_1002EFF2C(void *a1, uint64_t a2, void (*a3)(void))
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v8 = sub_100306FE8((uint64_t)a1);
      if (v9)
      {
        uint64_t v7 = *(void *)(*(void *)(a2 + 56) + 8 * v8);
        swift_retain();
        return v7;
      }
    }
    return 0;
  }
  id v5 = a1;
  uint64_t v6 = __CocoaDictionary.lookup(_:)();

  if (!v6) {
    return 0;
  }
  a3(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v7 = v11;
  swift_unknownObjectRelease();
  return v7;
}

void *sub_1002F000C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_1001806F8(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

void *sub_1002F0054(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, &qword_1009168E0);
}

void *sub_1002F007C(void *a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      uint64_t v9 = a3();
      if (v10)
      {
        unint64_t v8 = *(void **)(*(void *)(a2 + 56) + 8 * v9);
        id v11 = v8;
        return v8;
      }
    }
    return 0;
  }
  id v6 = a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7) {
    return 0;
  }
  sub_1000963CC(0, a4);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v8 = v13;
  swift_unknownObjectRelease();
  return v8;
}

void *sub_1002F0164(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, (unint64_t *)&unk_1009148A0);
}

void *sub_1002F018C(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, &qword_10090E198);
}

uint64_t sub_1002F01B4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v5 = sub_1003079AC(a1);
      if (v6)
      {
        uint64_t v4 = *(void *)(*(void *)(a2 + 56) + 8 * v5);
        swift_retain();
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v3) {
    return 0;
  }
  type metadata accessor for RDManualSortIDCache();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v8;
  swift_unknownObjectRelease();
  return v4;
}

void *sub_1002F0290(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, &qword_100910180);
}

void *sub_1002F02B8(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, (unint64_t *)&unk_100914440);
}

void *sub_1002F02E0(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_1003075EC, &qword_100914310);
}

void *sub_1002F0308(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306FE8, &qword_1009146B8);
}

void *sub_1002F0330(void *a1, uint64_t a2)
{
  return sub_1002F007C(a1, a2, (uint64_t (*)(void))sub_100306F98, &qword_100910230);
}

Swift::Int sub_1002F0358()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F03D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F04F4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F05DC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F06D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0758()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0878()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F09C8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0A6C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0AF0()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0B74()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0C60()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0D7C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0E90()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F0F84()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F10B4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F1200()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002F1318()
{
  return Hasher._finalize()();
}

uint64_t sub_1002F1404(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x65746E49656D6974;
  }
  else {
    uint64_t v3 = 0x44497463656A626FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEC0000006C617672;
  }
  if (a2) {
    uint64_t v5 = 0x65746E49656D6974;
  }
  else {
    uint64_t v5 = 0x44497463656A626FLL;
  }
  if (a2) {
    unint64_t v6 = 0xEC0000006C617672;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F14BC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x80000001007C63B0;
      unint64_t v5 = 0xD000000000000017;
      break;
    case 2:
      unint64_t v5 = 0x6E6F697461657263;
      unint64_t v3 = 0xEC00000065746144;
      break;
    case 3:
      unint64_t v5 = 0x4E79616C70736964;
      unint64_t v3 = 0xEB00000000656D61;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000001007C63B0;
      if (v5 == 0xD000000000000017) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6E6F697461657263;
      unint64_t v6 = 0xEC00000065746144;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEB00000000656D61;
      if (v5 == 0x4E79616C70736964) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F1674(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0x68636E75616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0x80000001007C7170;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0x68636E75616CLL;
  }
  if (a2) {
    unint64_t v6 = 0x80000001007C7170;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F1720(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000012;
    }
    else {
      unint64_t v3 = 0x74696D69786F7270;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x80000001007C70B0;
    }
    else {
      unint64_t v4 = 0xE900000000000079;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000012;
      }
      else {
        unint64_t v6 = 0x74696D69786F7270;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x80000001007C70B0;
      }
      else {
        unint64_t v7 = 0xE900000000000079;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    unint64_t v3 = 0x44497463656A626FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x44497463656A626FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F1844(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x746E657665;
  }
  else {
    uint64_t v3 = 0x44497463656A626FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE500000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x746E657665;
  }
  else {
    uint64_t v5 = 0x44497463656A626FLL;
  }
  if (a2) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F18E8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x80000001007C63B0;
      unint64_t v5 = 0xD000000000000017;
      break;
    case 2:
      unint64_t v5 = 0x6E6F697461657263;
      unint64_t v3 = 0xEC00000065746144;
      break;
    case 3:
      unint64_t v5 = 0x4E79616C70736964;
      unint64_t v3 = 0xEB00000000656D61;
      break;
    case 4:
      unint64_t v5 = 0x6163696E6F6E6163;
      unint64_t v3 = 0xED0000656D614E6CLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000001007C63B0;
      if (v5 == 0xD000000000000017) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xEC00000065746144;
      if (v5 != 0x6E6F697461657263) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x4E79616C70736964;
      unint64_t v6 = 0xEB00000000656D61;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xED0000656D614E6CLL;
      if (v5 != 0x6163696E6F6E6163) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F1AF4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x4449746E65726170;
  }
  else {
    uint64_t v3 = 0x49746E756F636361;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000044;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x4449746E65726170;
  }
  else {
    uint64_t v5 = 0x49746E756F636361;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000044;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F1BA0(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6972745364697575;
      unint64_t v3 = 0xEA0000000000676ELL;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x4C525574736F68;
      break;
    case 3:
      unint64_t v3 = 0x80000001007C62C0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 4:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v3 = 0x80000001007C62E0;
      break;
    case 5:
      unint64_t v5 = 0x6F54636E79536164;
      unint64_t v3 = 0xEB000000006E656BLL;
      break;
    case 6:
      unint64_t v5 = 0x654B687375506164;
      unint64_t v3 = 0xE900000000000079;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000676ELL;
      if (v5 == 0x6972745364697575) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x4C525574736F68) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0x80000001007C62C0;
      if (v5 != 0xD000000000000012) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0x80000001007C62E0;
      if (v5 != 0xD000000000000017) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 0x6F54636E79536164;
      unint64_t v6 = 0xEB000000006E656BLL;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE900000000000079;
      if (v5 != 0x654B687375506164) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F1E2C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000012;
      unint64_t v6 = "reminderIdentifier";
      goto LABEL_7;
    case 2:
      unint64_t v5 = 0x4465746144657564;
      unint64_t v3 = 0xEC00000061746C65;
      break;
    case 3:
      unint64_t v5 = 0x6E6F697461657263;
      unint64_t v3 = 0xEC00000065746144;
      break;
    case 4:
      unint64_t v3 = 0x80000001007C6B20;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 5:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v6 = "minimumSupportedAppVersion";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xD000000000000012;
      char v8 = "reminderIdentifier";
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x4465746144657564;
      unint64_t v7 = 0xEC00000061746C65;
      break;
    case 3:
      unint64_t v2 = 0x6E6F697461657263;
      unint64_t v7 = 0xEC00000065746144;
      break;
    case 4:
      unint64_t v7 = 0x80000001007C6B20;
      unint64_t v2 = 0xD000000000000010;
      break;
    case 5:
      unint64_t v2 = 0xD00000000000001ALL;
      char v8 = "minimumSupportedAppVersion";
LABEL_14:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1002F205C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000044;
  uint64_t v3 = 0x49746E756F636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x49746E756F636361;
  unint64_t v6 = 0xE900000000000044;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6341746E65726170;
      unint64_t v6 = 0xEF4449746E756F63;
      break;
    case 2:
      unint64_t v5 = 0x694C746E65726170;
      unint64_t v6 = 0xEC00000044497473;
      break;
    case 3:
      unint64_t v6 = 0x80000001007C6240;
      unint64_t v5 = 0xD000000000000014;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEF4449746E756F63;
      if (v5 == 0x6341746E65726170) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x694C746E65726170;
      unint64_t v2 = 0xEC00000044497473;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0x80000001007C6240;
      if (v5 == 0xD000000000000014) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F2224(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x706D6F4365746164;
  }
  else {
    uint64_t v3 = 0x44497463656A626FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEE0073746E656E6FLL;
  }
  if (a2) {
    uint64_t v5 = 0x706D6F4365746164;
  }
  else {
    uint64_t v5 = 0x44497463656A626FLL;
  }
  if (a2) {
    unint64_t v6 = 0xEE0073746E656E6FLL;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F22D8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xE900000000000044;
  unint64_t v3 = 0x49746E756F636361;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6341746E65726170;
    }
    else {
      unint64_t v5 = 0xD000000000000014;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEF4449746E756F63;
    }
    else {
      unint64_t v6 = 0x80000001007C6240;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x49746E756F636361;
  unint64_t v6 = 0xE900000000000044;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0x6341746E65726170;
    }
    else {
      unint64_t v3 = 0xD000000000000014;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEF4449746E756F63;
    }
    else {
      unint64_t v2 = 0x80000001007C6240;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F240C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 6911093;
  }
  else {
    uint64_t v3 = 0x44497463656A626FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 6911093;
  }
  else {
    uint64_t v5 = 0x44497463656A626FLL;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F24B0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000044;
  unint64_t v3 = 0x49746E756F636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x49746E756F636361;
  unint64_t v6 = 0xE900000000000044;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x44497473696CLL;
      break;
    case 2:
      unint64_t v5 = 0xD000000000000010;
      char v7 = "parentReminderID";
      goto LABEL_8;
    case 3:
      char v8 = "subtaskIDsToUndelete";
      goto LABEL_6;
    case 4:
      char v8 = "hashtagIDsToUndelete";
LABEL_6:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000014;
      break;
    case 5:
      unint64_t v5 = 0xD00000000000001FLL;
      char v7 = "siriFoundInAppsUserConfirmation";
LABEL_8:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      if (v5 == 0x44497473696CLL) {
        goto LABEL_20;
      }
      goto LABEL_22;
    case 2:
      unint64_t v9 = 0xD000000000000010;
      char v10 = "parentReminderID";
      goto LABEL_19;
    case 3:
      id v11 = "subtaskIDsToUndelete";
      goto LABEL_15;
    case 4:
      id v11 = "hashtagIDsToUndelete";
LABEL_15:
      unint64_t v2 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000014;
      goto LABEL_16;
    case 5:
      unint64_t v9 = 0xD00000000000001FLL;
      char v10 = "siriFoundInAppsUserConfirmation";
LABEL_19:
      unint64_t v2 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      if (v5 == v9) {
        goto LABEL_20;
      }
      goto LABEL_22;
    default:
LABEL_16:
      if (v5 != v3) {
        goto LABEL_22;
      }
LABEL_20:
      if (v6 == v2) {
        char v12 = 1;
      }
      else {
LABEL_22:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_1002F2698(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 6911093;
      break;
    case 2:
      unint64_t v5 = 0x657A6953656C6966;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t v3 = 0x80000001007C6FC0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 5:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x6874646977;
      break;
    case 6:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x746867696568;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6911093) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      if (v5 != 0x657A6953656C6966) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x4C5255656C6966) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0x80000001007C6FC0;
      if (v5 != 0xD000000000000012) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x6874646977;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x746867696568) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F28C4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6465696669646F6DLL;
  }
  else {
    uint64_t v3 = 0x44497463656A626FLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xEC00000065746144;
  }
  if (a2) {
    uint64_t v5 = 0x6465696669646F6DLL;
  }
  else {
    uint64_t v5 = 0x44497463656A626FLL;
  }
  if (a2) {
    unint64_t v6 = 0xEC00000065746144;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F2974(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      unint64_t v5 = 6911093;
      break;
    case 2:
      unint64_t v5 = 0x657A6953656C6966;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x4C5255656C6966;
      break;
    case 4:
      unint64_t v3 = 0x80000001007C6FC0;
      unint64_t v5 = 0xD000000000000012;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6911093) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v5 != 0x657A6953656C6966) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x4C5255656C6966;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0x80000001007C6FC0;
      if (v5 != 0xD000000000000012) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F2B30(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD000000000000018;
  }
  if (v2) {
    unint64_t v4 = 0x80000001007C65F0;
  }
  else {
    unint64_t v4 = 0x80000001007C6610;
  }
  if (a2) {
    unint64_t v5 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v5 = 0xD000000000000018;
  }
  if (a2) {
    unint64_t v6 = 0x80000001007C6610;
  }
  else {
    unint64_t v6 = 0x80000001007C65F0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F2BDC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000016;
  }
  else {
    unint64_t v3 = 0xD000000000000011;
  }
  if (v2) {
    unint64_t v4 = 0x80000001007C65B0;
  }
  else {
    unint64_t v4 = 0x80000001007C65D0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000016;
  }
  else {
    unint64_t v5 = 0xD000000000000011;
  }
  if (a2) {
    unint64_t v6 = 0x80000001007C65D0;
  }
  else {
    unint64_t v6 = 0x80000001007C65B0;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F2C88(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6911093;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7107189;
      break;
    case 3:
      uint64_t v5 = 0x617461646174656DLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6911093) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7107189;
      goto LABEL_9;
    case 3:
      if (v5 == 0x617461646174656DLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F2DF0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x44496D72616C61;
  }
  else {
    uint64_t v3 = 0x49746E756F636361;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000044;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x44496D72616C61;
  }
  else {
    uint64_t v5 = 0x49746E756F636361;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000044;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F2E9C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD00000000000001CLL;
  unint64_t v3 = 0x80000001007C6260;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001FLL;
    }
    else {
      unint64_t v5 = 0xD00000000000001CLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001007C6280;
    }
    else {
      unint64_t v6 = 0x80000001007C62A0;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v5 = 0xD00000000000001CLL;
    unint64_t v6 = 0x80000001007C6260;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (v7 == 1)
  {
    unint64_t v2 = 0xD00000000000001FLL;
    unint64_t v3 = 0x80000001007C6280;
  }
  else
  {
    unint64_t v3 = 0x80000001007C62A0;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F2F94(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x736E6F6974636573;
  }
  else {
    uint64_t v3 = 0x7265646E696D6572;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000073;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x736E6F6974636573;
  }
  else {
    uint64_t v5 = 0x7265646E696D6572;
  }
  if (a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000073;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F3040(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000044;
  unint64_t v3 = 0x49746E756F636361;
  uint64_t v4 = a1;
  unint64_t v5 = 0x49746E756F636361;
  unint64_t v6 = 0xE900000000000044;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000016;
      char v7 = "childListIDsToUndelete";
      goto LABEL_7;
    case 2:
      unint64_t v5 = 0xD00000000000001BLL;
      char v7 = "childSmartListIDsToUndelete";
      goto LABEL_7;
    case 3:
      unint64_t v5 = 0x6341746E65726170;
      unint64_t v6 = 0xEF4449746E756F63;
      break;
    case 4:
      unint64_t v5 = 0x694C746E65726170;
      unint64_t v6 = 0xEC00000044497473;
      break;
    case 5:
      unint64_t v5 = 0xD000000000000015;
      char v7 = "reminderIDsToUndelete";
LABEL_7:
      unint64_t v6 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v6 = 0x80000001007C6240;
      unint64_t v5 = 0xD000000000000014;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v3 = 0xD000000000000016;
      char v8 = "childListIDsToUndelete";
      goto LABEL_17;
    case 2:
      unint64_t v3 = 0xD00000000000001BLL;
      char v8 = "childSmartListIDsToUndelete";
      goto LABEL_17;
    case 3:
      unint64_t v2 = 0xEF4449746E756F63;
      if (v5 != 0x6341746E65726170) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v2 = 0xEC00000044497473;
      if (v5 != 0x694C746E65726170) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v3 = 0xD000000000000015;
      char v8 = "reminderIDsToUndelete";
LABEL_17:
      unint64_t v2 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_18;
    case 6:
      unint64_t v2 = 0x80000001007C6240;
      if (v5 != 0xD000000000000014) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v3) {
        goto LABEL_22;
      }
LABEL_19:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_22:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1002F329C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x64656E6769737361;
      unint64_t v3 = 0xEC00000065746144;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x737574617473;
      break;
    case 3:
      unint64_t v3 = 0x80000001007C6100;
      unint64_t v5 = 0xD000000000000014;
      break;
    case 4:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v6 = "ckOriginatorIdentifier";
      goto LABEL_7;
    case 5:
      unint64_t v5 = 0xD000000000000018;
      unint64_t v6 = "owningReminderIdentifier";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x64656E6769737361;
      unint64_t v7 = 0xEC00000065746144;
      break;
    case 2:
      unint64_t v7 = 0xE600000000000000;
      unint64_t v2 = 0x737574617473;
      break;
    case 3:
      unint64_t v7 = 0x80000001007C6100;
      unint64_t v2 = 0xD000000000000014;
      break;
    case 4:
      unint64_t v2 = 0xD000000000000016;
      char v8 = "ckOriginatorIdentifier";
      goto LABEL_14;
    case 5:
      unint64_t v2 = 0xD000000000000018;
      char v8 = "owningReminderIdentifier";
LABEL_14:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1002F34AC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000044;
  uint64_t v3 = 0x49746E756F636361;
  uint64_t v4 = a1;
  uint64_t v5 = 0x49746E756F636361;
  unint64_t v6 = 0xE900000000000044;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x7265646E696D6572;
      goto LABEL_4;
    case 2:
      uint64_t v5 = 0x65656E6769737361;
LABEL_4:
      unint64_t v6 = 0xEA00000000004449;
      break;
    case 3:
      uint64_t v5 = 0x74616E696769726FLL;
      unint64_t v6 = 0xEC0000004449726FLL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEA00000000004449;
      if (v5 == 0x7265646E696D6572) {
        goto LABEL_13;
      }
      goto LABEL_15;
    case 2:
      uint64_t v3 = 0x65656E6769737361;
      unint64_t v2 = 0xEA00000000004449;
      goto LABEL_10;
    case 3:
      unint64_t v2 = 0xEC0000004449726FLL;
      if (v5 == 0x74616E696769726FLL) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
LABEL_10:
      if (v5 != v3) {
        goto LABEL_15;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_15:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F365C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC00000065746144;
  uint64_t v3 = 0x6E6F697461657263;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x4E79616C70736964;
    }
    else {
      uint64_t v5 = 0x73694C7472616D73;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB00000000656D61;
    }
    else {
      unint64_t v6 = 0xE900000000000074;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6E6F697461657263;
  unint64_t v6 = 0xEC00000065746144;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x4E79616C70736964;
    }
    else {
      uint64_t v3 = 0x73694C7472616D73;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEB00000000656D61;
    }
    else {
      unint64_t v2 = 0xE900000000000074;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F3798(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6E6F697461657263;
      unint64_t v3 = 0xEC00000065746144;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1701667182;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1701869940;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEC00000065746144;
      if (v5 == 0x6E6F697461657263) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1701667182;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1701869940) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F3918(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC00000065746144;
  uint64_t v3 = 0x6E6F697461657263;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x4E79616C70736964;
    }
    else {
      uint64_t v5 = 0x6574616C706D6574;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEB00000000656D61;
    }
    else {
      unint64_t v6 = 0xE800000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x6E6F697461657263;
  unint64_t v6 = 0xEC00000065746144;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x4E79616C70736964;
    }
    else {
      uint64_t v3 = 0x6574616C706D6574;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEB00000000656D61;
    }
    else {
      unint64_t v2 = 0xE800000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F3A4C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000032;
  }
  else {
    unint64_t v3 = 0xD000000000000021;
  }
  if (v2) {
    unint64_t v4 = 0x80000001007C7190;
  }
  else {
    unint64_t v4 = 0x80000001007C71C0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000032;
  }
  else {
    unint64_t v5 = 0xD000000000000021;
  }
  if (a2) {
    unint64_t v6 = 0x80000001007C71C0;
  }
  else {
    unint64_t v6 = 0x80000001007C7190;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F3AF8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6574656C706D6F63;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6574656C706D6F63;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x57676E69646E6570;
      unint64_t v3 = 0xEB000000006B726FLL;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6B726F576F6ELL;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x726F727265;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEB000000006B726FLL;
      if (v5 == 0x57676E69646E6570) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x6B726F576F6ELL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x726F727265) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F3C88(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000030;
  unint64_t v4 = 0x80000001007C7430;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD00000000000002DLL;
      uint64_t v5 = "com.apple.remindd.ICCloudConfigurationUpdater";
      goto LABEL_5;
    case 2:
      unint64_t v3 = 0xD000000000000034;
      uint64_t v5 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
      goto LABEL_5;
    case 3:
      unint64_t v3 = 0xD000000000000031;
      uint64_t v5 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_5:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v4 = 0x80000001007C7520;
      unint64_t v3 = 0xD00000000000001BLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000030;
  unint64_t v7 = 0x80000001007C7430;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xD00000000000002DLL;
      char v8 = "com.apple.remindd.ICCloudConfigurationUpdater";
      goto LABEL_11;
    case 2:
      unint64_t v6 = 0xD000000000000034;
      char v8 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
      goto LABEL_11;
    case 3:
      unint64_t v6 = 0xD000000000000031;
      char v8 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_11:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      goto LABEL_12;
    case 4:
      unint64_t v7 = 0x80000001007C7520;
      if (v3 != 0xD00000000000001BLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v3 != v6) {
        goto LABEL_16;
      }
LABEL_13:
      if (v4 == v7) {
        char v9 = 1;
      }
      else {
LABEL_16:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1002F3E2C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x44497473696CLL;
  }
  else {
    uint64_t v3 = 0x49746E756F636361;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000044;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x44497473696CLL;
  }
  else {
    uint64_t v5 = 0x49746E756F636361;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE900000000000044;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F3ED4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD00000000000001DLL;
    }
    else {
      unint64_t v3 = 0x6574616C706D6574;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x80000001007C6E10;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD00000000000001DLL;
      }
      else {
        unint64_t v6 = 0x6574616C706D6574;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x80000001007C6E10;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    unint64_t v3 = 0x617461646174656DLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x617461646174656DLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1002F3FF0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x44497463656A626FLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x44497463656A626FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x72656767697274;
      break;
    case 2:
      unint64_t v6 = "acknowledgedDate";
      goto LABEL_6;
    case 3:
      unint64_t v5 = 0x4449556D72616C61;
      break;
    case 4:
      unint64_t v6 = "originalAlarmUID";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE700000000000000;
      unint64_t v2 = 0x72656767697274;
      break;
    case 2:
      char v8 = "acknowledgedDate";
      goto LABEL_12;
    case 3:
      unint64_t v2 = 0x4449556D72616C61;
      break;
    case 4:
      char v8 = "originalAlarmUID";
LABEL_12:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000010;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1002F4190(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7265646E696D6572;
  }
  else {
    uint64_t v3 = 0x49746E756F636361;
  }
  if (v2) {
    unint64_t v4 = 0xE900000000000044;
  }
  else {
    unint64_t v4 = 0xEA00000000004449;
  }
  if (a2) {
    uint64_t v5 = 0x7265646E696D6572;
  }
  else {
    uint64_t v5 = 0x49746E756F636361;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000004449;
  }
  else {
    unint64_t v6 = 0xE900000000000044;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1002F4240(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC00000065746144;
  uint64_t v3 = 0x6E6F697461657263;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E6F697461657263;
  unint64_t v6 = 0xEC00000065746144;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x4E79616C70736964;
      unint64_t v6 = 0xEB00000000656D61;
      break;
    case 2:
      uint64_t v5 = 0x6163696E6F6E6163;
      unint64_t v6 = 0xED0000656D614E6CLL;
      break;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v5 = 1953720684;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEB00000000656D61;
      if (v5 == 0x4E79616C70736964) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x6163696E6F6E6163;
      unint64_t v2 = 0xED0000656D614E6CLL;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1953720684) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1002F43F8(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000020;
  unint64_t v4 = 0x80000001007C72F0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD000000000000033;
      uint64_t v5 = "subtaskIdentifiersByTopLevelSavedReminderIdentifier";
      goto LABEL_8;
    case 2:
      unint64_t v3 = 0xD000000000000019;
      uint64_t v5 = "savedReminderByIdentifier";
      goto LABEL_8;
    case 3:
      unint64_t v3 = 0xD00000000000002CLL;
      uint64_t v5 = "savedURLAttachmentsBySavedReminderIdentifier";
      goto LABEL_8;
    case 4:
      unint64_t v4 = 0x80000001007C73B0;
      unint64_t v3 = 0xD000000000000012;
      break;
    case 5:
      unint64_t v3 = 0xD000000000000013;
      uint64_t v5 = "sectionByIdentifier";
      goto LABEL_8;
    case 6:
      unint64_t v3 = 0xD000000000000016;
      uint64_t v5 = "membershipsOfReminders";
LABEL_8:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000020;
  unint64_t v7 = 0x80000001007C72F0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xD000000000000033;
      char v8 = "subtaskIdentifiersByTopLevelSavedReminderIdentifier";
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xD000000000000019;
      char v8 = "savedReminderByIdentifier";
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xD00000000000002CLL;
      char v8 = "savedURLAttachmentsBySavedReminderIdentifier";
      goto LABEL_16;
    case 4:
      unint64_t v7 = 0x80000001007C73B0;
      unint64_t v6 = 0xD000000000000012;
      break;
    case 5:
      unint64_t v6 = 0xD000000000000013;
      char v8 = "sectionByIdentifier";
      goto LABEL_16;
    case 6:
      unint64_t v6 = 0xD000000000000016;
      char v8 = "membershipsOfReminders";
LABEL_16:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1002F45E8(char a1, char a2)
{
  if (a1) {
    unint64_t v2 = 0x80000001007C6700;
  }
  else {
    unint64_t v2 = 0x80000001007C66C0;
  }
  if (a2) {
    unint64_t v3 = 0x80000001007C6700;
  }
  else {
    unint64_t v3 = 0x80000001007C66C0;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1002F468C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F47C8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F48E8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F49EC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4AF8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4B88()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4CC8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4DD8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4EB8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002F4F90()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_1002F5098(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909E50);
  unint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setIdentifier:isa];
}

id sub_1002F51D0()
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100776E60;
  *(void *)(v0 + 32) = 0xD000000000000011;
  *(void *)(v0 + 40) = 0x80000001007D1B80;
  *(void *)(v0 + 88) = &type metadata for String;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = 0xD000000000000023;
  *(void *)(v0 + 72) = 0x80000001007CE560;
  uint64_t v1 = rem_currentRuntimeVersion();
  *(void *)(v0 + 120) = &type metadata for Int;
  *(void *)(v0 + 96) = v1;
  NSString v2 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [self predicateWithFormat:v2 argumentArray:isa];

  return v4;
}

id sub_1002F5300(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v2; ++i)
    {
      id v4 = *(void **)(a1 + 8 * i + 32);
      if (v4)
      {
        id v5 = v4;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [self andPredicateWithSubpredicates:isa];

  return v7;
}

uint64_t sub_1002F5440(uint64_t result)
{
  uint64_t v1 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_100094134((uint64_t *)&unk_10090B070);
    unint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = v17[3];
    uint64_t v3 = v17[4];
    unint64_t v4 = v17[5];
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(result + 32);
    uint64_t v16 = result + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(result + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      return sub_1000C1AF8();
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        return sub_1000C1AF8();
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          return sub_1000C1AF8();
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            return sub_1000C1AF8();
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              return sub_1000C1AF8();
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return sub_1000C1AF8();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v12) {
      return sub_1000C1AF8();
    }
    while (1)
    {
      sub_10031FB58(v17, v12, (uint64_t *)&unk_10090B070, (uint64_t *)&unk_100913950);
      unint64_t result = swift_release();
      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        swift_unknownObjectRetain();
        sub_100094134((uint64_t *)&unk_10090B070);
        swift_dynamicCast();
        uint64_t v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      return sub_1000C1AF8();
    }
  }
  __break(1u);
  return result;
}

void sub_1002F56D8(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for REMObjectID_Codable();
    sub_100331C5C((unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      uint64_t v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    uint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      uint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        uint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          uint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            uint64_t v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              uint64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_10031EC98(v17, v12, (void (*)(void))&type metadata accessor for REMObjectID_Codable, &qword_1009110B8, (void (*)(void))&type metadata accessor for REMObjectID_Codable);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for REMObjectID_Codable();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        uint64_t v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1002F59BC(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
    sub_1000E4F40(&qword_100917D50, (unint64_t *)&qword_100909FB0);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v15 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v8 = (v4 - 1) & v4;
      unint64_t v9 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      unint64_t v10 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v15) {
      goto LABEL_32;
    }
    unint64_t v13 = v16[v12];
    unint64_t v10 = (char *)v3 + 1;
    if (!v13)
    {
      unint64_t v10 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v15) {
        goto LABEL_32;
      }
      unint64_t v13 = v16[(void)v10];
      if (!v13)
      {
        unint64_t v10 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v15) {
          goto LABEL_32;
        }
        unint64_t v13 = v16[(void)v10];
        if (!v13)
        {
          unint64_t v10 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v15) {
            goto LABEL_32;
          }
          unint64_t v13 = v16[(void)v10];
          if (!v13)
          {
            unint64_t v10 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v15) {
              goto LABEL_32;
            }
            unint64_t v13 = v16[(void)v10];
            if (!v13)
            {
              unint64_t v14 = (char *)v3 + 6;
              while ((char *)v15 != v14)
              {
                unint64_t v13 = v16[(void)v14++];
                if (v13)
                {
                  unint64_t v10 = v14 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + ((void)v10 << 6);
LABEL_29:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_100321010(v17, v11, (unint64_t *)&qword_100909FB0, (uint64_t)NSNumber_ptr, &qword_100913998);

      id v3 = v10;
      unint64_t v4 = v8;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v11 = v17[0];
        swift_unknownObjectRelease();
        unint64_t v10 = (char *)v3;
        uint64_t v8 = v4;
        if (v11) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1002F5CC0(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for RDDebounceableCKDatabaseNotification();
    sub_100331C5C(&qword_100914630, (void (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification);
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v17[1];
    uint64_t v16 = v17[2];
    uint64_t v2 = (uint64_t)v17[3];
    id v3 = v17[4];
    unint64_t v4 = (unint64_t)v17[5];
  }
  else
  {
    id v3 = 0;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
      id v11 = (char *)v3;
      goto LABEL_29;
    }
    uint64_t v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = v16[v13];
    id v11 = (char *)v3 + 1;
    if (!v14)
    {
      id v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = v16[(void)v11];
      if (!v14)
      {
        id v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = v16[(void)v11];
        if (!v14)
        {
          id v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = v16[(void)v11];
          if (!v14)
          {
            id v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = v16[(void)v11];
            if (!v14)
            {
              int64_t v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                unint64_t v14 = v16[(void)v15++];
                if (v14)
                {
                  id v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_10031EC98(v17, v12, (void (*)(void))type metadata accessor for RDDebounceableCKDatabaseNotification, &qword_100914638, (void (*)(void))type metadata accessor for RDDebounceableCKDatabaseNotification);

      id v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for RDDebounceableCKDatabaseNotification();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v17[0];
        swift_unknownObjectRelease();
        id v11 = (char *)v3;
        uint64_t v9 = v4;
        if (v12) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1002F5FA4(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_100321010(&v13, *(id *)(*(void *)(a1 + 56) + 8 * v9), (unint64_t *)&qword_100909AF8, (uint64_t)off_1008AA498, (uint64_t *)&unk_100914A00);
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  swift_release();
}

void sub_1002F6144(uint64_t a1)
{
  int64_t v2 = 0;
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return;
    }
    if (v10 >= v7) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      int64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        int64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          int64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v3 + 8 * v2);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_10032015C(v13, *(id *)(*(void *)(a1 + 48) + 16 * v9), *(void *)(v9 + 8));
  }
  int64_t v12 = v10 + 4;
  if (v12 < v7)
  {
    unint64_t v11 = *(void *)(v3 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v2 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v3 + 8 * v2);
        ++v12;
        if (v11) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v12;
    goto LABEL_22;
  }
LABEL_23:

  swift_release();
}

void sub_1002F62C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v23 - v7;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100914280);
  __n128 v10 = __chkstk_darwin(v9 - 8);
  int64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v26 = a1;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v25 = (unint64_t)(v15 + 63) >> 6;
  if ((v16 & v14) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v18 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    sub_1003324B0(*(void *)(v26 + 48) + *(void *)(v3 + 72) * i, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) == 1) {
      goto LABEL_25;
    }
    sub_100332518((uint64_t)v12, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    sub_100320570((uint64_t)v8, (uint64_t)v5);
    sub_100128138((uint64_t)v8);
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v25) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v13;
    if (!v21)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v13);
      if (!v21)
      {
        int64_t v13 = v20 + 2;
        if (v20 + 2 >= v25) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v24 + 8 * v13);
        if (!v21)
        {
          int64_t v13 = v20 + 3;
          if (v20 + 3 >= v25) {
            goto LABEL_24;
          }
          unint64_t v21 = *(void *)(v24 + 8 * v13);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v17 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v25)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v12, 1, 1, v2, v10);
LABEL_25:
    swift_release();
    return;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v13 = v22;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v13 >= v25) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
}

void sub_1002F65F8(uint64_t a1)
{
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v8 = (char *)&v24 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - v10;
  int64_t v12 = 0;
  uint64_t v27 = a1;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v14 = a1 + 56;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 24);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v24 = v14;
  int64_t v25 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v25) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v12);
      if (!v22)
      {
        int64_t v12 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v12);
        if (!v22)
        {
          int64_t v12 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_23;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v12);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v18 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v11, *(void *)(v27 + 48) + *(void *)(v3 + 72) * v20, PredicateType);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v11, PredicateType);
    sub_10031E220((uint64_t)v8, v5);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, PredicateType);
  }
  int64_t v23 = v21 + 4;
  if (v23 >= v25)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
    int64_t v12 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_1002F68B0(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_10031DC68(&v16, v11, v12);
    unint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_1002F6A30()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009138D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009138D0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002F6AF8()
{
  if (qword_1009072C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_10008E2DC(v0, (uint64_t)qword_1009138D0);
}

unint64_t sub_1002F6B64(char a1)
{
  unint64_t result = 0x70756F72477349;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F6C6F43;
      break;
    case 2:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 4:
      unint64_t result = 0x4C797265636F7247;
      break;
    case 5:
      return result;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    case 8:
      unint64_t result = 0xD000000000000028;
      break;
    case 9:
      unint64_t result = 0xD000000000000022;
      break;
    case 10:
      unint64_t result = 1701667150;
      break;
    case 11:
      unint64_t result = 0xD000000000000011;
      break;
    case 12:
      unint64_t result = 0x694C746E65726150;
      break;
    case 13:
      unint64_t result = 0x614464656E6E6950;
      break;
    case 14:
    case 19:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000021;
      break;
    case 16:
      unint64_t result = 0x7265646E696D6552;
      break;
    case 17:
      unint64_t result = 0xD000000000000010;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0x53676E6974726F53;
      break;
    default:
      unint64_t result = 0x626D456567646142;
      break;
  }
  return result;
}

unint64_t sub_1002F6DF8(char a1)
{
  unint64_t result = 0x626D456567646162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F6C6F63;
      break;
    case 2:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 3:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 4:
      unint64_t result = 0x4C797265636F7267;
      break;
    case 5:
      unint64_t result = 0x70756F72477369;
      break;
    case 6:
      unint64_t result = 0xD000000000000012;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    case 8:
      unint64_t result = 0xD000000000000028;
      break;
    case 9:
      unint64_t result = 0xD000000000000022;
      break;
    case 10:
      unint64_t result = 1701667182;
      break;
    case 11:
      unint64_t result = 0x6341746E65726170;
      break;
    case 12:
      unint64_t result = 0x694C746E65726170;
      break;
    case 13:
      unint64_t result = 0x614464656E6E6970;
      break;
    case 14:
    case 19:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 15:
      unint64_t result = 0xD000000000000021;
      break;
    case 16:
      unint64_t result = 0x7265646E696D6572;
      break;
    case 17:
      unint64_t result = 0xD000000000000010;
      break;
    case 18:
      unint64_t result = 0xD000000000000018;
      break;
    case 20:
      unint64_t result = 0x53676E6974726F73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002F7098(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1002F6DF8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1002F6DF8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1002F7124()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1002F6DF8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002F7188()
{
  sub_1002F6DF8(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002F71DC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1002F6DF8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1002F723C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100330FB0();
  *a1 = result;
  return result;
}

unint64_t sub_1002F726C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1002F6DF8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1002F7298(void *a1@<X8>)
{
  *a1 = &off_1008B3710;
}

_UNKNOWN **static REMCDList.recordTypes()()
{
  return &off_1008B6338;
}

uint64_t static REMCDList.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id sub_1002F7450(void *a1)
{
  id result = [a1 ic_isOwnedByCurrentUser];
  if ((result & 1) == 0)
  {
    sub_1002F752C();
    id v4 = [a1 zoneID];
    NSString v5 = [v4 ownerName];

    if (!v5)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v1 updateSharedObjectOwnerName:v5];

    return [v1 setSharingStatus:2];
  }
  return result;
}

void sub_1002F752C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  Swift::Int v11 = (char *)v27 - v10;
  id v12 = [v0 account:v9];
  if (v12)
  {
    int64_t v13 = v12;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10077A530;
    *(void *)(inited + 32) = v0;
    unint64_t v28 = inited;
    specialized Array._endMutation()();
    unint64_t v15 = v28;
    id v16 = v0;
    sub_10064E4D8(v15, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1009072C8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_1009138D0);
    v27[0] = v0;
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      unint64_t v28 = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136446210;
      id v21 = [v27[0] identifier];
      if (v21)
      {
        unint64_t v22 = v21;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        (*(void (**)(char *, void, uint64_t, uint64_t))(v2 + 56))(v7, 0, 1, v1);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v7, 1, 1, v1);
      }
      sub_100096408((uint64_t)v7, (uint64_t)v11, (uint64_t *)&unk_100909E50);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1, v1))
      {
        sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
        unint64_t v24 = 0xE700000000000000;
        uint64_t v25 = 0x6E776F6E6B6E75;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v11, v1);
        sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
        uint64_t v25 = UUID.uuidString.getter();
        unint64_t v24 = v26;
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      }
      v27[6] = (id)sub_1000C51B8(v25, v24, (uint64_t *)&v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Tried to update listIDsMergableOrdering after fetching share / undeleting list but list has no parent account {listID: %{public}s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v23 = v27[0];
    }
  }
}

id static REMCDList.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      id v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
      id v13 = [a1 recordID];
      sub_1002F7450(v13);
    }
    else
    {
      if (qword_1009072C8 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_1009138D0);
      id v15 = a2;
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t v29 = v4;
        *(_DWORD *)uint64_t v18 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v19 = String.init<A>(describing:)();
        uint64_t v29 = sub_1000C51B8(v19, v20, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 12) = 2082;
        id v21 = [v15 remObjectID:v28];
        if (v21)
        {
          unint64_t v22 = v21;
          id v23 = [v21 description];

          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;
        }
        else
        {
          unint64_t v26 = 0xE300000000000000;
          uint64_t v24 = 7104878;
        }
        uint64_t v29 = sub_1000C51B8(v24, v26, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

uint64_t static REMCDList.newPlaceholderObject(for:account:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  v9.receiver = (id)swift_getObjCClassFromMetadata();
  v9.super_class = (Class)&OBJC_METACLASS___REMCDList;
  id v6 = [super newPlaceholderObjectForRecordID:a1 account:a2 context:a3];
  if (v6)
  {
    id v7 = v6;
    sub_1002F7450(a1);
    return (uint64_t)v7;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall REMCDList.objectWasDeletedFromCloudByAnotherDevice()()
{
  if (([v0 isOwnedByCurrentUser] & 1) == 0) {
    [v0 updateSharedObjectOwnerName:0];
  }
  v1.receiver = v0;
  v1.super_class = (Class)REMCDList;
  [super objectWasDeletedFromCloudByAnotherDevice];
}

Swift::String __swiftcall REMCDList.recordType()()
{
  uint64_t v0 = 1953720652;
  objc_super v1 = (void *)0xE400000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

void sub_1002F8028(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if ((a2 & 1) != 0 || (sub_1002F81EC() & 1) == 0)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    unint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10077B710;
    *(void *)(inited + 32) = swift_getKeyPath();
    *(void *)(inited + 40) = swift_getKeyPath();
    specialized Array._endMutation()();
    sub_10039FB64(v3, inited);
    swift_bridgeObjectRelease();
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v3 mutableOrderedSetValueForKey:v5];

    if (v6)
    {
      id v7 = v6;
      sub_100098420((uint64_t)v7, 0);
    }
    else
    {
      if (qword_1009072C8 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E2DC(v8, (uint64_t)qword_1009138D0);
      id v7 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v9, "Not sorting child reminders because REMCDList.mutableOrderedSetValue(forKey: reminders) is nil", v10, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1002F81EC()
{
  id v1 = [v0 managedObjectContext];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (!v3)
  {
LABEL_11:

    return 0;
  }
  uint64_t v4 = (void *)v3;
  uint64_t v5 = (uint64_t)[v0 recordID];
  if (v5)
  {
    if ([v4 containerShouldSortChildrenAfterFetchingWithRecordID:v5])
    {
      if (qword_1009072C8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_1009138D0);
      id v7 = (id)v5;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v8, v9))
      {

        return 1;
      }
      id v10 = (uint8_t *)swift_slowAlloc();
      id v11 = (void *)swift_slowAlloc();
      *(_DWORD *)id v10 = 138543362;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v11 = v5;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sorting children (reminders and/or sections) deferred {listRecordID: %{public}@}", v10, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      uint64_t v5 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v5;
}

void sub_1002F8428()
{
  if ((sub_1002F81EC() & 1) == 0)
  {
    id v1 = [v0 reminderIDsMergeableOrdering];
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v5 = v4;

      uint64_t v6 = self;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v29 = 0;
      id v8 = [v6 reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:isa error:&v29];

      if (v8)
      {
        uint64_t v9 = qword_1009072C8;
        id v10 = v29;
        if (v9 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_10008E2DC(v11, (uint64_t)qword_1009138D0);
        id v12 = v0;
        id v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          id v15 = (uint8_t *)swift_slowAlloc();
          id v29 = (id)swift_slowAlloc();
          *(_DWORD *)id v15 = 136315138;
          id v16 = [v12 remObjectID];
          if (v16)
          {
            os_log_type_t v17 = v16;
            id v18 = [v16 description];

            uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v21 = v20;
          }
          else
          {
            unint64_t v21 = 0xE300000000000000;
            uint64_t v19 = 7104878;
          }
          sub_1000C51B8(v19, v21, (uint64_t *)&v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "REMCDList+CloudKit.sortChildReminders(): deserialized reminderIDsMergeableOrdering from data {remObjID: %s}", v15, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_1002F8028((uint64_t)v8, 1);

        sub_100097F34(v3, v5);
      }
      else
      {
        id v22 = v29;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100097F34(v3, v5);
        if (qword_1009072C8 != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        sub_10008E2DC(v23, (uint64_t)qword_1009138D0);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          unint64_t v26 = (uint8_t *)swift_slowAlloc();
          id v29 = (id)swift_slowAlloc();
          *(_DWORD *)unint64_t v26 = 136315138;
          swift_getErrorValue();
          uint64_t v27 = Error.localizedDescription.getter();
          sub_1000C51B8(v27, v28, (uint64_t *)&v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error decoding reminder IDs ordered set and thus not able to sort child reminders {error : %s}", v26, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
      }
    }
  }
}

void sub_1002F88CC()
{
  id v1 = v0;
  if ((sub_1002F81EC() & 1) == 0)
  {
    id v2 = [v0 remObjectID];
    if (v2)
    {
      id v29 = v2;
      id v3 = [v0 storeControllerManagedObjectContext];
      if (v3)
      {
        unint64_t v4 = v3;
        uint64_t v5 = qword_100907910;
        id v6 = v29;
        if (v5 != -1) {
          swift_once();
        }
        uint64_t v7 = sub_10058707C((unint64_t)v29, 0, (uint64_t)v4, (Class)qword_100942580, 0, 0);

        id v8 = [v1 sectionIDsOrderingAsData];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v12 = v11;

          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          static REMJSONRepresentable.fromJSONData(_:)();
          sub_100097F34(v10, v12);
          type metadata accessor for REMCDListSection();
          unint64_t v13 = REMOrderedIdentifierMap.reorder<A>(objects:)();
          swift_bridgeObjectRelease();
          if (qword_1009072C8 != -1) {
            swift_once();
          }
          uint64_t v14 = type metadata accessor for Logger();
          sub_10008E2DC(v14, (uint64_t)qword_1009138D0);
          id v15 = v1;
          id v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            os_log_type_t log = v17;
            id v30 = v31[0];
            id v18 = (uint8_t *)swift_slowAlloc();
            v31[0] = (id)swift_slowAlloc();
            *(_DWORD *)id v18 = 136315138;
            id v19 = [v15 remObjectID];
            if (v19)
            {
              unint64_t v20 = v19;
              id v21 = [v19 description];

              uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v24 = v23;
            }
            else
            {
              uint64_t v22 = 7104878;
              unint64_t v24 = 0xE300000000000000;
            }
            sub_1000C51B8(v22, v24, (uint64_t *)v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, log, "REMCDList+CloudKit#sortChildSections(): Sorted child sections {cdList: %s}", v18, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        else
        {
          unint64_t v13 = v7;
        }
        sub_100200770(v13);
        swift_bridgeObjectRelease();
        id v25 = objc_allocWithZone((Class)NSMutableOrderedSet);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v27 = [v25 initWithArray:isa];

        [v1 setSections:v27];
      }
      else
      {
      }
    }
  }
}

Swift::Void __swiftcall REMCDList.sortChildrenObjects()()
{
  sub_1002F8428();

  sub_1002F88CC();
}

Swift::Void __swiftcall REMCDList.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  id v3 = v2;
  uint64_t ObjectType = (char *)swift_getObjectType();
  NSString v6 = String._bridgeToObjectiveC()();
  v18.receiver = v3;
  v18.super_class = (Class)REMCDList;
  [super mergeDataFromRecord:from.super.isa accountID:v6];

  id v7 = [(objc_class *)from.super.isa recordID];
  NSString v8 = [v7 recordName];

  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v9 = [v3 ckIdentifierFromRecordName:v8];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v9];

  sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v10 = v17 & 1;
  if (v10 != [v3 isGroup]) {
    [v3 setIsGroup:v10];
  }
  char v17 = 0;
  char v11 = [v3 mergeDataRevertedLocallyMarkedForDeletion];
  char v12 = [v3 mergeDataRefusedToMergeMarkedForDeletion];
  unint64_t v13 = v3;
  uint64_t v14 = from.super.isa;
  sub_1004B9B84(v14, v11, v12, v13, v13, v14, &v17, ObjectType);
  if ([v13 mergeDataRevertedLocallyMarkedForDeletion])sub_1002F752C(); {
  if (v17 == 1)
  }
  {
    id v15 = [v13 parentAccount];
    if (v15)
    {
      id v16 = v15;
      if (([v15 ckNeedsInitialFetchFromCloud] & 1) == 0) {
        sub_10064E3B4();
      }
    }
  }
}

void sub_1002F94B8(unsigned __int8 *a1, NSObject *a2, void *a3, void *a4, char *a5)
{
  v429 = a5;
  id v436 = a4;
  id v441 = a3;
  v442 = a2;
  uint64_t v6 = type metadata accessor for Date();
  v433 = *(NSObject **)(v6 - 8);
  uint64_t v434 = v6;
  __chkstk_darwin(v6);
  v409 = (char *)&v408 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v438 = *(void *)(v8 - 8);
  v439 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v8;
  __chkstk_darwin(v8);
  v428 = (char *)&v408 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v410 = (char *)&v408 - v11;
  __chkstk_darwin(v12);
  v427 = (char *)&v408 - v13;
  __chkstk_darwin(v14);
  v419 = (char *)&v408 - v15;
  __chkstk_darwin(v16);
  v416 = (char *)&v408 - v17;
  __chkstk_darwin(v18);
  v421 = (char *)&v408 - v19;
  __chkstk_darwin(v20);
  v413 = (char *)&v408 - v21;
  __chkstk_darwin(v22);
  v420 = (char *)&v408 - v23;
  __chkstk_darwin(v24);
  v417 = (char *)&v408 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v26 - 8);
  v412 = (char *)&v408 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  id v30 = (char *)&v408 - v29;
  __chkstk_darwin(v31);
  unint64_t v33 = (char *)&v408 - v32;
  uint64_t v437 = type metadata accessor for UUID();
  v440 = *(NSObject **)(v437 - 8);
  __chkstk_darwin(v437);
  unint64_t v35 = (char *)&v408 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v422 = (char *)&v408 - v37;
  v430 = (char *)sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v430);
  v424 = (char *)&v408 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v423 = (char *)&v408 - v40;
  uint64_t v41 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v41 - 8);
  v411 = (char *)&v408 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v408 - v44;
  __chkstk_darwin(v46);
  uint64_t v415 = (uint64_t)&v408 - v47;
  __chkstk_darwin(v48);
  v418 = (char *)&v408 - v49;
  __chkstk_darwin(v50);
  v426 = (char *)&v408 - v51;
  __chkstk_darwin(v52);
  v432 = (char *)&v408 - v53;
  __chkstk_darwin(v54);
  uint64_t v56 = (char *)&v408 - v55;
  __chkstk_darwin(v57);
  unint64_t v435 = (unint64_t)&v408 - v58;
  __chkstk_darwin(v59);
  uint64_t v414 = (uint64_t)&v408 - v60;
  __chkstk_darwin(v61);
  id v63 = (char *)&v408 - v62;
  __chkstk_darwin(v64);
  v425 = (uint8_t *)&v408 - v65;
  __chkstk_darwin(v66);
  uint64_t v431 = (uint64_t)&v408 - v67;
  __chkstk_darwin(v68);
  uint64_t v70 = (char *)&v408 - v69;
  __chkstk_darwin(v71);
  unint64_t v73 = (char *)&v408 - v72;
  uint64_t v74 = *a1;
  sub_1002F6B64(v74);
  switch(v74)
  {
    case 1:
      uint64_t v151 = CKRecord.subscript.getter();
      swift_bridgeObjectRelease();
      v152 = v442;
      if (v151)
      {
        id v447 = (id)v151;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          id v150 = (id)sub_1000D3BEC((uint64_t)v443, (uint64_t)v444);
          swift_bridgeObjectRelease();
          if (v150)
          {
            [v152 setColor:v150];
            goto LABEL_98;
          }
        }
      }
      [v152 setColor:0];
      return;
    case 2:
    case 5:
    case 7:
    case 15:
    case 16:
    case 17:
      goto LABEL_4;
    case 3:
      id v142 = [v441 encryptedValues];
      NSString v143 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v144 = [v142 objectForKeyedSubscript:v143];
      swift_unknownObjectRelease();

      if (v144)
      {
        id v447 = v144;
        sub_100094134(&qword_100909AB0);
        int v145 = swift_dynamicCast();
        if (v145) {
          v146 = v443;
        }
        else {
          v146 = 0;
        }
        if (v145) {
          v147 = v444;
        }
        else {
          v147 = 0;
        }
      }
      else
      {
        v146 = 0;
        v147 = 0;
      }
      v184 = v442;
      id v185 = [v442 groceryLocalCorrectionsChecksum];
      if (!v185)
      {
        if (!v147) {
          return;
        }
        goto LABEL_152;
      }
      v186 = v185;
      uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v189 = v188;

      if (!v147)
      {
        swift_bridgeObjectRelease();
        goto LABEL_152;
      }
      if ((uint64_t (*)())v187 == v146 && v147 == v189)
      {
LABEL_85:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return;
      }
      char v273 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v273 & 1) == 0)
      {
LABEL_152:
        id v218 = [v184 groceryLocalCorrectionsChecksum];
        id v274 = [v184 groceryLocalCorrectionsAsData];
        if (v274)
        {
          v275 = v274;
          uint64_t v221 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v223 = v276;
        }
        else
        {
          uint64_t v221 = 0;
          unint64_t v223 = 0xF000000000000000;
        }
        id v277 = sub_1002BF76C();
        v442 = 0;
        v304 = v277;
        if (v147)
        {
          NSString v305 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v305 = 0;
        }
        [v184 setGroceryLocalCorrectionsChecksum:v305];

        uint64_t v401 = sub_1004C6530();
        unint64_t v403 = v402;
        swift_bridgeObjectRelease();
        if (v403 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v401, v403);
        }
        [v184 setGroceryLocalCorrectionsAsData:isa];

        if (v304)
        {
          id v193 = v304;
          v405 = v442;
          sub_1002FE5E0(v193);
          v442 = v405;
          if (v405)
          {
            uint64_t v434 = v221;
            unint64_t v435 = v223;
            id v436 = v218;

            uint64_t v431 = 0;
            uint64_t v278 = sub_1002F6AF8();
            (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v427, v278, v439);
            uint64_t v279 = swift_allocObject();
            *(void *)(v279 + 16) = v429;
            uint64_t v280 = swift_allocObject();
            *(void *)(v280 + 16) = v184;
            v432 = (char *)swift_allocObject();
            *((void *)v432 + 2) = v442;
            v433 = v184;
            swift_errorRetain();
            v440 = Logger.logObject.getter();
            LODWORD(v437) = static os_log_type_t.error.getter();
            id v441 = (id)swift_allocObject();
            *((unsigned char *)v441 + 16) = 34;
            uint64_t v281 = swift_allocObject();
            *(unsigned char *)(v281 + 16) = 8;
            uint64_t v282 = swift_allocObject();
            *(void *)(v282 + 16) = sub_1003329E4;
            *(void *)(v282 + 24) = v279;
            v283 = (char *)swift_allocObject();
            *((void *)v283 + 2) = sub_100332F00;
            *((void *)v283 + 3) = v282;
            v284 = (char *)swift_allocObject();
            v284[16] = 34;
            v285 = (char *)swift_allocObject();
            v285[16] = 8;
            uint64_t v286 = swift_allocObject();
            *(void *)(v286 + 16) = sub_100332FDC;
            *(void *)(v286 + 24) = v280;
            uint64_t v287 = swift_allocObject();
            *(void *)(v287 + 16) = sub_100332F00;
            *(void *)(v287 + 24) = v286;
            uint64_t v288 = swift_allocObject();
            *(unsigned char *)(v288 + 16) = 34;
            uint64_t v289 = swift_allocObject();
            *(unsigned char *)(v289 + 16) = 8;
            uint64_t v290 = swift_allocObject();
            uint64_t v291 = (uint64_t)v432;
            *(void *)(v290 + 16) = sub_100332FE0;
            *(void *)(v290 + 24) = v291;
            v292 = (char *)swift_allocObject();
            *((void *)v292 + 2) = sub_100332F00;
            *((void *)v292 + 3) = v290;
            sub_100094134((uint64_t *)&unk_100914A10);
            uint64_t v293 = swift_allocObject();
            sub_1001565E4(v293, 9);
            id v294 = v441;
            void *v295 = sub_100332F14;
            v295[1] = v294;
            v295[2] = sub_100332F14;
            v295[3] = v281;
            v295[4] = sub_100332F0C;
            v295[5] = v283;
            v295[6] = sub_100332F14;
            v295[7] = v284;
            v295[8] = sub_100332F14;
            v295[9] = v285;
            v295[10] = sub_100332F0C;
            v295[11] = v287;
            v295[12] = sub_100332F14;
            v295[13] = v288;
            v295[14] = sub_100332F14;
            v295[15] = v289;
            v295[16] = sub_100332F0C;
            v295[17] = v292;
            swift_retain();
            v432 = (char *)v281;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (!os_log_type_enabled(v440, (os_log_type_t)v437))
            {

              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v427, v439);
              goto LABEL_160;
            }
            v426 = v292;
            v428 = (char *)v287;
            v429 = (char *)v288;
            v296 = v432;
            v430 = (char *)v289;
            v297 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            v424 = (char *)v445;
            v425 = v297;
            *(_WORD *)v297 = 770;
            id v447 = v297 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = (char *)v441;
            uint64_t v298 = v431;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            if (!v298)
            {
              swift_release();
              v443 = (uint64_t (*)())sub_100332F14;
              v444 = v296;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              uint64_t v299 = v438;
              swift_release();
              v443 = (uint64_t (*)())sub_100332F0C;
              v444 = v283;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v443 = (uint64_t (*)())sub_100332F14;
              v444 = v284;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v443 = (uint64_t (*)())sub_100332F14;
              v444 = v285;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v443 = (uint64_t (*)())sub_100332F0C;
              v444 = v428;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v443 = (uint64_t (*)())sub_100332F14;
              v444 = v429;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v443 = (uint64_t (*)())sub_100332F14;
              v444 = v430;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              v300 = v427;
              swift_release();
              v443 = (uint64_t (*)())sub_100332F0C;
              v444 = v426;
              sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
              swift_release();
              v301 = v440;
              _os_log_impl((void *)&_mh_execute_header, v440, (os_log_type_t)v437, "%{public}s#mergeData(from record: CKRecord, accountID:): Failed to update 'groceryLocalCorrections'. {objectID: %{public}s, error: %{public}s}", v425, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              sub_10008C35C();

              (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v299 + 8))(v300, v439);
LABEL_160:
              v302 = v433;
              id v303 = v436;
              [v433 setGroceryLocalCorrectionsChecksum:v436];

              uint64_t v269 = v434;
              unint64_t v268 = v435;
              if (v435 >> 60 == 15)
              {
                Class v270 = 0;
              }
              else
              {
                sub_100097E38(v434, v435);
                Class v270 = Data._bridgeToObjectiveC()().super.isa;
                sub_100097F20(v269, v268);
              }
              [v302 setGroceryLocalCorrectionsAsData:v270];
LABEL_164:
              sub_100097F20(v269, v268);

              swift_errorRelease();
              return;
            }
LABEL_246:
            swift_errorRelease();

            __break(1u);
            swift_errorRelease();
            __break(1u);
            JUMPOUT(0x1002FE58CLL);
          }
LABEL_227:

          sub_100097F20(v221, v223);
LABEL_228:

          return;
        }
        goto LABEL_226;
      }
      goto LABEL_4;
    case 4:
      id v148 = [v441 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      if (v444)
      {
        NSString v149 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v149 = 0;
      }
      v190 = v442;
      [v442 setGroceryLocaleID:v149];

      id v191 = [v190 groceryLocaleID];
      if (!v191) {
        return;
      }

      if ([v190 markedForDeletion]) {
        return;
      }
      id v192 = [v190 storeControllerManagedObjectContext];
      if (!v192) {
        return;
      }
      id v193 = v192;
      id v194 = sub_1002FE9F0();
      if (!v194) {
        goto LABEL_228;
      }
      v195 = v194;
      type metadata accessor for RDGroceryOperationQueue();
      id v407 = sub_1005EB4CC(0, 0, 2, (uint64_t)v195, (uint64_t)v193);

      return;
    case 6:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v167 = v434;
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      v168 = (void (**)(char *, uint64_t))v433;
      id v150 = 0;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v433[6].isa)(v33, 1, v167) != 1)
      {
        id v150 = Date._bridgeToObjectiveC()().super.isa;
        v168[1](v33, v167);
      }
      [v442 setLastUserAccessDate:v150];
      goto LABEL_98;
    case 8:
      id v106 = [v441 encryptedValues];
      NSString v107 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v108 = [v106 objectForKeyedSubscript:v107];
      swift_unknownObjectRelease();

      if (v108)
      {
        id v447 = v108;
        sub_100094134(&qword_100909AB0);
        int v109 = swift_dynamicCast();
        if (v109) {
          v110 = v443;
        }
        else {
          v110 = 0;
        }
        if (v109) {
          uint64_t v111 = v444;
        }
        else {
          uint64_t v111 = 0;
        }
      }
      else
      {
        v110 = 0;
        uint64_t v111 = 0;
      }
      v175 = v442;
      id v176 = [v442 membershipsOfRemindersInSectionsChecksum];
      if (v176)
      {
        v177 = v176;
        uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v180 = v179;

        if (v111)
        {
          if ((uint64_t (*)())v178 == v110 && v111 == v180) {
            goto LABEL_85;
          }
          char v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v181)
          {
LABEL_4:
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else if (!v111)
      {
        return;
      }
      id v218 = [v175 membershipsOfRemindersInSectionsChecksum];
      id v219 = [v175 membershipsOfRemindersInSectionsAsData];
      if (v219)
      {
        v220 = v219;
        uint64_t v221 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v223 = v222;
      }
      else
      {
        uint64_t v221 = 0;
        unint64_t v223 = 0xF000000000000000;
      }
      id v241 = sub_1002B1988();
      v442 = 0;
      v271 = v241;
      if (v111)
      {
        NSString v272 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v272 = 0;
      }
      [v175 setMembershipsOfRemindersInSectionsChecksum:v272];

      uint64_t v396 = sub_1004C6530();
      unint64_t v398 = v397;
      swift_bridgeObjectRelease();
      if (v398 >> 60 == 15)
      {
        Class v399 = 0;
      }
      else
      {
        Class v399 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v396, v398);
      }
      [v175 setMembershipsOfRemindersInSectionsAsData:v399];

      if (v271)
      {
        id v193 = v271;
        v400 = v442;
        sub_10015B234(v193);
        v442 = v400;
        if (v400)
        {
          uint64_t v434 = v221;
          unint64_t v435 = v223;
          id v436 = v218;

          uint64_t v431 = 0;
          uint64_t v242 = sub_1002F6AF8();
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v428, v242, v439);
          uint64_t v243 = swift_allocObject();
          *(void *)(v243 + 16) = v429;
          uint64_t v244 = swift_allocObject();
          *(void *)(v244 + 16) = v175;
          v432 = (char *)swift_allocObject();
          *((void *)v432 + 2) = v442;
          v433 = v175;
          swift_errorRetain();
          v440 = Logger.logObject.getter();
          LODWORD(v437) = static os_log_type_t.error.getter();
          id v441 = (id)swift_allocObject();
          *((unsigned char *)v441 + 16) = 34;
          uint64_t v245 = swift_allocObject();
          *(unsigned char *)(v245 + 16) = 8;
          uint64_t v246 = swift_allocObject();
          *(void *)(v246 + 16) = sub_1003329E4;
          *(void *)(v246 + 24) = v243;
          v247 = (char *)swift_allocObject();
          *((void *)v247 + 2) = sub_100332F00;
          *((void *)v247 + 3) = v246;
          v248 = (char *)swift_allocObject();
          v248[16] = 34;
          v249 = (char *)swift_allocObject();
          v249[16] = 8;
          uint64_t v250 = swift_allocObject();
          *(void *)(v250 + 16) = sub_1003329E8;
          *(void *)(v250 + 24) = v244;
          uint64_t v251 = swift_allocObject();
          *(void *)(v251 + 16) = sub_100332F00;
          *(void *)(v251 + 24) = v250;
          uint64_t v252 = swift_allocObject();
          *(unsigned char *)(v252 + 16) = 34;
          uint64_t v253 = swift_allocObject();
          *(unsigned char *)(v253 + 16) = 8;
          uint64_t v254 = swift_allocObject();
          uint64_t v255 = (uint64_t)v432;
          *(void *)(v254 + 16) = sub_100332A3C;
          *(void *)(v254 + 24) = v255;
          v256 = (char *)swift_allocObject();
          *((void *)v256 + 2) = sub_100332F00;
          *((void *)v256 + 3) = v254;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v257 = swift_allocObject();
          sub_1001565E4(v257, 9);
          id v258 = v441;
          void *v259 = sub_100332F14;
          v259[1] = v258;
          v259[2] = sub_100332F14;
          v259[3] = v245;
          v259[4] = sub_100332F0C;
          v259[5] = v247;
          v259[6] = sub_100332F14;
          v259[7] = v248;
          v259[8] = sub_100332F14;
          v259[9] = v249;
          v259[10] = sub_100332F0C;
          v259[11] = v251;
          v259[12] = sub_100332F14;
          v259[13] = v252;
          v259[14] = sub_100332F14;
          v259[15] = v253;
          v259[16] = sub_100332F0C;
          v259[17] = v256;
          swift_retain();
          v432 = (char *)v245;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v440, (os_log_type_t)v437))
          {
            v426 = v256;
            v427 = (char *)v251;
            v260 = v432;
            v429 = (char *)v252;
            v430 = (char *)v253;
            v261 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            v424 = (char *)v445;
            v425 = v261;
            *(_WORD *)v261 = 770;
            id v447 = v261 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = (char *)v441;
            uint64_t v262 = v431;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            if (v262) {
              goto LABEL_246;
            }
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v260;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            uint64_t v263 = v438;
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v247;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v248;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v249;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v427;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v429;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v430;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            v264 = v428;
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v426;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v265 = v440;
            _os_log_impl((void *)&_mh_execute_header, v440, (os_log_type_t)v437, "%{public}s#mergeData(from record: CKRecord, accountID:): Failed to update 'membershipsOfRemindersInSections'. {objectID: %{public}s, error: %{public}s}", v425, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v263 + 8))(v264, v439);
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v428, v439);
          }
          v266 = v433;
          id v267 = v436;
          [v433 setMembershipsOfRemindersInSectionsChecksum:v436];

          uint64_t v269 = v434;
          unint64_t v268 = v435;
          if (v435 >> 60 == 15)
          {
            Class v270 = 0;
          }
          else
          {
            sub_100097E38(v434, v435);
            Class v270 = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F20(v269, v268);
          }
          [v266 setMembershipsOfRemindersInSectionsAsData:v270];
          goto LABEL_164;
        }
        goto LABEL_227;
      }
LABEL_226:

      sub_100097F20(v221, v223);
      return;
    case 9:
      id v112 = v441;
      id v113 = [v441 encryptedValues];
      NSString v114 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v115 = [v113 objectForKeyedSubscript:v114];
      swift_unknownObjectRelease();

      id v116 = v442;
      uint64_t v117 = v437;
      int v118 = v440;
      if (!v115) {
        goto LABEL_26;
      }
      id v447 = v115;
      sub_100094134(&qword_100909AB0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_26;
      }
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v118[6].isa)(v45, 1, v117) == 1)
      {
        sub_1000966BC((uint64_t)v45, (uint64_t *)&unk_100909E50);
LABEL_26:
        [v116 setMostRecentTargetTemplateIdentifier:0];
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))v118[4].isa)(v35, v45, v117);
        Class v359 = UUID._bridgeToObjectiveC()().super.isa;
        [v116 setMostRecentTargetTemplateIdentifier:v359];

        ((void (*)(char *, uint64_t))v118[1].isa)(v35, v117);
      }
      unint64_t v119 = sub_1002B0F00((uint64_t)[v116 sharingStatus]);
      if (v119 < 2)
      {
        id v203 = [v112 recordID];
        unsigned int v204 = [v203 ic_isOwnedByCurrentUser];

        if (v204)
        {
          id v150 = [v116 mostRecentTargetTemplateIdentifier];
          if (v150)
          {
            v205 = v422;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            v206 = v411;
            ((void (*)(char *, char *, uint64_t))v118[4].isa)(v411, v205, v117);
            ((void (*)(char *, void, uint64_t, uint64_t))v118[7].isa)(v206, 0, 1, v117);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v118[6].isa)(v206, 1, v117) == 1)
            {
              id v150 = 0;
            }
            else
            {
              id v150 = UUID._bridgeToObjectiveC()().super.isa;
              ((void (*)(char *, uint64_t))v118[1].isa)(v206, v117);
            }
          }
          else
          {
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v118[7].isa)(v411, 1, 1, v117);
          }
          [v116 setMostRecentTargetTemplateIdentifierByCurrentUser:v150];
LABEL_98:
        }
      }
      else
      {
        unint64_t v120 = v119;
        if (v119 - 3 < 2) {
          return;
        }
        if (v119 == 2)
        {
          uint64_t v121 = sub_1002F6AF8();
          uint64_t v122 = v438;
          v123 = v417;
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v417, v121, v439);
          uint64_t v124 = swift_allocObject();
          *(void *)(v124 + 16) = v116;
          v442 = v116;
          uint64_t v125 = Logger.logObject.getter();
          int v126 = static os_log_type_t.default.getter();
          v127 = (char *)swift_allocObject();
          v127[16] = 34;
          v128 = (char *)swift_allocObject();
          v128[16] = 8;
          uint64_t v129 = swift_allocObject();
          *(void *)(v129 + 16) = sub_100332998;
          *(void *)(v129 + 24) = v124;
          v130 = (char *)swift_allocObject();
          *((void *)v130 + 2) = sub_100332F00;
          *((void *)v130 + 3) = v129;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v131 = swift_allocObject();
          sub_1001565E4(v131, 3);
          void *v132 = sub_100332F14;
          v132[1] = v127;
          v132[2] = sub_100332F14;
          v132[3] = v128;
          v132[4] = sub_100332F0C;
          v132[5] = v130;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v441) = v126;
          if (os_log_type_enabled(v125, (os_log_type_t)v126))
          {
            v133 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            *(_WORD *)v133 = 258;
            id v447 = v133 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v127;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v128;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v130;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            uint64_t v134 = v417;
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v441, "REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}", v133, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v134, v439);
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v122 + 8))(v123, v439);
          }
          id v395 = [v442 storeControllerManagedObjectContext];
          if (v395)
          {
            NSString v165 = v395;
            id v447 = [v395 pendingPostSaveActions];
            uint64_t v394 = 4;
            goto LABEL_208;
          }
        }
        else
        {
          uint64_t v329 = sub_1002F6AF8();
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v420, v329, v439);
          uint64_t v330 = swift_allocObject();
          *(void *)(v330 + 16) = v116;
          uint64_t v331 = swift_allocObject();
          *(void *)(v331 + 16) = v120;
          v332 = v116;
          v442 = Logger.logObject.getter();
          LODWORD(v441) = static os_log_type_t.fault.getter();
          v333 = (char *)swift_allocObject();
          v333[16] = 34;
          v334 = (char *)swift_allocObject();
          v334[16] = 8;
          uint64_t v335 = swift_allocObject();
          *(void *)(v335 + 16) = sub_100332FD4;
          *(void *)(v335 + 24) = v330;
          v336 = (char *)swift_allocObject();
          *((void *)v336 + 2) = sub_100332F00;
          *((void *)v336 + 3) = v335;
          v337 = (char *)swift_allocObject();
          v337[16] = 2;
          v338 = (char *)swift_allocObject();
          v338[16] = 8;
          uint64_t v339 = swift_allocObject();
          *(void *)(v339 + 16) = sub_1003328F0;
          *(void *)(v339 + 24) = v331;
          v323 = (char *)swift_allocObject();
          *((void *)v323 + 2) = sub_100332F04;
          *((void *)v323 + 3) = v339;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v340 = swift_allocObject();
          sub_1001565E4(v340, 6);
          void *v341 = sub_100332F14;
          v341[1] = v333;
          v341[2] = sub_100332F14;
          v341[3] = v334;
          v341[4] = sub_100332F0C;
          v341[5] = v336;
          v341[6] = sub_100332F14;
          v341[7] = v337;
          v341[8] = sub_100332F14;
          v341[9] = v338;
          v341[10] = sub_1003327BC;
          v341[11] = v323;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v342 = v442;
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v342, (os_log_type_t)v441))
          {
            v327 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            *(_WORD *)v327 = 514;
            id v447 = v327 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v333;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v334;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v336;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v337;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v338;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            v328 = v420;
            swift_release();
            goto LABEL_173;
          }

          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v420, v439);
        }
      }
      return;
    case 10:
      id v166 = [v441 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      if (v444)
      {
        id v150 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v150 = 0;
      }
      [v442 setName:v150];
      goto LABEL_98;
    case 11:
      uint64_t v97 = v442;
      id v98 = [v442 parentAccount];
      if (v98)
      {
        v99 = v98;
        id v100 = [v98 identifier];

        unint64_t v102 = v436;
        uint64_t v101 = v437;
        if (v100)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v103 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v440[7].isa;
          v104 = v70;
          uint64_t v105 = 0;
        }
        else
        {
          unint64_t v103 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v440[7].isa;
          v104 = v70;
          uint64_t v105 = 1;
        }
        v439 = v103;
        v103(v104, v105, 1, v101);
        sub_100096408((uint64_t)v70, (uint64_t)v73, (uint64_t *)&unk_100909E50);
        v174 = v440;
      }
      else
      {
        v174 = v440;
        v439 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v440[7].isa;
        v439(v73, 1, 1, v437);
        unint64_t v102 = v436;
      }
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if (v443 == 2)
      {
        id v207 = 0;
        v208 = v102;
        uint64_t v209 = (uint64_t)v73;
      }
      else
      {
        v208 = v102;
        uint64_t v209 = (uint64_t)v73;
        if (v443) {
          id v207 = [v97 account];
        }
        else {
          id v207 = 0;
        }
      }
      uint64_t v210 = v431;
      [v97 setParentAccount:v207];

      int v211 = *v208;
      sub_1000BF710(v209, v210, (uint64_t *)&unk_100909E50);
      if (v211 == 1)
      {
        sub_1000966BC(v210, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v209, (uint64_t *)&unk_100909E50);
        char v212 = 1;
        goto LABEL_189;
      }
      id v213 = [v97 parentAccount];
      if (v213)
      {
        v214 = v213;
        id v215 = [v213 identifier];

        uint64_t v216 = (uint64_t)v423;
        if (v215)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v217 = 0;
        }
        else
        {
          uint64_t v217 = 1;
        }
        v308 = v430;
        uint64_t v307 = v437;
        v439(v63, v217, 1, v437);
        uint64_t v367 = (uint64_t)v63;
        v306 = v425;
        sub_100096408(v367, (uint64_t)v425, (uint64_t *)&unk_100909E50);
      }
      else
      {
        v306 = v425;
        uint64_t v307 = v437;
        v439((char *)v425, 1, 1, v437);
        v308 = v430;
        uint64_t v216 = (uint64_t)v423;
      }
      uint64_t v368 = v216 + *((int *)v308 + 12);
      sub_1000BF710((uint64_t)v306, v216, (uint64_t *)&unk_100909E50);
      sub_1000BF710(v210, v368, (uint64_t *)&unk_100909E50);
      uint64_t v369 = v210;
      v370 = v174;
      uint64_t v371 = (uint64_t)v306;
      v372 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v370[6].isa;
      if (v372(v216, 1, v307) == 1)
      {
        sub_1000966BC(v371, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v369, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v209, (uint64_t *)&unk_100909E50);
        if (v372(v368, 1, v307) == 1)
        {
          sub_1000966BC(v216, (uint64_t *)&unk_100909E50);
          char v212 = 0;
          goto LABEL_188;
        }
        goto LABEL_186;
      }
      uint64_t v373 = v414;
      sub_1000BF710(v216, v414, (uint64_t *)&unk_100909E50);
      if (v372(v368, 1, v307) == 1)
      {
        sub_1000966BC((uint64_t)v425, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v431, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v209, (uint64_t *)&unk_100909E50);
        ((void (*)(uint64_t, uint64_t))v440[1].isa)(v373, v307);
LABEL_186:
        sub_1000966BC(v216, (uint64_t *)&unk_10090B4C0);
        char v212 = 1;
        goto LABEL_188;
      }
      v374 = v440;
      uint64_t v375 = v373;
      v376 = v422;
      ((void (*)(char *, uint64_t, uint64_t))v440[4].isa)(v422, v368, v307);
      sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v377 = dispatch thunk of static Equatable.== infix(_:_:)();
      v378 = (void (*)(char *, uint64_t))v374[1].isa;
      v378(v376, v307);
      sub_1000966BC((uint64_t)v425, (uint64_t *)&unk_100909E50);
      sub_1000966BC(v431, (uint64_t *)&unk_100909E50);
      sub_1000966BC(v209, (uint64_t *)&unk_100909E50);
      v378((char *)v375, v307);
      sub_1000966BC(v216, (uint64_t *)&unk_100909E50);
      char v212 = v377 ^ 1;
LABEL_188:
      v208 = v436;
LABEL_189:
      unsigned char *v208 = v212 & 1;
      return;
    case 12:
      v135 = v442;
      id v136 = [v442 parentList];
      if (v136)
      {
        v137 = v136;
        id v138 = [v136 identifier];

        uint64_t v139 = v437;
        v140 = v440;
        if (v138)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v141 = (void (*)(void, void, void, void))v140[7].isa;
          v141(v56, 0, 1, v139);
        }
        else
        {
          v141 = (void (*)(void, void, void, void))v440[7].isa;
          v141(v56, 1, 1, v437);
        }
        id v183 = v441;
        uint64_t v224 = (uint64_t)v56;
        uint64_t v182 = v435;
        sub_100096408(v224, v435, (uint64_t *)&unk_100909E50);
      }
      else
      {
        v140 = v440;
        v141 = (void (*)(void, void, void, void))v440[7].isa;
        uint64_t v182 = v435;
        uint64_t v139 = v437;
        v141(v435, 1, 1, v437);
        id v183 = v441;
      }
      if ((objc_msgSend(v183, "ic_isOwnedByCurrentUser") & 1) != 0
        || (id v225 = [v183 share], v225, !v225))
      {
        uint64_t v228 = CKRecord.subscript.getter();
        swift_bridgeObjectRelease();
        if (v228)
        {
          self;
          v229 = (void *)swift_dynamicCastObjCClass();
          uint64_t v227 = (uint64_t)v432;
          if (!v229) {
            swift_unknownObjectRelease();
          }
          v226 = v436;
        }
        else
        {
          v229 = 0;
          v226 = v436;
          uint64_t v227 = (uint64_t)v432;
        }
        v230 = sub_1004B9C44(v229, v135);

        [v135 setParentList:v230];
        uint64_t v182 = v435;
      }
      else
      {
        swift_bridgeObjectRelease();
        v226 = v436;
        uint64_t v227 = (uint64_t)v432;
      }
      int v231 = *v226;
      sub_1000BF710(v182, v227, (uint64_t *)&unk_100909E50);
      if (v231 == 1)
      {
        sub_1000966BC(v227, (uint64_t *)&unk_100909E50);
        uint64_t v232 = v182;
        v233 = (uint64_t *)&unk_100909E50;
LABEL_198:
        sub_1000966BC(v232, v233);
        char v384 = 1;
        goto LABEL_199;
      }
      id v234 = [v135 parentList];
      if (v234)
      {
        v235 = v234;
        id v236 = [v234 identifier];

        uint64_t v237 = (uint64_t)v424;
        if (v236)
        {
          v238 = v418;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v239 = 0;
          v240 = v430;
        }
        else
        {
          uint64_t v239 = 1;
          v240 = v430;
          v238 = v418;
        }
        v141(v238, v239, 1, v139);
        uint64_t v379 = (uint64_t)v238;
        uint64_t v309 = v139;
        v310 = v140;
        uint64_t v311 = (uint64_t)v426;
        sub_100096408(v379, (uint64_t)v426, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v309 = v139;
        v310 = v140;
        uint64_t v311 = (uint64_t)v426;
        v141(v426, 1, 1, v309);
        v240 = v430;
        uint64_t v237 = (uint64_t)v424;
      }
      uint64_t v380 = v237 + *((int *)v240 + 12);
      sub_1000BF710(v311, v237, (uint64_t *)&unk_100909E50);
      uint64_t v381 = (uint64_t)v432;
      sub_1000BF710((uint64_t)v432, v380, (uint64_t *)&unk_100909E50);
      v382 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v310[6].isa;
      if (v382(v237, 1, v309) == 1)
      {
        sub_1000966BC(v311, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v381, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v435, (uint64_t *)&unk_100909E50);
        int v383 = v382(v380, 1, v309);
        v226 = v436;
        if (v383 == 1)
        {
          sub_1000966BC(v237, (uint64_t *)&unk_100909E50);
          char v384 = 0;
          goto LABEL_199;
        }
        goto LABEL_197;
      }
      uint64_t v385 = v415;
      sub_1000BF710(v237, v415, (uint64_t *)&unk_100909E50);
      int v386 = v382(v380, 1, v309);
      v226 = v436;
      if (v386 == 1)
      {
        sub_1000966BC((uint64_t)v426, (uint64_t *)&unk_100909E50);
        sub_1000966BC((uint64_t)v432, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v435, (uint64_t *)&unk_100909E50);
        ((void (*)(uint64_t, uint64_t))v440[1].isa)(v385, v309);
LABEL_197:
        v233 = (uint64_t *)&unk_10090B4C0;
        uint64_t v232 = v237;
        goto LABEL_198;
      }
      v387 = v440;
      uint64_t v388 = v385;
      v389 = v422;
      ((void (*)(char *, uint64_t, uint64_t))v440[4].isa)(v422, v380, v309);
      sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v390 = dispatch thunk of static Equatable.== infix(_:_:)();
      v391 = (void (*)(char *, uint64_t))v387[1].isa;
      v391(v389, v309);
      sub_1000966BC((uint64_t)v426, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v432, (uint64_t *)&unk_100909E50);
      sub_1000966BC(v435, (uint64_t *)&unk_100909E50);
      v391((char *)v388, v309);
      sub_1000966BC(v237, (uint64_t *)&unk_100909E50);
      char v384 = v390 ^ 1;
LABEL_199:
      unsigned char *v226 = v384 & 1;
      return;
    case 13:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v75 = v434;
      id v76 = v441;
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      unint64_t v77 = (void (**)(char *, uint64_t))v433;
      id v78 = (unsigned int (*)(char *, uint64_t, uint64_t))v433[6].isa;
      Class v79 = 0;
      if (v78(v30, 1, v75) != 1)
      {
        Class v79 = Date._bridgeToObjectiveC()().super.isa;
        v77[1](v30, v75);
      }
      uint64_t v80 = v442;
      [v442 setPinnedDate:v79];

      unint64_t v81 = sub_1002B0F00((uint64_t)[v80 sharingStatus]);
      if (v81 < 2)
      {
        id v196 = [v76 recordID];
        unsigned int v197 = [v196 ic_isOwnedByCurrentUser];

        if (!v197) {
          return;
        }
        id v198 = [v80 pinnedDate];
        if (v198)
        {
          v199 = v198;
          v200 = v409;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v201 = (uint64_t)v412;
          ((void (*)(char *, char *, uint64_t))v77[4])(v412, v200, v75);
          uint64_t v202 = 1;
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v77[7])(v201, 0, 1, v75);
          if (v78((char *)v201, 1, v75) != 1) {
            goto LABEL_237;
          }
        }
        else
        {
          uint64_t v201 = (uint64_t)v412;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v77[7])(v412, 1, 1, v75);
        }
        uint64_t v202 = 0;
LABEL_237:
        sub_1000966BC(v201, (uint64_t *)&unk_100909A40);
        [v80 setIsPinnedByCurrentUser:v202];
        return;
      }
      unint64_t v82 = v81;
      if (v81 - 3 >= 2)
      {
        if (v81 == 2)
        {
          uint64_t v83 = sub_1002F6AF8();
          uint64_t v84 = v438;
          id v85 = v416;
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v416, v83, v439);
          uint64_t v86 = swift_allocObject();
          *(void *)(v86 + 16) = v80;
          v442 = v80;
          uint64_t v87 = Logger.logObject.getter();
          int v88 = static os_log_type_t.default.getter();
          uint64_t v89 = (char *)swift_allocObject();
          v89[16] = 34;
          unint64_t v90 = (char *)swift_allocObject();
          v90[16] = 8;
          uint64_t v91 = swift_allocObject();
          *(void *)(v91 + 16) = sub_100332FD4;
          *(void *)(v91 + 24) = v86;
          uint64_t v92 = (char *)swift_allocObject();
          *((void *)v92 + 2) = sub_100332F00;
          *((void *)v92 + 3) = v91;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t inited = swift_initStackObject();
          sub_1001565E4(inited, 3);
          *uint64_t v94 = sub_100332F14;
          v94[1] = v89;
          v94[2] = sub_100332F14;
          v94[3] = v90;
          v94[4] = sub_100332F0C;
          v94[5] = v92;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v441) = v88;
          if (os_log_type_enabled(v87, (os_log_type_t)v88))
          {
            v95 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            *(_WORD *)v95 = 258;
            id v447 = v95 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v89;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v90;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            unint64_t v96 = v416;
            swift_release();
            v443 = (uint64_t (*)())sub_100332F0C;
            v444 = v92;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v441, "REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}", v95, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v96, v439);
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v84 + 8))(v85, v439);
          }
          id v393 = [v442 storeControllerManagedObjectContext];
          if (v393)
          {
            NSString v165 = v393;
            id v447 = [v393 pendingPostSaveActions];
            uint64_t v394 = 2;
LABEL_208:
            sub_10020099C(&v443, v394);
            [v165 setPendingPostSaveActions:v447];
LABEL_209:
          }
        }
        else
        {
          uint64_t v312 = sub_1002F6AF8();
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v419, v312, v439);
          uint64_t v313 = swift_allocObject();
          *(void *)(v313 + 16) = v80;
          uint64_t v314 = swift_allocObject();
          *(void *)(v314 + 16) = v82;
          v315 = v80;
          v442 = Logger.logObject.getter();
          LODWORD(v441) = static os_log_type_t.fault.getter();
          v316 = (char *)swift_allocObject();
          v316[16] = 34;
          v317 = (char *)swift_allocObject();
          v317[16] = 8;
          uint64_t v318 = swift_allocObject();
          *(void *)(v318 + 16) = sub_100332FD4;
          *(void *)(v318 + 24) = v313;
          v319 = (char *)swift_allocObject();
          *((void *)v319 + 2) = sub_10033275C;
          *((void *)v319 + 3) = v318;
          v320 = (char *)swift_allocObject();
          v320[16] = 2;
          v321 = (char *)swift_allocObject();
          v321[16] = 8;
          uint64_t v322 = swift_allocObject();
          *(void *)(v322 + 16) = sub_100332F18;
          *(void *)(v322 + 24) = v314;
          v323 = (char *)swift_allocObject();
          *((void *)v323 + 2) = sub_10033278C;
          *((void *)v323 + 3) = v322;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v324 = swift_initStackObject();
          sub_1001565E4(v324, 6);
          void *v325 = sub_100332744;
          v325[1] = v316;
          v325[2] = sub_100332F14;
          v325[3] = v317;
          v325[4] = sub_100332764;
          v325[5] = v319;
          v325[6] = sub_100332F14;
          v325[7] = v320;
          v325[8] = sub_100332F14;
          v325[9] = v321;
          v325[10] = sub_1003327BC;
          v325[11] = v323;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          v326 = v442;
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v326, (os_log_type_t)v441))
          {
            v327 = (uint8_t *)sub_10008C368();
            uint64_t v445 = swift_slowAlloc();
            uint64_t v446 = 0;
            *(_WORD *)v327 = 514;
            id v447 = v327 + 2;
            v443 = (uint64_t (*)())sub_100332744;
            v444 = v316;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v317;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332764;
            v444 = v319;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v320;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v321;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            v328 = v419;
            swift_release();
LABEL_173:
            v443 = sub_1003327BC;
            v444 = v323;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v343 = v442;
            _os_log_impl((void *)&_mh_execute_header, v442, (os_log_type_t)v441, "REMCDList.mergeData(from record:accountID:) Unhandled sharingStatus {ckIdentifier: %{public}s, sharingStatus.rawValue: %{public}ld}", v327, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v328, v439);
          }
          else
          {

            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v419, v439);
          }
        }
      }
      return;
    case 14:
      swift_bridgeObjectRelease();
      id v153 = v441;
      uint64_t v154 = CKRecord.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      if (v154 || (uint64_t v155 = CKRecord.subscript.getter(), swift_bridgeObjectRelease(), swift_unknownObjectRelease(), v155))
      {
        char v156 = static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
        v157 = v442;
        v158 = (void *)sub_1004B9D24(v153, 0xD00000000000001CLL, 0x80000001007D1860, 0xD000000000000021, 0x80000001007D1880, v156 & 1);
        unint64_t v160 = v159;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v160 >> 60 == 15) {
          return;
        }
        id v161 = sub_1004B9D50();
        swift_bridgeObjectRelease();
        if (!v161)
        {
          id v441 = v158;
          uint64_t v344 = sub_1002F6AF8();
          v345 = v413;
          (*(void (**)(char *, uint64_t, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 16))(v413, v344, v439);
          uint64_t v346 = swift_allocObject();
          *(void *)(v346 + 16) = v157;
          v347 = v157;
          v348 = Logger.logObject.getter();
          int v349 = static os_log_type_t.error.getter();
          v350 = (char *)swift_allocObject();
          v350[16] = 64;
          v351 = (char *)swift_allocObject();
          v351[16] = 8;
          uint64_t v352 = swift_allocObject();
          *(void *)(v352 + 16) = sub_1003327E0;
          *(void *)(v352 + 24) = v346;
          v353 = (char *)swift_allocObject();
          *((void *)v353 + 2) = sub_100332808;
          *((void *)v353 + 3) = v352;
          sub_100094134((uint64_t *)&unk_100914A10);
          uint64_t v354 = swift_initStackObject();
          sub_1001565E4(v354, 3);
          void *v355 = sub_100332F14;
          v355[1] = v350;
          v355[2] = sub_100332F14;
          v355[3] = v351;
          v355[4] = sub_100332830;
          v355[5] = v353;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRelease();
          LODWORD(v442) = v349;
          if (os_log_type_enabled(v348, (os_log_type_t)v349))
          {
            v356 = v348;
            v357 = (uint8_t *)sub_10008C368();
            uint64_t v358 = swift_slowAlloc();
            uint64_t v445 = 0;
            uint64_t v446 = v358;
            *(_WORD *)v357 = 258;
            id v447 = v357 + 2;
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v350;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332F14;
            v444 = v351;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            swift_release();
            v443 = (uint64_t (*)())sub_100332830;
            v444 = v353;
            sub_10008F21C((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v443, (uint64_t)&v447, (uint64_t)&v446, (uint64_t)&v445);
            v345 = v413;
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v356, (os_log_type_t)v442, "Failed to create replicaIDSource when decoding mergeable ordered set for reminder IDS {cdList: %@}", v357, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            sub_10008C35C();

            sub_100097F20((uint64_t)v441, v160);
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            sub_100097F20((uint64_t)v441, v160);
          }
          (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v438 + 8))(v345, v439);
          return;
        }
        objc_allocWithZone((Class)REMCRMergeableOrderedSet);
        id v162 = v161;
        sub_100097E24((uint64_t)v158, v160);
        id v392 = sub_10028B1B0((uint64_t)v162);
        sub_100097F20((uint64_t)v158, v160);

        id v441 = [v392 orderedSet];
        sub_1002F8028((uint64_t)v441, 0);

        sub_100097F20((uint64_t)v158, v160);
      }
      else
      {
        id v360 = sub_100330A94(v153, 0x7265646E696D6552, 0xEB00000000734449, 0xD000000000000010, 0x80000001007D18B0);
        uint64_t v362 = v361;
        unint64_t v364 = v363;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v365 = v442;
        if (v364 >> 60 == 15)
        {
          Class v366 = 0;
        }
        else
        {
          sub_100097E38(v362, v364);
          Class v366 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F20(v362, v364);
        }
        [v365 setReminderIDsMergeableOrdering:v366];

        if (!v360)
        {
          sub_100097F20(v362, v364);
          return;
        }
        id v441 = v360;
        sub_1002F8028((uint64_t)v441, 0);
        sub_100097F20(v362, v364);
      }
      id v406 = v441;

      return;
    case 18:
      swift_bridgeObjectRelease();
      uint64_t v169 = sub_1004C6530();
      unint64_t v171 = v170;
      swift_bridgeObjectRelease();
      if (v171 >> 60 == 15)
      {
        Class v172 = 0;
      }
      else
      {
        Class v172 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v169, v171);
      }
      [v442 setSectionIDsOrderingAsData:v172];

      sub_1002F88CC();
      return;
    case 19:
      id v173 = [v441 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      [v442 setShouldCategorizeGroceryItems:v443 & 1];
      return;
    case 20:
      uint64_t v163 = CKRecord.subscript.getter();
      swift_bridgeObjectRelease();
      v164 = v442;
      if (!v163) {
        return;
      }
      id v447 = (id)v163;
      sub_100094134(&qword_100909AB0);
      if ((swift_dynamicCast() & 1) == 0) {
        return;
      }
      NSString v165 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v164 setSortingStyle:v165];
      goto LABEL_209;
    default:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if (v444)
      {
        id v150 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v150 = 0;
      }
      [v442 setBadgeEmblem:v150];
      goto LABEL_98;
  }
}

void sub_1002FE5E0(void *a1)
{
  id v3 = v1;
  id v5 = [v1 groceryLocalCorrectionsAsData];
  if (!v5)
  {
LABEL_12:
    id v25 = a1;
    id v24 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  sub_1000963CC(0, &qword_100914A20);
  static REMJSONRepresentable.fromJSONData(_:)();
  if (v2)
  {
    sub_100097F34(v7, v9);
    if (qword_100907540 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100917FD0);
    id v11 = v3;
    swift_errorRetain();
    id v12 = v11;
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v29 = v14;
      id v30 = a1;
      uint64_t v15 = swift_slowAlloc();
      id v31 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446722;
      sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
      sub_100094134(&qword_10090D2F0);
      uint64_t v16 = String.init<A>(describing:)();
      sub_1000C51B8(v16, v17, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2082;
      id v18 = [v12 remObjectID];
      if (v18)
      {
        uint64_t v19 = v18;
        id v20 = [v18 description];

        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;
      }
      else
      {
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      sub_1000C51B8(v21, v23, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v26 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v26, v27, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v29, "%{public}s#mergeGroceryLocalCorrections(_:): Failed to deserialize 'groceryLocalCorrectionsAsData' due to unexpected error. It will be overwritten. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      a1 = v30;
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_12;
  }
  sub_100097F34(v7, v9);
  id v24 = v31;
  id v25 = [v31 mergingWith:a1];
LABEL_13:
  id v28 = v25;
  sub_1002C0CE8(v25, 1);
}

id sub_1002FE9F0()
{
  id result = [v0 parentAccount];
  if (!result)
  {
    id result = [v0 storeControllerManagedObjectContext];
    if (result)
    {
      uint64_t v2 = result;
      if (qword_100907B10 != -1) {
        swift_once();
      }
      id v3 = swift_retain();
      id v4 = sub_10034A86C(v3);

      swift_release();
      return v4;
    }
  }
  return result;
}

uint64_t sub_1002FEAA8(void *a1)
{
  id v1 = [a1 remObjectID];
  if (!v1) {
    return 7104878;
  }
  uint64_t v2 = v1;
  id v3 = [v1 description];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v4;
}

uint64_t sub_1002FEB30(uint64_t a1, uint64_t (*a2)())
{
  return a2();
}

uint64_t sub_1002FEB74(void *a1)
{
  id v1 = [a1 ckIdentifier];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  sub_100094134((uint64_t *)&unk_10090A4C0);
  uint64_t v3 = Optional.descriptionOrNil.getter();
  swift_bridgeObjectRelease();
  return v3;
}

CKRecord_optional __swiftcall REMCDList.newlyCreatedRecord()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v133 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v141 = (uint64_t)&v133 - v13;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v14 - 8);
  uint64_t v139 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v140 = (uint64_t)&v133 - v17;
  __chkstk_darwin(v18);
  id v20 = (char *)&v133 - v19;
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  id v24 = (char *)&v133 - v23;
  v146.receiver = v1;
  v146.super_class = (Class)REMCDList;
  id v26 = [super newlyCreatedRecord:v22];
  if (v26)
  {
    id v136 = v11;
    uint64_t v137 = v6;
    uint64_t v138 = v5;
    v135 = v4;
    unsigned __int8 v27 = [v1 isGroup];
    *((void *)&v144 + 1) = &type metadata for Bool;
    int v145 = &protocol witness table for Bool;
    LOBYTE(v143) = v27;
    uint64_t v142 = sub_1000963CC(0, (unint64_t *)&qword_100909E80);
    CKRecordKeyValueSetting.subscript.setter();
    if ([v1 isOwnedByCurrentUser])
    {
      id v28 = [v1 parentAccount];
      id v29 = v28;
      if (v28) {

      }
      *((void *)&v144 + 1) = &type metadata for Bool;
      int v145 = &protocol witness table for Bool;
      LOBYTE(v143) = v29 != 0;
      CKRecordKeyValueSetting.subscript.setter();
      id v30 = [v1 parentList];
      id v31 = v30;
      if (v30)
      {
        id v32 = [v30 recordID];

        if (v32)
        {
          id v33 = [v26 recordID];
          id v34 = [v33 zoneID];

          id v35 = [v32 zoneID];
          unsigned __int8 v36 = [v34 isEqual:v35];

          if (v36)
          {
            id v31 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v32];
          }
          else
          {

            id v31 = 0;
          }
        }
        else
        {
          id v31 = 0;
        }
      }
      id v37 = v31;
      CKRecord.subscript.setter();
    }
    uint64_t v134 = v8;
    id v38 = [v26 encryptedValues];
    id v39 = [v1 name];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v41;
      *((void *)&v143 + 1) = v43;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v44 = [v1 color];
    if (v44)
    {
      uint64_t v45 = v44;
      uint64_t v46 = sub_10016FAD4();
      if (v47)
      {
        *((void *)&v144 + 1) = &type metadata for String;
        int v145 = &protocol witness table for String;
        *(void *)&long long v143 = v46;
        *((void *)&v143 + 1) = v47;
      }
      else
      {
        int v145 = 0;
        long long v143 = 0u;
        long long v144 = 0u;
      }
      CKRecordKeyValueSetting.subscript.setter();
    }
    else
    {
      CKRecord.subscript.setter();
    }
    id v48 = [v1 lastUserAccessDate];
    if (v48)
    {
      uint64_t v49 = v48;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v50 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v20, 0, 1, v50);
    }
    else
    {
      uint64_t v50 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v20, 1, 1, v50);
    }
    sub_100096408((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_100909A40);
    type metadata accessor for Date();
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    if (v52(v24, 1, v50) == 1)
    {
      sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909A40);
      long long v143 = 0u;
      long long v144 = 0u;
      int v145 = 0;
    }
    else
    {
      *((void *)&v144 + 1) = v50;
      int v145 = &protocol witness table for Date;
      uint64_t v53 = sub_1000C1FE8((uint64_t *)&v143);
      (*(void (**)(uint64_t *, char *, uint64_t))(v51 + 32))(v53, v24, v50);
    }
    CKRecordKeyValueSetting.subscript.setter();
    id v54 = [v1 badgeEmblem];
    if (v54)
    {
      uint64_t v55 = v54;
      uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v58 = v57;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v56;
      *((void *)&v143 + 1) = v58;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    uint64_t v59 = (uint64_t)v139;
    CKRecordKeyValueSetting.subscript.setter();
    id v60 = [v1 sortingStyle];
    if (v60)
    {
      uint64_t v61 = v60;
      uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v63;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v62;
      *((void *)&v143 + 1) = v64;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    CKRecordKeyValueSetting.subscript.setter();
    id v65 = [v1 pinnedDate];
    if (v65)
    {
      uint64_t v66 = v65;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v67 = 0;
    }
    else
    {
      uint64_t v67 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v59, v67, 1, v50);
    uint64_t v68 = v140;
    sub_100096408(v59, v140, (uint64_t *)&unk_100909A40);
    if (v52((char *)v68, 1, v50) == 1)
    {
      sub_1000966BC(v68, (uint64_t *)&unk_100909A40);
      long long v143 = 0u;
      long long v144 = 0u;
      int v145 = 0;
    }
    else
    {
      *((void *)&v144 + 1) = v50;
      int v145 = &protocol witness table for Date;
      uint64_t v69 = sub_1000C1FE8((uint64_t *)&v143);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 32))(v69, v68, v50);
    }
    uint64_t v71 = v137;
    uint64_t v70 = v138;
    uint64_t v72 = (uint64_t)v136;
    CKRecordKeyValueSetting.subscript.setter();
    [v26 encryptedValues];
    id v73 = [v1 mostRecentTargetTemplateIdentifier];
    if (v73)
    {
      uint64_t v74 = v73;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v75 = 0;
    }
    else
    {
      uint64_t v75 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v72, v75, 1, v70);
    uint64_t v76 = v141;
    sub_100096408(v72, v141, (uint64_t *)&unk_100909E50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v76, 1, v70))
    {
      sub_1000966BC(v76, (uint64_t *)&unk_100909E50);
      long long v143 = 0u;
      long long v144 = 0u;
      int v145 = 0;
    }
    else
    {
      unint64_t v77 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v134, v76, v70);
      sub_1000966BC(v76, (uint64_t *)&unk_100909E50);
      uint64_t v78 = UUID.uuidString.getter();
      uint64_t v80 = v79;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v77, v70);
      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v78;
      *((void *)&v143 + 1) = v80;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    CKRecord.subscript.setter();
    CKRecord.subscript.setter();
    id v81 = [v1 reminderIDsMergeableOrdering];
    if (v81)
    {
      uint64_t v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v84 = v83;

      static String.Encoding.utf8.getter();
      uint64_t v85 = String.init(data:encoding:)();
      id v81 = v86;
      sub_100097F34(v82, v84);
      if (v81) {
        uint64_t v87 = String.count.getter();
      }
      else {
        uint64_t v87 = 0;
      }
    }
    else
    {
      uint64_t v87 = 0;
      uint64_t v85 = 0;
    }
    sub_1004D0A38(v85, (uint64_t)v81, v87, v26, 0x7265646E696D6552, 0xEB00000000734449, 0xD000000000000010, 0x80000001007D18B0, 0, 1uLL);
    swift_bridgeObjectRelease();
    id v88 = [v1 sectionIDsOrderingAsData];
    if (v88)
    {
      uint64_t v89 = v88;
      uint64_t v90 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v92 = v91;

      uint64_t v93 = self;
      sub_100097E38(v90, v92);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v95 = [v93 assetForData:isa];

      CKRecord.subscript.setter();
      sub_100097F34(v90, v92);
      sub_100097F34(v90, v92);
    }
    else
    {
      CKRecord.subscript.setter();
    }
    id v96 = [v1 membershipsOfRemindersInSectionsAsData];
    if (v96)
    {
      uint64_t v97 = v96;
      uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v100 = v99;

      uint64_t v101 = self;
      sub_100097E38(v98, v100);
      Class v102 = Data._bridgeToObjectiveC()().super.isa;
      id v103 = [v101 assetForData:v102];

      CKRecord.subscript.setter();
      sub_100097F34(v98, v100);
      sub_100097F34(v98, v100);
    }
    else
    {
      CKRecord.subscript.setter();
    }
    id v104 = [v26 encryptedValues];
    id v105 = [v1 membershipsOfRemindersInSectionsChecksum];
    if (v105)
    {
      id v106 = v105;
      uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v109 = v108;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v107;
      *((void *)&v143 + 1) = v109;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v110 = [v26 encryptedValues];
    swift_getObjectType();
    unsigned __int8 v111 = [v1 shouldCategorizeGroceryItems];
    *((void *)&v144 + 1) = &type metadata for Bool;
    int v145 = &protocol witness table for Bool;
    LOBYTE(v143) = v111;
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v112 = [v26 encryptedValues];
    id v113 = [v1 groceryLocaleID];
    if (v113)
    {
      NSString v114 = v113;
      uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v117 = v116;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v115;
      *((void *)&v143 + 1) = v117;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
    id v118 = [v1 groceryLocalCorrectionsAsData];
    if (v118)
    {
      unint64_t v119 = v118;
      uint64_t v120 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v122 = v121;

      v123 = self;
      sub_100097E38(v120, v122);
      Class v124 = Data._bridgeToObjectiveC()().super.isa;
      id v125 = [v123 assetForData:v124];

      CKRecord.subscript.setter();
      sub_100097F34(v120, v122);
      sub_100097F34(v120, v122);
    }
    else
    {
      CKRecord.subscript.setter();
    }
    id v126 = [v26 encryptedValues];
    id v127 = [v1 groceryLocalCorrectionsChecksum];
    if (v127)
    {
      v128 = v127;
      uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v131 = v130;

      *((void *)&v144 + 1) = &type metadata for String;
      int v145 = &protocol witness table for String;
      *(void *)&long long v143 = v129;
      *((void *)&v143 + 1) = v131;
    }
    else
    {
      int v145 = 0;
      long long v143 = 0u;
      long long v144 = 0u;
    }
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.setter();
    swift_unknownObjectRelease();
  }
  v132 = (objc_class *)v26;
  result.value.super.Class isa = v132;
  result.is_nil = v25;
  return result;
}

Swift::String __swiftcall REMCDList.shareTitle()()
{
  id v1 = [v0 name];
  if (!v1)
  {
    v9.receiver = v0;
    v9.super_class = (Class)REMCDList;
    id v1 = [super shareTitle];
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  uint64_t v6 = v3;
  uint64_t v7 = v5;
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

Swift::String __swiftcall REMCDList.shareType()()
{
  uint64_t v0 = (void *)0x80000001007D1930;
  uint64_t v1 = 0xD000000000000018;
  result._object = v0;
  result._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall REMCDList.update(with:)(CKShare_optional with)
{
  uint64_t isa = (uint64_t)with.value.super.super.isa;
  unint64_t v3 = type metadata accessor for UUID();
  v294._unint64_t rawValue = *(void **)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v269 = (char *)&v257 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t isUniquelyReferenced_nonNull_native = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(isUniquelyReferenced_nonNull_native - 8);
  __chkstk_darwin(isUniquelyReferenced_nonNull_native);
  uint64_t v8 = (uint64_t)&v257 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v257 = (char *)&v257 - v10;
  uint64_t v11 = sub_100094134(&qword_1009138F0);
  __chkstk_darwin(v11 - 8);
  Class v270 = (char *)&v257 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v275 = type metadata accessor for PersonNameComponents();
  uint64_t v286 = *(void *)(v275 - 8);
  __chkstk_darwin(v275);
  v265 = (char *)&v257 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v276 = (char *)&v257 - v15;
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v16 - 8);
  NSString v272 = (char *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  char v273 = (char *)&v257 - v19;
  if (qword_1009072C8 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v20 = sub_10008E2DC(isUniquelyReferenced_nonNull_native, (uint64_t)qword_1009138D0);
    id v21 = (id)isa;
    double v22 = v1;
    id v23 = v21;
    id v24 = v22;
    uint64_t v262 = v20;
    unint64_t rawValue = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled((os_log_t)rawValue, v26);
    uint64_t v291 = v24;
    unint64_t v292 = v3;
    uint64_t v260 = v8;
    unint64_t v259 = isUniquelyReferenced_nonNull_native;
    uint64_t v258 = v6;
    int64_t v298 = isa;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc();
      *(void *)&long long v299 = v23;
      uint64_t v29 = v28;
      unint64_t isUniquelyReferenced_nonNull_native = swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      id v306 = (id)v8;
      *(_DWORD *)uint64_t v29 = 138412546;
      id v304 = v24;
      uint64_t v6 = (uint64_t)v305;
      id v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)unint64_t isUniquelyReferenced_nonNull_native = v291;

      *(_WORD *)(v29 + 12) = 2080;
      id v304 = (id)isa;
      sub_100094134(&qword_1009138F8);
      uint64_t v31 = Optional.descriptionOrNil.getter();
      id v304 = (id)sub_1000C51B8(v31, v32, (uint64_t *)&v306);
      id v24 = v291;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)rawValue, v26, "Update list's sharing information and sharees with new CKShare {list: %@, share: %s}", (uint8_t *)v29, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      unint64_t v3 = v292;
      swift_slowDealloc();
      id v23 = (id)v299;
      swift_slowDealloc();
    }
    else
    {
    }
    id v293 = [v24 managedObjectContext];
    if (!v293)
    {
      id v38 = v24;
      id v39 = v23;
      uint64_t v40 = v38;
      id v41 = v39;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v45 = (void *)swift_slowAlloc();
        *(void *)&long long v299 = swift_slowAlloc();
        id v306 = (id)v299;
        *(_DWORD *)uint64_t v44 = 138412546;
        id v304 = v40;
        uint64_t v46 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v45 = v40;

        *(_WORD *)(v44 + 12) = 2080;
        id v304 = (id)v298;
        sub_100094134(&qword_1009138F8);
        uint64_t v47 = Optional.descriptionOrNil.getter();
        id v304 = (id)sub_1000C51B8(v47, v48, (uint64_t *)&v306);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to update REMCDList with CKShare: managed object context is nil {list: %@, CKShare: %s}", (uint8_t *)v44, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return;
    }
    if (!v298)
    {
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Share stopped, clear sharing information and sharees", v51, 2u);
        swift_slowDealloc();
      }

      unint64_t v52 = (unint64_t)v291;
      [v291 setSharingStatus:0];
      [(id)v52 setSharedOwnerIdentifier:0];
      id v53 = [(id)v52 sharees];
      if (v53)
      {
        id v54 = v53;
        uint64_t v8 = sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
        sub_1000E4F40((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
        unint64_t rawValue = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        swift_bridgeObjectRetain();
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = 134217984;
          if ((rawValue & 0xC000000000000001) != 0) {
            uint64_t v58 = (void *)__CocoaSet.count.getter();
          }
          else {
            uint64_t v58 = *(void **)(rawValue + 16);
          }
          id v306 = v58;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Removing sharees {count: %ld}", v57, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
        {
LABEL_251:
          if (_CocoaArrayWrapper.endIndex.getter()) {
            sub_10032EEE8((unint64_t)_swiftEmptyArrayStorage, (uint64_t *)&unk_100914A00, (unint64_t *)&qword_100909AF8);
          }
        }
        Class v209 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [(id)v52 setSharees:v209];

        int64_t v298 = v8;
        if ((rawValue & 0xC000000000000001) != 0)
        {
          __CocoaSet.makeIterator()();
          Set.Iterator.init(_cocoa:)();
          unint64_t rawValue = (unint64_t)v306;
          *(void *)&long long v299 = v307;
          uint64_t v210 = v308;
          unint64_t v3 = v309;
          unint64_t v107 = v310;
        }
        else
        {
          unint64_t v3 = 0;
          uint64_t v211 = -1 << *(unsigned char *)(rawValue + 32);
          uint64_t v212 = *(void *)(rawValue + 56);
          *(void *)&long long v299 = rawValue + 56;
          uint64_t v210 = ~v211;
          uint64_t v213 = -v211;
          if (v213 < 64) {
            uint64_t v214 = ~(-1 << v213);
          }
          else {
            uint64_t v214 = -1;
          }
          unint64_t v107 = v214 & v212;
        }
        uint64_t v297 = v210;
        for (int64_t i = (unint64_t)(v210 + 64) >> 6; (rawValue & 0x8000000000000000) == 0; v107 = v8)
        {
          if (v107)
          {
            uint64_t v8 = (v107 - 1) & v107;
            unint64_t v219 = __clz(__rbit64(v107)) | (v3 << 6);
            unint64_t v218 = v3;
          }
          else
          {
            int64_t v220 = v3 + 1;
            if (__OFADD__(v3, 1))
            {
              __break(1u);
              goto LABEL_215;
            }
            if (v220 >= i) {
              goto LABEL_195;
            }
            unint64_t v221 = *(void *)(v299 + 8 * v220);
            unint64_t v218 = v3 + 1;
            if (!v221)
            {
              unint64_t v218 = v3 + 2;
              if ((uint64_t)(v3 + 2) >= i) {
                goto LABEL_195;
              }
              unint64_t v221 = *(void *)(v299 + 8 * v218);
              if (!v221)
              {
                unint64_t v218 = v3 + 3;
                if ((uint64_t)(v3 + 3) >= i) {
                  goto LABEL_195;
                }
                unint64_t v221 = *(void *)(v299 + 8 * v218);
                if (!v221)
                {
                  unint64_t v218 = v3 + 4;
                  if ((uint64_t)(v3 + 4) >= i) {
                    goto LABEL_195;
                  }
                  unint64_t v221 = *(void *)(v299 + 8 * v218);
                  if (!v221)
                  {
                    unint64_t v222 = v3 + 5;
                    while (i != v222)
                    {
                      unint64_t v221 = *(void *)(v299 + 8 * v222++);
                      if (v221)
                      {
                        unint64_t v218 = v222 - 1;
                        goto LABEL_191;
                      }
                    }
                    goto LABEL_195;
                  }
                }
              }
            }
LABEL_191:
            uint64_t v8 = (v221 - 1) & v221;
            unint64_t v219 = __clz(__rbit64(v221)) + (v218 << 6);
          }
          id v217 = *(id *)(*(void *)(rawValue + 48) + 8 * v219);
          if (!v217) {
            goto LABEL_195;
          }
LABEL_193:
          [v293 deleteObject:v217];

          unint64_t v3 = v218;
        }
        uint64_t v216 = __CocoaSet.Iterator.next()();
        if (v216)
        {
          unint64_t v303 = v216;
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v217 = v304;
          swift_unknownObjectRelease();
          unint64_t v218 = v3;
          uint64_t v8 = v107;
          if (v217) {
            goto LABEL_193;
          }
        }
LABEL_195:
        sub_1000C1AF8();
      }

      return;
    }
    id v33 = v23;
    id v34 = [v33 owner];
    id v290 = v33;
    id v35 = [v33 currentUserParticipant];
    unsigned __int8 v36 = v35;
    if (!v34)
    {
      if (!v35)
      {
LABEL_21:
        uint64_t v59 = 1;
LABEL_33:
        id v73 = v291;
        [v291 setSharingStatus:v59];
        goto LABEL_34;
      }
      goto LABEL_23;
    }
    if (!v35)
    {
      unsigned __int8 v36 = v34;
LABEL_23:

      goto LABEL_24;
    }
    sub_1000963CC(0, (unint64_t *)&qword_100912FF0);
    unint64_t rawValue = (unint64_t)v34;
    char v37 = static NSObject.== infix(_:_:)();

    if (v37) {
      goto LABEL_21;
    }
LABEL_24:
    id v60 = [v290 currentUserParticipant];
    if (!v60)
    {
      uint64_t v59 = 0;
      goto LABEL_33;
    }
    uint64_t v61 = v60;
    id v62 = [v60 acceptanceStatus];

    if (v62 == (id)1) {
      uint64_t v59 = 3;
    }
    else {
      uint64_t v59 = 0;
    }
    if (v62 != (id)2) {
      goto LABEL_33;
    }
    uint64_t v63 = v291;
    [v291 setSharingStatus:2];
    uint64_t v64 = v63;
    id v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      id v304 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      id v68 = [v64 ckIdentifier];
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v72 = v71;
      }
      else
      {
        uint64_t v70 = 0;
        uint64_t v72 = 0;
      }
      id v306 = v70;
      uint64_t v307 = v72;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v6 = (uint64_t)&v306;
      uint64_t v223 = Optional.descriptionOrNil.getter();
      unint64_t isUniquelyReferenced_nonNull_native = v224;
      swift_bridgeObjectRelease();
      id v306 = (id)sub_1000C51B8(v223, isUniquelyReferenced_nonNull_native, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v3 = v292;
    }
    else
    {
    }
    id v225 = [v64 storeControllerManagedObjectContext];
    uint64_t v8 = (uint64_t)&selRef_intersectsSet_;
    if (v225)
    {
      v226 = v225;
      [v225 setPendingPostSaveActions:((unint64_t)[v225 pendingPostSaveActions] | 2)];
    }
    uint64_t v227 = v64;
    unint64_t rawValue = Logger.logObject.getter();
    os_log_type_t v228 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)rawValue, v228))
    {
      v229 = (uint8_t *)swift_slowAlloc();
      id v304 = (id)swift_slowAlloc();
      *(_DWORD *)v229 = 136446210;
      id v230 = [v227 ckIdentifier];
      if (v230)
      {
        int v231 = v230;
        uint64_t v232 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v234 = v233;
      }
      else
      {
        uint64_t v232 = 0;
        id v234 = 0;
      }
      id v306 = v232;
      uint64_t v307 = v234;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v6 = (uint64_t)&v306;
      uint64_t v235 = Optional.descriptionOrNil.getter();
      unint64_t isUniquelyReferenced_nonNull_native = v236;
      swift_bridgeObjectRelease();
      id v306 = (id)sub_1000C51B8(v235, isUniquelyReferenced_nonNull_native, (uint64_t *)&v304);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)rawValue, v228, "REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}", v229, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v3 = v292;
      uint64_t v8 = (uint64_t)&selRef_intersectsSet_;
    }
    else
    {
    }
    id v237 = [v227 storeControllerManagedObjectContext];
    id v73 = v291;
    if (v237)
    {
      v238 = v237;
      [v237 setPendingPostSaveActions:[v237 pendingPostSaveActions] | 4];
    }
LABEL_34:
    unint64_t v303 = sub_1002EF9D0((uint64_t)_swiftEmptyArrayStorage, &qword_1009149F8);
    unint64_t v302 = (unint64_t)&_swiftEmptySetSingleton;
    id v74 = [v73 sharees];
    if (!v74) {
      break;
    }
    uint64_t v75 = v74;
    uint64_t v76 = (void *)sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
    uint64_t v1 = (void **)sub_1000E4F40((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
    uint64_t isa = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    id v296 = v76;
    if ((isa & 0xC000000000000001) != 0)
    {
      __CocoaSet.makeIterator()();
      Set.Iterator.init(_cocoa:)();
      uint64_t isa = (uint64_t)v304;
      *(void *)&long long v299 = v305[0];
      unint64_t v77 = (void *)v305[1];
      uint64_t v8 = v305[2];
      unint64_t rawValue = v305[3];
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v78 = -1 << *(unsigned char *)(isa + 32);
      uint64_t v79 = *(void *)(isa + 56);
      *(void *)&long long v299 = isa + 56;
      uint64_t v80 = ~v78;
      uint64_t v81 = -v78;
      if (v81 < 64) {
        uint64_t v82 = ~(-1 << v81);
      }
      else {
        uint64_t v82 = -1;
      }
      unint64_t rawValue = v82 & v79;
      unint64_t v77 = (void *)v80;
    }
    uint64_t v297 = isa & 0x7FFFFFFFFFFFFFFFLL;
    id v289 = v77;
    int64_t v298 = ((unint64_t)v77 + 64) >> 6;
    v295 = (char *)&type metadata for Swift.AnyObject + 8;
    while (1)
    {
      if (isa < 0)
      {
        uint64_t v85 = __CocoaSet.Iterator.next()();
        if (!v85) {
          goto LABEL_80;
        }
        v301 = (void *)v85;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v86 = v306;
        swift_unknownObjectRelease();
        uint64_t v6 = v8;
        uint64_t v83 = rawValue;
        if (!v86) {
          goto LABEL_80;
        }
      }
      else
      {
        if (rawValue)
        {
          uint64_t v83 = (rawValue - 1) & rawValue;
          unint64_t v84 = __clz(__rbit64(rawValue)) | (v8 << 6);
          uint64_t v6 = v8;
        }
        else
        {
          int64_t v87 = v8 + 1;
          if (__OFADD__(v8, 1)) {
            goto LABEL_212;
          }
          if (v87 >= v298) {
            goto LABEL_79;
          }
          unint64_t v88 = *(void *)(v299 + 8 * v87);
          uint64_t v6 = v8 + 1;
          if (!v88)
          {
            uint64_t v6 = v8 + 2;
            if (v8 + 2 >= v298) {
              goto LABEL_79;
            }
            unint64_t v88 = *(void *)(v299 + 8 * v6);
            if (!v88)
            {
              uint64_t v6 = v8 + 3;
              if (v8 + 3 >= v298) {
                goto LABEL_79;
              }
              unint64_t v88 = *(void *)(v299 + 8 * v6);
              if (!v88)
              {
                uint64_t v6 = v8 + 4;
                if (v8 + 4 >= v298) {
                  goto LABEL_79;
                }
                unint64_t v88 = *(void *)(v299 + 8 * v6);
                if (!v88)
                {
                  uint64_t v89 = v8 + 5;
                  while (v298 != v89)
                  {
                    unint64_t v88 = *(void *)(v299 + 8 * v89++);
                    if (v88)
                    {
                      uint64_t v6 = v89 - 1;
                      goto LABEL_63;
                    }
                  }
LABEL_79:
                  unint64_t rawValue = 0;
LABEL_80:
                  sub_1000C1AF8();
                  unint64_t v3 = v292;
                  goto LABEL_81;
                }
              }
            }
          }
LABEL_63:
          uint64_t v83 = (v88 - 1) & v88;
          unint64_t v84 = __clz(__rbit64(v88)) + (v6 << 6);
        }
        id v86 = *(id *)(*(void *)(isa + 48) + 8 * v84);
        if (!v86) {
          goto LABEL_80;
        }
      }
      id v90 = [v86 ckIdentifier];
      if (!v90)
      {
        uint64_t v1 = (void **)&v302;
        sub_100321010(&v306, v86, (unint64_t *)&qword_100909AF8, (uint64_t)off_1008AA498, (uint64_t *)&unk_100914A00);

        goto LABEL_43;
      }
      unint64_t v91 = v90;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;

      uint64_t v1 = (void **)v303;
      unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v306 = v1;
      unint64_t v303 = 0x8000000000000000;
      unint64_t v3 = sub_1001806F8(v8, v93);
      id v95 = v1[2];
      BOOL v96 = (v94 & 1) == 0;
      uint64_t v97 = (uint64_t)v95 + v96;
      if (__OFADD__(v95, v96)) {
        break;
      }
      char v98 = v94;
      if ((uint64_t)v1[3] >= v97)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v1 = (void **)v306;
          if ((v94 & 1) == 0) {
            goto LABEL_70;
          }
        }
        else
        {
          sub_10031D270(&qword_1009149F8);
          uint64_t v1 = (void **)v306;
          if ((v98 & 1) == 0) {
            goto LABEL_70;
          }
        }
      }
      else
      {
        sub_100316B84(v97, isUniquelyReferenced_nonNull_native, &qword_1009149F8);
        unint64_t v99 = sub_1001806F8(v8, v93);
        if ((v98 & 1) != (v100 & 1)) {
          goto LABEL_256;
        }
        unint64_t v3 = v99;
        uint64_t v1 = (void **)v306;
        if ((v98 & 1) == 0)
        {
LABEL_70:
          v1[(v3 >> 6) + 8] = (void *)((unint64_t)v1[(v3 >> 6) + 8] | (1 << v3));
          uint64_t v101 = (uint64_t *)((char *)v1[6] + 16 * v3);
          *uint64_t v101 = v8;
          v101[1] = v93;
          *((void *)v1[7] + v3) = v86;
          Class v102 = (char *)v1[2];
          BOOL v103 = __OFADD__(v102, 1);
          id v104 = v102 + 1;
          if (v103) {
            goto LABEL_211;
          }
          v1[2] = v104;
          swift_bridgeObjectRetain();
          goto LABEL_75;
        }
      }
      id v105 = (char *)v1[7];
      v3 *= 8;

      *(void *)&v105[v3] = v86;
LABEL_75:
      unint64_t v303 = (unint64_t)v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_43:
      uint64_t v8 = v6;
      unint64_t rawValue = v83;
    }
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
  }
LABEL_81:
  id v289 = [objc_allocWithZone((Class)CNContactStore) init];
  id v106 = [v290 participants];
  sub_1000963CC(0, (unint64_t *)&qword_100912FF0);
  unint64_t v107 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v107 >> 62))
  {
    uint64_t v108 = *(void *)((v107 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v108) {
      goto LABEL_83;
    }
LABEL_216:
    swift_bridgeObjectRelease();
    uint64_t v239 = swift_bridgeObjectRetain();
    sub_1002F5FA4(v239);
    unint64_t v52 = v302;
    if ((v302 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v240 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v240)
      {
        __CocoaSet.makeIterator()();
        unint64_t rawValue = sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
        sub_1000E4F40((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
        Set.Iterator.init(_cocoa:)();
        unint64_t v52 = (unint64_t)v306;
        id v241 = v307;
        int64_t v242 = v308;
        unint64_t v243 = v309;
        unint64_t v244 = v310;
        goto LABEL_224;
      }
LABEL_247:

      swift_bridgeObjectRelease();
    }
    else
    {
      if (!*(void *)(v302 + 16)) {
        goto LABEL_247;
      }
      unint64_t v243 = 0;
      uint64_t v245 = -1 << *(unsigned char *)(v302 + 32);
      id v241 = (char *)(v302 + 56);
      int64_t v242 = ~v245;
      uint64_t v246 = -v245;
      if (v246 < 64) {
        uint64_t v247 = ~(-1 << v246);
      }
      else {
        uint64_t v247 = -1;
      }
      unint64_t v244 = v247 & *(void *)(v302 + 56);
LABEL_224:
      int64_t v298 = v242;
      uint64_t v8 = (unint64_t)(v242 + 64) >> 6;
      *(void *)&long long v299 = (char *)&type metadata for Swift.AnyObject + 8;
      if ((v52 & 0x8000000000000000) == 0) {
        goto LABEL_228;
      }
      while (1)
      {
        uint64_t v248 = __CocoaSet.Iterator.next()();
        if (!v248) {
          break;
        }
        uint64_t v300 = v248;
        sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v249 = v301;
        swift_unknownObjectRelease();
        unint64_t rawValue = v243;
        uint64_t v250 = v244;
        if (!v249) {
          break;
        }
        while (1)
        {
          [v293 deleteObject:v249];

          unint64_t v243 = rawValue;
          unint64_t v244 = v250;
          if ((v52 & 0x8000000000000000) != 0) {
            break;
          }
LABEL_228:
          if (v244)
          {
            uint64_t v250 = (v244 - 1) & v244;
            unint64_t v251 = __clz(__rbit64(v244)) | (v243 << 6);
            unint64_t rawValue = v243;
          }
          else
          {
            uint64_t v252 = v243 + 1;
            if (__OFADD__(v243, 1))
            {
              __break(1u);
              goto LABEL_251;
            }
            if (v252 >= v8) {
              goto LABEL_248;
            }
            unint64_t v253 = *(void *)&v241[8 * v252];
            unint64_t rawValue = v243 + 1;
            if (!v253)
            {
              unint64_t rawValue = v243 + 2;
              if ((uint64_t)(v243 + 2) >= v8) {
                goto LABEL_248;
              }
              unint64_t v253 = *(void *)&v241[8 * rawValue];
              if (!v253)
              {
                unint64_t rawValue = v243 + 3;
                if ((uint64_t)(v243 + 3) >= v8) {
                  goto LABEL_248;
                }
                unint64_t v253 = *(void *)&v241[8 * rawValue];
                if (!v253)
                {
                  unint64_t rawValue = v243 + 4;
                  if ((uint64_t)(v243 + 4) >= v8) {
                    goto LABEL_248;
                  }
                  unint64_t v253 = *(void *)&v241[8 * rawValue];
                  if (!v253)
                  {
                    unint64_t v254 = v243 + 5;
                    while (v8 != v254)
                    {
                      unint64_t v253 = *(void *)&v241[8 * v254++];
                      if (v253)
                      {
                        unint64_t rawValue = v254 - 1;
                        goto LABEL_243;
                      }
                    }
                    goto LABEL_248;
                  }
                }
              }
            }
LABEL_243:
            uint64_t v250 = (v253 - 1) & v253;
            unint64_t v251 = __clz(__rbit64(v253)) + (rawValue << 6);
          }
          id v249 = *(id *)(*(void *)(v52 + 48) + 8 * v251);
          if (!v249) {
            goto LABEL_248;
          }
        }
      }
LABEL_248:
      sub_1000C1AF8();
    }
    swift_bridgeObjectRelease();
    return;
  }
LABEL_215:
  swift_bridgeObjectRetain();
  uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v108) {
    goto LABEL_216;
  }
LABEL_83:
  unint64_t v288 = v107 & 0xC000000000000001;
  id v274 = (unsigned int (**)(char *, uint64_t, unint64_t))((char *)v294._rawValue + 48);
  v266 = (void (**)(char *, unint64_t))((char *)v294._rawValue + 8);
  id v267 = (void (**)(char *, char *, uint64_t))(v286 + 32);
  unint64_t v268 = (void (**)(uint64_t, void, uint64_t, unint64_t))(v286 + 56);
  uint64_t v263 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))(v286 + 48);
  v261 = (void (**)(char *, uint64_t))(v286 + 8);
  v264 = (void (**)(char *, char *, unint64_t))((char *)v294._rawValue + 32);
  v285 = CNContactGivenNameKey;
  v271 = (char *)v294._rawValue + 56;
  uint64_t v109 = 4;
  v284 = CNContactMiddleNameKey;
  v283 = CNContactFamilyNameKey;
  uint64_t v282 = CNContactNamePrefixKey;
  uint64_t v281 = CNContactNameSuffixKey;
  uint64_t v280 = CNContactNicknameKey;
  uint64_t v279 = CNContactPhoneNumbersKey;
  uint64_t v278 = CNContactEmailAddressesKey;
  long long v277 = xmmword_100786190;
  long long v299 = xmmword_100776E40;
  uint64_t v286 = v108;
  unint64_t v287 = v107;
  unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)CNContactNicknameKey;
  uint64_t v6 = (uint64_t)CNContactPhoneNumbersKey;
  while (2)
  {
    uint64_t v1 = (void **)(v109 - 4);
    if (v288) {
      id v110 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v110 = *(id *)(v107 + 8 * v109);
    }
    uint64_t isa = (uint64_t)v110;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_210;
    }
    uint64_t v297 = v109 - 3;
    uint64_t v111 = CKShareParticipant.participantID.getter();
    uint64_t v113 = v112;
    NSString v114 = sub_1002F000C(v111, v112, v303);
    int64_t v298 = v109;
    id v296 = (id)isa;
    if (v114)
    {
      uint64_t v115 = v114;
      uint64_t v116 = (char *)sub_10030CC10(v111, v113, (void (*)(unint64_t, uint64_t))sub_1002C2184, &qword_1009149F8);
      swift_bridgeObjectRelease();
      v295 = v115;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
      id v117 = [(id)swift_getObjCClassFromMetadata() entity];
      id v118 = objc_allocWithZone((Class)REMCDSharee);
      id v119 = [v118 initWithEntity:v117 insertIntoManagedObjectContext:v293];

      id v120 = v119;
      CKShareParticipant.participantID.getter();
      NSString v121 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v120 setCkIdentifier:v121];

      id v122 = v120;
      CKShareParticipant.participantID.getter();
      v123 = v273;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      Class v124 = 0;
      if ((*v274)(v123, 1, v3) != 1)
      {
        id v125 = v273;
        Class v124 = UUID._bridgeToObjectiveC()().super.isa;
        (*v266)(v125, v3);
      }
      [v122 setIdentifier:v124];

      uint64_t v116 = (char *)v122;
      id v126 = v291;
      id v127 = [v291 account];
      [v116 setAccount:v127];

      [v126 addShareesObject:v116];
      v295 = v116;
    }

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v128 = swift_allocObject();
    *(_OWORD *)(v128 + 16) = v277;
    uint64_t v129 = v285;
    uint64_t v130 = v284;
    *(void *)(v128 + 32) = v285;
    *(void *)(v128 + 40) = v130;
    uint64_t v131 = v283;
    v132 = v282;
    *(void *)(v128 + 48) = v283;
    *(void *)(v128 + 56) = v132;
    uint64_t v133 = v281;
    *(void *)(v128 + 64) = v281;
    *(void *)(v128 + 72) = CNContactNicknameKey;
    uint64_t v134 = v278;
    *(void *)(v128 + 80) = CNContactPhoneNumbersKey;
    *(void *)(v128 + 88) = v134;
    id v306 = (id)v128;
    specialized Array._endMutation()();
    v294._unint64_t rawValue = v306;
    sub_100094134(&qword_10090F608);
    uint64_t v135 = swift_allocObject();
    *(_OWORD *)(v135 + 16) = v299;
    id v136 = v129;
    uint64_t v137 = v130;
    uint64_t v138 = v131;
    uint64_t v139 = v132;
    uint64_t v140 = v133;
    uint64_t v141 = CNContactNicknameKey;
    uint64_t v142 = CNContactPhoneNumbersKey;
    long long v143 = v134;
    uint64_t v8 = (uint64_t)v296;
    id v144 = [v296 userIdentity];
    id v145 = [v144 lookupInfo];

    if (v145)
    {
      id v146 = [v145 emailAddress];

      if (v146)
      {
        uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v149 = v148;
      }
      else
      {
        uint64_t v147 = 0;
        uint64_t v149 = 0;
      }
      *(void *)(v135 + 32) = v147;
      *(void *)(v135 + 40) = v149;
    }
    else
    {
      *(void *)(v135 + 32) = 0;
      *(void *)(v135 + 40) = 0;
    }
    uint64_t v150 = swift_allocObject();
    *(_OWORD *)(v150 + 16) = v299;
    id v151 = [(id)v8 userIdentity];
    id v152 = [v151 lookupInfo];

    if (v152)
    {
      id v153 = [v152 phoneNumber];

      if (v153)
      {
        uint64_t v154 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v156 = v155;
      }
      else
      {
        uint64_t v154 = 0;
        uint64_t v156 = 0;
      }
      *(void *)(v150 + 32) = v154;
      *(void *)(v150 + 40) = v156;
    }
    else
    {
      *(void *)(v150 + 32) = 0;
      *(void *)(v150 + 40) = 0;
    }
    unint64_t rawValue = (unint64_t)v294._rawValue;
    v157 = (void *)CNContactStore.contactFrom(emailAddresses:phoneNumbers:keysToFetch:)((Swift::OpaquePointer)v135, (Swift::OpaquePointer)v150, v294);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v157)
    {
      id v171 = [(id)v8 userIdentity];
      id v172 = [v171 nameComponents];

      unint64_t v3 = v292;
      unint64_t v159 = v295;
      if (v172)
      {
        id v173 = v265;
        static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)();

        v174 = *v267;
        uint64_t v175 = (uint64_t)v270;
        id v176 = v173;
        unint64_t rawValue = v275;
        (*v267)(v270, v176, v275);
        (*v268)(v175, 0, 1, rawValue);
        if ((*v263)(v175, 1, rawValue) != 1)
        {
          unint64_t rawValue = (unint64_t)v276;
          v174(v276, (char *)v175, v275);
          PersonNameComponents.givenName.getter();
          if (v177)
          {
            NSString v178 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v178 = 0;
          }
          [v159 setFirstName:v178];

          PersonNameComponents.middleName.getter();
          if (v179)
          {
            NSString v180 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v180 = 0;
          }
          [v159 setMiddleName:v180];

          PersonNameComponents.familyName.getter();
          if (v181)
          {
            NSString v182 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v182 = 0;
          }
          [v159 setLastName:v182];

          PersonNameComponents.namePrefix.getter();
          if (v183)
          {
            NSString v184 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v184 = 0;
          }
          [v159 setNamePrefix:v184];

          PersonNameComponents.nameSuffix.getter();
          if (v185)
          {
            NSString v186 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v186 = 0;
          }
          [v159 setNameSuffix:v186];

          PersonNameComponents.nickname.getter();
          if (v187)
          {
            NSString v188 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          else
          {
            NSString v188 = 0;
          }
          [v159 setNickname:v188];

          (*v261)(v276, v275);
          goto LABEL_145;
        }
      }
      else
      {
        uint64_t v175 = (uint64_t)v270;
        (*v268)((uint64_t)v270, 1, 1, v275);
      }
      sub_1000966BC(v175, &qword_1009138F0);
      goto LABEL_145;
    }
    NSString v158 = [v157 givenName];
    unint64_t v3 = v292;
    unint64_t v159 = v295;
    if (!v158)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v160;
      NSString v158 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setFirstName:v158];

    NSString v161 = [v157 middleName];
    if (!v161)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v162;
      NSString v161 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setMiddleName:v161];

    NSString v163 = [v157 familyName];
    if (!v163)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v164;
      NSString v163 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setLastName:v163];

    NSString v165 = [v157 namePrefix];
    if (!v165)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v166;
      NSString v165 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setNamePrefix:v165];

    NSString v167 = [v157 nameSuffix];
    if (!v167)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v168;
      NSString v167 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setNameSuffix:v167];

    NSString v169 = [v157 nickname];
    if (!v169)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v170;
      NSString v169 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v159 setNickname:v169];

LABEL_145:
    id v189 = [(id)v8 userIdentity];
    id v190 = [v189 lookupInfo];

    if (v190)
    {
      id v191 = [v190 emailAddress];

      if (v191)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t rawValue = v192;

        NSString v193 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v194 = [v193 rem_addingMailto];
        goto LABEL_151;
      }
    }
    id v195 = [(id)v8 userIdentity];
    id v196 = [v195 lookupInfo];

    if (v196
      && (id v197 = [v196 phoneNumber], v196, v197))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t rawValue = v198;

      NSString v193 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v194 = [v193 rem_addingTel];
LABEL_151:
      NSString v199 = v194;

      if (!v199)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v199 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v159 setAddress:v199];
    }
    else
    {
      [v159 setAddress:0];
    }
    id v200 = [(id)v8 permission];
    if ((unint64_t)v200 >= 4)
    {
      (*(void (**)(char *, uint64_t, unint64_t))(v258 + 16))(v257, v262, v259);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v255 = "unknown permission";
      uint64_t v256 = 18;
      goto LABEL_255;
    }
    [v159 setAccessLevel:(0x2000100000000uLL >> (16 * v200)) & 3];
    id v201 = [(id)v8 acceptanceStatus];
    if ((unint64_t)v201 < 4)
    {
      [v159 setStatus:(0x3000100050004uLL >> (16 * v201)) & 7];
      sub_1000963CC(0, (unint64_t *)&qword_10090C120);
      id v202 = [v290 owner];
      char v203 = static NSObject.== infix(_:_:)();

      if (v203)
      {
        unsigned int v204 = (objc_class *)[v159 remObjectID];
        Class v205 = v204;
        if (v204)
        {
          id v206 = [(objc_class *)v204 uuid];

          id v207 = v269;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v208 = v272;
          (*v264)(v272, v207, v3);
          (*(void (**)(char *, void, uint64_t, unint64_t))v271)(v208, 0, 1, v3);
          if ((*v274)(v208, 1, v3) == 1)
          {
            Class v205 = 0;
          }
          else
          {
            Class v205 = UUID._bridgeToObjectiveC()().super.isa;
            (*v266)(v208, v3);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, unint64_t))v271)(v272, 1, 1, v3);
        }
        [v291 setSharedOwnerIdentifier:v205];

        uint64_t v8 = (uint64_t)v205;
      }
      unint64_t v107 = v287;

      uint64_t v109 = v298 + 1;
      if (v297 == v286) {
        goto LABEL_216;
      }
      continue;
    }
    break;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t))(v258 + 16))(v260, v262, v259);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v255 = "unknown acceptanceStatus";
  uint64_t v256 = 24;
LABEL_255:
  sub_10052ECB8((uint64_t)v255, v256, 2);
  __break(1u);
LABEL_256:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void __swiftcall REMCDList.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
  unint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)&v73 - v10;
  id v12 = [v3 managedObjectContext:v9];
  if (!v12) {
    return;
  }
  uint64_t v13 = v12;
  if ([v3 isConcealed])
  {
    if (qword_1009072C8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009138D0);
    id v15 = v3;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v80 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      id v19 = [v15 remObjectID];
      if (v19)
      {
        uint64_t v20 = v19;
        id v21 = [v19 description];

        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;
      }
      else
      {
        uint64_t v22 = 7104878;
        unint64_t v24 = 0xE300000000000000;
      }
      uint64_t v79 = sub_1000C51B8(v22, v24, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      unint64_t v35 = sub_1004BA150();
      uint64_t v79 = sub_1000C51B8(v35, v36, (uint64_t *)&v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed list, race condition? {self: %{public}s %{public}s}", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_17;
  }
  if ([v3 isGroup]) {
    goto LABEL_17;
  }
  if ([v3 isShared]) {
    goto LABEL_17;
  }
  id v25 = [v3 name];
  if (!v25) {
    goto LABEL_17;
  }
  os_log_type_t v26 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  uint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v31 = [v3 account];
  if (v31)
  {
    unint64_t v32 = v31;
    id v33 = [v31 identifier];

    if (v33)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v7, 0, 1, v34);
    }
    else
    {
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v7, 1, 1, v38);
    }
    sub_100096408((uint64_t)v7, (uint64_t)v11, (uint64_t *)&unk_100909E50);
  }
  else
  {
    uint64_t v37 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v11, 1, 1, v37);
  }
  sub_10032E0A8(KeyPath, (uint64_t)v11, (uint64_t *)&unk_100909E50, &qword_100913A10);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v80[2] >= v80[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v39 = swift_getKeyPath();
  sub_100331A40(v39, v27, v29, 6);
  swift_release();
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v80[2] >= v80[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_1002F51D0();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v80[2] >= v80[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v79 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  id v40 = (id)NSPredicate.init(format:_:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  id v41 = *(id *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v41 >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v42 = sub_1002F5300((uint64_t)v80);
  if (v42)
  {
    id v41 = v42;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (with)
  {
    os_log_type_t v43 = with;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    id v41 = *(id *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v41 >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v44 = objc_allocWithZone((Class)NSCompoundPredicate);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v46 = [v44 initWithType:1 subpredicates:isa];

  swift_getObjectType();
  id v47 = [swift_getObjCClassFromMetadata() ic_objectsMatchingPredicate:v46 context:v13];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v48 >> 62))
  {
    uint64_t v49 = *(void **)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v49) {
      goto LABEL_40;
    }
LABEL_56:

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_56;
  }
LABEL_40:
  if ((v48 & 0xC000000000000001) != 0)
  {
    id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_43;
  }
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v50 = *(id *)(v48 + 32);
LABEL_43:
    id v41 = v50;
    swift_bridgeObjectRelease();
    self;
    uint64_t v51 = swift_dynamicCastObjCClass();
    if (v51)
    {
      uint64_t v49 = (void *)v51;
      if (qword_1009072C8 == -1) {
        goto LABEL_45;
      }
      goto LABEL_59;
    }

LABEL_17:
    return;
  }
  __break(1u);
LABEL_59:
  swift_once();
LABEL_45:
  uint64_t v52 = type metadata accessor for Logger();
  sub_10008E2DC(v52, (uint64_t)qword_1009138D0);
  id v53 = v3;
  id v54 = v41;
  id v55 = v53;
  id v56 = v54;
  uint64_t v57 = Logger.logObject.getter();
  int v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, (os_log_type_t)v58))
  {
    int v75 = v58;
    id v76 = v40;
    uint64_t v59 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v78 = v73;
    *(_DWORD *)uint64_t v59 = 136446466;
    id v60 = [v55 remObjectID:v73];
    if (v60)
    {
      uint64_t v61 = v60;
      id v62 = [v60 description];

      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v65 = v64;
    }
    else
    {
      unint64_t v65 = 0xE300000000000000;
      uint64_t v63 = 7104878;
    }
    id v74 = v56;
    uint64_t v77 = sub_1000C51B8(v63, v65, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2082;
    id v66 = [v49 remObjectID];
    if (v66)
    {
      uint64_t v67 = v66;
      id v68 = [v66 description];

      uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v71 = v70;
    }
    else
    {
      unint64_t v71 = 0xE300000000000000;
      uint64_t v69 = 7104878;
    }
    uint64_t v77 = sub_1000C51B8(v69, v71, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v72 = v74;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v75, "MERGE.LOCAL: ...REMCDList.existingLocalObjectToMerge found a matching local REMCDList! {self: %{public}s, matched: %{public}s}", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Bool __swiftcall REMCDList.merge(withLocalObject:)(REMCDObject *withLocalObject)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)type metadata accessor for UUID();
  uint64_t v338 = *(v4 - 1);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v314 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v345 = (char *)v314 - v8;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v314 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v12 - 8);
  uint64_t v339 = (char *)v314 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v314 - v15;
  __chkstk_darwin(v17);
  id v19 = (char *)v314 - v18;
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  unint64_t v23 = (char *)v314 - v22;
  id v346 = v2;
  id v24 = [v2 managedObjectContext:v21];
  id v344 = v24;
  if (!v24) {
    return (char)v24;
  }
  v342 = v6;
  self;
  uint64_t v25 = swift_dynamicCastObjCClass();
  if (!v25)
  {
LABEL_59:

    goto LABEL_60;
  }
  os_log_type_t v26 = (void *)v25;
  uint64_t v27 = withLocalObject;
  if ([v26 isConcealed])
  {
    if (qword_1009072C8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_1009138D0);
    uint64_t v29 = v27;
    id v30 = v346;
    id v31 = v29;
    id v32 = v30;
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = 7104878;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v352 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136446722;
      id v37 = [v32 remObjectID];
      if (v37)
      {
        uint64_t v38 = v37;
        id v39 = [v37 description];

        uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;
      }
      else
      {
        unint64_t v42 = 0xE300000000000000;
        uint64_t v40 = 7104878;
      }
      uint64_t v350 = sub_1000C51B8(v40, v42, &v352);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v101 = [(REMCDObject *)v31 remObjectID];
      if (v101)
      {
        Class v102 = v101;
        id v103 = [(REMObjectID *)v101 description];

        uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v105 = v104;
      }
      else
      {
        unint64_t v105 = 0xE300000000000000;
      }
      uint64_t v350 = sub_1000C51B8(v35, v105, &v352);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 22) = 2082;
      unint64_t v106 = sub_1004BA150();
      uint64_t v350 = sub_1000C51B8(v106, v107, &v352);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "MERGE.LOCAL: ...Should not attempt to merge with a concealed local list, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_59;
    }

LABEL_50:
LABEL_60:
    LOBYTE(v24) = 0;
    return (char)v24;
  }
  id v43 = [v26 identifier];
  if (v43)
  {
    id v44 = v43;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, void *))(v338 + 56);
    id v46 = v23;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, void *))(v338 + 56);
    id v46 = v23;
    uint64_t v47 = 1;
  }
  v334 = v45;
  v45(v46, v47, 1, v4);
  id v48 = [v346 identifier];
  if (v48)
  {
    uint64_t v49 = v48;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v50 = 0;
  }
  else
  {
    uint64_t v50 = 1;
  }
  uint64_t v51 = v338;
  uint64_t v333 = v338 + 56;
  v334(v19, v50, 1, v4);
  uint64_t v52 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_1000BF710((uint64_t)v23, (uint64_t)v11, (uint64_t *)&unk_100909E50);
  sub_1000BF710((uint64_t)v19, v52, (uint64_t *)&unk_100909E50);
  id v55 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v51 + 48);
  uint64_t v54 = v51 + 48;
  id v53 = v55;
  unsigned int v56 = v55((uint64_t)v11, 1, v4);
  v341 = v4;
  if (v56 == 1)
  {
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
    if (v53(v52, 1, v4) == 1)
    {
      sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
      id v57 = v346;
LABEL_35:
      if (qword_1009072C8 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      sub_10008E2DC(v73, (uint64_t)qword_1009138D0);
      id v74 = v27;
      id v75 = v57;
      id v31 = v74;
      id v76 = v75;
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = 7104878;
        uint64_t v80 = swift_slowAlloc();
        uint64_t v352 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136446466;
        id v81 = [v76 remObjectID];
        if (v81)
        {
          uint64_t v82 = v81;
          id v83 = [v81 description];

          uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v86 = v85;
        }
        else
        {
          unint64_t v86 = 0xE300000000000000;
          uint64_t v84 = 7104878;
        }
        uint64_t v350 = sub_1000C51B8(v84, v86, &v352);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v80 + 12) = 2082;
        uint64_t v108 = [(REMCDObject *)v31 remObjectID];
        if (v108)
        {
          uint64_t v109 = v108;
          id v110 = [(REMObjectID *)v108 description];

          uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v112 = v111;
        }
        else
        {
          unint64_t v112 = 0xE300000000000000;
        }
        uint64_t v350 = sub_1000C51B8(v79, v112, &v352);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "MERGE.LOCAL: ...this REMCDList should not try to merge with itself! {self: %{public}s, local: %{public}s}", (uint8_t *)v80, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_59;
      }

      goto LABEL_50;
    }
    goto LABEL_21;
  }
  v343 = v27;
  sub_1000BF710((uint64_t)v11, (uint64_t)v16, (uint64_t *)&unk_100909E50);
  uint64_t v58 = v54;
  uint64_t v330 = v53;
  if (v53(v52, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
    (*(void (**)(char *, void *))(v338 + 8))(v16, v4);
    id v53 = v330;
    uint64_t v27 = v343;
LABEL_21:
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_10090B4C0);
    id v57 = v346;
    goto LABEL_22;
  }
  uint64_t v70 = v338;
  unint64_t v71 = v345;
  (*(void (**)(char *, uint64_t, void *))(v338 + 32))(v345, v52, v4);
  sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v72 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v4 = *(void **)(v70 + 8);
  ((void (*)(char *, void *))v4)(v71, v341);
  sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
  sub_1000966BC((uint64_t)v23, (uint64_t *)&unk_100909E50);
  ((void (*)(char *, void *))v4)(v16, v341);
  sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
  id v57 = v346;
  uint64_t v54 = v58;
  id v53 = v330;
  uint64_t v27 = v343;
  if (v72) {
    goto LABEL_35;
  }
LABEL_22:
  v336 = (char **)v26;
  uint64_t v59 = &selRef_includeReminderTitles;
  id v60 = [v57 reminders];
  if (v60)
  {
    uint64_t v61 = v60;
    uint64_t v330 = v53;
    uint64_t v327 = v54;
    uint64_t v352 = (uint64_t)v60;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t v62 = sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    uint64_t v63 = sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    uint64_t v318 = v62;
    uint64_t v317 = v63;
    unint64_t v64 = Sequence.elements<A>(ofType:)();

    sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v65 = swift_allocObject();
    *(_OWORD *)(v65 + 16) = xmmword_100776E40;
    unint64_t v66 = (unint64_t)off_1008AA460;
    *(void *)(v65 + 56) = sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    *(void *)(v65 + 64) = sub_1000E4F40((unint64_t *)&unk_100913910, (unint64_t *)&qword_100909AD0);
    *(void *)(v65 + 32) = v336;
    v323 = v27;
    id v340 = (id)NSPredicate.init(format:_:)();
    int v349 = &_swiftEmptySetSingleton;
    uint64_t v352 = (uint64_t)_swiftEmptyArrayStorage;
    if (v64 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v67) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v67 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v67)
      {
LABEL_25:
        if (v67 < 1)
        {
          __break(1u);
          goto LABEL_160;
        }
        uint64_t v68 = 0;
        uint64_t v27 = (REMCDObject *)(v64 & 0xC000000000000001);
        do
        {
          if (v27) {
            id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v69 = *(id *)(v64 + 8 * v68 + 32);
          }
          unint64_t v66 = (unint64_t)v69;
          if ([v69 isConcealed])
          {
          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v4 = *(void **)(v352 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          ++v68;
        }
        while (v67 != v68);
        swift_bridgeObjectRelease();
        uint64_t v87 = v352;
LABEL_67:
        if (v87 < 0 || (v87 & 0x4000000000000000) != 0)
        {
          swift_retain();
          uint64_t v115 = _CocoaArrayWrapper.endIndex.getter();
          if (v115)
          {
LABEL_70:
            if (v115 >= 1)
            {
              uint64_t v116 = 0;
              uint64_t v67 = 0;
              do
              {
                if ((v87 & 0xC000000000000001) != 0) {
                  id v117 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v117 = *(id *)(v87 + 8 * v116 + 32);
                }
                id v118 = v117;
                ++v116;
                uint64_t v352 = (uint64_t)v117;
                sub_10030602C((void **)&v352, (uint64_t)v340, v57, (uint64_t)&v349);
              }
              while (v115 != v116);
LABEL_78:
              swift_release_n();
              id v119 = [v57 ckZoneOwnerName];
              if (v119)
              {

                uint64_t v352 = 0;
                unint64_t v353 = 0xE000000000000000;
                _StringGuts.grow(_:)(171);
                v120._countAndFlagsBits = 0xD0000000000000A8;
                v120._object = (void *)0x80000001007D1A30;
                String.append(_:)(v120);
                id v121 = [v57 remObjectID];
                if (v121)
                {
                  id v122 = v121;
                  id v123 = [v121 description];

                  uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  id v126 = v125;
                }
                else
                {
                  id v126 = (void *)0xE300000000000000;
                  uint64_t v124 = 7104878;
                }
                v127._countAndFlagsBits = v124;
                v127._object = v126;
                String.append(_:)(v127);
                swift_bridgeObjectRelease();
                v128._countAndFlagsBits = 125;
                v128._object = (void *)0xE100000000000000;
                String.append(_:)(v128);
                uint64_t v129 = self;
                NSString v130 = String._bridgeToObjectiveC()();
                NSString v131 = String._bridgeToObjectiveC()();
                NSString v132 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v129 faultAndPromptToFileRadarWithICTap2RadarType:4 title:v130 description:v131 logMessage:v132];
              }
              unint64_t v348 = (unint64_t)_swiftEmptyArrayStorage;
              uint64_t v59 = v336;
              id v133 = [v336 reminders];
              uint64_t v4 = v341;
              if (!v133)
              {
                v238 = _swiftEmptyArrayStorage;
                goto LABEL_164;
              }
              uint64_t v134 = v133;
              uint64_t v352 = (uint64_t)v133;
              unint64_t v66 = Sequence.elements<A>(ofType:)();

              if (!(v66 >> 62))
              {
                uint64_t v136 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
                id v137 = v339;
                if (v136)
                {
LABEL_86:
                  v314[1] = v67;
                  if (v136 >= 1)
                  {
                    unint64_t v138 = 0;
                    unint64_t v139 = v66 & 0xC000000000000001;
                    unint64_t v328 = v66 + 32;
                    uint64_t v140 = (void (**)(id, char *, void *))(v338 + 32);
                    uint64_t v335 = v338 + 16;
                    v337 = (void (**)(char *, void *))(v338 + 8);
                    v319 = &v351;
                    uint64_t v324 = _swiftEmptyArrayStorage;
                    *(void *)&long long v135 = 136446466;
                    long long v322 = v135;
                    unint64_t v321 = 0x80000001007D1A10;
                    v320 = (char *)&type metadata for Any + 8;
                    *(void *)&long long v135 = 136446722;
                    long long v315 = v135;
                    unint64_t v329 = v66;
                    uint64_t v332 = v136;
                    unint64_t v326 = v66 & 0xC000000000000001;
                    v325 = (void (**)(id, char *, void *))(v338 + 32);
                    while (1)
                    {
                      id v141 = v139
                           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                           : *(id *)(v328 + 8 * v138);
                      id v142 = v141;
                      unsigned int v143 = [v141 isConcealed];
                      v343 = (REMCDObject *)v138;
                      if (v143) {
                        break;
                      }
                      id v155 = [v142 identifier];
                      if (v155)
                      {
                        uint64_t v156 = v155;
                        id v331 = v142;
                        v157 = v345;
                        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                        NSString v158 = (void (*)(char *, id, void *))*v140;
                        (*v140)(v137, v157, v4);
                        v334((char *)v137, 0, 1, v4);
                        if (v330((uint64_t)v137, 1, v4) != 1)
                        {
                          v158(v342, v137, v4);
                          unint64_t v159 = v349;
                          if (v349[2])
                          {
                            sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
                            swift_bridgeObjectRetain();
                            uint64_t v160 = dispatch thunk of Hashable._rawHashValue(seed:)();
                            uint64_t v161 = -1 << *((unsigned char *)v159 + 32);
                            unint64_t v162 = v160 & ~v161;
                            if ((*(void *)((char *)v159 + ((v162 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v162))
                            {
                              uint64_t v163 = ~v161;
                              uint64_t v164 = *(void *)(v338 + 72);
                              NSString v165 = *(void (**)(char *, unint64_t, void *))(v338 + 16);
                              while (1)
                              {
                                unint64_t v166 = v345;
                                NSString v167 = v341;
                                v165(v345, v159[6] + v164 * v162, v341);
                                sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
                                char v168 = dispatch thunk of static Equatable.== infix(_:_:)();
                                NSString v169 = *v337;
                                (*v337)(v166, v167);
                                if (v168) {
                                  break;
                                }
                                unint64_t v162 = (v162 + 1) & v163;
                                if (((*(void *)((char *)v159 + ((v162 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v162) & 1) == 0) {
                                  goto LABEL_108;
                                }
                              }
                              swift_bridgeObjectRelease();
                              uint64_t v4 = v341;
                              v169(v342, v341);

                              uint64_t v59 = v336;
                              id v57 = v346;
                              id v137 = v339;
                              uint64_t v136 = v332;
                              unint64_t v198 = (unint64_t)v343;
                              unint64_t v139 = v326;
                              uint64_t v140 = v325;
                              goto LABEL_156;
                            }
LABEL_108:
                            swift_bridgeObjectRelease();
                            uint64_t v59 = v336;
                            id v57 = v346;
                            uint64_t v4 = v341;
                            unint64_t v139 = v326;
                            uint64_t v140 = v325;
                          }
                          id v170 = v331;
                          if (qword_1009072C8 != -1) {
                            swift_once();
                          }
                          uint64_t v171 = type metadata accessor for Logger();
                          sub_10008E2DC(v171, (uint64_t)qword_1009138D0);
                          id v172 = v323;
                          id v173 = v170;
                          id v174 = v57;
                          uint64_t v175 = v172;
                          id v176 = v173;
                          id v177 = v174;
                          NSString v178 = Logger.logObject.getter();
                          int v179 = static os_log_type_t.info.getter();
                          if (os_log_type_enabled(v178, (os_log_type_t)v179))
                          {
                            LODWORD(v331) = v179;
                            uint64_t v180 = swift_slowAlloc();
                            uint64_t v316 = swift_slowAlloc();
                            uint64_t v352 = v316;
                            *(_DWORD *)uint64_t v180 = v315;
                            id v181 = [v176 remObjectID];
                            if (v181)
                            {
                              NSString v182 = v181;
                              id v183 = [v181 description];

                              uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              unint64_t v186 = v185;
                            }
                            else
                            {
                              unint64_t v186 = 0xE300000000000000;
                              uint64_t v184 = 7104878;
                            }
                            uint64_t v350 = sub_1000C51B8(v184, v186, &v352);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();

                            swift_bridgeObjectRelease();
                            *(_WORD *)(v180 + 12) = 2082;
                            id v199 = [v336 remObjectID];
                            if (v199)
                            {
                              id v200 = v199;
                              id v201 = [v199 description];

                              uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              unint64_t v204 = v203;
                            }
                            else
                            {
                              unint64_t v204 = 0xE300000000000000;
                              uint64_t v202 = 7104878;
                            }
                            uint64_t v350 = sub_1000C51B8(v202, v204, &v352);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();

                            swift_bridgeObjectRelease();
                            *(_WORD *)(v180 + 22) = 2082;
                            id v205 = [v177 remObjectID];
                            if (v205)
                            {
                              id v206 = v205;
                              id v207 = [v205 description];

                              uint64_t v208 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              unint64_t v210 = v209;
                            }
                            else
                            {
                              unint64_t v210 = 0xE300000000000000;
                              uint64_t v208 = 7104878;
                            }
                            uint64_t v59 = v336;
                            uint64_t v350 = sub_1000C51B8(v208, v210, &v352);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();

                            swift_bridgeObjectRelease();
                            _os_log_impl((void *)&_mh_execute_header, v178, (os_log_type_t)v331, "MERGE.LOCAL: ...this local reminder is not matched/merged so we're adding it to the list {local.reminder: %{public}s, local.list: %{public}s, cloud.list: %{public}s}", (uint8_t *)v180, 0x20u);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();

                            id v57 = v346;
                            uint64_t v4 = v341;
                          }
                          else
                          {
                          }
                          id v211 = [v176 ckZoneOwnerName];
                          if (v211)
                          {
                            id v331 = v177;

                            uint64_t v352 = 0;
                            unint64_t v353 = 0xE000000000000000;
                            _StringGuts.grow(_:)(19);
                            swift_bridgeObjectRelease();
                            uint64_t v352 = 123;
                            unint64_t v353 = 0xE100000000000000;
                            id v212 = [v176 remObjectID];
                            if (v212)
                            {
                              uint64_t v213 = v212;
                              id v214 = [v212 description];

                              uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              id v217 = v216;
                            }
                            else
                            {
                              id v217 = (void *)0xE300000000000000;
                              uint64_t v215 = 7104878;
                            }
                            unint64_t v218 = v324;
                            v219._countAndFlagsBits = v215;
                            v219._object = v217;
                            String.append(_:)(v219);
                            swift_bridgeObjectRelease();
                            v220._countAndFlagsBits = 0x614E72656E776F20;
                            v220._object = (void *)0xED0000203D20656DLL;
                            String.append(_:)(v220);
                            id v221 = [v176 ckZoneOwnerName];
                            if (v221)
                            {
                              unint64_t v222 = v221;
                              uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                              uint64_t v225 = v224;
                            }
                            else
                            {
                              uint64_t v223 = 0;
                              uint64_t v225 = 0;
                            }
                            uint64_t v350 = v223;
                            uint64_t v351 = v225;
                            sub_100094134((uint64_t *)&unk_10090A4C0);
                            v226._countAndFlagsBits = String.init<A>(describing:)();
                            String.append(_:)(v226);
                            swift_bridgeObjectRelease();
                            v227._countAndFlagsBits = 125;
                            v227._object = (void *)0xE100000000000000;
                            String.append(_:)(v227);
                            uint64_t v228 = v352;
                            unint64_t v229 = v353;
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                              unint64_t v218 = sub_100308F88(0, v218[2] + 1, 1, v218);
                            }
                            uint64_t v324 = v218;
                            unint64_t v231 = v218[2];
                            unint64_t v230 = v218[3];
                            if (v231 >= v230 >> 1) {
                              uint64_t v324 = sub_100308F88((void *)(v230 > 1), v231 + 1, 1, v324);
                            }
                            id v177 = v331;
                            uint64_t v232 = v324;
                            v324[2] = v231 + 1;
                            v233 = &v232[2 * v231];
                            v233[4] = v228;
                            v233[5] = v229;
                            uint64_t v4 = v341;
                          }
                          [v59 removeRemindersObject:v176];
                          [v177 addRemindersObject:v176];
                          [v176 setList:v177];
                          id v234 = [v176 createResolutionTokenMapIfNecessary];
                          NSString v235 = String._bridgeToObjectiveC()();
                          id v236 = [v234 getTokenForKey:v235];

                          [v236 update];
                          [v176 updateChangeCount];
                          id v237 = v176;
                          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                          if (*(void *)((v348 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v348 & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
                            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                          specialized Array._endMutation()();

                          (*v337)(v342, v4);
                          id v137 = v339;
                          goto LABEL_154;
                        }
                        id v142 = v331;
                      }
                      else
                      {
                        v334((char *)v137, 1, 1, v4);
                      }

                      sub_1000966BC((uint64_t)v137, (uint64_t *)&unk_100909E50);
LABEL_155:
                      unint64_t v198 = (unint64_t)v343;
LABEL_156:
                      unint64_t v138 = v198 + 1;
                      if (v138 == v136) {
                        goto LABEL_163;
                      }
                    }
                    if (qword_1009072C8 != -1) {
                      swift_once();
                    }
                    uint64_t v144 = type metadata accessor for Logger();
                    sub_10008E2DC(v144, (uint64_t)qword_1009138D0);
                    id v145 = v142;
                    id v146 = Logger.logObject.getter();
                    os_log_type_t v147 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v146, v147))
                    {
                      uint64_t v148 = swift_slowAlloc();
                      id v331 = (id)swift_slowAlloc();
                      uint64_t v350 = (uint64_t)v331;
                      *(_DWORD *)uint64_t v148 = v322;
                      id v149 = [v145 remObjectID];
                      if (v149)
                      {
                        uint64_t v150 = v149;
                        id v151 = [v149 description];

                        uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v154 = v153;
                      }
                      else
                      {
                        unint64_t v154 = 0xE300000000000000;
                        uint64_t v152 = 7104878;
                      }
                      *(void *)(v148 + 4) = sub_1000C51B8(v152, v154, &v350);

                      swift_bridgeObjectRelease();
                      *(_WORD *)(v148 + 12) = 2082;
                      uint64_t v352 = 0;
                      unint64_t v353 = 0xE000000000000000;
                      _StringGuts.grow(_:)(49);
                      swift_bridgeObjectRelease();
                      uint64_t v352 = 0xD00000000000001FLL;
                      unint64_t v353 = v321;
                      unsigned int v187 = [v145 markedForDeletion];
                      BOOL v188 = v187 == 0;
                      if (v187) {
                        uint64_t v189 = 1702195828;
                      }
                      else {
                        uint64_t v189 = 0x65736C6166;
                      }
                      if (v188) {
                        unint64_t v190 = 0xE500000000000000;
                      }
                      else {
                        unint64_t v190 = 0xE400000000000000;
                      }
                      unint64_t v191 = v190;
                      String.append(_:)(*(Swift::String *)&v189);
                      swift_bridgeObjectRelease();
                      v192._countAndFlagsBits = 0x707075736E75202CLL;
                      v192._object = (void *)0xEE003D646574726FLL;
                      String.append(_:)(v192);
                      unsigned int v193 = [v145 isUnsupported];
                      BOOL v194 = v193 == 0;
                      if (v193) {
                        uint64_t v195 = 1702195828;
                      }
                      else {
                        uint64_t v195 = 0x65736C6166;
                      }
                      if (v194) {
                        unint64_t v196 = 0xE500000000000000;
                      }
                      else {
                        unint64_t v196 = 0xE400000000000000;
                      }
                      unint64_t v197 = v196;
                      String.append(_:)(*(Swift::String *)&v195);
                      swift_bridgeObjectRelease();
                      *(void *)(v148 + 14) = sub_1000C51B8(v352, v353, &v350);

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v146, v147, "MERGE.LOCAL: ...deleting isConcealed local reminder permanently {reminder: %{public}s %{public}s}", (uint8_t *)v148, 0x16u);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      id v57 = v346;
                      uint64_t v4 = v341;
                      unint64_t v139 = v326;
                      uint64_t v140 = v325;
                    }
                    else
                    {
                    }
                    uint64_t v59 = v336;
                    [v336 removeRemindersObject:v145];
                    [v344 deleteObject:v145];

                    id v137 = v339;
LABEL_154:
                    uint64_t v136 = v332;
                    goto LABEL_155;
                  }
                  __break(1u);
                  goto LABEL_189;
                }
                goto LABEL_162;
              }
LABEL_161:
              swift_bridgeObjectRetain();
              uint64_t v136 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              id v137 = v339;
              if (v136) {
                goto LABEL_86;
              }
LABEL_162:
              uint64_t v324 = _swiftEmptyArrayStorage;
LABEL_163:
              swift_bridgeObjectRelease();
              v238 = v324;
LABEL_164:
              if (v238[2])
              {
                uint64_t v352 = (uint64_t)&off_1008B6398;
                uint64_t v239 = swift_bridgeObjectRetain();
                sub_100201B10(v239);
                NSString v240 = String._bridgeToObjectiveC()();
                if (v238[2]) {
                  swift_bridgeObjectRetain();
                }
                id v241 = self;
                NSString v242 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                uint64_t v350 = v352;
                sub_100094134((uint64_t *)&unk_10090AFB0);
                sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
                BidirectionalCollection<>.joined(separator:)();
                swift_bridgeObjectRelease();
                NSString v243 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
                [v241 faultAndPromptToFileRadarWithICTap2RadarType:4 title:v240 description:v242 logMessage:v243];
              }
              if (v348 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v260 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if (!v260) {
                  goto LABEL_187;
                }
              }
              else if (!*(void *)((v348 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                goto LABEL_187;
              }
              id v244 = [v57 reminderIDsMergeableOrdering];
              if (v244)
              {
                uint64_t v245 = v244;
                uint64_t v27 = (REMCDObject *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v247 = v246;

                uint64_t v248 = (char *)self;
                Class isa = Data._bridgeToObjectiveC()().super.isa;
                uint64_t v352 = 0;
                id v137 = [v248 reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:isa error:&v352];

                uint64_t v250 = (void *)v352;
                if (!v137)
                {
                  id v259 = (id)v352;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  _convertNSErrorToError(_:)();

                  swift_willThrow();
                  sub_100097F34((uint64_t)v27, v247);
                  goto LABEL_202;
                }
                v343 = (REMCDObject *)v247;
                uint64_t v350 = (uint64_t)v137;
                sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
                id v251 = v250;
                uint64_t v352 = Sequence.elements<A>(ofType:)();
                uint64_t v136 = v348;
                uint64_t v350 = (uint64_t)_swiftEmptyArrayStorage;
                v345 = v248;
                if (!(v348 >> 62))
                {
                  uint64_t v252 = *(void *)((v348 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  swift_bridgeObjectRetain_n();
                  unint64_t v253 = v27;
                  if (!v252)
                  {
LABEL_190:
                    swift_bridgeObjectRelease();
                    uint64_t v258 = _swiftEmptyArrayStorage;
LABEL_191:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_100200CE8((unint64_t)v258);
                    if (qword_1009072C8 != -1) {
                      swift_once();
                    }
                    uint64_t v261 = type metadata accessor for Logger();
                    sub_10008E2DC(v261, (uint64_t)qword_1009138D0);
                    id v262 = v57;
                    uint64_t v263 = Logger.logObject.getter();
                    os_log_type_t v264 = static os_log_type_t.info.getter();
                    if (os_log_type_enabled(v263, v264))
                    {
                      v265 = (uint8_t *)swift_slowAlloc();
                      uint64_t v350 = swift_slowAlloc();
                      *(_DWORD *)v265 = 136446210;
                      id v266 = [v262 remObjectID];
                      if (v266)
                      {
                        id v267 = v266;
                        id v268 = [v266 description];

                        uint64_t v269 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v271 = v270;
                      }
                      else
                      {
                        unint64_t v271 = 0xE300000000000000;
                        uint64_t v269 = 7104878;
                      }
                      uint64_t v347 = sub_1000C51B8(v269, v271, &v350);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v263, v264, "MERGE.LOCAL: ...updating reminderIDs ordering and re-sorting with added reminders {list: %{public}s}", v265, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      id v57 = v346;
                      uint64_t v27 = v253;
                    }
                    else
                    {
                    }
                    sub_1001FFDB0(v352);
                    swift_bridgeObjectRelease();
                    id v272 = objc_allocWithZone((Class)NSOrderedSet);
                    Class v273 = Array._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    id v274 = [v272 initWithArray:v273];

                    uint64_t v350 = 0;
                    id v275 = [v345 reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:v274 error:&v350];
                    id v276 = (id)v350;
                    if (v275)
                    {
                      uint64_t v277 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                      unint64_t v279 = v278;

                      Class v280 = Data._bridgeToObjectiveC()().super.isa;
                      [v262 setReminderIDsMergeableOrdering:v280];

                      id v281 = [v262 createResolutionTokenMapIfNecessary];
                      NSString v282 = String._bridgeToObjectiveC()();
                      id v283 = [v281 getTokenForKey:v282];

                      [v283 update];
                      sub_1002F8028((uint64_t)v274, 0);
                      sub_100097F34((uint64_t)v27, (unint64_t)v343);

                      sub_100097F34(v277, v279);
                      uint64_t v59 = v336;
                      goto LABEL_207;
                    }
                    v284 = v276;
                    _convertNSErrorToError(_:)();

                    swift_willThrow();
                    sub_100097F34((uint64_t)v27, (unint64_t)v343);

                    uint64_t v59 = v336;
LABEL_202:
                    if (qword_1009072C8 != -1) {
                      swift_once();
                    }
                    uint64_t v285 = type metadata accessor for Logger();
                    sub_10008E2DC(v285, (uint64_t)qword_1009138D0);
                    swift_errorRetain();
                    swift_errorRetain();
                    uint64_t v286 = Logger.logObject.getter();
                    os_log_type_t v287 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v286, v287))
                    {
                      unint64_t v288 = (uint8_t *)swift_slowAlloc();
                      uint64_t v352 = swift_slowAlloc();
                      *(_DWORD *)unint64_t v288 = 136315138;
                      swift_getErrorValue();
                      uint64_t v289 = Error.localizedDescription.getter();
                      uint64_t v350 = sub_1000C51B8(v289, v290, &v352);
                      uint64_t v59 = v336;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      swift_errorRelease();
                      swift_errorRelease();
                      _os_log_impl((void *)&_mh_execute_header, v286, v287, "MERGE.LOCAL: Error decoding reminder IDs ordered set and thus not able to add local reminders and sort child reminders {error : %s}", v288, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();

                      swift_errorRelease();
                    }
                    else
                    {
                      swift_errorRelease();
                      swift_errorRelease();
                      swift_errorRelease();
                    }
                    goto LABEL_207;
                  }
LABEL_174:
                  if (v252 < 1) {
                    __break(1u);
                  }
                  for (uint64_t i = 0; i != v252; ++i)
                  {
                    if ((v136 & 0xC000000000000001) != 0) {
                      id v255 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else {
                      id v255 = *(id *)(v136 + 8 * i + 32);
                    }
                    uint64_t v256 = v255;
                    id v257 = [v255 remObjectID];

                    if (v257)
                    {
                      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                      if (*(void *)((v350 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v350 & 0xFFFFFFFFFFFFFF8)
                                                                                         + 0x18) >> 1)
                        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized Array._endMutation()();
                    }
                    id v57 = v346;
                  }
                  uint64_t v27 = v253;
                  swift_bridgeObjectRelease();
                  uint64_t v258 = (void *)v350;
                  goto LABEL_191;
                }
LABEL_189:
                swift_bridgeObjectRetain_n();
                uint64_t v252 = _CocoaArrayWrapper.endIndex.getter();
                unint64_t v253 = v27;
                if (!v252) {
                  goto LABEL_190;
                }
                goto LABEL_174;
              }
LABEL_187:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_207:
              [v57 updateChangeCount];
              if (qword_1009072C8 != -1) {
                swift_once();
              }
              uint64_t v291 = type metadata accessor for Logger();
              sub_10008E2DC(v291, (uint64_t)qword_1009138D0);
              unint64_t v292 = v323;
              id v293 = v57;
              Swift::OpaquePointer v294 = v292;
              id v295 = v293;
              id v296 = Logger.logObject.getter();
              os_log_type_t v297 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v296, v297))
              {
                uint64_t v298 = swift_slowAlloc();
                uint64_t v352 = swift_slowAlloc();
                *(_DWORD *)uint64_t v298 = 136446466;
                id v299 = [v59 remObjectID];
                if (v299)
                {
                  uint64_t v300 = v299;
                  id v301 = [v299 description];

                  uint64_t v302 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v304 = v303;
                }
                else
                {
                  unint64_t v304 = 0xE300000000000000;
                  uint64_t v302 = 7104878;
                }
                uint64_t v305 = 7104878;
                uint64_t v350 = sub_1000C51B8(v302, v304, &v352);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v298 + 12) = 2082;
                id v306 = [v295 remObjectID];
                if (v306)
                {
                  uint64_t v307 = v306;
                  id v308 = [v306 description];

                  uint64_t v305 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v310 = v309;
                }
                else
                {
                  unint64_t v310 = 0xE300000000000000;
                }
                uint64_t v350 = sub_1000C51B8(v305, v310, &v352);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v296, v297, "MERGE.LOCAL: ...done merging local list to the cloud list, now delete the local object {local.list: %{public}s, cloud.list: %{public}s}", (uint8_t *)v298, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v59 = v336;
              }
              else
              {
              }
              id v311 = [v59 parentAccount];
              [v311 removeListsObject:v59];

              id v312 = v344;
              [v344 deleteObject:v59];

              swift_bridgeObjectRelease();
              LOBYTE(v24) = 1;
              return (char)v24;
            }
LABEL_160:
            __break(1u);
            goto LABEL_161;
          }
        }
        else
        {
          uint64_t v115 = *(void *)(v87 + 16);
          swift_retain();
          if (v115) {
            goto LABEL_70;
          }
        }
        uint64_t v67 = 0;
        goto LABEL_78;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_67;
  }
  if (qword_1009072C8 != -1) {
    swift_once();
  }
  uint64_t v88 = type metadata accessor for Logger();
  sub_10008E2DC(v88, (uint64_t)qword_1009138D0);
  id v89 = v57;
  id v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.error.getter();
  BOOL v92 = os_log_type_enabled(v90, v91);
  uint64_t v93 = v336;
  if (v92)
  {
    char v94 = (uint8_t *)swift_slowAlloc();
    uint64_t v352 = swift_slowAlloc();
    *(_DWORD *)char v94 = 136446210;
    id v95 = [v89 remObjectID];
    if (v95)
    {
      BOOL v96 = v95;
      id v97 = [v95 description];

      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v100 = v99;
    }
    else
    {
      uint64_t v98 = 7104878;
      unint64_t v100 = 0xE300000000000000;
    }
    uint64_t v350 = sub_1000C51B8(v98, v100, &v352);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "MERGE.LOCAL: ...childReminders is unexpectedly nil {self: %{public}s}", v94, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v93 = v336;
  }
  else
  {
  }
  id v113 = [v93 parentAccount];
  [v113 removeListsObject:v93];

  id v114 = v344;
  [v344 deleteObject:v93];

  LOBYTE(v24) = 1;
  return (char)v24;
}

void sub_10030602C(void **a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v120 = a4;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v118 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v115 - v15;
  *(void *)&double v18 = __chkstk_darwin(v17).n128_u64[0];
  id v119 = (char *)&v115 - v19;
  uint64_t v20 = *a1;
  id v21 = [v20 existingLocalObjectToMergeWithPredicate:a2, v18];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v124 = v16;
    id v125 = v10;
    if (qword_1009072C8 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = sub_10008E2DC(v23, (uint64_t)qword_1009138D0);
    id v25 = v20;
    id v26 = a3;
    id v27 = v22;
    id v28 = v25;
    id v29 = v26;
    id v30 = v27;
    uint64_t v123 = v24;
    id v31 = Logger.logObject.getter();
    int v32 = static os_log_type_t.info.getter();
    BOOL v33 = os_log_type_enabled(v31, (os_log_type_t)v32);
    uint64_t v126 = v12;
    uint64_t v127 = v4;
    uint64_t v121 = v11;
    if (v33)
    {
      LODWORD(v117) = v32;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      uint64_t v129 = v116;
      *(_DWORD *)uint64_t v34 = 136446722;
      id v35 = [v28 remObjectID];
      if (v35)
      {
        uint64_t v36 = v35;
        id v37 = [v35 description];

        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v40 = v39;
      }
      else
      {
        unint64_t v40 = 0xE300000000000000;
        uint64_t v38 = 7104878;
      }
      id v55 = v29;
      os_log_t v122 = v31;
      uint64_t v128 = sub_1000C51B8(v38, v40, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2082;
      id v56 = [v30 remObjectID];
      if (v56)
      {
        id v57 = v56;
        id v58 = [v56 description];

        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;
      }
      else
      {
        unint64_t v61 = 0xE300000000000000;
        uint64_t v59 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v59, v61, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 22) = 2082;
      id v62 = [v29 remObjectID];
      if (v62)
      {
        uint64_t v63 = v62;
        id v64 = [v62 description];

        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;
      }
      else
      {
        unint64_t v67 = 0xE300000000000000;
        uint64_t v65 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v65, v67, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v68 = v122;
      _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v117, "MERGE.LOCAL: ...BEFORE merging local reminder to cloud reminder {cloud: %{public}s, local: %{public}s, list: %{public}s}", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v11 = v121;
    }
    else
    {

      id v55 = v29;
    }
    unsigned int v69 = [v28 mergeWithLocalObject:v30];
    id v70 = v28;
    id v71 = v55;
    id v72 = v30;
    id v73 = v70;
    id v74 = v71;
    id v75 = v72;
    id v76 = Logger.logObject.getter();
    int v77 = static os_log_type_t.info.getter();
    BOOL v78 = os_log_type_enabled(v76, (os_log_type_t)v77);
    LODWORD(v122) = v69;
    if (v78)
    {
      LODWORD(v123) = v77;
      uint64_t v79 = swift_slowAlloc();
      uint64_t v117 = swift_slowAlloc();
      uint64_t v129 = v117;
      *(_DWORD *)uint64_t v79 = 136446978;
      if (v69) {
        uint64_t v80 = 1702195828;
      }
      else {
        uint64_t v80 = 0x65736C6166;
      }
      if (v69) {
        unint64_t v81 = 0xE400000000000000;
      }
      else {
        unint64_t v81 = 0xE500000000000000;
      }
      uint64_t v128 = sub_1000C51B8(v80, v81, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2082;
      id v82 = [v73 remObjectID];
      if (v82)
      {
        id v83 = v82;
        id v84 = [v82 description];

        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v87 = v86;
      }
      else
      {
        unint64_t v87 = 0xE300000000000000;
        uint64_t v85 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v85, v87, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 22) = 2082;
      id v88 = [v75 remObjectID];
      if (v88)
      {
        id v89 = v88;
        id v90 = [v88 description];

        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v93 = v92;
      }
      else
      {
        unint64_t v93 = 0xE300000000000000;
        uint64_t v91 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v91, v93, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 32) = 2082;
      id v94 = [v74 remObjectID];
      if (v94)
      {
        id v95 = v94;
        id v96 = [v94 description];

        uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v99 = v98;

        uint64_t v11 = v121;
      }
      else
      {
        unint64_t v99 = 0xE300000000000000;
        uint64_t v11 = v121;
        uint64_t v97 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v97, v99, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v123, "MERGE.LOCAL: ...AFTER merging local reminder to cloud reminder (success: %{public}s, cloud: %{public}s, local: %{public}s, list: %{public}s}", (uint8_t *)v79, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v101 = (uint64_t)v125;
    uint64_t v100 = v126;
    uint64_t v102 = (uint64_t)v124;
    if (v122)
    {
      id v103 = [v75 identifier];
      if (v103)
      {
        unint64_t v104 = v103;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32);
        v105(v101, v102, v11);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v101, 0, 1, v11);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v101, 1, v11) != 1)
        {
          unint64_t v106 = v119;
          v105((uint64_t)v119, v101, v11);
          unint64_t v107 = v118;
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v118, v106, v11);
          sub_10031DEC0(v102, v107);

          uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
          v108(v102, v11);
          v108((uint64_t)v106, v11);
          return;
        }
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v101, 1, 1, v11);
      }

      sub_1000966BC(v101, (uint64_t *)&unk_100909E50);
    }
    else
    {
    }
  }
  else
  {
    if (qword_1009072C8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_1009138D0);
    id v42 = v20;
    id v43 = a3;
    id v44 = v42;
    id v45 = v43;
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v127 = v4;
      uint64_t v48 = swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136446466;
      id v49 = [v44 remObjectID];
      if (v49)
      {
        uint64_t v50 = v49;
        id v51 = [v49 description];

        uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v54 = v53;
      }
      else
      {
        unint64_t v54 = 0xE300000000000000;
        uint64_t v52 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v52, v54, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2082;
      id v109 = [v45 remObjectID];
      if (v109)
      {
        id v110 = v109;
        id v111 = [v109 description];

        uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v114 = v113;
      }
      else
      {
        unint64_t v114 = 0xE300000000000000;
        uint64_t v112 = 7104878;
      }
      uint64_t v128 = sub_1000C51B8(v112, v114, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "MERGE.LOCAL: ...no matching local reminder found for cloud reminder {reminder: %{public}s, list: %{public}s}", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void *REMCDList.objectsToBeDeletedBeforeThisObject()()
{
  id v1 = [v0 reminders];
  if (v1) {
    sub_10020370C(v1);
  }
  id v2 = [v0 childLists];
  if (v2) {
    sub_10020370C(v2);
  }
  id v3 = [v0 childSmartLists];
  if (v3) {
    sub_10020370C(v3);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall REMCDList.restoreParentReferenceAfterUnmarkingForDeletion()()
{
  id v1 = [v0 account];
  [v0 setParentAccount:v1];
}

unint64_t sub_100306EC4(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10030898C(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_100306F98(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&qword_100914150);
}

unint64_t sub_100306FE8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&qword_10090A3B0);
}

unint64_t sub_100307040(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100307BE4(a1, v4);
}

unint64_t sub_100307084(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_100307CF0(a1, v2);
}

unint64_t sub_100307114(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100307E68(a1, v2);
}

unint64_t sub_100307180(void *a1)
{
  return sub_10030724C(a1, (unint64_t *)&qword_10090A3B0);
}

unint64_t sub_100307194(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  if (a2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v4 = Hasher._finalize()();

  return sub_100307F08(a1, a2, v4);
}

unint64_t sub_100307238(void *a1)
{
  return sub_10030724C(a1, &qword_10090ABC0);
}

unint64_t sub_10030724C(void *a1, unint64_t *a2)
{
  Hasher.init(_seed:)();
  if (a1)
  {
    Hasher._combine(_:)(1u);
    id v4 = a1;
    NSObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v5 = Hasher._finalize()();
  return sub_100307FD4(a1, v5, a2);
}

unint64_t sub_1003072F0(Swift::UInt a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_1003080D0(a1, a2, v4);
}

unint64_t sub_100307370(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10030814C(a1, v2);
}

unint64_t sub_1003073B4(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_1003081E8(a1, v2);
}

unint64_t sub_100307418(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100308380(a1, v4);
}

unint64_t sub_10030745C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, &qword_10090E198);
}

unint64_t sub_1003074AC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&unk_10090FFF0);
}

unint64_t sub_1003074FC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&qword_100909FB0);
}

unint64_t sub_10030754C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&qword_10090C120);
}

unint64_t sub_10030759C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&unk_10090BFF0);
}

unint64_t sub_1003075EC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, &qword_100914310);
}

unint64_t sub_10030763C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100307AD0(a1, v4, (unint64_t *)&unk_10090D5F0);
}

unint64_t sub_10030768C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::Int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_1000BF710(a1, (uint64_t)v8, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  Swift::Int v9 = Hasher._finalize()();
  return sub_100308564(a1, v9);
}

unint64_t sub_100307890(uint64_t a1)
{
  type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  sub_100331C5C(&qword_100914848, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10030898C(a1, v2, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, &qword_100914850, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, (uint64_t)&protocol conformance descriptor for REMSuggestedAttributesHarvester.CachedSuggestionType);
}

unint64_t sub_100307964(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_100308B2C(v2, a1);
}

unint64_t sub_1003079AC(uint64_t a1)
{
  Hasher.init(_seed:)();
  if (*(void *)(a1 + 24))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::Int v2 = Hasher._finalize()();

  return sub_100308BC4(a1, v2);
}

unint64_t sub_100307A5C(void *a1)
{
  Hasher.init(_seed:)();
  id v2 = a1;
  NSObject.hash(into:)();

  Swift::Int v3 = Hasher._finalize()();
  return sub_100308448((uint64_t)v2, v3);
}

unint64_t sub_100307AD0(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000963CC(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100307BE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for REMObjectID_Codable();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100307CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100307E68(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100307F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = ~v5;
    uint64_t v10 = *(void *)(v3 + 48);
    do
    {
      char v11 = (void *)(v10 + 16 * v6);
      uint64_t v12 = v11[1];
      if (v12)
      {
        if (a2)
        {
          BOOL v13 = *v11 == a1 && v12 == a2;
          if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v6;
          }
        }
      }
      else if (!a2)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v9;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_100307FD4(void *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v8 = v3;
    uint64_t v10 = ~v5;
    do
    {
      char v11 = *(void **)(*(void *)(v8 + 48) + 8 * v6);
      if (v11)
      {
        if (a1)
        {
          sub_1000963CC(0, a3);
          id v12 = v11;
          id v13 = a1;
          char v14 = static NSObject.== infix(_:_:)();

          if (v14) {
            return v6;
          }
        }
      }
      else if (!a1)
      {
        return v6;
      }
      unint64_t v6 = (v6 + 1) & v10;
    }
    while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  return v6;
}

unint64_t sub_1003080D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      if (v10 == a1 && v9 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_10030814C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1003081E8(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v21 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    char v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v12 = v5 + 16;
    id v13 = v14;
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      uint64_t v17 = v12;
      v13(v8, *(void *)(v23 + 48) + v15 * v10, v4, v6);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v16)(v8, v4);
      if (v18) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
      uint64_t v12 = v17;
    }
    while (((*(void *)(v21 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_100308380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1002CD348(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100233FFC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_100308448(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100308564(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v38 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v8);
  char v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50) - 8;
  __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = v3 + 64;
  uint64_t v39 = v3;
  uint64_t v18 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v19 = a2 & ~v18;
  if ((*(void *)(v3 + 64 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
  {
    uint64_t v35 = v14;
    uint64_t v36 = ~v18;
    uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v37 = *(void *)(v13 + 72);
    id v29 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
    uint64_t v30 = v8;
    BOOL v33 = (void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v34 = v3 + 64;
    while (1)
    {
      sub_1000BF710(*(void *)(v39 + 48) + v37 * v19, (uint64_t)v16, (uint64_t *)&unk_100909E50);
      uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
      sub_1000BF710((uint64_t)v16, (uint64_t)v10, (uint64_t *)&unk_100909E50);
      sub_1000BF710(v38, v21, (uint64_t *)&unk_100909E50);
      uint64_t v22 = *v20;
      if ((*v20)(v10, 1, v5) == 1) {
        break;
      }
      uint64_t v23 = v35;
      sub_1000BF710((uint64_t)v10, v35, (uint64_t *)&unk_100909E50);
      if (v22((char *)v21, 1, v5) == 1)
      {
        (*v33)(v23, v5);
        uint64_t v17 = v34;
LABEL_4:
        sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10090B4C0);
        sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
        goto LABEL_5;
      }
      uint64_t v24 = v31;
      (*v29)(v31, v21, v5);
      sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      id v25 = *v33;
      id v26 = v24;
      uint64_t v8 = v30;
      (*v33)((uint64_t)v26, v5);
      v25(v23, v5);
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
      uint64_t v17 = v34;
      if (v32) {
        return v19;
      }
LABEL_5:
      unint64_t v19 = (v19 + 1) & v36;
      if (((*(void *)(v17 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        return v19;
      }
    }
    if (v22((char *)v21, 1, v5) == 1)
    {
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
      sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
      return v19;
    }
    goto LABEL_4;
  }
  return v19;
}

unint64_t sub_10030898C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_100331C5C(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100308B2C(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100308BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    uint64_t v7 = *(void *)(v2 + 48);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 24);
    do
    {
      uint64_t v10 = *(void *)(v7 + 8 * v5);
      uint64_t v11 = *(void *)(v10 + 24);
      if (v11)
      {
        if (v9)
        {
          BOOL v12 = *(void *)(v10 + 16) == v8 && v11 == v9;
          if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            return v5;
          }
        }
      }
      else if (!v9)
      {
        return v5;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

uint64_t sub_100308C8C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100913A50, type metadata accessor for RDStoreControllerNotificationCenter.Observer, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
}

void *sub_100308CC0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914AC8, (uint64_t *)&unk_100914AD0);
}

uint64_t sub_100308CD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100913930, type metadata accessor for RDXPCEventStream.AlarmHandler, type metadata accessor for RDXPCEventStream.AlarmHandler);
}

uint64_t sub_100308D08(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100094134(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100332580(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_100308F88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_10090A490);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032DB44(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100309098(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, &qword_100913BB0, &qword_100913BB8);
}

void *sub_1003090AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009139B0, &qword_1009139B8);
}

void *sub_1003090C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_10090A050);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032E468(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1003091D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_10090F708, &qword_100914420);
}

uint64_t sub_1003091E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090C168, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ReminderLite, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ReminderLite);
}

uint64_t sub_100309218(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009142E0, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.SectionLite, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.SectionLite);
}

uint64_t sub_10030924C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090F738, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_100309280(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100913DE0, (uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList, (uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList);
}

uint64_t sub_1003092B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009146D0, (uint64_t (*)(void))&type metadata accessor for REMListPickerDataView.Model.Account, (uint64_t (*)(void))&type metadata accessor for REMListPickerDataView.Model.Account);
}

uint64_t sub_1003092E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_100914750, (uint64_t (*)(void))&type metadata accessor for REMSearchCriterion, (uint64_t (*)(void))&type metadata accessor for REMSearchCriterion);
}

uint64_t sub_10030931C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090F798, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
}

uint64_t sub_100309350(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, (uint64_t *)&unk_100913B10, &qword_100916E10);
}

uint64_t sub_100309364(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100094134(a5);
  uint64_t v13 = *(void *)(sub_100094134(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100094134(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100331FBC(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_1003095D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914808, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.TodayGroupModel.Group);
}

uint64_t sub_100309604(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009146A0, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
}

uint64_t sub_100309638(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_100914920, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.DatesModel.Group, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.DatesModel.Group);
}

uint64_t sub_10030966C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009147E8, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Day);
}

uint64_t sub_1003096A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009147F0, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.CompletedDateBucketsModel.Bucket);
}

uint64_t sub_1003096D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914768, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Day);
}

uint64_t sub_100309708(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914778, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ScheduledDateBucketsModel.Bucket);
}

uint64_t sub_10030973C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_1009148C0, &qword_1009148C8);
}

uint64_t sub_100309750(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_100920EE0, (uint64_t (*)(void))&type metadata accessor for Date, (uint64_t (*)(void))&type metadata accessor for Date);
}

void *sub_100309784(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100911EE0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032EDC0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100309894(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100913750, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.GroupChild, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

uint64_t sub_1003098C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090F730, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.AccountChild, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.AccountChild);
}

void *sub_1003098FC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, (uint64_t *)&unk_100914640, (uint64_t *)&unk_10090FC60);
}

void *sub_100309910(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100094134(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      id v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100330698(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100309A2C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914628, (uint64_t *)&unk_10090FC60);
}

void *sub_100309A40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_100913F10);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003301B8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100309B50(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309C94(a1, a2, a3, a4, &qword_100913F08);
}

void *sub_100309B5C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100913F00);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003307A0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100309C88(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309C94(a1, a2, a3, a4, &qword_100913EF8);
}

void *sub_100309C94(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100094134(a5);
      size_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 3);
      int64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      int64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v9 + 4]) {
          memmove(v14, a4 + 4, 8 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003301B8(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100309DA0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100914A80);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330898(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100309EC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090DC40, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_100309EFC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A574(a1, a2, a3, a4, &qword_10090F718, (uint64_t *)&unk_1009145F0);
}

void *sub_100309F10(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A35C(a1, a2, a3, a4, (uint64_t *)&unk_10090D7E0, (uint64_t *)&unk_100917670);
}

void *sub_100309F24(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914110);
}

void *sub_100309F30(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_100094134(a5);
      size_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      size_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10032FDAC(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_10030A028(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_1009140F8);
}

void *sub_10030A034(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_1009140F0);
}

void *sub_10030A040(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914178);
}

void *sub_10030A04C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914160);
}

void *sub_10030A058(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914118);
}

void *sub_10030A064(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_1009114C8);
}

void *sub_10030A070(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913F40);
}

void *sub_10030A07C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_10090D2A8);
}

void *sub_10030A088(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, (uint64_t *)&unk_100913D50);
}

void *sub_10030A094(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913D48);
}

void *sub_10030A0A0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_10090EA38);
}

void *sub_10030A0AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913E50);
}

void *sub_10030A0B8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, (uint64_t *)&unk_100913E40);
}

void *sub_10030A0C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_1009149A0);
}

void *sub_10030A0D0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914988);
}

void *sub_10030A0DC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913D28);
}

void *sub_10030A0E8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913D10);
}

void *sub_10030A0F4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913EB0);
}

void *sub_10030A100(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913E98);
}

void *sub_10030A10C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913C60);
}

void *sub_10030A118(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913C18);
}

void *sub_10030A124(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, (uint64_t *)&unk_100913CE0);
}

void *sub_10030A130(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100913CC8);
}

void *sub_10030A13C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, (uint64_t *)&unk_100913C68, (uint64_t *)&unk_10090FC60);
}

void *sub_10030A150(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913ED0, &qword_100913ED8);
}

void *sub_10030A164(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913C40, &qword_100913C48);
}

void *sub_10030A178(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913EE0, &qword_100913EE8);
}

void *sub_10030A18C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_1009145B8);
      int64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003309A8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030A29C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_100914588, &qword_100914590);
}

void *sub_10030A2B0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914060, &qword_100914068);
}

void *sub_10030A2C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914070, &qword_100914078);
}

uint64_t sub_10030A2D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090F710, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
}

void *sub_10030A30C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, (uint64_t *)&unk_100914578, (uint64_t *)&unk_10090FC60);
}

void *sub_10030A320(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913D98, &qword_100913DA0);
}

void *sub_10030A334(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913DA8, &qword_100913DB0);
}

void *sub_10030A348(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A35C(a1, a2, a3, a4, &qword_100914558, &qword_100914560);
}

void *sub_10030A35C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100094134(a5);
      uint64_t v13 = (void *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      id v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v16 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[v11 + 4]) {
          memmove(v16, a4 + 4, 8 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100331004(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030A478(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090DCB8, type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone, type metadata accessor for RDHashtagLabelUpdater.HashtagTombstone);
}

void *sub_10030A4AC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914510, &qword_100914518);
}

void *sub_10030A4C0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914520, (uint64_t *)&unk_100914528);
}

void *sub_10030A4D4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009144D8, &qword_1009144E0);
}

void *sub_10030A4E8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009144E8, (uint64_t *)&unk_1009144F0);
}

void *sub_10030A4FC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009144B0, &qword_1009144B8);
}

void *sub_10030A510(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009144C0, &qword_1009144C8);
}

void *sub_10030A524(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914478, &qword_100914480);
}

void *sub_10030A538(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914488, (uint64_t *)&unk_100914490);
}

void *sub_10030A54C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030B34C(a1, a2, a3, a4, &qword_100914A78);
}

void *sub_10030A560(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A574(a1, a2, a3, a4, &qword_100914A50, &qword_100914A58);
}

void *sub_10030A574(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100094134(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      id v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003316D0(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10030A6A4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, (uint64_t *)&unk_100914A60);
}

void *sub_10030A6B0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_100914A40);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FE94(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030A7C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_1009149D0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003309A8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030A8D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_10090F820);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003315D8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030A9F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100914A70);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003314D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030AB08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100913B20);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003301B8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030AC18(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309F30(a1, a2, a3, a4, &qword_100914A28);
}

void *sub_10030AC24(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A574(a1, a2, a3, a4, &qword_100914368, &qword_100914370);
}

void *sub_10030AC38(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100914318);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330398(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030AD60(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_100914320);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003302A4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030AE70(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030A35C(a1, a2, a3, a4, &qword_10090F778, (uint64_t *)&unk_100914330);
}

uint64_t sub_10030AE84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914358, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
}

uint64_t sub_10030AEB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914360, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
}

void *sub_10030AEEC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, &qword_10090F640, (uint64_t *)&unk_100914340);
}

void *sub_10030AF00(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100094134(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      id v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
      uint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[3 * v11 + 4]) {
          memmove(v15, a4 + 4, 24 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = _swiftEmptyArrayStorage;
      uint64_t v15 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003300AC(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_10030B034(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_1009103F0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032FFA0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030B144(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_100914A90, &qword_100914A98);
}

void *sub_10030B158(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913F68, &qword_100913F70);
}

void *sub_10030B16C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913F78, &qword_100913F80);
}

void *sub_10030B180(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913FA0, &qword_100913FA8);
}

void *sub_10030B194(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913FB0, &qword_100913FB8);
}

void *sub_10030B1A8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913FC8, &qword_100913FD0);
}

void *sub_10030B1BC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913FD8, &qword_100913FE0);
}

void *sub_10030B1D0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914000, &qword_100914008);
}

void *sub_10030B1E4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914010, &qword_100914018);
}

void *sub_10030B1F8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914028, &qword_100914030);
}

void *sub_10030B20C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914038, &qword_100914040);
}

void *sub_10030B220(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914088, &qword_100914090);
}

void *sub_10030B234(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914098, &qword_1009140A0);
}

uint64_t sub_10030B248(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914AC0, type metadata accessor for RDTimelineEngineReminder, type metadata accessor for RDTimelineEngineReminder);
}

uint64_t sub_10030B27C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_10090F860, type metadata accessor for RDTimelineEngineDueReminder, type metadata accessor for RDTimelineEngineDueReminder);
}

uint64_t sub_10030B2B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_100914AB0, type metadata accessor for RDTimelineEngineLocationReminder, type metadata accessor for RDTimelineEngineLocationReminder);
}

uint64_t sub_10030B2E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_10091BFE0, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_10030B318(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_100914908, (uint64_t *)&unk_100914910);
}

void *sub_10030B32C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309C94(a1, a2, a3, a4, &qword_100910200);
}

void *sub_10030B338(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030B34C(a1, a2, a3, a4, &qword_10090F7C0);
}

void *sub_10030B34C(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_100094134(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v9 + 4]) {
          memmove(v13, a4 + 4, 56 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100331128(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_10030B480(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_1009148F0);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      size_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      size_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003317DC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030B5A4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100914138);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1003318D4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030B6B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_1009139F8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330490(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030B7DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, (uint64_t *)&unk_100914B00, &qword_100912F48);
}

uint64_t sub_10030B7F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914AF0, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

void *sub_10030B824(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309C94(a1, a2, a3, a4, &qword_1009149C0);
}

void *sub_10030B830(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913C98, &qword_100913CA0);
}

void *sub_10030B844(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914220, &qword_100914228);
}

void *sub_10030B858(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914230, &qword_100914238);
}

void *sub_10030B86C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914258, &qword_100914260);
}

void *sub_10030B880(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914268, &qword_100914270);
}

void *sub_10030B894(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, &qword_1009141E8, &qword_1009141F0);
}

uint64_t sub_10030B8A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_100913A38, (uint64_t *)&unk_100913A40);
}

void *sub_10030B8BC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, &qword_100913B68, &qword_100913B70);
}

void *sub_10030B8D0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100913B40);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100330588(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030B9F8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, &qword_10090F858, (uint64_t *)&unk_100913940);
}

uint64_t sub_10030BA0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_1009148D0, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributeOutput, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributeOutput);
}

void *sub_10030BA40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100914880);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032F36C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030BB50(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10030AF00(a1, a2, a3, a4, (uint64_t *)&unk_100914870, &qword_10090F7B0);
}

void *sub_10030BB64(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134((uint64_t *)&unk_100914890);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032F260(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030BC74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009143D8, (uint64_t (*)(void))&type metadata accessor for REMAccountSnapshotSummary, (uint64_t (*)(void))&type metadata accessor for REMAccountSnapshotSummary);
}

uint64_t sub_10030BCA8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, &qword_100913A58, (uint64_t *)&unk_100913A60);
}

void *sub_10030BCBC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009143C0, (uint64_t *)&unk_10090FC60);
}

uint64_t sub_10030BCD0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_100914738, (uint64_t (*)(void))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate, (uint64_t (*)(void))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate);
}

uint64_t sub_10030BD04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009142D0, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
}

uint64_t sub_10030BD38(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, (uint64_t *)&unk_10090FEE0, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
}

void *sub_10030BD6C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_100913B98);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10032F36C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10030BE7C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100094134(&qword_1009141C8);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      void v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1003323B8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10030BFA0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100308D08(a1, a2, a3, a4, &qword_1009149C8, (uint64_t (*)(void))&type metadata accessor for REMFeatureFlags, (uint64_t (*)(void))&type metadata accessor for REMFeatureFlags);
}

void *sub_10030BFD4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914978, &qword_100914980);
}

void *sub_10030BFE8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914990, &qword_100914998);
}

uint64_t sub_10030BFFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100309364(a1, a2, a3, a4, (uint64_t *)&unk_100914190, (uint64_t *)&unk_100920EF0);
}

void *sub_10030C010(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913C08, &qword_100913C10);
}

void *sub_10030C024(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913C50, &qword_100913C58);
}

void *sub_10030C038(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913CB8, &qword_100913CC0);
}

void *sub_10030C04C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913CD0, &qword_100913CD8);
}

void *sub_10030C060(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913D00, &qword_100913D08);
}

void *sub_10030C074(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913D18, &qword_100913D20);
}

void *sub_10030C088(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913D38, &qword_100913D40);
}

void *sub_10030C09C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913D68, (uint64_t *)&unk_100913D70);
}

void *sub_10030C0B0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913E30, &qword_100913E38);
}

void *sub_10030C0C4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913E58, (uint64_t *)&unk_100913E60);
}

void *sub_10030C0D8(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913E88, &qword_100913E90);
}

void *sub_10030C0EC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913EA0, &qword_100913EA8);
}

void *sub_10030C100(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913F30, &qword_100913F38);
}

void *sub_10030C114(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100913F48, (uint64_t *)&unk_100913F50);
}

void *sub_10030C128(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_1009140E0, &qword_1009140E8);
}

void *sub_10030C13C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914100, &qword_100914108);
}

void *sub_10030C150(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_100309910(a1, a2, a3, a4, &qword_100914168, &qword_100914170);
}

void sub_10030C164(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

uint64_t sub_10030C21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100318A14();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1002C1FAC(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10030C304(uint64_t a1, uint64_t a2)
{
  return sub_10030C56C(a1, a2, (void (*)(unint64_t, uint64_t))sub_1002C2184, &qword_1009147C8);
}

double sub_10030C324@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1003073B4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100319170();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_10009A1A0((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1002C218C(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

double sub_10030C450@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100307418(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100319450();
      uint64_t v9 = v11;
    }
    sub_100233FFC(*(void *)(v9 + 48) + 40 * v6);
    sub_10009A1A0((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    sub_1002C2444(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10030C54C(uint64_t a1, uint64_t a2)
{
  return sub_10030C56C(a1, a2, (void (*)(unint64_t, uint64_t))sub_1002C2184, &qword_100913DB8);
}

uint64_t sub_10030C56C(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), uint64_t *a4)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v7;
  uint64_t v16 = *v7;
  *char v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031D428(a4);
    uint64_t v13 = v16;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 8 * v10);
  a3(v10, v13);
  *char v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10030C654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100306EC4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031967C();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v20 = v12;
    unint64_t v13 = *(void *)(v12 + 72) * v6;
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10 + v13, v11);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, *(void *)(v9 + 56) + v13, v11);
    sub_1002C2610(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v11;
  }
  else
  {
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_10030C81C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031A274();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10009A1A0((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1002C2914(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10030C920(uint64_t a1, uint64_t a2)
{
  return sub_10030CC10(a1, a2, (void (*)(unint64_t, uint64_t))sub_1002C2184, &qword_1009139C8);
}

uint64_t sub_10030C940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031BE68((uint64_t (*)(void))&type metadata accessor for Date, &qword_100913DC0);
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_1002C2CB4(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

double sub_10030CB04@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031B240();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1000967D4((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_1002C2EC4(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10030CC10(uint64_t a1, uint64_t a2, void (*a3)(unint64_t, uint64_t), uint64_t *a4)
{
  char v7 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1001806F8(a1, a2);
  LOBYTE(a2) = v11;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v7;
  uint64_t v16 = *v7;
  *char v7 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031D270(a4);
    uint64_t v13 = v16;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(v13 + 56) + 8 * v10);
  a3(v10, v13);
  *char v7 = v13;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10030CCF8(void *a1)
{
  return sub_10030D45C(a1, (uint64_t)sub_100306FE8, (void (*)(uint64_t, uint64_t))sub_1002C2188, &qword_10090E1D0, sub_1001A8A84);
}

uint64_t sub_10030CD40(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100306EC4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031D7AC(&qword_1009141E0);
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002C30B0(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_10030CE40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100306EC4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031C150();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    sub_1000967D4((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    sub_1002C33A8(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10030CF74(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100306EC4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031C3FC();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002C30B0(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10030D06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100306EC4(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10031C9A0((uint64_t (*)(void))type metadata accessor for RDSavedReminder, &qword_1009142D8, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for RDSavedReminder();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_100332518(v12 + *(void *)(v20 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
    sub_1002C36C4(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for RDSavedReminder();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_10030D268(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100306FE8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031CD18(&qword_100914428);
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002C2188(v4);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10030D338(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100306FE8(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10031CEC8(&qword_1009141F8);
    uint64_t v7 = v10;
  }

  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v4);
  sub_1002C3A0C(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10030D414(void *a1)
{
  return sub_10030D45C(a1, (uint64_t)sub_1003075EC, (void (*)(uint64_t, uint64_t))sub_1002C2188, &qword_10090E190, sub_1001A93FC);
}

uint64_t sub_10030D45C(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8 = v5;
  uint64_t v10 = *v5;
  if ((v10 & 0xC000000000000001) == 0)
  {
LABEL_8:
    uint64_t v18 = a4;
    swift_bridgeObjectRetain();
    a2 = ((uint64_t (*)(void *))a2)(a1);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if (v20)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v8;
      uint64_t v24 = *v8;
      *uint64_t v8 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10031DA4C(v18);
        uint64_t v15 = v24;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v10 < 0) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v13 = a1;
  a1 = (void *)__CocoaDictionary.lookup(_:)();

  if (!a1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v14 = __CocoaDictionary.count.getter();
  uint64_t v15 = a5(v12, v14);
  swift_retain();
  a2 = ((uint64_t (*)(id))a2)(v13);
  char v17 = v16;
  swift_release();
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v22 = *(void *)(*(void *)(v15 + 56) + 8 * a2);
  a3(a2, v15);
  *uint64_t v8 = v15;
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_10030D5D8(uint64_t a1, char a2)
{
  return sub_100316520(a1, a2, &qword_100914148);
}

uint64_t sub_10030D5E4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914158);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    id v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    int v32 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030D8F0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100913BC0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030DBF8(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1A8);
}

uint64_t sub_10030DC04(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_1009146B0);
}

uint64_t sub_10030DC10(uint64_t a1, char a2)
{
  return sub_100311CD0(a1, a2, &qword_10090E158);
}

uint64_t sub_10030DC1C(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, (uint64_t *)&unk_100914410);
}

uint64_t sub_10030DC28(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_1009142E8);
}

uint64_t sub_10030DC34(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134((uint64_t *)&unk_1009145C0);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    int64_t v35 = v2;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v37 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v36 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v36) {
          goto LABEL_33;
        }
        unint64_t v24 = v37[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v24 = v37[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v35;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v37 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v37[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v24 = v37[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 8 * v22;
      uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
      uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        id v33 = v31;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      id v15 = v31;
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v18 == v27;
          if (v18 == v27) {
            unint64_t v18 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v18);
        }
        while (v29 == -1);
        unint64_t v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(void *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 8 * v19;
      *(void *)(*(void *)(v8 + 48) + v20) = v15;
      *(void *)(*(void *)(v8 + 56) + v20) = v32;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10030DF30(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134((uint64_t *)&unk_100914660);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    id v33 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v12) {
          goto LABEL_34;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v12)
            {
LABEL_34:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_41;
              }
              uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v9 = -1 << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v15 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_43;
                }
                if (v15 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v20 = v9[v15];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v15 = v21;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      unint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v18);
      int64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if (a2)
      {
        sub_10009A1A0(v23, v34);
      }
      else
      {
        sub_10009A1B0((uint64_t)v23, (uint64_t)v34);
        id v24 = v22;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v13 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v22;
      uint64_t result = (uint64_t)sub_10009A1A0(v34, (_OWORD *)(*(void *)(v7 + 56) + 32 * v16));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030E204(uint64_t a1, int a2)
{
  return sub_100311FD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer, (uint64_t *)&unk_100914710);
}

uint64_t sub_10030E224(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100094134(&qword_1009145D0);
  int v42 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    char v37 = v2;
    uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      uint64_t v14 = ~(-1 << v12);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    id v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    uint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        unint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v21 = v20 | (v18 << 6);
      }
      else
      {
        int64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        unint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          unint64_t v23 = v39[v18];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                unint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      uint64_t v27 = v9;
      uint64_t v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_10030E648(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_100914400);
}

uint64_t sub_10030E654(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009139A8);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    char v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030E97C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009146D8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v36) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((v38 & 1) == 0) {
      id v33 = v31;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030ECA8(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_1009147C8);
}

uint64_t sub_10030ECB4(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_1009146C0);
}

uint64_t sub_10030ECC0(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1C8);
}

uint64_t sub_10030ECCC(uint64_t a1, int a2)
{
  return sub_100311FD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, &qword_1009147F8);
}

uint64_t sub_10030ECEC(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_100914788);
}

uint64_t sub_10030ECF8(uint64_t a1, char a2)
{
  return sub_100316520(a1, a2, (uint64_t *)&unk_100914430);
}

uint64_t sub_10030ED04(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, (uint64_t *)&unk_100913AC0);
}

uint64_t sub_10030ED10(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_100913AA8);
}

uint64_t sub_10030ED1C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914818);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      Swift::UInt v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030EFF0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914810);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v36 = v2;
  int64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v37) {
      break;
    }
    int64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v38 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v38 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v37)
        {
LABEL_36:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        unint64_t v20 = *(void *)(v38 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_45;
            }
            if (v13 >= v37) {
              goto LABEL_36;
            }
            unint64_t v20 = *(void *)(v38 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = 8 * v17;
    unint64_t v23 = *(void **)(*(void *)(v5 + 48) + v22);
    BOOL v24 = *(void **)(*(void *)(v5 + 56) + v22);
    if ((a2 & 1) == 0)
    {
      id v25 = v23;
      id v26 = v24;
    }
    Hasher.init(_seed:)();
    if (v23)
    {
      Hasher._combine(_:)(1u);
      id v27 = v23;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = 8 * v14;
    *(void *)(*(void *)(v7 + 48) + v15) = v23;
    *(void *)(*(void *)(v7 + 56) + v15) = v24;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v19 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030F308(uint64_t a1, int a2)
{
  return sub_100311FD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, &qword_1009146A8);
}

uint64_t sub_10030F328(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914748);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v31 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v30 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }
      else
      {
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v17 >= v30) {
          goto LABEL_36;
        }
        unint64_t v18 = v31[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v30) {
            goto LABEL_36;
          }
          unint64_t v18 = v31[v13];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v30)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v31 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v30) {
                  goto LABEL_36;
                }
                unint64_t v18 = v31[v13];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v19;
          }
        }
LABEL_21:
        unint64_t v10 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v21 = *(void *)(*(void *)(v5 + 48) + 16 * v16 + 8);
      if ((a2 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if (v21)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v14) = v32;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030F64C(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E168);
}

uint64_t sub_10030F658(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009148F8);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v36) {
      break;
    }
    int64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_36:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_45;
            }
            if (v13 >= v36) {
              goto LABEL_36;
            }
            unint64_t v20 = *(void *)(v37 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = 8 * v17;
    unint64_t v23 = *(void **)(*(void *)(v5 + 48) + v22);
    uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
    if ((a2 & 1) == 0)
    {
      id v25 = v23;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    if (v23)
    {
      Hasher._combine(_:)(1u);
      id v26 = v23;
      NSObject.hash(into:)();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v27 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = 8 * v14;
    *(void *)(*(void *)(v7 + 48) + v15) = v23;
    *(void *)(*(void *)(v7 + 56) + v15) = v24;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v19 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030F974(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009147E0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        unint64_t v22 = v30[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v22 = v30[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                void *v30 = -1 << v29;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v30[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v22 = v30[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      long long v31 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(*((Swift::UInt *)&v31 + 1));
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        long long v18 = v31;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        long long v18 = v31;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030FC60(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914770);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  uint64_t *v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10030FF18(uint64_t a1, int a2)
{
  return sub_100310F5C(a1, a2, &qword_100914780);
}

uint64_t sub_10030FF24(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, (uint64_t *)&unk_100914790);
}

uint64_t sub_10030FF30(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100094134(&qword_100914690);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v12 = *(void *)(v8 + 64);
    int64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v13 = ~(-1 << v11);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    int64_t v39 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    id v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v15 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v17 = 0;
    uint64_t v42 = v8;
    id v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        int64_t v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        unint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          int64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v22 = v40[v17];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      uint64_t v27 = v43;
      uint64_t v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        sub_10009A1A0((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        sub_10009A1B0(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v30 = result & ~v29;
      unint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v34 = v31 == v33;
          if (v31 == v33) {
            unint64_t v31 = 0;
          }
          v32 |= v34;
          uint64_t v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)sub_10009A1A0(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_10031032C(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_100913BA0);
}

uint64_t sub_100310338(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, (uint64_t *)&unk_100914650);
}

uint64_t sub_100310344(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1B0);
}

uint64_t sub_100310350(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100913960);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_10009A1A0((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_1002CD348(v25, (uint64_t)&v38);
      sub_10009A1B0(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_10009A1A0(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100310668(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100913DB8);
}

uint64_t sub_100310674(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, (uint64_t *)&unk_1009145E0);
}

uint64_t sub_100310680(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100913C28);
}

uint64_t sub_10031068C(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_100914800);
}

uint64_t sub_100310698(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v50 - 8);
  uint64_t v6 = __chkstk_darwin(v50);
  id v55 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v51 = (char *)&v44 - v8;
  uint64_t v9 = *v2;
  sub_100094134(&qword_100913A20);
  int v52 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  id v46 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v44 = v3;
  int64_t v45 = (unint64_t)(v12 + 63) >> 6;
  os_log_type_t v47 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v17 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v48 = v5;
  uint64_t v49 = v9;
  while (1)
  {
    if (v15)
    {
      unint64_t v23 = __clz(__rbit64(v15));
      uint64_t v24 = (v15 - 1) & v15;
      unint64_t v25 = v23 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v45) {
      break;
    }
    long long v27 = v46;
    unint64_t v28 = v46[v26];
    ++v19;
    if (!v28)
    {
      int64_t v19 = v26 + 1;
      if (v26 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v28 = v46[v19];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v44;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v19 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v45) {
              goto LABEL_34;
            }
            unint64_t v28 = v46[v19];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v29;
      }
    }
LABEL_21:
    uint64_t v24 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v5 + 72);
    unint64_t v31 = v30 * v25;
    unint64_t v32 = *(void *)(v9 + 48) + v30 * v25;
    unint64_t v53 = v24;
    int64_t v54 = v19;
    if (v52)
    {
      BOOL v33 = *v16;
      uint64_t v35 = v50;
      uint64_t v34 = v51;
      (*v16)(v51, v32, v50);
    }
    else
    {
      BOOL v33 = *v47;
      uint64_t v35 = v50;
      uint64_t v34 = v51;
      (*v47)(v51, v32, v50);
    }
    v33(v55, *(void *)(v9 + 56) + v31, v35);
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v36 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v37) & ~*(void *)(v17 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v17 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v20 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    unint64_t v21 = v30 * v20;
    unint64_t v22 = *v16;
    (*v16)((char *)(*(void *)(v11 + 48) + v30 * v20), (unint64_t)v34, v35);
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v22)(*(void *)(v11 + 56) + v21, v55, v35);
    ++*(void *)(v11 + 16);
    uint64_t v5 = v48;
    uint64_t v9 = v49;
    unint64_t v15 = v53;
    int64_t v19 = v54;
  }
  swift_release();
  uint64_t v3 = v44;
  long long v27 = v46;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v9 + 32);
  if (v43 >= 64) {
    bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v27 = -1 << v43;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100310B3C(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E170);
}

uint64_t sub_100310B48(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913EB8);
}

uint64_t sub_100310B54(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_100913AD0);
}

uint64_t sub_100310B60(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913C20);
}

uint64_t sub_100310B6C(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_100913C78);
}

uint64_t sub_100310B78(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  uint64_t v40 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100094134((uint64_t *)&unk_10090BFE0);
  int v41 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v38 = v2;
  char v39 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v16 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v15) {
      break;
    }
    unint64_t v23 = v39;
    unint64_t v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v15) {
        goto LABEL_34;
      }
      unint64_t v24 = v39[v18];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v15)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v41 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v18 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v15) {
              goto LABEL_34;
            }
            unint64_t v24 = v39[v18];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    int64_t v26 = *(void **)(*(void *)(v8 + 48) + 8 * v21);
    uint64_t v27 = *(void *)(v40 + 72);
    uint64_t v28 = *(void *)(v8 + 56) + v27 * v21;
    if (v41)
    {
      sub_100332518(v28, (uint64_t)v7, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    }
    else
    {
      sub_1003324B0(v28, (uint64_t)v7, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
      id v29 = v26;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v31) & ~*(void *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v26;
    uint64_t result = sub_100332518((uint64_t)v7, *(void *)(v10 + 56) + v27 * v19, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v38;
  unint64_t v23 = v39;
  if ((v41 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_100310F20(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100914048);
}

uint64_t sub_100310F2C(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_10090C018);
}

uint64_t sub_100310F38(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100914598);
}

uint64_t sub_100310F44(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_1009145A0);
}

uint64_t sub_100310F50(uint64_t a1, int a2)
{
  return sub_100310F5C(a1, a2, &qword_1009141A8);
}

uint64_t sub_100310F5C(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_100094134(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  int64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    uint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_retain();
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  uint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t sub_100311384(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914570);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    unint64_t v31 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      id v34 = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    unint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10031166C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914568);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    char v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      unint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_100097E38(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_10031197C(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100913D80);
}

uint64_t sub_100311988(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100913B60);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10009A1A0(v24, v35);
      }
      else
      {
        sub_10009A1B0((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10009A1A0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100311C88(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, (uint64_t *)&unk_100914600);
}

uint64_t sub_100311C94(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100921FE0);
}

uint64_t sub_100311CA0(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_1009144D0);
}

uint64_t sub_100311CAC(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100921F50);
}

uint64_t sub_100311CB8(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100914470);
}

uint64_t sub_100311CC4(uint64_t a1, char a2)
{
  return sub_100311CD0(a1, a2, &qword_10090E160);
}

uint64_t sub_100311CD0(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  char v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      swift_retain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100311FA4(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_100913DD0);
}

uint64_t sub_100311FB0(uint64_t a1, int a2)
{
  return sub_100311FD0(a1, a2, (uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100913DE8);
}

uint64_t sub_100311FD0(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v46 = a3(0);
  uint64_t v8 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v11 = *v4;
  sub_100094134(a4);
  int v45 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (*(void *)(v11 + 16))
  {
    uint64_t v41 = v4;
    uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v15 = *(void *)(v11 + 64);
    int64_t v43 = (void *)(v11 + 64);
    if (v14 < 64) {
      uint64_t v16 = ~(-1 << v14);
    }
    else {
      uint64_t v16 = -1;
    }
    unint64_t v17 = v16 & v15;
    int64_t v42 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
    uint64_t v19 = v12 + 64;
    uint64_t result = swift_retain();
    int64_t v21 = 0;
    while (1)
    {
      if (v17)
      {
        unint64_t v23 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v24 = v23 | (v21 << 6);
      }
      else
      {
        int64_t v25 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v25 >= v42) {
          goto LABEL_34;
        }
        unint64_t v26 = v43[v25];
        ++v21;
        if (!v26)
        {
          int64_t v21 = v25 + 1;
          if (v25 + 1 >= v42) {
            goto LABEL_34;
          }
          unint64_t v26 = v43[v21];
          if (!v26)
          {
            int64_t v27 = v25 + 2;
            if (v27 >= v42)
            {
LABEL_34:
              swift_release();
              uint64_t v6 = v41;
              if (v45)
              {
                uint64_t v40 = 1 << *(unsigned char *)(v11 + 32);
                if (v40 >= 64) {
                  bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v43 = -1 << v40;
                }
                *(void *)(v11 + 16) = 0;
              }
              break;
            }
            unint64_t v26 = v43[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v21 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v42) {
                  goto LABEL_34;
                }
                unint64_t v26 = v43[v21];
                ++v27;
                if (v26) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v21 = v27;
          }
        }
LABEL_21:
        unint64_t v17 = (v26 - 1) & v26;
        unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
      }
      unint64_t v28 = *(void **)(*(void *)(v11 + 48) + 8 * v24);
      uint64_t v29 = v8;
      uint64_t v30 = *(void *)(v8 + 72);
      unint64_t v31 = *(void *)(v11 + 56) + v30 * v24;
      if (v45)
      {
        (*v18)(v10, v31, v46);
      }
      else
      {
        (*v44)(v10, v31, v46);
        id v32 = v28;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v13 + 40));
      uint64_t v33 = -1 << *(unsigned char *)(v13 + 32);
      unint64_t v34 = result & ~v33;
      unint64_t v35 = v34 >> 6;
      if (((-1 << v34) & ~*(void *)(v19 + 8 * (v34 >> 6))) != 0)
      {
        unint64_t v22 = __clz(__rbit64((-1 << v34) & ~*(void *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v36 = 0;
        unint64_t v37 = (unint64_t)(63 - v33) >> 6;
        do
        {
          if (++v35 == v37 && (v36 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v38 = v35 == v37;
          if (v35 == v37) {
            unint64_t v35 = 0;
          }
          v36 |= v38;
          uint64_t v39 = *(void *)(v19 + 8 * v35);
        }
        while (v39 == -1);
        unint64_t v22 = __clz(__rbit64(~v39)) + (v35 << 6);
      }
      *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(void *)(*(void *)(v13 + 48) + 8 * v22) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 56) + v30 * v22, v10, v46);
      ++*(void *)(v13 + 16);
      uint64_t v8 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v6 = v13;
  return result;
}

uint64_t sub_100312384(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134((uint64_t *)&unk_1009148B0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    unint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    id v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v32;
      id v34 = v31;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100312658(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1D8);
}

uint64_t sub_100312664(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_100913B28);
}

uint64_t sub_100312670(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913F60);
}

uint64_t sub_10031267C(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913F88);
}

uint64_t sub_100312688(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913FC0);
}

uint64_t sub_100312694(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913FE8);
}

uint64_t sub_1003126A0(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100914020);
}

uint64_t sub_1003126AC(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100914080);
}

uint64_t sub_1003126B8(uint64_t a1, int a2)
{
  return sub_1003174E0(a1, a2, &qword_100913EF0);
}

uint64_t sub_1003126C4(uint64_t a1, char a2)
{
  return sub_100312A2C(a1, a2, (uint64_t *)&unk_1009147B0);
}

uint64_t sub_1003126D0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009139D0);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    BOOL v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      id v32 = (uint64_t *)(*(void *)(v5 + 56) + 48 * v21);
      uint64_t v33 = v32[1];
      uint64_t v34 = v32[3];
      uint64_t v43 = v32[2];
      uint64_t v35 = v32[5];
      uint64_t v41 = *v32;
      uint64_t v42 = v32[4];
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      uint64_t v19 = (void *)(*(void *)(v7 + 56) + 48 * v17);
      *uint64_t v19 = v41;
      v19[1] = v33;
      v19[2] = v43;
      v19[3] = v34;
      v19[4] = v42;
      void v19[5] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100312A20(uint64_t a1, char a2)
{
  return sub_100312A2C(a1, a2, &qword_1009147A8);
}

uint64_t sub_100312A2C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  unint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_100094134(a3);
  uint64_t v12 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v11 + 16))
  {
    uint64_t v29 = v5;
    uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
    uint64_t v14 = (void *)(v11 + 64);
    uint64_t v15 = -1;
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    unint64_t v16 = v15 & *(void *)(v11 + 64);
    int64_t v17 = (unint64_t)(v13 + 63) >> 6;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    while (1)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v23 >= v17) {
          goto LABEL_23;
        }
        unint64_t v24 = v14[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v17) {
            goto LABEL_23;
          }
          unint64_t v24 = v14[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v17)
            {
LABEL_23:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v5 = v29;
                goto LABEL_30;
              }
              uint64_t v27 = 1 << *(unsigned char *)(v11 + 32);
              if (v27 >= 64) {
                bzero((void *)(v11 + 64), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v14 = -1 << v27;
              }
              uint64_t v5 = v29;
              *(void *)(v11 + 16) = 0;
              break;
            }
            unint64_t v24 = v14[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_32;
                }
                if (v19 >= v17) {
                  goto LABEL_23;
                }
                unint64_t v24 = v14[v19];
                ++v25;
                if (v24) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_20:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v11 + 48) + *(void *)(v8 + 72) * v22;
      if (a2)
      {
        sub_100096408(v26, (uint64_t)v10, (uint64_t *)&unk_100909E50);
        uint64_t v20 = *(void *)(*(void *)(v11 + 56) + 8 * v22);
      }
      else
      {
        sub_1000BF710(v26, (uint64_t)v10, (uint64_t *)&unk_100909E50);
        uint64_t v20 = *(void *)(*(void *)(v11 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_100317F44((uint64_t)v10, v20, v12);
    }
  }
  uint64_t result = swift_release();
LABEL_30:
  void *v5 = v12;
  return result;
}

uint64_t sub_100312CCC(uint64_t a1, char a2)
{
  return sub_100316520(a1, a2, (uint64_t *)&unk_100914120);
}

uint64_t sub_100312CD8(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, (uint64_t *)&unk_100913970);
}

uint64_t sub_100312CE4(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_1009139C8);
}

uint64_t sub_100312CF0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100094134(&qword_1009139E0);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      id v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    uint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *uint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  unint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100313130(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_1009139E8);
}

uint64_t sub_10031313C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100913A08);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v37 = v2;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v39 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v39 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v39 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v39 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    uint64_t v30 = *(void *)(v5 + 56) + 24 * v20;
    uint64_t v31 = *(void **)v30;
    uint64_t v32 = *(void *)(v30 + 8);
    uint64_t v33 = *(void *)(v30 + 16);
    if ((v40 & 1) == 0)
    {
      id v34 = v29;
      id v35 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(void *)(*(void *)(v7 + 48) + 8 * v17) = v29;
    int64_t v18 = (void *)(*(void *)(v7 + 56) + 24 * v17);
    *int64_t v18 = v31;
    v18[1] = v32;
    void v18[2] = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v37;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100313444(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_1009139C0);
}

uint64_t sub_100313450(uint64_t a1, int a2)
{
  return sub_100315D54(a1, a2, _s31ThreadSafePartialRepresentationVMa, &qword_100913A00, _s31ThreadSafePartialRepresentationVMa);
}

uint64_t sub_100313484(uint64_t a1, int a2)
{
  return sub_100314C50(a1, a2, (uint64_t (*)(void))&type metadata accessor for Date, &qword_100913DC0);
}

uint64_t sub_1003134A4(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_100914B10);
}

uint64_t sub_1003134B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914AF8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    unint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    char v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_1000967D4(v25, (uint64_t)v38);
    }
    else
    {
      sub_100096838((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    void *v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_1000967D4(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1003137D8(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_100914900);
}

uint64_t sub_1003137E4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100094134(&qword_1009142B8);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    uint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      char v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_100313C24(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100913C80);
}

uint64_t sub_100313C30(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100921E10);
}

uint64_t sub_100313C3C(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100914240);
}

uint64_t sub_100313C48(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100913CA8);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    char v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100313F60(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100914820);
}

uint64_t sub_100313F6C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100094134(&qword_100914840);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_100331C5C(&qword_100914848, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_100314390(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914888);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100314638(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100914868);
}

uint64_t sub_100314644(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_100914860);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v35 = a2;
    char v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        unint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v20 = v9[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v32;
              }
              uint64_t v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1003148F4(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_1009143D0);
}

uint64_t sub_100314900(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009141A0);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_errorRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100314C18(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_1009141D8);
}

uint64_t sub_100314C24(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_100914730);
}

uint64_t sub_100314C30(uint64_t a1, int a2)
{
  return sub_100314C50(a1, a2, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, &qword_1009146F8);
}

uint64_t sub_100314C50(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  id v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  sub_100094134(a4);
  int v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  int v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  int v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      int64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v28;
      }
    }
LABEL_21:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    uint64_t v30 = v10;
    uint64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v39 = 0;
      unint64_t v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        uint64_t v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    void *v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  unint64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t sub_10031503C(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_1009143B0);
}

uint64_t sub_100315048(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1D0);
}

uint64_t sub_100315054(uint64_t a1, int a2)
{
  return sub_1003174E0(a1, a2, &qword_1009141E0);
}

uint64_t sub_100315060(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, (uint64_t *)&unk_100914AA0);
}

uint64_t sub_10031506C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100094134(&qword_1009143A8);
  int v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  unint64_t v40 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  unint64_t v38 = v2;
  int64_t v39 = (unint64_t)(v11 + 63) >> 6;
  BOOL v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  int64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  uint64_t v42 = v8;
  uint64_t v43 = v7;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v39) {
      break;
    }
    uint64_t v22 = v40;
    unint64_t v23 = v40[v21];
    ++v17;
    if (!v23)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v23 = v40[v17];
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v39)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v38;
          if ((v45 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = v40[v24];
        if (!v23)
        {
          while (1)
          {
            int64_t v17 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v39) {
              goto LABEL_34;
            }
            unint64_t v23 = v40[v17];
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v24;
      }
    }
LABEL_21:
    unint64_t v14 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    uint64_t v25 = v5;
    uint64_t v26 = *(void *)(v5 + 72);
    unint64_t v27 = *(void *)(v8 + 48) + v26 * v20;
    int64_t v28 = v43;
    uint64_t v29 = v44;
    if (v45)
    {
      (*v46)(v43, v27, v44);
      sub_1000967D4((long long *)(*(void *)(v8 + 56) + 40 * v20), (uint64_t)v47);
    }
    else
    {
      (*v41)(v43, v27, v44);
      sub_100096838(*(void *)(v8 + 56) + 40 * v20, (uint64_t)v47);
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v30 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)(v15 + 8 * v32);
      }
      while (v36 == -1);
      unint64_t v18 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    (*v46)((char *)(*(void *)(v10 + 48) + v26 * v18), (unint64_t)v28, v29);
    uint64_t result = sub_1000967D4(v47, *(void *)(v10 + 56) + 40 * v18);
    ++*(void *)(v10 + 16);
    uint64_t v5 = v25;
    uint64_t v8 = v42;
  }
  swift_release();
  uint64_t v3 = v38;
  uint64_t v22 = v40;
  if ((v45 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v37 = 1 << *(unsigned char *)(v8 + 32);
  if (v37 >= 64) {
    bzero(v22, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v37;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_1003154BC(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_100094134(&qword_1009143A0);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  unint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  int64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_unknownObjectRetain();
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1003158E0(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_1009142C8);
}

uint64_t sub_1003158EC(uint64_t a1, int a2)
{
  return sub_1003158F8(a1, a2, &qword_1009142C0);
}

uint64_t sub_1003158F8(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_100094134(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  uint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    int64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  int64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t sub_100315D20(uint64_t a1, int a2)
{
  return sub_100315D54(a1, a2, (uint64_t (*)(void))type metadata accessor for RDSavedReminder, &qword_1009142D8, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
}

uint64_t sub_100315D54(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4, uint64_t (*a5)(void))
{
  id v58 = a5;
  uint64_t v7 = v5;
  uint64_t v9 = a3(0);
  uint64_t v52 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v57 = (uint64_t)&v47 - v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v54 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v5;
  sub_100094134(a4);
  int v53 = a2;
  uint64_t v15 = v14;
  uint64_t v16 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v17 = v16;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v18 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v19 = *(void *)(v14 + 64);
  uint64_t v49 = (void *)(v14 + 64);
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v19;
  uint64_t v47 = v5;
  int64_t v48 = (unint64_t)(v18 + 63) >> 6;
  int v50 = (void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  id v55 = (void (**)(char *, unint64_t, uint64_t))(v12 + 32);
  uint64_t v56 = v11;
  uint64_t v22 = v16 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  uint64_t v51 = v15;
  unint64_t v25 = v54;
  while (1)
  {
    if (v21)
    {
      unint64_t v27 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v28 = v27 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v29 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v29 >= v48) {
      break;
    }
    uint64_t v30 = v49;
    unint64_t v31 = v49[v29];
    ++v24;
    if (!v31)
    {
      int64_t v24 = v29 + 1;
      if (v29 + 1 >= v48) {
        goto LABEL_34;
      }
      unint64_t v31 = v49[v24];
      if (!v31)
      {
        int64_t v32 = v29 + 2;
        if (v32 >= v48)
        {
LABEL_34:
          swift_release();
          uint64_t v7 = v47;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v31 = v49[v32];
        if (!v31)
        {
          while (1)
          {
            int64_t v24 = v32 + 1;
            if (__OFADD__(v32, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v48) {
              goto LABEL_34;
            }
            unint64_t v31 = v49[v24];
            ++v32;
            if (v31) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v32;
      }
    }
LABEL_21:
    unint64_t v21 = (v31 - 1) & v31;
    unint64_t v28 = __clz(__rbit64(v31)) + (v24 << 6);
    unint64_t v25 = v54;
LABEL_22:
    uint64_t v33 = v12;
    uint64_t v34 = *(void *)(v12 + 72);
    unint64_t v35 = *(void *)(v15 + 48) + v34 * v28;
    if (v53)
    {
      (*v55)(v25, v35, v56);
      uint64_t v36 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v52 + 72);
      sub_100332518(v36 + v37 * v28, v57, v58);
    }
    else
    {
      (*v50)(v25, v35, v56);
      uint64_t v38 = *(void *)(v15 + 56);
      uint64_t v37 = *(void *)(v52 + 72);
      sub_1003324B0(v38 + v37 * v28, v57, v58);
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v39 = -1 << *(unsigned char *)(v17 + 32);
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v40) & ~*(void *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v25 = v54;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      unint64_t v25 = v54;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      unint64_t v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*v55)((char *)(*(void *)(v17 + 48) + v34 * v26), (unint64_t)v25, v56);
    uint64_t result = sub_100332518(v57, *(void *)(v17 + 56) + v37 * v26, v58);
    ++*(void *)(v17 + 16);
    uint64_t v15 = v51;
    uint64_t v12 = v33;
  }
  swift_release();
  uint64_t v7 = v47;
  uint64_t v30 = v49;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v46 = 1 << *(unsigned char *)(v15 + 32);
  if (v46 >= 64) {
    bzero(v30, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v30 = -1 << v46;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v7 = v17;
  return result;
}

uint64_t sub_100316234(uint64_t a1, char a2)
{
  return sub_100316240(a1, a2, &qword_100914428);
}

uint64_t sub_100316240(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    int64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  int64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100316514(uint64_t a1, char a2)
{
  return sub_100316520(a1, a2, &qword_1009141F8);
}

uint64_t sub_100316520(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    int64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    int64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0) {
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  int64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1003167EC(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_100914380);
}

uint64_t sub_1003167F8(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, (uint64_t *)&unk_100914180);
}

uint64_t sub_100316804(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134((uint64_t *)&unk_100913B00);
  char v34 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v18 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v32)
            {
LABEL_36:
              swift_release();
              uint64_t v3 = v2;
              if (v34)
              {
                uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
                if (v31 >= 64) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v33 = -1 << v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v13 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v19 = v33[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      if ((v34 & 1) == 0)
      {
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      if (*(void *)(v22 + 24))
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_100316B3C(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E1A0);
}

uint64_t sub_100316B48(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100914388);
}

uint64_t sub_100316B54(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, &qword_10090E190);
}

uint64_t sub_100316B60(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, (uint64_t *)&unk_100914300);
}

uint64_t sub_100316B6C(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_1009142B0);
}

uint64_t sub_100316B78(uint64_t a1, char a2)
{
  return sub_100316B84(a1, a2, &qword_100913B88);
}

uint64_t sub_100316B84(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  uint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100316E90(uint64_t a1, char a2)
{
  return sub_100316E9C(a1, a2, &qword_100914278);
}

uint64_t sub_100316E9C(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1003171B0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100094134(&qword_1009140A8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  int64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1003174BC(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100914960);
}

uint64_t sub_1003174C8(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_10090E1E0);
}

uint64_t sub_1003174D4(uint64_t a1, int a2)
{
  return sub_1003174E0(a1, a2, (uint64_t *)&unk_100914950);
}

uint64_t sub_1003174E0(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  sub_100094134(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  BOOL v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  char v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    BOOL v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      id v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  BOOL v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t sub_100317908(uint64_t a1, char a2)
{
  return sub_100317914(a1, a2, (uint64_t *)&unk_100914670);
}

uint64_t sub_100317914(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    id v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v37;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100317BE4(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100913BF0);
}

uint64_t sub_100317BF0(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913CB0);
}

uint64_t sub_100317BFC(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100921A40);
}

uint64_t sub_100317C08(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913D30);
}

uint64_t sub_100317C14(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100913E18);
}

uint64_t sub_100317C20(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, (uint64_t *)&unk_100913E70);
}

uint64_t sub_100317C2C(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100921BF0);
}

uint64_t sub_100317C38(uint64_t a1, char a2)
{
  return sub_100317C44(a1, a2, &qword_100921DA0);
}

uint64_t sub_100317C44(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v39 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  unint64_t v37 = v3;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v38) {
      break;
    }
    unint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v38) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v39 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    id v32 = *(void **)(*(void *)(v6 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    Hasher.init(_seed:)();
    id v15 = v32;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v15;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v37;
  unint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_100317F44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  sub_1000BF710(a1, (uint64_t)v13, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v13, v6);
    Hasher._combine(_:)(1u);
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  Hasher._finalize()();
  unint64_t v14 = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a3 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v14;
  uint64_t result = sub_100096408(a1, a3[6] + *(void *)(v11 + 72) * v14, (uint64_t *)&unk_100909E50);
  *(void *)(a3[7] + 8 * v14) = a2;
  ++a3[2];
  return result;
}

id sub_1003181DC()
{
  return sub_10031CEC8(&qword_100914148);
}

void *sub_1003181E8()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914158);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(void *)(v2 + 56) + v20);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(void *)(v4 + 56) + v20) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100318398()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913BC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100318548()
{
  return sub_10031DA4C(&qword_10090E1A8);
}

void *sub_100318554()
{
  return sub_10031A498(&qword_10090E158);
}

id sub_100318560()
{
  return sub_10031D270((uint64_t *)&unk_100914410);
}

void *sub_10031856C()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009142E8);
}

id sub_10031858C()
{
  uint64_t v1 = v0;
  sub_100094134((uint64_t *)&unk_100914660);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_10009A1B0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_10009A1A0(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100318754()
{
  return sub_10031A668((uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.ReminderCounts.ComputedCountContainer, (uint64_t *)&unk_100914710);
}

void *sub_100318774()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009145D0);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100318A08()
{
  return sub_10031D270(&qword_100914400);
}

void *sub_100318A14()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009139A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    unint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100318BD0()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009146D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100318D74()
{
  return sub_10031D428(&qword_1009147C8);
}

id sub_100318D80()
{
  return sub_10031DA4C((uint64_t *)&unk_1009146C0);
}

id sub_100318D8C()
{
  return sub_10031DA4C(&qword_10090E1C8);
}

id sub_100318D98()
{
  return sub_10031A668((uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, &qword_1009147F8);
}

id sub_100318DB8()
{
  return sub_10031CEC8((uint64_t *)&unk_100914430);
}

id sub_100318DC4()
{
  return sub_10031D270((uint64_t *)&unk_100913AC0);
}

void *sub_100318DD0()
{
  return sub_10031CD18(&qword_100913AA8);
}

id sub_100318DDC()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914810);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100318F84()
{
  return sub_10031A668((uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, &qword_1009146A8);
}

void *sub_100318FA4()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914748);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(_OWORD *)(*(void *)(v4 + 48) + 16 * v15) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100319158()
{
  return sub_10031DA4C(&qword_10090E168);
}

void *sub_100319164()
{
  return sub_100319C54(&qword_100914780);
}

void *sub_100319170()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_100914690);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v22 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v23 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v25 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v24) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    sub_10009A1B0(*(void *)(v6 + 56) + v18, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = sub_10009A1A0(v26, (_OWORD *)(*(void *)(v8 + 56) + v18));
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v24)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100319418()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100913BA0);
}

void *sub_100319438()
{
  return sub_10031CD18((uint64_t *)&unk_100914650);
}

id sub_100319444()
{
  return sub_10031DA4C(&qword_10090E1B0);
}

void *sub_100319450()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913960);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_1002CD348(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_10009A1B0(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_10009A1A0(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100319638()
{
  return sub_10031D428(&qword_100913DB8);
}

void *sub_100319644()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t *)&unk_1009145E0);
}

void *sub_100319664()
{
  return sub_10031D428(&qword_100913C28);
}

id sub_100319670()
{
  return sub_10031D270(&qword_100914800);
}

void *sub_10031967C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void **)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v35 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v34 = (char *)&v30 - v6;
  sub_100094134(&qword_100913A20);
  uint64_t v7 = *v0;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v9;
    return result;
  }
  uint64_t v30 = v1;
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v12 = 0;
  uint64_t v13 = *(void *)(v7 + 16);
  uint64_t v36 = v7;
  uint64_t v37 = v9;
  *(void *)(v9 + 16) = v13;
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v31 = v7 + 64;
  int64_t v32 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v33 = v3 + 2;
  uint64_t v17 = v34;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v27);
    ++v12;
    if (!v28)
    {
      int64_t v12 = v27 + 1;
      if (v27 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v31 + 8 * v12);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v16 = (v28 - 1) & v28;
    unint64_t v19 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_9:
    uint64_t v20 = v36;
    unint64_t v21 = v3[9] * v19;
    unint64_t v22 = (void (*)(char *, unint64_t, uint64_t))v3[2];
    v22(v17, *(void *)(v36 + 48) + v21, v2);
    unint64_t v23 = *(void *)(v20 + 56) + v21;
    int64_t v24 = v35;
    v22(v35, v23, v2);
    uint64_t v25 = v37;
    uint64_t v26 = (void (*)(unint64_t, char *, uint64_t))v3[4];
    v26(*(void *)(v37 + 48) + v21, v17, v2);
    id result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v25 + 56) + v21, v24, v2);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v30;
    uint64_t v9 = v37;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v31 + 8 * v29);
  if (v28)
  {
    int64_t v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v12 >= v32) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v31 + 8 * v12);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100319978()
{
  return sub_10031DA4C(&qword_10090E170);
}

id sub_100319984()
{
  return sub_10031DA4C(&qword_100913EB8);
}

id sub_100319990()
{
  return sub_10031DA4C((uint64_t *)&unk_100913AD0);
}

id sub_10031999C()
{
  return sub_10031DA4C(&qword_100913C20);
}

void *sub_1003199A8()
{
  return sub_10031CD18(&qword_100913C78);
}

id sub_1003199B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag(0);
  uint64_t v26 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090BFE0);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (id)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  int64_t v24 = v1;
  id result = (id)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v25 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v20 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    unint64_t v19 = *(void *)(v26 + 72) * v16;
    sub_1003324B0(*(void *)(v5 + 56) + v19, (uint64_t)v4, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    *(void *)(*(void *)(v7 + 48) + v17) = v18;
    sub_100332518((uint64_t)v4, *(void *)(v7 + 56) + v19, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14)
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t v1 = v24;
    goto LABEL_25;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100319C30()
{
  return sub_10031DA4C(&qword_100914048);
}

id sub_100319C3C()
{
  return sub_10031DA4C((uint64_t *)&unk_1009145A0);
}

void *sub_100319C48()
{
  return sub_100319C54(&qword_1009141A8);
}

void *sub_100319C54(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(a1);
  uint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100319EE8()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    void *v22 = v20;
    v22[1] = v21;
    id v23 = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031A0A0()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914568);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)sub_100097E38(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031A268()
{
  return sub_10031DA4C((uint64_t *)&unk_100913D80);
}

void *sub_10031A274()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913B60);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_10009A1B0(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_10009A1A0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10031A45C()
{
  return sub_10031DA4C((uint64_t *)&unk_100921FE0);
}

id sub_10031A468()
{
  return sub_10031DA4C(&qword_1009144D0);
}

id sub_10031A474()
{
  return sub_10031DA4C((uint64_t *)&unk_100921F50);
}

id sub_10031A480()
{
  return sub_10031DA4C(&qword_100914470);
}

void *sub_10031A48C()
{
  return sub_10031A498(&qword_10090E160);
}

void *sub_10031A498(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031A63C()
{
  return sub_10031DA4C(&qword_100913DD0);
}

id sub_10031A648()
{
  return sub_10031A668((uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100913DE8);
}

id sub_10031A668(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - v6;
  sub_100094134(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (id)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  uint64_t v28 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v31 = v5 + 16;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    uint64_t v20 = 8 * v19;
    int64_t v21 = *(void **)(*(void *)(v8 + 48) + 8 * v19);
    unint64_t v22 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 56) + v22, v4);
    *(void *)(*(void *)(v10 + 48) + v20) = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 56) + v22, v7, v4);
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031A8FC()
{
  uint64_t v1 = v0;
  sub_100094134((uint64_t *)&unk_1009148B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v18;
    id result = v17;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031AAA4()
{
  return sub_10031DA4C(&qword_10090E1D8);
}

void *sub_10031AAB0()
{
  return sub_10031CD18(&qword_100913B28);
}

id sub_10031AABC()
{
  return sub_10031DA4C(&qword_100913F60);
}

id sub_10031AAC8()
{
  return sub_10031DA4C(&qword_100913F88);
}

id sub_10031AAD4()
{
  return sub_10031DA4C(&qword_100913FC0);
}

id sub_10031AAE0()
{
  return sub_10031DA4C(&qword_100913FE8);
}

id sub_10031AAEC()
{
  return sub_10031DA4C(&qword_100914020);
}

id sub_10031AAF8()
{
  return sub_10031DA4C(&qword_100914080);
}

id sub_10031AB04()
{
  return sub_10031D7AC(&qword_100913EF0);
}

void *sub_10031AB10()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009139D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v31 - 1) & v31;
    unint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 48 * v15;
    unint64_t v21 = (uint64_t *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    uint64_t v24 = v21[2];
    uint64_t v25 = v21[3];
    uint64_t v26 = v21[4];
    uint64_t v27 = v21[5];
    uint64_t v28 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v28 = v19;
    v28[1] = v18;
    int64_t v29 = (void *)(*(void *)(v4 + 56) + v20);
    *int64_t v29 = v22;
    v29[1] = v23;
    void v29[2] = v24;
    v29[3] = v25;
    v29[4] = v26;
    v29[5] = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  unint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    int64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031ACFC()
{
  return sub_10031CEC8((uint64_t *)&unk_100914120);
}

id sub_10031AD08()
{
  return sub_10031D270((uint64_t *)&unk_100913970);
}

id sub_10031AD14()
{
  return sub_10031D270(&qword_1009139C8);
}

void *sub_10031AD20()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009139E0);
  int64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    int64_t v29 = v32;
LABEL_25:
    *int64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    uint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    uint64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *uint64_t v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10031AFF8()
{
  return sub_10031D270(&qword_1009139E8);
}

void *sub_10031B004()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913A08);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 24 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v21 = *(void **)v19;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(void *)(v19 + 16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v23 = (void *)(*(void *)(v4 + 56) + v18);
    void *v23 = v21;
    v23[1] = v20;
    void v23[2] = v22;
    id v24 = v17;
    id v25 = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031B1D4()
{
  return sub_10031D270(&qword_1009139C0);
}

void *sub_10031B1E0()
{
  return sub_10031C9A0(_s31ThreadSafePartialRepresentationVMa, &qword_100913A00, _s31ThreadSafePartialRepresentationVMa);
}

void *sub_10031B214()
{
  return sub_10031BE68((uint64_t (*)(void))&type metadata accessor for Date, &qword_100913DC0);
}

id sub_10031B234()
{
  return sub_10031DA4C((uint64_t *)&unk_100914B10);
}

void *sub_10031B240()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914AF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  id v25 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_100096838(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_1000967D4(v26, *(void *)(v4 + 56) + v20);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_10031B42C()
{
  return sub_10031CD18(&qword_100914900);
}

void *sub_10031B438()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009142B8);
  int64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    int64_t v29 = v32;
LABEL_25:
    *int64_t v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    int64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    id v25 = (void *)(*(void *)(v15 + 56) + v21);
    *id v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_10031B710()
{
  return sub_10031DA4C((uint64_t *)&unk_100913C80);
}

id sub_10031B71C()
{
  return sub_10031DA4C((uint64_t *)&unk_100921E10);
}

id sub_10031B728()
{
  return sub_10031DA4C((uint64_t *)&unk_100914240);
}

void *sub_10031B734()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913CA8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031B8EC()
{
  return sub_10031D428(&qword_100914820);
}

void *sub_10031B8F8()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributesHarvester.CachedSuggestionType, &qword_100914840);
}

void *sub_10031B918()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914888);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031BAA8()
{
  return sub_10031D428(&qword_100914868);
}

void *sub_10031BAB4()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100914860);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031BC44()
{
  return sub_10031D428(&qword_1009143D0);
}

void *sub_10031BC50()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009141A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_errorRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031BE08()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009141D8);
}

void *sub_10031BE28()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100914730);
}

void *sub_10031BE48()
{
  return sub_10031BE68((uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList, &qword_1009146F8);
}

void *sub_10031BE68(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v6 = (char *)&v33 - v5;
  sub_100094134(a2);
  int64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    uint64_t v32 = v40;
    uint64_t v31 = v34;
LABEL_28:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v10 = v8;
  id result = (void *)(v8 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    uint64_t v10 = v40;
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 64);
  uint64_t v35 = v7 + 64;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  uint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      int64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    int64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    uint64_t v26 = v40;
    unint64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *unint64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v40;
    goto LABEL_28;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10031C12C()
{
  return sub_10031DA4C(&qword_1009143B0);
}

id sub_10031C138()
{
  return sub_10031DA4C(&qword_10090E1D0);
}

id sub_10031C144()
{
  return sub_10031D7AC(&qword_1009141E0);
}

void *sub_10031C150()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009143A8);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v23 = v1;
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 40 * v16;
    sub_100096838(*(void *)(v6 + 56) + v18, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    id result = (void *)sub_1000967D4(v27, *(void *)(v8 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_25;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10031C3FC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009143A0);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_10031C694()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009142C8);
}

void *sub_10031C6B4()
{
  return sub_10031C6D4((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009142C0);
}

void *sub_10031C6D4(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - v6;
  sub_100094134(a2);
  uint64_t v27 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v27 = v10;
    return result;
  }
  id result = (void *)(v9 + 64);
  unint64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12) {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  }
  int64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v28 = v8 + 64;
  int64_t v29 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v30 = v5 + 32;
  uint64_t v31 = v5 + 16;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v14);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v20, v4);
    uint64_t v21 = 8 * v19;
    uint64_t v22 = *(void *)(*(void *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v10 + 48) + v20, v7, v4);
    *(void *)(*(void *)(v10 + 56) + v21) = v22;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v29) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v29) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031C96C()
{
  return sub_10031C9A0((uint64_t (*)(void))type metadata accessor for RDSavedReminder, &qword_1009142D8, (uint64_t (*)(void))type metadata accessor for RDSavedReminder);
}

void *sub_10031C9A0(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  BOOL v44 = a3;
  uint64_t v5 = a1(0);
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  char v42 = (char *)&v35 - v6;
  uint64_t v41 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(a2);
  uint64_t v35 = v3;
  uint64_t v9 = *v3;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = *(void *)(v9 + 16);
  uint64_t v46 = v10;
  if (!v11)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v46;
    uint64_t v33 = v35;
LABEL_25:
    uint64_t *v33 = v34;
    return result;
  }
  uint64_t v12 = v10;
  id result = (void *)(v10 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || (unint64_t)result >= v9 + 64 + 8 * v14)
  {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v14);
    uint64_t v12 = v46;
  }
  uint64_t v36 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v12 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v45 = v9;
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v39 = v7 + 16;
  int64_t v37 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v38 = v7 + 32;
  unint64_t v20 = v40;
  uint64_t v19 = v41;
  uint64_t v21 = (uint64_t)v42;
  for (i = v46; ; id result = (void *)sub_100332518(v21, *(void *)(i + 56) + v29, v28))
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v15 << 6);
      uint64_t v25 = v45;
      goto LABEL_9;
    }
    int64_t v30 = v15 + 1;
    uint64_t v25 = v45;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v37) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v30);
    ++v15;
    if (!v31)
    {
      int64_t v15 = v30 + 1;
      if (v30 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v31 = *(void *)(v36 + 8 * v15);
      if (!v31) {
        break;
      }
    }
LABEL_22:
    unint64_t v18 = (v31 - 1) & v31;
    unint64_t v24 = __clz(__rbit64(v31)) + (v15 << 6);
LABEL_9:
    unint64_t v26 = *(void *)(v7 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v20, *(void *)(v25 + 48) + v26, v19);
    uint64_t v27 = *(void *)(v25 + 56);
    uint64_t v28 = v44;
    unint64_t v29 = *(void *)(v43 + 72) * v24;
    sub_1003324B0(v27 + v29, v21, v44);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(i + 48) + v26, v20, v19);
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v46;
    goto LABEL_25;
  }
  unint64_t v31 = *(void *)(v36 + 8 * v32);
  if (v31)
  {
    int64_t v15 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v15 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v15 >= v37) {
      goto LABEL_23;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v15);
    ++v32;
    if (v31) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10031CD0C()
{
  return sub_10031CD18(&qword_100914428);
}

void *sub_10031CD18(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031CEBC()
{
  return sub_10031CEC8(&qword_1009141F8);
}

id sub_10031CEC8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v20);
    ++v10;
    if (!v21)
    {
      int64_t v10 = v20 + 1;
      if (v20 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v7 + 8 * v10);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = *(void *)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v14) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v7 + 8 * v22);
  if (v21)
  {
    int64_t v10 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v7 + 8 * v10);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031D064()
{
  return sub_10031D270(&qword_100914380);
}

id sub_10031D070()
{
  return sub_10031D270((uint64_t *)&unk_100914180);
}

void *sub_10031D07C()
{
  uint64_t v1 = v0;
  sub_100094134((uint64_t *)&unk_100913B00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    id result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031D228()
{
  return sub_10031DA4C(&qword_10090E1A0);
}

void *sub_10031D234()
{
  return sub_10031D428(&qword_100914388);
}

id sub_10031D240()
{
  return sub_10031DA4C(&qword_10090E190);
}

id sub_10031D24C()
{
  return sub_10031D270((uint64_t *)&unk_100914300);
}

void *sub_10031D258()
{
  return sub_10031D428(&qword_1009142B0);
}

id sub_10031D264()
{
  return sub_10031D270(&qword_100913B88);
}

id sub_10031D270(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031D41C()
{
  return sub_10031D428(&qword_100914278);
}

void *sub_10031D428(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10031D5D8()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009140A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    void *v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031D788()
{
  return sub_10031DA4C((uint64_t *)&unk_100914960);
}

id sub_10031D794()
{
  return sub_10031DA4C((uint64_t *)&unk_10090E1E0);
}

id sub_10031D7A0()
{
  return sub_10031D7AC((uint64_t *)&unk_100914950);
}

id sub_10031D7AC(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(a1);
  unint64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v26 = v9;
    return result;
  }
  id result = (id)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v30 = v4 + 16;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void **)(*(void *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031DA40()
{
  return sub_10031DA4C((uint64_t *)&unk_100914670);
}

id sub_10031DA4C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    unint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    unint64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_10031DBEC()
{
  return sub_10031DA4C((uint64_t *)&unk_100913BF0);
}

id sub_10031DBF8()
{
  return sub_10031DA4C(&qword_100913CB0);
}

id sub_10031DC04()
{
  return sub_10031DA4C((uint64_t *)&unk_100921A40);
}

id sub_10031DC10()
{
  return sub_10031DA4C(&qword_100913D30);
}

id sub_10031DC1C()
{
  return sub_10031DA4C(&qword_100913E18);
}

id sub_10031DC28()
{
  return sub_10031DA4C((uint64_t *)&unk_100913E70);
}

id sub_10031DC34()
{
  return sub_10031DA4C(&qword_100921BF0);
}

id sub_10031DC40()
{
  return sub_10031DA4C(&qword_100921DA0);
}

uint64_t sub_10031DC4C(void *a1, void *a2)
{
  return sub_100321010(a1, a2, &qword_100914390, (uint64_t)UNNotificationCategory_ptr, &qword_100914398);
}

uint64_t sub_10031DC68(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      unint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_100325D44(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10031DE18(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_10090FF50, &qword_100913D60);
}

uint64_t sub_10031DE2C(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_10090FEB0, &qword_100913AF8);
}

uint64_t sub_10031DE40(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, (uint64_t *)&unk_10090B070, (uint64_t *)&unk_100913950);
}

uint64_t sub_10031DE54(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, &qword_1009139D8);
}

uint64_t sub_10031DE70(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, &qword_100913DD8);
}

uint64_t sub_10031DE8C(void *a1, void *a2)
{
  return sub_10031EC98(a1, a2, (void (*)(void))&type metadata accessor for REMObjectID_Codable, &qword_1009110B8, (void (*)(void))&type metadata accessor for REMObjectID_Codable);
}

uint64_t sub_10031DEC0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    int64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      id v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      int64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100326394((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10031E1E4(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100913B30, &qword_100913B38);
}

uint64_t sub_10031E1F8(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100910FF8, (uint64_t *)&unk_100913F20);
}

uint64_t sub_10031E20C(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911038, (uint64_t *)&unk_1009140D0);
}

uint64_t sub_10031E220(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v7 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    int64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      id v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, PredicateType);
      sub_100331C5C((unint64_t *)&qword_100914720, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, PredicateType);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      int64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, PredicateType);
    v20(v29, *(void *)(*v28 + 48) + v19, PredicateType);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, PredicateType);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100326818((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, PredicateType);
    return 1;
  }
}

uint64_t sub_10031E544(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100913A10, &qword_100913A18);
}

uint64_t sub_10031E558(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_10090B6E8, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    int64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      id v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C(&qword_100913E00, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      int64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100326AD4((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10031E87C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.CachableProperty();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_1009146E0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    int64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    int64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      id v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C(&qword_1009146E8, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      int64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    int64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100326D90((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10031EBA0(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100916E60, &qword_100914130);
}

uint64_t sub_10031EBB4(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_10090FE00, (uint64_t)NSPersistentStore_ptr, &qword_100914930);
}

uint64_t sub_10031EBD0(void *a1, void *a2)
{
  return sub_10031EC98(a1, a2, (void (*)(void))type metadata accessor for REMCDSavedReminder, (uint64_t *)&unk_100913AE8, (void (*)(void))type metadata accessor for REMCDSavedReminder);
}

uint64_t sub_10031EC04(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100913B78, &qword_100913B80);
}

uint64_t sub_10031EC18(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_100909FB0, (uint64_t)NSNumber_ptr, &qword_100913998);
}

uint64_t sub_10031EC34(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&unk_10090D5F0, (uint64_t)REMContactRepresentation_ptr, &qword_100914938);
}

uint64_t sub_10031EC50(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100913980, (uint64_t *)&unk_100913988);
}

uint64_t sub_10031EC64(void *a1, void *a2)
{
  return sub_10031EC98(a1, a2, (void (*)(void))type metadata accessor for REMCDTemplate, &qword_100913E10, (void (*)(void))type metadata accessor for REMCDTemplate);
}

uint64_t sub_10031EC98(void *a1, void *a2, void (*a3)(void), uint64_t *a4, void (*a5)(void))
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease();

      a3(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v38;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v28 = sub_100321950(v13, result + 1, a4, a5);
    uint64_t v39 = (void *)v28;
    unint64_t v29 = *(void *)(v28 + 16);
    if (*(void *)(v28 + 24) <= v29)
    {
      uint64_t v34 = v29 + 1;
      id v35 = v14;
      sub_1003256B4(v34, a4);
      uint64_t v30 = v39;
    }
    else
    {
      uint64_t v30 = (void *)v28;
      id v31 = v14;
    }
    sub_100325CC0((uint64_t)v14, v30);
    uint64_t *v9 = (uint64_t)v30;
    swift_bridgeObjectRelease();
    *a1 = v14;
  }
  else
  {
    Swift::Int v17 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v18 = NSObject._rawHashValue(seed:)(v17);
    uint64_t v19 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
    {
      a3(0);
      id v21 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
      char v22 = static NSObject.== infix(_:_:)();

      if (v22)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        unint64_t v26 = *(void **)(*(void *)(*v9 + 48) + 8 * v20);
        *a1 = v26;
        id v27 = v26;
        return 0;
      }
      uint64_t v23 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v23;
        if (((*(void *)(v12 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          break;
        }
        id v24 = *(id *)(*(void *)(v12 + 48) + 8 * v20);
        char v25 = static NSObject.== infix(_:_:)();

        if (v25) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = *v9;
    uint64_t *v9 = 0x8000000000000000;
    id v33 = a2;
    sub_100326208((uint64_t)v33, v20, isUniquelyReferenced_nonNull_native, a4, a5);
    uint64_t *v9 = v40;
    swift_bridgeObjectRelease();
    *a1 = v33;
  }
  return 1;
}

uint64_t sub_10031EF54(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100910FF0, (uint64_t *)&unk_100913EC0);
}

uint64_t sub_10031EF68(void *a1, void *a2)
{
  return sub_100321354(a1, a2, (uint64_t *)&unk_100910FB0, (uint64_t *)&unk_100913C30);
}

uint64_t sub_10031EF7C(void *a1, void *a2)
{
  return sub_10031EC98(a1, a2, (void (*)(void))type metadata accessor for RDClientConnection, &qword_1009145B0, (void (*)(void))type metadata accessor for RDClientConnection);
}

uint64_t sub_10031EFB0(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_100909B00, (uint64_t)NSManagedObject_ptr, &qword_100914408);
}

uint64_t sub_10031EFCC(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911028, (uint64_t *)&unk_100914050);
}

uint64_t sub_10031EFE0(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, &qword_1009110A0);
}

uint64_t sub_10031EFFC(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100913D90, &qword_10090B6D8);
}

uint64_t sub_10031F010(void *a1, void *a2)
{
  return sub_100321010(a1, a2, &qword_10090DC80, (uint64_t)REMHashtag_ptr, &qword_100914550);
}

uint64_t sub_10031F02C(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&unk_10090FFF0, (uint64_t)REMAssignment_ptr, &qword_100914538);
}

uint64_t sub_10031F048(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_10090DC60, &qword_1009143F8);
}

uint64_t sub_10031F05C(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, (uint64_t *)&unk_10090DC30, (uint64_t *)&unk_100914610);
}

uint64_t sub_10031F070(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911098, (uint64_t *)&unk_100914500);
}

uint64_t sub_10031F084(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911090, &qword_100921FA0);
}

uint64_t sub_10031F098(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911088, (uint64_t *)&unk_1009144A0);
}

uint64_t sub_10031F0AC(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911080, &qword_10090B798);
}

uint64_t sub_10031F0C0(void *a1, void *a2)
{
  return sub_100321010(a1, a2, &qword_10090ABC0, (uint64_t)off_1008AA3D8, &qword_100913AE0);
}

uint64_t sub_10031F0DC(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&unk_10090AF40, (uint64_t)off_1008AA470, (uint64_t *)&unk_100914B90);
}

uint64_t sub_10031F0F8(void *a1, void *a2)
{
  return sub_100320988(a1, a2, &qword_10090B790, &qword_100914460);
}

uint64_t sub_10031F10C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v24 = a2;
    sub_10032704C((uint64_t)v24, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v28;
    swift_bridgeObjectRelease();
    *a1 = v24;
    return 1;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      uint64_t v16 = ~v8;
      do
      {
        unint64_t v9 = (v9 + 1) & v16;
        if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;
        if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v19 == v20) {
          goto LABEL_16;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while ((v22 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v26 = *(void **)(*(void *)(*v3 + 48) + 8 * v9);
  *a1 = v26;
  id v27 = v26;
  return 0;
}

uint64_t sub_10031F338(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911000, &qword_10090B718);
}

uint64_t sub_10031F34C(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911008, (uint64_t *)&unk_100913F90);
}

uint64_t sub_10031F360(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911010, &qword_10090B730);
}

uint64_t sub_10031F374(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911018, (uint64_t *)&unk_100913FF0);
}

uint64_t sub_10031F388(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911020, &qword_10090B748);
}

uint64_t sub_10031F39C(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100911030, &qword_10090B760);
}

uint64_t sub_10031F3B0(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
  swift_bridgeObjectRetain();
  id v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    id v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C(&qword_1009140B8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      id v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10032728C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10031F6D4(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_1009141B0, &qword_1009141B8);
}

uint64_t sub_10031F6E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100327548(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while (*(void *)(v10 + 8 * v9) != a2);
  }
  uint64_t result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10031F7E4(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_10090F228, (void (*)(uint64_t))&type metadata accessor for URL);
  swift_bridgeObjectRetain();
  id v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10032766C((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10031FB08(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100913C90, (uint64_t *)&unk_1009219C0);
}

uint64_t sub_10031FB1C(void *a1, void *a2)
{
  return sub_100321354(a1, a2, (uint64_t *)&unk_100911040, (uint64_t *)&unk_100914210);
}

uint64_t sub_10031FB30(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100914250, (uint64_t *)&unk_100921E60);
}

uint64_t sub_10031FB44(uint64_t *a1, uint64_t a2)
{
  return sub_10031FB58(a1, a2, &qword_100913B50, &qword_100913B58);
}

uint64_t sub_10031FB58(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v12 = __CocoaSet.member(for:)();
    swift_release();
    if (v12)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRetain();
      sub_100094134(a3);
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    uint64_t v20 = sub_10032150C(v11, result + 1, a4, a3);
    uint64_t v28 = v20;
    unint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)(v20 + 24) <= v21)
    {
      uint64_t v23 = v21 + 1;
      swift_retain();
      sub_10032415C(v23, a4, a3);
      uint64_t v22 = v28;
    }
    else
    {
      uint64_t v22 = v20;
      swift_retain();
    }
    sub_100325C14(a2, v22, a3);
    *uint64_t v7 = v22;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  swift_bridgeObjectRetain();
  sub_100094134(a3);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    uint64_t v19 = swift_retain();
    sub_100325EE0(v19, v16, isUniquelyReferenced_nonNull_native, a4, a3);
    *uint64_t v4 = v27;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  uint64_t v17 = ~v15;
  while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    unint64_t v16 = (v16 + 1) & v17;
    if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) == 0) {
      goto LABEL_11;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v4 + 48) + 8 * v16);
  swift_retain();
  return 0;
}

uint64_t sub_10031FE1C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_100331C5C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
  swift_bridgeObjectRetain();
  id v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    unint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      uint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_100331C5C(&qword_100914830, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100327928((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_100320140(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&unk_100917C20, (uint64_t)NSEntityDescription_ptr, &qword_100913A70);
}

uint64_t sub_10032015C(void *a1, void *a2, Swift::UInt a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  id v9 = a2;
  NSObject.hash(into:)();

  Hasher._combine(_:)(a3);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  char v25 = v4;
  uint64_t v26 = a1;
  if ((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = ~v11;
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    while (1)
    {
      uint64_t v14 = *(void *)(v8 + 48) + 16 * v12;
      uint64_t v15 = *(void *)(v14 + 8);
      id v16 = *(id *)v14;
      char v17 = static NSObject.== infix(_:_:)();

      if ((v17 & 1) != 0 && v15 == a3) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(*v25 + 48) + 16 * v12;
    uint64_t v20 = *(void **)v18;
    uint64_t v19 = *(void *)(v18 + 8);
    *uint64_t v26 = v20;
    v26[1] = v19;
    id v21 = v20;
    return 0;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = *v25;
    *char v25 = 0x8000000000000000;
    id v24 = v9;
    sub_100327BE4(v24, a3, v12, isUniquelyReferenced_nonNull_native);
    *char v25 = v27;
    swift_bridgeObjectRelease();
    *uint64_t v26 = v24;
    v26[1] = a3;
    return 1;
  }
}

uint64_t sub_100320320(Swift::UInt *a1, Swift::UInt a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain();
  id v11 = a3;
  id v12 = a4;
  NSObject.hash(into:)();
  id v13 = v12;
  NSObject.hash(into:)();

  uint64_t v34 = v13;
  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  id v33 = v5;
  if ((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v17 = ~v15;
    do
    {
      uint64_t v18 = (void *)(*(void *)(v10 + 48) + 24 * v16);
      if (*v18 == a2)
      {
        uint64_t v19 = (void *)v18[1];
        uint64_t v20 = (void *)v18[2];
        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        id v21 = v19;
        id v22 = v20;
        if (static NSObject.== infix(_:_:)())
        {
          char v23 = static NSObject.== infix(_:_:)();

          if (v23)
          {

            swift_bridgeObjectRelease();
            id v24 = (Swift::UInt *)(*(void *)(*v33 + 48) + 24 * v16);
            char v25 = (void *)v24[1];
            uint64_t v26 = (void *)v24[2];
            *a1 = *v24;
            a1[1] = (Swift::UInt)v25;
            a1[2] = (Swift::UInt)v26;
            id v27 = v25;
            id v28 = v26;
            return 0;
          }
        }
        else
        {
        }
      }
      unint64_t v16 = (v16 + 1) & v17;
    }
    while (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v35 = *v33;
  void *v33 = 0x8000000000000000;
  id v31 = v11;
  id v32 = v34;
  sub_100327D9C(a2, v31, v32, v16, isUniquelyReferenced_nonNull_native);
  void *v33 = v35;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = (Swift::UInt)v31;
  uint64_t result = 1;
  a1[2] = (Swift::UInt)v32;
  return result;
}

uint64_t sub_100320570(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v35 = a1;
  uint64_t v5 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v33 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - v9;
  __chkstk_darwin(v11);
  id v13 = (char *)&v31 - v12;
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v31 - v15;
  uint64_t v17 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v36 = v5;
  uint64_t v39 = a2;
  type metadata accessor for Date();
  sub_100331C5C(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
  unint64_t v20 = v18 & ~v19;
  uint64_t v38 = v17 + 56;
  uint64_t v21 = *(void *)(v17 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20;
  uint64_t v34 = v16;
  if (v21)
  {
    id v32 = v3;
    uint64_t v37 = ~v19;
    uint64_t v22 = *(void *)(v33 + 72);
    uint64_t v23 = v39;
    do
    {
      sub_1003324B0(*(void *)(v17 + 48) + v22 * v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      char v24 = static UUID.== infix(_:_:)();
      sub_1003324B0((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      sub_1003324B0(v23, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      if (v24)
      {
        char v25 = static Date.== infix(_:_:)();
        sub_100128138((uint64_t)v7);
        sub_100128138((uint64_t)v10);
        sub_100128138((uint64_t)v13);
        if (v25)
        {
          swift_bridgeObjectRelease();
          sub_100128138(v39);
          sub_1003324B0(*(void *)(*v32 + 48) + v22 * v20, v35, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
          return 0;
        }
      }
      else
      {
        sub_100128138((uint64_t)v7);
        sub_100128138((uint64_t)v10);
        sub_100128138((uint64_t)v13);
      }
      unint64_t v20 = (v20 + 1) & v37;
    }
    while (((*(void *)(v38 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v27 = v35;
    uint64_t v3 = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = v35;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = v39;
  uint64_t v30 = (uint64_t)v34;
  sub_1003324B0(v39, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
  uint64_t v40 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_100327FBC(v30, v20, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v40;
  swift_bridgeObjectRelease();
  sub_100332518(v29, v27, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
  return 1;
}

uint64_t sub_100320974(void *a1, void *a2)
{
  return sub_100320988(a1, a2, &qword_1009148E0, &qword_1009148E8);
}

uint64_t sub_100320988(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v12 = a2;
    uint64_t v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease();

      swift_unknownObjectRetain();
      sub_100094134(a3);
      swift_dynamicCast();
      *a1 = v36;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v26 = sub_100321B6C(v11, result + 1, a4, a3);
    uint64_t v37 = (void *)v26;
    unint64_t v27 = *(void *)(v26 + 16);
    if (*(void *)(v26 + 24) <= v27)
    {
      uint64_t v32 = v27 + 1;
      id v33 = v12;
      sub_1003256B4(v32, a4);
      id v28 = v37;
    }
    else
    {
      id v28 = (void *)v26;
      id v29 = v12;
    }
    sub_100325CC0((uint64_t)v12, v28);
    *uint64_t v7 = (uint64_t)v28;
    swift_bridgeObjectRelease();
    *a1 = v12;
  }
  else
  {
    Swift::Int v15 = *(void *)(v10 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v16 = NSObject._rawHashValue(seed:)(v15);
    uint64_t v17 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v18 = v16 & ~v17;
    if ((*(void *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18))
    {
      sub_100094134(a3);
      id v19 = *(id *)(*(void *)(v10 + 48) + 8 * v18);
      char v20 = static NSObject.== infix(_:_:)();

      if (v20)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        char v24 = *(void **)(*(void *)(*v7 + 48) + 8 * v18);
        *a1 = v24;
        id v25 = v24;
        return 0;
      }
      uint64_t v21 = ~v17;
      while (1)
      {
        unint64_t v18 = (v18 + 1) & v21;
        if (((*(void *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v10 + 48) + 8 * v18);
        char v23 = static NSObject.== infix(_:_:)();

        if (v23) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v38 = *v7;
    *uint64_t v7 = 0x8000000000000000;
    id v31 = a2;
    sub_10032833C((uint64_t)v31, v18, isUniquelyReferenced_nonNull_native, a4, a3);
    *uint64_t v7 = v38;
    swift_bridgeObjectRelease();
    *a1 = v31;
  }
  return 1;
}

uint64_t sub_100320C34(unsigned char *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v5 = Hasher._finalize()();
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  Swift::Int v20 = a2;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t *v21 = 0x8000000000000000;
    char v18 = v20;
    sub_1003284C4(v20, v7, isUniquelyReferenced_nonNull_native);
    uint64_t *v21 = v23;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_25;
  }
  uint64_t v8 = ~v6;
  uint64_t v9 = a2;
  while (2)
  {
    unint64_t v10 = 0xD000000000000030;
    unint64_t v11 = 0x80000001007C7430;
    switch(*(unsigned char *)(*(void *)(v4 + 48) + v7))
    {
      case 1:
        unint64_t v10 = 0xD00000000000002DLL;
        unint64_t v11 = 0x80000001007C7470;
        break;
      case 2:
        unint64_t v10 = 0xD000000000000034;
        unint64_t v11 = 0x80000001007C74A0;
        break;
      case 3:
        unint64_t v10 = 0xD000000000000031;
        unint64_t v11 = 0x80000001007C74E0;
        break;
      case 4:
        unint64_t v11 = 0x80000001007C7520;
        unint64_t v10 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    unint64_t v12 = 0xD000000000000030;
    unint64_t v13 = 0x80000001007C7430;
    switch(v9)
    {
      case 1:
        unint64_t v14 = 0xD00000000000002DLL;
        Swift::Int v15 = "butesAutoTrainer";
        goto LABEL_11;
      case 2:
        unint64_t v14 = 0xD000000000000034;
        Swift::Int v15 = "d.ICCloudConfigurationUpdater";
LABEL_11:
        unint64_t v13 = (unint64_t)v15 | 0x8000000000000000;
        if (v10 != v14) {
          goto LABEL_16;
        }
        goto LABEL_15;
      case 3:
        unint64_t v12 = 0xD000000000000031;
        unint64_t v13 = 0x80000001007C74E0;
        goto LABEL_14;
      case 4:
        unint64_t v13 = 0x80000001007C7520;
        if (v10 != 0xD00000000000001BLL) {
          goto LABEL_16;
        }
        goto LABEL_15;
      default:
LABEL_14:
        if (v10 != v12) {
          goto LABEL_16;
        }
LABEL_15:
        if (v11 == v13)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_24;
        }
LABEL_16:
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) == 0)
        {
          unint64_t v7 = (v7 + 1) & v8;
          if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
            goto LABEL_21;
          }
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_24:
        uint64_t result = 0;
        char v18 = *(unsigned char *)(*(void *)(*v21 + 48) + v7);
LABEL_25:
        *a1 = v18;
        return result;
    }
  }
}

uint64_t sub_100320FC4(void *a1, void *a2)
{
  return sub_100321010(a1, a2, (unint64_t *)&unk_100910040, (uint64_t)NSString_ptr, (uint64_t *)&unk_1009149A8);
}

uint64_t sub_100320FE0(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100914970, &qword_10090B7D0);
}

uint64_t sub_100320FF4(void *a1, void *a2)
{
  return sub_100321010(a1, a2, &qword_100910180, (uint64_t)REMAccountStorage_ptr, (uint64_t *)&unk_100913BE0);
}

uint64_t sub_100321010(void *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = v5;
  uint64_t v11 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v13 = a2;
    uint64_t v14 = __CocoaSet.member(for:)();

    if (v14)
    {
      swift_bridgeObjectRelease();

      sub_1000963CC(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v37;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v27 = sub_10032172C(v12, result + 1, a5, a3);
    uint64_t v38 = (void *)v27;
    unint64_t v28 = *(void *)(v27 + 16);
    if (*(void *)(v27 + 24) <= v28)
    {
      uint64_t v33 = v28 + 1;
      id v34 = v13;
      sub_1003256B4(v33, a5);
      id v29 = v38;
    }
    else
    {
      id v29 = (void *)v27;
      id v30 = v13;
    }
    sub_100325CC0((uint64_t)v13, v29);
    *uint64_t v8 = (uint64_t)v29;
    swift_bridgeObjectRelease();
    *a1 = v13;
  }
  else
  {
    Swift::Int v16 = *(void *)(v11 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v17 = NSObject._rawHashValue(seed:)(v16);
    uint64_t v18 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v19 = v17 & ~v18;
    if ((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19))
    {
      sub_1000963CC(0, a3);
      id v20 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
      char v21 = static NSObject.== infix(_:_:)();

      if (v21)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        id v25 = *(void **)(*(void *)(*v8 + 48) + 8 * v19);
        *a1 = v25;
        id v26 = v25;
        return 0;
      }
      uint64_t v22 = ~v18;
      while (1)
      {
        unint64_t v19 = (v19 + 1) & v22;
        if (((*(void *)(v11 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
          break;
        }
        id v23 = *(id *)(*(void *)(v11 + 48) + 8 * v19);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *v8;
    *uint64_t v8 = 0x8000000000000000;
    id v32 = a2;
    sub_100326074((uint64_t)v32, v19, isUniquelyReferenced_nonNull_native, a5, a3);
    *uint64_t v8 = v39;
    swift_bridgeObjectRelease();
    *a1 = v32;
  }
  return 1;
}

uint64_t sub_1003212DC(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100913C00, &qword_10090B690);
}

uint64_t sub_1003212F0(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100910FC0, &qword_10090B6B0);
}

uint64_t sub_100321304(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100910FC8, (uint64_t *)&unk_100913CF0);
}

uint64_t sub_100321318(void *a1, void *a2)
{
  return sub_100321354(a1, a2, (uint64_t *)&unk_100910FD0, &qword_10090B6C8);
}

uint64_t sub_10032132C(void *a1, void *a2)
{
  return sub_100321354(a1, a2, (uint64_t *)&unk_100910FE0, (uint64_t *)&unk_100913E20);
}

uint64_t sub_100321340(void *a1, void *a2)
{
  return sub_100321354(a1, a2, &qword_100913E80, &qword_10090B6F8);
}

uint64_t sub_100321354(void *a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  Swift::Int v5 = v4;
  uint64_t v8 = *v5;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  id v9 = a2;
  NSObject.hash(into:)();

  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      uint64_t v18 = *(void **)(*(void *)(*v5 + 48) + 8 * v12);
      *a1 = v18;
      id v19 = v18;
      return 0;
    }
    uint64_t v15 = ~v11;
    while (1)
    {
      unint64_t v12 = (v12 + 1) & v15;
      if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        break;
      }
      id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
      char v17 = static NSObject.== infix(_:_:)();

      if (v17) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  id v22 = v9;
  sub_100326650(v22, v12, isUniquelyReferenced_nonNull_native, a3, a4);
  uint64_t *v5 = v25;
  swift_bridgeObjectRelease();
  *a1 = v22;
  return 1;
}

uint64_t sub_10032150C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2)
  {
    sub_100094134(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    for (; __CocoaSet.Iterator.next()(); ++*(void *)(v6 + 16))
    {
      sub_100094134(a4);
      swift_dynamicCast();
      unint64_t v13 = *(void *)(v6 + 16);
      if (*(void *)(v6 + 24) <= v13)
      {
        sub_10032415C(v13 + 1, a3, a4);
        uint64_t v6 = v19;
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v8 = v6 + 56;
      uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v14 = 0;
        unint64_t v15 = (unint64_t)(63 - v9) >> 6;
        do
        {
          if (++v11 == v15 && (v14 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v16 = v11 == v15;
          if (v11 == v15) {
            unint64_t v11 = 0;
          }
          v14 |= v16;
          uint64_t v17 = *(void *)(v8 + 8 * v11);
        }
        while (v17 == -1);
        unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
      }
      *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100321710(uint64_t a1, uint64_t a2)
{
  return sub_10032172C(a1, a2, &qword_1009139D8, (unint64_t *)&qword_10090A3B0);
}

Swift::Int sub_10032172C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  if (a2)
  {
    sub_100094134(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_1000963CC(0, a4);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1003256B4(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100321930(uint64_t a1, uint64_t a2)
{
  return sub_100321950(a1, a2, &qword_1009110B8, (void (*)(void))&type metadata accessor for REMObjectID_Codable);
}

Swift::Int sub_100321950(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  if (a2)
  {
    sub_100094134(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      a4(0);
      do
      {
        swift_dynamicCast();
        uint64_t v6 = v19;
        unint64_t v13 = *(void *)(v19 + 16);
        if (*(void *)(v19 + 24) <= v13)
        {
          sub_1003256B4(v13 + 1, a3);
          uint64_t v6 = v19;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
        uint64_t v8 = v6 + 56;
        uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
        unint64_t v10 = result & ~v9;
        unint64_t v11 = v10 >> 6;
        if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v14 = 0;
          unint64_t v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v16 = v11 == v15;
            if (v11 == v15) {
              unint64_t v11 = 0;
            }
            v14 |= v16;
            uint64_t v17 = *(void *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
        ++*(void *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100321B4C(uint64_t a1, uint64_t a2)
{
  return sub_100321950(a1, a2, &qword_1009145B0, (void (*)(void))type metadata accessor for RDClientConnection);
}

Swift::Int sub_100321B6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a2)
  {
    sub_100094134(a3);
    uint64_t v6 = static _SetStorage.convert(_:capacity:)();
    uint64_t v19 = v6;
    __CocoaSet.makeIterator()();
    for (; __CocoaSet.Iterator.next()(); ++*(void *)(v6 + 16))
    {
      sub_100094134(a4);
      swift_dynamicCast();
      unint64_t v13 = *(void *)(v6 + 16);
      if (*(void *)(v6 + 24) <= v13)
      {
        sub_1003256B4(v13 + 1, a3);
        uint64_t v6 = v19;
      }
      Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v8 = v6 + 56;
      uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      if (((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*(void *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v14 = 0;
        unint64_t v15 = (unint64_t)(63 - v9) >> 6;
        do
        {
          if (++v11 == v15 && (v14 & 1) != 0)
          {
            __break(1u);
            return result;
          }
          BOOL v16 = v11 == v15;
          if (v11 == v15) {
            unint64_t v11 = 0;
          }
          v14 |= v16;
          uint64_t v17 = *(void *)(v8 + 8 * v11);
        }
        while (v17 == -1);
        unint64_t v12 = __clz(__rbit64(~v17)) + (v11 << 6);
      }
      *(void *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v6 + 48) + 8 * v12) = v18;
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v6;
}

Swift::Int sub_100321D54(uint64_t a1, uint64_t a2)
{
  return sub_10032172C(a1, a2, (uint64_t *)&unk_1009149A8, (unint64_t *)&unk_100910040);
}

uint64_t sub_100321D70()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009139A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    id v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100322050(uint64_t a1)
{
  return sub_1003256B4(a1, &qword_1009110B8);
}

uint64_t sub_10032205C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134(&qword_100911078);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100322458()
{
  uint64_t v1 = v0;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v2 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134(&qword_1009110A8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = PredicateType;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, PredicateType);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100322854()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134(&qword_100913E08);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_10090B6E8, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100322C50()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for REMAccountsListDataView.CachableProperty();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134(&qword_1009146F0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_1009146E0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10032304C(uint64_t a1)
{
  return sub_1003256B4(a1, &qword_1009110A0);
}

uint64_t sub_100323058()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134((uint64_t *)&unk_100914A30);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_33;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_33;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_33;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v27;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero(v29, ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v29 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v28) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v18 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = v18 & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v20) & ~*(void *)(v8 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v8 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v11 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032336C()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Calendar.Component();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134((uint64_t *)&unk_1009140C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_100323768()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009147C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    BOOL v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v31 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v15 >= v31) {
          goto LABEL_38;
        }
        unint64_t v16 = v32[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v31) {
            goto LABEL_38;
          }
          unint64_t v16 = v32[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v31) {
              goto LABEL_38;
            }
            unint64_t v16 = v32[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v31)
              {
LABEL_38:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v32[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_44;
                  }
                  if (v10 >= v31) {
                    goto LABEL_38;
                  }
                  unint64_t v16 = v32[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      uint64_t v21 = v18[2];
      uint64_t v22 = v18[3];
      Hasher.init(_seed:)();
      if (v19)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v22) {
          goto LABEL_26;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v22)
        {
LABEL_26:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          goto LABEL_29;
        }
      }
      Hasher._combine(_:)(0);
LABEL_29:
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v8 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
      void *v12 = v20;
      v12[1] = v19;
      void v12[2] = v21;
      v12[3] = v22;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100323ADC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009149B8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    int64_t v5 = 0;
    uint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    unint64_t v27 = v1;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v28 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        int64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          int64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          unint64_t v16 = v6[v5];
          if (!v16)
          {
            int64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            unint64_t v16 = v6[v5];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *uint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v5 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100323D60()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134((uint64_t *)&unk_1009149E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    unint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_10090F228, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10032415C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v6 = *v3;
  sub_100094134(a2);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    unint64_t v31 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 56);
    int64_t v30 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v30) {
          goto LABEL_33;
        }
        unint64_t v19 = v31[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v30) {
            goto LABEL_33;
          }
          unint64_t v19 = v31[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v30) {
              goto LABEL_33;
            }
            unint64_t v19 = v31[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v30)
              {
LABEL_33:
                swift_release();
                uint64_t v5 = v3;
                uint64_t v29 = 1 << *(unsigned char *)(v6 + 32);
                if (v29 > 63) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v31 = -1 << v29;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              unint64_t v19 = v31[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v30) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v31[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
      sub_100094134(a3);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v22 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v8 + 48) + 8 * v15) = v21;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v5 = v8;
  return result;
}

uint64_t sub_100324450()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_100094134(&qword_100914838);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_100331C5C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t sub_10032484C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009143B8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v31 = v0;
    BOOL v32 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v32[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v32[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v32[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v32 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v32[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = *(void *)(v2 + 48) + 16 * v15;
      unint64_t v20 = *(void **)v19;
      Swift::UInt v21 = *(void *)(v19 + 8);
      Hasher.init(_seed:)();
      id v22 = v20;
      NSObject.hash(into:)();

      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v9 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v22;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100324B40()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134((uint64_t *)&unk_100910FA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v34 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    BOOL v32 = v0;
    int64_t v33 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v14 = v13 | (v10 << 6);
      }
      else
      {
        int64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v33) {
          goto LABEL_33;
        }
        unint64_t v16 = v34[v15];
        ++v10;
        if (!v16)
        {
          int64_t v10 = v15 + 1;
          if (v15 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v16 = v34[v10];
          if (!v16)
          {
            int64_t v10 = v15 + 2;
            if (v15 + 2 >= v33) {
              goto LABEL_33;
            }
            unint64_t v16 = v34[v10];
            if (!v16)
            {
              int64_t v17 = v15 + 3;
              if (v17 >= v33)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v32;
                uint64_t v31 = 1 << *(unsigned char *)(v2 + 32);
                if (v31 > 63) {
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v31;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v16 = v34[v17];
              if (!v16)
              {
                while (1)
                {
                  int64_t v10 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v10 >= v33) {
                    goto LABEL_33;
                  }
                  unint64_t v16 = v34[v10];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v17;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
      }
      uint64_t v18 = v2;
      uint64_t v19 = *(void *)(v2 + 48) + 24 * v14;
      Swift::UInt v20 = *(void *)v19;
      long long v35 = *(_OWORD *)(v19 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      id v21 = (id)v35;
      id v22 = *((id *)&v35 + 1);
      NSObject.hash(into:)();
      id v23 = v22;
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v25) & ~*(void *)(v8 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v8 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v11 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
      *(void *)uint64_t v12 = v20;
      *(_OWORD *)(v12 + 8) = v35;
      ++*(void *)(v4 + 16);
      uint64_t v2 = v18;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_100324E9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100094134((uint64_t *)&unk_100913BD0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = *(void *)(v5 + 56);
    BOOL v32 = (void *)(v5 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & v9;
    uint64_t v30 = v0;
    int64_t v31 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v12 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = v32[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v31) {
            goto LABEL_33;
          }
          unint64_t v19 = v32[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v31) {
              goto LABEL_33;
            }
            unint64_t v19 = v32[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v31)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 > 63) {
                  bzero(v32, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *BOOL v32 = -1 << v29;
                }
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v19 = v32[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v31) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v32[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(v33 + 72);
      sub_100332518(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      type metadata accessor for Date();
      sub_100331C5C(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      uint64_t result = sub_100332518((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v7;
  return result;
}

uint64_t sub_1003252E4(uint64_t a1)
{
  return sub_1003256B4(a1, (uint64_t *)&unk_100911050);
}

uint64_t sub_1003252F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_100913A80);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v28 = (void *)(v2 + 56);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v15 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      goto LABEL_33;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_39;
    }
    if (v17 >= v27) {
      break;
    }
    unint64_t v18 = v28[v17];
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v27) {
        break;
      }
      unint64_t v18 = v28[v9];
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v27) {
          break;
        }
        unint64_t v18 = v28[v9];
        if (!v18)
        {
          int64_t v19 = v17 + 3;
          if (v19 >= v27) {
            break;
          }
          unint64_t v18 = v28[v19];
          if (!v18)
          {
            while (1)
            {
              int64_t v9 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_40;
              }
              if (v9 >= v27) {
                goto LABEL_34;
              }
              unint64_t v18 = v28[v9];
              ++v19;
              if (v18) {
                goto LABEL_32;
              }
            }
          }
          int64_t v9 = v19;
        }
      }
    }
LABEL_32:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_33:
    char v24 = *(unsigned char *)(*(void *)(v2 + 48) + v16);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    if (((-1 << v12) & ~*(void *)(v8 + 8 * (v12 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v20 = 0;
    unint64_t v21 = (unint64_t)(63 - v11) >> 6;
    do
    {
      if (++v13 == v21 && (v20 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x1003256A0);
      }
      BOOL v22 = v13 == v21;
      if (v13 == v21) {
        unint64_t v13 = 0;
      }
      v20 |= v22;
      uint64_t v23 = *(void *)(v8 + 8 * v13);
    }
    while (v23 == -1);
    unint64_t v14 = __clz(__rbit64(~v23)) + (v13 << 6);
LABEL_8:
    *(void *)(v8 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(unsigned char *)(*(void *)(v4 + 48) + v14) = v24;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v1 = v0;
  uint64_t v25 = 1 << *(unsigned char *)(v2 + 32);
  if (v25 > 63) {
    bzero(v28, ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v28 = -1 << v25;
  }
  *(void *)(v2 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_1003256B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_100094134(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v30;
                uint64_t v29 = 1 << *(unsigned char *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v29;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void *)(*(void *)(v4 + 48) + 8 * v17);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v6 + 40));
      uint64_t v22 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v21;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

uint64_t sub_100325950(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_100094134(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    int64_t v31 = v2;
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }
      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_33;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_33;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                uint64_t v3 = v31;
                uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_39;
                  }
                  if (v14 >= v11) {
                    goto LABEL_33;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v14 = v20;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      uint64_t v21 = *(void **)(*(void *)(v4 + 48) + 8 * v17);
      Hasher.init(_seed:)();
      id v22 = v21;
      NSObject.hash(into:)();

      uint64_t result = Hasher._finalize()();
      uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v6;
  return result;
}

unint64_t sub_100325C14(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100094134(a3);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_100325CC0(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int sub_100325D44(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_100321D70();
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (Swift::Int)sub_100328844();
      goto LABEL_22;
    }
    sub_100329B3C();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  unint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  Swift::Int *v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_100325EE0(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_10032415C(v11, a4, a5);
  }
  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_100328DA4(a4);
      goto LABEL_12;
    }
    sub_10032BC9C(v11, a4, a5);
  }
  uint64_t v12 = *v5;
  sub_100094134(a5);
  unint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v13 = -1 << *(unsigned char *)(v12 + 32);
  a2 = result & ~v13;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v14 = ~v13;
    do
    {
      unint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
      if (result) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }
    while (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v15 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v8;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v15 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100326074(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1003256B4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100329998(a4);
      goto LABEL_14;
    }
    sub_10032D098(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_1000963CC(0, a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

void sub_100326208(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, void (*a5)(void))
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1003256B4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100329998(a4);
      goto LABEL_14;
    }
    sub_10032D098(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    a5(0);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

uint64_t sub_100326394(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10032205C();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100911078);
      goto LABEL_12;
    }
    sub_100329DEC();
  }
  uint64_t v12 = *v3;
  sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100331C5C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100326650(void *a1, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_100325950(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100329998(a4);
      goto LABEL_14;
    }
    sub_10032D310(v11, a4);
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  id v13 = a1;
  NSObject.hash(into:)();

  Swift::Int v14 = Hasher._finalize()();
  uint64_t v15 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v14 & ~v15;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v25 = a5;
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    id v16 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v17 = static NSObject.== infix(_:_:)();

    if (v17)
    {
LABEL_13:
      sub_100094134(v25);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v18 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v18;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v19 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v20 = static NSObject.== infix(_:_:)();

        if (v20) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v21 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v21 + 48) + 8 * a2) = a1;
  uint64_t v22 = *(void *)(v21 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v24;
  }
}

uint64_t sub_100326818(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v7 = *(void *)(PredicateType - 8);
  __n128 v8 = __chkstk_darwin(PredicateType);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100322458();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType, &qword_1009110A8);
      goto LABEL_12;
    }
    sub_10032A19C();
  }
  uint64_t v13 = *v3;
  sub_100331C5C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    char v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, PredicateType);
      sub_100331C5C((unint64_t *)&qword_100914720, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, PredicateType);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, PredicateType, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100326AD4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100322854();
  }
  else
  {
    if (v11 > v10)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList, &qword_100913E08);
      goto LABEL_12;
    }
    sub_10032A54C();
  }
  uint64_t v12 = *v3;
  sub_100331C5C(&qword_10090B6E8, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100331C5C(&qword_100913E00, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100326D90(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for REMAccountsListDataView.CachableProperty();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100322C50();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.CachableProperty, &qword_1009146F0);
      goto LABEL_12;
    }
    sub_10032A8FC();
  }
  uint64_t v13 = *v3;
  sub_100331C5C(&qword_1009146E0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100331C5C(&qword_1009146E8, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10032704C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  if (a3)
  {
    sub_100323058();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_100329998((uint64_t *)&unk_100914A30);
LABEL_22:
      uint64_t v25 = *v4;
      *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(void *)(*(void *)(v25 + 48) + 8 * a2) = v6;
      uint64_t v26 = *(void *)(v25 + 16);
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (!v27)
      {
        *(void *)(v25 + 16) = v28;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_10032ACAC();
  }
  uint64_t v9 = *v3;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    uint64_t v18 = ~v11;
    do
    {
      a2 = (a2 + 1) & v18;
      if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
      if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22) {
        goto LABEL_25;
      }
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    while ((v24 & 1) == 0);
  }
LABEL_26:
  type metadata accessor for URLResourceKey(0);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10032728C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for Calendar.Component();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  Swift::Int v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10032336C();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for Calendar.Component, (uint64_t *)&unk_1009140C0);
      goto LABEL_12;
    }
    sub_10032AF8C();
  }
  uint64_t v13 = *v3;
  sub_100331C5C(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100331C5C(&qword_1009140B8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100327548(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_100323ADC();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100328C0C();
      goto LABEL_14;
    }
    sub_10032B688();
  }
  uint64_t v8 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

uint64_t sub_10032766C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100323D60();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for URL, (uint64_t *)&unk_1009149E8);
      goto LABEL_12;
    }
    sub_10032B8EC();
  }
  uint64_t v13 = *v3;
  sub_100331C5C(&qword_10090F228, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100331C5C(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100327928(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v32 = a1;
  uint64_t v6 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = *(void *)(*v3 + 16);
  unint64_t v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  uint64_t v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_100324450();
  }
  else
  {
    if (v12 > v11)
    {
      sub_100328F48((uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline, &qword_100914838);
      goto LABEL_12;
    }
    sub_10032BF60();
  }
  uint64_t v13 = *v3;
  sub_100331C5C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  uint64_t v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      sub_100331C5C(&qword_100914830, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_100327BE4(void *a1, Swift::UInt a2, unint64_t a3, char a4)
{
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 > v8 && (a4 & 1) != 0) {
    goto LABEL_14;
  }
  if (a4)
  {
    sub_10032484C();
  }
  else
  {
    if (v9 > v8)
    {
      sub_1003291F8();
      goto LABEL_14;
    }
    sub_10032C310();
  }
  uint64_t v10 = *v4;
  Hasher.init(_seed:)();
  id v11 = a1;
  NSObject.hash(into:)();

  Hasher._combine(_:)(a2);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  a3 = v12 & ~v13;
  if ((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = ~v13;
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    while (1)
    {
      uint64_t v15 = *(void *)(v10 + 48) + 16 * a3;
      uint64_t v16 = *(void *)(v15 + 8);
      id v17 = *(id *)v15;
      char v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) != 0 && v16 == a2) {
        break;
      }
      a3 = (a3 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
        goto LABEL_14;
      }
    }
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  uint64_t v19 = *v24;
  *(void *)(*v24 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v20 = (void *)(*(void *)(v19 + 48) + 16 * a3);
  *uint64_t v20 = a1;
  v20[1] = a2;
  uint64_t v21 = *(void *)(v19 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v19 + 16) = v23;
  }
}

void sub_100327D9C(Swift::UInt a1, void *a2, void *a3, unint64_t a4, char a5)
{
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0) {
    goto LABEL_16;
  }
  if (a5)
  {
    sub_100324B40();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1003293AC();
      goto LABEL_16;
    }
    sub_10032C5D0();
  }
  uint64_t v12 = *v5;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  id v13 = a2;
  id v14 = a3;
  NSObject.hash(into:)();
  id v15 = v14;
  NSObject.hash(into:)();

  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v12 + 32);
  a4 = v16 & ~v17;
  if ((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4))
  {
    uint64_t v18 = ~v17;
    do
    {
      uint64_t v19 = (void *)(*(void *)(v12 + 48) + 24 * a4);
      if (*v19 == a1)
      {
        uint64_t v20 = (void *)v19[1];
        uint64_t v21 = (void *)v19[2];
        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        id v22 = v20;
        id v23 = v21;
        if (static NSObject.== infix(_:_:)())
        {
          char v24 = static NSObject.== infix(_:_:)();

          if (v24)
          {
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            break;
          }
        }
        else
        {
        }
      }
      a4 = (a4 + 1) & v18;
    }
    while (((*(void *)(v12 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_16:
  uint64_t v25 = *v30;
  *(void *)(*v30 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  uint64_t v26 = (Swift::UInt *)(*(void *)(v25 + 48) + 24 * a4);
  *uint64_t v26 = a1;
  v26[1] = (Swift::UInt)a2;
  void v26[2] = (Swift::UInt)a3;
  uint64_t v27 = *(void *)(v25 + 16);
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28) {
    __break(1u);
  }
  else {
    *(void *)(v25 + 16) = v29;
  }
}

uint64_t sub_100327FBC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v35 = a1;
  uint64_t v33 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v6 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v31 - v10;
  __chkstk_darwin(v12);
  id v14 = (char *)&v31 - v13;
  unint64_t v15 = *(void *)(*v3 + 16);
  unint64_t v16 = *(void *)(*v3 + 24);
  uint64_t v31 = v6;
  uint64_t v32 = v3;
  if (v16 > v15 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  if (a3)
  {
    sub_100324E9C();
  }
  else
  {
    if (v16 > v15)
    {
      sub_100329588();
      goto LABEL_15;
    }
    sub_10032C8FC();
  }
  uint64_t v17 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Date();
  sub_100331C5C(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v18 = Hasher._finalize()();
  uint64_t v19 = -1 << *(unsigned char *)(v17 + 32);
  a2 = v18 & ~v19;
  uint64_t v34 = v17;
  uint64_t v20 = v17 + 56;
  if ((*(void *)(v20 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v21 = ~v19;
    uint64_t v22 = *(void *)(v6 + 72);
    uint64_t v23 = v35;
    do
    {
      sub_1003324B0(*(void *)(v34 + 48) + v22 * a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      char v24 = static UUID.== infix(_:_:)();
      sub_1003324B0((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      sub_1003324B0(v23, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
      if (v24)
      {
        char v25 = static Date.== infix(_:_:)();
        sub_100128138((uint64_t)v8);
        sub_100128138((uint64_t)v11);
        sub_100128138((uint64_t)v14);
        if (v25)
        {
          ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          break;
        }
      }
      else
      {
        sub_100128138((uint64_t)v8);
        sub_100128138((uint64_t)v11);
        sub_100128138((uint64_t)v14);
      }
      a2 = (a2 + 1) & v21;
    }
    while (((*(void *)(v20 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  uint64_t v26 = *v32;
  *(void *)(*v32 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = sub_100332518(v35, *(void *)(v26 + 48) + *(void *)(v31 + 72) * a2, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
  uint64_t v28 = *(void *)(v26 + 16);
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29) {
    __break(1u);
  }
  else {
    *(void *)(v26 + 16) = v30;
  }
  return result;
}

void sub_10032833C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if (a3)
  {
    sub_1003256B4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100329998(a4);
      goto LABEL_14;
    }
    sub_10032D098(v11, a4);
  }
  uint64_t v12 = *v5;
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_100094134(a5);
    id v15 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v12 + 48) + 8 * a2);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v20 + 48) + 8 * a2) = a1;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v23;
  }
}

Swift::Int sub_1003284C4(Swift::Int result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      sub_1003252F0();
    }
    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_1003297F8();
        goto LABEL_28;
      }
      sub_10032CD0C();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
    a2 = result & ~v9;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v10 = ~v9;
      uint64_t v11 = v5;
      while (2)
      {
        unint64_t v12 = 0xD000000000000030;
        unint64_t v13 = 0x80000001007C7430;
        switch(*(unsigned char *)(*(void *)(v8 + 48) + a2))
        {
          case 1:
            unint64_t v12 = 0xD00000000000002DLL;
            uint64_t v14 = "butesAutoTrainer";
            goto LABEL_15;
          case 2:
            unint64_t v12 = 0xD000000000000034;
            uint64_t v14 = "d.ICCloudConfigurationUpdater";
            goto LABEL_15;
          case 3:
            unint64_t v12 = 0xD000000000000031;
            uint64_t v14 = "atchUpSyncController";
LABEL_15:
            unint64_t v13 = (unint64_t)v14 | 0x8000000000000000;
            break;
          case 4:
            unint64_t v13 = 0x80000001007C7520;
            unint64_t v12 = 0xD00000000000001BLL;
            break;
          default:
            break;
        }
        unint64_t v15 = 0xD000000000000030;
        unint64_t v16 = 0x80000001007C7430;
        switch(v11)
        {
          case 1:
            unint64_t v17 = 0xD00000000000002DLL;
            id v18 = "butesAutoTrainer";
            goto LABEL_24;
          case 2:
            unint64_t v15 = 0xD000000000000034;
            unint64_t v16 = 0x80000001007C74A0;
            goto LABEL_21;
          case 3:
            unint64_t v17 = 0xD000000000000031;
            id v18 = "atchUpSyncController";
LABEL_24:
            unint64_t v16 = (unint64_t)v18 | 0x8000000000000000;
            if (v12 == v17) {
              goto LABEL_25;
            }
            goto LABEL_26;
          case 4:
            unint64_t v16 = 0x80000001007C7520;
            if (v12 != 0xD00000000000001BLL) {
              goto LABEL_26;
            }
            goto LABEL_25;
          default:
LABEL_21:
            if (v12 != v15) {
              goto LABEL_26;
            }
LABEL_25:
            if (v13 == v16) {
              goto LABEL_31;
            }
LABEL_26:
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v19) {
              goto LABEL_32;
            }
            a2 = (a2 + 1) & v10;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              break;
            }
            continue;
        }
        break;
      }
    }
  }
LABEL_28:
  uint64_t v20 = *v24;
  *(void *)(*v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v20 + 48) + a2) = v25;
  uint64_t v21 = *(void *)(v20 + 16);
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
LABEL_31:
    swift_bridgeObjectRelease_n();
LABEL_32:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100328808);
  }
  *(void *)(v20 + 16) = v23;
  return result;
}

void *sub_100328844()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009139A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    char v19 = (void *)(*(void *)(v4 + 48) + v16);
    *char v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1003289F8()
{
  return sub_100329998(&qword_1009139D8);
}

id sub_100328A04()
{
  return sub_100329998(&qword_1009110B8);
}

void *sub_100328A10()
{
  return sub_100328F48((uint64_t (*)(void))&type metadata accessor for UUID, &qword_100911078);
}

id sub_100328A30()
{
  return sub_100329998(&qword_1009145B0);
}

void *sub_100328A3C()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009147C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v17 + 24);
    uint64_t v19 = *(void *)(v4 + 48) + v16;
    long long v20 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v19 = *(void *)v17;
    *(_OWORD *)(v19 + 8) = v20;
    *(void *)(v19 + 24) = v18;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100328C0C()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009149B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100328DA4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(void *)(*(void *)(v5 + 48) + 8 * v16) = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    uint64_t result = (void *)swift_retain();
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v7 + 8 * v19);
  if (v18)
  {
    int64_t v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v10);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100328F48(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - v7;
  sub_100094134(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }
  uint64_t result = (void *)(v10 + 56);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  uint64_t v26 = v4;
  uint64_t v27 = (const void *)(v9 + 56);
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v13) {
    uint64_t result = memmove(result, v27, 8 * v13);
  }
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 56);
  int64_t v28 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v22 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v22);
    ++v15;
    if (!v23)
    {
      int64_t v15 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v23 = *((void *)v27 + v15);
      if (!v23)
      {
        int64_t v15 = v22 + 2;
        if (v22 + 2 >= v28) {
          goto LABEL_28;
        }
        unint64_t v23 = *((void *)v27 + v15);
        if (!v23) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v28)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v4 = v26;
    goto LABEL_30;
  }
  unint64_t v23 = *((void *)v27 + v24);
  if (v23)
  {
    int64_t v15 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v15 >= v28) {
      goto LABEL_28;
    }
    unint64_t v23 = *((void *)v27 + v15);
    ++v24;
    if (v23) {
      goto LABEL_27;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1003291F8()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_1009143B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    unint64_t v19 = *(void **)v17;
    uint64_t v18 = *(void *)(v17 + 8);
    unint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v20 = v19;
    v20[1] = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_1003293AC()
{
  uint64_t v1 = v0;
  sub_100094134((uint64_t *)&unk_100910FA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + v16;
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v23 = *(_OWORD *)(v17 + 8);
    *(void *)uint64_t v18 = *(void *)v17;
    *(_OWORD *)(v18 + 8) = v23;
    id v19 = (id)v23;
    id result = *((id *)&v23 + 1);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100329588()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_100913BD0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (void *)swift_release();
LABEL_27:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v24 = v1;
  id result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v10 + 8 * v11) {
    id result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 56);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v20);
    ++v12;
    if (!v21)
    {
      int64_t v12 = v20 + 1;
      if (v20 + 1 >= v16) {
        goto LABEL_25;
      }
      unint64_t v21 = *(void *)(v10 + 8 * v12);
      if (!v21)
      {
        int64_t v12 = v20 + 2;
        if (v20 + 2 >= v16) {
          goto LABEL_25;
        }
        unint64_t v21 = *(void *)(v10 + 8 * v12);
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v3 + 72) * v18;
    sub_1003324B0(*(void *)(v6 + 48) + v19, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    id result = (void *)sub_100332518((uint64_t)v5, *(void *)(v8 + 48) + v19, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v16)
  {
LABEL_25:
    id result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v10 + 8 * v22);
  if (v21)
  {
    int64_t v12 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_25;
    }
    unint64_t v21 = *(void *)(v10 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_1003297F8()
{
  uint64_t v1 = v0;
  sub_100094134(&qword_100913A80);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_10032998C()
{
  return sub_100329998((uint64_t *)&unk_1009149A8);
}

id sub_100329998(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100094134(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    int64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    id result = v18;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v14) {
    goto LABEL_28;
  }
  unint64_t v20 = *(void *)(v7 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100329B3C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009139A0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100329DEC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134(&qword_100911078);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032A19C()
{
  uint64_t v1 = v0;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134(&qword_1009110A8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, PredicateType);
    sub_100331C5C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, PredicateType);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032A54C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134(&qword_100913E08);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C(&qword_10090B6E8, (void (*)(uint64_t))&type metadata accessor for REMManualOrdering.PinnedList);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032A8FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for REMAccountsListDataView.CachableProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134(&qword_1009146F0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C(&qword_1009146E0, (void (*)(uint64_t))&type metadata accessor for REMAccountsListDataView.CachableProperty);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032ACAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134((uint64_t *)&unk_100914A30);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  unint64_t v27 = v0;
  uint64_t v28 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v14 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v13);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v18 = v17;
    String.hash(into:)();
    Swift::Int v19 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v27;
    goto LABEL_35;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v29) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032AF8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134((uint64_t *)&unk_1009140C0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032B33C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009147C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_40:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v30 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v15 >= v31) {
      goto LABEL_38;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v31) {
        goto LABEL_38;
      }
      unint64_t v16 = *(void *)(v30 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v31) {
          goto LABEL_38;
        }
        unint64_t v16 = *(void *)(v30 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    unint64_t v18 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = v18[2];
    uint64_t v22 = v18[3];
    Hasher.init(_seed:)();
    if (v19)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v22) {
        goto LABEL_26;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_bridgeObjectRetain();
      if (v22)
      {
LABEL_26:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    Hasher._combine(_:)(0);
LABEL_29:
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v24) & ~*(void *)(v8 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v8 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v11 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    unint64_t v12 = (void *)(*(void *)(v4 + 48) + 32 * v11);
    void *v12 = v20;
    v12[1] = v19;
    void v12[2] = v21;
    v12[3] = v22;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_38:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_40;
  }
  unint64_t v16 = *(void *)(v30 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v31) {
      goto LABEL_38;
    }
    unint64_t v16 = *(void *)(v30 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10032B688()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009149B8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  char v26 = v1;
  int64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      int64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        int64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032B8EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134((uint64_t *)&unk_1009149E8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C(&qword_10090F228, (void (*)(uint64_t))&type metadata accessor for URL);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032BC9C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *v3;
  sub_100094134(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v28 = v5 + 56;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 56);
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v29) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v17);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v28 + 8 * v13);
      if (!v18)
      {
        int64_t v13 = v17 + 2;
        if (v17 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v28 + 8 * v13);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_24:
    uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
    swift_retain();
    sub_100094134(a3);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v21 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v22) & ~*(void *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
    ++*(void *)(v7 + 16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v28 + 8 * v19);
  if (v18)
  {
    int64_t v13 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v13 >= v29) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v28 + 8 * v13);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032BF60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_100094134(&qword_100914838);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_100331C5C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032C310()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_1009143B8);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  unint64_t v30 = v0;
  int64_t v31 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    uint64_t v19 = *(void *)(v2 + 48) + 16 * v15;
    int64_t v20 = *(void **)v19;
    Swift::UInt v21 = *(void *)(v19 + 8);
    Hasher.init(_seed:)();
    id v22 = v20;
    NSObject.hash(into:)();

    Hasher._combine(_:)(v21);
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v24) & ~*(void *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v22;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032C5D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134((uint64_t *)&unk_100910FA0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v32 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v13 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v33) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v15);
    ++v10;
    if (!v16)
    {
      int64_t v10 = v15 + 1;
      if (v15 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v10);
      if (!v16)
      {
        int64_t v10 = v15 + 2;
        if (v15 + 2 >= v33) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v32 + 8 * v10);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_24:
    uint64_t v18 = *(void *)(v2 + 48) + 24 * v14;
    Swift::UInt v19 = *(void *)v18;
    long long v34 = *(_OWORD *)(v18 + 8);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    id v20 = (id)v34;
    id v21 = *((id *)&v34 + 1);
    id v22 = v20;
    id v23 = v21;
    NSObject.hash(into:)();
    id v24 = v23;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v8 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v8 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    uint64_t v12 = *(void *)(v4 + 48) + 24 * v11;
    *(void *)uint64_t v12 = v19;
    *(_OWORD *)(v12 + 8) = v34;
    ++*(void *)(v4 + 16);
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v33)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    goto LABEL_35;
  }
  unint64_t v16 = *(void *)(v32 + 8 * v17);
  if (v16)
  {
    int64_t v10 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v10 >= v33) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v10);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032C8FC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v32 = *(void *)(v2 - 8);
  uint64_t v33 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  sub_100094134((uint64_t *)&unk_100913BD0);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 56);
  unint64_t v29 = v0;
  uint64_t v30 = v5 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  int64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v31) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v30 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v31) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v30 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    uint64_t v21 = *(void *)(v32 + 72);
    sub_1003324B0(*(void *)(v5 + 48) + v21 * v17, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_100331C5C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Date();
    sub_100331C5C(&qword_100913BC8, (void (*)(uint64_t))&type metadata accessor for Date);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = sub_100332518((uint64_t)v4, *(void *)(v7 + 48) + v15 * v21, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
    ++*(void *)(v7 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v31)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v29;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v30 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v31) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v30 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032CD0C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100094134(&qword_100913A80);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_36;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v26 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v27 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v15 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      goto LABEL_33;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_37;
    }
    if (v17 >= v27) {
      break;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v27) {
        break;
      }
      unint64_t v18 = *(void *)(v26 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v27) {
          break;
        }
        unint64_t v18 = *(void *)(v26 + 8 * v9);
        if (!v18)
        {
          int64_t v19 = v17 + 3;
          if (v19 >= v27) {
            break;
          }
          unint64_t v18 = *(void *)(v26 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v9 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_38;
              }
              if (v9 >= v27) {
                goto LABEL_34;
              }
              unint64_t v18 = *(void *)(v26 + 8 * v9);
              ++v19;
              if (v18) {
                goto LABEL_32;
              }
            }
          }
          int64_t v9 = v19;
        }
      }
    }
LABEL_32:
    unint64_t v7 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_33:
    char v24 = *(unsigned char *)(*(void *)(v2 + 48) + v16);
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v12 = v10 & ~v11;
    unint64_t v13 = v12 >> 6;
    if (((-1 << v12) & ~*(void *)(v8 + 8 * (v12 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v12) & ~*(void *)(v8 + 8 * (v12 >> 6)))) | v12 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v20 = 0;
    unint64_t v21 = (unint64_t)(63 - v11) >> 6;
    do
    {
      if (++v13 == v21 && (v20 & 1) != 0)
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        JUMPOUT(0x10032D084);
      }
      BOOL v22 = v13 == v21;
      if (v13 == v21) {
        unint64_t v13 = 0;
      }
      v20 |= v22;
      uint64_t v23 = *(void *)(v8 + 8 * v13);
    }
    while (v23 == -1);
    unint64_t v14 = __clz(__rbit64(~v23)) + (v13 << 6);
LABEL_8:
    *(void *)(v8 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(unsigned char *)(*(void *)(v4 + 48) + v14) = v24;
    ++*(void *)(v4 + 16);
  }
LABEL_34:
  uint64_t result = swift_release_n();
  uint64_t v1 = v0;
LABEL_36:
  *uint64_t v1 = v4;
  return result;
}

uint64_t sub_10032D098(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_100094134(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void *)(v6 + 40);
    id v22 = *(id *)(*(void *)(v4 + 48) + 8 * v17);
    uint64_t result = NSObject._rawHashValue(seed:)(v21);
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10032D310(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  sub_100094134(a2);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v3 = v6;
    return result;
  }
  uint64_t v30 = v2;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = v4 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1 << v7);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    Swift::Int v21 = *(void **)(*(void *)(v4 + 48) + 8 * v17);
    Hasher.init(_seed:)();
    id v22 = v21;
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v28 = v25 == v27;
        if (v25 == v27) {
          unint64_t v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v6 + 48) + 8 * v15) = v22;
    ++*(void *)(v6 + 16);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v3 = v30;
    goto LABEL_35;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v14 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v14 >= v11) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v14);
    ++v20;
    if (v19) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t (*sub_10032D5A4(void (**a1)(id *), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10032D790(v6, a2, a3);
  return sub_10032D60C;
}

uint64_t (*sub_10032D610(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10032D810(v6, a2, a3);
  return sub_10032D60C;
}

uint64_t (*sub_10032D678(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10032D898(v6, a2, a3);
  return sub_10032D60C;
}

uint64_t (*sub_10032D6E0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_10032D918(v6, a2, a3);
  return sub_10032D60C;
}

void sub_10032D748(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_10032D790(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return j__s7remindd24RDSavedDueDateDeltaAlertVwxx;
  }
  __break(1u);
  return result;
}

void (*sub_10032D810(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for RDSavedDueDateDeltaAlert;
  }
  __break(1u);
  return result;
}

void destroy for RDSavedDueDateDeltaAlert(id *a1)
{
}

uint64_t (*sub_10032D898(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_100332FE8;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_10032D918(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return sub_10032D998;
  }
  __break(1u);
  return result;
}

uint64_t sub_10032D998()
{
  return swift_release();
}

Swift::Int sub_10032D9A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100094134(&qword_1009139A0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        unint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      Swift::Int v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      void *v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10032DB44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10032DC38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100094134(&qword_100914860);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (double *)(a1 + 40); ; i += 2)
    {
      double v5 = *(i - 1);
      double v6 = *i;
      unint64_t result = sub_100307964(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      uint64_t v10 = v3[2];
      BOOL v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

void *sub_10032DD10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  double v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100094134((uint64_t *)&unk_1009140C0);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    int64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100331C5C(&qword_1009140B0, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100331C5C(&qword_1009140B8, (void (*)(uint64_t))&type metadata accessor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        unint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_10032E028(uint64_t a1, void *a2)
{
  return sub_10032F610(a1, a2, (uint64_t *)&unk_100914200, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E03C(uint64_t a1, void *a2)
{
  return sub_10032F610(a1, a2, &qword_100914760, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E050(uint64_t a1, char a2)
{
  return sub_10032F874(a1, a2, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E068(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913A10);
}

uint64_t sub_10032E07C(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_100913A10);
}

uint64_t sub_10032E088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_100913A10);
}

uint64_t sub_10032E094(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_10090FF50);
}

uint64_t sub_10032E0A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E80;
  uint64_t v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v9)
  {
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    *(void *)(v7 + 88) = sub_100094134(a3);
    uint64_t v10 = sub_1000C1FE8((uint64_t *)(v7 + 64));
    sub_1000BF710(a2, (uint64_t)v10, a3);
    NSString v11 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [self predicateWithFormat:v11 argumentArray:isa];

    sub_1000966BC(a2, a3);
    return (uint64_t)v13;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v15._object = (void *)0x80000001007CAF70;
    v15._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v15);
    sub_100094134(a4);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032E278(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_10090FF50);
}

uint64_t sub_10032E284(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100916E60);
}

uint64_t sub_10032E298(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E2AC(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E2B8(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909A40, (uint64_t *)&unk_10090B070);
}

uint64_t sub_10032E2CC(uint64_t a1, uint64_t a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 88) = &type metadata for Int64;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = a2;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    return (uint64_t)v8;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v10._object = (void *)0x80000001007CAF70;
    v10._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v10);
    sub_100094134((uint64_t *)&unk_10090B070);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032E468(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10032E560(uint64_t a1, char a2)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100776E80;
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v5;
    *(void *)(v3 + 88) = sub_100094134((uint64_t *)&unk_10091DD70);
    *(unsigned char *)(v3 + 64) = a2;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    return (uint64_t)v8;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v10._object = (void *)0x80000001007CAF70;
    v10._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v10);
    sub_100094134((uint64_t *)&unk_10090B070);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032E704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_10090FEB0);
}

uint64_t sub_10032E710(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_10090FEB0);
}

unint64_t sub_10032E71C(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      sub_100094134((uint64_t *)&unk_100913950);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      unint64_t v19 = v1;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v4) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  unint64_t v19 = v1;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v6 = 0;
  uint64_t v7 = v3 + 56;
  uint64_t v18 = v4;
  while ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v8 = result;
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9) {
      goto LABEL_25;
    }
LABEL_17:
    sub_100094134((uint64_t *)&unk_10090B070);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v10 = -1 << v3[32];
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)&v7[8 * (v11 >> 6)];
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      uint64_t v15 = ~v10;
      while (1)
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v11 = (v11 + 1) & v15;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)&v7[8 * (v11 >> 6)];
        uint64_t v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0)
        {
          uint64_t v4 = v18;
          goto LABEL_22;
        }
      }
      uint64_t result = swift_release();
      uint64_t v4 = v18;
      if (v6 == v18) {
        return (unint64_t)v3;
      }
    }
    else
    {
LABEL_22:
      *(void *)&v7[8 * v12] = v14 | v13;
      *(void *)(*((void *)v3 + 6) + 8 * v11) = v8;
      uint64_t v16 = *((void *)v3 + 2);
      BOOL v9 = __OFADD__(v16, 1);
      uint64_t v17 = v16 + 1;
      if (v9) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v17;
      if (v6 == v4) {
        return (unint64_t)v3;
      }
    }
  }
  if (v6 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_27;
  }
  unint64_t v8 = *(void *)(v19 + 32 + 8 * v6);
  uint64_t result = swift_retain();
  BOOL v9 = __OFADD__(v6++, 1);
  if (!v9) {
    goto LABEL_17;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10032E980(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_10090F508);
}

void sub_10032E994(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100094134(&qword_1009110B8);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = (char *)(v3 + 7);
  uint64_t v42 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
      uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for REMObjectID_Codable();
        id v18 = *(id *)(v3[6] + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v7[8 * v15] = v17 | v16;
      *(void *)(v3[6] + 8 * v14) = v11;
      uint64_t v23 = v3[2];
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_37;
      }
      v3[2] = v24;
LABEL_12:
      if (v8 == v42) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v41 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v41)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(a1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for REMObjectID_Codable();
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_23;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(v3[6] + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v5 = v42;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v5 = v42;
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_24:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10032ECEC(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, (uint64_t *)&unk_100913AB0);
}

uint64_t sub_10032ECF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, (uint64_t *)&unk_100913AB0);
}

uint64_t sub_10032ED04(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, (uint64_t *)&unk_100913AB0);
}

uint64_t sub_10032ED18(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, (uint64_t *)&unk_100914680);
}

uint64_t sub_10032ED24(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_10090FF80);
}

uint64_t sub_10032ED38(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913AA0);
}

uint64_t sub_10032ED4C(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, (uint64_t *)&unk_100913A88);
}

uint64_t sub_10032ED60(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_100913B78);
}

uint64_t sub_10032ED6C(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913B78);
}

uint64_t sub_10032ED80(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_100913B50);
}

uint64_t sub_10032ED8C(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913B50);
}

uint64_t sub_10032EDA0(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_10090DC60);
}

uint64_t sub_10032EDAC(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_10090DC60);
}

uint64_t sub_10032EDC0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100094134(&qword_1009147A0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10032EECC(unint64_t a1)
{
}

void sub_10032EEE8(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9)
    {
LABEL_3:
      sub_100094134(a2);
      unint64_t v6 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v5) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v6 = &_swiftEmptySetSingleton;
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v5) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return;
  }
LABEL_9:
  BOOL v10 = (char *)(v6 + 7);
  uint64_t v46 = v8;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_36;
      }
      uint64_t v14 = v12;
      Swift::Int v15 = NSObject._rawHashValue(seed:)(v6[5]);
      uint64_t v16 = -1 << *((unsigned char *)v6 + 32);
      unint64_t v17 = v15 & ~v16;
      unint64_t v18 = v17 >> 6;
      uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
      uint64_t v20 = 1 << v17;
      if (((1 << v17) & v19) != 0)
      {
        sub_1000963CC(0, a3);
        id v21 = *(id *)(v6[6] + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)();

        if (v22)
        {
LABEL_11:
          swift_unknownObjectRelease();
          goto LABEL_12;
        }
        uint64_t v23 = ~v16;
        while (1)
        {
          unint64_t v17 = (v17 + 1) & v23;
          unint64_t v18 = v17 >> 6;
          uint64_t v19 = *(void *)&v10[8 * (v17 >> 6)];
          uint64_t v20 = 1 << v17;
          if ((v19 & (1 << v17)) == 0) {
            break;
          }
          id v24 = *(id *)(v6[6] + 8 * v17);
          char v25 = static NSObject.== infix(_:_:)();

          if (v25) {
            goto LABEL_11;
          }
        }
      }
      *(void *)&v10[8 * v18] = v20 | v19;
      *(void *)(v6[6] + 8 * v17) = v14;
      uint64_t v26 = v6[2];
      BOOL v13 = __OFADD__(v26, 1);
      uint64_t v27 = v26 + 1;
      if (v13) {
        goto LABEL_37;
      }
      v6[2] = v27;
LABEL_12:
      if (v11 == v46) {
        return;
      }
    }
  }
  uint64_t v28 = 0;
  uint64_t v44 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v28 != v44)
  {
    Swift::Int v29 = v6[5];
    id v30 = *(id *)(a1 + 32 + 8 * v28);
    Swift::Int v31 = NSObject._rawHashValue(seed:)(v29);
    uint64_t v32 = -1 << *((unsigned char *)v6 + 32);
    unint64_t v33 = v31 & ~v32;
    unint64_t v34 = v33 >> 6;
    uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
    uint64_t v36 = 1 << v33;
    if (((1 << v33) & v35) != 0)
    {
      sub_1000963CC(0, a3);
      id v37 = *(id *)(v6[6] + 8 * v33);
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_23;
      }
      uint64_t v39 = ~v32;
      unint64_t v33 = (v33 + 1) & v39;
      unint64_t v34 = v33 >> 6;
      uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
      uint64_t v36 = 1 << v33;
      if ((v35 & (1 << v33)) != 0)
      {
        while (1)
        {
          id v40 = *(id *)(v6[6] + 8 * v33);
          char v41 = static NSObject.== infix(_:_:)();

          if (v41) {
            break;
          }
          unint64_t v33 = (v33 + 1) & v39;
          unint64_t v34 = v33 >> 6;
          uint64_t v35 = *(void *)&v10[8 * (v33 >> 6)];
          uint64_t v36 = 1 << v33;
          if ((v35 & (1 << v33)) == 0) {
            goto LABEL_31;
          }
        }
LABEL_23:

        uint64_t v8 = v46;
        goto LABEL_24;
      }
LABEL_31:
      uint64_t v8 = v46;
    }
    *(void *)&v10[8 * v34] = v36 | v35;
    *(void *)(v6[6] + 8 * v33) = v30;
    uint64_t v42 = v6[2];
    BOOL v13 = __OFADD__(v42, 1);
    uint64_t v43 = v42 + 1;
    if (v13) {
      goto LABEL_38;
    }
    v6[2] = v43;
LABEL_24:
    if (++v28 == v8) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t sub_10032F24C(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_1009139F0);
}

uint64_t sub_10032F260(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100094134(&qword_10090F7B8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10032F36C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10032F458(uint64_t a1)
{
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  unint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    BOOL v13 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, PredicateType, v7);
      sub_10031E220((uint64_t)v9, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v9, PredicateType);
      v14 += v15;
      --v10;
    }
    while (v10);
  }
}

uint64_t sub_10032F5A0(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913A30);
}

uint64_t sub_10032F5B4(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_100913980);
}

uint64_t sub_10032F5C0(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913980);
}

uint64_t sub_10032F5D4(uint64_t a1, void *a2)
{
  return sub_10032F610(a1, a2, (uint64_t *)&unk_10090AF30, &qword_100914620);
}

uint64_t sub_10032F5E8(uint64_t a1, void *a2)
{
  return sub_10032F610(a1, a2, (uint64_t *)&unk_10090AF30, &qword_100913980);
}

uint64_t sub_10032F5FC(uint64_t a1, void *a2)
{
  return sub_10032F610(a1, a2, (uint64_t *)&unk_10090AF30, (uint64_t *)&unk_100914540);
}

uint64_t sub_10032F610(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E80;
  uint64_t v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v9)
  {
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    *(void *)(v7 + 88) = sub_100094134(a3);
    *(void *)(v7 + 64) = a2;
    id v10 = a2;
    NSString v11 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v13 = [self predicateWithFormat:v11 argumentArray:isa];

    return (uint64_t)v13;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v15._object = (void *)0x80000001007CAF70;
    v15._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v15);
    sub_100094134(a4);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032F7C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_100913A98);
}

uint64_t sub_10032F7CC(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100913A98);
}

uint64_t sub_10032F7E0(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_100914468);
}

uint64_t sub_10032F7F4(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_1009145D8);
}

uint64_t sub_10032F808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_1009145D8);
}

uint64_t sub_10032F814(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_1009141B0);
}

uint64_t sub_10032F828(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, (uint64_t *)&unk_1009143E8);
}

uint64_t sub_10032F83C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_10090DC68);
}

uint64_t sub_10032F848(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, (uint64_t *)&unk_100914540);
}

uint64_t sub_10032F85C(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_1009141B0);
}

uint64_t sub_10032F868(uint64_t a1, char a2)
{
  return sub_10032F874(a1, a2, &qword_1009141B0);
}

uint64_t sub_10032F874(uint64_t a1, char a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    *(void *)(v5 + 88) = &type metadata for Bool;
    *(unsigned char *)(v5 + 64) = a2 & 1;
    NSString v8 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [self predicateWithFormat:v8 argumentArray:isa];

    return (uint64_t)v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001007CAF70;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032FA20(uint64_t a1, __int16 a2)
{
  return sub_10032FA2C(a1, a2, &qword_1009143E0);
}

uint64_t sub_10032FA2C(uint64_t a1, __int16 a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    *(void *)(v5 + 88) = &type metadata for Int16;
    *(_WORD *)(v5 + 64) = a2;
    NSString v8 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v10 = [self predicateWithFormat:v8 argumentArray:isa];

    return (uint64_t)v10;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v12._object = (void *)0x80000001007CAF70;
    v12._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v12);
    sub_100094134(a3);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10032FBD4(uint64_t a1, uint64_t a2)
{
  return sub_10032E0A8(a1, a2, (uint64_t *)&unk_100909E50, &qword_1009143E0);
}

uint64_t sub_10032FBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10032FBF4(a1, a2, a3, &qword_100914378);
}

uint64_t sub_10032FBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_100776E80;
  uint64_t v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v9)
  {
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v9;
    *(void *)(v7 + 88) = sub_100094134((uint64_t *)&unk_10090A4C0);
    *(void *)(v7 + 64) = a2;
    *(void *)(v7 + 72) = a3;
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = [self predicateWithFormat:v10 argumentArray:isa];

    return (uint64_t)v12;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v14._object = (void *)0x80000001007CAF70;
    v14._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v14);
    sub_100094134(a4);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

char *sub_10032FDAC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    uint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10032FE94(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100094134(&qword_10090F6D0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10032FFA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_100094134(&qword_100914350);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003300AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 24 * a1 + 32;
    unint64_t v7 = a3 + 24 * v5;
    if (v6 >= v7 || v6 + 24 * v5 <= a3)
    {
      sub_100094134(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1003301B8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003302A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330398(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330490(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330588(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100094134(&qword_100913B48);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330698(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_100094134(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003307A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100330898(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_100094134(&qword_100914A88);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1003309A8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100330A94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004C91F8(a1, a2, a3, a4, a5, 0);
  if (!v14) {
    return 0;
  }
  static String.Encoding.utf8.getter();
  uint64_t v15 = String.data(using:allowLossyConversion:)();
  unint64_t v17 = v16;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v17 >> 60 == 15) {
    return 0;
  }
  if (qword_1009072C8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_1009138D0);
  id v21 = a1;
  char v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    char v41 = (void *)swift_slowAlloc();
    id v43 = v41;
    *(_DWORD *)id v24 = 136315138;
    v39[1] = v24 + 4;
    id v40 = v24;
    id v25 = [v21 recordID];
    id v26 = [v25 ckShortDescription];

    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v29 = v28;

    uint64_t v42 = sub_1000C51B8(v27, v29, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Deserializing reminderIDsMergeableOrdering from readMaybeBigStringOrderedSet() {recordID: %s}", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v30 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v43 = 0;
  id v18 = [v30 reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:isa error:&v43];

  id v32 = v43;
  if (!v18)
  {
    unint64_t v33 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      id v43 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      uint64_t v42 = sub_1000C51B8(v37, v38, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to parse UUID strings JSON data {error: %s}", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100097F20(v15, v17);

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      sub_100097F20(v15, v17);
    }
    return 0;
  }
  return v18;
}

uint64_t sub_100330FB0()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x15) {
    return 21;
  }
  else {
    return v0;
  }
}

uint64_t sub_100331004(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_100094134(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10033110C(unint64_t a1)
{
}

uint64_t sub_100331128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10033121C(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100094134(&qword_100914290);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v7 = 0;
  uint64_t v8 = v3 + 56;
  unint64_t v21 = v1 & 0xC000000000000001;
  unint64_t v19 = v1 + 32;
  uint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
  while (v21)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v9 = result;
    BOOL v10 = __OFADD__(v7++, 1);
    if (v10) {
      goto LABEL_25;
    }
LABEL_18:
    type metadata accessor for AnyCancellable();
    sub_100331C5C(&qword_100914298, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v11 = -1 << v3[32];
    unint64_t v12 = result & ~v11;
    unint64_t v13 = v12 >> 6;
    uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
    uint64_t v15 = 1 << v12;
    if (((1 << v12) & v14) != 0)
    {
      uint64_t v16 = ~v11;
      sub_100331C5C(&qword_1009142A0, (void (*)(uint64_t))&type metadata accessor for AnyCancellable);
      while (1)
      {
        uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)();
        if (result) {
          break;
        }
        unint64_t v12 = (v12 + 1) & v16;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)&v8[8 * (v12 >> 6)];
        uint64_t v15 = 1 << v12;
        if ((v14 & (1 << v12)) == 0) {
          goto LABEL_22;
        }
      }
      uint64_t result = swift_release();
    }
    else
    {
LABEL_22:
      *(void *)&v8[8 * v13] = v15 | v14;
      *(void *)(*((void *)v3 + 6) + 8 * v12) = v9;
      uint64_t v17 = *((void *)v3 + 2);
      BOOL v10 = __OFADD__(v17, 1);
      uint64_t v18 = v17 + 1;
      if (v10) {
        goto LABEL_26;
      }
      *((void *)v3 + 2) = v18;
    }
    if (v7 == v5) {
      return (unint64_t)v3;
    }
  }
  if (v7 >= *(void *)(v20 + 16)) {
    goto LABEL_27;
  }
  unint64_t v9 = *(void *)(v19 + 8 * v7);
  uint64_t result = swift_retain();
  BOOL v10 = __OFADD__(v7++, 1);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1003314D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for NLTagScheme(0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003315D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003316D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_100094134(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003317DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003318D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100094134(&qword_100914140);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_1003319E0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_100331A1C(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_100331A40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v6._countAndFlagsBits = sub_10034D54C(a4);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4203808;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100776E80;
  swift_retain();
  uint64_t v9 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v10)
  {
    uint64_t v11 = v9;
    uint64_t v12 = v10;
    swift_release();
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 32) = v11;
    *(void *)(v8 + 40) = v12;
    *(void *)(v8 + 88) = sub_100094134((uint64_t *)&unk_10090A4C0);
    *(void *)(v8 + 64) = a2;
    *(void *)(v8 + 72) = a3;
    swift_bridgeObjectRetain();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = [self predicateWithFormat:v13 argumentArray:isa];

    return (uint64_t)v15;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v17._object = (void *)0x80000001007CAF70;
    v17._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v17);
    sub_100094134(&qword_100913A10);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100331C5C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100331CA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMSuggestedAttributeOutput.Pipeline();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_100094134(&qword_100914838);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    os_log_type_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    id v15 = (void (**)(char *, uint64_t))(v11 - 8);
    Swift::Int v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      sub_100331C5C(&qword_100914828, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v5, *(void *)(v9 + 48) + v18 * v14, v2);
          sub_100331C5C(&qword_100914830, (void (*)(uint64_t))&type metadata accessor for REMSuggestedAttributeOutput.Pipeline);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v24 = *v15;
          (*v15)(v5, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        id v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (void *)(*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return (void *)v9;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_100331FBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(sub_100094134(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100332114(unint64_t a1)
{
}

Swift::Int sub_100332130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100094134(&qword_100913A78);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(unsigned __int8 *)(v14 + v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(unsigned char *)(v14 + v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

Swift::Int sub_100332274(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100094134(&qword_1009142A8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1003323B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003324B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100332518(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100332580(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003326EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332724()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332734()
{
  return _swift_deallocObject(v0, 17, 7);
}

unsigned char **sub_100332744(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return sub_10008F258(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_10033274C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033275C()
{
  return sub_1000C5118(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100332764(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000C5140(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_10033276C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033277C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10033278C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1003327C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003327D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

id sub_1003327E0()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_1003327E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003327F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332808()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_100332830(uint64_t *a1, void **a2, uint64_t a3)
{
  sub_10030C164(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100332838()
{
  return sub_1002FEB30(*(void *)(v0 + 16), (uint64_t (*)())&Error.localizedDescription.getter);
}

uint64_t sub_100332868()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332878()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332888()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003328C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003328D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003328E0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003328F0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1003328F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332908()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332918()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332928()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332938(uint64_t *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  uint64_t v3 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v3;
  return result;
}

uint64_t sub_100332998()
{
  return sub_1002FEB74(*(void **)(v0 + 16));
}

uint64_t sub_1003329B4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003329C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003329D4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003329E8()
{
  return sub_1002FEAA8(*(void **)(v0 + 16));
}

uint64_t sub_100332A04()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332A3C()
{
  return sub_1002FEB30(*(void *)(v0 + 16), (uint64_t (*)())&Error.rem_errorDescription.getter);
}

uint64_t sub_100332A6C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332A7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332A8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332A9C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332AAC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332ABC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332ACC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332ADC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332AEC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332AFC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332B0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332B1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332B2C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332B3C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100332B4C()
{
  return String.init<A>(describing:)();
}

uint64_t sub_100332B80()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332B90()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332BA0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332BB0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332BC0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100332BD0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t _s6FieldsOwet_1(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6FieldsOwst_1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEB)
  {
    unsigned int v6 = ((a2 - 236) >> 8) + 1;
    *uint64_t result = a2 + 20;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100332D3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 20;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_1()
{
  return &_s6FieldsON_1;
}

unint64_t sub_100332D74(uint64_t a1)
{
  unint64_t result = sub_100332D9C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100332D9C()
{
  unint64_t result = qword_100914B20;
  if (!qword_100914B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914B20);
  }
  return result;
}

unint64_t sub_100332DF0(uint64_t a1)
{
  unint64_t result = sub_100332E18();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100332E18()
{
  unint64_t result = qword_100914B28;
  if (!qword_100914B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914B28);
  }
  return result;
}

uint64_t sub_100332E6C()
{
  return sub_1000967F4(&qword_100914B30, &qword_100914B38);
}

unint64_t sub_100332EAC()
{
  unint64_t result = qword_100914B40;
  if (!qword_100914B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914B40);
  }
  return result;
}

uint64_t sub_100332FEC()
{
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)(*(void *)v0 + 16) >= *(void *)(*(void *)v0 + 24) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();

  return specialized Array._endMutation()();
}

uint64_t sub_10033305C(uint64_t a1)
{
  return sub_100333AA8(a1, &qword_1009139D8, (void (*)(void))&type metadata accessor for REMObjectID_Codable, (unint64_t *)&unk_1009110C0, (void (*)(uint64_t))&type metadata accessor for REMObjectID_Codable);
}

uint64_t sub_100333098(uint64_t a1)
{
  uint64_t v58 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v50 = *(void *)(v58 - 8);
  uint64_t v2 = __chkstk_darwin(v58);
  unsigned int v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v61 = (uint64_t)&v46 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v57 = (char *)&v46 - v8;
  __chkstk_darwin(v7);
  uint64_t v55 = (uint64_t)&v46 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64_t v54 = (char *)&v46 - v15;
  uint64_t v59 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100094134((uint64_t *)&unk_100914BA0);
    uint64_t v16 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v16 = &_swiftEmptySetSingleton;
  }
  uint64_t v17 = *(void *)(v59 + 56);
  uint64_t v49 = v59 + 56;
  uint64_t v18 = -1 << *(unsigned char *)(v59 + 32);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v17;
  uint64_t v46 = -1 << *(unsigned char *)(v59 + 32);
  int64_t v48 = (unint64_t)(63 - v18) >> 6;
  uint64_t v52 = v11 + 32;
  uint64_t v53 = v11 + 16;
  uint64_t v51 = v11 + 48;
  uint64_t v47 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v21 = v16 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v60 = 0;
  uint64_t v56 = v4;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v60 << 6);
      goto LABEL_28;
    }
    int64_t v26 = v60 + 1;
    if (__OFADD__(v60, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v26 >= v48) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v49 + 8 * v26);
    int64_t v28 = v60 + 1;
    if (!v27)
    {
      int64_t v28 = v60 + 2;
      if (v60 + 2 >= v48) {
        goto LABEL_40;
      }
      unint64_t v27 = *(void *)(v49 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v60 + 3;
        if (v60 + 3 >= v48) {
          goto LABEL_40;
        }
        unint64_t v27 = *(void *)(v49 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v60 + 4;
          if (v60 + 4 >= v48) {
            goto LABEL_40;
          }
          unint64_t v27 = *(void *)(v49 + 8 * v28);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
    int64_t v60 = v28;
LABEL_28:
    uint64_t v30 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v54, *(void *)(v59 + 48) + *(void *)(v11 + 72) * v25, v10);
    Swift::Int v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v31(v14, v30, v10);
    uint64_t v32 = v57;
    swift_dynamicCast();
    uint64_t v33 = (uint64_t)v32;
    uint64_t v34 = v55;
    sub_100096408(v33, v55, (uint64_t *)&unk_100909E50);
    uint64_t v35 = v34;
    uint64_t v36 = v61;
    sub_100096408(v35, v61, (uint64_t *)&unk_100909E50);
    Hasher.init(_seed:)();
    uint64_t v37 = v36;
    uint64_t v38 = (uint64_t)v56;
    sub_1000BF710(v37, (uint64_t)v56, (uint64_t *)&unk_100909E50);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v38, 1, v10) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v31(v14, (char *)v38, v10);
      Hasher._combine(_:)(1u);
      sub_1003498D0((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*v47)(v14, v10);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v39 = -1 << v16[32];
    unint64_t v40 = result & ~v39;
    unint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)&v21[8 * (v40 >> 6)]) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v40) & ~*(void *)&v21[8 * (v40 >> 6)])) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v44 = v41 == v43;
        if (v41 == v43) {
          unint64_t v41 = 0;
        }
        v42 |= v44;
        uint64_t v45 = *(void *)&v21[8 * v41];
      }
      while (v45 == -1);
      unint64_t v23 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)&v21[(v23 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v23;
    uint64_t result = sub_100096408(v61, *((void *)v16 + 6) + *(void *)(v50 + 72) * v23, (uint64_t *)&unk_100909E50);
    ++*((void *)v16 + 2);
  }
  int64_t v29 = v60 + 5;
  if (v60 + 5 >= v48)
  {
LABEL_40:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v16;
  }
  unint64_t v27 = *(void *)(v49 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v60 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v48) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v49 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1003336E0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100094134(&qword_100914BB8);
    uint64_t v2 = (unsigned char *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v23 = a1 + 56;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  uint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  uint64_t v7 = v2 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v9 = 0;
  while (1)
  {
    if (v5)
    {
      v5 &= v5 - 1;
      goto LABEL_28;
    }
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v6) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v23 + 8 * v12);
    int64_t v14 = v9 + 1;
    if (!v13)
    {
      int64_t v14 = v9 + 2;
      if (v9 + 2 >= v6) {
        goto LABEL_40;
      }
      uint64_t v13 = *(void *)(v23 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v9 + 3;
        if (v9 + 3 >= v6) {
          goto LABEL_40;
        }
        uint64_t v13 = *(void *)(v23 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 4;
          if (v9 + 4 >= v6) {
            goto LABEL_40;
          }
          uint64_t v13 = *(void *)(v23 + 8 * v14);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v5 = (v13 - 1) & v13;
    int64_t v9 = v14;
LABEL_28:
    swift_bridgeObjectRetain();
    sub_100094134((uint64_t *)&unk_10090A4C0);
    swift_dynamicCast();
    Hasher.init(_seed:)();
    if (v25)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << v2[32];
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)&v7[8 * (v17 >> 6)]) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v17) & ~*(void *)&v7[8 * (v17 >> 6)])) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v20 && (v19 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v21 = v18 == v20;
        if (v18 == v20) {
          unint64_t v18 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v7[8 * v18];
      }
      while (v22 == -1);
      unint64_t v10 = __clz(__rbit64(~v22)) + (v18 << 6);
    }
    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    uint64_t v11 = (void *)(*((void *)v2 + 6) + 16 * v10);
    *uint64_t v11 = v24;
    v11[1] = v25;
    ++*((void *)v2 + 2);
  }
  int64_t v15 = v9 + 5;
  if (v9 + 5 >= v6)
  {
LABEL_40:
    swift_release();
    sub_1000C1AF8();
    return (uint64_t)v2;
  }
  uint64_t v13 = *(void *)(v23 + 8 * v15);
  if (v13)
  {
    int64_t v14 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v6) {
      goto LABEL_40;
    }
    uint64_t v13 = *(void *)(v23 + 8 * v14);
    ++v15;
    if (v13) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100333A14(uint64_t a1)
{
  return sub_100333AA8(a1, (uint64_t *)&unk_100914B90, (void (*)(void))type metadata accessor for REMCDSavedReminder, &qword_10090B668, (void (*)(uint64_t))type metadata accessor for REMCDSavedReminder);
}

uint64_t sub_100333A50(uint64_t a1)
{
  return sub_100333E80(a1, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (unint64_t *)&qword_10090A3C0);
}

uint64_t sub_100333A6C(uint64_t a1)
{
  return sub_100333AA8(a1, (uint64_t *)&unk_100914B90, (void (*)(void))type metadata accessor for REMCDTemplate, (unint64_t *)&qword_100914BB0, (void (*)(uint64_t))type metadata accessor for REMCDTemplate);
}

uint64_t sub_100333AA8(uint64_t a1, uint64_t *a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  uint64_t v8 = a1;
  unint64_t v9 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v10 = &_swiftEmptySetSingleton;
    if (v9) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v37 = v8 + 56;
    uint64_t v12 = ~v15;
    uint64_t v16 = -v15;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    else {
      uint64_t v17 = -1;
    }
    unint64_t v14 = v17 & *(void *)(v8 + 56);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_100094134(a2);
  unint64_t v10 = (void *)static _SetStorage.allocate(capacity:)();
  if (!v9) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  a3(0);
  sub_1003498D0(a4, a5);
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v8 = v39;
  uint64_t v37 = v40;
  uint64_t v12 = v41;
  uint64_t v13 = v42;
  unint64_t v14 = v43;
LABEL_11:
  int64_t v18 = (unint64_t)(v12 + 64) >> 6;
  char v19 = (char *)(v10 + 7);
  while (v8 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_45;
    }
    a3(0);
    swift_dynamicCast();
    uint64_t v23 = v38;
LABEL_36:
    uint64_t result = NSObject._rawHashValue(seed:)(v10[5]);
    uint64_t v29 = -1 << *((unsigned char *)v10 + 32);
    unint64_t v30 = result & ~v29;
    unint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)&v19[8 * (v30 >> 6)]) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v30) & ~*(void *)&v19[8 * (v30 >> 6)])) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v34 = v31 == v33;
        if (v31 == v33) {
          unint64_t v31 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)&v19[8 * v31];
      }
      while (v35 == -1);
      unint64_t v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)&v19[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    *(void *)(v10[6] + 8 * v20) = v23;
    ++v10[2];
  }
  if (v14)
  {
    unint64_t v21 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v22 = v21 | (v13 << 6);
LABEL_35:
    uint64_t v23 = *(void **)(*(void *)(v8 + 48) + 8 * v22);
    uint64_t v38 = v23;
    id v28 = v23;
    goto LABEL_36;
  }
  int64_t v24 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v24 >= v18) {
      goto LABEL_45;
    }
    unint64_t v25 = *(void *)(v37 + 8 * v24);
    uint64_t v26 = v13 + 1;
    if (!v25)
    {
      uint64_t v26 = v13 + 2;
      if (v13 + 2 >= v18) {
        goto LABEL_45;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v26);
      if (!v25)
      {
        uint64_t v26 = v13 + 3;
        if (v13 + 3 >= v18) {
          goto LABEL_45;
        }
        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          uint64_t v26 = v13 + 4;
          if (v13 + 4 >= v18) {
            goto LABEL_45;
          }
          unint64_t v25 = *(void *)(v37 + 8 * v26);
          if (!v25)
          {
            uint64_t v26 = v13 + 5;
            if (v13 + 5 >= v18) {
              goto LABEL_45;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v26);
            if (!v25)
            {
              uint64_t v27 = v13 + 6;
              while (v18 != v27)
              {
                unint64_t v25 = *(void *)(v37 + 8 * v27++);
                if (v25)
                {
                  uint64_t v26 = v27 - 1;
                  goto LABEL_34;
                }
              }
LABEL_45:
              swift_release();
              sub_1000C1AF8();
              return (uint64_t)v10;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v26 << 6);
    uint64_t v13 = v26;
    goto LABEL_35;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_100333E64(uint64_t a1)
{
  return sub_100333E80(a1, (unint64_t *)&qword_100909FB0, (uint64_t)NSNumber_ptr, &qword_100917D50);
}

uint64_t sub_100333E80(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6 = a1;
  unint64_t v7 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter()) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = &_swiftEmptySetSingleton;
    if (v7) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v35 = v6 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(v6 + 56);
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_6;
  }
LABEL_3:
  sub_100094134(&qword_100914B88);
  uint64_t v8 = (void *)static _SetStorage.allocate(capacity:)();
  if (!v7) {
    goto LABEL_7;
  }
LABEL_4:
  swift_bridgeObjectRetain();
  swift_retain();
  __CocoaSet.makeIterator()();
  sub_1000963CC(0, a2);
  sub_1000E4F40(a4, a2);
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v6 = v39;
  uint64_t v35 = v40;
  uint64_t v10 = v41;
  uint64_t v11 = v42;
  unint64_t v12 = v43;
LABEL_11:
  int64_t v34 = (unint64_t)(v10 + 64) >> 6;
  uint64_t v16 = (char *)(v8 + 7);
  while (v6 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_45;
    }
    *(void *)&long long v36 = v21;
    sub_1000963CC(0, a2);
    swift_dynamicCast();
LABEL_36:
    sub_1000963CC(0, a2);
    swift_dynamicCast();
    uint64_t result = AnyHashable._rawHashValue(seed:)(v8[5]);
    uint64_t v27 = -1 << *((unsigned char *)v8 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)&v16[8 * (v28 >> 6)]) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v28) & ~*(void *)&v16[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v30 = 0;
      unint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v32 = v29 == v31;
        if (v29 == v31) {
          unint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)&v16[8 * v29];
      }
      while (v33 == -1);
      unint64_t v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)&v16[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v17;
    uint64_t v18 = v8[6] + 40 * v17;
    *(_OWORD *)uint64_t v18 = v36;
    *(_OWORD *)(v18 + 16) = v37;
    *(void *)(v18 + 32) = v38;
    ++v8[2];
  }
  if (v12)
  {
    unint64_t v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v20 = v19 | (v11 << 6);
LABEL_35:
    id v26 = *(id *)(*(void *)(v6 + 48) + 8 * v20);
    goto LABEL_36;
  }
  int64_t v22 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v22 >= v34) {
      goto LABEL_45;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v22);
    uint64_t v24 = v11 + 1;
    if (!v23)
    {
      uint64_t v24 = v11 + 2;
      if (v11 + 2 >= v34) {
        goto LABEL_45;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v24);
      if (!v23)
      {
        uint64_t v24 = v11 + 3;
        if (v11 + 3 >= v34) {
          goto LABEL_45;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          uint64_t v24 = v11 + 4;
          if (v11 + 4 >= v34) {
            goto LABEL_45;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v24);
          if (!v23)
          {
            uint64_t v24 = v11 + 5;
            if (v11 + 5 >= v34) {
              goto LABEL_45;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v24);
            if (!v23)
            {
              uint64_t v25 = v11 + 6;
              while (v34 != v25)
              {
                unint64_t v23 = *(void *)(v35 + 8 * v25++);
                if (v23)
                {
                  uint64_t v24 = v25 - 1;
                  goto LABEL_34;
                }
              }
LABEL_45:
              swift_release();
              sub_1000C1AF8();
              return (uint64_t)v8;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v24 << 6);
    uint64_t v11 = v24;
    goto LABEL_35;
  }
LABEL_46:
  __break(1u);
  return result;
}

void sub_1003342BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003342C8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003342D4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 dueDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10033439C(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909A40);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setDueDate:isa];
}

void sub_1003344D0(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v29;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    uint64_t v16 = v9;
    while (v14)
    {
      id v29 = v14;
      char v20 = a1(&v29);

      if (v4 || (v20 & 1) != 0) {
        break;
      }
      int64_t v8 = v15;
      unint64_t v9 = v16;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v9)
      {
        uint64_t v16 = (v9 - 1) & v9;
        unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
        int64_t v15 = v8;
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return;
        }
        if (v15 >= v22) {
          break;
        }
        unint64_t v18 = *(void *)(v23 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v8 + 2;
          if (v8 + 2 >= v22) {
            break;
          }
          unint64_t v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v22) {
            break;
          }
          unint64_t v18 = *(void *)(v23 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 4;
          if (v8 + 4 >= v22) {
            break;
          }
          unint64_t v18 = *(void *)(v23 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v22) {
              break;
            }
            unint64_t v18 = *(void *)(v23 + 8 * v15);
            if (!v18)
            {
              int64_t v21 = v8 + 6;
              while (v22 != v21)
              {
                unint64_t v18 = *(void *)(v23 + 8 * v21++);
                if (v18)
                {
                  int64_t v15 = v21 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v16 = (v18 - 1) & v18;
        unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    }
  }
  sub_1000C1AF8();
}

uint64_t sub_10033481C(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v32 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    unsigned int v14 = v3 & 0x3F;
    if (v14 <= 6) {
      return 0;
    }
    int64_t v32 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v26 = *(void *)(a1 + 72);
    if (v26)
    {
      uint64_t v7 = 1;
    }
    else
    {
      if (v14 < 8) {
        return 0;
      }
      unint64_t v26 = *(void *)(a1 + 80);
      if (v26)
      {
        uint64_t v7 = 2;
      }
      else
      {
        unint64_t v26 = *(void *)(a1 + 88);
        if (v26)
        {
          uint64_t v7 = 3;
        }
        else
        {
LABEL_41:
          if (v14 < 9) {
            return 0;
          }
          unint64_t v26 = *(void *)(a1 + 96);
          if (v26)
          {
            uint64_t v7 = 4;
          }
          else
          {
            unint64_t v26 = *(void *)(a1 + 104);
            if (!v26) {
              goto LABEL_47;
            }
            uint64_t v7 = 5;
          }
        }
      }
    }
LABEL_34:
    unint64_t v9 = (v26 - 1) & v26;
    unint64_t v8 = __clz(__rbit64(v26)) + (v7 << 6);
  }
  uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v31 = v13;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_24;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v17 >= v32) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      uint64_t v7 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v7);
      if (!v18)
      {
        uint64_t v7 = v17 + 2;
        if (v17 + 2 >= v32) {
          goto LABEL_30;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v7);
        if (!v18)
        {
          uint64_t v7 = v17 + 3;
          if (v17 + 3 >= v32) {
            goto LABEL_30;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v7);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_23:
    unsigned int v14 = v18 - 1;
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_24:
    char v20 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    if (*v20 != v12 || v22 != v11)
    {
      uint64_t v24 = *(void **)(*(void *)(a1 + 56) + 8 * v16);
      if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        swift_bridgeObjectRetain();
        id v25 = v24;

        swift_bridgeObjectRelease();
        id v31 = v25;
        uint64_t v11 = v22;
        uint64_t v12 = v21;
      }
    }
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v32)
  {
LABEL_30:
    swift_release();
    return v12;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v32) {
      goto LABEL_30;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_47:
  uint64_t v27 = 0;
  uint64_t v28 = 6;
  if (v32 > 6) {
    uint64_t v28 = v32;
  }
  uint64_t v29 = v28 - 6;
  while (v29 != v27)
  {
    unint64_t v26 = *(void *)(a1 + 112 + 8 * v27++);
    if (v26)
    {
      uint64_t v7 = v27 + 5;
      goto LABEL_34;
    }
  }
  return 0;
}

void sub_100334B18(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100334B24(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100334B30@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 allDay];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100334B64(unsigned __int8 *a1, id *a2)
{
  return [*a2 setAllDay:*a1];
}

uint64_t sub_100334B78(char a1)
{
  uint64_t result = 0x7344496D72616C61;
  switch(a1)
  {
    case 1:
      return 0x7961446C6C61;
    case 2:
      return 0xD000000000000026;
    case 3:
      uint64_t v3 = 0x686361747461;
      return v3 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
    case 4:
      uint64_t v3 = 0x6E6769737361;
      return v3 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
    case 5:
      return 0x6574656C706D6F63;
    case 6:
      return 0x6974656C706D6F63;
    case 7:
      return 0x48746361746E6F63;
    case 8:
      return 0x6E6F697461657263;
    case 9:
      return 0x65746144657564;
    case 10:
      return 0xD000000000000016;
    case 11:
      return 0x64656767616C66;
    case 12:
      return 0x4967617468736168;
    case 13:
      return 0x6C7255736369;
    case 14:
      return 0x646574726F706D69;
    case 15:
      return 0xD000000000000010;
    case 16:
      return 1953720684;
    case 17:
      uint64_t v4 = 0x447365746F6ELL;
      goto LABEL_27;
    case 18:
    case 25:
      return 0xD000000000000012;
    case 19:
      return 0x6552746E65726170;
    case 20:
      return 0x797469726F697270;
    case 21:
      return 0xD000000000000011;
    case 22:
      return 0x7461447472617473;
    case 23:
      return 0x656E6F5A656D6974;
    case 24:
      uint64_t v4 = 0x44656C746974;
LABEL_27:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
      break;
    case 26:
      uint64_t result = 0x6974634172657375;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100334ED0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100914B50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100914B50);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_100334F98(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  id v4 = [a1 ckIdentifier];
  if (!v4)
  {
    if (qword_1009072D0 == -1) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if (!*(void *)(*(void *)v2 + 16)
    || (swift_bridgeObjectRetain(), sub_1001806F8(v6, v8), char v10 = v9, swift_bridgeObjectRelease(), (v10 & 1) == 0))
  {
    id v12 = v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v40[0] = *(void *)v2;
    *(void *)uint64_t v2 = 0x8000000000000000;
    sub_1002C3E8C((uint64_t)v12, v6, v8, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v2 = v40[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    while (1)
    {
      id result = [v3 children];
      if (!result) {
        return result;
      }
      uint64_t v23 = result;
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v24 & 0xC000000000000001) != 0)
      {
        if (!__CocoaSet.count.getter()) {
          return (id)swift_bridgeObjectRelease();
        }
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v24 = v40[0];
        uint64_t v38 = v40[1];
        uint64_t v25 = v40[2];
        uint64_t v26 = v40[3];
        unint64_t v27 = v40[4];
      }
      else
      {
        if (!*(void *)(v24 + 16)) {
          return (id)swift_bridgeObjectRelease();
        }
        uint64_t v26 = 0;
        uint64_t v28 = -1 << *(unsigned char *)(v24 + 32);
        uint64_t v38 = v24 + 56;
        uint64_t v25 = ~v28;
        uint64_t v29 = -v28;
        if (v29 < 64) {
          uint64_t v30 = ~(-1 << v29);
        }
        else {
          uint64_t v30 = -1;
        }
        unint64_t v27 = v30 & *(void *)(v24 + 56);
      }
      uint64_t v3 = (void *)((unint64_t)(v25 + 64) >> 6);
      if (v24 < 0)
      {
        while (__CocoaSet.Iterator.next()())
        {
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v34 = (id)v39;
          swift_unknownObjectRelease();
          uint64_t v33 = v26;
          uint64_t v31 = v27;
          if (!v39) {
            break;
          }
LABEL_42:
          sub_100334F98(v34);

          uint64_t v26 = v33;
          unint64_t v27 = v31;
          if ((v24 & 0x8000000000000000) == 0) {
            goto LABEL_22;
          }
        }
        return (id)sub_1000C1AF8();
      }
LABEL_22:
      if (v27) {
        break;
      }
      uint64_t v35 = v26 + 1;
      if (!__OFADD__(v26, 1))
      {
        if (v35 < (uint64_t)v3)
        {
          unint64_t v36 = *(void *)(v38 + 8 * v35);
          uint64_t v33 = v26 + 1;
          if (v36) {
            goto LABEL_40;
          }
          uint64_t v33 = v26 + 2;
          if (v26 + 2 < (uint64_t)v3)
          {
            unint64_t v36 = *(void *)(v38 + 8 * v33);
            if (v36) {
              goto LABEL_40;
            }
            uint64_t v33 = v26 + 3;
            if (v26 + 3 < (uint64_t)v3)
            {
              unint64_t v36 = *(void *)(v38 + 8 * v33);
              if (v36) {
                goto LABEL_40;
              }
              uint64_t v33 = v26 + 4;
              if (v26 + 4 < (uint64_t)v3)
              {
                unint64_t v36 = *(void *)(v38 + 8 * v33);
                if (!v36)
                {
                  uint64_t v37 = v26 + 5;
                  while (v3 != (void *)v37)
                  {
                    unint64_t v36 = *(void *)(v38 + 8 * v37++);
                    if (v36)
                    {
                      uint64_t v33 = v37 - 1;
                      goto LABEL_40;
                    }
                  }
                  return (id)sub_1000C1AF8();
                }
LABEL_40:
                uint64_t v31 = (v36 - 1) & v36;
                unint64_t v32 = __clz(__rbit64(v36)) + (v33 << 6);
LABEL_41:
                id v34 = *(id *)(*(void *)(v24 + 48) + 8 * v32);
                if (v34) {
                  goto LABEL_42;
                }
              }
            }
          }
        }
        return (id)sub_1000C1AF8();
      }
      __break(1u);
LABEL_48:
      swift_once();
LABEL_9:
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E2DC(v14, (uint64_t)qword_100914B50);
      id v15 = v3;
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        v40[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v18 = 136315138;
        id v19 = [v15 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        uint64_t v20 = Optional.descriptionOrNil.getter();
        unint64_t v22 = v21;

        uint64_t v39 = sub_1000C51B8(v20, v22, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "addSubtree: ckIdentifier is nil {objectID: %s}", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
    uint64_t v31 = (v27 - 1) & v27;
    unint64_t v32 = __clz(__rbit64(v27)) | (v26 << 6);
    uint64_t v33 = v26;
    goto LABEL_41;
  }

  return (id)swift_bridgeObjectRelease();
}

uint64_t sub_10033550C(char a1)
{
  uint64_t result = 0x7344496D72616C41;
  switch(a1)
  {
    case 1:
      return 0x7961446C6C41;
    case 2:
      return 0xD000000000000025;
    case 3:
      uint64_t v3 = 0x686361747441;
      return v3 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
    case 4:
      uint64_t v3 = 0x6E6769737341;
      return v3 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
    case 5:
      return 0x6574656C706D6F43;
    case 6:
      return 0x6974656C706D6F43;
    case 7:
      return 0x48746361746E6F43;
    case 8:
      return 0x6E6F697461657243;
    case 9:
      return 0x65746144657544;
    case 10:
      return 0xD000000000000016;
    case 11:
      return 0x64656767616C46;
    case 12:
      return 0x4967617468736148;
    case 13:
      return 0x6C7255736349;
    case 14:
      return 0x646574726F706D49;
    case 15:
      return 0xD000000000000010;
    case 16:
      return 1953720652;
    case 17:
      uint64_t v4 = 0x447365746F4ELL;
      goto LABEL_27;
    case 18:
    case 25:
      return 0xD000000000000012;
    case 19:
      return 0x6552746E65726150;
    case 20:
      return 0x797469726F697250;
    case 21:
      return 0xD000000000000011;
    case 22:
      return 0x7461447472617453;
    case 23:
      return 0x656E6F5A656D6954;
    case 24:
      uint64_t v4 = 0x44656C746954;
LABEL_27:
      uint64_t result = v4 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
      break;
    case 26:
      uint64_t result = 0x6974634172657355;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100335864()
{
  if (!CKRecord.subscript.getter()) {
    return 0;
  }
  self;
  uint64_t v0 = (void *)swift_dynamicCastObjCClass();
  if (!v0)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  id v1 = [v0 recordID];
  NSString v2 = [v1 recordName];

  if (!v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v3 = [self ckIdentifierFromRecordName:v2];

  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_unknownObjectRelease();

  return v4;
}

uint64_t sub_100335990(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100334B78(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100334B78(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100335A1C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100334B78(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100335A80()
{
  sub_100334B78(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100335AD4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100334B78(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100335B34@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1003496E8();
  *a1 = result;
  return result;
}

uint64_t sub_100335B64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100334B78(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100335B90(void *a1@<X8>)
{
  *a1 = &off_1008B39E8;
}

_UNKNOWN **static REMCDReminder.recordTypes()()
{
  return &off_1008B63C8;
}

uint64_t static REMCDReminder.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDReminder.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      id v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      sub_1003360B4();
      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_1009072D0 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100914B50);
      id v14 = a2;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          unint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

void sub_1003360B4()
{
  char v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  id v8 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v123 - v10;
  __chkstk_darwin(v12);
  id v14 = (char *)&v123 - v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v123 - v16;
  __chkstk_darwin(v18);
  id v20 = (char *)&v123 - v19;
  *(void *)&double v22 = __chkstk_darwin(v21).n128_u64[0];
  unint64_t v24 = (char *)&v123 - v23;
  if (objc_msgSend(v1, "isOwnedByCurrentUser", v22)) {
    return;
  }
  unint64_t v25 = [v1 managedObjectContext];
  if (!v25)
  {
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    sub_10008E2DC(v47, (uint64_t)qword_100914B50);
    uint64_t v136 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v136, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v136, v48, "Trying to create REMCDSharedToMeReminderPlaceholder to a reminder object without MOC", v49, 2u);
      swift_slowDealloc();
    }
LABEL_18:
    uint64_t v50 = v136;

    return;
  }
  uint64_t v134 = v2;
  uint64_t v135 = v3;
  uint64_t v136 = v25;
  id v26 = [v1 storeControllerManagedObjectContext];
  if (!v26
    || (uint64_t v27 = v26,
        id v28 = [v26 storeController],
        v27,
        !v28))
  {
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_100914B50);
    id v37 = v1;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v138 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136446210;
      id v41 = [v37 remObjectID];
      if (v41)
      {
        uint64_t v42 = v41;
        id v43 = [v41 description];

        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v46 = v45;
      }
      else
      {
        uint64_t v44 = 7104878;
        unint64_t v46 = 0xE300000000000000;
      }
      uint64_t v137 = sub_1000C51B8(v44, v46, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because storeController isn't available {reminder: %{public}s}", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_18;
  }
  id v29 = [v1 account];
  id v133 = v28;
  if (!v29)
  {
LABEL_26:
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_10008E2DC(v54, (uint64_t)qword_100914B50);
    id v55 = v1;
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v138 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136446722;
      id v59 = [v55 account];

      if (v59) {
        uint64_t v60 = 15649;
      }
      else {
        uint64_t v60 = 61;
      }
      if (v59) {
        unint64_t v61 = 0xE200000000000000;
      }
      else {
        unint64_t v61 = 0xE100000000000000;
      }
      uint64_t v137 = sub_1000C51B8(v60, v61, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 12) = 2082;
      id v62 = [v55 account];
      if (v62)
      {
        uint64_t v63 = v62;
        id v64 = [v62 identifier];

        if (v64)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v65 = 0;
        }
        else
        {
          uint64_t v65 = 1;
        }
        uint64_t v99 = v134;
        uint64_t v100 = v135;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56))(v8, v65, 1, v134);
        sub_100096408((uint64_t)v8, (uint64_t)v11, (uint64_t *)&unk_100909E50);
        int v101 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48))(v11, 1, v99);
        if (v101 == 1) {
          uint64_t v98 = 61;
        }
        else {
          uint64_t v98 = 15649;
        }
        if (v101 == 1) {
          unint64_t v97 = 0xE100000000000000;
        }
        else {
          unint64_t v97 = 0xE200000000000000;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56))(v11, 1, 1, v134);
        unint64_t v97 = 0xE100000000000000;
        uint64_t v98 = 61;
      }
      sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909E50);
      uint64_t v137 = sub_1000C51B8(v98, v97, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v58 + 22) = 2082;
      id v102 = [v55 remObjectID];
      if (v102)
      {
        id v103 = v102;
        id v104 = [v102 description];

        uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v107 = v106;
      }
      else
      {
        uint64_t v105 = 7104878;
        unint64_t v107 = 0xE300000000000000;
      }
      uint64_t v137 = sub_1000C51B8(v105, v107, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because accountIdentifier is nil where account %{public}s nil and account.identifier %{public}s nil, {reminder: %{public}s}", (uint8_t *)v58, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_58;
    }

LABEL_39:
    return;
  }
  uint64_t v30 = v29;
  id v31 = [v29 identifier];

  if (v31)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = v135;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56);
    id v34 = v20;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v32 = v135;
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56);
    id v34 = v20;
    uint64_t v35 = 1;
  }
  uint64_t v51 = v134;
  NSString v132 = v33;
  v33(v34, v35, 1, v134);
  sub_100096408((uint64_t)v20, (uint64_t)v24, (uint64_t *)&unk_100909E50);
  uint64_t v53 = v32 + 48;
  uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v52(v24, 1, v51))
  {
    sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
    id v28 = v133;
    goto LABEL_26;
  }
  uint64_t v128 = v52;
  uint64_t v129 = v53;
  uint64_t v66 = v135;
  uint64_t v67 = v135 + 16;
  uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
  v127(v5, v24, v51);
  sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909E50);
  uint64_t v68 = UUID.uuidString.getter();
  unint64_t v70 = v69;
  uint64_t v71 = v66 + 8;
  NSString v131 = *(void (**)(char *, uint64_t))(v66 + 8);
  v131(v5, v51);
  NSString v72 = String._bridgeToObjectiveC()();
  id v73 = [v133 storeForAccountIdentifier:v72];

  if (!v73)
  {
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v108 = type metadata accessor for Logger();
    sub_10008E2DC(v108, (uint64_t)qword_100914B50);
    id v109 = v1;
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v56, v110))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_59;
    }
    uint64_t v111 = swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    *(_DWORD *)uint64_t v111 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v137 = sub_1000C51B8(v68, v70, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v111 + 12) = 2082;
    id v112 = [v109 remObjectID];
    if (v112)
    {
      unint64_t v113 = v112;
      id v114 = [v112 description];

      uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v117 = v116;
    }
    else
    {
      uint64_t v115 = 7104878;
      unint64_t v117 = 0xE300000000000000;
    }
    uint64_t v137 = sub_1000C51B8(v115, v117, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v110, "REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because there is problem finding the persistent store for the accountIdentifier %{public}s and the reminder {reminder: %{public}s}", (uint8_t *)v111, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_58:
    swift_slowDealloc();

LABEL_59:
    return;
  }
  uint64_t v126 = v67;
  swift_bridgeObjectRelease();
  sub_1000963CC(0, &qword_100914BE0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v130 = v71;
  id v75 = (void *)ObjCClassFromMetadata;
  id v76 = v73;
  id v77 = [v75 entity];
  id v78 = objc_allocWithZone((Class)v75);
  id v79 = [v78 initWithEntity:v77 insertIntoManagedObjectContext:v136];
  id v80 = v76;
  id v81 = v79;
  [v136 assignObject:v81 toPersistentStore:v80];

  id v82 = v81;
  id v83 = [v1 account];
  [v82 setAccount:v83];

  id v84 = v82;
  id v85 = [v75 newObjectID];
  id v86 = [v85 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v131(v5, v134);
  [v84 setIdentifier:isa];

  [v84 setReminder:v1];
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v88 = type metadata accessor for Logger();
  sub_10008E2DC(v88, (uint64_t)qword_100914B50);
  id v89 = v84;
  id v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.default.getter();
  BOOL v92 = os_log_type_enabled(v90, v91);
  id v28 = v133;
  if (v92)
  {
    id v125 = v80;
    unint64_t v93 = (uint8_t *)swift_slowAlloc();
    uint64_t v124 = swift_slowAlloc();
    uint64_t v138 = v124;
    *(_DWORD *)unint64_t v93 = 136446210;
    id v94 = [v89 identifier];
    if (v94)
    {
      id v95 = v94;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v96 = 0;
    }
    else
    {
      uint64_t v96 = 1;
    }
    id v118 = v128;
    uint64_t v119 = v134;
    v132(v14, v96, 1, v134);
    sub_100096408((uint64_t)v14, (uint64_t)v17, (uint64_t *)&unk_100909E50);
    if (v118(v17, 1, v119))
    {
      uint64_t v120 = 7104878;
      sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
      unint64_t v121 = 0xE300000000000000;
    }
    else
    {
      v127(v5, v17, v119);
      sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
      uint64_t v120 = UUID.uuidString.getter();
      unint64_t v121 = v122;
      v131(v5, v119);
    }
    uint64_t v137 = sub_1000C51B8(v120, v121, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Creating REMCDSharedToMeReminderPlaceholder for CloudKit: %{public}s", v93, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_39;
  }
}

Swift::String __swiftcall REMCDReminder.recordType()()
{
  uint64_t v0 = 0x7265646E696D6552;
  char v1 = (void *)0xE800000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDReminder.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  id v4 = [v2 parentReminder];
  if (v4 && (v5 = v4, id v6 = [v4 list], v5, v6))
  {

    char v7 = 0;
  }
  else
  {
    char v7 = 1;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  v24.receiver = v2;
  v24.super_class = (Class)REMCDReminder;
  [super mergeDataFromRecord:from.super.isa accountID:v8];

  id v9 = [(objc_class *)from.super.isa recordID];
  NSString v10 = [v9 recordName];

  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v11 = [v2 ckIdentifierFromRecordName:v10];

  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v11];

  id v12 = [v2 parentReminder];
  if (v12 && (uint64_t v13 = v12, v14 = [v12 list], v13, v14))
  {

    char v15 = 1;
  }
  else
  {
    char v15 = 0;
  }
  char v23 = v7 & v15;
  char v22 = 0;
  char v16 = [v2 mergeDataRevertedLocallyMarkedForDeletion];
  char v17 = [v2 mergeDataRefusedToMergeMarkedForDeletion];
  id v18 = v2;
  uint64_t v19 = from.super.isa;
  sub_1004CA7F0((char *)v19, v16, v17, v18, v18, v19, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))&v22, &v23);

  if (v23 == 1)
  {
    id v20 = [v18 list];
    if (v20)
    {
      uint64_t v21 = v20;
      if (([v20 ckNeedsInitialFetchFromCloud] & 1) == 0) {
        sub_1002F8428();
      }
    }
  }
  if ([v18 isPlaceholder]) {
    sub_1003360B4();
  }
}

void sub_10033749C(char *a1, void *a2, void *a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), unsigned char *a5)
{
  NSString v242 = a5;
  unint64_t v247 = a4;
  id v253 = a2;
  unint64_t v254 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v251 = *(void *)(v6 - 8);
  uint64_t v252 = v6;
  __chkstk_darwin(v6);
  v238 = (char *)&v229 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v250 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v250);
  id v241 = (char *)&v229 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  NSString v243 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v229 - v10);
  __chkstk_darwin(v11);
  NSString v240 = (char *)&v229 - v12;
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v13 - 8);
  uint64_t v234 = (uint64_t)&v229 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v231 = (char *)&v229 - v16;
  __chkstk_darwin(v17);
  uint64_t v244 = (uint64_t)&v229 - v18;
  __chkstk_darwin(v19);
  unint64_t v230 = (char *)&v229 - v20;
  __chkstk_darwin(v21);
  uint64_t v249 = (uint64_t)&v229 - v22;
  __chkstk_darwin(v23);
  uint64_t v233 = (uint64_t)&v229 - v24;
  __chkstk_darwin(v25);
  id v237 = (char *)&v229 - v26;
  __chkstk_darwin(v27);
  uint64_t v245 = (uint64_t)&v229 - v28;
  __chkstk_darwin(v29);
  id v236 = (char *)&v229 - v30;
  __chkstk_darwin(v31);
  uint64_t v248 = (uint64_t)&v229 - v32;
  __chkstk_darwin(v33);
  uint64_t v232 = (uint64_t)&v229 - v34;
  __chkstk_darwin(v35);
  NSString v235 = (char *)&v229 - v36;
  __chkstk_darwin(v37);
  uint64_t v239 = (char *)&v229 - v38;
  __chkstk_darwin(v39);
  id v41 = (char *)&v229 - v40;
  __chkstk_darwin(v42);
  uint64_t v246 = (uint64_t)&v229 - v43;
  uint64_t v44 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v44 - 8);
  unint64_t v46 = (char *)&v229 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v47 - 8);
  uint64_t v49 = (char *)&v229 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v229 - v51;
  __chkstk_darwin(v53);
  id v55 = (char *)&v229 - v54;
  __chkstk_darwin(v56);
  uint64_t v58 = (char *)&v229 - v57;
  __chkstk_darwin(v59);
  unint64_t v61 = (char *)&v229 - v60;
  __chkstk_darwin(v62);
  id v64 = (char *)&v229 - v63;
  uint64_t v65 = *a1;
  sub_10033550C(*a1);
  switch(v65)
  {
    case 2:
      id v74 = [v254 encryptedValues];
      swift_getObjectType();
      uint64_t v75 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v76 = *(void *)(v75 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v52, 1, v75) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v52, v75);
      }
      [v253 setAlternativeDisplayDateDate_forCalendar:isa];
      goto LABEL_54;
    case 5:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      [v253 setCompleted:v256 & 1];
      return;
    case 6:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v78 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void *)(v78 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v64, 1, v78) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v78);
      }
      [v253 setCompletionDate:isa];
      goto LABEL_54;
    case 7:
      id v80 = [v254 encryptedValues];
      NSString v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v82 = [v80 objectForKeyedSubscript:v81];
      swift_unknownObjectRelease();

      id v83 = v253;
      if (v82 && (id v255 = v82, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
      {
        id v84 = (void *)sub_1000D3C70(v256, *((uint64_t *)&v256 + 1));
        swift_bridgeObjectRelease();
        if (v84)
        {
          id v85 = [v84 archivedData];

          uint64_t v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v88 = v87;

          id v84 = Data._bridgeToObjectiveC()().super.isa;
          sub_100097F34(v86, v88);
        }
        [v83 setContactHandles:v84];
LABEL_71:
      }
      else
      {
        [v83 setContactHandles:0];
      }
      return;
    case 8:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v89 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v90 = *(void *)(v89 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v61, 1, v89) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v90 + 8))(v61, v89);
      }
      [v253 setCreationDate:isa];
      goto LABEL_54;
    case 9:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v91 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v92 = *(void *)(v91 - 8);
      Class v93 = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v58, 1, v91) != 1)
      {
        Class v93 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v58, v91);
      }
      id v94 = v253;
      [v253 setDueDate:v93];

      CKRecordKeyValueSetting.subscript.getter();
      [v94 setAllDay:v256 & 1];
      CKRecordKeyValueSetting.subscript.getter();
      if (*((void *)&v256 + 1))
      {
        id v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        id v84 = 0;
      }
      [v94 setTimeZone:v84];
      goto LABEL_71;
    case 10:
      id v95 = [v254 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v96 = *((void *)&v256 + 1);
      if (*((void *)&v256 + 1) >> 60 == 15)
      {
        id v84 = 0;
      }
      else
      {
        uint64_t v132 = v256;
        id v84 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v132, v96);
      }
      [v253 setDueDateDeltaAlertsData:v84];
      goto LABEL_71;
    case 11:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if (BYTE8(v256)) {
        uint64_t v97 = 0;
      }
      else {
        uint64_t v97 = v256;
      }
      [v253 setFlagged:v97];
      return;
    case 13:
      id v98 = [v254 encryptedValues];
      NSString v99 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v100 = [v98 objectForKeyedSubscript:v99];
      swift_unknownObjectRelease();

      id v101 = v253;
      if (v100 && (id v255 = v100, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
      {
        URL.init(string:)();
        swift_bridgeObjectRelease();
        uint64_t v102 = type metadata accessor for URL();
        uint64_t v103 = *(void *)(v102 - 8);
        uint64_t v105 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v46, 1, v102) != 1)
        {
          URL._bridgeToObjectiveC()(v104);
          uint64_t v105 = v106;
          (*(void (**)(char *, uint64_t))(v103 + 8))(v46, v102);
        }
        [v101 setIcsUrl:v105];
      }
      else
      {
        [v101 setIcsUrl:0];
      }
      return;
    case 14:
      id v107 = [v254 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v108 = *((void *)&v256 + 1);
      if (*((void *)&v256 + 1) >> 60 == 15)
      {
        id v84 = 0;
      }
      else
      {
        uint64_t v133 = v256;
        id v84 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v133, v108);
      }
      [v253 setImportedICSData:v84];
      goto LABEL_71;
    case 15:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v109 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v110 = *(void *)(v109 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v55, 1, v109) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v110 + 8))(v55, v109);
      }
      [v253 setLastModifiedDate:isa];
      goto LABEL_54;
    case 16:
    case 19:
      swift_bridgeObjectRelease();
      if (*(unsigned char *)v247) {
        return;
      }
      *(unsigned char *)unint64_t v247 = 1;
      id v66 = v253;
      id v67 = [v253 list];
      if (v67)
      {
        uint64_t v68 = v67;
        id v69 = [v67 identifier];

        if (v69)
        {
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v70 = v251;
          uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v251 + 56);
          NSString v72 = v41;
          uint64_t v73 = 0;
        }
        else
        {
          uint64_t v70 = v251;
          uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v251 + 56);
          NSString v72 = v41;
          uint64_t v73 = 1;
        }
        uint64_t v135 = v252;
        unint64_t v247 = v71;
        v71((uint64_t)v72, v73, 1, v252);
        uint64_t v136 = v246;
        uint64_t v137 = (uint64_t)v240;
        sub_100096408((uint64_t)v41, v246, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v70 = v251;
        uint64_t v135 = v252;
        uint64_t v136 = v246;
        unint64_t v247 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v251 + 56);
        v247(v246, 1, 1, v252);
        uint64_t v137 = (uint64_t)v240;
      }
      if (CKRecord.subscript.getter())
      {
        self;
        uint64_t v152 = (void *)swift_dynamicCastObjCClass();
        if (!v152) {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        uint64_t v152 = 0;
      }
      unint64_t v153 = sub_1004B9C44(v152, v66);

      [v66 setList:v153];
      id v154 = [v66 list];
      if (v154)
      {
        id v155 = v154;
        id v156 = [v154 identifier];

        if (v156)
        {
          uint64_t v157 = (uint64_t)v235;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v158 = 0;
          uint64_t v159 = (uint64_t)v239;
        }
        else
        {
          uint64_t v158 = 1;
          uint64_t v159 = (uint64_t)v239;
          uint64_t v157 = (uint64_t)v235;
        }
        v247(v157, v158, 1, v135);
        sub_100096408(v157, v159, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v159 = (uint64_t)v239;
        v247((uint64_t)v239, 1, 1, v135);
      }
      uint64_t v160 = v137 + *(int *)(v250 + 48);
      sub_1000BF710(v159, v137, (uint64_t *)&unk_100909E50);
      sub_1000BF710(v136, v160, (uint64_t *)&unk_100909E50);
      uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
      if (v161(v137, 1, v135) == 1)
      {
        sub_1000966BC(v159, (uint64_t *)&unk_100909E50);
        int v162 = v161(v160, 1, v135);
        if (v162 == 1) {
          uint64_t v163 = (uint64_t *)&unk_100909E50;
        }
        else {
          uint64_t v163 = (uint64_t *)&unk_10090B4C0;
        }
        if (v162 == 1) {
          int v164 = -1;
        }
        else {
          int v164 = 0;
        }
        LODWORD(v239) = v164;
      }
      else
      {
        uint64_t v165 = v232;
        sub_1000BF710(v137, v232, (uint64_t *)&unk_100909E50);
        if (v161(v160, 1, v135) == 1)
        {
          sub_1000966BC(v159, (uint64_t *)&unk_100909E50);
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v165, v135);
          LODWORD(v239) = 0;
          uint64_t v163 = (uint64_t *)&unk_10090B4C0;
        }
        else
        {
          unint64_t v166 = v238;
          (*(void (**)(char *, uint64_t, uint64_t))(v70 + 32))(v238, v160, v135);
          sub_1003498D0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
          NSString v240 = (char *)(v70 + 48);
          LODWORD(v239) = dispatch thunk of static Equatable.== infix(_:_:)();
          NSString v167 = *(void (**)(char *, uint64_t))(v70 + 8);
          v167(v166, v135);
          uint64_t v163 = (uint64_t *)&unk_100909E50;
          sub_1000966BC(v159, (uint64_t *)&unk_100909E50);
          v167((char *)v165, v135);
        }
      }
      uint64_t v168 = (uint64_t)v243;
      sub_1000966BC(v137, v163);
      NSString v169 = (char *)[v66 parentReminder];
      if (CKRecord.subscript.getter())
      {
        self;
        id v170 = (void *)swift_dynamicCastObjCClass();
        if (!v170) {
          swift_unknownObjectRelease();
        }
      }
      else
      {
        id v170 = 0;
      }
      id v171 = sub_1000C497C(v170);
      if (v171)
      {
        id v172 = v171;
        self;
        id v173 = (void *)swift_dynamicCastObjCClass();
        if (!v173) {
      }
        }
      else
      {
        id v173 = 0;
      }

      [v66 setParentReminder:v173];
      id v174 = [v66 parentReminder];
      if (v174)
      {
        uint64_t v175 = v174;
        id v176 = [v174 identifier];

        if (v176)
        {
          uint64_t v177 = (uint64_t)v236;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v178 = 0;
          uint64_t v179 = v245;
        }
        else
        {
          uint64_t v178 = 1;
          uint64_t v179 = v245;
          uint64_t v177 = (uint64_t)v236;
        }
        v247(v177, v178, 1, v252);
        sub_100096408(v177, v248, (uint64_t *)&unk_100909E50);
      }
      else
      {
        v247(v248, 1, 1, v252);
        uint64_t v179 = v245;
      }
      NSString v243 = v161;
      NSString v240 = v169;
      if (v169)
      {
        id v180 = [v169 identifier];
        if (v180)
        {
          id v181 = v180;
          uint64_t v182 = (uint64_t)v237;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v183 = 0;
        }
        else
        {
          uint64_t v183 = 1;
          uint64_t v182 = (uint64_t)v237;
        }
        uint64_t v184 = v252;
        v247(v182, v183, 1, v252);
        sub_100096408(v182, v179, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v184 = v252;
        v247(v179, 1, 1, v252);
      }
      uint64_t v185 = v248;
      uint64_t v186 = v168 + *(int *)(v250 + 48);
      sub_1000BF710(v248, v168, (uint64_t *)&unk_100909E50);
      sub_1000BF710(v179, v186, (uint64_t *)&unk_100909E50);
      unsigned int v187 = v243;
      if (v243(v168, 1, v184) == 1)
      {
        sub_1000966BC(v179, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v185, (uint64_t *)&unk_100909E50);
        int v188 = v187(v186, 1, v184);
        char v189 = (char)v239;
        if (v188 == 1)
        {
          sub_1000966BC(v168, (uint64_t *)&unk_100909E50);
          int v190 = 0;
          uint64_t v191 = v244;
          goto LABEL_146;
        }
        goto LABEL_144;
      }
      uint64_t v192 = v233;
      sub_1000BF710(v168, v233, (uint64_t *)&unk_100909E50);
      if (v187(v186, 1, v184) == 1)
      {
        sub_1000966BC(v245, (uint64_t *)&unk_100909E50);
        sub_1000966BC(v248, (uint64_t *)&unk_100909E50);
        (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v192, v184);
        char v189 = (char)v239;
LABEL_144:
        sub_1000966BC(v168, (uint64_t *)&unk_10090B4C0);
        int v190 = 1;
        uint64_t v191 = v244;
        goto LABEL_146;
      }
      uint64_t v193 = v251;
      uint64_t v194 = v168;
      uint64_t v195 = v238;
      (*(void (**)(char *, uint64_t, uint64_t))(v251 + 32))(v238, v186, v184);
      sub_1003498D0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v196 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v197 = *(void (**)(char *, uint64_t))(v193 + 8);
      v197(v195, v184);
      sub_1000966BC(v245, (uint64_t *)&unk_100909E50);
      sub_1000966BC(v248, (uint64_t *)&unk_100909E50);
      v197((char *)v192, v184);
      uint64_t v191 = v244;
      id v66 = v253;
      sub_1000966BC(v194, (uint64_t *)&unk_100909E50);
      int v190 = v196 ^ 1;
      char v189 = (char)v239;
LABEL_146:
      id v198 = [v66 parentReminder];
      if (v198
        && (id v199 = v198, v200 = [v198 list], v199, v200))
      {
        id v201 = [v200 identifier];

        if (v201)
        {
          uint64_t v202 = (uint64_t)v230;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v203 = 0;
        }
        else
        {
          uint64_t v203 = 1;
          uint64_t v202 = (uint64_t)v230;
        }
        v247(v202, v203, 1, v252);
        sub_100096408(v202, v249, (uint64_t *)&unk_100909E50);
      }
      else
      {
        v247(v249, 1, 1, v252);
      }
      if ((v189 & 1) == 0)
      {
        id v204 = [v66 parentReminder];
        if (v204)
        {
          id v205 = v204;
          if (([v204 ckNeedsInitialFetchFromCloud] & 1) == 0
            && ([v205 markedForDeletion] & 1) == 0)
          {
            id v206 = [v66 list];
            [v205 setList:v206];
          }
        }
      }
      id v207 = [v66 parentReminder];
      LODWORD(v253) = v190;
      if (v207
        && (v208 = v207, id v209 = [v207 list], v208, v209))
      {
        id v210 = [v209 identifier];

        if (v210)
        {
          uint64_t v211 = (uint64_t)v231;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v212 = 0;
          uint64_t v214 = (uint64_t)v241;
          uint64_t v213 = v242;
          uint64_t v215 = v252;
        }
        else
        {
          uint64_t v212 = 1;
          uint64_t v214 = (uint64_t)v241;
          uint64_t v213 = v242;
          uint64_t v215 = v252;
          uint64_t v211 = (uint64_t)v231;
        }
        uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v243;
        v247(v211, v212, 1, v215);
        sub_100096408(v211, v191, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v215 = v252;
        v247(v191, 1, 1, v252);
        uint64_t v214 = (uint64_t)v241;
        uint64_t v213 = v242;
        uint64_t v216 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v243;
      }
      char v217 = v189 ^ 1;
      uint64_t v218 = v214 + *(int *)(v250 + 48);
      sub_1000BF710(v191, v214, (uint64_t *)&unk_100909E50);
      sub_1000BF710(v249, v218, (uint64_t *)&unk_100909E50);
      if (v216(v214, 1, v215) == 1)
      {
        sub_1000966BC(v191, (uint64_t *)&unk_100909E50);
        if (v216(v218, 1, v215) == 1)
        {
          sub_1000966BC(v214, (uint64_t *)&unk_100909E50);
          char v219 = 0;
          goto LABEL_173;
        }
        goto LABEL_171;
      }
      uint64_t v220 = v234;
      sub_1000BF710(v214, v234, (uint64_t *)&unk_100909E50);
      if (v216(v218, 1, v215) == 1)
      {
        sub_1000966BC(v191, (uint64_t *)&unk_100909E50);
        (*(void (**)(uint64_t, uint64_t))(v251 + 8))(v220, v215);
LABEL_171:
        sub_1000966BC(v214, (uint64_t *)&unk_10090B4C0);
        char v219 = 1;
        goto LABEL_173;
      }
      uint64_t v221 = v251;
      unint64_t v222 = v238;
      (*(void (**)(char *, uint64_t, uint64_t))(v251 + 32))(v238, v218, v215);
      sub_1003498D0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v223 = v220;
      char v224 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v225 = *(void (**)(char *, uint64_t))(v221 + 8);
      v225(v222, v215);
      sub_1000966BC(v244, (uint64_t *)&unk_100909E50);
      v225((char *)v223, v215);
      sub_1000966BC(v214, (uint64_t *)&unk_100909E50);
      char v219 = v224 ^ 1;
LABEL_173:
      uint64_t v226 = v246;
      Swift::String v227 = v240;
      char v228 = (char)v253;
      sub_100339848(v254, v240, v217 & 1, v219 & 1);

      sub_1000966BC(v249, (uint64_t *)&unk_100909E50);
      sub_1000966BC(v226, (uint64_t *)&unk_100909E50);
      *uint64_t v213 = (*v213 | v217 | v228) & 1;
      return;
    case 17:
      id v111 = v253;
      sub_1004C1A54(v254, 0xD000000000000012, 1, &v256);
      id v112 = v111;
      swift_bridgeObjectRelease();
      unint64_t v114 = *((void *)&v256 + 1);
      uint64_t v113 = v256;
      id v115 = [v112 notesDocument];
      if (v115)
      {
        unint64_t v116 = v115;
        uint64_t v117 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v119 = v118;
      }
      else
      {
        uint64_t v117 = 0;
        unint64_t v119 = 0xF000000000000000;
      }
      uint64_t v138 = sub_1004C1190(&v256, v117, v119, v113, v114, 0x636F447365746F6ELL, 0xED0000746E656D75, v112);
      uint64_t v140 = v138;
      unint64_t v141 = v139;
      id v142 = (void *)v256;
      if (!(void)v256) {
        id v142 = (void *)sub_100343D54(v138, v139, 0x636F447365746F6ELL, 0xED0000746E656D75, (Class *)REMCRMergeableStringDocument_ptr, (uint64_t (*)(void *, uint64_t, unint64_t))sub_10028B1B0);
      }
      swift_bridgeObjectRelease();
      sub_100097F20(v117, v119);
      if (v141 >> 60 == 15)
      {
        Class v143 = 0;
      }
      else
      {
        sub_100097E38(v140, v141);
        Class v143 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v140, v141);
      }
      [v112 setNotesDocument:v143];

      if (v142)
      {
        id v144 = [v142 attributedString];
        id v145 = [v144 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v146 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v146 = 0;
      }
      [v112 setNotes:v146];
      goto LABEL_93;
    case 20:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      if (BYTE8(v256)) {
        uint64_t v120 = 0;
      }
      else {
        uint64_t v120 = v256;
      }
      [v253 setPriority:v120];
      return;
    case 22:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v121 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      uint64_t v122 = *(void *)(v121 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v49, 1, v121) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v122 + 8))(v49, v121);
      }
      [v253 setStartDate:isa];
LABEL_54:

      return;
    case 24:
      id v123 = v253;
      sub_1004C1A54(v254, 0xD000000000000012, 1, &v256);
      uint64_t v124 = v123;
      swift_bridgeObjectRelease();
      unint64_t v114 = *((void *)&v256 + 1);
      uint64_t v113 = v256;
      id v125 = [v124 titleDocument];
      if (v125)
      {
        uint64_t v126 = v125;
        uint64_t v127 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v129 = v128;
      }
      else
      {
        uint64_t v127 = 0;
        unint64_t v129 = 0xF000000000000000;
      }
      uint64_t v147 = sub_1004C1190(&v256, v127, v129, v113, v114, 0x636F44656C746974, 0xED0000746E656D75, v124);
      uint64_t v140 = v147;
      unint64_t v141 = v148;
      id v142 = (void *)v256;
      if (!(void)v256) {
        id v142 = (void *)sub_100343D54(v147, v148, 0x636F44656C746974, 0xED0000746E656D75, (Class *)REMCRMergeableStringDocument_ptr, (uint64_t (*)(void *, uint64_t, unint64_t))sub_10028B1B0);
      }
      swift_bridgeObjectRelease();
      sub_100097F20(v127, v129);
      if (v141 >> 60 == 15)
      {
        Class v149 = 0;
      }
      else
      {
        sub_100097E38(v140, v141);
        Class v149 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v140, v141);
      }
      [v124 setTitleDocument:v149];

      if (v142)
      {
        id v150 = [v142 attributedString];
        id v151 = [v150 string];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v146 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v146 = 0;
      }
      [v124 setTitle:v146];
LABEL_93:

      sub_100097F20(v140, v141);
      sub_100097F20(v113, v114);
      return;
    case 26:
      id v130 = [v254 encryptedValues];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v131 = *((void *)&v256 + 1);
      if (*((void *)&v256 + 1) >> 60 == 15)
      {
        id v84 = 0;
      }
      else
      {
        uint64_t v134 = v256;
        id v84 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v134, v131);
      }
      [v253 setUserActivity:v84];
      goto LABEL_71;
    default:
      swift_bridgeObjectRelease();
      return;
  }
}

void sub_100339848(void *a1, void *a2, int a3, int a4)
{
  LODWORD(v429) = a4;
  LODWORD(v434) = a3;
  v440 = a2;
  v425 = a1;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v428 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v424 = (char *)&v402 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v406 = (char *)&v402 - v8;
  __chkstk_darwin(v9);
  v411 = (char *)&v402 - v10;
  __chkstk_darwin(v11);
  v412 = (char *)&v402 - v12;
  __chkstk_darwin(v13);
  v413 = (char *)&v402 - v14;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v419 = (char *)&v402 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v423 = (char *)&v402 - v19;
  __chkstk_darwin(v20);
  uint64_t v415 = (char *)&v402 - v21;
  uint64_t v420 = sub_100094134((uint64_t *)&unk_100914BD0);
  __chkstk_darwin(v420);
  uint64_t v407 = (uint64_t)&v402 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v416 = (uint64_t)&v402 - v24;
  uint64_t v25 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v25 - 8);
  uint64_t v418 = (uint64_t)&v402 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v414 = (char *)&v402 - v28;
  __chkstk_darwin(v29);
  uint64_t v405 = (uint64_t)&v402 - v30;
  __chkstk_darwin(v31);
  uint64_t v408 = (uint64_t)&v402 - v32;
  __chkstk_darwin(v33);
  uint64_t v410 = (uint64_t)&v402 - v34;
  __chkstk_darwin(v35);
  uint64_t v409 = (uint64_t)&v402 - v36;
  __chkstk_darwin(v37);
  uint64_t v421 = (uint64_t)&v402 - v38;
  __chkstk_darwin(v39);
  uint64_t v422 = (uint64_t)&v402 - v40;
  v433 = (void *)type metadata accessor for UUID();
  uint64_t v437 = *(v433 - 1);
  __chkstk_darwin(v433);
  v417 = (char *)&v402 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v431 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v431);
  uint64_t v438 = (char *)&v402 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v43 - 8);
  uint64_t v45 = (char *)&v402 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  v427 = (uint8_t *)&v402 - v47;
  __chkstk_darwin(v48);
  id v436 = (void (*)(void))((char *)&v402 - v49);
  __chkstk_darwin(v50);
  uint64_t v52 = (char *)&v402 - v51;
  __chkstk_darwin(v53);
  v432 = (char *)&v402 - v54;
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v430 = v5;
  uint64_t v55 = sub_10008E2DC(v5, (uint64_t)qword_100914B50);
  id v441 = v4;
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v59 = &selRef_intersectsSet_;
  uint64_t v439 = v55;
  v426 = (char **)v15;
  uint64_t v435 = v16;
  if (v58)
  {
    unint64_t v403 = v52;
    v404 = v45;
    uint64_t v60 = swift_slowAlloc();
    unint64_t v61 = v441;
    uint64_t v62 = v60;
    uint64_t v402 = swift_slowAlloc();
    uint64_t v445 = v402;
    *(_DWORD *)uint64_t v62 = 136315650;
    v444[0] = (uint64_t)[v61 remObjectID:v402];
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v63 = String.init<A>(describing:)();
    v444[0] = sub_1000C51B8(v63, v64, &v445);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 12) = 2080;
    id v65 = [v61 parentReminder];
    if (v65)
    {
      id v66 = v65;
      id v67 = [v65 remObjectID];
    }
    else
    {
      id v67 = 0;
    }
    v444[0] = (uint64_t)v67;
    uint64_t v69 = String.init<A>(describing:)();
    v444[0] = sub_1000C51B8(v69, v70, &v445);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v62 + 22) = 2080;
    id v71 = [v61 list];
    uint64_t v45 = v404;
    if (v71)
    {
      NSString v72 = v71;
      id v73 = [v71 remObjectID];
    }
    else
    {
      id v73 = 0;
    }
    uint64_t v52 = v403;
    v444[0] = (uint64_t)v73;
    uint64_t v74 = String.init<A>(describing:)();
    v444[0] = sub_1000C51B8(v74, v75, &v445);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v76 = v441;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "validateAndFixupReminderTree BEGIN {objectID: %s, parentID: %s, listID: %s}", (uint8_t *)v62, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v55 = v439;
    uint64_t v59 = &selRef_intersectsSet_;
  }
  else
  {

    uint64_t v68 = v441;
  }
  id v77 = [v441 parentReminder];

  if (!v77)
  {
    id v78 = [v441 v59[120]];

    if (!v78)
    {
      uint64_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        id v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v107 = 0;
        unint64_t v108 = "validateAndFixupReminderTree: Reminder is detached from lists. Nothing needs to be done.";
        goto LABEL_50;
      }
      goto LABEL_51;
    }
  }
  id v79 = [v441 v59[120]];

  if (!v79)
  {
    id v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      id v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "validateAndFixupReminderTree: Reminder has parent but no list. Assuming self.list = parent.list.", v82, 2u);
      swift_slowDealloc();
    }

    id v83 = v441;
    id v84 = [v441 parentReminder];
    id v85 = [v84 v59[120]];

    [v83 setList:v85];
  }
  id v86 = [v441 parentReminder];
  if (v86)
  {
    unint64_t v87 = v86;
    id v88 = [v86 identifier];

    uint64_t v89 = v433;
    uint64_t v90 = v437;
    uint64_t v91 = (uint64_t)v432;
    if (v88)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t, void *))(v90 + 56);
      v92(v52, 0, 1, v89);
    }
    else
    {
      uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t, void *))(v437 + 56);
      v92(v52, 1, 1, v433);
    }
    Class v93 = v440;
    sub_100096408((uint64_t)v52, v91, (uint64_t *)&unk_100909E50);
    if (v93) {
      goto LABEL_25;
    }
LABEL_22:
    uint64_t v94 = (uint64_t)v436;
    v92((char *)v436, 1, 1, v89);
    goto LABEL_29;
  }
  uint64_t v90 = v437;
  uint64_t v92 = *(void (**)(char *, uint64_t, uint64_t, void *))(v437 + 56);
  uint64_t v91 = (uint64_t)v432;
  uint64_t v89 = v433;
  v92(v432, 1, 1, v433);
  Class v93 = v440;
  if (!v440) {
    goto LABEL_22;
  }
LABEL_25:
  id v95 = [v93 identifier];
  if (v95)
  {
    unint64_t v96 = v95;
    uint64_t v97 = v427;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v98 = 0;
    uint64_t v94 = (uint64_t)v436;
  }
  else
  {
    uint64_t v98 = 1;
    uint64_t v94 = (uint64_t)v436;
    uint64_t v97 = v427;
  }
  v92((char *)v97, v98, 1, v89);
  sub_100096408((uint64_t)v97, v94, (uint64_t *)&unk_100909E50);
LABEL_29:
  uint64_t v99 = (uint64_t)v438;
  id v100 = &v438[*(int *)(v431 + 48)];
  sub_1000BF710(v91, (uint64_t)v438, (uint64_t *)&unk_100909E50);
  uint64_t v101 = v99;
  sub_1000BF710(v94, (uint64_t)v100, (uint64_t *)&unk_100909E50);
  uint64_t v102 = *(unsigned int (**)(char *, uint64_t, void *))(v90 + 48);
  if (v102((char *)v99, 1, v89) == 1)
  {
    sub_1000966BC(v94, (uint64_t *)&unk_100909E50);
    uint64_t v101 = (uint64_t)v438;
    sub_1000966BC(v91, (uint64_t *)&unk_100909E50);
    if (v102(v100, 1, v89) == 1)
    {
      sub_1000966BC(v101, (uint64_t *)&unk_100909E50);
      char v103 = (char)v434;
      uint64_t v104 = v435;
      if ((v434 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_36;
    }
LABEL_35:
    sub_1000966BC(v101, (uint64_t *)&unk_10090B4C0);
    char v103 = (char)v434;
    uint64_t v104 = v435;
    goto LABEL_36;
  }
  sub_1000BF710(v99, (uint64_t)v45, (uint64_t *)&unk_100909E50);
  if (v102(v100, 1, v89) == 1)
  {
    sub_1000966BC((uint64_t)v436, (uint64_t *)&unk_100909E50);
    sub_1000966BC(v91, (uint64_t *)&unk_100909E50);
    (*(void (**)(char *, void *))(v437 + 8))(v45, v89);
    goto LABEL_35;
  }
  uint64_t v119 = v437;
  uint64_t v120 = v91;
  uint64_t v121 = v417;
  (*(void (**)(char *, char *, void *))(v437 + 32))(v417, v100, v89);
  sub_1003498D0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v122 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v123 = *(void (**)(char *, void *))(v119 + 8);
  v123(v121, v89);
  sub_1000966BC((uint64_t)v436, (uint64_t *)&unk_100909E50);
  sub_1000966BC(v120, (uint64_t *)&unk_100909E50);
  v123(v45, v89);
  uint64_t v55 = v439;
  sub_1000966BC(v99, (uint64_t *)&unk_100909E50);
  char v103 = (char)v434;
  uint64_t v104 = v435;
  if ((v122 & 1) != 0 && (v434 & 1) == 0)
  {
LABEL_46:
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v107 = 0;
      unint64_t v108 = "validateAndFixupReminderTree: Neither parent nor list is changed. Nothing needs to be done.";
      goto LABEL_50;
    }
    goto LABEL_51;
  }
LABEL_36:
  if (sub_100344FA8(v440, v103 & 1, v429 & 1))
  {
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v105, v106))
    {
      id v107 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v107 = 0;
      unint64_t v108 = "validateAndFixupReminderTree: Current reminder tree looks good. Skipping the fixup.";
LABEL_50:
      _os_log_impl((void *)&_mh_execute_header, v105, v106, v108, v107, 2u);
      swift_slowDealloc();
    }
LABEL_51:

LABEL_226:
    sub_100345EA0(v441);
    return;
  }
  id v109 = [v441 parentReminder];
  uint64_t v110 = (char *)[v109 parentReminder];

  if (!v110) {
    uint64_t v110 = (char *)[v441 parentReminder];
  }
  id v111 = [v110 parentReminder];

  uint64_t v438 = v110;
  id v112 = v426;
  if (v111)
  {
    if (v110)
    {
      uint64_t v113 = v110;
      id v114 = [v113 objectID];
      id v115 = [v114 URIRepresentation];

      uint64_t v116 = v104;
      uint64_t v117 = v422;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v116 + 56);
      v118(v117, 0, 1, v112);
    }
    else
    {
      unint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v104 + 56);
      uint64_t v116 = v104;
      uint64_t v117 = v422;
      v118(v422, 1, 1, v426);
    }
    id v124 = [v441 objectID];
    id v125 = [v124 URIRepresentation];

    uint64_t v126 = v421;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v118(v126, 0, 1, v112);
    uint64_t v127 = v126;
    uint64_t v128 = v416;
    uint64_t v129 = v416 + *(int *)(v420 + 48);
    sub_1000BF710(v117, v416, (uint64_t *)&unk_100909E40);
    sub_1000BF710(v127, v129, (uint64_t *)&unk_100909E40);
    id v130 = *(uint64_t (**)(uint64_t, uint64_t, char **))(v116 + 48);
    if (v130(v128, 1, v112) == 1)
    {
      sub_1000966BC(v127, (uint64_t *)&unk_100909E40);
      sub_1000966BC(v117, (uint64_t *)&unk_100909E40);
      int v131 = v130(v129, 1, v112);
      uint64_t v55 = v439;
      if (v131 == 1)
      {
        sub_1000966BC(v128, (uint64_t *)&unk_100909E40);
LABEL_64:
        id v145 = Logger.logObject.getter();
        os_log_type_t v146 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v145, v146))
        {
          uint64_t v147 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v147 = 0;
          _os_log_impl((void *)&_mh_execute_header, v145, v146, "validateAndFixupReminderTree: Detected a loop in the new reminder tree. Multiple client may have raced. Going to fix the tree locally.", v147, 2u);
          swift_slowDealloc();
        }

        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v132 = v409;
      sub_1000BF710(v128, v409, (uint64_t *)&unk_100909E40);
      int v133 = v130(v129, 1, v112);
      uint64_t v55 = v439;
      if (v133 != 1)
      {
        uint64_t v139 = v116;
        uint64_t v140 = *(void (**)(char *, uint64_t, char **))(v116 + 32);
        uint64_t v141 = v128;
        id v142 = v415;
        v140(v415, v129, v112);
        sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
        char v143 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v144 = *(void (**)(char *, char **))(v139 + 8);
        v144(v142, v112);
        sub_1000966BC(v421, (uint64_t *)&unk_100909E40);
        sub_1000966BC(v422, (uint64_t *)&unk_100909E40);
        v144((char *)v132, v112);
        sub_1000966BC(v141, (uint64_t *)&unk_100909E40);
        if (v143) {
          goto LABEL_64;
        }
LABEL_59:
        uint64_t v134 = v110;
        uint64_t v135 = Logger.logObject.getter();
        os_log_type_t v136 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v135, v136))
        {
          uint64_t v137 = (uint8_t *)swift_slowAlloc();
          uint64_t v445 = swift_slowAlloc();
          *(_DWORD *)uint64_t v137 = 136315138;
          if (v110) {
            id v138 = [v134 remObjectID];
          }
          else {
            id v138 = 0;
          }
          v444[0] = (uint64_t)v138;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v148 = Optional.descriptionOrNil.getter();
          unint64_t v150 = v149;

          v444[0] = sub_1000C51B8(v148, v150, &v445);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the new root had both parent and children. Totally unexpected because the save request should have been rejected. {rootID: %s}", v137, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v110 = v438;
          uint64_t v55 = v439;
        }
        else
        {
        }
        goto LABEL_69;
      }
      sub_1000966BC(v421, (uint64_t *)&unk_100909E40);
      sub_1000966BC(v422, (uint64_t *)&unk_100909E40);
      (*(void (**)(uint64_t, char **))(v116 + 8))(v132, v112);
    }
    sub_1000966BC(v128, (uint64_t *)&unk_100914BD0);
    goto LABEL_59;
  }
LABEL_69:
  if (!v440)
  {
    uint64_t v446 = _swiftEmptyDictionarySingleton;
    if (!v110) {
      goto LABEL_86;
    }
    goto LABEL_83;
  }
  id v151 = [v441 children];
  if (v151)
  {
    uint64_t v152 = v151;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
    uint64_t v153 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v154 = (v153 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v153 + 16);
    swift_bridgeObjectRelease();
    if (v154)
    {
      id v155 = v441;
      id v156 = Logger.logObject.getter();
      os_log_type_t v157 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v156, v157))
      {
        uint64_t v158 = (uint8_t *)swift_slowAlloc();
        uint64_t v445 = swift_slowAlloc();
        *(_DWORD *)uint64_t v158 = 136315138;
        v444[0] = (uint64_t)[v155 remObjectID];
        sub_100094134((uint64_t *)&unk_100914BC0);
        uint64_t v159 = String.init<A>(describing:)();
        v444[0] = sub_1000C51B8(v159, v160, &v445);
        uint64_t v55 = v439;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v110 = v438;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v156, v157, "validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the current reminder had both parent and children. Totally unexpected because the save request should have been rejected. {objectID: %s}", v158, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  uint64_t v446 = _swiftEmptyDictionarySingleton;
  uint64_t v161 = v440;
  int v162 = Logger.logObject.getter();
  os_log_type_t v163 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v162, v163))
  {
    int v164 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v164 = 0;
    _os_log_impl((void *)&_mh_execute_header, v162, v163, "validateAndFixupReminderTree: Reminder has old root.", v164, 2u);
    swift_slowDealloc();
  }

  sub_100334F98(v161);
  if (v110)
  {
LABEL_83:
    uint64_t v165 = v110;
    unint64_t v166 = Logger.logObject.getter();
    os_log_type_t v167 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v166, v167))
    {
      uint64_t v168 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v168 = 0;
      _os_log_impl((void *)&_mh_execute_header, v166, v167, "validateAndFixupReminderTree: Reminder has new root.", v168, 2u);
      swift_slowDealloc();
    }

    sub_100334F98(v165);
  }
LABEL_86:
  sub_100334F98(v441);
  NSString v169 = Logger.logObject.getter();
  os_log_type_t v170 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v169, v170))
  {
    id v171 = (uint8_t *)swift_slowAlloc();
    uint64_t v445 = swift_slowAlloc();
    *(_DWORD *)id v171 = 136446210;
    swift_beginAccess();
    uint64_t v172 = swift_bridgeObjectRetain();
    sub_10020A420(v172);
    swift_bridgeObjectRelease();
    uint64_t v173 = Array.description.getter();
    unint64_t v175 = v174;
    swift_release();
    v444[0] = sub_1000C51B8(v173, v175, &v445);
    uint64_t v55 = v439;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v169, v170, "validateAndFixupReminderTree {potentiallyConnectedReminders: %{public}s}", v171, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v176 = sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  swift_beginAccess();
  uint64_t v177 = swift_bridgeObjectRetain();
  uint64_t v178 = sub_10034620C(v177, v425);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v179 = Logger.logObject.getter();
  os_log_type_t v180 = static os_log_type_t.default.getter();
  BOOL v181 = os_log_type_enabled(v179, v180);
  uint64_t v437 = v176;
  if (v181)
  {
    uint64_t v182 = (uint8_t *)swift_slowAlloc();
    v444[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v182 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v183 = Dictionary.description.getter();
    unint64_t v185 = v184;
    swift_bridgeObjectRelease();
    v442 = (void *)sub_1000C51B8(v183, v185, v444);
    uint64_t v55 = v439;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v179, v180, "validateAndFixupReminderTree {rootMap: %{public}s}", v182, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  id v186 = [v441 ckIdentifier];
  if (!v186) {
    goto LABEL_98;
  }
  unsigned int v187 = v186;
  int v188 = (void (*)(void))static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v190 = v189;

  swift_bridgeObjectRetain();
  uint64_t v191 = (void (*)(void))sub_1002EFDCC((uint64_t)v188, v190, (uint64_t)v178);
  uint64_t v193 = v192;
  swift_bridgeObjectRelease();
  if (!v193)
  {
    swift_bridgeObjectRelease();
    goto LABEL_98;
  }
  swift_beginAccess();
  uint64_t v194 = (uint64_t)v446;
  swift_bridgeObjectRetain();
  uint64_t v195 = (char *)sub_1002EFDB0((uint64_t)v191, v193, v194);
  swift_bridgeObjectRelease();
  v432 = v195;
  if (!v195)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_98:
    swift_bridgeObjectRelease();
    uint64_t v214 = v428;
    uint64_t v215 = v424;
    uint64_t v216 = v430;
    (*(void (**)(char *, uint64_t, uint64_t))(v428 + 16))(v424, v55, v430);
    id v217 = v441;
    uint64_t v218 = Logger.logObject.getter();
    os_log_type_t v219 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v218, v219))
    {
      uint64_t v220 = (uint8_t *)swift_slowAlloc();
      v444[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v220 = 136446210;
      id v221 = [v217 ckIdentifier];
      if (v221)
      {
        unint64_t v222 = v221;
        uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v225 = v224;
      }
      else
      {
        uint64_t v223 = 7104878;
        unint64_t v225 = 0xE300000000000000;
      }
      id v226 = v438;
      v442 = (void *)sub_1000C51B8(v223, v225, v444);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v218, v219, "validateAndFixupReminderTree: Can't resolve the root of the reminder tree. {ckIdentifier: %{public}s}", v220, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v428 + 8))(v424, v430);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v214 + 8))(v215, v216);
    }
    goto LABEL_225;
  }
  id v436 = v188;
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v196 = swift_bridgeObjectRetain();
  uint64_t v197 = sub_1003494B0(v196, (uint64_t)v178, (uint64_t)v191, v193);
  v440 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v198 = v428;
  uint64_t v199 = v428 + 16;
  id v200 = v413;
  uint64_t v201 = v430;
  uint64_t v434 = *(void (**)(void))(v428 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v434)(v413, v55, v430);
  swift_retain_n();
  uint64_t v202 = Logger.logObject.getter();
  os_log_type_t v203 = static os_log_type_t.default.getter();
  LODWORD(v433) = v203;
  BOOL v204 = os_log_type_enabled(v202, v203);
  uint64_t v431 = v199;
  if (v204)
  {
    id v205 = (uint8_t *)swift_slowAlloc();
    uint64_t v429 = swift_slowAlloc();
    v444[0] = v429;
    v427 = v205;
    *(_DWORD *)id v205 = 136446210;
    v424 = (char *)(v205 + 4);
    uint64_t v206 = swift_bridgeObjectRetain();
    sub_10020A420(v206);
    swift_release();
    uint64_t v207 = Array.description.getter();
    unint64_t v209 = v208;
    swift_release();
    uint64_t v55 = v439;
    v442 = (void *)sub_1000C51B8(v207, v209, v444);
    uint64_t v210 = v428;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v202, (os_log_type_t)v433, "validateAndFixupReminderTree: {allConnectedReminders: %{public}s}", v427, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v211 = *(void **)(v210 + 8);
    uint64_t v212 = v413;
    uint64_t v213 = v430;
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v211 = *(void **)(v198 + 8);
    uint64_t v212 = v200;
    uint64_t v213 = v201;
  }
  v433 = v211;
  ((void (*)(char *, uint64_t))v211)(v212, v213);
  if (v436 == v191 && v193 == v190)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String v227 = v440;
  }
  else
  {
    char v228 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::String v227 = v440;
    if ((v228 & 1) == 0)
    {
      id v231 = [v432 ckParentReminderIdentifier];
      uint64_t v229 = v412;
      if (v231)
      {

        goto LABEL_113;
      }
LABEL_117:
      id v238 = v432;
      goto LABEL_119;
    }
  }
  sub_100335864();
  uint64_t v229 = v412;
  if (!v230) {
    goto LABEL_117;
  }
  swift_bridgeObjectRelease();
LABEL_113:
  uint64_t v232 = Logger.logObject.getter();
  os_log_type_t v233 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v232, v233))
  {
    uint64_t v234 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v234 = 0;
    _os_log_impl((void *)&_mh_execute_header, v232, v233, "validateAndFixupReminderTree: Detected a loop in reminder tree in CK server data. Selecting a stable root.", v234, 2u);
    swift_slowDealloc();
  }

  sub_10033481C(v197);
  if (v236)
  {
    id v237 = v235;
    swift_bridgeObjectRelease();
    goto LABEL_120;
  }
  id v238 = v441;
LABEL_119:
  id v237 = v238;
LABEL_120:
  id v239 = v237;
  id v240 = [v239 objectID];
  id v241 = [v240 URIRepresentation];

  NSString v242 = v423;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v243);
  *(&v402 - 2) = (uint64_t)v242;
  sub_10027659C((uint64_t (*)(id *))sub_100349918, (uint64_t)(&v402 - 4), v197);
  unint64_t v245 = v244;
  v425 = v227;
  uint64_t v246 = v430;
  ((void (*)(char *, uint64_t, uint64_t))v434)(v229, v55, v430);
  id v247 = v239;
  swift_bridgeObjectRetain_n();
  id v248 = v247;
  uint64_t v249 = Logger.logObject.getter();
  int v250 = static os_log_type_t.default.getter();
  BOOL v251 = os_log_type_enabled(v249, (os_log_type_t)v250);
  v440 = (void *)v245;
  if (v251)
  {
    LODWORD(v436) = v250;
    uint64_t v252 = swift_slowAlloc();
    uint64_t v429 = swift_slowAlloc();
    v444[0] = v429;
    *(_DWORD *)uint64_t v252 = 136315394;
    id v253 = (char *)(v252 + 4);
    unint64_t v254 = &selRef_intersectsSet_;
    id v255 = [v248 remObjectID];
    v442 = v255;
    v427 = (uint8_t *)sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v256 = Optional.descriptionOrNil.getter();
    unint64_t v258 = v257;

    v442 = (void *)sub_1000C51B8(v256, v258, v444);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v252 + 12) = 2082;
    if (v245 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v259 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v259 = *(void *)((v245 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v259)
    {
      v442 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v259 < 0)
      {
        __break(1u);
        goto LABEL_230;
      }
      uint64_t v260 = 0;
      do
      {
        if ((v245 & 0xC000000000000001) != 0) {
          id v261 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v261 = *((id *)v440 + v260 + 4);
        }
        id v262 = v261;
        ++v260;
        id v263 = [v261 remObjectID];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      while (v259 != v260);
    }
    uint64_t v264 = Array.description.getter();
    unint64_t v266 = v265;
    swift_bridgeObjectRelease();
    v442 = (void *)sub_1000C51B8(v264, v266, v444);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v249, (os_log_type_t)v436, "validateAndFixupReminderTree {resolvedRoot: %s, childReminders: %{public}s}", (uint8_t *)v252, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v246 = v430;
    ((void (*)(char *, uint64_t))v433)(v412, v430);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v433)(v229, v246);
  }
  id v267 = v411;
  v434();
  id v253 = (char *)v248;
  id v268 = Logger.logObject.getter();
  os_log_type_t v269 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v268, v269))
  {
    unint64_t v270 = (uint8_t *)swift_slowAlloc();
    v444[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v270 = 136315138;
    id v436 = (void (*)(void))(v270 + 4);
    unint64_t v271 = [v253 remObjectID];
    v442 = v271;
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v272 = Optional.descriptionOrNil.getter();
    unint64_t v274 = v273;

    v442 = (void *)sub_1000C51B8(v272, v274, v444);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v268, v269, "validateAndFixupReminderTree: Going to update root. {objectID: %s}", v270, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v275 = v411;
  }
  else
  {

    id v275 = v267;
  }
  ((void (*)(char *, uint64_t))v433)(v275, v246);
  unint64_t v254 = v426;
  uint64_t v276 = (uint64_t)v414;
  uint64_t v277 = &selRef_intersectsSet_;
  uint64_t v278 = v410;
  id v279 = [v253 parentReminder];

  if (v279)
  {
    Class v280 = Logger.logObject.getter();
    os_log_type_t v281 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v280, v281))
    {
      NSString v282 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v282 = 0;
      _os_log_impl((void *)&_mh_execute_header, v280, v281, "validateAndFixupReminderTree: ...Updated {root.parent: nil}", v282, 2u);
      swift_slowDealloc();
    }

    [v253 setParentReminder:0];
  }
  id v436 = (void (*)(void))[v441 list];
  if (!v436) {
    id v436 = (void (*)(void))[v253 list];
  }
  id v283 = [v441 objectID];
  id v284 = [v283 URIRepresentation];

  uint64_t v285 = v415;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v283) = static URL.== infix(_:_:)();
  uint64_t v286 = *(uint8_t **)(v435 + 8);
  uint64_t v429 = v435 + 8;
  v427 = v286;
  ((void (*)(char *, char **))v286)(v285, v254);
  if ((v283 & 1) != 0 || ([v253 ckNeedsInitialFetchFromCloud] & 1) == 0)
  {
    if ([v253 markedForDeletion])
    {
      os_log_type_t v287 = 0;
    }
    else
    {
      os_log_type_t v287 = v436;
      unint64_t v288 = v436;
    }
    id v289 = [v253 list];
    if (v289)
    {
      unint64_t v290 = v289;
      id v291 = [v289 objectID];
      id v292 = [v291 URIRepresentation];

      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v293 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v435 + 56);
      v293(v278, 0, 1, v254);
    }
    else
    {
      id v293 = *(void (**)(uint64_t, uint64_t, uint64_t, char **))(v435 + 56);
      v293(v278, 1, 1, v254);
    }
    v424 = v253;
    if (v287)
    {
      Swift::OpaquePointer v294 = v287;
      id v295 = [v294 objectID];
      id v296 = [v295 URIRepresentation];

      uint64_t v297 = v408;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v298 = 0;
    }
    else
    {
      uint64_t v298 = 1;
      uint64_t v297 = v408;
    }
    uint64_t v299 = v435;
    v293(v297, v298, 1, v254);
    uint64_t v300 = v407;
    uint64_t v301 = v407 + *(int *)(v420 + 48);
    sub_1000BF710(v278, v407, (uint64_t *)&unk_100909E40);
    uint64_t v302 = v300;
    sub_1000BF710(v297, v301, (uint64_t *)&unk_100909E40);
    unint64_t v303 = *(uint64_t (**)(uint64_t, uint64_t, char **))(v299 + 48);
    if (v303(v302, 1, v254) == 1)
    {
      sub_1000966BC(v297, (uint64_t *)&unk_100909E40);
      uint64_t v302 = v407;
      sub_1000966BC(v278, (uint64_t *)&unk_100909E40);
      int v304 = v303(v301, 1, v254);
      uint64_t v277 = &selRef_intersectsSet_;
      if (v304 == 1)
      {
        sub_1000966BC(v302, (uint64_t *)&unk_100909E40);
LABEL_163:
        id v308 = v287;
        id v253 = v424;
LABEL_198:

        goto LABEL_199;
      }
    }
    else
    {
      uint64_t v305 = v405;
      sub_1000BF710(v302, v405, (uint64_t *)&unk_100909E40);
      if (v303(v301, 1, v254) != 1)
      {
        uint64_t v313 = v415;
        (*(void (**)(char *, uint64_t, char **))(v435 + 32))(v415, v301, v254);
        sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v314 = v302;
        char v315 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v316 = v427;
        ((void (*)(char *, char **))v427)(v313, v254);
        sub_1000966BC(v408, (uint64_t *)&unk_100909E40);
        sub_1000966BC(v410, (uint64_t *)&unk_100909E40);
        ((void (*)(uint64_t, char **))v316)(v305, v254);
        sub_1000966BC(v314, (uint64_t *)&unk_100909E40);
        uint64_t v277 = &selRef_intersectsSet_;
        if (v315) {
          goto LABEL_163;
        }
LABEL_158:
        id v306 = v406;
        uint64_t v307 = v430;
        ((void (*)(char *, uint64_t, uint64_t))v434)(v406, v439, v430);
        id v308 = v287;
        unint64_t v309 = Logger.logObject.getter();
        os_log_type_t v310 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v309, v310))
        {
          id v311 = (uint8_t *)swift_slowAlloc();
          v444[0] = swift_slowAlloc();
          *(_DWORD *)id v311 = 136315138;
          uint64_t v434 = v287;
          if (v287) {
            id v312 = [v308 remObjectID];
          }
          else {
            id v312 = 0;
          }
          uint64_t v317 = v308;
          v442 = v312;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v318 = Optional.descriptionOrNil.getter();
          unint64_t v320 = v319;

          v442 = (void *)sub_1000C51B8(v318, v320, v444);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v309, v310, "validateAndFixupReminderTree: ...Updated {root.list: %s}", v311, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          ((void (*)(char *, uint64_t))v433)(v406, v430);
          unint64_t v254 = v426;
          uint64_t v277 = &selRef_intersectsSet_;
          id v253 = v424;
          id v308 = v317;
          os_log_type_t v287 = v434;
        }
        else
        {

          ((void (*)(char *, uint64_t))v433)(v306, v307);
          id v253 = v424;
        }
        uint64_t v276 = (uint64_t)v414;
        if (!v287) {
          goto LABEL_197;
        }
        uint64_t v434 = v308;
        unint64_t v321 = v308;
        long long v322 = v253;
        id v323 = [v253 ckZoneOwnerName];
        if (v323)
        {
          uint64_t v324 = v323;
          uint64_t v325 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v327 = v326;
        }
        else
        {
          uint64_t v325 = 0;
          uint64_t v327 = 0;
        }
        id v328 = [v321 ckZoneOwnerName];
        if (v328)
        {
          unint64_t v329 = v328;
          uint64_t v330 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v332 = v331;

          if (v327)
          {
            if (v332)
            {
              if (v325 == v330 && v327 == v332)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_195:
                uint64_t v276 = (uint64_t)v414;
LABEL_196:
                id v253 = v322;
                id v308 = v434;
LABEL_197:
                [v253 setList:v308];
                goto LABEL_198;
              }
              char v368 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v368)
              {
LABEL_194:

                goto LABEL_195;
              }
LABEL_180:
              uint64_t v333 = 7104878;
              v444[0] = 0;
              v444[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(109);
              v334._countAndFlagsBits = 0xD000000000000039;
              v334._object = (void *)0x80000001007D1C90;
              String.append(_:)(v334);
              id v335 = [v322 remObjectID];
              if (v335)
              {
                v336 = v335;
                id v337 = [v335 description];

                uint64_t v338 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                id v340 = v339;
              }
              else
              {
                id v340 = (void *)0xE300000000000000;
                uint64_t v338 = 7104878;
              }
              v341._countAndFlagsBits = v338;
              v341._object = v340;
              String.append(_:)(v341);
              swift_bridgeObjectRelease();
              v342._countAndFlagsBits = 0x4E72656E776F205DLL;
              v342._object = (void *)0xEE00203D20656D61;
              String.append(_:)(v342);
              id v343 = [v322 ckZoneOwnerName];
              if (v343)
              {
                id v344 = v343;
                uint64_t v345 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v347 = v346;
              }
              else
              {
                uint64_t v345 = 0;
                uint64_t v347 = 0;
              }
              v442 = (void *)v345;
              uint64_t v443 = v347;
              sub_100094134((uint64_t *)&unk_10090A4C0);
              v348._countAndFlagsBits = String.init<A>(describing:)();
              String.append(_:)(v348);
              swift_bridgeObjectRelease();
              v349._countAndFlagsBits = 0x467473696C202C29;
              v349._object = (void *)0xEF5B746F6F52726FLL;
              String.append(_:)(v349);
              id v350 = [v321 remObjectID];
              if (v350)
              {
                uint64_t v351 = v350;
                id v352 = [v350 description];

                uint64_t v333 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v354 = v353;
              }
              else
              {
                uint64_t v354 = (void *)0xE300000000000000;
              }
              v355._countAndFlagsBits = v333;
              v355._object = v354;
              String.append(_:)(v355);
              swift_bridgeObjectRelease();
              v356._countAndFlagsBits = 0x72656E6E776F205DLL;
              v356._object = (void *)0xEF203D20656D614ELL;
              String.append(_:)(v356);
              id v357 = [v321 ckZoneOwnerName];
              if (v357)
              {
                uint64_t v358 = v357;
                uint64_t v359 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v361 = v360;
              }
              else
              {
                uint64_t v359 = 0;
                uint64_t v361 = 0;
              }
              v442 = (void *)v359;
              uint64_t v443 = v361;
              v362._countAndFlagsBits = String.init<A>(describing:)();
              String.append(_:)(v362);
              swift_bridgeObjectRelease();
              v363._countAndFlagsBits = 0;
              v363._object = (void *)0xE000000000000000;
              String.append(_:)(v363);
              unint64_t v364 = self;
              NSString v365 = String._bridgeToObjectiveC()();
              NSString v366 = String._bridgeToObjectiveC()();
              NSString v367 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v364 faultAndPromptToFileRadarWithICTap2RadarType:4 title:v365 description:v366 logMessage:v367];

              unint64_t v254 = v426;
              uint64_t v276 = (uint64_t)v414;
              uint64_t v277 = &selRef_intersectsSet_;
              goto LABEL_196;
            }
          }
          else if (!v332)
          {
            goto LABEL_194;
          }
        }
        else if (!v327)
        {
          goto LABEL_194;
        }
        swift_bridgeObjectRelease();
        goto LABEL_180;
      }
      sub_1000966BC(v408, (uint64_t *)&unk_100909E40);
      sub_1000966BC(v410, (uint64_t *)&unk_100909E40);
      ((void (*)(uint64_t, char **))v427)(v305, v254);
      uint64_t v277 = &selRef_intersectsSet_;
    }
    sub_1000966BC(v302, (uint64_t *)&unk_100914BD0);
    goto LABEL_158;
  }
LABEL_199:
  uint64_t v369 = v436;
  if (v436)
  {
    v370 = v436;
    id v371 = [v370 objectID];
    id v372 = [v371 URIRepresentation];

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v373 = 0;
  }
  else
  {
    uint64_t v373 = 1;
  }
  uint64_t v374 = v435;
  (*(void (**)(uint64_t, uint64_t, uint64_t, char **))(v435 + 56))(v276, v373, 1, v254);
  v444[0] = (uint64_t)&_swiftEmptySetSingleton;
  (*(void (**)(char *, char *, char **))(v374 + 16))(v419, v423, v254);
  sub_1000BF710(v276, v418, (uint64_t *)&unk_100909E40);
  uint64_t v375 = Logger.logObject.getter();
  os_log_type_t v376 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v375, v376))
  {
    char v377 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v377 = 0;
    _os_log_impl((void *)&_mh_execute_header, v375, v376, "validateAndFixupReminderTree: Going to update newly computed children.", v377, 2u);
    swift_slowDealloc();
  }

  sub_10034669C((unint64_t)v440, v444, v419, v253, v418, v369);
  swift_bridgeObjectRelease();
  id v378 = [v441 v277[317]];

  if (v378)
  {
    id v379 = [v441 children];
    if (v379)
    {
      uint64_t v380 = v379;
      sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v381 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v381 & 0xC000000000000001) != 0) {
        uint64_t v382 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v382 = *(void *)(v381 + 16);
      }
      if (v382)
      {
        int v383 = Logger.logObject.getter();
        os_log_type_t v384 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v383, v384))
        {
          uint64_t v385 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v385 = 0;
          _os_log_impl((void *)&_mh_execute_header, v383, v384, "validateAndFixupReminderTree: Going to update old children.", v385, 2u);
          uint64_t v369 = v436;
          swift_slowDealloc();
        }

        int v386 = sub_10020B7F8(v381);
        swift_bridgeObjectRelease();
        sub_10034669C((unint64_t)v386, v444, v419, v253, v418, v369);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  id v387 = [v253 children];
  if (!v387)
  {

    uint64_t v396 = v419;
    uint64_t v397 = v418;
LABEL_224:

    sub_1000966BC(v397, (uint64_t *)&unk_100909E40);
    uint64_t v401 = v427;
    ((void (*)(char *, char **))v427)(v396, v254);
    sub_1000966BC(v276, (uint64_t *)&unk_100909E40);
    ((void (*)(char *, char **))v401)(v423, v254);
    swift_bridgeObjectRelease();
LABEL_225:
    swift_bridgeObjectRelease();
    goto LABEL_226;
  }
  uint64_t v388 = v387;
  sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
  uint64_t v389 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v390);
  *(&v402 - 4) = (uint64_t)v444;
  *(&v402 - 3) = (uint64_t)v423;
  *(&v402 - 2) = v276;
  v391 = v425;
  sub_1002767D0((uint64_t (*)(void *))sub_100349938, (uint64_t)(&v402 - 6), v389);
  if (!v391)
  {
    unint64_t v393 = v392;
    if (v392 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v394 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v394 = *(void *)((v392 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v395 = v436;
    uint64_t v396 = v419;
    uint64_t v397 = v418;
    if (v394)
    {
      unint64_t v398 = Logger.logObject.getter();
      os_log_type_t v399 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v398, v399))
      {
        v400 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v400 = 0;
        _os_log_impl((void *)&_mh_execute_header, v398, v399, "validateAndFixupReminderTree: Going to update mismatched lists of remaining children attached to root.", v400, 2u);
        id v395 = v436;
        swift_slowDealloc();
      }

      sub_10034669C(v393, v444, v396, v253, v397, v395);
    }

    swift_bridgeObjectRelease();
    goto LABEL_224;
  }
LABEL_230:

  swift_errorRelease();
  sub_1000966BC(v418, (uint64_t *)&unk_100909E40);
  ((void (*)(char *, char **))v427)(v419, v254);
  __break(1u);
}

id REMCDReminder.ckServerRecord.getter()
{
  v2.super_class = (Class)REMCDReminder;
  id v0 = [super ckServerRecord];

  return v0;
}

void REMCDReminder.ckServerRecord.setter(void *a1)
{
  v2.super_class = (Class)REMCDReminder;
  [super setCkServerRecord:a1];
  sub_10033D294();
}

void sub_10033D294()
{
  char v1 = v0;
  id v2 = [v0 ckServerRecord];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_100335864();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  id v7 = [v1 ckParentReminderIdentifier];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (!v6)
    {
      id v14 = 0;
      goto LABEL_15;
    }
    if (v9 == v4 && v6 == v11)
    {
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      return;
    }
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_19;
    }
  }
  else if (!v6)
  {
    return;
  }
  id v14 = String._bridgeToObjectiveC()();
LABEL_15:
  swift_bridgeObjectRelease();
  [v1 setCkParentReminderIdentifier:v14];
}

CKRecord_optional __swiftcall REMCDReminder.newlyCreatedRecord()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v246 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v246 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v262 = (uint64_t)&v246 - v10;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v246 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v246 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v246 - v18;
  __chkstk_darwin(v20);
  uint64_t v261 = (uint64_t)&v246 - v21;
  __chkstk_darwin(v22);
  unint64_t v265 = (char *)&v246 - v23;
  __chkstk_darwin(v24);
  unint64_t v266 = (char *)&v246 - v25;
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v246 - v27;
  __chkstk_darwin(v29);
  uint64_t v31 = (char *)&v246 - v30;
  __chkstk_darwin(v32);
  os_log_type_t v269 = (char *)&v246 - v33;
  __chkstk_darwin(v34);
  uint64_t v260 = (uint64_t)&v246 - v35;
  __chkstk_darwin(v36);
  unint64_t v271 = (char *)&v246 - v37;
  *(void *)&double v39 = __chkstk_darwin(v38).n128_u64[0];
  uint64_t v259 = (uint64_t)&v246 - v40;
  v278.receiver = v1;
  v278.super_class = (Class)REMCDReminder;
  id v264 = [super newlyCreatedRecord:v39];
  if (v264)
  {
    uint64_t v270 = 27;
    id v255 = v19;
    id v253 = v16;
    uint64_t v256 = v13;
    unint64_t v257 = v8;
    uint64_t v249 = v5;
    uint64_t v254 = v2;
    unint64_t v42 = 0;
    uint64_t v252 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    BOOL v251 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    id v248 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    id v247 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v246 = &v273;
    id v263 = v1;
    uint64_t v43 = (uint64_t)v265;
    uint64_t v44 = (uint64_t)v266;
    id v268 = v28;
    id v267 = v31;
    uint64_t v45 = v269;
    uint64_t v46 = (uint64_t)v271;
    uint64_t v47 = v264;
    while (2)
    {
      if (v42 < 0x1B)
      {
        unint64_t v49 = v42++;
        switch(*((unsigned char *)&off_1008B39E8 + v49 + 32))
        {
          case 1:
            unsigned __int8 v53 = [v1 allDay];
            *((void *)&v276 + 1) = &type metadata for Bool;
            uint64_t v277 = &protocol witness table for Bool;
            LOBYTE(v275) = v53;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 2:
            id v54 = [v47 encryptedValues];
            id v55 = [v1 alternativeDisplayDateDate_forCalendar];
            if (v55)
            {
              uint64_t v56 = v55;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v57 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v46, 0, 1, v57);
            }
            else
            {
              uint64_t v57 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v46, 1, 1, v57);
            }
            uint64_t v184 = v259;
            sub_100096408(v46, v259, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v185 = *(void *)(v57 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v185 + 48))(v184, 1, v57) == 1)
            {
              sub_1000966BC(v184, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v57;
              uint64_t v277 = &protocol witness table for Date;
              id v186 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v185 + 32))(v186, v184, v57);
            }
            uint64_t v44 = (uint64_t)v266;
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            swift_unknownObjectRelease();
            goto LABEL_118;
          case 3:
            id v58 = [v1 attachments];
            if (!v58)
            {
              unint64_t v64 = _swiftEmptyArrayStorage;
              goto LABEL_188;
            }
            uint64_t v59 = v58;
            *(void *)&long long v275 = v58;
            sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
            sub_1000963CC(0, (unint64_t *)&unk_10090B010);
            sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
            id v258 = v59;
            unint64_t v60 = Sequence.elements<A>(ofType:)();
            unint64_t v61 = v60;
            if (v60 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
              if (!v62)
              {
LABEL_183:
                unint64_t v64 = _swiftEmptyArrayStorage;
                goto LABEL_187;
              }
            }
            else
            {
              uint64_t v62 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (!v62) {
                goto LABEL_183;
              }
            }
            if (v62 < 1) {
              goto LABEL_219;
            }
            uint64_t v63 = 0;
            unint64_t v64 = _swiftEmptyArrayStorage;
            do
            {
              if ((v61 & 0xC000000000000001) != 0) {
                id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v65 = *(id *)(v61 + 8 * v63 + 32);
              }
              id v66 = v65;
              id v67 = [v65 ckIdentifier:v246];
              if (v67)
              {
                uint64_t v68 = v67;
                uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v71 = v70;

                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v64 = sub_100308F88(0, v64[2] + 1, 1, v64);
                }
                unint64_t v73 = v64[2];
                unint64_t v72 = v64[3];
                if (v73 >= v72 >> 1) {
                  unint64_t v64 = sub_100308F88((void *)(v72 > 1), v73 + 1, 1, v64);
                }
                v64[2] = v73 + 1;
                uint64_t v74 = &v64[2 * v73];
                v74[4] = v69;
                v74[5] = v71;
                uint64_t v28 = v268;
                uint64_t v31 = v267;
              }
              else
              {
              }
              ++v63;
              uint64_t v46 = (uint64_t)v271;
            }
            while (v62 != v63);
            goto LABEL_187;
          case 4:
            id v75 = [v1 assignments];
            if (v75)
            {
              uint64_t v76 = v75;
              sub_1000963CC(0, &qword_100910230);
              sub_1000E4F40((unint64_t *)&unk_100914B70, &qword_100910230);
              id v77 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              id v77 = &_swiftEmptySetSingleton;
            }
            sub_100333E80((uint64_t)v77, &qword_100910230, (uint64_t)off_1008AA410, (unint64_t *)&unk_100914B70);
            swift_bridgeObjectRelease();
            id v187 = objc_allocWithZone((Class)NSOrderedSet);
            Class isa = Set._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v189 = [v187 initWithSet:isa];

            uint64_t v190 = sub_1004D1208(v189);
            if (v190) {
              goto LABEL_122;
            }
            uint64_t v277 = 0;
            long long v275 = 0u;
            long long v276 = 0u;
            goto LABEL_163;
          case 5:
            unsigned __int8 v78 = [v1 completed];
            *((void *)&v276 + 1) = &type metadata for Bool;
            uint64_t v277 = &protocol witness table for Bool;
            LOBYTE(v275) = v78;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 6:
            id v79 = [v1 completionDate];
            if (v79)
            {
              id v80 = v79;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v81 = (uint64_t)v45;
              uint64_t v82 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 0, 1, v82);
            }
            else
            {
              uint64_t v81 = (uint64_t)v45;
              uint64_t v82 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
            }
            uint64_t v191 = v81;
            uint64_t v192 = v260;
            sub_100096408(v191, v260, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v193 = *(void *)(v82 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v193 + 48))(v192, 1, v82) == 1)
            {
              sub_1000966BC(v192, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v82;
              uint64_t v277 = &protocol witness table for Date;
              uint64_t v194 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v193 + 32))(v194, v192, v82);
            }
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            CKRecordKeyValueSetting.subscript.setter();
            uint64_t v45 = v269;
            uint64_t v46 = (uint64_t)v271;
            goto LABEL_6;
          case 7:
            id v83 = [v1 contactHandles];
            if (!v83)
            {
              id v195 = [v47 encryptedValues];
              NSString v196 = String._bridgeToObjectiveC()();
              [v195 setObject:0 forKeyedSubscript:v196];
              swift_unknownObjectRelease();

              goto LABEL_5;
            }
            id v84 = v83;
            uint64_t v85 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v87 = v86;

            [v47 encryptedValues];
            sub_100097E38(v85, v87);
            Class v88 = Data._bridgeToObjectiveC()().super.isa;
            id v89 = [self representationFromData:v88];
            sub_100097F34(v85, v87);

            if (v89 && (uint64_t v90 = sub_10016FB3C(), v92 = v91, v89, v92))
            {
              *((void *)&v276 + 1) = &type metadata for String;
              uint64_t v277 = &protocol witness table for String;
              *(void *)&long long v275 = v90;
              *((void *)&v275 + 1) = v92;
            }
            else
            {
              uint64_t v277 = 0;
              long long v275 = 0u;
              long long v276 = 0u;
            }
            uint64_t v46 = (uint64_t)v271;
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            sub_100097F34(v85, v87);
            swift_unknownObjectRelease();
            uint64_t v43 = (uint64_t)v265;
            uint64_t v44 = (uint64_t)v266;
LABEL_118:
            uint64_t v45 = v269;
            uint64_t v47 = v264;
            goto LABEL_6;
          case 8:
            id v93 = [v1 creationDate];
            if (v93)
            {
              uint64_t v94 = v93;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v95 = type metadata accessor for Date();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v28, 0, 1, v95);
            }
            else
            {
              uint64_t v95 = type metadata accessor for Date();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v28, 1, 1, v95);
            }
            sub_100096408((uint64_t)v28, (uint64_t)v31, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v197 = *(void *)(v95 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v197 + 48))(v31, 1, v95) == 1)
            {
              sub_1000966BC((uint64_t)v31, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v95;
              uint64_t v277 = &protocol witness table for Date;
              uint64_t v198 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, char *, uint64_t))(v197 + 32))(v198, v31, v95);
            }
            goto LABEL_137;
          case 9:
            id v96 = [v1 dueDate];
            if (v96)
            {
              uint64_t v97 = v96;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v98 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v43, 0, 1, v98);
            }
            else
            {
              uint64_t v98 = type metadata accessor for Date();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v43, 1, 1, v98);
            }
            sub_100096408(v43, v44, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v199 = *(void *)(v98 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48))(v44, 1, v98) == 1)
            {
              sub_1000966BC(v44, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v98;
              uint64_t v277 = &protocol witness table for Date;
              id v200 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v199 + 32))(v200, v44, v98);
            }
            goto LABEL_137;
          case 0xA:
            id v99 = [v47 encryptedValues];
            id v100 = [v1 dueDateDeltaAlertsData];
            if (v100) {
              goto LABEL_91;
            }
            uint64_t v277 = 0;
            long long v275 = 0u;
            long long v276 = 0u;
            goto LABEL_160;
          case 0xB:
            id v48 = [v1 flagged];
            *((void *)&v276 + 1) = &type metadata for Int64;
            uint64_t v277 = &protocol witness table for Int64;
            *(void *)&long long v275 = v48;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 0xC:
            if (([v1 isOwnedByCurrentUser] & 1) == 0) {
              goto LABEL_6;
            }
            id v101 = [v1 hashtags];
            if (v101)
            {
              uint64_t v102 = v101;
              sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
              sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
              char v103 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              char v103 = &_swiftEmptySetSingleton;
            }
            sub_100333E80((uint64_t)v103, (unint64_t *)&qword_10090DC20, (uint64_t)off_1008AA448, (unint64_t *)&qword_10090BFA0);
            swift_bridgeObjectRelease();
            id v217 = objc_allocWithZone((Class)NSOrderedSet);
            Class v218 = Set._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v219 = [v217 initWithSet:v218];

            uint64_t v190 = sub_1004D1208(v219);
            if (v190)
            {
LABEL_122:
              *((void *)&v276 + 1) = sub_100094134((uint64_t *)&unk_10090AFB0);
              uint64_t v277 = (void *)sub_10034973C();
              *(void *)&long long v275 = v190;
            }
            else
            {
              uint64_t v277 = 0;
              long long v275 = 0u;
              long long v276 = 0u;
            }
LABEL_163:
            uint64_t v43 = (uint64_t)v265;
            uint64_t v44 = (uint64_t)v266;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 0xD:
            [v47 encryptedValues];
            id v104 = [v1 icsUrl];
            if (v104)
            {
              uint64_t v105 = v104;
              uint64_t v106 = (uint64_t)v257;
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v107 = 0;
            }
            else
            {
              uint64_t v107 = 1;
              uint64_t v106 = (uint64_t)v257;
            }
            uint64_t v201 = v254;
            (*v252)(v106, v107, 1, v254);
            uint64_t v202 = v262;
            sub_100096408(v106, v262, (uint64_t *)&unk_100909E40);
            if ((*v251)(v202, 1, v201))
            {
              sub_1000966BC(v202, (uint64_t *)&unk_100909E40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              uint64_t v212 = v249;
              (*v248)(v249, v202, v201);
              sub_1000966BC(v202, (uint64_t *)&unk_100909E40);
              uint64_t v213 = URL.absoluteString.getter();
              uint64_t v215 = v214;
              uint64_t v216 = v212;
              uint64_t v47 = v264;
              (*v247)(v216, v201);
              *((void *)&v276 + 1) = &type metadata for String;
              uint64_t v277 = &protocol witness table for String;
              *(void *)&long long v275 = v213;
              *((void *)&v275 + 1) = v215;
            }
            uint64_t v43 = (uint64_t)v265;
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            swift_unknownObjectRelease();
            goto LABEL_190;
          case 0xE:
            id v108 = [v47 encryptedValues];
            id v100 = [v1 importedICSData];
            if (v100) {
              goto LABEL_91;
            }
            uint64_t v277 = 0;
            long long v275 = 0u;
            long long v276 = 0u;
            goto LABEL_160;
          case 0xF:
            id v109 = [v1 lastModifiedDate];
            if (v109)
            {
              uint64_t v110 = v109;
              uint64_t v111 = (uint64_t)v255;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v112 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v111, 0, 1, v112);
            }
            else
            {
              uint64_t v112 = type metadata accessor for Date();
              uint64_t v111 = (uint64_t)v255;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v255, 1, 1, v112);
            }
            uint64_t v203 = v111;
            uint64_t v204 = v261;
            sub_100096408(v203, v261, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v205 = *(void *)(v112 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v205 + 48))(v204, 1, v112) == 1)
            {
              sub_1000966BC(v204, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v112;
              uint64_t v277 = &protocol witness table for Date;
              uint64_t v206 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v205 + 32))(v206, v204, v112);
            }
            uint64_t v44 = (uint64_t)v266;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 0x10:
            id v113 = [v1 list];
            id v114 = v113;
            if (v113)
            {
              id v115 = [v113 recordID];

              if (v115)
              {
                id v116 = [v47 recordID];
                id v117 = [v116 zoneID];

                id v118 = [v115 zoneID];
                unsigned int v119 = [v117 isEqual:v118];

                if (v119)
                {
                  id v114 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v115];

                  if (v114) {
                    id v120 = v114;
                  }
                }
                else
                {

                  id v114 = 0;
                }
                uint64_t v43 = (uint64_t)v265;
              }
              else
              {
                id v114 = 0;
              }
            }
            CKRecord.subscript.setter();

            goto LABEL_190;
          case 0x11:
            id v121 = [v1 notesDocument];
            if (v121)
            {
              char v122 = v121;
              uint64_t v123 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v125 = v124;

              uint64_t v126 = 0;
              switch(v125 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v123), v123)) {
                    goto LABEL_222;
                  }
                  uint64_t v126 = HIDWORD(v123) - (int)v123;
                  break;
                case 2uLL:
                  uint64_t v221 = *(void *)(v123 + 16);
                  uint64_t v220 = *(void *)(v123 + 24);
                  uint64_t v126 = v220 - v221;
                  if (!__OFSUB__(v220, v221)) {
                    break;
                  }
                  goto LABEL_223;
                case 3uLL:
                  break;
                default:
                  uint64_t v126 = BYTE6(v125);
                  break;
              }
            }
            else
            {
              uint64_t v126 = 0;
              uint64_t v123 = 0;
              unint64_t v125 = 0xF000000000000000;
            }
            sub_1004D0F28(v123, v125, v126, v47, 0x636F447365746F4ELL, 0xED0000746E656D75, 0xD000000000000012, 0x80000001007D1BE0, 1, 2uLL);
            goto LABEL_181;
          case 0x12:
          case 0x19:
            goto LABEL_6;
          case 0x13:
            id v127 = [v1 parentReminder];
            if (v127)
            {
              uint64_t v128 = v127;
              id v129 = [v127 recordID];
            }
            else
            {
              id v129 = 0;
            }
            id v207 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v129, v246];

            CKRecord.subscript.setter();
            goto LABEL_190;
          case 0x14:
            id v130 = [v1 priority];
            *((void *)&v276 + 1) = &type metadata for Int64;
            uint64_t v277 = &protocol witness table for Int64;
            *(void *)&long long v275 = v130;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_4;
          case 0x15:
            id v131 = [v1 recurrenceRules];
            if (!v131)
            {
              unint64_t v64 = _swiftEmptyArrayStorage;
              goto LABEL_188;
            }
            uint64_t v132 = v131;
            *(void *)&long long v275 = v131;
            sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
            sub_1000963CC(0, (unint64_t *)&unk_10090B010);
            sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
            id v258 = v132;
            unint64_t v133 = Sequence.elements<A>(ofType:)();
            unint64_t v134 = v133;
            if (v133 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
              if (!v135)
              {
LABEL_186:
                unint64_t v64 = _swiftEmptyArrayStorage;
                goto LABEL_187;
              }
            }
            else
            {
              uint64_t v135 = *(void *)((v133 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (!v135) {
                goto LABEL_186;
              }
            }
            if (v135 < 1) {
              goto LABEL_220;
            }
            uint64_t v136 = 0;
            unint64_t v64 = _swiftEmptyArrayStorage;
            do
            {
              if ((v134 & 0xC000000000000001) != 0) {
                id v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v137 = *(id *)(v134 + 8 * v136 + 32);
              }
              id v138 = v137;
              id v139 = [v137 ckIdentifier:v246];
              if (v139)
              {
                uint64_t v140 = v139;
                uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v143 = v142;

                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  unint64_t v64 = sub_100308F88(0, v64[2] + 1, 1, v64);
                }
                unint64_t v145 = v64[2];
                unint64_t v144 = v64[3];
                if (v145 >= v144 >> 1) {
                  unint64_t v64 = sub_100308F88((void *)(v144 > 1), v145 + 1, 1, v64);
                }
                v64[2] = v145 + 1;
                os_log_type_t v146 = &v64[2 * v145];
                v146[4] = v141;
                v146[5] = v143;
                uint64_t v28 = v268;
                uint64_t v31 = v267;
              }
              else
              {
              }
              ++v136;
              uint64_t v46 = (uint64_t)v271;
            }
            while (v135 != v136);
LABEL_187:
            id v224 = v258;

            swift_bridgeObjectRelease_n();
            id v1 = v263;
            uint64_t v43 = (uint64_t)v265;
            uint64_t v47 = v264;
LABEL_188:
            *((void *)&v276 + 1) = sub_100094134((uint64_t *)&unk_10090AFB0);
            uint64_t v277 = (void *)sub_10034973C();
            *(void *)&long long v275 = v64;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_189:
            CKRecordKeyValueSetting.subscript.setter();
LABEL_190:
            uint64_t v44 = (uint64_t)v266;
            goto LABEL_5;
          case 0x16:
            id v147 = [v1 startDate];
            if (v147)
            {
              uint64_t v148 = v147;
              uint64_t v149 = (uint64_t)v256;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v150 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v149, 0, 1, v150);
            }
            else
            {
              uint64_t v150 = type metadata accessor for Date();
              uint64_t v149 = (uint64_t)v256;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v256, 1, 1, v150);
            }
            uint64_t v208 = v149;
            uint64_t v209 = (uint64_t)v253;
            sub_100096408(v208, (uint64_t)v253, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v210 = *(void *)(v150 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48))(v209, 1, v150) == 1)
            {
              sub_1000966BC(v209, (uint64_t *)&unk_100909A40);
              long long v275 = 0u;
              long long v276 = 0u;
              uint64_t v277 = 0;
            }
            else
            {
              *((void *)&v276 + 1) = v150;
              uint64_t v277 = &protocol witness table for Date;
              uint64_t v211 = sub_1000C1FE8((uint64_t *)&v275);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v210 + 32))(v211, v209, v150);
            }
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_189;
          case 0x17:
            id v151 = [v1 timeZone];
            if (v151)
            {
              uint64_t v152 = v151;
              uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v155 = v154;

              *((void *)&v276 + 1) = &type metadata for String;
              uint64_t v277 = &protocol witness table for String;
              *(void *)&long long v275 = v153;
              *((void *)&v275 + 1) = v155;
              uint64_t v44 = (uint64_t)v266;
            }
            else
            {
              uint64_t v277 = 0;
              long long v275 = 0u;
              long long v276 = 0u;
            }
LABEL_137:
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_4:
            CKRecordKeyValueSetting.subscript.setter();
            goto LABEL_5;
          case 0x18:
            id v156 = [v1 titleDocument];
            if (v156)
            {
              os_log_type_t v157 = v156;
              uint64_t v123 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v125 = v158;

              uint64_t v159 = 0;
              switch(v125 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v123), v123)) {
                    goto LABEL_224;
                  }
                  uint64_t v159 = HIDWORD(v123) - (int)v123;
                  break;
                case 2uLL:
                  uint64_t v223 = *(void *)(v123 + 16);
                  uint64_t v222 = *(void *)(v123 + 24);
                  uint64_t v159 = v222 - v223;
                  if (!__OFSUB__(v222, v223)) {
                    break;
                  }
                  goto LABEL_225;
                case 3uLL:
                  break;
                default:
                  uint64_t v159 = BYTE6(v125);
                  break;
              }
            }
            else
            {
              uint64_t v159 = 0;
              uint64_t v123 = 0;
              unint64_t v125 = 0xF000000000000000;
            }
            sub_1004D0F28(v123, v125, v159, v47, 0x636F44656C746954, 0xED0000746E656D75, 0xD000000000000012, 0x80000001007D1BA0, 1, 2uLL);
LABEL_181:
            swift_bridgeObjectRelease();
            sub_100097F20(v123, v125);
            goto LABEL_190;
          case 0x1A:
            id v160 = [v47 encryptedValues:v246];
            id v100 = [v1 userActivity];
            if (v100)
            {
LABEL_91:
              uint64_t v161 = v100;
              uint64_t v162 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v164 = v163;

              *((void *)&v276 + 1) = &type metadata for Data;
              uint64_t v277 = &protocol witness table for Data;
              *(void *)&long long v275 = v162;
              *((void *)&v275 + 1) = v164;
              uint64_t v44 = (uint64_t)v266;
              uint64_t v43 = (uint64_t)v265;
            }
            else
            {
              uint64_t v277 = 0;
              long long v275 = 0u;
              long long v276 = 0u;
            }
LABEL_160:
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            swift_unknownObjectRelease();
            goto LABEL_5;
          default:
            unint64_t v274 = 0;
            id v50 = [self daemonUserDefaults];
            id v51 = [v50 cloudKitMaxNumAlarmIDsInReminderCKRecordDebugOverride];

            if (v51)
            {
              unint64_t v52 = (unint64_t)[v51 integerValue];

              if (v52 >= 0x7FFFFFFFFFFFFFFFLL) {
                unint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }
            else
            {
              id v165 = [self sharedConfiguration];
              id v166 = [v165 alarmIDsLimitPerReminder];

              if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFFLL) {
                unint64_t v52 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = (unint64_t)v166;
              }
            }
            swift_beginAccess();
            id v258 = (id)v52;
            unint64_t v274 = v52;
            id v167 = [v1 alarmStorage];
            if (!v167)
            {
              uint64_t v173 = _swiftEmptyArrayStorage;
              goto LABEL_194;
            }
            uint64_t v168 = v167;
            *(void *)&long long v275 = v167;
            sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
            sub_1000963CC(0, (unint64_t *)&unk_10090B010);
            sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
            id v250 = v168;
            unint64_t v169 = Sequence.elements<A>(ofType:)();
            unint64_t v170 = v169;
            if (v169 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v171 = _CocoaArrayWrapper.endIndex.getter();
              if (!v171)
              {
LABEL_192:
                uint64_t v173 = _swiftEmptyArrayStorage;
                goto LABEL_193;
              }
            }
            else
            {
              uint64_t v171 = *(void *)((v169 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (!v171) {
                goto LABEL_192;
              }
            }
            if (v171 < 1) {
              goto LABEL_221;
            }
            uint64_t v172 = 0;
            uint64_t v173 = _swiftEmptyArrayStorage;
            do
            {
              if ((v170 & 0xC000000000000001) != 0) {
                id v174 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v174 = *(id *)(v170 + 8 * v172 + 32);
              }
              unint64_t v175 = v174;
              id v176 = [v174 ckIdentifier:v246];
              if (v176)
              {
                uint64_t v177 = v176;
                uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v180 = v179;

                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v173 = sub_100308F88(0, v173[2] + 1, 1, v173);
                }
                unint64_t v182 = v173[2];
                unint64_t v181 = v173[3];
                if (v182 >= v181 >> 1) {
                  uint64_t v173 = sub_100308F88((void *)(v181 > 1), v182 + 1, 1, v173);
                }
                v173[2] = v182 + 1;
                uint64_t v183 = &v173[2 * v182];
                v183[4] = v178;
                v183[5] = v180;
                uint64_t v28 = v268;
                uint64_t v31 = v267;
              }
              else
              {
              }
              ++v172;
              uint64_t v46 = (uint64_t)v271;
            }
            while (v171 != v172);
LABEL_193:
            id v225 = v250;

            swift_bridgeObjectRelease_n();
            uint64_t v44 = (uint64_t)v266;
            uint64_t v47 = v264;
LABEL_194:
            unint64_t v226 = v173[2];
            if ((unint64_t)v258 >= v226)
            {
              id v239 = v173;
              uint64_t v43 = (uint64_t)v265;
              goto LABEL_212;
            }
            if (qword_1009072D0 != -1) {
              swift_once();
            }
            uint64_t v227 = type metadata accessor for Logger();
            sub_10008E2DC(v227, (uint64_t)qword_100914B50);
            id v228 = v263;
            swift_bridgeObjectRetain_n();
            id v229 = v228;
            uint64_t v230 = Logger.logObject.getter();
            os_log_type_t v231 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v230, v231))
            {
              uint64_t v232 = swift_slowAlloc();
              id v258 = (id)swift_slowAlloc();
              *(void *)&long long v275 = v258;
              *(_DWORD *)uint64_t v232 = 136446978;
              id v233 = [v229 remObjectID];
              if (v233)
              {
                uint64_t v234 = v233;
                id v235 = [v233 description];

                uint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v238 = v237;
              }
              else
              {
                unint64_t v238 = 0xE300000000000000;
                uint64_t v236 = 7104878;
              }
              uint64_t v272 = sub_1000C51B8(v236, v238, (uint64_t *)&v275);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v232 + 12) = 2082;
              unint64_t v240 = sub_1004BA150();
              uint64_t v272 = sub_1000C51B8(v240, v241, (uint64_t *)&v275);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v232 + 22) = 2048;
              swift_bridgeObjectRelease();
              uint64_t v272 = v226;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v232 + 32) = 2048;
              swift_beginAccess();
              uint64_t v272 = v274;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v230, v231, "Create Reminder CK record {self: %{public}s %{public}s} has %ld alarms exceeding limit %ld", (uint8_t *)v232, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v46 = (uint64_t)v271;
              uint64_t v47 = v264;
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            swift_beginAccess();
            unint64_t v242 = v274;
            uint64_t v43 = (uint64_t)v265;
            uint64_t v28 = v268;
            uint64_t v31 = v267;
            if ((v274 & 0x8000000000000000) != 0) {
              goto LABEL_217;
            }
            if (v173[2] < v274) {
              goto LABEL_218;
            }
            type metadata accessor for __ContiguousArrayStorageBase();
            swift_unknownObjectRetain_n();
            uint64_t v243 = (void *)swift_dynamicCastClass();
            if (!v243)
            {
              swift_bridgeObjectRelease();
              uint64_t v243 = _swiftEmptyArrayStorage;
            }
            uint64_t v244 = v243[2];
            swift_release();
            if (v244 == v242)
            {
              id v239 = (void *)swift_dynamicCastClass();
              swift_bridgeObjectRelease();
              uint64_t v44 = (uint64_t)v266;
              if (v239) {
                goto LABEL_212;
              }
              id v239 = _swiftEmptyArrayStorage;
            }
            else
            {
              swift_bridgeObjectRelease();
              id v239 = sub_10020AB20((uint64_t)v173, (uint64_t)(v173 + 4), 0, (2 * v242) | 1);
              uint64_t v44 = (uint64_t)v266;
            }
            swift_bridgeObjectRelease();
LABEL_212:
            *((void *)&v276 + 1) = sub_100094134((uint64_t *)&unk_10090AFB0);
            uint64_t v277 = (void *)sub_10034973C();
            *(void *)&long long v275 = v239;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            CKRecordKeyValueSetting.subscript.setter();
            id v1 = v263;
LABEL_5:
            uint64_t v45 = v269;
LABEL_6:
            if (v42 != v270) {
              continue;
            }
            goto LABEL_215;
        }
      }
      break;
    }
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
    JUMPOUT(0x10033FE08);
  }
  uint64_t v47 = 0;
LABEL_215:
  unint64_t v245 = (objc_class *)v47;
  result.value.super.Class isa = v245;
  result.is_nil = v41;
  return result;
}

void __swiftcall REMCDReminder.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  id v2 = [v1 list];

  id v3 = v2;
}

void __swiftcall REMCDReminder.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
  id v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  uint64_t v14 = (char *)&v88 - v13;
  id v15 = [v3 managedObjectContext:v12];
  if (!v15) {
    return;
  }
  uint64_t v16 = v15;
  if ([v3 isConcealed])
  {
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_100914B50);
    id v18 = v3;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v95 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446466;
      id v22 = [v18 remObjectID];
      if (v22)
      {
        uint64_t v23 = v22;
        id v24 = [v22 description];

        uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v27 = v26;
      }
      else
      {
        uint64_t v25 = 7104878;
        unint64_t v27 = 0xE300000000000000;
      }
      uint64_t v94 = sub_1000C51B8(v25, v27, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2082;
      unint64_t v39 = sub_1004BA150();
      uint64_t v94 = sub_1000C51B8(v39, v40, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed reminder, race condition? {self: %{public}s %{public}s}", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_17;
    }

    goto LABEL_14;
  }
  id v28 = [v3 parentReminder];

  if (v28) {
    goto LABEL_17;
  }
  id v29 = [v3 title];
  if (!v29) {
    goto LABEL_17;
  }
  uint64_t v30 = v29;
  id v31 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  uint64_t v95 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v35 = [v3 account];
  if (v35)
  {
    uint64_t v36 = v35;
    id v91 = v31;
    id v37 = [v35 identifier];

    if (v37)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v10, 0, 1, v38);
    }
    else
    {
      uint64_t v42 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v10, 1, 1, v42);
    }
    sub_100096408((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_100909E50);
    id v31 = v91;
  }
  else
  {
    uint64_t v41 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v14, 1, 1, v41);
  }
  sub_10032E298(KeyPath, (uint64_t)v14);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v43 = swift_getKeyPath();
  sub_10032E05C(v43, (uint64_t)v31, v33);
  swift_release();
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v44 = swift_getKeyPath();
  id v45 = [v3 dueDate];
  if (v45)
  {
    uint64_t v46 = v45;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v47 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v7, 0, 1, v47);
  }
  else
  {
    uint64_t v48 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v7, 1, 1, v48);
  }
  sub_10032E2B8(v44, (uint64_t)v7);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v49 = swift_getKeyPath();
  sub_10032E050(v49, (char)[v3 allDay]);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v50 = swift_getKeyPath();
  id v51 = [v3 timeZone];
  if (v51)
  {
    unint64_t v52 = v51;
    uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v55 = v54;
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v55 = 0;
  }
  sub_10032E05C(v50, v53, v55);
  swift_release();
  swift_bridgeObjectRelease();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_1002F51CC(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v95[2] >= v95[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v94 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  id v56 = (id)NSPredicate.init(format:_:)();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  id v57 = *(id *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if ((unint64_t)v57 >= *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  id v58 = (void *)sub_1002F52FC(v95);
  if (v58)
  {
    id v57 = v58;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (with)
  {
    uint64_t v59 = with;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    id v57 = *(id *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((unint64_t)v57 >= *(void *)((v94 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  id v60 = objc_allocWithZone((Class)NSCompoundPredicate);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [v60 initWithType:1 subpredicates:isa];

  swift_getObjectType();
  id v62 = [swift_getObjCClassFromMetadata() ic_objectsMatchingPredicate:v18 context:v16];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v63 >> 62))
  {
    unint64_t v64 = *(void **)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v64) {
      goto LABEL_52;
    }
LABEL_68:

    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  unint64_t v64 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_68;
  }
LABEL_52:
  if ((v63 & 0xC000000000000001) != 0)
  {
    id v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_55:
    id v57 = v65;
    swift_bridgeObjectRelease();
    self;
    uint64_t v66 = swift_dynamicCastObjCClass();
    if (!v66)
    {

LABEL_14:
LABEL_17:

      return;
    }
    unint64_t v64 = (void *)v66;
    if (qword_1009072D0 == -1) {
      goto LABEL_57;
    }
    goto LABEL_71;
  }
  if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v65 = *(id *)(v63 + 32);
    goto LABEL_55;
  }
  __break(1u);
LABEL_71:
  swift_once();
LABEL_57:
  uint64_t v67 = type metadata accessor for Logger();
  sub_10008E2DC(v67, (uint64_t)qword_100914B50);
  id v68 = v3;
  id v69 = v57;
  id v70 = v68;
  id v71 = v69;
  unint64_t v72 = Logger.logObject.getter();
  int v73 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v72, (os_log_type_t)v73))
  {
    int v90 = v73;
    id v91 = v56;
    uint64_t v74 = swift_slowAlloc();
    uint64_t v88 = swift_slowAlloc();
    uint64_t v93 = v88;
    *(_DWORD *)uint64_t v74 = 136446466;
    id v75 = [v70 remObjectID:v88];
    if (v75)
    {
      uint64_t v76 = v75;
      id v77 = [v75 description];

      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v80 = v79;
    }
    else
    {
      unint64_t v80 = 0xE300000000000000;
      uint64_t v78 = 7104878;
    }
    id v89 = v71;
    uint64_t v92 = sub_1000C51B8(v78, v80, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v74 + 12) = 2082;
    id v81 = [v64 remObjectID];
    if (v81)
    {
      uint64_t v82 = v81;
      id v83 = [v81 description];

      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v86 = v85;
    }
    else
    {
      unint64_t v86 = 0xE300000000000000;
      uint64_t v84 = 7104878;
    }
    uint64_t v92 = sub_1000C51B8(v84, v86, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v87 = v89;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v90, "MERGE.LOCAL: ......REMCDReminder.existingLocalObjectToMerge found a matching local REMCDReminder! {self: %{public}s, matched: %{public}s}", (uint8_t *)v74, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

Swift::Bool __swiftcall REMCDReminder.merge(withLocalObject:)(REMCDObject *withLocalObject)
{
  id v2 = v1;
  uint64_t v4 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v323 = *(void *)(v4 - 8);
  uint64_t v324 = v4;
  __chkstk_darwin(v4);
  uint64_t v326 = (REMCDObject *)((char *)&v303 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v327 = (char *)&v303 - v7;
  uint64_t v320 = type metadata accessor for URL();
  id v312 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v320 - 8);
  __chkstk_darwin(v320);
  id v311 = (char *)&v303 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  unint64_t v319 = (char *)&v303 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  uint64_t v318 = (char *)&v303 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v317 = (char *)&v303 - v14;
  __chkstk_darwin(v15);
  uint64_t v316 = (char *)&v303 - v16;
  __chkstk_darwin(v17);
  char v315 = (char *)&v303 - v18;
  __chkstk_darwin(v19);
  uint64_t v314 = (char *)&v303 - v20;
  __chkstk_darwin(v21);
  os_log_type_t v310 = (void (**)(char *, uint64_t))((char *)&v303 - v22);
  __chkstk_darwin(v23);
  unint64_t v321 = (char *)&v303 - v24;
  uint64_t v328 = type metadata accessor for Date();
  long long v322 = *(void **)(v328 - 8);
  __chkstk_darwin(v328);
  id v308 = (void (**)(char *, char *, uint64_t))((char *)&v303 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  uint64_t v307 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v303 - v27);
  __chkstk_darwin(v28);
  unint64_t v309 = (char *)&v303 - v29;
  __chkstk_darwin(v30);
  unint64_t v329 = (char *)&v303 - v31;
  __chkstk_darwin(v32);
  uint64_t v313 = (char *)&v303 - v33;
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  id v37 = (char *)&v303 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100094134((uint64_t *)&unk_10090B4C0);
  __chkstk_darwin(v38);
  unint64_t v40 = (char *)&v303 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v41 - 8);
  uint64_t v43 = (char *)&v303 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  uint64_t v46 = (char *)&v303 - v45;
  *(void *)&double v48 = __chkstk_darwin(v47).n128_u64[0];
  uint64_t v50 = (char *)&v303 - v49;
  uint64_t v330 = v2;
  id v51 = [v2 managedObjectContext];
  if (!v51) {
    return (char)v51;
  }
  id v325 = v51;
  self;
  uint64_t v52 = swift_dynamicCastObjCClass();
  if (!v52) {
    goto LABEL_151;
  }
  uint64_t v53 = (void *)v52;
  uint64_t v54 = withLocalObject;
  if ([v53 isConcealed])
  {
    if (qword_1009072D0 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_10008E2DC(v55, (uint64_t)qword_100914B50);
    id v56 = v54;
    id v57 = v330;
    id v58 = v56;
    uint64_t v59 = v57;
    id v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = 7104878;
      uint64_t v63 = swift_slowAlloc();
      *(void *)&long long v333 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136446722;
      id v64 = [v59 remObjectID];
      if (v64)
      {
        id v65 = v64;
        id v66 = [v64 description];

        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v69 = v68;
      }
      else
      {
        unint64_t v69 = 0xE300000000000000;
        uint64_t v67 = 7104878;
      }
      *(void *)&long long v332 = sub_1000C51B8(v67, v69, (uint64_t *)&v333);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2082;
      uint64_t v111 = [(REMCDObject *)v58 remObjectID];
      if (v111)
      {
        uint64_t v112 = v111;
        id v113 = [(REMObjectID *)v111 description];

        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v115 = v114;
      }
      else
      {
        unint64_t v115 = 0xE300000000000000;
      }
      *(void *)&long long v332 = sub_1000C51B8(v62, v115, (uint64_t *)&v333);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 22) = 2082;
      unint64_t v116 = sub_1004BA150();
      *(void *)&long long v332 = sub_1000C51B8(v116, v117, (uint64_t *)&v333);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "MERGE.LOCAL: ...Should not attempt to merge with a concealed local reminder, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}", (uint8_t *)v63, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_151:
      goto LABEL_152;
    }

    goto LABEL_39;
  }
  int v304 = v54;
  id v306 = v53;
  id v70 = [v53 identifier];
  if (v70)
  {
    id v71 = v70;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v72 = *(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56);
    v72(v50, 0, 1, v34);
  }
  else
  {
    unint64_t v72 = *(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56);
    v72(v50, 1, 1, v34);
  }
  id v73 = [v330 identifier];
  if (v73)
  {
    uint64_t v74 = v73;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v75 = 0;
  }
  else
  {
    uint64_t v75 = 1;
  }
  v72(v46, v75, 1, v34);
  uint64_t v76 = (uint64_t)&v40[*(int *)(v38 + 48)];
  sub_1000BF710((uint64_t)v50, (uint64_t)v40, (uint64_t *)&unk_100909E50);
  sub_1000BF710((uint64_t)v46, v76, (uint64_t *)&unk_100909E50);
  id v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  if (v77((uint64_t)v40, 1, v34) == 1)
  {
    sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
    if (v77(v76, 1, v34) == 1)
    {
      sub_1000966BC((uint64_t)v40, (uint64_t *)&unk_100909E50);
      uint64_t v78 = v330;
LABEL_29:
      if (qword_1009072D0 != -1) {
        swift_once();
      }
      uint64_t v97 = type metadata accessor for Logger();
      sub_10008E2DC(v97, (uint64_t)qword_100914B50);
      uint64_t v98 = v304;
      id v99 = v78;
      id v58 = v98;
      id v100 = v99;
      id v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = 7104878;
        uint64_t v104 = swift_slowAlloc();
        *(void *)&long long v333 = swift_slowAlloc();
        *(_DWORD *)uint64_t v104 = 136446466;
        id v105 = [v100 remObjectID];
        if (v105)
        {
          uint64_t v106 = v105;
          id v107 = [v105 description];

          uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v110 = v109;
        }
        else
        {
          unint64_t v110 = 0xE300000000000000;
          uint64_t v108 = 7104878;
        }
        *(void *)&long long v332 = sub_1000C51B8(v108, v110, (uint64_t *)&v333);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v104 + 12) = 2082;
        uint64_t v210 = [(REMCDObject *)v58 remObjectID];
        if (v210)
        {
          uint64_t v211 = v210;
          id v212 = [(REMObjectID *)v210 description];

          uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v214 = v213;
        }
        else
        {
          unint64_t v214 = 0xE300000000000000;
        }
        *(void *)&long long v332 = sub_1000C51B8(v103, v214, (uint64_t *)&v333);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "MERGE.LOCAL: ......should not try to merge with itself! {self: %{public}s, local: %{public}s}", (uint8_t *)v104, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_151;
      }

LABEL_39:
LABEL_152:
      LOBYTE(v51) = 0;
      return (char)v51;
    }
    goto LABEL_21;
  }
  sub_1000BF710((uint64_t)v40, (uint64_t)v43, (uint64_t *)&unk_100909E50);
  if (v77(v76, 1, v34) == 1)
  {
    sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_100909E50);
    sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v43, v34);
LABEL_21:
    sub_1000966BC((uint64_t)v40, (uint64_t *)&unk_10090B4C0);
    uint64_t v78 = v330;
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v37, v76, v34);
  sub_1003498D0((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v96 = *(void (**)(char *, uint64_t))(v35 + 8);
  v96(v37, v34);
  sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_100909E50);
  sub_1000966BC((uint64_t)v50, (uint64_t *)&unk_100909E50);
  v96(v43, v34);
  sub_1000966BC((uint64_t)v40, (uint64_t *)&unk_100909E50);
  uint64_t v78 = v330;
  if (v95) {
    goto LABEL_29;
  }
LABEL_22:
  id v79 = [v78 lastModifiedDate];
  if (v79)
  {
    unint64_t v80 = v79;
    id v81 = v329;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v82 = (uint64_t)v321;
    id v83 = v322;
    uint64_t v84 = (void (*)(char *, char *, uint64_t))v322[4];
    uint64_t v85 = v328;
    v84(v321, v81, v328);
    uint64_t v305 = (void (*)(char *, void, uint64_t, uint64_t))v83[7];
    v305((char *)v82, 0, 1, v85);
    unint64_t v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v83[6];
    if (v86(v82, 1, v85) != 1)
    {
      v84(v313, (char *)v82, v85);
      id v87 = [v306 lastModifiedDate];
      if (v87)
      {
        uint64_t v88 = v87;
        id v89 = v329;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v82 = (uint64_t)v310;
        v84((char *)v310, v89, v85);
        v305((char *)v82, 0, 1, v85);
        if (v86(v82, 1, v85) != 1)
        {
          int v90 = v309;
          v84(v309, (char *)v82, v85);
          sub_1003498D0((unint64_t *)&qword_1009123E0, (void (*)(uint64_t))&type metadata accessor for Date);
          id v91 = v313;
          char v92 = dispatch thunk of static Comparable.< infix(_:_:)();
          id v93 = v306;
          if ((v92 & 1) == 0)
          {
            if (qword_1009072D0 != -1) {
              swift_once();
            }
            uint64_t v215 = type metadata accessor for Logger();
            sub_10008E2DC(v215, (uint64_t)qword_100914B50);
            uint64_t v216 = (void (*)(unsigned int (**)(char *, uint64_t, uint64_t), char *, uint64_t))v83[2];
            id v217 = v307;
            uint64_t v218 = v328;
            v216(v307, v91, v328);
            id v219 = v308;
            v216((unsigned int (**)(char *, uint64_t, uint64_t))v308, v90, v218);
            uint64_t v220 = v304;
            uint64_t v221 = v78;
            uint64_t v222 = v220;
            uint64_t v223 = v221;
            id v224 = Logger.logObject.getter();
            int v225 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v224, (os_log_type_t)v225))
            {
              LODWORD(v329) = v225;
              uint64_t v326 = v222;
              uint64_t v226 = 7104878;
              uint64_t v227 = swift_slowAlloc();
              uint64_t v228 = swift_slowAlloc();
              *(void *)&long long v333 = v228;
              *(_DWORD *)uint64_t v227 = 136446978;
              id v229 = [v223 remObjectID];
              uint64_t v327 = (char *)v228;
              if (v229)
              {
                uint64_t v230 = v229;
                id v231 = [v229 description];

                uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v234 = v233;
              }
              else
              {
                unint64_t v234 = 0xE300000000000000;
                uint64_t v232 = 7104878;
              }
              unint64_t v237 = v307;
              *(void *)&long long v332 = sub_1000C51B8(v232, v234, (uint64_t *)&v333);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              swift_bridgeObjectRelease();
              *(_WORD *)(v227 + 12) = 2082;
              id v238 = [v306 remObjectID];
              uint64_t v330 = v224;
              if (v238)
              {
                id v239 = v238;
                id v240 = [v238 description];

                uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v242 = v241;
              }
              else
              {
                unint64_t v242 = 0xE300000000000000;
              }
              uint64_t v243 = v322;
              *(void *)&long long v332 = sub_1000C51B8(v226, v242, (uint64_t *)&v333);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v244 = v326;

              swift_bridgeObjectRelease();
              *(_WORD *)(v227 + 22) = 2082;
              uint64_t v245 = Date.debugDescription.getter();
              *(void *)&long long v332 = sub_1000C51B8(v245, v246, (uint64_t *)&v333);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              uint64_t v236 = (void (*)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v243[1];
              uint64_t v218 = v328;
              v236(v237, v328);
              *(_WORD *)(v227 + 32) = 2082;
              id v247 = v308;
              uint64_t v248 = Date.debugDescription.getter();
              *(void *)&long long v332 = sub_1000C51B8(v248, v249, (uint64_t *)&v333);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              id v250 = v247;
              uint64_t v222 = v244;
              v236((unsigned int (**)(char *, uint64_t, uint64_t))v250, v218);
              BOOL v251 = v330;
              _os_log_impl((void *)&_mh_execute_header, v330, (os_log_type_t)v329, "MERGE.LOCAL: ......server copy is newer, keep server data and delete local. {cloud: %{public}s, local: %{public}s, cloud.lastmod: %{public}s, local.lastmod: %{public}s}", (uint8_t *)v227, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              id v235 = v219;
              uint64_t v236 = (void (*)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v83[1];
              v236(v217, v218);
              v236((unsigned int (**)(char *, uint64_t, uint64_t))v235, v218);
            }
            id v252 = v306;
            id v253 = [v306 list];
            [v253 removeRemindersObject:v252];

            id v254 = v325;
            [v325 deleteObject:v252];

            v236((unsigned int (**)(char *, uint64_t, uint64_t))v309, v218);
            v236((unsigned int (**)(char *, uint64_t, uint64_t))v313, v218);
            LOBYTE(v51) = 1;
            return (char)v51;
          }
          uint64_t v94 = (void (*)(char *, uint64_t))v83[1];
          v94(v90, v85);
          v94(v91, v85);
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v82 = (uint64_t)v310;
        v305((char *)v310, 1, 1, v85);
      }
      ((void (*)(char *, uint64_t))v83[1])(v313, v85);
    }
  }
  else
  {
    uint64_t v82 = (uint64_t)v321;
    id v83 = v322;
    uint64_t v305 = (void (*)(char *, void, uint64_t, uint64_t))v322[7];
    v305(v321, 1, 1, v328);
  }
  sub_1000966BC(v82, (uint64_t *)&unk_100909A40);
  id v93 = v306;
LABEL_45:
  id v118 = [v78 createResolutionTokenMapIfNecessary];
  uint64_t v119 = 27;
  long long v322 = v118;
  uint64_t v120 = v328;
  id v308 = (void (**)(char *, char *, uint64_t))(v312 + 4);
  unint64_t v309 = (char *)(v312 + 7);
  uint64_t v307 = v312 + 6;
  unint64_t v303 = (void (**)(char *, uint64_t))(v312 + 1);
  uint64_t v313 = (char *)(v83 + 4);
  unint64_t v321 = (char *)(v83 + 7);
  id v312 = (unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 6);
  os_log_type_t v310 = (void (**)(char *, uint64_t))(v83 + 1);
  id v121 = &byte_1008B3A08;
  char v122 = &selRef_ckServerChangeTokens;
  while (2)
  {
    int v126 = *v121++;
    char v125 = v126;
    switch(v126)
    {
      case 2:
        Class isa = (Class)[v93 alternativeDisplayDateDate_forCalendar];
        if (isa)
        {
          uint64_t v128 = v329;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v129 = v316;
          id v130 = v305;
          (*(void (**)(char *, char *, uint64_t))v313)(v316, v128, v120);
          v130(v129, 0, 1, v120);
          if ((*v312)(v129, 1, v120) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v310)(v129, v120);
          }
          char v122 = &selRef_ckServerChangeTokens;
        }
        else
        {
          v305(v316, 1, 1, v120);
        }
        -[NSObject setAlternativeDisplayDateDate_forCalendar:](v330, "setAlternativeDisplayDateDate_forCalendar:", isa, v303);
        goto LABEL_48;
      case 5:
        id v131 = [v93 completed];
        [v330 setCompleted:v131];
        goto LABEL_49;
      case 6:
        Class isa = (Class)[v93 completionDate];
        if (isa)
        {
          uint64_t v132 = v329;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v133 = v314;
          unint64_t v134 = v305;
          (*(void (**)(char *, char *, uint64_t))v313)(v314, v132, v120);
          v134(v133, 0, 1, v120);
          if ((*v312)(v133, 1, v120) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v310)(v133, v120);
          }
          char v122 = &selRef_ckServerChangeTokens;
        }
        else
        {
          v305(v314, 1, 1, v120);
        }
        -[NSObject setCompletionDate:](v330, "setCompletionDate:", isa, v303);
        goto LABEL_48;
      case 8:
        Class isa = (Class)[v93 creationDate];
        if (isa)
        {
          uint64_t v135 = v329;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v136 = v315;
          id v137 = v305;
          (*(void (**)(char *, char *, uint64_t))v313)(v315, v135, v120);
          v137(v136, 0, 1, v120);
          if ((*v312)(v136, 1, v120) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v310)(v136, v120);
          }
          char v122 = &selRef_ckServerChangeTokens;
        }
        else
        {
          v305(v315, 1, 1, v120);
        }
        -[NSObject setCreationDate:](v330, "setCreationDate:", isa, v303);
        goto LABEL_48;
      case 13:
        Class isa = (Class)[v93 icsUrl];
        if (isa)
        {
          id v138 = v311;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          id v139 = v319;
          uint64_t v140 = v320;
          (*v308)(v319, v138, v320);
          (*(void (**)(char *, void, uint64_t, uint64_t))v309)(v139, 0, 1, v140);
          if ((*v307)(v139, 1, v140) == 1)
          {
            Class isa = 0;
          }
          else
          {
            URL._bridgeToObjectiveC()(v141);
            uint64_t v164 = v139;
            Class isa = v165;
            (*v303)(v164, v140);
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v309)(v319, 1, 1, v320);
        }
        -[NSObject setIcsUrl:](v330, "setIcsUrl:", isa, v303);
        goto LABEL_48;
      case 14:
        Class isa = (Class)[v93 importedICSData];
        if (isa)
        {
          uint64_t v142 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v144 = v143;

          Class isa = Data._bridgeToObjectiveC()().super.isa;
          unint64_t v145 = v144;
          char v122 = &selRef_ckServerChangeTokens;
          sub_100097F34(v142, v145);
        }
        -[NSObject setImportedICSData:](v330, "setImportedICSData:", isa, v303);
        goto LABEL_48;
      case 15:
        Class isa = (Class)[v93 lastModifiedDate];
        if (isa)
        {
          os_log_type_t v146 = v329;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v147 = v317;
          uint64_t v148 = v305;
          (*(void (**)(char *, char *, uint64_t))v313)(v317, v146, v120);
          v148(v147, 0, 1, v120);
          if ((*v312)(v147, 1, v120) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v310)(v147, v120);
          }
          char v122 = &selRef_ckServerChangeTokens;
        }
        else
        {
          v305(v317, 1, 1, v120);
        }
        -[NSObject setLastModifiedDate:](v330, "setLastModifiedDate:", isa, v303);
        goto LABEL_48;
      case 17:
        id v149 = [v93 notes];
        if (!v149) {
          goto LABEL_50;
        }
        uint64_t v150 = v149;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v151 = [v330 notesDocument];
        if (v151)
        {
          uint64_t v152 = v151;
          uint64_t v153 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v155 = v154;
        }
        else
        {
          uint64_t v153 = 0;
          unint64_t v155 = 0xF000000000000000;
        }
        id v166 = (void *)sub_100343D54(v153, v155, 0x636F447365746F6ELL, 0xED0000746E656D75, (Class *)REMCRMergeableStringDocument_ptr, (uint64_t (*)(void *, uint64_t, unint64_t))sub_10028B1B0);
        swift_bridgeObjectRelease();
        sub_100097F20(v153, v155);
        if (v166)
        {
          NSString v167 = [v166 mutableDocument];
          id v168 = objc_allocWithZone((Class)NSAttributedString);
          NSString v169 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v170 = [v168 initWithString:v169];

          id v171 = [v167 wipeAndReplaceWithString:v170];
          uint64_t v120 = v328;
        }
        else
        {
          id v172 = sub_1004B9D50();
          uint64_t v120 = v328;
          if (!v172)
          {
            swift_bridgeObjectRelease();
            id v93 = v306;
            id v118 = v322;
            goto LABEL_113;
          }
          id v170 = v172;
          id v173 = objc_allocWithZone((Class)REMCRMergeableStringDocument);
          NSString v167 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v171 = [v173 initWithReplicaIDSource:v170 string:v167];
        }

        id v118 = v322;
        if (!v171)
        {
          id v93 = v306;
LABEL_113:
          char v122 = &selRef_ckServerChangeTokens;
          goto LABEL_50;
        }
        id v174 = v171;
        id v175 = [v174 serializedData];
        uint64_t v176 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v178 = v177;

        Class v179 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F34(v176, v178);
        uint64_t v180 = v330;
        [v330 setNotesDocument:v179];

        id v181 = [v174 attributedString];
        NSString v182 = [v181 string];

        if (!v182)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v182 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        -[NSObject setNotes:](v180, "setNotes:", v182, v303);

        id v93 = v306;
        char v122 = &selRef_ckServerChangeTokens;
LABEL_49:
        sub_100334B78(v125);
        NSString v123 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v124 = [v118 v122[341]:v123];

        [v124 update];
LABEL_50:
        if (--v119) {
          continue;
        }
        uint64_t v183 = v330;
        id v184 = [v330 alarmStorage];
        if (v184)
        {
          uint64_t v185 = v184;
          if (qword_1009072D0 != -1) {
            swift_once();
          }
          uint64_t v186 = type metadata accessor for Logger();
          sub_10008E2DC(v186, (uint64_t)qword_100914B50);
          id v187 = v185;
          int v188 = Logger.logObject.getter();
          os_log_type_t v189 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v188, v189))
          {
            uint64_t v190 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v190 = 134217984;
            *(void *)&long long v333 = [v187 count];
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v188, v189, "MERGE.LOCAL: ......removing original alarms of the cloud reminder {cloud.alarms.count: %ld}.", v190, 0xCu);
            swift_slowDealloc();
          }
          else
          {

            int v188 = v187;
          }
          uint64_t v191 = v327;

          unint64_t v329 = (char *)v187;
          NSOrderedSet.makeIterator()();
          NSFastEnumerationIterator.next()();
          while (v334)
          {
            sub_10009A1A0(&v333, &v332);
            sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
            if (swift_dynamicCast())
            {
              id v193 = v331;
              [v331 setReminder:0];
              if ([v193 shouldMarkAsDeletedInsteadOfDeletingImmediately])
              {
                uint64_t v194 = [objc_allocWithZone((Class)NSMutableSet) init];
                [v193 recursiveMarkForDeletion:1 usingVisitedMap:v194];
LABEL_128:

                goto LABEL_123;
              }
              uint64_t v194 = Logger.logObject.getter();
              os_log_type_t v195 = static os_log_type_t.fault.getter();
              if (!os_log_type_enabled(v194, v195)) {
                goto LABEL_128;
              }
              uint64_t v192 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v192 = 0;
              _os_log_impl((void *)&_mh_execute_header, v194, v195, "MERGE.LOCAL: ......merge(withLocalObject): We expect alarms to support markForDeletion.", v192, 2u);
              uint64_t v191 = v327;
              swift_slowDealloc();
            }
LABEL_123:
            NSFastEnumerationIterator.next()();
          }
          (*(void (**)(char *, uint64_t))(v323 + 8))(v191, v324);
          NSString v196 = v329;
          uint64_t v183 = v330;
          [v330 removeAlarmStorage:v329];

          id v93 = v306;
          id v118 = v322;
        }
        id v197 = [v93 alarmStorage:v303];
        uint64_t v198 = &selRef_stringFromDate_;
        if (!v197) {
          goto LABEL_168;
        }
        uint64_t v199 = v197;
        *(void *)&long long v333 = v197;
        sub_1000963CC(0, (unint64_t *)&unk_100909AC0);
        id v200 = (uint8_t *)NSOrderedSet_ptr;
        sub_1000963CC(0, (unint64_t *)&unk_10090B010);
        sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
        unint64_t v201 = Sequence.elements<A>(ofType:)();

        if (qword_1009072D0 != -1) {
          swift_once();
        }
        uint64_t v202 = type metadata accessor for Logger();
        sub_10008E2DC(v202, (uint64_t)qword_100914B50);
        swift_bridgeObjectRetain();
        uint64_t v203 = Logger.logObject.getter();
        os_log_type_t v204 = static os_log_type_t.info.getter();
        unint64_t v205 = v201 >> 62;
        if (!os_log_type_enabled((os_log_t)v203, v204))
        {

          swift_bridgeObjectRelease();
          goto LABEL_138;
        }
        id v200 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v200 = 134217984;
        if (v205) {
          goto LABEL_217;
        }
        uint64_t v206 = *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10);
        while (2)
        {
          *(void *)&long long v333 = v206;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v203, v204, "MERGE.LOCAL: ......adding local alarms to the cloud reminder {local.alarms.count: %ld}.", v200, 0xCu);
          swift_slowDealloc();

LABEL_138:
          if (v205)
          {
            swift_bridgeObjectRetain();
            uint64_t v203 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v203) {
              goto LABEL_167;
            }
LABEL_140:
            if (v203 >= 1)
            {
              uint64_t v207 = 0;
              do
              {
                if ((v201 & 0xC000000000000001) != 0) {
                  id v208 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v208 = *(id *)(v201 + 8 * v207 + 32);
                }
                uint64_t v209 = v208;
                ++v207;
                [v183 addAlarmStorageObject:v208];
                [v209 setReminder:v183];
                [v209 v198[111]];
              }
              while (v203 != v207);
              goto LABEL_167;
            }
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            swift_bridgeObjectRetain();
            uint64_t v206 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            continue;
          }
          break;
        }
        uint64_t v203 = *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v203) {
          goto LABEL_140;
        }
LABEL_167:
        swift_bridgeObjectRelease();
        id v93 = v306;
        id v118 = v322;
LABEL_168:
        id v255 = [v183 recurrenceRules];
        if (v255)
        {
          uint64_t v256 = v255;
          if (qword_1009072D0 != -1) {
            swift_once();
          }
          uint64_t v257 = type metadata accessor for Logger();
          uint64_t v258 = sub_10008E2DC(v257, (uint64_t)qword_100914B50);
          uint64_t v259 = v256;
          unint64_t v329 = (char *)v258;
          uint64_t v260 = Logger.logObject.getter();
          os_log_type_t v261 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v260, v261))
          {
            uint64_t v262 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v262 = 134217984;
            *(void *)&long long v333 = [v259 count];
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v260, v261, "MERGE.LOCAL: ......removing original recurrence rules of the cloud reminder {cloud.rrules.count: %ld}.", v262, 0xCu);
            swift_slowDealloc();
          }
          else
          {

            uint64_t v260 = v259;
          }
          id v263 = (char *)v326;

          uint64_t v328 = (uint64_t)v259;
          NSOrderedSet.makeIterator()();
          NSFastEnumerationIterator.next()();
          while (v334)
          {
            sub_10009A1A0(&v333, &v332);
            sub_1000963CC(0, (unint64_t *)&qword_100911820);
            if (swift_dynamicCast())
            {
              id v265 = v331;
              [v331 setReminder:0];
              if ([v265 shouldMarkAsDeletedInsteadOfDeletingImmediately])
              {
                id v264 = [objc_allocWithZone((Class)NSMutableSet) init];
                [v265 recursiveMarkForDeletion:1 usingVisitedMap:v264];
              }
              else
              {
                unint64_t v266 = v198;
                id v267 = Logger.logObject.getter();
                os_log_type_t v268 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v267, v268))
                {
                  os_log_type_t v269 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)os_log_type_t v269 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v267, v268, "merge(withLocalObject): We do actually expect recurrence-rules to support markForDeletion.", v269, 2u);
                  id v263 = (char *)v326;
                  swift_slowDealloc();
                }
                else
                {
                }
                uint64_t v198 = v266;
              }
            }
            NSFastEnumerationIterator.next()();
          }
          (*(void (**)(char *, uint64_t))(v323 + 8))(v263, v324);
          uint64_t v183 = v330;
          uint64_t v270 = (void *)v328;
          [v330 removeRecurrenceRules:v328];

          id v93 = v306;
          id v118 = v322;
        }
        id v271 = [v93 recurrenceRules];
        if (!v271) {
          goto LABEL_203;
        }
        uint64_t v272 = v271;
        *(void *)&long long v333 = v271;
        sub_1000963CC(0, (unint64_t *)&qword_100911820);
        id v200 = (uint8_t *)NSOrderedSet_ptr;
        sub_1000963CC(0, (unint64_t *)&unk_10090B010);
        sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
        unint64_t v201 = Sequence.elements<A>(ofType:)();

        if (qword_1009072D0 != -1) {
          swift_once();
        }
        uint64_t v273 = type metadata accessor for Logger();
        sub_10008E2DC(v273, (uint64_t)qword_100914B50);
        swift_bridgeObjectRetain_n();
        unint64_t v274 = Logger.logObject.getter();
        os_log_type_t v204 = static os_log_type_t.info.getter();
        unint64_t v205 = v201 >> 62;
        if (os_log_type_enabled(v274, v204))
        {
          id v200 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)id v200 = 134217984;
          if (v205)
          {
            swift_bridgeObjectRetain();
            uint64_t v275 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v275 = *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          *(void *)&long long v333 = v275;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v274, v204, "MERGE.LOCAL: ......adding local recurrence rules to the cloud reminder {local.rrules.count: %ld}.", v200, 0xCu);
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (v205)
        {
          swift_bridgeObjectRetain();
          uint64_t v203 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v203) {
            goto LABEL_202;
          }
        }
        else
        {
          uint64_t v203 = *(void *)((v201 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v203) {
            goto LABEL_202;
          }
        }
        if (v203 < 1) {
          goto LABEL_216;
        }
        uint64_t v276 = 0;
        do
        {
          if ((v201 & 0xC000000000000001) != 0) {
            id v277 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v277 = *(id *)(v201 + 8 * v276 + 32);
          }
          objc_super v278 = v277;
          ++v276;
          [v183 addRecurrenceRulesObject:v277];
          [v278 setReminder:v183];
          [v278 v198[111]];
        }
        while (v203 != v276);
LABEL_202:
        swift_bridgeObjectRelease();
        id v118 = v322;
LABEL_203:
        [v183 v198[111]];
        if (qword_1009072D0 != -1) {
          swift_once();
        }
        uint64_t v279 = type metadata accessor for Logger();
        sub_10008E2DC(v279, (uint64_t)qword_100914B50);
        Class v280 = v304;
        os_log_type_t v281 = v183;
        NSString v282 = v280;
        id v283 = v281;
        id v284 = Logger.logObject.getter();
        os_log_type_t v285 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v284, v285))
        {
          uint64_t v286 = 7104878;
          uint64_t v287 = swift_slowAlloc();
          *(void *)&long long v333 = swift_slowAlloc();
          *(_DWORD *)uint64_t v287 = 136446466;
          id v288 = [v306 remObjectID];
          if (v288)
          {
            id v289 = v288;
            id v290 = [v288 description];

            uint64_t v291 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v293 = v292;
          }
          else
          {
            unint64_t v293 = 0xE300000000000000;
            uint64_t v291 = 7104878;
          }
          *(void *)&long long v332 = sub_1000C51B8(v291, v293, (uint64_t *)&v333);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v287 + 12) = 2082;
          id v294 = [v283 remObjectID];
          if (v294)
          {
            id v295 = v294;
            id v296 = [v294 description];

            uint64_t v286 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v298 = v297;
          }
          else
          {
            unint64_t v298 = 0xE300000000000000;
          }
          *(void *)&long long v332 = sub_1000C51B8(v286, v298, (uint64_t *)&v333);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v284, v285, "MERGE.LOCAL: ...done merging local reminder to the cloud reminder, now delete the local object {local.reminder: %{public}s, cloud.reminder: %{public}s}", (uint8_t *)v287, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          id v118 = v322;
        }
        else
        {
        }
        id v299 = v306;
        id v300 = [v306 list];
        [v300 removeRemindersObject:v299];

        id v301 = v325;
        [v325 deleteObject:v299];

        LOBYTE(v51) = 1;
        return (char)v51;
      case 20:
        id v156 = [v93 priority];
        [v330 setPriority:v156];
        goto LABEL_49;
      case 22:
        Class isa = (Class)[v93 startDate];
        if (isa)
        {
          os_log_type_t v157 = v329;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v158 = v318;
          uint64_t v159 = v305;
          (*(void (**)(char *, char *, uint64_t))v313)(v318, v157, v120);
          v159(v158, 0, 1, v120);
          if ((*v312)(v158, 1, v120) == 1)
          {
            Class isa = 0;
          }
          else
          {
            Class isa = Date._bridgeToObjectiveC()().super.isa;
            (*v310)(v158, v120);
          }
          char v122 = &selRef_ckServerChangeTokens;
        }
        else
        {
          v305(v318, 1, 1, v120);
        }
        -[NSObject setStartDate:](v330, "setStartDate:", isa, v303);
        goto LABEL_48;
      case 26:
        Class isa = (Class)[v93 userActivity];
        if (isa)
        {
          uint64_t v160 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v162 = v161;

          Class isa = Data._bridgeToObjectiveC()().super.isa;
          unint64_t v163 = v162;
          char v122 = &selRef_ckServerChangeTokens;
          sub_100097F34(v160, v163);
        }
        -[NSObject setUserActivity:](v330, "setUserActivity:", isa, v303);
LABEL_48:

        goto LABEL_49;
      default:
        goto LABEL_50;
    }
  }
}

uint64_t sub_100343D34(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100343D54(a1, a2, a3, a4, (Class *)REMCRMergeableOrderedSet_ptr, (uint64_t (*)(void *, uint64_t, unint64_t))sub_10028B1B0);
}

uint64_t sub_100343D54(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, Class *a5, uint64_t (*a6)(void *, uint64_t, unint64_t))
{
  uint64_t v7 = v6;
  uint64_t v8 = 0;
  if (a2 >> 60 != 15)
  {
    sub_100097E38(a1, a2);
    id v15 = sub_1004B9D50();
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = objc_allocWithZone(*a5);
      sub_100097E24(a1, a2);
      uint64_t v8 = a6(v16, a1, a2);
      sub_100097F20(a1, a2);

      sub_100097F20(a1, a2);
    }
    else
    {
      if (qword_1009076A0 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_10091AC90);
      id v19 = v7;
      swift_bridgeObjectRetain_n();
      id v20 = v19;
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v26 = (void *)swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446466;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a3, a4, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v23 + 12) = 2112;
        id v24 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v26 = v20;

        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to deserialize CR property from CKRecord because replicaIDSource isn't available {key: %{public}s, cdObject: %@}", (uint8_t *)v23, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100097F20(a1, a2);
      }
      else
      {
        sub_100097F20(a1, a2);

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
  }
  return v8;
}

void *REMCDReminder.objectsToBeDeletedBeforeThisObject()()
{
  id v1 = v0;
  id v2 = [v0 recurrenceRules];
  if (v2) {
    sub_10020370C(v2);
  }
  id v3 = [v0 attachments];
  if (v3) {
    sub_10020370C(v3);
  }
  id v4 = [v0 alarmStorage];
  if (v4) {
    sub_10020370C(v4);
  }
  id v5 = [v0 children];
  if (v5)
  {
    uint64_t v6 = v5;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
    uint64_t v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v8 = sub_10020B7F8(v7);
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_100200788((unint64_t)v8);
    swift_release();
    sub_100200B74(v9);
  }
  id v10 = [v1 assignments];
  if (v10)
  {
    uint64_t v11 = v10;
    sub_1000963CC(0, &qword_100910230);
    sub_1000E4F40((unint64_t *)&unk_100914B70, &qword_100910230);
    uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = sub_10020B858(v12);
    swift_bridgeObjectRelease();
    uint64_t v14 = sub_10020079C((unint64_t)v13);
    swift_release();
    sub_100200B74(v14);
  }
  id v15 = [v1 hashtags];
  if (v15)
  {
    uint64_t v16 = v15;
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1000E4F40((unint64_t *)&qword_10090BFA0, (unint64_t *)&qword_10090DC20);
    uint64_t v17 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = sub_10020B828(v17);
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_1002007B0((unint64_t)v18);
    swift_release();
    sub_100200B74(v19);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Void __swiftcall REMCDReminder.fixBrokenReferences()()
{
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100914B50);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  id v5 = &selRef_intersectsSet_;
  uint64_t v6 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_19;
  }
  uint64_t v7 = swift_slowAlloc();
  uint64_t v76 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136315650;
  id v8 = [v2 remObjectID];
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = [v8 description];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  sub_1000C51B8(v11, v13, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2082;
  id v14 = [v2 list];
  if (v14)
  {
    id v15 = v14;
    id v16 = [v14 remObjectID];
    if (v16)
    {
      uint64_t v17 = v16;
      id v18 = [v16 description];

      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      goto LABEL_13;
    }
  }
  unint64_t v21 = 0xE300000000000000;
  uint64_t v19 = 7104878;
LABEL_13:
  sub_1000C51B8(v19, v21, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 22) = 2082;
  uint64_t v6 = &selRef_intersectsSet_;
  id v22 = [v2 parentReminder];
  if (!v22)
  {
LABEL_17:
    unint64_t v29 = 0xE300000000000000;
    id v5 = &selRef_intersectsSet_;
    uint64_t v30 = 7104878;
    goto LABEL_18;
  }
  uint64_t v23 = v22;
  id v24 = [v22 remObjectID];
  if (!v24)
  {

    goto LABEL_17;
  }
  uint64_t v25 = v24;
  id v26 = [v24 description];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  uint64_t v30 = v27;
  uint64_t v6 = &selRef_intersectsSet_;
  id v5 = &selRef_intersectsSet_;
LABEL_18:
  sub_1000C51B8(v30, v29, &v76);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for reminder {reminderID: %s, list: %{public}s, parentReminder: %{public}s}", (uint8_t *)v7, 0x20u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_19:
  id v31 = [v2 v5[120]];
  uint64_t v32 = &selRef_willSave;
  if (v31)
  {
    uint64_t v33 = v31;
    if ([v31 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v34 = v2;
      id v35 = v33;
      id v36 = v34;
      id v37 = v35;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        os_log_type_t v74 = v39;
        os_log_type_t log = v38;
        uint64_t v40 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 136446466;
        id v41 = [v36 remObjectID];
        if (v41)
        {
          uint64_t v42 = v41;
          id v43 = [v41 description];

          uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v46 = v45;
        }
        else
        {
          unint64_t v46 = 0xE300000000000000;
          uint64_t v44 = 7104878;
        }
        sub_1000C51B8(v44, v46, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2082;
        id v47 = [v37 remObjectID];
        if (v47)
        {
          double v48 = v47;
          id v49 = [v47 description];

          uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v52 = v51;

          uint64_t v32 = &selRef_willSave;
        }
        else
        {
          unint64_t v52 = 0xE300000000000000;
          uint64_t v32 = &selRef_willSave;
          uint64_t v50 = 7104878;
        }
        sub_1000C51B8(v50, v52, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, v74, "List is marked for deletion but this reminer is not {reminderID: %{public}s, list: %{public}s}", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v6 = &selRef_intersectsSet_;
      }
      else
      {
      }
      [v36 markForDeletion];
    }
    [v33 v32[52]];
  }
  id v53 = [v2 v6[317]];
  if (v53)
  {
    uint64_t v54 = v53;
    if ([v53 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v55 = v2;
      id v56 = v54;
      id v57 = v55;
      id v58 = v56;
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 136446466;
        id v62 = [v57 remObjectID];
        if (v62)
        {
          uint64_t v63 = v62;
          id v64 = [v62 description];

          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;
        }
        else
        {
          unint64_t v67 = 0xE300000000000000;
          uint64_t v65 = 7104878;
        }
        sub_1000C51B8(v65, v67, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2082;
        id v68 = [v58 remObjectID];
        if (v68)
        {
          unint64_t v69 = v68;
          id v70 = [v68 description];

          uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v73 = v72;
        }
        else
        {
          unint64_t v73 = 0xE300000000000000;
          uint64_t v71 = 7104878;
        }
        sub_1000C51B8(v71, v73, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Parent reminder is marked for deletion but this reminer is not {reminderID: %{public}s, parentReminder: %{public}s}", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v32 = &selRef_willSave;
      }
      else
      {
      }
      [v57 markForDeletion];
    }
    [v54 v32[52]];
  }
}

uint64_t sub_100344FA8(void *a1, char a2, char a3)
{
  os_log_type_t v4 = v3;
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v8 - 8);
  id v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v12 = __chkstk_darwin(v11).n128_u64[0];
  id v14 = (char *)&v76 - v13;
  id v15 = [v4 parentReminder];
  if (!v15) {
    goto LABEL_29;
  }
  id v16 = v15;
  uint64_t v17 = &stru_1008F6000;
  if (a3 & 1) == 0 || ([v15 markedForDeletion])
  {
LABEL_17:
    id v38 = [v4 v17[167].name];
    if (v38)
    {
      os_log_type_t v39 = v38;
      uint64_t v78 = 0;
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v40 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = (v40 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v40 + 16);
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_23;
      }
    }
    id v42 = [v16 parentReminder];

    if (v42)
    {
LABEL_23:
      if (qword_1009072D0 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_10008E2DC(v43, (uint64_t)qword_100914B50);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v44, v45))
      {

        return 0;
      }
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "canSkipFixupReminderTree: Multiple layers of subtasks. Need to flatten.", v46, 2u);
      swift_slowDealloc();

      goto LABEL_53;
    }

LABEL_29:
    if ((a2 & 1) != 0 && ([v4 markedForDeletion] & 1) == 0)
    {
      id v48 = [v4 children];
      if (v48)
      {
        id v49 = v48;
        sub_1000963CC(0, (unint64_t *)&qword_10090B040);
        sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
        uint64_t v50 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v50 & 0xC000000000000001) != 0)
        {
          if (__CocoaSet.count.getter()) {
            goto LABEL_34;
          }
        }
        else if (*(void *)(v50 + 16))
        {
LABEL_34:
          if (qword_1009072D0 != -1) {
            swift_once();
          }
          uint64_t v51 = type metadata accessor for Logger();
          sub_10008E2DC(v51, (uint64_t)qword_100914B50);
          unint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v52, v53))
          {
            uint64_t v54 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v54 = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "canSkipFixupReminderTree: List changed and has children. Need to validate children.", v54, 2u);
            swift_slowDealloc();
          }

          id v55 = [v4 list];
          if (v55)
          {
            id v56 = v55;
            id v57 = [v55 objectID];
            id v58 = [v57 URIRepresentation];

            static URL._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v59 = type metadata accessor for URL();
            uint64_t v60 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v10, 0, 1, v59);
          }
          else
          {
            uint64_t v70 = type metadata accessor for URL();
            uint64_t v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v10, 1, 1, v70);
          }
          __chkstk_darwin(v60);
          *(&v76 - 2) = (uint64_t)v10;
          sub_1003344D0(sub_10034995C, (uint64_t)(&v76 - 4), v50);
          char v72 = v71;
          swift_bridgeObjectRelease();
          if (v72)
          {
            unint64_t v73 = Logger.logObject.getter();
            os_log_type_t v74 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v73, v74))
            {
              uint64_t v75 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v75 = 0;
              _os_log_impl((void *)&_mh_execute_header, v73, v74, "canSkipFixupReminderTree: Child list mismatch. Need to fixup.", v75, 2u);
              swift_slowDealloc();
            }

            uint64_t v69 = (uint64_t)v10;
            goto LABEL_63;
          }
          sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E40);
          if (!a1) {
            return 1;
          }
          goto LABEL_43;
        }
        swift_bridgeObjectRelease();
      }
    }
    if (!a1) {
      return 1;
    }
LABEL_43:
    uint64_t v44 = a1;
    id v61 = [v44 children];
    if (v61)
    {
      id v62 = v61;
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v63 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v64 = (v63 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v63 + 16);
      swift_bridgeObjectRelease();
      if (v64)
      {
        if (qword_1009072D0 != -1) {
          swift_once();
        }
        uint64_t v65 = type metadata accessor for Logger();
        sub_10008E2DC(v65, (uint64_t)qword_100914B50);
        unint64_t v66 = Logger.logObject.getter();
        os_log_type_t v67 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v66, v67))
        {
          id v68 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "canSkipFixupReminderTree: Moving across parent. We can't skip the validation because self's children may have been flattened to siblings in previous saves.", v68, 2u);
          swift_slowDealloc();
        }

LABEL_53:
        return 0;
      }
    }

    return 1;
  }
  id v77 = v10;
  uint64_t v78 = a1;
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E2DC(v18, (uint64_t)qword_100914B50);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "canSkipFixupReminderTree: Parent changed list. Need to validate siblings.", v21, 2u);
    uint64_t v17 = &stru_1008F6000;
    swift_slowDealloc();
  }

  id v22 = [v4 list];
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = [v22 objectID];
    id v25 = [v24 URIRepresentation];

    uint64_t v17 = &stru_1008F6000;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v26 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v14, 0, 1, v26);
  }
  else
  {
    uint64_t v27 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v14, 1, 1, v27);
  }
  a1 = v78;
  id v28 = [v16 v17[167].name];
  if (!v28)
  {
LABEL_16:
    sub_1000966BC((uint64_t)v14, (uint64_t *)&unk_100909E40);
    id v10 = v77;
    goto LABEL_17;
  }
  unint64_t v29 = v28;
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
  uint64_t v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  __chkstk_darwin(v31);
  *(&v76 - 2) = (uint64_t)v14;
  sub_1003344D0(sub_100349CC0, (uint64_t)(&v76 - 4), v30);
  char v33 = v32;
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    a1 = v78;
    uint64_t v17 = &stru_1008F6000;
    goto LABEL_16;
  }
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "canSkipFixupReminderTree: Sibling list mismatch. Need to fixup.", v36, 2u);
    swift_slowDealloc();
    id v37 = v16;
  }
  else
  {
    id v37 = v34;
    id v34 = v16;
  }

  uint64_t v69 = (uint64_t)v14;
LABEL_63:
  sub_1000966BC(v69, (uint64_t *)&unk_100909E40);
  return 0;
}

uint64_t sub_100345A68(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100914BD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  id v16 = (char *)&v35 - v15;
  id v17 = [*a1 list:v14];
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = [v17 objectID];
    os_log_type_t v35 = v16;
    os_log_type_t v20 = v9;
    uint64_t v21 = v4;
    uint64_t v22 = v7;
    id v23 = v19;
    uint64_t v24 = v5;
    id v25 = v12;
    uint64_t v26 = a2;
    id v27 = [v19 URIRepresentation];

    uint64_t v7 = v22;
    uint64_t v4 = v21;
    uint64_t v9 = v20;
    id v16 = v35;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    a2 = v26;
    double v12 = v25;
    uint64_t v5 = v24;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v16, 1, 1, v4);
  }
  uint64_t v28 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_1000BF710((uint64_t)v16, (uint64_t)v9, (uint64_t *)&unk_100909E40);
  sub_1000BF710(a2, v28, (uint64_t *)&unk_100909E40);
  unint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v9, 1, v4) != 1)
  {
    sub_1000BF710((uint64_t)v9, (uint64_t)v12, (uint64_t *)&unk_100909E40);
    if (v29(v28, 1, v4) != 1)
    {
      uint64_t v31 = v36;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v36, v28, v4);
      sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v33 = *(void (**)(char *, uint64_t))(v5 + 8);
      v33(v31, v4);
      sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
      v33(v12, v4);
      sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E40);
      char v30 = v32 ^ 1;
      return v30 & 1;
    }
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    goto LABEL_9;
  }
  sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
  if (v29(v28, 1, v4) != 1)
  {
LABEL_9:
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100914BD0);
    char v30 = 1;
    return v30 & 1;
  }
  sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E40);
  char v30 = 0;
  return v30 & 1;
}

void sub_100345EA0(void *a1)
{
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_100914B50);
  id v17 = a1;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315650;
    id v6 = [v17 remObjectID];
    sub_100094134((uint64_t *)&unk_100914BC0);
    uint64_t v7 = String.init<A>(describing:)();
    sub_1000C51B8(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    id v9 = [v17 parentReminder];
    if (v9)
    {
      uint64_t v10 = v9;
      [v9 remObjectID];
    }
    uint64_t v11 = String.init<A>(describing:)();
    sub_1000C51B8(v11, v12, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 22) = 2080;
    id v13 = [v17 list];
    if (v13)
    {
      double v14 = v13;
      [v13 remObjectID];
    }
    uint64_t v15 = String.init<A>(describing:)();
    sub_1000C51B8(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "validateAndFixupReminderTree END {objectID: %s, parentID: %s, listID: %s}", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void *sub_10034620C(uint64_t a1, void *a2)
{
  sub_100348450(a1);
  uint64_t v5 = v4;
  unint64_t v34 = v4;
  id v6 = [a2 recordID];
  NSString v7 = [v6 recordName];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v8 = [(id)swift_getObjCClassFromMetadata() ckIdentifierFromRecordName:v7];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  uint64_t v12 = sub_100335864();
  if (v13)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v33 = (void *)v5;
    unint64_t v34 = 0x8000000000000000;
    sub_1002C3F10(v14, v15, v9, v11, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10030C21C(v9, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v34;
  }
  char v33 = _swiftEmptyDictionarySingleton;
  uint64_t v17 = a1 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  CKRecord_optional result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_10;
    }
    int64_t v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v29 >= v21) {
      goto LABEL_30;
    }
    unint64_t v30 = *(void *)(v17 + 8 * v29);
    ++v23;
    if (!v30)
    {
      int64_t v23 = v29 + 1;
      if (v29 + 1 >= v21) {
        goto LABEL_30;
      }
      unint64_t v30 = *(void *)(v17 + 8 * v23);
      if (!v30)
      {
        int64_t v23 = v29 + 2;
        if (v29 + 2 >= v21) {
          goto LABEL_30;
        }
        unint64_t v30 = *(void *)(v17 + 8 * v23);
        if (!v30)
        {
          int64_t v23 = v29 + 3;
          if (v29 + 3 >= v21) {
            goto LABEL_30;
          }
          unint64_t v30 = *(void *)(v17 + 8 * v23);
          if (!v30)
          {
            int64_t v23 = v29 + 4;
            if (v29 + 4 >= v21) {
              goto LABEL_30;
            }
            unint64_t v30 = *(void *)(v17 + 8 * v23);
            if (!v30) {
              break;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v25 = __clz(__rbit64(v30)) + (v23 << 6);
LABEL_10:
    uint64_t v26 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v25);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    char v32 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100348770(v27, v28, v5, (uint64_t *)&v33, (uint64_t *)&v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    CKRecord_optional result = (void *)swift_bridgeObjectRelease();
  }
  int64_t v31 = v29 + 5;
  if (v31 >= v21)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    return v33;
  }
  unint64_t v30 = *(void *)(v17 + 8 * v31);
  if (v30)
  {
    int64_t v23 = v31;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v23 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v23 >= v21) {
      goto LABEL_30;
    }
    unint64_t v30 = *(void *)(v17 + 8 * v23);
    ++v31;
    if (v30) {
      goto LABEL_29;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

BOOL sub_100346528(id *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  *(void *)&double v4 = __chkstk_darwin(v2).n128_u64[0];
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [*a1 objectID:v4];
  id v8 = [v7 URIRepresentation];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return (v9 & 1) == 0;
}

uint64_t sub_10034669C(unint64_t a1, uint64_t *a2, char *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v166 = a5;
  id v156 = a4;
  id v165 = a3;
  uint64_t v180 = a2;
  uint64_t v179 = sub_100094134((uint64_t *)&unk_100914BD0);
  __chkstk_darwin(v179);
  uint64_t v9 = (uint64_t)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v164 = (uint64_t)&v149 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v12 - 8);
  uint64_t v153 = (uint64_t)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v149 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v149 - v18;
  __chkstk_darwin(v20);
  unint64_t v177 = (char *)&v149 - v21;
  __chkstk_darwin(v22);
  uint64_t v171 = (uint64_t)&v149 - v23;
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  unint64_t v163 = (char *)&v149 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v172 = (uint64_t)&v149 - v28;
  __chkstk_darwin(v29);
  int64_t v31 = (char *)&v149 - v30;
  if (a1 >> 62)
  {
LABEL_80:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    if (v33) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v32 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v33 = v32;
    if (v32)
    {
LABEL_3:
      unint64_t v162 = a1 & 0xC000000000000001;
      uint64_t v159 = v33;
      swift_beginAccess();
      unint64_t v178 = (void (**)(char *, char *, uint64_t))(v25 + 16);
      uint64_t v186 = (void (**)(char *, uint64_t))(v25 + 8);
      uint64_t v157 = v25 + 56;
      id v168 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
      uint64_t v152 = (void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32);
      unint64_t v155 = &v189;
      uint64_t v34 = 4;
      *(void *)&long long v35 = 136315138;
      long long v167 = v35;
      id v151 = (char *)&type metadata for Any + 8;
      id v169 = a6;
      a6 = &unk_100909E40;
      uint64_t v150 = (void *)0x80000001007D1D00;
      unint64_t v149 = 0x80000001007D1D40;
      unint64_t v161 = a1;
      unint64_t v158 = v19;
      uint64_t v19 = v177;
      uint64_t v183 = v24;
      uint64_t v160 = v9;
      id v170 = v16;
      id v184 = v31;
      while (1)
      {
        uint64_t v25 = v34 - 4;
        uint64_t v176 = v34;
        if (v162)
        {
          id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v46 = v25 + 1;
          if (__OFADD__(v25, 1)) {
            goto LABEL_79;
          }
        }
        else
        {
          id v45 = *(id *)(a1 + 8 * v34);
          uint64_t v46 = v25 + 1;
          if (__OFADD__(v25, 1))
          {
LABEL_79:
            __break(1u);
            goto LABEL_80;
          }
        }
        uint64_t v175 = v46;
        id v47 = v45;
        id v48 = [v47 objectID:v149];
        id v49 = [v48 URIRepresentation];

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = *v180;
        swift_bridgeObjectRetain();
        LOBYTE(v49) = sub_1001CC458((uint64_t)v31, v50);
        swift_bridgeObjectRelease();
        if (v49)
        {

          (*v186)(v31, v24);
          return swift_bridgeObjectRelease();
        }
        uint64_t v51 = *v178;
        unint64_t v52 = v163;
        (*v178)(v163, v31, v24);
        swift_beginAccess();
        uint64_t v53 = v172;
        sub_10031F7E4(v172, v52);
        swift_endAccess();
        uint64_t v185 = *v186;
        v185((char *)v53, v24);
        if (qword_1009072D0 != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        uint64_t v55 = sub_10008E2DC(v54, (uint64_t)qword_100914B50);
        id v56 = v47;
        uint64_t v181 = v55;
        id v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.default.getter();
        BOOL v59 = os_log_type_enabled(v57, v58);
        id v187 = v56;
        if (v59)
        {
          uint64_t v60 = swift_slowAlloc();
          uint64_t v190 = swift_slowAlloc();
          *(_DWORD *)uint64_t v60 = v167;
          id v61 = [v187 remObjectID];
          uint64_t v188 = (uint64_t)v61;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v62 = Optional.descriptionOrNil.getter();
          unint64_t v64 = v63;

          *(void *)(v60 + 4) = sub_1000C51B8(v62, v64, &v190);
          a6 = &unk_100909E40;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "validateAndFixupReminderTree: ...Going to update child. {objectID: %s}", (uint8_t *)v60, 0xCu);
          swift_arrayDestroy();
          id v56 = v187;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        unint64_t v16 = v170;
        id v65 = [v56 parentReminder];
        if (v65)
        {
          unint64_t v66 = v65;
          id v67 = [v65 objectID];
          id v68 = [v67 URIRepresentation];

          uint64_t v69 = v171;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v157;
          unint64_t v71 = v157 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          uint64_t v72 = v69;
          uint64_t v73 = 0;
        }
        else
        {
          uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v157;
          unint64_t v71 = v157 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          uint64_t v69 = v171;
          uint64_t v72 = v171;
          uint64_t v73 = 1;
        }
        uint64_t v74 = v183;
        v70(v72, v73, 1, v183);
        uint64_t v75 = (uint64_t)v158;
        v51(v19, v165, v74);
        id v174 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v70;
        unint64_t v182 = v71;
        v70((uint64_t)v19, 0, 1, v74);
        uint64_t v76 = v164;
        uint64_t v77 = v164 + *(int *)(v179 + 48);
        sub_1000BF710(v69, v164, (uint64_t *)&unk_100909E40);
        sub_1000BF710((uint64_t)v19, v77, (uint64_t *)&unk_100909E40);
        uint64_t v78 = *v168;
        int v79 = (*v168)(v76, 1, v74);
        id v173 = v78;
        if (v79 == 1)
        {
          sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E40);
          sub_1000966BC(v69, (uint64_t *)&unk_100909E40);
          unsigned int v80 = v78(v77, 1, v74);
          int64_t v31 = v184;
          if (v80 == 1)
          {
            uint64_t v24 = v74;
            sub_1000966BC(v76, (uint64_t *)&unk_100909E40);
            id v39 = v187;
            goto LABEL_33;
          }
        }
        else
        {
          sub_1000BF710(v76, v75, (uint64_t *)&unk_100909E40);
          unsigned int v81 = v78(v77, 1, v74);
          int64_t v31 = v184;
          if (v81 != 1)
          {
            uint64_t v82 = v172;
            (*v152)(v172, v77, v74);
            sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
            char v83 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v84 = v185;
            v185((char *)v82, v74);
            sub_1000966BC((uint64_t)v177, (uint64_t *)&unk_100909E40);
            sub_1000966BC(v171, (uint64_t *)&unk_100909E40);
            v84((char *)v75, v74);
            sub_1000966BC(v76, (uint64_t *)&unk_100909E40);
            uint64_t v24 = v74;
            id v39 = v187;
            if (v83) {
              goto LABEL_33;
            }
            goto LABEL_29;
          }
          sub_1000966BC((uint64_t)v177, (uint64_t *)&unk_100909E40);
          sub_1000966BC(v171, (uint64_t *)&unk_100909E40);
          v185((char *)v75, v74);
        }
        sub_1000966BC(v76, (uint64_t *)&unk_100914BD0);
LABEL_29:
        id v85 = v156;
        unint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = (uint8_t *)swift_slowAlloc();
          uint64_t v190 = swift_slowAlloc();
          *(_DWORD *)uint64_t v88 = v167;
          unint64_t v154 = v88 + 4;
          id v89 = [v85 remObjectID];
          uint64_t v188 = (uint64_t)v89;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v90 = Optional.descriptionOrNil.getter();
          unint64_t v92 = v91;

          uint64_t v188 = sub_1000C51B8(v90, v92, &v190);
          a6 = &unk_100909E40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          int64_t v31 = v184;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "validateAndFixupReminderTree: ......Updated {child.parent: %s}", v88, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v16 = v170;
          swift_slowDealloc();
        }
        else
        {
        }
        id v39 = v187;
        [v187 setParentReminder:v85];
        uint64_t v24 = v183;
LABEL_33:
        id v93 = [v39 list];
        if (v93)
        {
          uint64_t v94 = v93;
          id v95 = [v93 objectID];
          id v96 = [v95 URIRepresentation];

          static URL._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v97 = 0;
        }
        else
        {
          uint64_t v97 = 1;
        }
        v174(v16, v97, 1, v24);
        uint64_t v9 = v160;
        uint64_t v98 = v160 + *(int *)(v179 + 48);
        sub_1000BF710((uint64_t)v16, v160, (uint64_t *)&unk_100909E40);
        sub_1000BF710(v166, v98, (uint64_t *)&unk_100909E40);
        id v99 = v173;
        if (v173(v9, 1, v24) == 1)
        {
          sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
          int v100 = v99(v98, 1, v24);
          uint64_t v19 = v177;
          if (v100 == 1)
          {
            sub_1000966BC(v9, (uint64_t *)&unk_100909E40);
LABEL_43:
            v185(v31, v24);

            goto LABEL_7;
          }
          goto LABEL_41;
        }
        uint64_t v101 = v153;
        sub_1000BF710(v9, v153, (uint64_t *)&unk_100909E40);
        if (v99(v98, 1, v24) == 1)
        {
          sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
          v185((char *)v101, v24);
          int64_t v31 = v184;
LABEL_41:
          sub_1000966BC(v9, (uint64_t *)&unk_100914BD0);
          goto LABEL_44;
        }
        uint64_t v102 = v172;
        (*v152)(v172, v98, v24);
        sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
        char v103 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v104 = v102;
        id v105 = v185;
        v185((char *)v104, v24);
        sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E40);
        v105((char *)v101, v24);
        sub_1000966BC(v9, (uint64_t *)&unk_100909E40);
        uint64_t v19 = v177;
        int64_t v31 = v184;
        if (v103) {
          goto LABEL_43;
        }
LABEL_44:
        id v106 = v169;
        id v107 = v169;
        uint64_t v108 = Logger.logObject.getter();
        unint64_t v16 = (char *)static os_log_type_t.default.getter();
        if (os_log_type_enabled(v108, (os_log_type_t)v16))
        {
          unint64_t v109 = (uint8_t *)swift_slowAlloc();
          uint64_t v190 = swift_slowAlloc();
          *(_DWORD *)unint64_t v109 = v167;
          if (v106) {
            id v106 = [v107 remObjectID];
          }
          uint64_t v9 = (uint64_t)(v109 + 4);
          uint64_t v188 = (uint64_t)v106;
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v110 = Optional.descriptionOrNil.getter();
          unint64_t v112 = v111;

          uint64_t v188 = sub_1000C51B8(v110, v112, &v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v16, "validateAndFixupReminderTree: ......Updated {child.list: %s}", v109, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v24 = v183;
          int64_t v31 = v184;
          id v39 = v187;
        }
        else
        {
        }
        if (!v169) {
          goto LABEL_6;
        }
        id v113 = v107;
        unint64_t v114 = (char *)[v39 ckZoneOwnerName];
        if (v114)
        {
          unint64_t v16 = v114;
          uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v117 = v116;
        }
        else
        {
          uint64_t v115 = 0;
          unint64_t v117 = 0;
        }
        id v118 = [v113 ckZoneOwnerName];
        if (!v118)
        {
          if (v117) {
            goto LABEL_62;
          }
LABEL_75:

          goto LABEL_76;
        }
        uint64_t v119 = v118;
        uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v121;

        if (!v117)
        {
          if (v16)
          {
LABEL_62:
            swift_bridgeObjectRelease();
LABEL_63:
            uint64_t v190 = 0;
            unint64_t v191 = 0xE000000000000000;
            _StringGuts.grow(_:)(100);
            v122._countAndFlagsBits = 0xD000000000000031;
            v122._object = v150;
            String.append(_:)(v122);
            id v123 = v187;
            id v124 = [v187 remObjectID];
            if (v124)
            {
              char v125 = v124;
              id v126 = [v124 description];

              uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              id v129 = v128;
            }
            else
            {
              id v129 = (void *)0xE300000000000000;
              uint64_t v127 = 7104878;
            }
            v130._countAndFlagsBits = v127;
            v130._object = v129;
            String.append(_:)(v130);
            swift_bridgeObjectRelease();
            v131._countAndFlagsBits = 0x4E72656E776F205DLL;
            v131._object = (void *)0xEE00203D20656D61;
            String.append(_:)(v131);
            id v132 = [v123 ckZoneOwnerName];
            if (v132)
            {
              unint64_t v133 = v132;
              uint64_t v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v136 = v135;
            }
            else
            {
              uint64_t v134 = 0;
              uint64_t v136 = 0;
            }
            uint64_t v188 = v134;
            os_log_type_t v189 = v136;
            sub_100094134((uint64_t *)&unk_10090A4C0);
            v137._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v137);
            swift_bridgeObjectRelease();
            v138._countAndFlagsBits = 0x6E6572727563202CLL;
            v138._object = (void *)0xEE005B7473694C74;
            String.append(_:)(v138);
            id v139 = [v113 remObjectID];
            if (v139)
            {
              uint64_t v140 = v139;
              id v141 = [v139 description];

              uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v144 = v143;
            }
            else
            {
              unint64_t v144 = (void *)0xE300000000000000;
              uint64_t v142 = 7104878;
            }
            v145._countAndFlagsBits = v142;
            v145._object = v144;
            String.append(_:)(v145);
            swift_bridgeObjectRelease();
            v146._countAndFlagsBits = 0x72656E6E776F205DLL;
            v146._object = (void *)0xEF203D20656D614ELL;
            String.append(_:)(v146);
            id v147 = [v113 ckZoneOwnerName];
            if (v147)
            {
              id v36 = v147;
              uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v16 = v38;
            }
            else
            {
              uint64_t v37 = 0;
              unint64_t v16 = 0;
            }
            id v39 = v187;
            uint64_t v188 = v37;
            os_log_type_t v189 = v16;
            v40._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            uint64_t v9 = v191;
            uint64_t v41 = self;
            NSString v42 = String._bridgeToObjectiveC()();
            NSString v43 = String._bridgeToObjectiveC()();
            NSString v44 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v41 faultAndPromptToFileRadarWithICTap2RadarType:4 title:v42 description:v43 logMessage:v44];

            uint64_t v24 = v183;
            int64_t v31 = v184;
            a6 = &unk_100909E40;
            goto LABEL_6;
          }
          goto LABEL_75;
        }
        if (!v16) {
          goto LABEL_62;
        }
        if (v115 != v120 || v117 != v16)
        {
          uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v9 & 1) == 0) {
            goto LABEL_63;
          }
          goto LABEL_75;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_76:
        uint64_t v24 = v183;
        id v39 = v187;
LABEL_6:
        [v39 setList:v107];

        v185(v31, v24);
        uint64_t v19 = v177;
LABEL_7:
        uint64_t v34 = v176 + 1;
        a1 = v161;
        if (v175 == v159) {
          return swift_bridgeObjectRelease();
        }
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100347AB8(void **a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v86 = a4;
  id v89 = a3;
  uint64_t v85 = sub_100094134((uint64_t *)&unk_100914BD0);
  __chkstk_darwin(v85);
  unsigned int v80 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v84 = &v70[-v8];
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v9 - 8);
  uint64_t v77 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  int v79 = &v70[-v12];
  __chkstk_darwin(v13);
  os_log_type_t v87 = &v70[-v14];
  __chkstk_darwin(v15);
  unsigned int v81 = &v70[-v16];
  __chkstk_darwin(v17);
  uint64_t v82 = &v70[-v18];
  __chkstk_darwin(v19);
  char v83 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))&v70[-v20];
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void **)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = &v70[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v25);
  uint64_t v27 = &v70[-v26];
  uint64_t v28 = *a1;
  swift_beginAccess();
  uint64_t v29 = *a2;
  swift_bridgeObjectRetain();
  id v30 = [v28 objectID];
  id v31 = [v30 URIRepresentation];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  LOBYTE(v31) = sub_1001CC458((uint64_t)v27, v29);
  uint64_t v32 = v22;
  swift_bridgeObjectRelease();
  long long v35 = (void (*)(unsigned char *, uint64_t))v22[1];
  uint64_t v34 = v22 + 1;
  uint64_t v33 = v35;
  uint64_t v78 = v27;
  v35(v27, v21);
  id v36 = (void (*)(unsigned char *, unsigned char *, uint64_t))v32[2];
  v36(v24, v89, v21);
  if ((v31 & 1) == 0)
  {
    uint64_t v76 = v33;
    id v89 = v34;
    id v37 = [v28 parentReminder];
    uint64_t v74 = v28;
    uint64_t v75 = v32;
    if (v37)
    {
      id v38 = v37;
      id v39 = [v37 objectID];
      id v40 = [v39 URIRepresentation];

      uint64_t v41 = (uint64_t)v83;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = v75;
      NSString v42 = (unsigned char *)v75[7];
      unint64_t v43 = (unint64_t)(v75 + 7) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v42)(v41, 0, 1, v21);
    }
    else
    {
      NSString v42 = (unsigned char *)v32[7];
      unint64_t v43 = (unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      uint64_t v41 = (uint64_t)v83;
      ((void (*)(void, uint64_t, uint64_t, uint64_t))v42)(v83, 1, 1, v21);
    }
    uint64_t v44 = (uint64_t)v82;
    v36(v82, v24, v21);
    uint64_t v45 = v44;
    char v83 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v42;
    unint64_t v73 = v43;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v42)(v44, 0, 1, v21);
    uint64_t v46 = v84;
    uint64_t v47 = (uint64_t)&v84[*(int *)(v85 + 48)];
    sub_1000BF710(v41, (uint64_t)v84, (uint64_t *)&unk_100909E40);
    sub_1000BF710(v44, v47, (uint64_t *)&unk_100909E40);
    id v48 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v32[6];
    if (v48((uint64_t)v46, 1, v21) == 1)
    {
      sub_1000966BC(v44, (uint64_t *)&unk_100909E40);
      sub_1000966BC(v41, (uint64_t *)&unk_100909E40);
      v76(v24, v21);
      if (v48(v47, 1, v21) == 1)
      {
        uint64_t v72 = v48;
        sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_100909E40);
        id v49 = v87;
        sub_1000BF710(v86, (uint64_t)v87, (uint64_t *)&unk_100909E40);
        uint64_t v50 = v74;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v51 = v81;
      sub_1000BF710((uint64_t)v46, (uint64_t)v81, (uint64_t *)&unk_100909E40);
      if (v48(v47, 1, v21) != 1)
      {
        uint64_t v72 = v48;
        id v56 = v78;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v75[4])(v78, v47, v21);
        sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
        int v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        id v57 = v76;
        v76(v56, v21);
        sub_1000966BC(v45, (uint64_t *)&unk_100909E40);
        sub_1000966BC(v41, (uint64_t *)&unk_100909E40);
        v57(v24, v21);
        v57(v51, v21);
        uint64_t v50 = v74;
        sub_1000966BC((uint64_t)v84, (uint64_t *)&unk_100909E40);
        id v49 = v87;
        sub_1000BF710(v86, (uint64_t)v87, (uint64_t *)&unk_100909E40);
        if ((v71 & 1) == 0) {
          goto LABEL_13;
        }
LABEL_17:
        id v58 = [v50 list];
        if (v58)
        {
          BOOL v59 = v58;
          id v60 = [v58 objectID];
          id v61 = [v60 URIRepresentation];

          uint64_t v62 = (uint64_t)v79;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v63 = 0;
        }
        else
        {
          uint64_t v63 = 1;
          uint64_t v62 = (uint64_t)v79;
        }
        v83(v62, v63, 1, v21);
        unint64_t v64 = v80;
        uint64_t v65 = (uint64_t)&v80[*(int *)(v85 + 48)];
        sub_1000BF710(v62, (uint64_t)v80, (uint64_t *)&unk_100909E40);
        sub_1000BF710((uint64_t)v49, v65, (uint64_t *)&unk_100909E40);
        unint64_t v66 = v72;
        if (v72((uint64_t)v64, 1, v21) == 1)
        {
          sub_1000966BC(v62, (uint64_t *)&unk_100909E40);
          sub_1000966BC((uint64_t)v49, (uint64_t *)&unk_100909E40);
          if (v66(v65, 1, v21) == 1)
          {
            uint64_t v53 = (uint64_t)v64;
            goto LABEL_14;
          }
        }
        else
        {
          id v67 = v77;
          sub_1000BF710((uint64_t)v64, (uint64_t)v77, (uint64_t *)&unk_100909E40);
          if (v66(v65, 1, v21) != 1)
          {
            id v68 = v78;
            ((void (*)(unsigned char *, uint64_t, uint64_t))v75[4])(v78, v65, v21);
            sub_1003498D0(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
            LODWORD(v88) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v69 = v76;
            v76(v68, v21);
            sub_1000966BC(v62, (uint64_t *)&unk_100909E40);
            sub_1000966BC((uint64_t)v49, (uint64_t *)&unk_100909E40);
            v69(v67, v21);
            sub_1000966BC((uint64_t)v64, (uint64_t *)&unk_100909E40);
            char v54 = v88 ^ 1;
            return v54 & 1;
          }
          sub_1000966BC(v62, (uint64_t *)&unk_100909E40);
          sub_1000966BC((uint64_t)v49, (uint64_t *)&unk_100909E40);
          v76(v67, v21);
        }
        sub_1000966BC((uint64_t)v64, (uint64_t *)&unk_100914BD0);
        char v54 = 1;
        return v54 & 1;
      }
      sub_1000966BC(v45, (uint64_t *)&unk_100909E40);
      sub_1000966BC(v41, (uint64_t *)&unk_100909E40);
      unint64_t v52 = v76;
      v76(v24, v21);
      v52(v51, v21);
    }
    sub_1000966BC((uint64_t)v46, (uint64_t *)&unk_100914BD0);
    goto LABEL_12;
  }
  v33(v24, v21);
LABEL_12:
  id v49 = v87;
  sub_1000BF710(v86, (uint64_t)v87, (uint64_t *)&unk_100909E40);
LABEL_13:
  uint64_t v53 = (uint64_t)v49;
LABEL_14:
  sub_1000966BC(v53, (uint64_t *)&unk_100909E40);
  char v54 = 0;
  return v54 & 1;
}

void sub_100348450(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  id v40 = _swiftEmptyDictionarySingleton;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_8;
  }
LABEL_5:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    id v14 = v13;
    id v15 = [v14 ckParentReminderIdentifier];
    if (v15)
    {
      uint64_t v20 = v15;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v22;
      uint64_t v39 = v21;

      uint64_t v23 = v40;
      unint64_t v24 = v40[2];
      if (v40[3] <= v24)
      {
        sub_10030E654(v24 + 1, 1);
        uint64_t v23 = _swiftEmptyDictionarySingleton;
      }
      id v40 = v23;
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v25 = Hasher._finalize()();
      uint64_t v26 = v40 + 8;
      uint64_t v27 = -1 << *((unsigned char *)v40 + 32);
      unint64_t v28 = v25 & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~v40[(v28 >> 6) + 8]) == 0)
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          BOOL v33 = v29 == v32;
          if (v29 == v32) {
            unint64_t v29 = 0;
          }
          v31 |= v33;
          uint64_t v34 = v26[v29];
          if (v34 != -1)
          {
            unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~v40[(v28 >> 6) + 8])) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(void *)((char *)v26 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      uint64_t v35 = 16 * v30;
      id v36 = (void *)(v40[6] + v35);
      *id v36 = v12;
      v36[1] = v11;
      id v37 = (uint64_t *)(v40[7] + v35);
      *id v37 = v39;
      v37[1] = v38;
      ++v40[2];

      if (v5) {
        goto LABEL_5;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
      if (v5) {
        goto LABEL_5;
      }
    }
LABEL_8:
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v16 >= v6) {
      goto LABEL_38;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v16);
    int64_t v18 = v7 + 1;
    if (!v17)
    {
      int64_t v18 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_38;
      }
      unint64_t v17 = *(void *)(v2 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_38;
        }
        unint64_t v17 = *(void *)(v2 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v7 + 4;
          if (v7 + 4 >= v6) {
            goto LABEL_38;
          }
          unint64_t v17 = *(void *)(v2 + 8 * v18);
          if (!v17) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v5 = (v17 - 1) & v17;
    unint64_t v9 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v7 = v18;
  }
  int64_t v19 = v7 + 5;
  if (v7 + 5 >= v6)
  {
LABEL_38:
    sub_1000C1AF8();
    return;
  }
  unint64_t v17 = *(void *)(v2 + 8 * v19);
  if (v17)
  {
    int64_t v18 = v7 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v18 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v18 >= v6) {
      goto LABEL_38;
    }
    unint64_t v17 = *(void *)(v2 + 8 * v18);
    ++v19;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_100348770(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_100914B50);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "findReminderRoot BEGIN {id: %{public}s}", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = *a4;
  if (*(void *)(*a4 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = sub_1001806F8(a1, a2);
    if (v16)
    {
      unint64_t v17 = (uint64_t *)(*(void *)(v14 + 56) + 16 * v15);
      uint64_t v18 = *v17;
      unint64_t v19 = v17[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136446466;
        swift_bridgeObjectRetain();
        sub_1000C51B8(a1, a2, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2082;
        swift_bridgeObjectRetain();
        sub_1000C51B8(v18, v19, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "findReminderRoot: Root already computed. {%{public}s => %{public}s}", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
  }
  if (sub_1001CBC20(a1, a2, *a5))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v26 = "findReminderRoot: Already visited this reminder. There is a loop. Assuming root is self. {%{public}s => %{public}s}";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v26, (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_24:
      swift_bridgeObjectRetain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v41 = *a4;
      *a4 = 0x8000000000000000;
      sub_1002C3F10(a1, a2, a1, a2, isUniquelyReferenced_nonNull_native);
      *a4 = v41;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v18 = a1;
      goto LABEL_25;
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  sub_10031DC68(&v41, a1, a2);
  swift_bridgeObjectRelease();
  if (!*(void *)(a3 + 16))
  {
LABEL_20:
    swift_bridgeObjectRetain_n();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a1, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v26 = "findReminderRoot: This reminder has no parent. The root is self. {%{public}s => %{public}s}";
      goto LABEL_22;
    }
LABEL_23:

    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  swift_bridgeObjectRetain();
  unint64_t v27 = sub_1001806F8(a1, a2);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  unint64_t v29 = (uint64_t *)(*(void *)(a3 + 56) + 16 * v27);
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v40 = a4;
  uint64_t v18 = sub_100348770(v30, v31, a3, a4, a5);
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136446466;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v36 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v18, v33, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "findReminderRoot: Recursively found the root. {%{public}s => %{public}s}", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = *v40;
  uint64_t *v40 = 0x8000000000000000;
  sub_1002C3F10(v18, v33, a1, a2, v39);
  uint64_t *v40 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_25:
  sub_1003490A8(a1, a2);
  return v18;
}

void sub_1003490A8(uint64_t a1, unint64_t a2)
{
  if (qword_1009072D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100914B50);
  swift_bridgeObjectRetain_n();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    int64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)int64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "findReminderRoot END {id: %{public}s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100349250(uint64_t result)
{
  if (result + 1 > *(void *)(*(void *)v1 + 24) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

void sub_100349278(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v31 = 0;
  int64_t v8 = 0;
  uint64_t v9 = a3 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 64);
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    while (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      if (*(void *)(a4 + 16))
      {
LABEL_22:
        uint64_t v18 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v14);
        unint64_t v19 = *(void **)(*(void *)(a3 + 56) + 8 * v14);
        uint64_t v21 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        id v22 = v19;
        unint64_t v23 = sub_1001806F8(v21, v20);
        if (v24)
        {
          uint64_t v25 = (void *)(*(void *)(a4 + 56) + 16 * v23);
          if (*v25 == a5 && v25[1] == a6)
          {
            swift_bridgeObjectRelease();

LABEL_30:
            *(unint64_t *)((char *)a1 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
            if (__OFADD__(v31++, 1))
            {
              __break(1u);
LABEL_33:
              sub_1005466C4(a1, a2, v31, a3);
              return;
            }
          }
          else
          {
            char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();

            if (v27) {
              goto LABEL_30;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v34) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v9 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v9 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v16 = *(void *)(v9 + 8 * v8);
        if (!v16) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v12 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v8 << 6);
    if (*(void *)(a4 + 16)) {
      goto LABEL_22;
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v34) {
    goto LABEL_33;
  }
  unint64_t v16 = *(void *)(v9 + 8 * v17);
  if (v16)
  {
    int64_t v8 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v8 >= v34) {
      goto LABEL_33;
    }
    unint64_t v16 = *(void *)(v9 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_35:
  __break(1u);
}

uint64_t sub_1003494B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v9 = *(unsigned char *)(a1 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (unint64_t)((1 << v9) + 63) >> 6;
  size_t v12 = 8 * v11;
  swift_bridgeObjectRetain_n();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v10 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v19 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0), v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100349278((unint64_t *)((char *)&v19 - ((v12 + 15) & 0x3FFFFFFFFFFFFFF0)), v11, a1, a2, a3, a4);
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v16 = (void *)swift_slowAlloc();
    bzero(v16, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100349278((unint64_t *)v16, v11, a1, a2, a3, a4);
    uint64_t v15 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003496E8()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1B) {
    return 27;
  }
  else {
    return v0;
  }
}

unint64_t sub_10034973C()
{
  unint64_t result = qword_100914B68;
  if (!qword_100914B68)
  {
    sub_100096058((uint64_t *)&unk_10090AFB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914B68);
  }
  return result;
}

id sub_1003497A8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1003497E4(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

void sub_100349800(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_100349820(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

id sub_100349848@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 allDay];
  *a2 = (_BYTE)result;
  return result;
}

id sub_10034987C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setAllDay:*a1];
}

void sub_100349890(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1003498B0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1003498D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100349918(id *a1)
{
  return sub_100346528(a1);
}

uint64_t sub_100349938(void **a1)
{
  return sub_100347AB8(a1, *(uint64_t **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

uint64_t sub_10034995C(id *a1)
{
  return sub_100345A68(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t _s6FieldsOwet_2(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE6) {
    goto LABEL_17;
  }
  if (a2 + 26 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 26) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 26;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 26;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1B;
  int v8 = v6 - 27;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6FieldsOwst_2(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 26 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 26) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE5)
  {
    unsigned int v6 = ((a2 - 230) >> 8) + 1;
    *uint64_t result = a2 + 26;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100349AD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 26;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_2()
{
  return &_s6FieldsON_2;
}

unint64_t sub_100349B10(uint64_t a1)
{
  unint64_t result = sub_100349B38();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100349B38()
{
  unint64_t result = qword_100914BE8;
  if (!qword_100914BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914BE8);
  }
  return result;
}

unint64_t sub_100349B8C(uint64_t a1)
{
  unint64_t result = sub_100349BB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100349BB4()
{
  unint64_t result = qword_100914BF0;
  if (!qword_100914BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914BF0);
  }
  return result;
}

unint64_t sub_100349C0C()
{
  unint64_t result = qword_100914BF8;
  if (!qword_100914BF8)
  {
    sub_100096058(&qword_100914C00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914BF8);
  }
  return result;
}

unint64_t sub_100349C6C()
{
  unint64_t result = qword_100914C08;
  if (!qword_100914C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914C08);
  }
  return result;
}

uint64_t sub_100349CC0(id *a1)
{
  return sub_10034995C(a1) & 1;
}

uint64_t sub_100349CDC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unsigned int v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  int v8 = (char *)&aBlock[-1] - v7;
  Date.init()();
  id v9 = [v0 storeController];
  if (v9)
  {
    unsigned int v10 = v9;
    id v11 = [v9 inMemoryPrimaryActiveCKAccountREMObjectID];
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100914C10);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (_DWORD *)swift_slowAlloc();
      id v30 = v11;
      uint64_t v16 = v2;
      uint64_t v17 = v15;
      _DWORD *v15 = 68157952;
      LODWORD(aBlock[0]) = 4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v17 + 4) = 2048;
      Date.rem_elapsedInMilliseconds.getter();
      aBlock[0] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
      v19(v6, v16);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "primaryActiveCloudKitAccountREMObjectID: {elapsed: %.*f ms}", (uint8_t *)v17, 0x12u);
      uint64_t v2 = v16;
      id v11 = v30;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
      v19(v6, v2);
    }
    v19(v8, v2);
    return (uint64_t)v11;
  }
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_100914C10);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v21, v22))
  {
    unint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "primaryActiveCloudKitAccountREMObjectID: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).", v23, 2u);
    swift_slowDealloc();
  }

  unint64_t v32 = 0;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = &v32;
  *(void *)(v24 + 24) = v1;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_10034D350;
  *(void *)(v25 + 24) = v24;
  aBlock[4] = sub_10008F6F4;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008C21F8;
  uint64_t v26 = _Block_copy(aBlock);
  id v27 = v1;
  swift_retain();
  swift_release();
  [v27 performBlockAndWait:v26];
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    id v11 = v32;
    swift_release();
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

void sub_10034A19C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_100909DF0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_100914C28);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    goto LABEL_16;
  }
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  id v14 = a1;
  if (![v14 inactive])
  {

    id v26 = v14;
    id v27 = [v26 remObjectID];
    if (v27)
    {
      char v28 = v27;
      id v29 = [v26 objectID];
      if ([v29 isTemporaryID])
      {
        if (qword_1009072D8 != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        sub_10008E2DC(v30, (uint64_t)qword_100914C10);
        id v31 = v28;
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v32, v33))
        {
          int64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v44 = (void *)swift_slowAlloc();
          *(_DWORD *)int64_t v34 = 138543362;
          uint64_t v47 = (uint64_t)v31;
          id v35 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v44 = v28;

          _os_log_impl((void *)&_mh_execute_header, v32, v33, "primaryActiveCloudKitAccountOptimized: Unexpectedly the primaryActiveCloudKitAccount.objectID() isTemporary, current design is to defer setting the account NSManagedObjectID cache until after saved {remObjectID: %{public}@}", v34, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v10);
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v29;
        *(void *)(v39 + 24) = v28;
        id v40 = v29;
        id v41 = v28;
        dispatch thunk of REMCache.performReadAndWrite(_:operations:)();

        swift_release();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      }
      goto LABEL_24;
    }

LABEL_16:
    uint64_t v37 = enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v10);
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v9, v37, v6);
    dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (!a1)
    {
      id v16 = 0;
      uint64_t v38 = v45;
LABEL_25:
      [v38 updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:v16];
      goto LABEL_26;
    }
    id v26 = a1;
LABEL_24:
    uint64_t v38 = v45;
    id v16 = [v26 remObjectID];
    goto LABEL_25;
  }
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_100914C10);
  id v16 = v14;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136446210;
    id v20 = [v16 remObjectID];
    if (v20)
    {
      uint64_t v21 = v20;
      id v22 = [v20 description];

      uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v25 = v24;
    }
    else
    {
      unint64_t v25 = 0xE300000000000000;
      uint64_t v23 = 7104878;
    }
    uint64_t v46 = sub_1000C51B8(v23, v25, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "updatePrimaryActiveCloudKitAccount: ATTENTION Someone is trying to inactivate an existing CK account {remObjectID: %{public}s}", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v36 = v43;
  }
  else
  {

    uint64_t v36 = v43;
  }
  sub_10034A19C(0, v44, v36);
LABEL_26:
}

id sub_10034A86C(NSObject *a1)
{
  uint64_t v2 = v1;
  unint64_t v144 = a1;
  p_Class isa = (void *)sub_100094134((uint64_t *)&unk_100914C28);
  uint64_t v3 = *(p_isa - 1);
  __chkstk_darwin(p_isa);
  uint64_t v5 = &v126[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v147 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = &v126[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v126[-v11];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v126[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = &v126[-v17];
  __chkstk_darwin(v16);
  id v20 = &v126[-v19];
  Date.init()();
  uint64_t v21 = [v2 storeController];
  if (v21)
  {
    id v22 = v21;
    id v23 = [v21 inMemoryPrimaryActiveCKAccountREMObjectID];
    uint64_t v145 = v6;
    Swift::String v146 = v20;
    if (v23)
    {
      uint64_t v135 = v12;
      uint64_t v140 = v22;
      unint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = 0;
      id v26 = *(void (**)(void, void, void))(v3 + 104);
      id v27 = p_isa;
      uint64_t v133 = v3 + 104;
      Swift::String v131 = v26;
      v26(v5, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), p_isa);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v24;
      uint64_t v139 = v25;
      swift_retain();
      uint64_t v136 = v24;
      id v141 = v24;
      dispatch thunk of REMCache.performReadOnly(_:operations:)();
      swift_release();
      id v29 = *(void (**)(void, void))(v3 + 8);
      uint64_t v134 = v3 + 8;
      id v132 = v29;
      v29(v5, v27);
      swift_beginAccess();
      uint64_t v30 = *(void **)(v25 + 16);
      if (v30)
      {
        unint64_t v149 = 0;
        id v31 = v30;
        id v32 = [v2 existingObjectWithID:v31 error:&v149];
        os_log_type_t v33 = v149;
        if (v32)
        {
          int64_t v34 = v32;
          self;
          uint64_t v35 = swift_dynamicCastObjCClass();
          if (v35)
          {
            uint64_t v36 = (void *)v35;
            uint64_t v142 = v141;
            uint64_t v37 = v33;
            id v38 = [v36 remObjectID];
            if (v38)
            {
              uint64_t v39 = v38;
              id v138 = v36;
              sub_1001C1A64();
              id v40 = v142;
              char v41 = static NSObject.== infix(_:_:)();

              if (v41)
              {
                uint64_t v42 = qword_1009072D8;
                uint64_t v43 = v34;
                uint64_t v44 = v145;
                if (v42 != -1) {
                  swift_once();
                }
                uint64_t v45 = type metadata accessor for Logger();
                sub_10008E2DC(v45, (uint64_t)qword_100914C10);
                uint64_t v46 = v147;
                (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v147 + 16))(v18, v146, v44);
                static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
                static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
                uint64_t v47 = v31;
                id v48 = Logger.logObject.getter();
                os_log_type_t v49 = static os_log_type_t.info.getter();
                int v50 = v49;
                if (os_log_type_enabled(v48, v49))
                {
                  uint64_t v51 = swift_slowAlloc();
                  p_Class isa = &v40->isa;
                  uint64_t v52 = v51;
                  Swift::String v137 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v52 = 68158210;
                  LODWORD(v149) = 4;
                  LODWORD(v141) = v50;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v52 + 8) = 2048;
                  uint64_t v142 = v43;
                  Date.rem_elapsedInMilliseconds.getter();
                  unint64_t v149 = v53;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  unint64_t v144 = v48;
                  char v54 = *(void (**)(void, void))(v46 + 8);
                  v54(v18, v44);
                  *(_WORD *)(v52 + 18) = 2112;
                  unint64_t v149 = v47;
                  uint64_t v55 = v47;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  v137->Class isa = (Class)v30;
                  uint64_t v43 = v144;

                  _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v141, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache hit {elapsed: %.*f ms, mid: %@}", (uint8_t *)v52, 0x1Cu);
                  sub_100094134((uint64_t *)&unk_10090A040);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  id v40 = v55;
                  uint64_t v47 = v140;
                }
                else
                {

                  char v54 = *(void (**)(void, void))(v46 + 8);
                  v54(v18, v44);
                }

                v54(v146, v44);
                goto LABEL_57;
              }
            }
            else
            {
            }
          }
          else
          {
            uint64_t v70 = v33;
          }
        }
        else
        {
          uint64_t v69 = v149;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_errorRelease();
        }
      }
      id v71 = [self _groundTruth_primaryActiveCloudKitAccountInContext:v2];
      uint64_t v72 = qword_1009072D8;
      id v138 = v71;
      unint64_t v73 = v71;
      if (v72 != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      uint64_t v75 = sub_10008E2DC(v74, (uint64_t)qword_100914C10);
      uint64_t v76 = v146;
      uint64_t v77 = v147;
      uint64_t v78 = *(void (**)(void, void, void))(v147 + 16);
      uint64_t v79 = v145;
      uint64_t v130 = v147 + 16;
      id v129 = v78;
      v78(v15, v146, v145);
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      uint64_t v142 = v75;
      unsigned int v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = swift_slowAlloc();
        *(_DWORD *)uint64_t v82 = 68157952;
        LODWORD(v149) = 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v82 + 8) = 2048;
        Date.rem_elapsedInMilliseconds.getter();
        unint64_t v149 = v83;
        uint64_t v79 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v84 = *(void (**)(void, void))(v77 + 8);
        v84(v15, v79);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss (before cache-write) {elapsed: %.*f ms}", (uint8_t *)v82, 0x12u);
        uint64_t v76 = v146;
        swift_slowDealloc();

        if (v73) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v84 = *(void (**)(void, void))(v77 + 8);
        v84(v15, v79);

        if (v73)
        {
LABEL_31:
          uint64_t v85 = v141;
          id v86 = [v73 remObjectID];
          Swift::String v137 = v73;
          if (v86)
          {
            os_log_type_t v87 = v86;
            sub_1001C1A64();
            uint64_t v88 = v85;
            char v89 = static NSObject.== infix(_:_:)();

            uint64_t v76 = v146;
            if (v89)
            {
LABEL_46:
              id v107 = [v73 objectID];
              if ([v107 isTemporaryID])
              {
                uint64_t v108 = v85;
                unint64_t v109 = Logger.logObject.getter();
                os_log_type_t v110 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v109, v110))
                {
                  unint64_t v111 = (uint8_t *)swift_slowAlloc();
                  unint64_t v112 = (void *)swift_slowAlloc();
                  *(_DWORD *)unint64_t v111 = 138543362;
                  unint64_t v149 = v108;
                  uint64_t v108 = v108;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *unint64_t v112 = v136;

                  _os_log_impl((void *)&_mh_execute_header, v109, v110, "primaryActiveCloudKitAccountOptimized: Unexpectedly primary CK REMCDAccount's objectID() isTemporary, should have saved the CD account before trying to access it via this API {remObjectID: %{public}@}", v111, 0xCu);
                  sub_100094134((uint64_t *)&unk_10090A040);
                  swift_arrayDestroy();
                  uint64_t v76 = v146;
                  swift_slowDealloc();
                  swift_slowDealloc();
                  uint64_t v113 = v145;
                  unint64_t v114 = v137;
                }
                else
                {

                  unint64_t v114 = v108;
                  id v107 = v108;
                  uint64_t v113 = v145;
                }

                v84(v76, v113);
              }
              else
              {
                uint64_t v115 = p_isa;
                v131(v5, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), p_isa);
                uint64_t v116 = swift_allocObject();
                *(void *)(v116 + 16) = v107;
                *(void *)(v116 + 24) = v85;
                unint64_t v117 = v85;
                id v118 = v107;
                dispatch thunk of REMCache.performReadAndWrite(_:operations:)();
                swift_release();
                v132(v5, v115);
                uint64_t v119 = v135;
                uint64_t v120 = v145;
                v129(v135, v76, v145);
                static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
                static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
                id v121 = Logger.logObject.getter();
                os_log_type_t v122 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v121, v122))
                {
                  uint64_t v123 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v123 = 68157952;
                  LODWORD(v149) = 4;
                  unint64_t v144 = v118;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v123 + 8) = 2048;
                  Date.rem_elapsedInMilliseconds.getter();
                  unint64_t v149 = v124;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  v84(v119, v120);
                  _os_log_impl((void *)&_mh_execute_header, v121, v122, "primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss + write (after cache-write) {elapsed: %.*f ms (from start)}", (uint8_t *)v123, 0x12u);
                  uint64_t v76 = v146;
                  swift_slowDealloc();

                  unint64_t v117 = v144;
                  id v118 = v140;
                }
                else
                {

                  v84(v119, v120);
                  id v121 = v73;
                }

                v84(v76, v120);
              }
LABEL_57:
              swift_release();
              return v138;
            }
          }
          else
          {
          }
          id v93 = v85;
          uint64_t v94 = v73;
          id v95 = v93;
          id v96 = v94;
          uint64_t v97 = Logger.logObject.getter();
          int v98 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v97, (os_log_type_t)v98))
          {
            int v127 = v98;
            uint64_t v99 = swift_slowAlloc();
            uint64_t v128 = (void *)swift_slowAlloc();
            id v141 = swift_slowAlloc();
            unint64_t v149 = v141;
            *(_DWORD *)uint64_t v99 = 136446466;
            id v100 = [v96 remObjectID];
            if (v100)
            {
              uint64_t v101 = v100;
              id v102 = [v100 description];

              uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v105 = v104;
            }
            else
            {
              unint64_t v105 = 0xE300000000000000;
              uint64_t v103 = 7104878;
            }
            uint64_t v148 = sub_1000C51B8(v103, v105, (uint64_t *)&v149);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v99 + 12) = 2114;
            uint64_t v148 = (uint64_t)v95;
            id v106 = v95;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v128 = v136;

            _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v127, "primaryActiveCloudKitAccountOptimized: Mismatching cdAccount.remObjectID with inMemoryPrimaryActiveCKAccountREMObjectID {cdAccount.remObjectID: %{public}s, in-memory: %{public}@}", (uint8_t *)v99, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v76 = v146;
          }
          else
          {
          }
          unint64_t v73 = v137;
          goto LABEL_46;
        }
      }
      uint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v90, v91))
      {
        unint64_t v92 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "primaryActiveCloudKitAccountOptimized: Unexpectedly fetched no active CK account from persistence. Should have returned early for nil inMemoryPrimaryActiveCKAccountREMObjectID if no active CK account is signed in. Indicates there is a bug.", v92, 2u);
        swift_slowDealloc();
      }

      v84(v76, v79);
      swift_release();
      return 0;
    }
    else
    {
      id v61 = v22;
      if (qword_1009072D8 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_10008E2DC(v62, (uint64_t)qword_100914C10);
      uint64_t v63 = v147;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v147 + 16))(v9, v20, v6);
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
      unint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v66 = 68157952;
        LODWORD(v150) = 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v66 + 8) = 2048;
        Date.rem_elapsedInMilliseconds.getter();
        uint64_t v150 = v67;
        uint64_t v6 = v145;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v68 = *(void (**)(void, void))(v63 + 8);
        v68(v9, v6);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "primaryActiveCloudKitAccountOptimized: Returning nil because inMemoryPrimaryActiveCKAccountREMObjectID is nil {elapsed: %.*f ms}", (uint8_t *)v66, 0x12u);
        swift_slowDealloc();
      }
      else
      {

        id v68 = *(void (**)(void, void))(v63 + 8);
        v68(v9, v6);
      }
      v68(v146, v6);
      return 0;
    }
  }
  else
  {
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_10008E2DC(v56, (uint64_t)qword_100914C10);
    id v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v57, v58))
    {
      BOOL v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "primaryActiveCloudKitAccountOptimized: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).", v59, 2u);
      swift_slowDealloc();
    }

    id v60 = [self _groundTruth_primaryActiveCloudKitAccountInContext:v2];
    (*(void (**)(unsigned char *, uint64_t))(v147 + 8))(v20, v6);
  }
  return v60;
}

uint64_t sub_10034BADC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100914C10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100914C10);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_10034BBA4(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 accountTypeHost];
  unsigned int v5 = [v4 isPrimaryCloudKit];

  if (!v5)
  {
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_100914C10);
    id v46 = a1;
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138543618;
      id v22 = [v46 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v21 = v22;
      *(_WORD *)(v20 + 12) = 2048;
      id v48 = [v46 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      id v23 = "primaryCloudKitAccountDidDisable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{"
            "public}@, type: %ld}";
      unint64_t v24 = v18;
      os_log_type_t v25 = v19;
      id v26 = (uint8_t *)v20;
      uint32_t v27 = 22;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v24, v25, v23, v26, v27);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_19:

    goto LABEL_20;
  }
  if (([a1 markedForRemoval] & 1) == 0 && !objc_msgSend(a1, "inactive"))
  {
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100914C10);
    id v46 = a1;
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      id v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138543362;
      id v48 = [v46 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v31 = v48;

      id v23 = "primaryCloudKitAccountDidDisable: Passed in an account storage that is neither markedForRemoval nor inactive"
            " {remObjectID: %{public}@}";
      unint64_t v24 = v18;
      os_log_type_t v25 = v29;
      id v26 = v30;
      uint32_t v27 = 12;
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  id v46 = [a1 remObjectID];
  id v6 = [v2 inMemoryPrimaryActiveCKAccountREMObjectID];
  if (v6)
  {
    uint64_t v7 = v6;
    sub_1001C1A64();
    id v8 = v46;
    id v9 = v7;
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
      if (qword_1009072D8 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10008E2DC(v11, (uint64_t)qword_100914C10);
      id v12 = v8;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 138543362;
        id v48 = v12;
        id v16 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v47 = v12;

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "primaryCloudKitAccountDidDisable: Primary CloudKit account removed or deactivated, unsetting both inMemoryPrimaryActiveCKAccountREMObjectID and clear its NSManagedObjectID cache {removing: %{public}@}", v15, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      if (qword_100907B10 != -1) {
        swift_once();
      }
      uint64_t v43 = (void *)qword_100942618;
      uint64_t v44 = qword_100907B18;
      swift_retain();
      if (v44 != -1) {
        swift_once();
      }
      uint64_t v45 = qword_100942620;
      swift_retain();
      sub_10034A19C(0, v43, v45);
      swift_release();
      swift_release();

      return;
    }
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_100914C10);
    id v33 = v8;
    id v34 = v9;
    id v46 = v33;
    id v35 = v34;
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v39 = (void *)swift_slowAlloc();
      id v48 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136446466;
      sub_100094134((uint64_t *)&unk_100914BC0);
      uint64_t v40 = Optional.descriptionOrNil.getter();
      sub_1000C51B8(v40, v41, (uint64_t *)&v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 12) = 2114;
      id v42 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v39 = v46;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "primaryCloudKitAccountDidDisable: A different primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are removing or deactivating another different CloudKit account, not updating the in-memory value in this case {currentAccountID: %{public}s, removedAccountID: %{public}@}", (uint8_t *)v38, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
LABEL_20:
}

void sub_10034C3AC(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 accountTypeHost];
  unsigned int v5 = [v4 isPrimaryCloudKit];

  if (!v5)
  {
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_100914C10);
    id v45 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      os_log_type_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 138543618;
      id v20 = [v45 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v19 = v20;
      *(_WORD *)(v18 + 12) = 2048;
      id v47 = [v45 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v11 = "primaryCloudKitAccountDidEnable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{p"
            "ublic}@, type: %ld}";
      id v12 = v7;
      os_log_type_t v13 = v17;
      os_log_type_t v14 = (uint8_t *)v18;
      uint32_t v15 = 22;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  if (([a1 markedForRemoval] & 1) != 0
    || ([a1 inactive] & 1) != 0)
  {
    if (qword_1009072D8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_100914C10);
    id v45 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      id v9 = (uint8_t *)swift_slowAlloc();
      char v10 = (void *)swift_slowAlloc();
      *(_DWORD *)id v9 = 138543362;
      id v47 = [v45 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v10 = v47;

      uint64_t v11 = "primaryCloudKitAccountDidEnable: Passed in an account storage that is markedForRemoval or inactive {remObjec"
            "tID: %{public}@}";
      id v12 = v7;
      os_log_type_t v13 = v8;
      os_log_type_t v14 = v9;
      uint32_t v15 = 12;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, v14, v15);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
LABEL_13:

    return;
  }
  id v21 = [a1 remObjectID];
  id v22 = [v2 inMemoryPrimaryActiveCKAccountREMObjectID];
  if (v22)
  {
    sub_1001C1A64();
    id v23 = v21;
    id v24 = v22;
    char v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0)
    {
      if (qword_1009072D8 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10008E2DC(v26, (uint64_t)qword_100914C10);
      id v27 = v23;
      id v28 = v24;
      id v29 = v27;
      id v30 = v28;
      id v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v44 = (void *)swift_slowAlloc();
        id v47 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446466;
        sub_100094134((uint64_t *)&unk_100914BC0);
        uint64_t v34 = Optional.descriptionOrNil.getter();
        sub_1000C51B8(v34, v35, (uint64_t *)&v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2114;
        id v36 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v44 = v29;

        _os_log_impl((void *)&_mh_execute_header, v31, v32, "primaryCloudKitAccountDidEnable: A primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are adding or activating another different CloudKit account, we will still update the in-memory value {currentAccountID: %{public}s, newAccountID: %{public}@}", (uint8_t *)v33, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_10008E2DC(v37, (uint64_t)qword_100914C10);
  uint64_t v38 = v21;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v46 = v22;
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    id v42 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v41 = 138543362;
    id v47 = v38;
    uint64_t v43 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v42 = v38;

    id v22 = v46;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "primaryCloudKitAccountDidEnable: Primary CloudKit account added or activated, setting inMemoryPrimaryActiveCKAccountREMObjectID {newAccountID: %{public}@}", v41, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v39 = v38;
  }

  [v2 updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:v38];
}

void sub_10034CB18(uint64_t a1, void *a2, void *a3)
{
  REMCacheContext.setObject(_:forKey:)();
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100914C10);
  id v6 = a3;
  id v7 = a2;
  id v15 = v6;
  id v8 = v7;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138543618;
    id v13 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v15;

    *(_WORD *)(v11 + 12) = 2114;
    id v14 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = a2;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "updatePrimaryActiveCloudKitAccount: Writing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with updated CD account {remObjectID: %{public}@, mid: %{public}@}", (uint8_t *)v11, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_10034CD58(uint64_t a1)
{
}

void sub_10034CD64(uint64_t a1)
{
}

void sub_10034CD70(uint64_t a1, const char *a2)
{
  REMCacheContext.clearAll()();
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_100914C10);
  osos_log_type_t log = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc();
  }
}

NSString sub_10034CE68()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100942108 = (uint64_t)result;
  return result;
}

void sub_10034CEA0(char a1)
{
  uint64_t v2 = v1;
  if (qword_1009072D8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100914C10);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136446210;
    uint64_t v20 = v8;
    if (a1) {
      uint64_t v9 = 0x64656C62616E65;
    }
    else {
      uint64_t v9 = 0x64656C6261736964;
    }
    if (a1) {
      unint64_t v10 = 0xE700000000000000;
    }
    else {
      unint64_t v10 = 0xE800000000000000;
    }
    uint64_t v19 = sub_1000C51B8(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "cloudKitAccountsDidChange(cloudKitAccountsChange: %{public}s)", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v11 = [self sharedInstance];
  [v11 invalidateICloudACAccounts];

  if ([self clearAppleCloudKitTable])
  {
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Released all cached CloudKit REMCD accounts", v14, 2u);
      swift_slowDealloc();
    }
  }
  id v15 = [v2 cloudContext:v19 withOptions:v20];
  uint64_t v16 = v15;
  os_log_type_t v17 = &selRef_accountsDidDisable;
  if (a1) {
    os_log_type_t v17 = &selRef_accountsDidEnable;
  }
  [v15 *v17];

  id v18 = [self defaultCenter];
  if (qword_1009072E0 != -1) {
    swift_once();
  }
  [v18 postNotificationName:qword_100942108 object:0];
}

void sub_10034D1C4(void **a1, uint64_t a2)
{
  id v3 = [self _groundTruth_primaryActiveCloudKitAccountInContext:a2];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 remObjectID];
  }
  else
  {
    id v5 = 0;
  }
  os_log_type_t v6 = *a1;
  *a1 = v5;
}

uint64_t sub_10034D258()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10034D298(uint64_t a1)
{
  sub_10034CB18(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10034D2A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10034D2D8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10034D318()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10034D350()
{
  sub_10034D1C4(*(void ***)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10034D358()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10034D368(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10034D378()
{
  return swift_release();
}

uint64_t sub_10034D384()
{
  uint64_t result = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v1)
  {
    _StringGuts.grow(_:)(46);
    v2._object = (void *)0x80000001007CAF70;
    v2._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v2);
    type metadata accessor for PartialKeyPath();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_10034D484()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100914C30);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100914C30);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10034D54C(char a1)
{
  if ((a1 & 2) != 0)
  {
    v2._countAndFlagsBits = 99;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
  }
  if ((a1 & 4) != 0)
  {
    v3._countAndFlagsBits = 100;
    v3._object = (void *)0xE100000000000000;
    String.append(_:)(v3);
  }
  swift_bridgeObjectRelease();
  return 0;
}

void sub_10034D604(id *a1@<X0>, void *a2@<X8>)
{
}

void sub_10034D61C(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = [*a1 objectID];
  id v4 = [v3 persistentStore];

  *a2 = v4;
}

uint64_t sub_10034D688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void **_s9UtilitiesO29ManualSortHintPersistenceHostOwCP(void **a1, void **a2)
{
  id v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **sub_10034D6C0(void **a1, void **a2)
{
  id v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void *initializeWithTake for RDStoreControllerNotificationCenter.EntityFilterOption(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void **sub_10034D704(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t sub_10034D738(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_10034D794(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for TypedPredicate()
{
  return sub_1000E6FBC();
}

uint64_t sub_10034D800()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100914CC8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100914CC8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10034D8C8(unsigned __int8 *a1, char *a2)
{
  return sub_1002F3798(*a1, *a2);
}

Swift::Int sub_10034D8D4()
{
  return Hasher._finalize()();
}

uint64_t sub_10034D9A8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10034DA64()
{
  return Hasher._finalize()();
}

unint64_t sub_10034DB34@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10034DDC8(*a1);
  *a2 = result;
  return result;
}

void sub_10034DB64(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  uint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000065746144;
      uint64_t v3 = 0x6E6F697461657263;
      goto LABEL_3;
    case 2:
      *a1 = 1701667182;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 1701869940;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_10034DBF8(void *a1@<X8>)
{
  *a1 = &off_1008B6428;
}

unint64_t sub_10034DC08@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10034DDC8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10034DC30()
{
  uint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E6F697461657263;
      break;
    case 2:
      uint64_t result = 1701667182;
      break;
    case 3:
      uint64_t result = 1701869940;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10034DCB8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4320, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10034DD18(void *a1@<X8>)
{
  *a1 = &off_1008B6450;
}

uint64_t sub_10034DD28@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4320, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t type metadata accessor for REMHashtagCDIngestor()
{
  return self;
}

_UNKNOWN **sub_10034DDB0()
{
  return &off_1008C22B8;
}

_UNKNOWN **sub_10034DDBC()
{
  return &off_1008C2288;
}

unint64_t sub_10034DDC8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B4370, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

id sub_10034DE14(void *a1, char a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v7 - 8);
  uint64_t v106 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v104 = (char *)&v103 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v110 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v108 = (char *)&v103 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v103 - v18;
  *(void *)&double v21 = __chkstk_darwin(v20).n128_u64[0];
  uint64_t v111 = (uint64_t)&v103 - v22;
  id v113 = 0;
  id v109 = [a1 remObjectIDWithError:&v113 v21];
  if (v109)
  {
    id v23 = v113;
    if ((a2 & 1) == 0 || ([a1 markedForDeletion] & 1) == 0)
    {
      id v24 = [a1 sharedToMeReminderCKIdentifier];
      if (!v24)
      {
        id v29 = [a1 reminder];
        if (v29
          && (id v30 = v29,
              id v31 = [v29 remObjectID],
              v30,
              v31))
        {
          id v32 = [v31 uuid];

          uint64_t v33 = v111;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v110 + 56))(v33, 0, 1, v12);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56))(v111, 1, 1, v12);
        }
        LODWORD(v107) = 0;
LABEL_16:
        id v35 = [a1 account];
        if (!v35
          || (id v36 = v35,
              id v37 = [v35 remObjectID],
              v36,
              (id v103 = v37) == 0))
        {
LABEL_20:
          id v40 = [a1 account:v103];

          if (v40)
          {
            id v28 = (id)0xE900000000000029;
            id v41 = v109;
            if (v107)
            {
LABEL_22:
              swift_bridgeObjectRelease();
              if (qword_1009072F0 != -1) {
                swift_once();
              }
              uint64_t v42 = type metadata accessor for Logger();
              sub_10008E2DC(v42, (uint64_t)qword_100914CC8);
              id v43 = a1;
              id v44 = v41;
              id v45 = v43;
              id v46 = v44;
              id v47 = v45;
              id v48 = Logger.logObject.getter();
              int v49 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v48, (os_log_type_t)v49))
              {
                LODWORD(v108) = v49;
                uint64_t v50 = swift_slowAlloc();
                uint64_t v51 = (void *)swift_slowAlloc();
                uint64_t v110 = swift_slowAlloc();
                uint64_t v112 = (uint64_t)v46;
                id v113 = (id)v110;
                *(_DWORD *)uint64_t v50 = 138543874;
                id v52 = v46;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v51 = v41;

                *(_WORD *)(v50 + 12) = 2082;
                [v47 markedForDeletion];
                uint64_t v53 = Bool.yesno.getter();
                uint64_t v112 = sub_1000C51B8(v53, v54, (uint64_t *)&v113);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v50 + 22) = 2082;
                id v55 = [v47 sharedToMeReminderCKIdentifier];
                if (v55)
                {
                  uint64_t v56 = v55;
                  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v59 = v58;
                }
                else
                {
                  unint64_t v59 = 0xE300000000000000;
                  uint64_t v57 = 7104878;
                }
                uint64_t v112 = sub_1000C51B8(v57, v59, (uint64_t *)&v113);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v108, "REMHashtagCDIngestor: cdHashtag.reminderIdentifier is nil {cdHashtag.remObjectID: %{public}@, markedForDeletion: %{public}s, cdHashtag.sharedToMeReminderCKIdentifier: %{public}s}", (uint8_t *)v50, 0x20u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                id v28 = (id)0x80000001007C6B00;
                uint64_t v38 = v111;
                id v41 = v109;
              }
              else
              {

                id v28 = (id)0x80000001007C6B00;
                uint64_t v38 = v111;
              }
LABEL_47:
              uint64_t v94 = self;
              sub_10034F1F8();
              uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
              NSString v96 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              [v94 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v96];

              swift_willThrow();
LABEL_48:
              uint64_t v97 = v38;
LABEL_49:
              sub_1000966BC(v97, (uint64_t *)&unk_100909E50);
              return v28;
            }
          }
          else
          {
            id v41 = v109;
            if (qword_1009072F0 != -1) {
              swift_once();
            }
            uint64_t v60 = type metadata accessor for Logger();
            sub_10008E2DC(v60, (uint64_t)qword_100914CC8);
            id v61 = v41;
            uint64_t v62 = Logger.logObject.getter();
            os_log_type_t v63 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v62, v63))
            {
              unint64_t v64 = (uint8_t *)swift_slowAlloc();
              os_log_type_t v65 = (void *)swift_slowAlloc();
              *(_DWORD *)unint64_t v64 = 138543362;
              id v113 = v61;
              uint64_t v66 = v61;
              id v41 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *os_log_type_t v65 = v41;

              _os_log_impl((void *)&_mh_execute_header, v62, v63, "REMHashtagCDIngestor: cdHashtag.account is nil {cdHashtag.remObjectID: %{public}@}", v64, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              uint64_t v62 = v61;
            }

            id v28 = (id)0xE700000000000000;
            if (v107) {
              goto LABEL_22;
            }
          }
          id v86 = [a1 reminder];

          uint64_t v38 = v111;
          if (!v86)
          {
            swift_bridgeObjectRelease();
            if (qword_1009072F0 != -1) {
              swift_once();
            }
            uint64_t v87 = type metadata accessor for Logger();
            sub_10008E2DC(v87, (uint64_t)qword_100914CC8);
            id v88 = v41;
            char v89 = Logger.logObject.getter();
            os_log_type_t v90 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v89, v90))
            {
              os_log_type_t v91 = (uint8_t *)swift_slowAlloc();
              unint64_t v92 = (void *)swift_slowAlloc();
              *(_DWORD *)os_log_type_t v91 = 138412290;
              id v113 = v88;
              id v93 = v88;
              id v41 = v109;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *unint64_t v92 = v41;

              _os_log_impl((void *)&_mh_execute_header, v89, v90, "REMHashtagCDIngestor: cdHashtag.reminder is nil when nil reminder reference is not legit {cdHashtag.remObjectID: %@}", v91, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            id v28 = (id)0xE800000000000000;
          }
          goto LABEL_47;
        }
        uint64_t v38 = v111;
        sub_1001248EC(v111, (uint64_t)v16);
        uint64_t v39 = v110;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v16, 1, v12) == 1)
        {

          sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909E50);
          goto LABEL_20;
        }
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v108, v16, v12);
        id v67 = [a1 name];
        if (!v67)
        {
          id v28 = self;
          sub_10034F1F8();
          uint64_t v99 = swift_getObjCClassFromMetadata();
          NSString v100 = String._bridgeToObjectiveC()();
          [v28 unexpectedNilPropertyWithClass:v99 property:v100];

          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v108, v12);
          goto LABEL_48;
        }
        id v68 = v67;
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v70 = [a1 creationDate];
        if (v70)
        {
          id v71 = v70;
          uint64_t v107 = v69;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v72 = v105;
          unint64_t v73 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
          uint64_t v74 = v9;
          uint64_t v75 = v106;
          v73(v6, v74, v106);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v6, 0, 1, v75);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v6, 1, v75) != 1)
          {
            v73(v104, v6, v75);
            uint64_t v76 = self;
            Class isa = UUID._bridgeToObjectiveC()().super.isa;
            id v78 = [v76 objectIDWithUUID:isa];

            uint64_t v79 = (int)[a1 type];
            id v80 = objc_allocWithZone((Class)REMHashtag);
            NSString v81 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            Class v82 = Date._bridgeToObjectiveC()().super.isa;
            char v83 = v80;
            id v84 = v109;
            id v85 = v103;
            id v28 = [v83 initWithObjectID:v109 accountID:v103 reminderID:v78 type:v79 name:v81 creationDate:v82];

            (*(void (**)(char *, uint64_t))(v72 + 8))(v104, v106);
            (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v12);
            sub_1000966BC(v111, (uint64_t *)&unk_100909E50);
            return v28;
          }
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v6, 1, 1, v106);
        }
        swift_bridgeObjectRelease();
        sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
        id v28 = self;
        sub_10034F1F8();
        uint64_t v101 = swift_getObjCClassFromMetadata();
        NSString v102 = String._bridgeToObjectiveC()();
        [v28 unexpectedNilPropertyWithClass:v101 property:v102];

        swift_willThrow();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v12);
        uint64_t v97 = v111;
        goto LABEL_49;
      }
    }
    id v25 = [a1 reminderIdentifier];
    if (v25)
    {
      uint64_t v26 = v25;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v27 = 1;
    }
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56);
    LODWORD(v107) = 1;
    v34(v19, v27, 1, v12);
    sub_1000F44F4((uint64_t)v19, v111);
    goto LABEL_16;
  }
  id v28 = v113;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  return v28;
}

void sub_10034ED20(void *a1, void *a2, uint64_t a3)
{
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Date();
  __chkstk_darwin(v25);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a3 + 16);
  if (v13)
  {
    id v24 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v22 = v3;
    id v23 = (void (**)(char *, uint64_t))(v10 + 8);
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    while (2)
    {
      uint64_t v17 = *(unsigned __int8 *)(a3 + v14++ + 32);
      switch(v17)
      {
        case 1:
          id v15 = [a1 creationDate];
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          v16.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
          (*v23)(v12, v25);
          [a2 setCreationDate:v16.super.isa];
          goto LABEL_4;
        case 2:
          v16.super.Class isa = (Class)[a1 name];
          if (!v16.super.isa)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            v16.super.Class isa = (Class)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }
          [a2 setName:v16.super.isa];
LABEL_4:

          goto LABEL_5;
        case 3:
          uint64_t v21 = (uint64_t)[a1 type];
          if (v21 < -32768)
          {
            __break(1u);
LABEL_17:
            __break(1u);
            JUMPOUT(0x10034F048);
          }
          if (v21 >= 0x8000) {
            goto LABEL_17;
          }
          [a2 setType:(__int16)v21];
LABEL_5:
          if (v13 != v14) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        default:
          id v18 = [a1 objectID];
          id v19 = [v18 uuid];

          static UUID._unconditionallyBridgeFromObjectiveC(_:)();
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*v24)(v9, v26);
          [a2 setIdentifier:isa];

          goto LABEL_5;
      }
      break;
    }
  }
}

void sub_10034F058(void *a1, char a2, uint64_t a3)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v14 = *(void **)(v3 + 24);
    sub_10047733C(1, v14, a3);
    if (v4) {
      return;
    }
    NSDate v16 = v15;
    [a1 setReminder:v15];
    id v17 = [v14 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    [a1 setReminderIdentifier:isa];
  }
  else
  {
    sub_10047730C(0, *(void **)(v3 + 16), a3);
    if (v4) {
      return;
    }
    Class isa = v12;
    [a1 setAccount:v12];
  }
}

unint64_t sub_10034F1F8()
{
  unint64_t result = qword_10090DC20;
  if (!qword_10090DC20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090DC20);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for REMHashtagCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10034F304);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMHashtagCDIngestor.RelationshipKey()
{
  return &type metadata for REMHashtagCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMHashtagCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10034F408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMHashtagCDIngestor.ValueKey()
{
  return &type metadata for REMHashtagCDIngestor.ValueKey;
}

uint64_t sub_10034F440()
{
  return sub_1000B2138(&qword_100914ED8, &qword_10090C008);
}

unint64_t sub_10034F46C()
{
  unint64_t result = qword_100914EE0;
  if (!qword_100914EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914EE0);
  }
  return result;
}

uint64_t sub_10034F4C0()
{
  return sub_1000B2138(&qword_100914EE8, &qword_100914EF0);
}

unint64_t sub_10034F4EC()
{
  unint64_t result = qword_100914EF8;
  if (!qword_100914EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914EF8);
  }
  return result;
}

uint64_t *RDSynchronizedKeyValueStore.default.unsafeMutableAddressor()
{
  if (qword_100907300 != -1) {
    swift_once();
  }
  return &static RDSynchronizedKeyValueStore.default;
}

uint64_t sub_10034F58C(uint64_t a1, uint64_t a2)
{
  return sub_100350AB4(a1, a2, (uint64_t (*)(void))&type metadata accessor for Locale, &qword_100914FF0, (void (*)(uint64_t))&type metadata accessor for Locale, (uint64_t)&protocol conformance descriptor for Locale);
}

uint64_t sub_10034F5D4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10034F69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v43 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  id v45 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v9);
  BOOL v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  __chkstk_darwin(v44);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v17 = (char *)&v36 - v16;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v18 || v46 == v47) {
    return 1;
  }
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v42 = *(void *)(v15 + 72);
  uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  id v37 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v38 = v11;
  uint64_t v39 = v9;
  id v40 = (void (**)(char *, uint64_t))(v5 + 8);
  while (1)
  {
    sub_10035380C(v46 + v19, (uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    sub_10035380C(v47 + v19, (uint64_t)v13, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    uint64_t v21 = (uint64_t)&v11[*(int *)(v9 + 48)];
    sub_1000CAA4C((uint64_t)v17, (uint64_t)v11);
    sub_1000CAA4C((uint64_t)v13, v21);
    uint64_t v22 = *v20;
    if ((*v20)(v11, 1, v4) != 1) {
      break;
    }
    if (v22((char *)v21, 1, v4) != 1) {
      goto LABEL_22;
    }
    sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_100909A40);
LABEL_12:
    uint64_t v29 = *(int *)(v44 + 20);
    id v30 = &v17[v29];
    uint64_t v31 = *(void *)&v17[v29 + 8];
    id v32 = &v13[v29];
    uint64_t v33 = *((void *)v32 + 1);
    if (v31)
    {
      if (!v33) {
        goto LABEL_23;
      }
      BOOL v34 = *(void *)v30 == *(void *)v32 && v31 == v33;
      if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_23;
      }
    }
    else if (v33)
    {
      goto LABEL_23;
    }
    sub_100353874((uint64_t)v13, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    sub_100353874((uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    v19 += v42;
    if (!--v18) {
      return 1;
    }
  }
  sub_1000CAA4C((uint64_t)v11, (uint64_t)v45);
  if (v22((char *)v21, 1, v4) != 1)
  {
    uint64_t v23 = (uint64_t)v45;
    id v24 = v43;
    (*v37)(v43, v21, v4);
    sub_1003538D4((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
    int v41 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v25 = v20;
    uint64_t v26 = *v40;
    uint64_t v27 = v24;
    uint64_t v28 = v23;
    uint64_t v9 = v39;
    (*v40)(v27, v4);
    v26((char *)v28, v4);
    uint64_t v20 = v25;
    BOOL v11 = v38;
    sub_1000966BC((uint64_t)v38, (uint64_t *)&unk_100909A40);
    if ((v41 & 1) == 0) {
      goto LABEL_23;
    }
    goto LABEL_12;
  }
  (*v40)(v45, v4);
LABEL_22:
  sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_10091C320);
LABEL_23:
  sub_100353874((uint64_t)v13, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  sub_100353874((uint64_t)v17, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  return 0;
}

uint64_t sub_10034FB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  uint64_t v60 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v10 || a1 == a2) {
    return 1;
  }
  uint64_t v11 = 0;
  uint64_t v54 = a2 + 32;
  uint64_t v55 = a1 + 32;
  while (1)
  {
    uint64_t v13 = (unsigned __int8 *)(v55 + (v11 << 6));
    int v14 = *v13;
    int v15 = v13[1];
    uint64_t v16 = *((void *)v13 + 1);
    uint64_t v17 = *((void *)v13 + 2);
    uint64_t v18 = *((void *)v13 + 3);
    uint64_t v19 = *((void *)v13 + 4);
    uint64_t v20 = *((void *)v13 + 5);
    uint64_t v64 = *((void *)v13 + 6);
    uint64_t v21 = *((void *)v13 + 7);
    uint64_t v22 = (unsigned __int8 *)(v54 + (v11 << 6));
    int v23 = *v22;
    int v24 = v22[1];
    uint64_t v25 = *((void *)v22 + 1);
    uint64_t v26 = *((void *)v22 + 2);
    uint64_t v27 = *((void *)v22 + 3);
    uint64_t v61 = *((void *)v22 + 4);
    uint64_t v62 = *((void *)v22 + 5);
    uint64_t v28 = *((void *)v22 + 7);
    uint64_t v63 = *((void *)v22 + 6);
    if (v14 == 2)
    {
      if (v23 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v29 = (v14 & 1) == 0;
      if (v23 == 2 || ((v29 ^ v23) & 1) == 0) {
        return v12;
      }
    }
    if (v15 == 2)
    {
      if (v24 != 2) {
        return 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
      BOOL v30 = (v15 & 1) == 0;
      if (v24 == 2 || ((v30 ^ v24) & 1) == 0) {
        return v12;
      }
    }
    uint64_t v58 = v26;
    uint64_t v59 = v19;
    if (v17)
    {
      if (!v26) {
        return 0;
      }
      if (v16 != v25 || v17 != v26)
      {
        uint64_t v31 = v17;
        uint64_t v32 = v27;
        uint64_t v53 = v20;
        uint64_t v33 = v18;
        uint64_t v34 = v11;
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v19 = v59;
        uint64_t v27 = v32;
        uint64_t v17 = v31;
        uint64_t v11 = v34;
        uint64_t v18 = v33;
        uint64_t v20 = v53;
        if ((v35 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v26)
    {
      return 0;
    }
    uint64_t v56 = v27;
    uint64_t v57 = v18;
    if (!v18)
    {
      uint64_t v36 = v20;
      if (!v27) {
        goto LABEL_28;
      }
      uint64_t v47 = v56;
      uint64_t v18 = v57;
LABEL_42:
      uint64_t v48 = v18;
      sub_10021FE78(v18);
      sub_10021FE78(v47);
      sub_10021C120(v48);
      sub_10021C120(v47);
      return 0;
    }
    if (!v27)
    {
      uint64_t v47 = 0;
      goto LABEL_42;
    }
    uint64_t v36 = v20;
    uint64_t v37 = v20;
    uint64_t v38 = v11;
    char v39 = sub_100219510(v18, v19, v37, v64, v27, v61, v62, v63);
    uint64_t v11 = v38;
    if ((v39 & 1) == 0) {
      return 0;
    }
LABEL_28:
    uint64_t v40 = *(void *)(v21 + 16);
    if (v40 != *(void *)(v28 + 16)) {
      return 0;
    }
    if (v40 && v21 != v28) {
      break;
    }
LABEL_5:
    ++v11;
    uint64_t v12 = 1;
    if (v11 == v10) {
      return v12;
    }
  }
  uint64_t v50 = v11;
  uint64_t v51 = v10;
  uint64_t v41 = v60;
  unint64_t v42 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  uint64_t v52 = v17;
  swift_bridgeObjectRetain();
  uint64_t v53 = v36;
  sub_10021FE78(v57);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10021FE78(v56);
  swift_bridgeObjectRetain();
  unint64_t v43 = 0;
  uint64_t v44 = *(void *)(v41 + 72);
  while (1)
  {
    uint64_t result = sub_10035380C(v21 + v42, (uint64_t)v9, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (v43 >= *(void *)(v28 + 16)) {
      break;
    }
    sub_10035380C(v28 + v42, (uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    BOOL v46 = sub_100217154((uint64_t)v9, (uint64_t)v6);
    sub_100353874((uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    sub_100353874((uint64_t)v9, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (!v46)
    {
      swift_bridgeObjectRelease();
      sub_10021C120(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10021C120(v57);
      swift_bridgeObjectRelease();
      return 0;
    }
    ++v43;
    v42 += v44;
    if (v40 == v43)
    {
      swift_bridgeObjectRelease();
      sub_10021C120(v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10021C120(v57);
      swift_bridgeObjectRelease();
      uint64_t v11 = v50;
      uint64_t v10 = v51;
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_100350034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0) - 8;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      return 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_10035380C(a1 + v12, (uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_10035380C(a2 + v12, (uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        BOOL v15 = sub_100217154((uint64_t)v10, (uint64_t)v6);
        sub_100353874((uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_100353874((uint64_t)v10, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        BOOL v17 = v14-- != 0;
        if (!v15) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_1003501C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  uint64_t v83 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v64 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v10 || a1 == a2) {
    return 1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = a1 + 32;
  uint64_t v13 = a2 + 32;
  while (1)
  {
    uint64_t v14 = (void *)(v12 + 24 * v11);
    uint64_t v15 = v14[1];
    uint64_t v16 = v14[2];
    BOOL v17 = (void *)(v13 + 24 * v11);
    uint64_t v18 = v17[2];
    uint64_t v85 = v17[1];
    uint64_t v86 = v18;
    uint64_t v84 = v15;
    if (v15)
    {
      if (!v85) {
        return 0;
      }
      if (*v14 != *v17 || v84 != v85)
      {
        uint64_t v20 = v10;
        uint64_t v21 = v11;
        uint64_t v22 = v16;
        uint64_t v23 = v12;
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v12 = v23;
        uint64_t v16 = v22;
        uint64_t v11 = v21;
        uint64_t v10 = v20;
        if ((v24 & 1) == 0) {
          return 0;
        }
      }
    }
    else if (v85)
    {
      return 0;
    }
    uint64_t v25 = *(void *)(v16 + 16);
    if (v25 != *(void *)(v86 + 16)) {
      return 0;
    }
    if (v25 && v16 != v86) {
      break;
    }
LABEL_20:
    ++v11;
    uint64_t result = 1;
    if (v11 == v10) {
      return result;
    }
  }
  uint64_t v64 = v13;
  uint64_t v65 = v12;
  uint64_t v66 = v11;
  uint64_t v67 = v10;
  uint64_t v74 = v86 + 32;
  uint64_t v75 = v16 + 32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v28 = 0;
  uint64_t v70 = v25;
  while (1)
  {
    if (v28 >= *(void *)(v86 + 16)) {
      goto LABEL_66;
    }
    BOOL v29 = (unsigned __int8 *)(v75 + (v28 << 6));
    int v30 = *v29;
    int v31 = v29[1];
    uint64_t v32 = *((void *)v29 + 1);
    uint64_t v33 = *((void *)v29 + 2);
    uint64_t v34 = *((void *)v29 + 3);
    uint64_t v80 = *((void *)v29 + 4);
    uint64_t v81 = *((void *)v29 + 5);
    uint64_t v35 = *((void *)v29 + 7);
    uint64_t v82 = *((void *)v29 + 6);
    uint64_t v36 = (unsigned __int8 *)(v74 + (v28 << 6));
    int v37 = *v36;
    int v38 = v36[1];
    uint64_t v39 = *((void *)v36 + 1);
    uint64_t v40 = *((void *)v36 + 2);
    uint64_t v41 = *((void *)v36 + 3);
    uint64_t v79 = *((void *)v36 + 4);
    uint64_t v42 = *((void *)v36 + 5);
    uint64_t v43 = *((void *)v36 + 6);
    uint64_t v44 = *((void *)v36 + 7);
    if (v30 == 2)
    {
      if (v37 != 2) {
        goto LABEL_57;
      }
    }
    else if (v37 == 2 || ((((v30 & 1) == 0) ^ v37) & 1) == 0)
    {
      goto LABEL_57;
    }
    if (v31 == 2)
    {
      if (v38 != 2) {
        goto LABEL_57;
      }
    }
    else if (v38 == 2 || ((((v31 & 1) == 0) ^ v38) & 1) == 0)
    {
      goto LABEL_57;
    }
    if (v33)
    {
      if (!v40) {
        goto LABEL_57;
      }
      if (v32 != v39 || v33 != v40)
      {
        uint64_t v45 = v40;
        uint64_t v71 = v33;
        uint64_t v72 = v42;
        uint64_t v73 = v43;
        unint64_t v69 = v28;
        uint64_t v46 = v34;
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v40 = v45;
        uint64_t v33 = v71;
        uint64_t v42 = v72;
        uint64_t v34 = v46;
        unint64_t v28 = v69;
        uint64_t v43 = v73;
        if ((v47 & 1) == 0)
        {
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    else if (v40)
    {
      goto LABEL_57;
    }
    uint64_t v76 = v41;
    uint64_t v77 = v34;
    uint64_t v78 = v40;
    if (!v34)
    {
      uint64_t v49 = v42;
      uint64_t v50 = v43;
      if (!v41) {
        goto LABEL_46;
      }
      uint64_t v62 = v76;
      uint64_t v34 = v77;
LABEL_60:
      uint64_t v63 = v34;
      sub_10021FE78(v34);
      sub_10021FE78(v62);
      sub_10021C120(v63);
      sub_10021C120(v62);
LABEL_61:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v84 = v85;
LABEL_62:
      swift_bridgeObjectRelease();
      return 0;
    }
    if (!v41)
    {
      uint64_t v62 = 0;
      goto LABEL_60;
    }
    uint64_t v48 = v41;
    uint64_t v49 = v42;
    uint64_t v50 = v43;
    uint64_t v51 = v16;
    uint64_t v52 = v35;
    uint64_t v53 = v33;
    char v54 = sub_100219510(v34, v80, v81, v82, v48, v79, v42, v43);
    uint64_t v33 = v53;
    uint64_t v35 = v52;
    uint64_t v16 = v51;
    if ((v54 & 1) == 0) {
      goto LABEL_61;
    }
LABEL_46:
    uint64_t result = v16;
    uint64_t v55 = *(void *)(v35 + 16);
    if (v55 != *(void *)(v44 + 16)) {
      goto LABEL_61;
    }
    if (v55 && v35 != v44) {
      break;
    }
LABEL_22:
    ++v28;
    uint64_t v16 = result;
    if (v28 == v70)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v66;
      uint64_t v10 = v67;
      uint64_t v12 = v65;
      uint64_t v13 = v64;
      goto LABEL_20;
    }
  }
  uint64_t v68 = result;
  unint64_t v69 = v28;
  uint64_t v56 = v49;
  uint64_t v57 = v83;
  unint64_t v58 = (*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  uint64_t v71 = v33;
  swift_bridgeObjectRetain();
  sub_10021FE78(v77);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = v56;
  uint64_t v73 = v50;
  sub_10021FE78(v76);
  swift_bridgeObjectRetain();
  unint64_t v59 = 0;
  uint64_t v60 = *(void *)(v57 + 72);
  while (1)
  {
    uint64_t result = sub_10035380C(v35 + v58, (uint64_t)v9, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (v59 >= *(void *)(v44 + 16)) {
      break;
    }
    sub_10035380C(v44 + v58, (uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    BOOL v61 = sub_100219C24((uint64_t)v9, (uint64_t)v6);
    sub_100353874((uint64_t)v6, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    sub_100353874((uint64_t)v9, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    if (!v61)
    {
      swift_bridgeObjectRelease();
      sub_10021C120(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10021C120(v77);
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
    ++v59;
    v58 += v60;
    if (v55 == v59)
    {
      swift_bridgeObjectRelease();
      sub_10021C120(v76);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10021C120(v77);
      swift_bridgeObjectRelease();
      uint64_t result = v68;
      unint64_t v28 = v69;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

BOOL sub_100350808(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  int v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

int32x2_t sub_100350874(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2 = a1[1].i64[0];
  if (v2 == a2[1].i64[0] && v2 && a1 != a2 && a1[2].i64[0] == a2[2].i64[0] && a1[2].i64[1] == a2[2].i64[1])
  {
    uint64_t v4 = a1 + 3;
    uint64_t v5 = a2 + 3;
    uint64_t v6 = v2 - 1;
    do
    {
      if (!v6) {
        break;
      }
      int64x2_t v7 = *v4++;
      int64x2_t v8 = v7;
      int64x2_t v9 = *v5++;
      int32x2_t result = vmovn_s64(vceqq_s64(v8, v9));
      --v6;
    }
    while ((result.i32[0] & result.i32[1] & 1) != 0);
  }
  return result;
}

uint64_t sub_1003508F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v14 = 1;
    }
    else
    {
      int v3 = (_OWORD *)(a1 + 32);
      uint64_t v4 = (_OWORD *)(a2 + 32);
      uint64_t v5 = v2 - 1;
      do
      {
        long long v6 = v3[7];
        v18[6] = v3[6];
        v18[7] = v6;
        v18[8] = v3[8];
        long long v7 = v3[3];
        void v18[2] = v3[2];
        v18[3] = v7;
        long long v8 = v3[5];
        v18[4] = v3[4];
        v18[5] = v8;
        long long v9 = v3[1];
        v18[0] = *v3;
        v18[1] = v9;
        long long v10 = v4[7];
        v19[6] = v4[6];
        v19[7] = v10;
        v19[8] = v4[8];
        long long v11 = v4[3];
        v19[2] = v4[2];
        v19[3] = v11;
        long long v12 = v4[5];
        v19[4] = v4[4];
        void v19[5] = v12;
        long long v13 = v4[1];
        v19[0] = *v4;
        v19[1] = v13;
        sub_100097D94((uint64_t)v18);
        sub_100097D94((uint64_t)v19);
        char v14 = sub_1000E8CF0((uint64_t)v18, (uint64_t)v19);
        sub_100097E90((uint64_t)v19);
        sub_100097E90((uint64_t)v18);
        BOOL v16 = v5-- != 0;
        if ((v14 & 1) == 0) {
          break;
        }
        v3 += 9;
        v4 += 9;
      }
      while (v16);
    }
  }
  else
  {
    char v14 = 0;
  }
  return v14 & 1;
}

BOOL sub_100350A00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  int v3 = (double *)(a1 + 40);
  uint64_t v4 = (double *)(a2 + 40);
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    double v7 = *v3++;
    double v8 = v7;
    double v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t sub_100350A6C(uint64_t a1, uint64_t a2)
{
  return sub_100350AB4(a1, a2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100350AB4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v37 = a6;
  uint64_t v10 = a3(0);
  uint64_t v11 = __chkstk_darwin(v10);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16 == *(void *)(a2 + 16))
  {
    if (!v16 || a1 == a2)
    {
      char v24 = 1;
    }
    else
    {
      unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
      uint64_t v18 = v12 + 16;
      uint64_t v34 = v19;
      uint64_t v35 = v13;
      uint64_t v30 = *(void *)(v18 + 56);
      uint64_t v31 = a2;
      uint64_t v36 = v18;
      uint64_t v32 = a1;
      uint64_t v33 = (void (**)(char *, uint64_t))(v18 - 8);
      uint64_t v20 = v16 - 1;
      do
      {
        uint64_t v21 = v34;
        v34(v15, a1 + v17, v10);
        uint64_t v22 = v15;
        uint64_t v23 = v35;
        v21(v35, a2 + v17, v10);
        sub_1003538D4(a4, a5);
        char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v33;
        uint64_t v26 = v23;
        uint64_t v15 = v22;
        (*v33)(v26, v10);
        v25(v22, v10);
        BOOL v28 = v20-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v17 += v30;
        a2 = v31;
        a1 = v32;
      }
      while (v28);
    }
  }
  else
  {
    char v24 = 0;
  }
  return v24 & 1;
}

uint64_t sub_100350CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = type metadata accessor for RDSavedURLAttachment();
  uint64_t v4 = __chkstk_darwin(v135);
  long long v6 = (char *)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v9 = (char *)&v125 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v10 || a1 == a2) {
    return 1;
  }
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 72);
  uint64_t v133 = a1;
  uint64_t v134 = v12;
  id v129 = (char *)&v125 - v8;
  uint64_t v130 = v6;
  uint64_t v128 = a2;
  while (1)
  {
    sub_10035380C(a1 + v11, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
    sub_10035380C(a2 + v11, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
    if ((static URL.== infix(_:_:)() & 1) == 0) {
      goto LABEL_133;
    }
    uint64_t v13 = *(int *)(v135 + 20);
    uint64_t v14 = *(void *)&v9[v13];
    unint64_t v15 = *(void *)&v9[v13 + 8];
    uint64_t v16 = (uint64_t *)&v6[v13];
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    if (v15 >> 60 == 15)
    {
      if (v18 >> 60 != 15) {
        break;
      }
      goto LABEL_6;
    }
    if (v18 >> 60 == 15) {
      break;
    }
    unint64_t v19 = v15 >> 62;
    uint64_t v20 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
        }
        uint64_t v21 = *v16;
        unint64_t v22 = v16[1];
        uint64_t v23 = a2;
        uint64_t v20 = HIDWORD(v14) - (int)v14;
        uint64_t v24 = v14;
        sub_100097E38(v14, v15);
        sub_100097E38(v24, v15);
        uint64_t v14 = v24;
        a2 = v23;
        unint64_t v18 = v22;
LABEL_16:
        uint64_t v17 = v21;
        double v9 = v129;
        long long v6 = v130;
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v14 + 16);
        uint64_t v25 = *(void *)(v14 + 24);
        uint64_t v20 = v25 - v26;
        if (__OFSUB__(v25, v26)) {
          goto LABEL_136;
        }
        uint64_t v21 = v17;
        unint64_t v27 = v15;
        unint64_t v28 = v18;
        uint64_t v29 = a2;
        uint64_t v30 = v14;
        sub_100097E38(v14, v27);
        sub_100097E38(v30, v27);
        uint64_t v14 = v30;
        a2 = v29;
        unint64_t v18 = v28;
        unint64_t v15 = v27;
        goto LABEL_16;
      case 3uLL:
        break;
      default:
        uint64_t v20 = BYTE6(v15);
        break;
    }
    unint64_t v31 = v18 >> 62;
    switch(v18 >> 62)
    {
      case 1uLL:
        LODWORD(v32) = HIDWORD(v17) - v17;
        if (__OFSUB__(HIDWORD(v17), v17)) {
          goto LABEL_137;
        }
        uint64_t v32 = (int)v32;
LABEL_22:
        if (v20 != v32)
        {
LABEL_131:
          uint64_t v124 = v14;
          sub_100097F20(v14, v15);
          uint64_t v122 = v124;
          unint64_t v123 = v15;
          goto LABEL_132;
        }
        if (v20 < 1)
        {
LABEL_33:
          uint64_t v42 = v14;
          sub_100097F20(v14, v15);
          sub_100097F20(v42, v15);
          a1 = v133;
        }
        else
        {
          switch((int)v19)
          {
            case 1:
              uint64_t v43 = (int)v14;
              uint64_t v132 = v14;
              if ((int)v14 > v14 >> 32) {
                goto LABEL_139;
              }
              uint64_t v131 = v17;
              sub_100097E38(v17, v18);
              uint64_t v44 = __DataStorage._bytes.getter();
              if (v44)
              {
                uint64_t v45 = v44;
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__(v43, v46)) {
                  goto LABEL_141;
                }
                int v127 = (const void *)(v45 + v43 - v46);
              }
              else
              {
                int v127 = 0;
              }
              a2 = v128;
              __DataStorage._length.getter();
              if (!v31)
              {
                uint64_t v73 = v131;
                __s1[0] = v131;
                LOWORD(__s1[1]) = v18;
                BYTE2(__s1[1]) = BYTE2(v18);
                BYTE3(__s1[1]) = BYTE3(v18);
                BYTE4(__s1[1]) = BYTE4(v18);
                BYTE5(__s1[1]) = BYTE5(v18);
                if (!v127) {
                  goto LABEL_163;
                }
                int v60 = memcmp(v127, __s1, BYTE6(v18));
                goto LABEL_88;
              }
              if (v31 == 1)
              {
                uint64_t v67 = (int)v131;
                uint64_t v68 = (v131 >> 32) - (int)v131;
                if (v131 >> 32 < (int)v131) {
                  goto LABEL_150;
                }
                swift_retain();
                unint64_t v69 = (char *)__DataStorage._bytes.getter();
                if (v69)
                {
                  uint64_t v70 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v70)) {
                    goto LABEL_157;
                  }
                  v69 += v67 - v70;
                }
                a2 = v128;
                uint64_t v71 = __DataStorage._length.getter();
                if (v71 >= v68) {
                  size_t v72 = v68;
                }
                else {
                  size_t v72 = v71;
                }
                if (!v127) {
                  goto LABEL_171;
                }
                if (!v69) {
                  goto LABEL_160;
                }
                int v60 = memcmp(v127, v69, v72);
                uint64_t v73 = v131;
                sub_100097F20(v131, v18);
LABEL_88:
                sub_100097F20(v73, v18);
                uint64_t v59 = v132;
LABEL_89:
                sub_100097F20(v59, v15);
                sub_100097F20(v59, v15);
                a1 = v133;
                if (v60) {
                  goto LABEL_133;
                }
                goto LABEL_6;
              }
              uint64_t v95 = *(void *)(v131 + 16);
              id v126 = *(char **)(v131 + 24);
              swift_retain();
              swift_retain();
              uint64_t v96 = __DataStorage._bytes.getter();
              if (v96)
              {
                uint64_t v97 = v96;
                uint64_t v98 = __DataStorage._offset.getter();
                if (__OFSUB__(v95, v98)) {
                  goto LABEL_156;
                }
                uint64_t v99 = v95;
                NSString v100 = (const void *)(v97 + v95 - v98);
              }
              else
              {
                uint64_t v99 = v95;
                NSString v100 = 0;
              }
              int64_t v113 = (int64_t)&v126[-v99];
              if (__OFSUB__(v126, v99)) {
                goto LABEL_151;
              }
              uint64_t v114 = __DataStorage._length.getter();
              if (v114 >= v113) {
                size_t v115 = v113;
              }
              else {
                size_t v115 = v114;
              }
              if (!v127) {
                goto LABEL_169;
              }
              if (!v100) {
                goto LABEL_170;
              }
              int v116 = memcmp(v127, v100, v115);
              swift_release();
              uint64_t v117 = v131;
              swift_release();
              sub_100097F20(v117, v18);
              uint64_t v118 = v132;
              sub_100097F20(v132, v15);
              sub_100097F20(v118, v15);
              a1 = v133;
              if (v116) {
                goto LABEL_133;
              }
              break;
            case 2:
              id v126 = *(char **)(v14 + 16);
              uint64_t v47 = v14;
              uint64_t v131 = v17;
              sub_100097E24(v17, v18);
              uint64_t v132 = v47;
              swift_retain();
              swift_retain();
              uint64_t v48 = __DataStorage._bytes.getter();
              int v127 = (const void *)(v15 & 0x3FFFFFFFFFFFFFFFLL);
              if (v48)
              {
                uint64_t v49 = v48;
                uint64_t v50 = __DataStorage._offset.getter();
                if (__OFSUB__(v126, v50)) {
                  goto LABEL_140;
                }
                uint64_t v51 = &v126[v49 - v50];
              }
              else
              {
                uint64_t v51 = 0;
              }
              __DataStorage._length.getter();
              if (v31)
              {
                if (v31 == 1)
                {
                  uint64_t v61 = (int)v131;
                  uint64_t v62 = (v131 >> 32) - (int)v131;
                  if (v131 >> 32 < (int)v131) {
                    goto LABEL_144;
                  }
                  swift_retain();
                  uint64_t v63 = __DataStorage._bytes.getter();
                  if (v63)
                  {
                    id v126 = v51;
                    uint64_t v64 = v63;
                    uint64_t v65 = __DataStorage._offset.getter();
                    if (__OFSUB__(v61, v65)) {
                      goto LABEL_155;
                    }
                    uint64_t v66 = (const void *)(v64 + v61 - v65);
                    uint64_t v51 = v126;
                  }
                  else
                  {
                    uint64_t v66 = 0;
                  }
                  uint64_t v110 = __DataStorage._length.getter();
                  if (v110 >= v62) {
                    size_t v111 = v62;
                  }
                  else {
                    size_t v111 = v110;
                  }
                  if (!v51) {
                    goto LABEL_167;
                  }
                  if (!v66) {
                    goto LABEL_168;
                  }
                  int v57 = memcmp(v51, v66, v111);
                  uint64_t v112 = v131;
                  sub_100097F20(v131, v18);
                  swift_release();
                  uint64_t v58 = v132;
                  swift_release();
                  sub_100097F20(v112, v18);
LABEL_118:
                  sub_100097F20(v58, v15);
                  sub_100097F20(v58, v15);
                  a1 = v133;
                  a2 = v128;
                  if (v57) {
                    goto LABEL_133;
                  }
                }
                else
                {
                  uint64_t v89 = *(void *)(v131 + 16);
                  id v126 = *(char **)(v131 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v90 = __DataStorage._bytes.getter();
                  if (v90)
                  {
                    uint64_t v91 = v90;
                    uint64_t v92 = __DataStorage._offset.getter();
                    if (__OFSUB__(v89, v92)) {
                      goto LABEL_154;
                    }
                    uint64_t v93 = v89;
                    uint64_t v94 = (const void *)(v91 + v89 - v92);
                  }
                  else
                  {
                    uint64_t v93 = v89;
                    uint64_t v94 = 0;
                  }
                  int64_t v105 = (int64_t)&v126[-v93];
                  if (__OFSUB__(v126, v93)) {
                    goto LABEL_149;
                  }
                  uint64_t v106 = __DataStorage._length.getter();
                  if (v106 >= v105) {
                    size_t v107 = v105;
                  }
                  else {
                    size_t v107 = v106;
                  }
                  if (!v51) {
                    goto LABEL_165;
                  }
                  if (!v94) {
                    goto LABEL_166;
                  }
                  int v102 = memcmp(v51, v94, v107);
                  swift_release();
                  uint64_t v108 = v132;
                  swift_release();
                  swift_release();
                  uint64_t v109 = v131;
                  swift_release();
                  sub_100097F20(v109, v18);
                  sub_100097F20(v108, v15);
                  uint64_t v104 = v108;
LABEL_109:
                  sub_100097F20(v104, v15);
                  a1 = v133;
                  a2 = v128;
                  if (v102) {
                    goto LABEL_133;
                  }
                }
              }
              else
              {
                uint64_t v87 = v131;
                __s1[0] = v131;
                LOWORD(__s1[1]) = v18;
                BYTE2(__s1[1]) = BYTE2(v18);
                BYTE3(__s1[1]) = BYTE3(v18);
                BYTE4(__s1[1]) = BYTE4(v18);
                BYTE5(__s1[1]) = BYTE5(v18);
                if (!v51) {
                  goto LABEL_162;
                }
                LODWORD(v126) = memcmp(v51, __s1, BYTE6(v18));
                swift_release();
                uint64_t v88 = v132;
                swift_release();
                sub_100097F20(v87, v18);
                sub_100097F20(v88, v15);
                sub_100097F20(v88, v15);
                a1 = v133;
                a2 = v128;
                if (v126) {
                  goto LABEL_133;
                }
              }
              goto LABEL_6;
            case 3:
              memset(__s1, 0, 14);
              if (!v31) {
                goto LABEL_50;
              }
              uint64_t v132 = v14;
              if (v31 == 1)
              {
                uint64_t v52 = (int)v17;
                uint64_t v37 = (v17 >> 32) - (int)v17;
                if (v17 >> 32 < (int)v17) {
                  goto LABEL_143;
                }
                uint64_t v131 = v17;
                sub_100097E38(v17, v18);
                uint64_t v53 = __DataStorage._bytes.getter();
                if (!v53) {
                  goto LABEL_159;
                }
                uint64_t v39 = v53;
                uint64_t v54 = __DataStorage._offset.getter();
                BOOL v35 = __OFSUB__(v52, v54);
                uint64_t v41 = v52 - v54;
                if (v35) {
                  goto LABEL_148;
                }
LABEL_46:
                uint64_t v55 = __DataStorage._length.getter();
                if (v55 >= v37) {
                  size_t v56 = v37;
                }
                else {
                  size_t v56 = v55;
                }
                int v57 = memcmp(__s1, (const void *)(v39 + v41), v56);
                sub_100097F20(v131, v18);
                uint64_t v58 = v132;
                goto LABEL_118;
              }
              uint64_t v82 = *(void *)(v17 + 16);
              uint64_t v131 = *(void *)(v17 + 24);
              uint64_t v83 = v17;
              sub_100097E24(v17, v18);
              uint64_t v76 = v83;
              swift_retain();
              swift_retain();
              uint64_t v81 = (char *)__DataStorage._bytes.getter();
              if (v81)
              {
                uint64_t v84 = __DataStorage._offset.getter();
                if (__OFSUB__(v82, v84)) {
                  goto LABEL_153;
                }
                v81 += v82 - v84;
              }
              BOOL v35 = __OFSUB__(v131, v82);
              int64_t v85 = v131 - v82;
              if (v35) {
                goto LABEL_145;
              }
              uint64_t v86 = __DataStorage._length.getter();
              if (!v81) {
                goto LABEL_161;
              }
LABEL_97:
              if (v86 >= v85) {
                size_t v101 = v85;
              }
              else {
                size_t v101 = v86;
              }
              int v102 = memcmp(__s1, v81, v101);
              swift_release();
              swift_release();
              sub_100097F20(v76, v18);
              uint64_t v103 = v132;
              sub_100097F20(v132, v15);
              uint64_t v104 = v103;
              goto LABEL_109;
            default:
              __s1[0] = v14;
              LOWORD(__s1[1]) = v15;
              BYTE2(__s1[1]) = BYTE2(v15);
              BYTE3(__s1[1]) = BYTE3(v15);
              BYTE4(__s1[1]) = BYTE4(v15);
              BYTE5(__s1[1]) = BYTE5(v15);
              if (!v31)
              {
LABEL_50:
                uint64_t __s2 = v17;
                __int16 v137 = v18;
                char v138 = BYTE2(v18);
                char v139 = BYTE3(v18);
                char v140 = BYTE4(v18);
                char v141 = BYTE5(v18);
                uint64_t v59 = v14;
                int v60 = memcmp(__s1, &__s2, BYTE6(v18));
                goto LABEL_89;
              }
              uint64_t v132 = v14;
              if (v31 == 1)
              {
                uint64_t v36 = (int)v17;
                uint64_t v37 = (v17 >> 32) - (int)v17;
                if (v17 >> 32 < (int)v17) {
                  goto LABEL_142;
                }
                uint64_t v131 = v17;
                sub_100097E38(v17, v18);
                uint64_t v38 = __DataStorage._bytes.getter();
                if (!v38)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_159:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_160:
                  __break(1u);
LABEL_161:
                  __break(1u);
LABEL_162:
                  __break(1u);
LABEL_163:
                  __break(1u);
LABEL_164:
                  __break(1u);
LABEL_165:
                  __break(1u);
LABEL_166:
                  __break(1u);
LABEL_167:
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
                  JUMPOUT(0x100351990);
                }
                uint64_t v39 = v38;
                uint64_t v40 = __DataStorage._offset.getter();
                BOOL v35 = __OFSUB__(v36, v40);
                uint64_t v41 = v36 - v40;
                if (v35) {
                  goto LABEL_147;
                }
                goto LABEL_46;
              }
              uint64_t v74 = *(void *)(v17 + 16);
              uint64_t v131 = *(void *)(v17 + 24);
              uint64_t v75 = v17;
              sub_100097E24(v17, v18);
              uint64_t v76 = v75;
              swift_retain();
              swift_retain();
              uint64_t v77 = __DataStorage._bytes.getter();
              if (v77)
              {
                uint64_t v78 = v77;
                uint64_t v79 = __DataStorage._offset.getter();
                if (__OFSUB__(v74, v79)) {
                  goto LABEL_152;
                }
                uint64_t v80 = v74;
                uint64_t v81 = (char *)(v78 + v74 - v79);
              }
              else
              {
                uint64_t v80 = v74;
                uint64_t v81 = 0;
              }
              int64_t v85 = v131 - v80;
              if (__OFSUB__(v131, v80)) {
                goto LABEL_146;
              }
              uint64_t v86 = __DataStorage._length.getter();
              if (!v81) {
                goto LABEL_164;
              }
              goto LABEL_97;
          }
        }
        break;
      case 2uLL:
        uint64_t v34 = *(void *)(v17 + 16);
        uint64_t v33 = *(void *)(v17 + 24);
        BOOL v35 = __OFSUB__(v33, v34);
        uint64_t v32 = v33 - v34;
        if (!v35) {
          goto LABEL_22;
        }
        goto LABEL_138;
      case 3uLL:
        if (!v20) {
          goto LABEL_33;
        }
        goto LABEL_131;
      default:
        uint64_t v32 = BYTE6(v18);
        goto LABEL_22;
    }
LABEL_6:
    sub_100353874((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
    sub_100353874((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
    v11 += v134;
    if (!--v10) {
      return 1;
    }
  }
  uint64_t v120 = v14;
  uint64_t v121 = *v16;
  sub_100097E24(v14, v15);
  sub_100097E24(v121, v18);
  sub_100097F20(v120, v15);
  uint64_t v122 = v121;
  unint64_t v123 = v18;
LABEL_132:
  sub_100097F20(v122, v123);
LABEL_133:
  sub_100353874((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
  sub_100353874((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for RDSavedURLAttachment);
  return 0;
}

uint64_t sub_1003519C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    int v3 = (uint64_t *)(a2 + 64);
    for (uint64_t i = (uint64_t *)(a1 + 64); *(i - 4) == *(v3 - 4); i += 5)
    {
      uint64_t v5 = *(i - 1);
      uint64_t v6 = *i;
      uint64_t v7 = *(v3 - 1);
      uint64_t v8 = *v3;
      BOOL v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      BOOL v10 = v5 == v7 && v6 == v8;
      if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v3 += 5;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100351A98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    while (1)
    {
      uint64_t v6 = v4 + 88 * v3;
      uint64_t v7 = *(void **)v6;
      uint64_t v8 = *(int64x2_t **)(v6 + 8);
      BOOL v9 = *(void **)(v6 + 16);
      double v10 = *(double *)(v6 + 24);
      char v11 = *(unsigned char *)(v6 + 32);
      uint64_t v13 = *(void *)(v6 + 40);
      uint64_t v12 = *(void *)(v6 + 48);
      uint64_t v14 = *(void *)(v6 + 56);
      unint64_t v15 = *(void **)(v6 + 64);
      uint64_t v17 = *(void **)(v6 + 72);
      uint64_t v16 = *(void **)(v6 + 80);
      uint64_t v18 = v5 + 88 * v3;
      uint64_t v20 = *(void **)v18;
      unint64_t v19 = *(int64x2_t **)(v18 + 8);
      uint64_t v21 = *(void **)(v18 + 16);
      double v22 = *(double *)(v18 + 24);
      int v23 = *(unsigned __int8 *)(v18 + 32);
      uint64_t v25 = *(void *)(v18 + 40);
      uint64_t v24 = *(void *)(v18 + 48);
      uint64_t v27 = *(void *)(v18 + 56);
      uint64_t v26 = *(void **)(v18 + 64);
      uint64_t v29 = *(void **)(v18 + 72);
      unint64_t v28 = *(void **)(v18 + 80);
      if (v7)
      {
        if (!v20) {
          return 0;
        }
        uint64_t v30 = v7[2];
        if (v30 != v20[2]) {
          return 0;
        }
        if (v30) {
          BOOL v31 = v7 == v20;
        }
        else {
          BOOL v31 = 1;
        }
        if (!v31)
        {
          if (v7[4] != v20[4]) {
            return 0;
          }
          uint64_t v32 = v7 + 5;
          uint64_t v33 = v20 + 5;
          for (uint64_t i = v30 - 1; i; --i)
          {
            uint64_t v36 = *v32++;
            uint64_t v35 = v36;
            uint64_t v37 = *v33++;
            if (v35 != v37) {
              return 0;
            }
          }
        }
      }
      else if (v20)
      {
        return 0;
      }
      if (v8)
      {
        if (!v19) {
          return 0;
        }
        uint64_t v38 = v8[1].i64[0];
        if (v38 != v19[1].i64[0]) {
          return 0;
        }
        if (v38 && v8 != v19)
        {
          uint64_t result = 0;
          if (v8[2].i64[0] != v19[2].i64[0] || v8[2].i64[1] != v19[2].i64[1]) {
            return result;
          }
          uint64_t v40 = v8 + 3;
          uint64_t v41 = v19 + 3;
          for (uint64_t j = v38 - 1; j; --j)
          {
            uint64_t result = 0;
            int64x2_t v43 = *v40++;
            int64x2_t v44 = v43;
            int64x2_t v45 = *v41++;
            *(int32x2_t *)v44.i8 = vmovn_s64(vceqq_s64(v44, v45));
            if ((v44.i32[0] & v44.i32[1] & 1) == 0) {
              return result;
            }
          }
        }
      }
      else if (v19)
      {
        return 0;
      }
      if (v9)
      {
        if (!v21) {
          return 0;
        }
        uint64_t v46 = v9[2];
        if (v46 != v21[2]) {
          return 0;
        }
        if (v46 && v9 != v21)
        {
          if (v9[4] != v21[4]) {
            return 0;
          }
          uint64_t v47 = v9 + 5;
          uint64_t v48 = v21 + 5;
          for (uint64_t k = v46 - 1; k; --k)
          {
            uint64_t result = 0;
            uint64_t v51 = *v47++;
            uint64_t v50 = v51;
            uint64_t v52 = *v48++;
            if (v50 != v52) {
              return result;
            }
          }
        }
      }
      else if (v21)
      {
        return 0;
      }
      uint64_t result = 0;
      if (v11)
      {
        if (!v23) {
          return result;
        }
      }
      else if ((v23 & 1) != 0 || v10 != v22)
      {
        return result;
      }
      if (v13 != v25 || v12 != v24 || v14 != v27) {
        return result;
      }
      if (v15)
      {
        if (!v26) {
          return 0;
        }
        uint64_t v53 = v15[2];
        if (v53 != v26[2]) {
          return 0;
        }
        if (v53 && v15 != v26)
        {
          if (v15[4] != v26[4]) {
            return 0;
          }
          uint64_t v54 = v15 + 5;
          uint64_t v55 = v26 + 5;
          for (uint64_t m = v53 - 1; m; --m)
          {
            uint64_t result = 0;
            uint64_t v58 = *v54++;
            uint64_t v57 = v58;
            uint64_t v59 = *v55++;
            if (v57 != v59) {
              return result;
            }
          }
        }
      }
      else if (v26)
      {
        return 0;
      }
      if (v17)
      {
        if (!v29) {
          return 0;
        }
        uint64_t v60 = v17[2];
        if (v60 != v29[2]) {
          return 0;
        }
        if (v60 && v17 != v29)
        {
          if (v17[4] != v29[4]) {
            return 0;
          }
          uint64_t v61 = v17 + 5;
          uint64_t v62 = v29 + 5;
          for (uint64_t n = v60 - 1; n; --n)
          {
            uint64_t result = 0;
            uint64_t v65 = *v61++;
            uint64_t v64 = v65;
            uint64_t v66 = *v62++;
            if (v64 != v66) {
              return result;
            }
          }
        }
      }
      else if (v29)
      {
        return 0;
      }
      if (v16)
      {
        if (!v28) {
          return 0;
        }
        uint64_t v67 = v16[2];
        if (v67 != v28[2]) {
          return 0;
        }
        if (v67 && v16 != v28)
        {
          if (v16[4] != v28[4]) {
            return 0;
          }
          uint64_t v68 = v16 + 5;
          unint64_t v69 = v28 + 5;
          for (iuint64_t i = v67 - 1; ii; --ii)
          {
            uint64_t result = 0;
            uint64_t v72 = *v68++;
            uint64_t v71 = v72;
            uint64_t v73 = *v69++;
            if (v71 != v73) {
              return result;
            }
          }
        }
      }
      else if (v28)
      {
        return 0;
      }
      ++v3;
      uint64_t result = 1;
      if (v3 == v2) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t sub_100351E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  uint64_t v5 = *(void *)(a1 + 48);
  double v6 = *(double *)(a1 + 40);
  uint64_t v7 = *(void **)(a2 + 32);
  double v8 = *(double *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  id v10 = *(id *)(a1 + 32);
  id v11 = v7;
  char v12 = static NSObject.== infix(_:_:)();

  uint64_t result = 0;
  if ((v12 & 1) != 0 && v6 == v8 && v5 == v9)
  {
    if (v2 == 1) {
      return 1;
    }
    uint64_t v14 = v2 - 2;
    unint64_t v15 = (double *)(a2 + 72);
    uint64_t v16 = (double *)(a1 + 72);
    do
    {
      double v17 = *v16;
      double v18 = *(v16 - 1);
      unint64_t v19 = (void *)*((void *)v15 - 2);
      double v20 = *(v15 - 1);
      double v21 = *v15;
      id v22 = *((id *)v16 - 2);
      id v23 = v19;
      unsigned __int8 v24 = static NSObject.== infix(_:_:)();

      if (*(void *)&v17 == *(void *)&v21) {
        uint64_t result = v24 & (v18 == v20);
      }
      else {
        uint64_t result = 0;
      }
      BOOL v26 = v14-- != 0;
      if (result != 1) {
        break;
      }
      v15 += 3;
      v16 += 3;
    }
    while (v26);
  }
  return result;
}

id sub_100351F70(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5 == v29) {
      goto LABEL_5;
    }
LABEL_49:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  if (v5 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_5:
  if (!v5) {
    goto LABEL_38;
  }
  uint64_t v6 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0) {
    uint64_t v6 = v3;
  }
  if (!v4) {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  }
  uint64_t v7 = a2 & 0xFFFFFFFFFFFFFF8;
  uint64_t v8 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  }
  if ((unint64_t)a2 >> 62) {
    uint64_t v8 = v9;
  }
  if (v6 == v8)
  {
LABEL_38:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_55;
  }
  unint64_t v30 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0) {
    goto LABEL_56;
  }
  for (id result = *(id *)(v3 + 32); ; id result = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
  {
    id v11 = result;
    if ((a2 & 0xC000000000000001) == 0) {
      break;
    }
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_22:
    uint64_t v13 = v12;
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    char v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0) {
      goto LABEL_49;
    }
    unint64_t v15 = v5 - 1;
    if (v5 == 1) {
      return (id)(v5 & 1);
    }
    if (((a2 | v3) & 0xC000000000000001) != 0)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v5 - 2;
      while (v15 != v16)
      {
        unint64_t v5 = v16 + 1;
        if (v30) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v18 = *(id *)(v3 + 40 + 8 * v16);
        }
        unint64_t v19 = v18;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v5 >= *(void *)(v7 + 16)) {
            goto LABEL_54;
          }
          id v20 = *(id *)(a2 + 40 + 8 * v16);
        }
        double v21 = v20;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if ((v5 & 1) != 0 && v17 != v16++) {
          continue;
        }
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = *(void *)(v7 + 16);
      if (v23 <= 1) {
        unint64_t v23 = 1;
      }
      unint64_t v24 = v23 - 1;
      uint64_t v25 = (void **)(v3 + 40);
      uint64_t v7 = a2 + 40;
      while (v15)
      {
        if (!v24) {
          goto LABEL_53;
        }
        uint64_t v27 = *v25++;
        BOOL v26 = v27;
        unint64_t v28 = *(void **)v7;
        v7 += 8;
        a2 = v26;
        uint64_t v3 = v28;
        unint64_t v5 = static NSObject.== infix(_:_:)();

        if (v5)
        {
          --v24;
          if (--v15) {
            continue;
          }
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    ;
  }
  if (*(void *)(v7 + 16))
  {
    id v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_10035225C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100914F00);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100914F00);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100352324()
{
  type metadata accessor for RDSynchronizedKeyValueStore();
  uint64_t v0 = swift_allocObject();
  id result = sub_1003523C0(0);
  static RDSynchronizedKeyValueStore.default = v0;
  return result;
}

uint64_t static RDSynchronizedKeyValueStore.default.getter()
{
  if (qword_100907300 != -1) {
    swift_once();
  }

  return swift_retain();
}

void *sub_1003523C0(id a1)
{
  uint64_t v2 = v1;
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  unint64_t v4 = (void *)qword_100942078;
  v2[5] = qword_100942078;
  if (a1)
  {
    id v5 = v4;
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = objc_allocWithZone((Class)NSUbiquitousKeyValueStore);
    id v7 = v4;
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    a1 = [v6 initWithStoreIdentifier:v8 type:2];

    id v5 = (id)v2[5];
  }
  v2[2] = a1;
  type metadata accessor for RDNotifydEventStream();
  swift_allocObject();
  uint64_t v9 = sub_1002237E0(v5, 1);
  uint64_t v10 = *(void *)(v9 + 16);
  *(void *)(v9 + 16) = sub_100352504;
  *(void *)(v9 + 24) = 0;
  sub_100096314(v10);
  v2[3] = v9;
  v2[4] = &off_1008BED88;
  return v2;
}

void sub_100352504()
{
  if (qword_1009072F8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100914F00);
  osos_log_type_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "RDSynchronizedKeyValueStore.ubkvsEventStream: received .ubiquitousKeyValueStoreDidChangeNotification", v2, 2u);
    swift_slowDealloc();
  }
}

Swift::Bool __swiftcall RDSynchronizedKeyValueStore.synchronize()()
{
  return [*(id *)(v0 + 16) synchronize];
}

uint64_t RDSynchronizedKeyValueStore.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t RDSynchronizedKeyValueStore.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

void RDSynchronizedKeyValueStore.ChangeEvent.Reason.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static RDSynchronizedKeyValueStore.ChangeEvent.Reason.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int RDSynchronizedKeyValueStore.ChangeEvent.Reason.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t RDSynchronizedKeyValueStore.ChangeEvent.reason.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t static RDSynchronizedKeyValueStore.ChangeEvent.__derived_struct_equals(_:_:)(void *a1, char a2, void *a3, char a4)
{
  return sub_10034F5D4(a1, a3) & (a2 == a4);
}

uint64_t sub_100352750(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  return sub_10034F5D4(*(void **)a1, *(void **)a2) & (v2 == v3);
}

uint64_t RDSynchronizedKeyValueStore.storeDidChangeExternally(label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v3 = sub_100094134(&qword_100914F18);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_100914F20);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v22 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self defaultCenter];
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v20;
  *(void *)(v15 + 24) = a2;
  sub_1003538D4((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  swift_bridgeObjectRetain();
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  sub_1000967F4(&qword_100914F28, &qword_100914F18);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1000967F4(&qword_100914F30, &qword_100914F20);
  uint64_t v16 = v22;
  uint64_t v17 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

void sub_100352B2C()
{
  sub_100353298();
  uint64_t v0 = 0xD000000000000025;
  unint64_t v1 = 0x80000001007D20B0;
  switch(v2)
  {
    case 1:
      uint64_t v0 = 0xD00000000000002ALL;
      uint64_t v3 = "NSUbiquitousKeyValueStoreInitialSyncChange";
      goto LABEL_5;
    case 2:
      uint64_t v0 = 0xD00000000000002DLL;
      uint64_t v3 = "NSUbiquitousKeyValueStoreQuotaViolationChange";
      goto LABEL_5;
    case 3:
      uint64_t v0 = 0xD000000000000026;
      uint64_t v3 = "NSUbiquitousKeyValueStoreAccountChange";
LABEL_5:
      unint64_t v1 = (unint64_t)(v3 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (qword_1009072F8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100914F00);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v8 = Optional.descriptionOrNil.getter();
    sub_1000C51B8(v8, v9, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v0, v1, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDSynchronizedKeyValueStore.storeDidChangeExternally[%{public}s]: Received notification {reason: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void static RDSynchronizedKeyValueStore.ChangeEvent.Reason.reason(from:)()
{
}

void sub_100352E18(uint64_t a1@<X8>)
{
  sub_100353298();
  unsigned __int8 v3 = v2;
  uint64_t v4 = Notification.userInfo.getter();
  if (!v4)
  {
    long long v16 = 0u;
    long long v17 = 0u;
LABEL_11:
    sub_1000966BC((uint64_t)&v16, &qword_100908190);
    unint64_t v9 = 0;
    goto LABEL_12;
  }
  uint64_t v5 = v4;
  *(void *)&long long v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v16 + 1) = v6;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v5 + 16) && (unint64_t v7 = sub_100307418((uint64_t)v15), (v8 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v5 + 56) + 32 * v7, (uint64_t)&v16);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v15);
  if (!*((void *)&v17 + 1)) {
    goto LABEL_11;
  }
  sub_100094134((uint64_t *)&unk_10090AFB0);
  if (swift_dynamicCast()) {
    unint64_t v9 = (void *)v15[0];
  }
  else {
    unint64_t v9 = 0;
  }
LABEL_12:
  if (v3 >= 2u)
  {
    if (v3 == 2)
    {
      if (qword_1009072F8 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10008E2DC(v10, (uint64_t)qword_100914F00);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDSynchronizedKeyValueStore.storeDidChangeExternally: Received NSUbiquitousKeyValueStoreQuotaViolationChange but remindd doesn't currently handle it", v13, 2u);
        swift_slowDealloc();
      }
    }
    id v14 = _swiftEmptyArrayStorage;
    if (v9) {
      id v14 = v9;
    }
  }
  else
  {
    *(void *)&long long v16 = v9;
    sub_100094134(&qword_100915008);
    Optional.tryUnwrap(_:file:line:)();
    swift_bridgeObjectRelease();
    id v14 = (void *)v15[0];
  }
  *(void *)a1 = v14;
  *(unsigned char *)(a1 + 8) = v3;
}

unint64_t _s7remindd27RDSynchronizedKeyValueStoreC11ChangeEventV6ReasonO05ubkvsfhC0AGSgSi_tcfC_0(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_100353258()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100353290()
{
}

void sub_100353298()
{
  uint64_t v1 = Notification.userInfo.getter();
  if (!v1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
LABEL_11:
    sub_1000966BC((uint64_t)&v17, &qword_100908190);
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  uint64_t v2 = v1;
  *(void *)&long long v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v17 + 1) = v3;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v2 + 16) && (unint64_t v4 = sub_100307418((uint64_t)v16), (v5 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v2 + 56) + 32 * v4, (uint64_t)&v17);
  }
  else
  {
    long long v17 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_100233FFC((uint64_t)v16);
  if (!*((void *)&v18 + 1)) {
    goto LABEL_11;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if (swift_dynamicCast()) {
    uint64_t v6 = (void *)v16[0];
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_12:
  v16[0] = v6;
  sub_100094134(&qword_100914FF8);
  Optional.tryUnwrap(_:file:line:)();

  if (!v0)
  {
    id v7 = v19;
    id v8 = [v19 integerValue];
    char v9 = 4;
    if ((unint64_t)v8 < 4) {
      char v9 = (char)v8;
    }
    LOBYTE(v19) = v9;
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v10._countAndFlagsBits = 0xD00000000000003DLL;
    v10._object = (void *)0x80000001007D1F90;
    String.append(_:)(v10);
    id v11 = [v7 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = v13;

    v15._countAndFlagsBits = v12;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    sub_100094134(&qword_100915000);
    Optional.tryUnwrap(_:file:line:)();
    swift_bridgeObjectRelease();
  }
}

unint64_t sub_100353528()
{
  unint64_t result = qword_100914F38;
  if (!qword_100914F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914F38);
  }
  return result;
}

uint64_t type metadata accessor for RDSynchronizedKeyValueStore()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RDStoreControllerNotificationCenter.EntityFilterOption()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSynchronizedKeyValueStore.ChangeEvent()
{
  return &type metadata for RDSynchronizedKeyValueStore.ChangeEvent;
}

unsigned char *storeEnumTagSinglePayload for RDSynchronizedKeyValueStore.ChangeEvent.Reason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003537D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSynchronizedKeyValueStore.ChangeEvent.Reason()
{
  return &type metadata for RDSynchronizedKeyValueStore.ChangeEvent.Reason;
}

uint64_t sub_10035380C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100353874(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003538D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100353920()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915010);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915010);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003539F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F3ED4(*a1, *a2);
}

Swift::Int sub_1003539FC()
{
  return Hasher._finalize()();
}

uint64_t sub_100353AA4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100353B38()
{
  return Hasher._finalize()();
}

unint64_t sub_100353BDC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100356584(*a1);
  *a2 = result;
  return result;
}

void sub_100353C0C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0x80000001007C6E10;
  unint64_t v5 = 0xD00000000000001DLL;
  if (v2 != 1)
  {
    unint64_t v5 = 0x6574616C706D6574;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x617461646174656DLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

void sub_100353C70(void *a1@<X8>)
{
  *a1 = &off_1008B64E0;
}

_UNKNOWN **static REMCDSavedReminder.recordTypes()()
{
  return &off_1008B6508;
}

uint64_t static REMCDSavedReminder.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDSavedReminder();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDSavedReminder.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      [v10 setAccount:a2];
      [v10 mergeDataFromRecord:a1 accountID:v12];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100907308 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100915010);
      id v14 = a2;
      Swift::String v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDSavedReminder.recordType()()
{
  uint64_t v0 = 0x6D65526465766153;
  uint64_t v1 = (void *)0xED00007265646E69;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDSavedReminder.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  NSString v4 = String._bridgeToObjectiveC()();
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for REMCDSavedReminder();
  [super mergeDataFromRecord:from.super.isa accountID:v4];

  id v5 = [(objc_class *)from.super.isa recordID];
  NSString v6 = [v5 recordName];

  if (!v6)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v7 = [v2 ckIdentifierFromRecordName:v6];

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v2 setCkIdentifier:v7];

  [v2 mergeDataRevertedLocallyMarkedForDeletion];
  [v2 mergeDataRefusedToMergeMarkedForDeletion];
  id v8 = v2;
  NSString v9 = from.super.isa;
  sub_1004CB724(v9, v8, v8, v9);
}

void sub_100354468(unsigned char *a1, void *a2, void *a3)
{
  id v71 = a2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  objc_super v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v20 = (char *)&v66 - v19;
  uint64_t v21 = type metadata accessor for RDSavedReminder();
  *(void *)&double v24 = __chkstk_darwin(v21).n128_u64[0];
  if (!*a1)
  {
    uint64_t v68 = v17;
    uint64_t v69 = v12;
    uint64_t v70 = v22;
    uint64_t v27 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v28 = [a3 encryptedValues:v24];
    swift_getObjectType();
    CKRecordKeyValueSetting.subscript.getter();
    swift_unknownObjectRelease();
    unint64_t v29 = v73;
    if (v73 >> 60 == 15)
    {
      Class isa = 0;
    }
    else
    {
      uint64_t v33 = v72;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F20(v33, v29);
    }
    id v34 = v71;
    uint64_t v35 = v14;
    [v71 setMetadata:isa];

    id v36 = [v34 metadata];
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_100356960(&qword_100911108, (void (*)(uint64_t))type metadata accessor for RDSavedReminder);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      id v71 = v38;
      swift_release();
      sub_1000CAA4C((uint64_t)v27, (uint64_t)v20);
      uint64_t v44 = v69;
      uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
      int v45 = v67(v20, 1, v11);
      if (v45 == 1)
      {
        Class v46 = 0;
      }
      else
      {
        Class v46 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v20, v11);
      }
      uint64_t v48 = v11;
      [v34 setCreationDate:v46];

      uint64_t v49 = v70;
      swift_bridgeObjectRetain();
      NSString v50 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v34 setTitle:v50];

      if (*(void *)&v27[*(int *)(v49 + 44)] >= 0x7FFFuLL) {
        uint64_t v51 = 0x7FFFLL;
      }
      else {
        uint64_t v51 = *(void *)&v27[*(int *)(v49 + 44)];
      }
      id v52 = [objc_allocWithZone((Class)NSNumber) initWithShort:v51];
      [v34 setPriority:v52];

      uint64_t v53 = (objc_class *)sub_10014A580();
      Class v54 = v53;
      if (v53)
      {
        id v55 = [(objc_class *)v53 date];

        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        size_t v56 = v68;
        uint64_t v57 = v69;
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v68, v35, v48);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v56, 0, 1, v48);
        if (v67(v56, 1, v48) == 1)
        {
          Class v54 = 0;
        }
        else
        {
          Class v54 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v48);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v68, 1, 1, v11);
      }
      uint64_t v58 = (uint64_t)v71;
      [v34 setDisplayDateDate:v54];

      id v59 = sub_10014A580();
      if (v59)
      {
        uint64_t v60 = v59;
        id v61 = [v59 isAllDay];
      }
      else
      {
        id v61 = 0;
      }
      [v34 setDisplayDateIsAllDay:v61];
      uint64_t v62 = *(void *)&v27[*(int *)(v70 + 36)];
      if (v62) {
        BOOL v63 = *(void *)(v62 + 16) != 0;
      }
      else {
        BOOL v63 = 0;
      }
      [v34 setHasHashtags:v63];
      uint64_t v64 = &v27[*(int *)(v70 + 20)];
      if (*(void *)v64)
      {
        if (*(void *)(*((void *)v64 + 1) + 16)) {
          BOOL v65 = 1;
        }
        else {
          BOOL v65 = *(void *)(*((void *)v64 + 3) + 16) != 0;
        }
      }
      else
      {
        BOOL v65 = 0;
      }
      [v34 setHasLocationTriggersOrVehicleEventTriggers:v65];
      sub_100097F34(v58, v40);
      sub_1000D575C((uint64_t)v27);
    }
    else
    {
      [v34 setCreationDate:0];
      [v34 setTitle:0];
      [v34 setPriority:0];
      [v34 setDisplayDateDate:0];
      [v34 setDisplayDateIsAllDay:0];
      [v34 setHasHashtags:0];
      [v34 setHasLocationTriggersOrVehicleEventTriggers:0];
    }
    return;
  }
  if (*a1 != 1)
  {
    if (CKRecord.subscript.getter())
    {
      self;
      BOOL v31 = (void *)swift_dynamicCastObjCClass();
      id v32 = v71;
      if (!v31) {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      BOOL v31 = 0;
      id v32 = v71;
    }
    id v41 = sub_1000C4990(v31);

    if (v41)
    {
      type metadata accessor for REMCDTemplate();
      uint64_t v42 = (void *)swift_dynamicCastClass();
      if (v42)
      {
LABEL_21:
        id v71 = v42;
        [v32 setTemplate:];
        id v43 = v71;

        return;
      }
    }
    uint64_t v42 = 0;
    goto LABEL_21;
  }
  uint64_t v25 = CKRecord.subscript.getter();
  if (!v25) {
    goto LABEL_7;
  }
  uint64_t v74 = v25;
  sub_100094134(&qword_100909AB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v26 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v7, 1, v8) == 1)
  {
    sub_1001260DC((uint64_t)v7);
LABEL_7:
    [v71 setParentSavedReminderIdentifier:0];
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v10, v7, v8);
  Class v47 = UUID._bridgeToObjectiveC()().super.isa;
  [v71 setParentSavedReminderIdentifier:v47];

  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
}

CKRecord_optional __swiftcall REMCDSavedReminder.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v78 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  NSString v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v9 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v11 = (char *)&v70 - v10;
  if (objc_msgSend(v1, "isOwnedByCurrentUser", v9))
  {
    uint64_t v12 = (objc_class *)type metadata accessor for REMCDSavedReminder();
    v87.receiver = v1;
    v87.super_class = v12;
    id v13 = [[super newlyCreatedRecord];
    uint64_t v16 = v13;
    if (v13)
    {
      uint64_t v17 = 0;
      uint64_t v82 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
      uint64_t v83 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      uint64_t v76 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v77 = (void (**)(char *, char *, uint64_t))(v3 + 16);
      unint64_t v81 = 0x80000001007D20E0;
      *(void *)&long long v15 = 136446210;
      long long v74 = v15;
      unint64_t v73 = (char *)&type metadata for Any + 8;
      uint64_t v75 = v7;
      id v79 = v13;
      uint64_t v80 = v11;
      uint64_t v72 = v1;
      do
      {
        if (*((unsigned char *)&off_1008B6568 + v17 + 32))
        {
          if (*((unsigned char *)&off_1008B6568 + v17 + 32) == 1)
          {
            id v24 = [v1 parentSavedReminderIdentifier];
            if (v24)
            {
              uint64_t v25 = v24;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v26 = 0;
            }
            else
            {
              uint64_t v26 = 1;
            }
            (*v83)(v7, v26, 1, v2);
            sub_1000F44F4((uint64_t)v7, (uint64_t)v11);
            if ((*v82)(v11, 1, v2))
            {
              sub_1001260DC((uint64_t)v11);
              long long v84 = 0u;
              long long v85 = 0u;
              uint64_t v86 = 0;
            }
            else
            {
              id v43 = v78;
              (*v77)(v78, v11, v2);
              sub_1001260DC((uint64_t)v11);
              uint64_t v44 = UUID.uuidString.getter();
              uint64_t v46 = v45;
              (*v76)(v43, v2);
              *((void *)&v85 + 1) = &type metadata for String;
              uint64_t v86 = &protocol witness table for String;
              *(void *)&long long v84 = v44;
              *((void *)&v84 + 1) = v46;
            }
            sub_10012451C();
            CKRecordKeyValueSetting.subscript.setter();
          }
          else if ([v1 markedForDeletion])
          {
            if (qword_100907308 != -1) {
              swift_once();
            }
            uint64_t v27 = type metadata accessor for Logger();
            sub_10008E2DC(v27, (uint64_t)qword_100915010);
            id v28 = v1;
            unint64_t v29 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v29, v30))
            {
              uint64_t v31 = swift_slowAlloc();
              *(void *)&long long v84 = swift_slowAlloc();
              *(_DWORD *)uint64_t v31 = v74;
              id v32 = [v28 remObjectID];
              if (v32)
              {
                uint64_t v33 = v32;
                uint64_t v34 = v2;
                id v35 = [v32 description];

                uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v38 = v37;

                uint64_t v2 = v34;
                uint64_t v1 = v72;
              }
              else
              {
                unint64_t v38 = 0xE300000000000000;
                uint64_t v36 = 7104878;
              }
              *(void *)(v31 + 4) = sub_1000C51B8(v36, v38, (uint64_t *)&v84);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMCDSavedReminder+CloudKit: newlyCreatedRecord() (key=.template) unsetting template CK reference as the saved reminder is markedForDeletion {savedReminder: %{public}s}", (uint8_t *)v31, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              NSString v7 = v75;
            }
            else
            {
            }
            uint64_t v16 = v79;
            CKRecord.subscript.setter();
            uint64_t v11 = v80;
          }
          else
          {
            id v39 = [v1 template];
            if (v39)
            {
              unint64_t v40 = v39;
              id v41 = [v39 recordID];
              id v42 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v41];

              CKRecord.subscript.setter();
            }
            else
            {
              if (qword_100907308 != -1) {
                swift_once();
              }
              uint64_t v47 = type metadata accessor for Logger();
              sub_10008E2DC(v47, (uint64_t)qword_100915010);
              id v48 = v1;
              uint64_t v49 = Logger.logObject.getter();
              os_log_type_t v50 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v49, v50))
              {
                uint64_t v51 = swift_slowAlloc();
                uint64_t v71 = swift_slowAlloc();
                *(void *)&long long v84 = v71;
                *(_DWORD *)uint64_t v51 = v74;
                id v52 = [v48 remObjectID];
                if (v52)
                {
                  uint64_t v53 = v52;
                  id v54 = [v52 description];

                  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v57 = v56;
                }
                else
                {
                  unint64_t v57 = 0xE300000000000000;
                  uint64_t v55 = 7104878;
                }
                *(void *)(v51 + 4) = sub_1000C51B8(v55, v57, (uint64_t *)&v84);

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "REMCDSavedReminder+CloudKit: Unexpectedly got cdSavedReminder.template == nil in newlyCreatedRecord() (key=.template) {savedReminder: %{public}s}", (uint8_t *)v51, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                NSString v7 = v75;
              }
              else
              {
              }
              uint64_t v16 = v79;
              uint64_t v11 = v80;
            }
          }
        }
        else
        {
          id v18 = [v16 encryptedValues];
          id v19 = [v1 metadata];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v23 = v22;

            *((void *)&v85 + 1) = &type metadata for Data;
            uint64_t v86 = &protocol witness table for Data;
            *(void *)&long long v84 = v21;
            *((void *)&v84 + 1) = v23;
          }
          else
          {
            uint64_t v86 = 0;
            long long v84 = 0u;
            long long v85 = 0u;
          }
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
        }
        ++v17;
      }
      while (v17 != 3);
    }
  }
  else
  {
    if (qword_100907308 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_10008E2DC(v58, (uint64_t)qword_100915010);
    id v59 = v1;
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v84 = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136446210;
      id v63 = [v59 remObjectID];
      if (v63)
      {
        uint64_t v64 = v63;
        id v65 = [v63 description];

        uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v68 = v67;
      }
      else
      {
        uint64_t v66 = 7104878;
        unint64_t v68 = 0xE300000000000000;
      }
      uint64_t v88 = sub_1000C51B8(v66, v68, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "REMCDSavedReminder will not be used to represent a reminder in a public template, which is fetched from a template's public link, and is not expected to be shared. It shouldn't be uploaded for non-owner (savedReminderID: %{public}s)", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v16 = 0;
  }
  uint64_t v69 = (objc_class *)v16;
  result.value.super.Class isa = v69;
  result.is_nil = v14;
  return result;
}

Swift::Void __swiftcall REMCDSavedReminder.fixBrokenReferences()()
{
  if (qword_100907308 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915010);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_stringFromDate_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = 7104878;
  uint64_t v7 = swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  *(_DWORD *)uint64_t v7 = 136446466;
  id v8 = [v2 remObjectID];
  if (v8)
  {
    double v9 = v8;
    id v10 = [v8 description];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;
  }
  else
  {
    unint64_t v13 = 0xE300000000000000;
    uint64_t v11 = 7104878;
  }
  sub_1000C51B8(v11, v13, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 12) = 2082;
  id v14 = [v2 template];
  if (!v14) {
    goto LABEL_12;
  }
  long long v15 = v14;
  id v16 = [v14 remObjectID];
  if (!v16)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    goto LABEL_13;
  }
  uint64_t v17 = v16;
  id v18 = [v16 description];

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

LABEL_13:
  uint64_t v5 = &selRef_stringFromDate_;
  sub_1000C51B8(v6, v20, &v42);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for saved reminder {savedReminderID: %{public}s, templateID: %{public}s}", (uint8_t *)v7, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v21 = [v2 v5[52]];
  if (!v21) {
    return;
  }
  uint64_t v22 = v21;
  if ([v21 markedForDeletion]
    && ([v2 markedForDeletion] & 1) == 0)
  {
    id v23 = v2;
    id v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v25))
    {

LABEL_28:
      [v23 markForDeletion];
      goto LABEL_29;
    }
    uint64_t v26 = v5;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446466;
    id v28 = [v23 remObjectID];
    if (v28)
    {
      unint64_t v29 = v28;
      id v30 = [v28 description];

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;
    }
    else
    {
      unint64_t v33 = 0xE300000000000000;
      uint64_t v31 = 7104878;
    }
    sub_1000C51B8(v31, v33, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2082;
    id v34 = [v23 v26[52]];
    if (v34)
    {
      id v35 = v34;
      id v36 = [v34 remObjectID];
      if (v36)
      {
        unint64_t v37 = v36;
        id v38 = [v36 description];

        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;

LABEL_27:
        sub_1000C51B8(v39, v41, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Template is marked for deletion but saved reminder is not {savedReminderID: %{public}s, templateID: %{public}s}", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_28;
      }
    }
    unint64_t v41 = 0xE300000000000000;
    uint64_t v39 = 7104878;
    goto LABEL_27;
  }
LABEL_29:
  [v22 forcePushToCloud];
}

Swift::Void __swiftcall REMCDSavedReminder.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907308 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915010);
  id v7 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915028);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void *REMCDSavedReminder.objectsToBeDeletedBeforeThisObject()()
{
  id v1 = [v0 attachments];
  if (v1)
  {
    id v2 = v1;
    type metadata accessor for REMCDSavedAttachment();
    sub_100356960((unint64_t *)&unk_100910220, (void (*)(uint64_t))type metadata accessor for REMCDSavedAttachment);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    os_log_type_t v4 = sub_10020B888(v3);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1002007C4((unint64_t)v4);
    swift_release();
    sub_100200B74(v5);
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100356584(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6478, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t _s7remindd18REMCDSavedReminderC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907308 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915010);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915028);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd18REMCDSavedReminderC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907308 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100915010);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100915028);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_100356960(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s6FieldsOwst_3(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100356A74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_3()
{
  return &_s6FieldsON_3;
}

unint64_t sub_100356AAC(uint64_t a1)
{
  unint64_t result = sub_100356AD4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100356AD4()
{
  unint64_t result = qword_100915030;
  if (!qword_100915030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915030);
  }
  return result;
}

unint64_t sub_100356B28(uint64_t a1)
{
  unint64_t result = sub_100356B50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100356B50()
{
  unint64_t result = qword_100915038;
  if (!qword_100915038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915038);
  }
  return result;
}

unint64_t sub_100356BA8()
{
  unint64_t result = qword_100915040;
  if (!qword_100915040)
  {
    sub_100096058(&qword_100915048);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915040);
  }
  return result;
}

unint64_t sub_100356C08()
{
  unint64_t result = qword_100915050;
  if (!qword_100915050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915050);
  }
  return result;
}

uint64_t sub_100356C5C()
{
  return 0x4E79616C70736964;
}

uint64_t sub_100356C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100356D2C(uint64_t a1)
{
  unint64_t v2 = sub_100357348();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100356D68(uint64_t a1)
{
  unint64_t v2 = sub_100357348();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100356DA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_100915068);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100357348();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_100356F1C(void *a1)
{
  uint64_t v2 = sub_100094134(&qword_100915078);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100357348();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int sub_100357054()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1003570D4()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10035715C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1003571D8(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

uint64_t getEnumTagSinglePayload for RDSavedTemplateSection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedTemplateSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedTemplateSection()
{
  return &type metadata for RDSavedTemplateSection;
}

unint64_t sub_1003572F4()
{
  unint64_t result = qword_100915060;
  if (!qword_100915060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915060);
  }
  return result;
}

unint64_t sub_100357348()
{
  unint64_t result = qword_100915070;
  if (!qword_100915070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915070);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RDSavedTemplateSection.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100357438);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedTemplateSection.CodingKeys()
{
  return &type metadata for RDSavedTemplateSection.CodingKeys;
}

unint64_t sub_100357474()
{
  unint64_t result = qword_100915080;
  if (!qword_100915080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915080);
  }
  return result;
}

unint64_t sub_1003574CC()
{
  unint64_t result = qword_100915088;
  if (!qword_100915088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915088);
  }
  return result;
}

unint64_t sub_100357524()
{
  unint64_t result = qword_100915090;
  if (!qword_100915090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100915090);
  }
  return result;
}

uint64_t sub_100357578()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100915098);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100915098);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100357640(uint64_t a1, uint64_t (*a2)(void, void), uint64_t a3)
{
  uint64_t v4 = (uint64_t)v3;
  uint64_t v130 = a2;
  uint64_t v131 = a3;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for RDPublicTemplate();
  __chkstk_darwin(v7 - 8);
  uint64_t v121 = (uint64_t *)&v115[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for UUID();
  os_log_t v128 = *(os_log_t *)(v9 - 8);
  uint64_t v129 = v9;
  __chkstk_darwin(v9);
  uint64_t v136 = &v115[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = &v115[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v120 = &v115[-v16];
  __chkstk_darwin(v17);
  uint64_t v135 = &v115[-v18];
  __chkstk_darwin(v19);
  __int16 v137 = &v115[-v20];
  __chkstk_darwin(v21);
  id v23 = &v115[-v22];
  if (qword_100907310 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_10008E2DC(v24, (uint64_t)qword_100915098);
  swift_retain_n();
  uint64_t v125 = (void *)v25;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  uint64_t v133 = v26;
  BOOL v29 = os_log_type_enabled(v26, v27);
  unint64_t v123 = v6;
  uint64_t v122 = v14;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    id v126 = (unsigned char *)swift_slowAlloc();
    char v138 = v126;
    uint64_t v139 = (uint64_t)v6;
    *(_DWORD *)uint64_t v30 = 136446978;
    uint64_t v132 = v11;
    swift_getMetatypeMetadata();
    uint64_t v127 = a1;
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v139 = sub_1000C51B8(v32, v33, (uint64_t *)&v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    LODWORD(v124) = v28;
    uint64_t v34 = v12;
    id v35 = v23;
    *(_WORD *)(v30 + 12) = 2114;
    id v36 = *(void **)(v4 + 16);
    uint64_t v139 = (uint64_t)v36;
    id v37 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v36;
    swift_release_n();
    *(_WORD *)(v30 + 22) = 2114;
    id v38 = *(void **)(v4 + 24);
    uint64_t v139 = (uint64_t)v38;
    id v39 = v38;
    uint64_t v11 = v132;
    uint64_t v6 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31[1] = v38;
    id v23 = v35;
    uint64_t v12 = v34;
    swift_release_n();
    *(_WORD *)(v30 + 32) = 2048;
    swift_release();
    uint64_t v139 = 1000;
    a1 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    unint64_t v40 = v133;
    _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v124, "%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}", (uint8_t *)v30, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  unint64_t v41 = *(void **)(v4 + 16);
  uint64_t v133 = *(NSObject **)(v4 + 24);
  uint64_t v42 = v135;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  uint64_t v132 = v12;
  id v43 = *(unsigned char **)(v12 + 8);
  uint64_t v127 = v12 + 8;
  id v126 = v43;
  ((void (*)(unsigned char *, uint64_t))v43)(v42, v11);
  id v44 = [v41 uuid];
  uint64_t v45 = v136;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  id v46 = sub_1003CFCE4(v45, a1);
  uint64_t v134 = v23;
  id v124 = v41;
  id v119 = v46;
  uint64_t v47 = (uint64_t)v6;
  uint64_t v49 = (objc_class *)sub_1002E4598();
  os_log_type_t v50 = (void *)sub_1002E3C78(v41, a1, v49, 0);
  uint64_t v51 = (void *)a1;
  swift_bridgeObjectRelease();
  id v52 = v121;
  sub_10051B034((uint64_t)v136, (uint64_t)v137, v133, (char *)0x3E8, v121);

  id v77 = v119;
  sub_10062CF9C(v52);
  uint64_t v78 = v47;
  id v79 = sub_10062D2FC();
  uint64_t v80 = v132;
  if (!v79)
  {
    uint64_t v101 = v47;
    type metadata accessor for REMCDPublicTemplate();
    int v102 = v77;
    uint64_t v103 = self;
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v105 = String._bridgeToObjectiveC()();
    id v106 = [v103 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v105];

    swift_willThrow();
    uint64_t v107 = v132;

    goto LABEL_17;
  }
  unint64_t v81 = v79;
  uint64_t v139 = 0;
  unsigned __int8 v82 = [v51 save:&v139];
  id v83 = (id)v139;
  if ((v82 & 1) == 0)
  {
    uint64_t v101 = v47;
    id v108 = (id)v139;
    id v106 = (id)_convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v109 = v81;
    uint64_t v107 = v132;

LABEL_17:
    sub_1003589D0((uint64_t)v121);
    uint64_t v110 = (uint64_t)v134;
    ((void (*)(unsigned char *, uint64_t))v128[1].isa)(v136, v129);
    uint64_t v53 = v122;
    (*(void (**)(void *, uint64_t, uint64_t))(v107 + 16))(v122, v110, v11);
    id v54 = v124;
    swift_errorRetain();
    id v55 = v54;
    swift_errorRetain();
    unint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v60 = (void *)swift_slowAlloc();
      uint64_t v125 = v60;
      uint64_t v136 = (unsigned char *)swift_slowAlloc();
      char v138 = v136;
      uint64_t v139 = v101;
      *(_DWORD *)uint64_t v59 = 136446978;
      LODWORD(v129) = v58;
      os_log_t v128 = v56;
      swift_getMetatypeMetadata();
      uint64_t v61 = v11;
      uint64_t v62 = String.init<A>(describing:)();
      uint64_t v139 = sub_1000C51B8(v62, v63, (uint64_t *)&v138);
      uint64_t v132 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2114;
      uint64_t v139 = (uint64_t)v55;
      id v64 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v60 = v55;

      uint64_t v11 = v61;
      uint64_t v65 = (uint64_t)v123;
      *(_WORD *)(v59 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v66 = Error.rem_errorDescription.getter();
      uint64_t v139 = sub_1000C51B8(v66, v67, (uint64_t *)&v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v59 + 32) = 2048;
      unint64_t v68 = v135;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v70 = v69;
      uint64_t v71 = v68;
      uint64_t v72 = (void (*)(void *, uint64_t))v126;
      ((void (*)(unsigned char *, uint64_t))v126)(v71, v61);
      uint64_t v139 = v70;
      uint64_t v4 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v72(v53, v61);
      os_log_t v73 = v128;
      _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "%{public}s: Failed to create preview of template's public content. {templateObjectID: %{public}@, privacy: .public), error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v59, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      long long v74 = (void (*)(uint64_t, uint64_t))v72;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      long long v74 = (void (*)(uint64_t, uint64_t))v126;
      ((void (*)(void *, uint64_t))v126)(v53, v11);

      uint64_t v65 = v101;
    }
    swift_errorRetain();
    uint64_t v75 = (uint64_t)v134;
    sub_1003584F8((uint64_t)v106, 1, v55, v133, v4, (uint64_t)v134, v130, v131, v65);
    swift_errorRelease();
    swift_errorRelease();
    v74(v75, v11);
    return ((uint64_t (*)(unsigned char *, uint64_t))v74)(v137, v11);
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 16))(v120, v134, v11);
  long long v84 = v81;
  id v85 = v83;
  uint64_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  int v88 = v87;
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v89 = swift_slowAlloc();
    uint64_t v90 = (void *)swift_slowAlloc();
    uint64_t v117 = v90;
    uint64_t v122 = (void *)swift_slowAlloc();
    uint64_t v139 = (uint64_t)v122;
    *(_DWORD *)uint64_t v89 = 136446722;
    os_log_t v118 = v86;
    uint64_t v91 = sub_1000D82B8();
    char v138 = (unsigned char *)sub_1000C51B8(v91, v92, &v139);
    uint64_t v132 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v89 + 12) = 2114;
    char v138 = v84;
    uint64_t v93 = v84;
    int v116 = v88;
    id v94 = v93;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v90 = v81;

    *(_WORD *)(v89 + 22) = 2048;
    uint64_t v125 = v84;
    uint64_t v95 = v135;
    Date.init()();
    uint64_t v96 = v120;
    Date.timeIntervalSince(_:)();
    uint64_t v98 = v97;
    uint64_t v99 = (void (*)(unsigned char *, uint64_t))v126;
    ((void (*)(unsigned char *, uint64_t))v126)(v95, v11);
    char v138 = v98;
    uint64_t v4 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v99(v96, v11);
    os_log_t v100 = v118;
    _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v116, "%{public}s: Saved preview in cache {previewObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v89, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v78 = v47;
    swift_slowDealloc();

    long long v84 = v125;
  }
  else
  {

    uint64_t v99 = (void (*)(unsigned char *, uint64_t))v126;
    ((void (*)(unsigned char *, uint64_t))v126)(v120, v11);
  }
  id v111 = v124;
  uint64_t v112 = v84;
  int64_t v113 = v111;
  uint64_t v114 = (uint64_t)v134;
  sub_1003584F8((uint64_t)v81, 0, v113, v133, v4, (uint64_t)v134, v130, v131, v78);

  sub_1003589D0((uint64_t)v121);
  v99((unsigned char *)v114, v11);
  ((void (*)(unsigned char *, uint64_t))v128[1].isa)(v136, v129);
  return ((uint64_t (*)(unsigned char *, uint64_t))v99)(v137, v11);
}

uint64_t sub_1003584F8(uint64_t a1, int a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void), uint64_t a8, uint64_t a9)
{
  uint64_t v51 = a8;
  uint64_t v53 = a5;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v50 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v54 = (char *)&v45 - v19;
  if (qword_100907310 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_10008E2DC(v20, (uint64_t)qword_100915098);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v54, a6, v15);
  id v21 = a3;
  id v22 = a4;
  swift_retain_n();
  id v23 = v21;
  uint64_t v52 = v15;
  id v24 = v23;
  id v25 = v22;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  int v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    int v46 = v28;
    uint64_t v29 = swift_slowAlloc();
    os_log_t v45 = v26;
    uint64_t v30 = v29;
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    uint64_t v55 = v47;
    uint64_t v56 = a9;
    *(_DWORD *)uint64_t v30 = 136447234;
    swift_getMetatypeMetadata();
    uint64_t v49 = a7;
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v56 = sub_1000C51B8(v32, v33, &v55);
    int v48 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2114;
    uint64_t v56 = (uint64_t)v24;
    id v34 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v24;

    *(_WORD *)(v30 + 22) = 2114;
    uint64_t v56 = (uint64_t)v25;
    id v35 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v31[1] = v25;

    a7 = v49;
    *(_WORD *)(v30 + 32) = 2048;
    swift_release();
    uint64_t v56 = 1000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v30 + 42) = 2048;
    id v36 = v50;
    Date.init()();
    id v37 = v54;
    Date.timeIntervalSince(_:)();
    uint64_t v39 = v38;
    unint64_t v40 = *(void (**)(char *, uint64_t))(v16 + 8);
    unint64_t v41 = v36;
    uint64_t v42 = v52;
    v40(v41, v52);
    uint64_t v56 = v39;
    LOBYTE(a2) = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v40(v37, v42);
    os_log_t v43 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}", (uint8_t *)v30, 0x34u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v54, v52);
  }
  return a7(a1, a2 & 1);
}

uint64_t sub_10035896C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationCreateTemplatePublicContentPreview()
{
  return self;
}

uint64_t sub_1003589D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDPublicTemplate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100358A2C(void *a1)
{
  id v4 = *v1;
  id v50 = 0;
  id v5 = [a1 remObjectIDWithError:&v50];
  if (!v5)
  {
    id v22 = v50;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v4;
  }
  uint64_t v6 = v5;
  id v7 = v50;
  id v8 = [a1 account];
  if (!v8
    || (v9 = v8, id v10 = [v8 remObjectID], v9, !v10))
  {
    if (qword_100907320 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_100915180);
    id v10 = v6;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      id v50 = v4;
      uint64_t v51 = v47;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v19 = String.init<A>(describing:)();
      id v50 = (id)sub_1000C51B8(v19, v20, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2112;
      id v50 = v10;
      id v21 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v6;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: cdListSection.account is nil {cdListSection.remObjectID: %@}", (uint8_t *)v17, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v23 = self;
    type metadata accessor for REMCDListSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v4 = String._bridgeToObjectiveC()();
    [v23 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v4];

    swift_willThrow();
    goto LABEL_14;
  }
  id v11 = [a1 displayName];
  if (!v11)
  {
    if (qword_100907320 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_100915180);
    id v27 = v6;
    int v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      int v46 = (void *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      id v50 = v4;
      uint64_t v51 = v48;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_getMetatypeMetadata();
      uint64_t v49 = v6;
      uint64_t v31 = String.init<A>(describing:)();
      id v50 = (id)sub_1000C51B8(v31, v32, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2112;
      id v50 = v27;
      unint64_t v33 = v28;
      id v34 = v27;
      id v35 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v46 = v49;

      id v27 = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, v29, "%s: cdListSection.displayName is nil {cdListSection.remObjectID: %@}", (uint8_t *)v30, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v44 = self;
    type metadata accessor for REMCDListSection();
    uint64_t v45 = swift_getObjCClassFromMetadata();
    id v4 = String._bridgeToObjectiveC()();
    [v44 unexpectedNilPropertyWithClass:v45 property:v4];

    swift_willThrow();
LABEL_14:

    return v4;
  }
  uint64_t v12 = v11;
  id v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = sub_100359DE0(a1, v6, v10, (uint64_t)v4);
  if (v2)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    id v36 = v13;
    swift_bridgeObjectRelease();
    id v37 = [a1 canonicalName];
    [v36 setCanonicalName:v37];

    id v38 = v36;
    [v38 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];

    id v39 = v38;
    [v39 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];

    [v39 setResolutionTokenMap:0];
    id v4 = v39;
    Class isa = (Class)[a1 resolutionTokenMapData];
    if (isa)
    {
      uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100097F34(v41, v43);
    }
    [v4 setResolutionTokenMapData:isa];
  }
  return v4;
}

uint64_t sub_1003591C4(uint64_t a1)
{
  return sub_100156B24(a1, qword_100915168, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1003591F0(uint64_t a1)
{
  return sub_100156B24(a1, qword_100915180, &qword_100907840, (uint64_t)qword_100942508);
}

uint64_t sub_10035921C(unsigned __int8 *a1, char *a2)
{
  return sub_1002F18E8(*a1, *a2);
}

Swift::Int sub_100359228()
{
  return sub_1005954C8();
}

uint64_t sub_100359230()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100359330()
{
  return sub_1002F1200();
}

unint64_t sub_100359338@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10035A3C0(*a1);
  *a2 = result;
  return result;
}

void sub_100359368(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x44497463656A626FLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x80000001007C63B0;
      unint64_t v3 = 0xD000000000000017;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "creationDate");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x4E79616C70736964;
      *(void *)(a1 + 8) = 0xEB00000000656D61;
      break;
    case 4:
      strcpy((char *)a1, "canonicalName");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

void sub_100359444(void *a1@<X8>)
{
  *a1 = &off_1008B6590;
}

unint64_t sub_100359454@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10035A3C0(a1);
  *a2 = result;
  return result;
}

unint64_t sub_10035947C()
{
  unint64_t result = 0x44497463656A626FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 3:
      unint64_t result = 0x4E79616C70736964;
      break;
    case 4:
      unint64_t result = 0x6163696E6F6E6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100359548(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1002F14B8(*a1, *a2);
}

Swift::Int sub_100359554()
{
  return Hasher._finalize()();
}

uint64_t sub_1003595DC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100359650()
{
  return Hasher._finalize()();
}

uint64_t sub_1003596D4@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B28A0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_100359734(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x49746E756F636361;
  if (*v1) {
    uint64_t v2 = 0x4449746E65726170;
  }
  unint64_t v3 = 0xE900000000000044;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100359778(void *a1@<X8>)
{
  *a1 = &off_1008B65B8;
}

uint64_t sub_100359788@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B28A0, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_1003597EC()
{
  if (*v0) {
    return 0x4449746E65726170;
  }
  else {
    return 0x49746E756F636361;
  }
}

void *sub_10035982C()
{
  uint64_t result = sub_10035984C();
  qword_100942118 = (uint64_t)result;
  return result;
}

void *sub_10035984C()
{
  unint64_t v5 = 0;
  uint64_t v6 = _swiftEmptyDictionarySingleton;
  uint64_t v7 = (uint64_t)&off_1008B5000;
  id v8 = &off_1008B59C8;
  uint64_t v9 = 1;
  do
  {
    if (v5 >= 5)
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    unint64_t v4 = v5 + 1;
    uint64_t v0 = 0xE800000000000000;
    uint64_t v1 = 0x44497463656A626FLL;
    switch(*((unsigned char *)&off_1008B59C8 + v5 + 32))
    {
      case 1:
        uint64_t v0 = 0x80000001007C63B0;
        uint64_t v1 = 0xD000000000000017;
        break;
      case 2:
        uint64_t v0 = 0xEC00000065746144;
        uint64_t v1 = 0x6E6F697461657263;
        break;
      case 3:
        uint64_t v0 = 0xEB00000000656D61;
        uint64_t v1 = 0x4E79616C70736964;
        break;
      case 4:
        uint64_t v0 = 0xED0000656D614E6CLL;
        uint64_t v1 = 0x6163696E6F6E6163;
        break;
      default:
        break;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v46 = _swiftEmptyDictionarySingleton;
    unint64_t v3 = sub_1001806F8(v1, v0);
    uint64_t v12 = _swiftEmptyDictionarySingleton[2];
    BOOL v13 = (v11 & 1) == 0;
    uint64_t v14 = v12 + v13;
    if (__OFADD__(v12, v13)) {
      goto LABEL_30;
    }
    LOBYTE(v2) = v11;
    if (_swiftEmptyDictionarySingleton[3] >= v14)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v11) {
          goto LABEL_2;
        }
      }
      else
      {
        sub_100318A14();
        if (v2) {
          goto LABEL_2;
        }
      }
    }
    else
    {
      sub_10030E654(v14, isUniquelyReferenced_nonNull_native);
      unint64_t v15 = sub_1001806F8(v1, v0);
      if ((v2 & 1) != (v16 & 1)) {
        goto LABEL_51;
      }
      unint64_t v3 = v15;
      if (v2)
      {
LABEL_2:
        uint64_t v2 = _swiftEmptyDictionarySingleton[7] + 16 * v3;
        swift_bridgeObjectRelease();
        *(void *)uint64_t v2 = v1;
        *(void *)(v2 + 8) = v0;
        goto LABEL_3;
      }
    }
    _swiftEmptyDictionarySingleton[(v3 >> 6) + 8] |= 1 << v3;
    uint64_t v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v3);
    *uint64_t v17 = v1;
    v17[1] = v0;
    uint64_t v18 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v3);
    *uint64_t v18 = v1;
    v18[1] = v0;
    uint64_t v19 = _swiftEmptyDictionarySingleton[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_31;
    }
    _swiftEmptyDictionarySingleton[2] = v21;
    swift_bridgeObjectRetain();
LABEL_3:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v5 = v4;
  }
  while (v4 != 5);
  id v8 = &off_1008B5000;
  uint64_t v7 = 0x4449746E65726170;
  uint64_t v1 = 0x49746E756F636361;
  uint64_t v0 = 0xE900000000000044;
  uint64_t v9 = 0x746E756F636361;
  unint64_t v4 = 0xE700000000000000;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  int v46 = _swiftEmptyDictionarySingleton;
  unint64_t v3 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  uint64_t v24 = _swiftEmptyDictionarySingleton[2];
  BOOL v25 = (v23 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_45;
  }
  LOBYTE(v2) = v23;
  if (_swiftEmptyDictionarySingleton[3] >= v26)
  {
    if (v22)
    {
      if ((v23 & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_32:
    sub_100318A14();
    uint64_t v6 = v46;
    if ((v2 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_28;
  }
  sub_10030E654(v26, v22);
  unint64_t v27 = sub_1001806F8(0x49746E756F636361, 0xE900000000000044);
  if ((v2 & 1) != (v28 & 1)) {
    goto LABEL_51;
  }
  unint64_t v3 = v27;
  if (v2)
  {
LABEL_28:
    uint64_t v1 = v6[7] + 16 * v3;
    swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v9;
    *(void *)(v1 + 8) = v4;
    goto LABEL_35;
  }
LABEL_33:
  v6[(v3 >> 6) + 8] |= 1 << v3;
  os_log_type_t v29 = (uint64_t *)(v6[6] + 16 * v3);
  *os_log_type_t v29 = v1;
  v29[1] = v0;
  uint64_t v30 = (uint64_t *)(v6[7] + 16 * v3);
  uint64_t *v30 = v9;
  v30[1] = v4;
  uint64_t v31 = v6[2];
  BOOL v20 = __OFADD__(v31, 1);
  uint64_t v32 = v31 + 1;
  if (v20) {
    goto LABEL_50;
  }
  v6[2] = v32;
  swift_bridgeObjectRetain();
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)v8[320] < 2)
  {
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v1 = v7;
  uint64_t v0 = 0xE800000000000000;
  uint64_t v7 = 1953720684;
  id v8 = (_UNKNOWN **)0xE400000000000000;
  char v33 = swift_isUniquelyReferenced_nonNull_native();
  int v46 = v6;
  unint64_t v3 = sub_1001806F8(v1, 0xE800000000000000);
  uint64_t v35 = v6[2];
  BOOL v36 = (v34 & 1) == 0;
  uint64_t v37 = v35 + v36;
  if (__OFADD__(v35, v36))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  LOBYTE(v2) = v34;
  if (v6[3] >= v37)
  {
    if (v33)
    {
      if ((v34 & 1) == 0) {
        goto LABEL_47;
      }
      goto LABEL_43;
    }
LABEL_46:
    sub_100318A14();
    uint64_t v6 = v46;
    if ((v2 & 1) == 0) {
      goto LABEL_47;
    }
    goto LABEL_43;
  }
  sub_10030E654(v37, v33);
  unint64_t v38 = sub_1001806F8(v1, 0xE800000000000000);
  if ((v2 & 1) != (v39 & 1)) {
    goto LABEL_51;
  }
  unint64_t v3 = v38;
  if ((v2 & 1) == 0)
  {
LABEL_47:
    v6[(v3 >> 6) + 8] |= 1 << v3;
    uint64_t v41 = (uint64_t *)(v6[6] + 16 * v3);
    *uint64_t v41 = v1;
    v41[1] = v0;
    unint64_t v42 = (uint64_t *)(v6[7] + 16 * v3);
    *unint64_t v42 = v7;
    v42[1] = (uint64_t)v8;
    uint64_t v43 = v6[2];
    BOOL v20 = __OFADD__(v43, 1);
    uint64_t v44 = v43 + 1;
    if (!v20)
    {
      v6[2] = v44;
      swift_bridgeObjectRetain();
      goto LABEL_49;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    JUMPOUT(0x100359DCCLL);
  }
LABEL_43:
  unint64_t v40 = (uint64_t *)(v6[7] + 16 * v3);
  swift_bridgeObjectRelease();
  uint64_t *v40 = v7;
  v40[1] = (uint64_t)v8;
LABEL_49:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

id sub_100359DE0(void *a1, id a2, void *a3, uint64_t a4)
{
  uint64_t v43 = a4;
  uint64_t v42 = *v4;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v44 = a1;
  id v15 = [a1 list];
  if (v15
    && (v16 = v15, id v17 = [v15 remObjectID], v16, v17))
  {
    uint64_t v42 = v9;
    id v18 = objc_allocWithZone((Class)REMListSectionStorage);
    id v19 = a2;
    id v20 = a3;
    swift_bridgeObjectRetain();
    id v21 = v17;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v18 initWithObjectID:v19 accountID:v20 parentID:v21 displayName:v22];

    a2 = v23;
    id v24 = v44;
    Class isa = (Class)[v44 creationDate];
    if (isa)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v26 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v14, v11, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v8) == 1)
      {
        Class isa = 0;
      }
      else
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v8);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v14, 1, 1, v8);
    }
    [a2 setCreationDate:isa];

    id v39 = [v24 canonicalName];
    [a2 setCanonicalName:v39];
  }
  else
  {
    if (qword_100907320 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_100915180);
    id v28 = a2;
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v32 = (void *)swift_slowAlloc();
      id v44 = (id)swift_slowAlloc();
      id v45 = v44;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v46 = v42;
      swift_getMetatypeMetadata();
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v46 = sub_1000C51B8(v33, v34, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2112;
      a2 = (id)(v31 + 14);
      uint64_t v46 = (uint64_t)v28;
      id v35 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v32 = v28;

      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: cdListSection.list is nil {cdListSection.remObjectID: %@}", (uint8_t *)v31, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    BOOL v36 = self;
    type metadata accessor for REMCDListSection();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v38 = String._bridgeToObjectiveC()();
    [v36 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v38];

    swift_willThrow();
  }
  return a2;
}