uint64_t sub_1001A05F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v2 = type metadata accessor for REMManualOrdering.PinnedList();
  v3 = *(void *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v21 - v7;
  v28 = (unint64_t)_swiftEmptyArrayStorage;
  v9 = *(void *)(a1 + 56);
  v22 = a1 + 56;
  v10 = 1 << *(unsigned char *)(a1 + 32);
  v11 = -1;
  if (v10 < 64) {
    v11 = ~(-1 << v10);
  }
  v12 = v11 & v9;
  v25 = v3 + 32;
  v26 = v3 + 16;
  v23 = (unint64_t)(v10 + 63) >> 6;
  v24 = v3 + 8;
  v27 = a1;
  result = swift_bridgeObjectRetain();
  v14 = 0;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(void *)(v27 + 48) + *(void *)(v3 + 72) * v16, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    v20 = REMManualOrdering.PinnedList.elementObjectID.getter();
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    if (v20)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v17 >= v23) {
    goto LABEL_26;
  }
  v18 = *(void *)(v22 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_21;
  }
  v14 = v17 + 1;
  if (v17 + 1 >= v23) {
    goto LABEL_26;
  }
  v18 = *(void *)(v22 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  v14 = v17 + 2;
  if (v17 + 2 >= v23) {
    goto LABEL_26;
  }
  v18 = *(void *)(v22 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  v14 = v17 + 3;
  if (v17 + 3 >= v23) {
    goto LABEL_26;
  }
  v18 = *(void *)(v22 + 8 * v14);
  if (v18)
  {
LABEL_21:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_22;
  }
  v19 = v17 + 4;
  if (v19 >= v23)
  {
LABEL_26:
    swift_release();
    return v28;
  }
  v18 = *(void *)(v22 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v23) {
      goto LABEL_26;
    }
    v18 = *(void *)(v22 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1001A0908(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, a2);
    sub_1000ED098(a4, a2);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v26;
    uint64_t v24 = v27;
    uint64_t v7 = v28;
    int64_t v8 = v29;
    unint64_t v9 = v30;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v8 = 0;
  }
  uint64_t v22 = v7;
  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  while (v4 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_36;
    }
    sub_1000963CC(0, a2);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v17 = v25;
    swift_unknownObjectRelease();
    int64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v25) {
      goto LABEL_36;
    }
LABEL_26:
    id v20 = [v17 remObjectID:v22];

    int64_t v8 = v16;
    unint64_t v9 = v14;
    if (v20)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      int64_t v8 = v16;
      unint64_t v9 = v14;
    }
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v16 = v8;
LABEL_25:
    id v17 = *(id *)(*(void *)(v4 + 48) + 8 * v15);
    if (!v17) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  int64_t v16 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v16 >= v13) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v24 + 8 * v16);
    if (!v18)
    {
      int64_t v19 = v8 + 2;
      if (v8 + 2 >= v13) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18) {
        goto LABEL_23;
      }
      int64_t v19 = v8 + 3;
      if (v8 + 3 >= v13) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18) {
        goto LABEL_23;
      }
      int64_t v19 = v8 + 4;
      if (v8 + 4 >= v13) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v24 + 8 * v19);
      if (v18)
      {
LABEL_23:
        int64_t v16 = v19;
      }
      else
      {
        int64_t v16 = v8 + 5;
        if (v8 + 5 >= v13) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v24 + 8 * v16);
        if (!v18)
        {
          int64_t v21 = v8 + 6;
          while (v13 != v21)
          {
            unint64_t v18 = *(void *)(v24 + 8 * v21++);
            if (v18)
            {
              int64_t v16 = v21 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          sub_1000C1AF8();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v14 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t sub_1001A0C38(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A0908(a1, (unint64_t *)&qword_10090B040, (uint64_t)off_1008AA488, (unint64_t *)&qword_100914B80);
  uint64_t v10 = sub_100126B08(v9);
  swift_bridgeObjectRelease();
  unint64_t v11 = sub_1001A1F3C(v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = (void *)sub_1002B0F78(v14);
  swift_bridgeObjectRelease();
  if (!v15
    || (id v16 = [v15 managedObjectContext],
        v15,
        (id v48 = v16) == 0))
  {
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t v17 = swift_allocObject();
  uint64_t v43 = v17;
  *(void *)(v17 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v44 = v17 + 16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v11, (void (*)(void))type metadata accessor for RDElementManualSortID);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 0xC000000000000001) != 0)
    {
LABEL_5:
      uint64_t v21 = __CocoaSet.count.getter();
      BOOL v22 = __OFADD__(v20, v21);
      uint64_t v23 = v20 + v21;
      if (!v22) {
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v13 & 0xC000000000000001) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v38 = *(void *)(v13 + 16);
  BOOL v22 = __OFADD__(v20, v38);
  uint64_t v23 = v20 + v38;
  if (v22) {
    goto LABEL_16;
  }
LABEL_6:
  sub_1001A6A90(v23);
  specialized Array._endMutation()();
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_100200D00(v24);
  unint64_t v25 = swift_bridgeObjectRetain();
  sub_100200CE8(v25);
  unint64_t v20 = (unint64_t)aBlock;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    return v11;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v40 = 0;
  uint64_t v41 = v5;
  uint64_t v42 = v4;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a1;
  v26[3] = v20;
  v26[4] = v44;
  v26[5] = v2;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_1001AD534;
  *(void *)(v27 + 24) = v26;
  v54 = sub_100097240;
  v55 = (void *)v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  v52 = sub_1003B3260;
  v53 = &unk_1008BD128;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v48 performBlockAndWait:v28];
  _Block_release(v28);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v30 = v43;
    swift_retain();
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v31 = swift_allocObject();
    swift_weakInit();
    v32 = (void *)swift_allocObject();
    v32[2] = v31;
    v32[3] = sub_1001AAEC8;
    v32[4] = v30;
    v54 = sub_1001AD760;
    v55 = v32;
    aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    v52 = sub_100236C78;
    v53 = &unk_1008BD178;
    v33 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v34 = v46;
    static DispatchQoS.unspecified.getter();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v47);
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    unint64_t v49 = v11;
    swift_bridgeObjectRetain();
    unint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = v40;
    sub_1001A9AD8(v35, (unint64_t)sub_1001AD710, 0, (uint64_t *)&v49);
    if (!v36)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      return v49;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001A12AC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090E088);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090E088);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001A1374(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a1;
  *(unsigned char *)(v3 + 32) = a3 & 1;
  uint64_t v5 = qword_100906FE0;
  swift_retain();
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090E088);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDManualSortIDAdapter > initialized", v9, 2u);
    swift_slowDealloc();
  }
  swift_release();
  swift_release();

  return v4;
}

void sub_1001A148C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  os_log_type_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 32))
  {
    v33 = a3;
    uint64_t v13 = *(void *)(a1 + 16);
    if (!*(void *)(v13 + 24))
    {
LABEL_5:
      uint64_t v14 = self;
      unint64_t v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(143);
      v15._object = (void *)0x80000001007CD330;
      v15._countAndFlagsBits = 0xD000000000000024;
      String.append(_:)(v15);
      long long v30 = *(_OWORD *)(v13 + 16);
      sub_100094134((uint64_t *)&unk_10090A4C0);
      v16._countAndFlagsBits = Optional.descriptionOrNil.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0xD000000000000069;
      v17._object = (void *)0x80000001007CD360;
      String.append(_:)(v17);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v14 internalErrorWithDebugDescription:v18];

      swift_willThrow();
      return;
    }
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    {
      sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E50);
      goto LABEL_5;
    }
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    sub_1000963CC(0, &qword_10090ABC0);
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v22 = [ObjCClassFromMetadata objectIDWithUUID:isa];

    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_10077A530;
    *(void *)(v23 + 32) = v22;
    unint64_t v31 = v23;
    specialized Array._endMutation()();
    unint64_t v24 = v31;
    id v25 = v22;
    unint64_t v19 = (void *)sub_1003AD42C(v24, 0, 6);

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    a3 = v33;
  }
  else
  {
    unint64_t v19 = (void *)sub_1003AD42C(7uLL, 0, 7);
  }
  if (qword_100907778 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)sub_1003BC0CC(qword_1009422E8, 0, 0, (uint64_t)v19);
  sub_1000963CC(0, &qword_10090ABC0);
  unint64_t v27 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
  }
  else
  {
    uint64_t v28 = sub_1001274E8(v27);
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_1001A18C8(v28);

    swift_bridgeObjectRelease();
    *a3 = v29;
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001A18C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  os_log_type_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A0908(a1, &qword_10090ABC0, (uint64_t)off_1008AA3D8, &qword_10090B670);
  uint64_t v10 = sub_100126B08(v9);
  swift_bridgeObjectRelease();
  unint64_t v11 = sub_1001A3160(v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRetain();
  Swift::String v15 = (void *)sub_1002B10EC(v14);
  swift_bridgeObjectRelease();
  if (!v15
    || (id v16 = [v15 managedObjectContext],
        v15,
        (id v48 = v16) == 0))
  {
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t v17 = swift_allocObject();
  uint64_t v43 = v17;
  *(void *)(v17 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v44 = v17 + 16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v11, (void (*)(void))type metadata accessor for RDAccountManualSortID);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 0xC000000000000001) != 0)
    {
LABEL_5:
      uint64_t v21 = __CocoaSet.count.getter();
      BOOL v22 = __OFADD__(v20, v21);
      uint64_t v23 = v20 + v21;
      if (!v22) {
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v13 & 0xC000000000000001) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v38 = *(void *)(v13 + 16);
  BOOL v22 = __OFADD__(v20, v38);
  uint64_t v23 = v20 + v38;
  if (v22) {
    goto LABEL_16;
  }
LABEL_6:
  sub_1001A6A90(v23);
  specialized Array._endMutation()();
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_100200D00(v24);
  unint64_t v25 = swift_bridgeObjectRetain();
  sub_100200CE8(v25);
  unint64_t v20 = (unint64_t)aBlock;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    return v11;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v40 = 0;
  uint64_t v41 = v5;
  uint64_t v42 = v4;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a1;
  v26[3] = v20;
  v26[4] = v44;
  v26[5] = v2;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_1001AAF70;
  *(void *)(v27 + 24) = v26;
  v54 = sub_100097240;
  v55 = (void *)v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  v52 = sub_1003B3260;
  v53 = &unk_1008BCEF8;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v48 performBlockAndWait:v28];
  _Block_release(v28);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v30 = v43;
    swift_retain();
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v31 = swift_allocObject();
    swift_weakInit();
    unint64_t v32 = (void *)swift_allocObject();
    v32[2] = v31;
    v32[3] = sub_1001AAF8C;
    v32[4] = v30;
    v54 = sub_1001AD760;
    v55 = v32;
    aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    v52 = sub_100236C78;
    v53 = &unk_1008BCF48;
    v33 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v34 = v46;
    static DispatchQoS.unspecified.getter();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v47);
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    unint64_t v49 = v11;
    swift_bridgeObjectRetain();
    unint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = v40;
    sub_1001A9C7C(v35, (unint64_t)sub_1001AA11C, 0, (uint64_t *)&v49);
    if (!v36)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      return v49;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001A1F3C(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &_swiftEmptySetSingleton;
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  queue = *(NSObject **)(v5 + 16);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  os_log_type_t v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = sub_1001ACFFC;
  v8[4] = v6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1001AD764;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100097240;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008BD0B0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(queue, v10);
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v3 + 16);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v12;
  }
  return result;
}

uint64_t sub_1001A21C8(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v12 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  sub_1001AA158(a1, a2, (uint64_t *)&v12);
  swift_bridgeObjectRelease();
  Swift::Int v8 = sub_1002ED8DC((uint64_t)_swiftEmptyArrayStorage);
  swift_retain();
  uint64_t v9 = sub_1001ABE3C(v8, a2, (unint64_t)&v12, a4);
  swift_release();
  *a3 = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_1001A18C8(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A22C4(uint64_t a1, void *a2)
{
  id v44 = a2;
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = sub_1001A05F8(a1);
  uint64_t v9 = sub_100126B08(v8);
  swift_bridgeObjectRelease();
  unint64_t v10 = sub_1001A1F3C(v9);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v10, (void (*)(void))type metadata accessor for RDElementManualSortID);
  unint64_t v14 = v13;
  swift_bridgeObjectRelease();
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v12 & 0xC000000000000001) != 0)
    {
LABEL_3:
      uint64_t v16 = __CocoaSet.count.getter();
      BOOL v17 = __OFADD__(v15, v16);
      uint64_t v18 = v15 + v16;
      if (!v17) {
        goto LABEL_4;
      }
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v12 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v38 = *(void *)(v12 + 16);
  BOOL v17 = __OFADD__(v15, v38);
  uint64_t v18 = v15 + v38;
  if (v17) {
    goto LABEL_11;
  }
LABEL_4:
  sub_1001A6A90(v18);
  specialized Array._endMutation()();
  uint64_t v19 = swift_bridgeObjectRetain();
  sub_100200D00(v19);
  unint64_t v20 = swift_bridgeObjectRetain();
  sub_100200CE8(v20);
  unint64_t v15 = aBlock[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v15 >> 62))
  {
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v10;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_13;
  }
LABEL_6:
  unint64_t v21 = sub_1002ED6E4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = v3;
  BOOL v22 = (void *)v21;
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1001AAFF0(v22, a1, v15);
  swift_bridgeObjectRelease();
  unint64_t v24 = sub_1002ED8DC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  id v25 = v44;
  uint64_t v42 = v6;
  uint64_t v26 = v4;
  id v27 = v25;
  uint64_t v28 = sub_1001AB624(v24, v15, v23, v25);
  id v44 = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v28;
  unint64_t v30 = v28;
  swift_bridgeObjectRetain();
  uint64_t v31 = v45;
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v32 = swift_allocObject();
  swift_weakInit();
  v33 = (void *)swift_allocObject();
  v33[2] = v32;
  v33[3] = sub_1001AD5BC;
  v33[4] = v29;
  aBlock[4] = (uint64_t)sub_1001AD760;
  aBlock[5] = (uint64_t)v33;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100236C78;
  aBlock[3] = (uint64_t)&unk_1008BD1F0;
  v34 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  unint64_t v35 = v46;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v43);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v31, v42);
  swift_release();
  swift_release();
  swift_release();
  aBlock[0] = v10;
  swift_bridgeObjectRetain();
  unint64_t v36 = v30;
  id v37 = v44;
  sub_1001A9AD8(v36, (unint64_t)sub_1001AD710, 0, aBlock);
  if (!v37)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return aBlock[0];
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001A27F8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001A0908(a1, (unint64_t *)&unk_10090AF40, (uint64_t)off_1008AA470, &qword_10090B678);
  uint64_t v10 = sub_100126B08(v9);
  swift_bridgeObjectRelease();
  unint64_t v11 = sub_1001A1F3C(v10);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRetain();
  unint64_t v15 = (void *)sub_1002B0FA4(v14);
  swift_bridgeObjectRelease();
  if (!v15
    || (id v16 = [v15 managedObjectContext],
        v15,
        (id v48 = v16) == 0))
  {
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t v17 = swift_allocObject();
  uint64_t v43 = v17;
  *(void *)(v17 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v44 = v17 + 16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v11, (void (*)(void))type metadata accessor for RDElementManualSortID);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  aBlock = (void **)_swiftEmptyArrayStorage;
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 0xC000000000000001) != 0)
    {
LABEL_5:
      uint64_t v21 = __CocoaSet.count.getter();
      BOOL v22 = __OFADD__(v20, v21);
      uint64_t v23 = v20 + v21;
      if (!v22) {
        goto LABEL_6;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v13 & 0xC000000000000001) != 0) {
      goto LABEL_5;
    }
  }
  uint64_t v38 = *(void *)(v13 + 16);
  BOOL v22 = __OFADD__(v20, v38);
  uint64_t v23 = v20 + v38;
  if (v22) {
    goto LABEL_16;
  }
LABEL_6:
  sub_1001A6A90(v23);
  specialized Array._endMutation()();
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_100200D00(v24);
  unint64_t v25 = swift_bridgeObjectRetain();
  sub_100200CE8(v25);
  unint64_t v20 = (unint64_t)aBlock;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_8;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();

    return v11;
  }
LABEL_17:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_18;
  }
LABEL_8:
  uint64_t v40 = 0;
  uint64_t v41 = v5;
  uint64_t v42 = v4;
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a1;
  v26[3] = v20;
  v26[4] = v44;
  v26[5] = v2;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = sub_1001AAE94;
  *(void *)(v27 + 24) = v26;
  v54 = sub_10008F6F4;
  v55 = (void *)v27;
  aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  v52 = sub_1003B3260;
  v53 = &unk_1008BCDE0;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v48 performBlockAndWait:v28];
  _Block_release(v28);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v30 = v43;
    swift_retain();
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v31 = swift_allocObject();
    swift_weakInit();
    uint64_t v32 = (void *)swift_allocObject();
    v32[2] = v31;
    v32[3] = sub_1001AAEC8;
    v32[4] = v30;
    v54 = sub_1001AAF48;
    v55 = v32;
    aBlock = _NSConcreteStackBlock;
    uint64_t v51 = 1107296256;
    v52 = sub_100236C78;
    v53 = &unk_1008BCE58;
    v33 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v34 = v46;
    static DispatchQoS.unspecified.getter();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v8, v47);
    swift_release();
    swift_release();
    swift_release();
    swift_beginAccess();
    unint64_t v49 = v11;
    swift_bridgeObjectRetain();
    unint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v36 = v40;
    sub_1001A9AD8(v35, (unint64_t)sub_1001AD710, 0, (uint64_t *)&v49);
    if (!v36)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_release();
      return v49;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001A2E6C(uint64_t a1)
{
  unint64_t v2 = sub_1001A3160(a1);
  uint64_t v4 = v3;
  unint64_t v22 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v2, (void (*)(void))type metadata accessor for RDAccountManualSortID);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v4 & 0xC000000000000001) != 0)
    {
LABEL_3:
      uint64_t v7 = __CocoaSet.count.getter();
      BOOL v8 = __OFADD__(v6, v7);
      uint64_t v9 = (uint64_t)v6 + v7;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_14:
      __break(1u);
LABEL_15:
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20)
      {
        swift_bridgeObjectRelease();
        unint64_t v12 = (unint64_t)sub_10020ACC4((unint64_t)v6);
        goto LABEL_6;
      }
LABEL_17:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  else
  {
    uint64_t v6 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v4 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v19 = *(void *)(v4 + 16);
  BOOL v8 = __OFADD__(v6, v19);
  uint64_t v9 = (uint64_t)v6 + v19;
  if (v8) {
    goto LABEL_14;
  }
LABEL_4:
  sub_1001A6A90(v9);
  specialized Array._endMutation()();
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_100200D00(v10);
  unint64_t v11 = swift_bridgeObjectRetain();
  sub_100200CE8(v11);
  uint64_t v6 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_15;
  }
  unint64_t v12 = (unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_17;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)sub_1003AD42C(v12, 0, 1);
  swift_release();
  if (qword_100907778 != -1) {
    swift_once();
  }
  unint64_t v15 = (void *)sub_1003BC0CC(qword_1009422E8, 0, 0, (uint64_t)v14);

  sub_1000963CC(0, &qword_10090ABC0);
  unint64_t v16 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = sub_1001274E8(v16);
    swift_bridgeObjectRelease();
    unint64_t v18 = sub_1001A18C8(v17);
    swift_bridgeObjectRelease();
    sub_1001A9C7C(v18, (unint64_t)sub_1001AA11C, 0, (uint64_t *)&v22);

    return v22;
  }
  return v2;
}

uint64_t sub_1001A3160(uint64_t a1)
{
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = &_swiftEmptyDictionarySingleton;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = &_swiftEmptySetSingleton;
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  queue = *(NSObject **)(v5 + 16);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  BOOL v8 = (void *)swift_allocObject();
  v8[2] = v7;
  v8[3] = sub_1001ACF58;
  v8[4] = v6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1001ACF74;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100097240;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003B3260;
  aBlock[3] = &unk_1008BD010;
  uint64_t v10 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(queue, v10);
  _Block_release(v10);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (v10)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    uint64_t v12 = *(void *)(v3 + 16);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    return v12;
  }
  return result;
}

unint64_t sub_1001A33EC(uint64_t a1)
{
  unint64_t v2 = sub_1001A1F3C(a1);
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10019FD30((uint64_t)_swiftEmptyArrayStorage, v2, (void (*)(void))type metadata accessor for RDElementManualSortID);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v4 & 0xC000000000000001) != 0)
    {
LABEL_3:
      uint64_t v7 = __CocoaSet.count.getter();
      BOOL v8 = __OFADD__(v6, v7);
      uint64_t v9 = v6 + v7;
      if (!v8) {
        goto LABEL_4;
      }
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if ((v4 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = *(void *)(v4 + 16);
  BOOL v8 = __OFADD__(v6, v13);
  uint64_t v9 = v6 + v13;
  if (v8) {
    goto LABEL_11;
  }
LABEL_4:
  sub_1001A6A90(v9);
  specialized Array._endMutation()();
  uint64_t v10 = swift_bridgeObjectRetain();
  sub_100200D00(v10);
  unint64_t v11 = swift_bridgeObjectRetain();
  sub_100200CE8(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
  {
    if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_6;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v2;
  }
LABEL_12:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_13;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_bridgeObjectRelease();
  __chkstk_darwin(v12);
  NSManagedObjectContext.performAndWait<A>(_:)();
  swift_bridgeObjectRelease();
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return v2;
}

void sub_1001A3644(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v268 = a4;
  uint64_t v266 = a5;
  v267 = a6;
  uint64_t v253 = _s10PredicatesOMa_1();
  __chkstk_darwin(v253);
  v254 = (char *)&v247 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v255 = _s10PredicatesOMa_3();
  __chkstk_darwin(v255);
  v256 = (char *)&v247 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMManualOrdering.PinnedList();
  v264 = *(void **)(v10 - 8);
  uint64_t v265 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v247 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v247 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  v262 = (char *)&v247 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v257 = (char *)&v247 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v263 = (unint64_t)&v247 - v22;
  __chkstk_darwin(v21);
  unint64_t v24 = (unint64_t)&v247 - v23;
  unint64_t v271 = _s10PredicatesOMa(0);
  __chkstk_darwin(v271);
  v270 = (uint64_t *)((char *)&v247 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for REMManualOrdering.ElementType();
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  unint64_t v29 = (unint64_t)&v247 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
  int v30 = (*(uint64_t (**)(unint64_t, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for REMManualOrdering.ElementType.reminders(_:))
  {
    if ((a2 & 0x8000000000000000) != 0 || (a2 & 0x4000000000000000) != 0) {
      goto LABEL_213;
    }
    uint64_t v31 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
LABEL_5:
    unint64_t v32 = v269;
    v272 = v31;
    sub_100094134(&qword_10090E178);
    sub_1001AD0BC();
    uint64_t v33 = BidirectionalCollection<>.slices(by:)();
    swift_release();
    unint64_t v269 = *(void *)(v33 + 16);
    if (v269)
    {
      v264 = (void *)v33;
      uint64_t v265 = v33 + 32;
      swift_bridgeObjectRetain();
      uint64_t v34 = 0;
      while (1)
      {
        uint64_t v36 = (uint64_t *)(v265 + 32 * v34);
        uint64_t v38 = *v36;
        uint64_t v37 = v36[1];
        uint64_t v39 = v36[2];
        unint64_t v40 = v36[3];
        if ((v40 & 1) == 0) {
          break;
        }
        type metadata accessor for __ContiguousArrayStorageBase();
        swift_unknownObjectRetain_n();
        uint64_t v42 = (void *)swift_dynamicCastClass();
        if (!v42)
        {
          swift_unknownObjectRelease();
          uint64_t v42 = _swiftEmptyArrayStorage;
        }
        uint64_t v43 = v42[2];
        swift_release();
        if (__OFSUB__(v40 >> 1, v39)) {
          goto LABEL_211;
        }
        if (v43 != (v40 >> 1) - v39)
        {
          swift_unknownObjectRelease();
          goto LABEL_10;
        }
        uint64_t v41 = (void *)swift_dynamicCastClass();
        if (!v41)
        {
          swift_unknownObjectRelease();
          uint64_t v41 = _swiftEmptyArrayStorage;
        }
LABEL_17:
        swift_unknownObjectRelease();
        uint64_t v44 = (uint64_t)v270;
        void *v270 = v41;
        *(unsigned char *)(v44 + 8) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v45 = (void *)sub_10038F1F0();
        sub_1001AD488(v44, _s10PredicatesOMa);
        if (qword_100907B20 != -1) {
          swift_once();
        }
        unint64_t v46 = qword_100942668;
        if (qword_100907B28 != -1) {
          swift_once();
        }
        uint64_t v47 = (void *)sub_1003BC8C4(v46, qword_100942670, 0, (uint64_t)v45);

        sub_1000963CC(0, (unint64_t *)&qword_10090B040);
        unint64_t v48 = NSManagedObjectContext.fetch<A>(_:)();
        if (v32)
        {
          swift_bridgeObjectRelease_n();
          swift_unknownObjectRelease();

          return;
        }
        unint64_t v49 = v48;
        unint64_t v50 = v48 >> 62;
        if (v48 >> 62)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        sub_1000ED098((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
        v272 = (void *)Set.init(minimumCapacity:)();
        if (v50)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v51) {
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v51 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v51) {
            goto LABEL_7;
          }
        }
        if (v51 < 1)
        {
          __break(1u);
LABEL_211:
          __break(1u);
LABEL_212:
          __break(1u);
LABEL_213:
          unint64_t v182 = swift_bridgeObjectRetain();
          uint64_t v31 = sub_10020ACC4(v182);
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if ((v49 & 0xC000000000000001) != 0)
        {
          for (uint64_t i = 0; i != v51; ++i)
          {
            v53 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            sub_10031DE70(&v274, v53);
          }
        }
        else
        {
          for (uint64_t j = 0; j != v51; ++j)
          {
            v55 = *(void **)(v49 + 8 * j + 32);
            sub_10031DE70(&v274, v55);
          }
        }
LABEL_7:
        swift_bridgeObjectRelease();
        ++v34;
        unint64_t v35 = sub_1001A0C38((uint64_t)v272);
        swift_bridgeObjectRelease();
        sub_1001A9AD8(v35, (unint64_t)sub_1001AD710, 0, v267);
        unint64_t v32 = 0;
        swift_unknownObjectRelease();

        if (v34 == v269) {
          goto LABEL_175;
        }
      }
      swift_unknownObjectRetain_n();
LABEL_10:
      uint64_t v41 = sub_10020AF24(v38, v37, v39, v40);
      goto LABEL_17;
    }
LABEL_172:
    swift_bridgeObjectRelease();
    return;
  }
  if (v30 == enum case for REMManualOrdering.ElementType.pinnedLists(_:))
  {
    v56 = (void *)sub_100349CDC();
    if (!v56) {
      return;
    }
    v250 = v16;
    v252 = v13;
    v249 = v56;
    v272 = _swiftEmptyArrayStorage;
    unint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v251 = sub_100126B08(v57);
    swift_bridgeObjectRelease();
    uint64_t v58 = a2 >> 62;
    unint64_t v59 = v269;
    if (a2 >> 62)
    {
LABEL_216:
      swift_bridgeObjectRetain();
      uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
      v270 = (void *)v60;
      unint64_t v271 = a2;
      if (v60) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v60 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v270 = (void *)v60;
      unint64_t v271 = a2;
      if (v60)
      {
LABEL_41:
        uint64_t v248 = v58;
        id v260 = self;
        unint64_t v261 = a2 & 0xC000000000000001;
        uint64_t v61 = 4;
        while (1)
        {
          if (v261) {
            id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v62 = *(id *)(a2 + 8 * v61);
          }
          v63 = v62;
          v64 = (void *)(v61 - 3);
          if (__OFADD__(v61 - 4, 1)) {
            goto LABEL_212;
          }
          id v65 = [v62 entityName];
          uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v68 = v67;

          id v69 = [v260 cdEntityName];
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v72 = v71;

          BOOL v73 = v66 == v70 && v68 == v72;
          if (v73)
          {
            a2 = v271;
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            goto LABEL_178;
          }
          char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v74) {
            break;
          }
          ++v61;
          unint64_t v59 = v269;
          uint64_t v60 = (uint64_t)v270;
          a2 = v271;
          if (v64 == v270)
          {
            swift_bridgeObjectRelease();
            goto LABEL_238;
          }
        }
        a2 = v271;
LABEL_178:
        unint64_t v153 = v269;
        swift_bridgeObjectRelease();
        uint64_t v154 = static REMSmartListType.manualOrderablePredefinedSmartListTypes.getter();
        v155 = _swiftEmptyArrayStorage;
        unint64_t v261 = *(void *)(v154 + 16);
        if (v261)
        {
          LODWORD(v260) = enum case for REMManualOrdering.PinnedList.predefinedSmartList(_:);
          v258 = (void (*)(unint64_t, void, uint64_t))v264[13];
          v259 = v264 + 13;
          v156 = (void (**)(unint64_t, unint64_t, uint64_t))(v264 + 4);
          swift_bridgeObjectRetain();
          uint64_t v157 = 0;
          uint64_t v158 = v265;
          unint64_t v159 = v263;
          do
          {
            uint64_t v160 = v154;
            v161 = *(void **)(v154 + 8 * v157 + 32);
            *(void *)unint64_t v24 = v161;
            v258(v24, v260, v158);
            v162 = *v156;
            (*v156)(v159, v24, v158);
            id v163 = v161;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v155 = (void *)sub_100309280(0, v155[2] + 1, 1, (unint64_t)v155);
            }
            unint64_t v165 = v155[2];
            unint64_t v164 = v155[3];
            unint64_t v159 = v263;
            if (v165 >= v164 >> 1)
            {
              uint64_t v166 = sub_100309280(v164 > 1, v165 + 1, 1, (unint64_t)v155);
              unint64_t v159 = v263;
              v155 = (void *)v166;
            }
            ++v157;
            v155[2] = v165 + 1;
            uint64_t v158 = v265;
            v162((unint64_t)v155+ ((*((unsigned __int8 *)v264 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v264 + 80))+ v264[9] * v165, v159, v265);
            unint64_t v153 = v269;
            uint64_t v154 = v160;
          }
          while (v261 != v157);
          swift_bridgeObjectRelease();
          a2 = v271;
        }
        swift_bridgeObjectRelease();
        uint64_t v167 = v251;
        swift_bridgeObjectRetain();
        v168 = (void *)v153;
        v169 = sub_1001AD118((uint64_t)v155, v167);
        unint64_t v59 = (unint64_t)v168;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100202F60((uint64_t)v169);
        uint64_t v170 = v272[2];
        uint64_t v60 = (uint64_t)v270;
        if (v248)
        {
          swift_bridgeObjectRetain();
          uint64_t v171 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v171 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v90 = v268;
        if (v170 >= v171) {
          goto LABEL_238;
        }
        uint64_t v172 = (uint64_t)v256;
        swift_storeEnumTagMultiPayload();
        v173 = (void *)sub_100646F04();
        sub_1001AD488(v172, (uint64_t (*)(void))_s10PredicatesOMa_3);
        if (qword_100907B38 != -1) {
          swift_once();
        }
        unint64_t v29 = sub_1003BC074(qword_100942680, 0, 0, (uint64_t)v173);

        sub_1000963CC(0, (unint64_t *)&unk_100910210);
        unint64_t v174 = NSManagedObjectContext.fetch<A>(_:)();
        v88 = v168;
        if (v168) {
          goto LABEL_261;
        }
        unint64_t v175 = v174;
        unint64_t v274 = (unint64_t)_swiftEmptyArrayStorage;
        if (v174 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v176 = _CocoaArrayWrapper.endIndex.getter();
          unint64_t v269 = 0;
          if (v176) {
            goto LABEL_195;
          }
        }
        else
        {
          uint64_t v176 = *(void *)((v174 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          unint64_t v269 = 0;
          if (v176)
          {
LABEL_195:
            if (v176 >= 1)
            {
              uint64_t v177 = 0;
              uint64_t v90 = (uint64_t)&selRef_intersectsSet_;
              do
              {
                if ((v175 & 0xC000000000000001) != 0) {
                  id v178 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  id v178 = *(id *)(v175 + 8 * v177 + 32);
                }
                v179 = v178;
                id v180 = [v178 remObjectID];

                if (v180)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                  if (*(void *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v274 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                }
                ++v177;
                v88 = (void *)v269;
              }
              while (v176 != v177);
              goto LABEL_209;
            }
            __break(1u);
LABEL_296:
            __break(1u);
LABEL_297:
            __break(1u);
LABEL_298:
            __break(1u);
LABEL_299:
            v272 = 0;
            unint64_t v273 = 0xE000000000000000;
            _StringGuts.grow(_:)(46);
            v242._object = (void *)0x80000001007CAF70;
            v242._countAndFlagsBits = 0xD00000000000002CLL;
            String.append(_:)(v242);
            unint64_t v274 = v90;
LABEL_302:
            v245 = &qword_10090FF80;
LABEL_305:
            sub_100094134(v245);
            _print_unlocked<A, B>(_:_:)();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_306;
          }
        }
        swift_bridgeObjectRelease();
        v181 = _swiftEmptyArrayStorage;
        goto LABEL_222;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_239;
  }
  if (v30 == enum case for REMManualOrdering.ElementType.templates(_:))
  {
    if ((a2 & 0x8000000000000000) != 0 || (a2 & 0x4000000000000000) != 0)
    {
      unint64_t v183 = swift_bridgeObjectRetain();
      v75 = sub_10020ACC4(v183);
      swift_bridgeObjectRelease();
    }
    else
    {
      v75 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
    }
    unint64_t v76 = v269;
    v272 = v75;
    sub_100094134(&qword_10090E178);
    sub_1001AD0BC();
    v77 = (char *)BidirectionalCollection<>.slices(by:)();
    swift_release();
    unint64_t v261 = *((void *)v77 + 2);
    if (!v261) {
      goto LABEL_172;
    }
    v262 = v77 + 32;
    id v260 = v77;
    swift_bridgeObjectRetain();
    unint64_t v59 = 0;
    while (1)
    {
      v78 = (unint64_t *)&v262[32 * v59];
      a2 = *v78;
      uint64_t v58 = v78[1];
      uint64_t v79 = v78[2];
      unint64_t v24 = v78[3];
      if ((v24 & 1) == 0) {
        break;
      }
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain_n();
      v81 = (void *)swift_dynamicCastClass();
      if (!v81)
      {
        swift_unknownObjectRelease();
        v81 = _swiftEmptyArrayStorage;
      }
      uint64_t v82 = v81[2];
      swift_release();
      if (__OFSUB__(v24 >> 1, v79))
      {
        __break(1u);
        goto LABEL_215;
      }
      if (v82 != (v24 >> 1) - v79)
      {
        swift_unknownObjectRelease();
        goto LABEL_61;
      }
      v80 = (void *)swift_dynamicCastClass();
      if (!v80)
      {
        swift_unknownObjectRelease();
        v80 = _swiftEmptyArrayStorage;
      }
LABEL_68:
      v264 = v80;
      swift_unknownObjectRelease();
      if (qword_100907B40 != -1) {
        swift_once();
      }
      uint64_t v83 = qword_100942688;
      if ((unint64_t)qword_100942688 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v84 = *(void *)((qword_100942688 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
      }
      uint64_t v265 = a2;
      unint64_t v263 = v59;
      unint64_t v269 = v76;
      if (v84)
      {
        unint64_t v271 = v83 & 0xC000000000000001;
        uint64_t v85 = 4;
        v86 = (objc_class *)_swiftEmptyArrayStorage;
        uint64_t v87 = v83;
        v88 = (void *)v84;
        while (1)
        {
          uint64_t v89 = v85 - 4;
          if (v271)
          {
            uint64_t v90 = specialized _ArrayBuffer._getElementSlowPath(_:)();
            v91 = (void *)(v85 - 3);
            if (__OFADD__(v89, 1)) {
              goto LABEL_205;
            }
          }
          else
          {
            uint64_t v90 = *(void *)(v83 + 8 * v85);
            swift_retain();
            v91 = (void *)(v85 - 3);
            if (__OFADD__(v89, 1))
            {
LABEL_205:
              __break(1u);
              goto LABEL_206;
            }
          }
          uint64_t v92 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
          if (!v93) {
            goto LABEL_299;
          }
          uint64_t v94 = v92;
          uint64_t v95 = v93;
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v86 = (objc_class *)sub_100308F88(0, *((void *)v86 + 2) + 1, 1, v86);
          }
          unint64_t v29 = *((void *)v86 + 2);
          unint64_t v96 = *((void *)v86 + 3);
          if (v29 >= v96 >> 1) {
            v86 = (objc_class *)sub_100308F88((void *)(v96 > 1), v29 + 1, 1, v86);
          }
          *((void *)v86 + 2) = v29 + 1;
          v97 = (void *)((char *)v86 + 16 * v29);
          v97[4] = v94;
          v97[5] = v95;
          ++v85;
          BOOL v73 = v91 == v88;
          uint64_t v83 = v87;
          if (v73) {
            goto LABEL_88;
          }
        }
      }
      v86 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_88:
      swift_bridgeObjectRelease_n();
      if (qword_100907B48 != -1) {
        swift_once();
      }
      uint64_t v90 = qword_100942690;
      if ((unint64_t)qword_100942690 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v98)
        {
LABEL_92:
          unint64_t v271 = v90 & 0xC000000000000001;
          uint64_t v99 = 4;
          v100 = (objc_class *)_swiftEmptyArrayStorage;
          v270 = (void *)v90;
          while (1)
          {
            uint64_t v101 = v99 - 4;
            if (v271)
            {
              v88 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
              unint64_t v29 = v99 - 3;
              if (__OFADD__(v101, 1)) {
                goto LABEL_207;
              }
            }
            else
            {
              v88 = *(void **)(v90 + 8 * v99);
              swift_retain();
              unint64_t v29 = v99 - 3;
              if (__OFADD__(v101, 1)) {
                goto LABEL_207;
              }
            }
            uint64_t v102 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
            if (!v103) {
              break;
            }
            uint64_t v104 = v102;
            uint64_t v105 = v103;
            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v100 = (objc_class *)sub_100308F88(0, *((void *)v100 + 2) + 1, 1, v100);
            }
            unint64_t v107 = *((void *)v100 + 2);
            unint64_t v106 = *((void *)v100 + 3);
            if (v107 >= v106 >> 1) {
              v100 = (objc_class *)sub_100308F88((void *)(v106 > 1), v107 + 1, 1, v100);
            }
            *((void *)v100 + 2) = v107 + 1;
            v108 = (void *)((char *)v100 + 16 * v107);
            v108[4] = v104;
            v108[5] = v105;
            ++v99;
            uint64_t v90 = (uint64_t)v270;
            if (v29 == v98) {
              goto LABEL_108;
            }
          }
          v272 = 0;
          unint64_t v273 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v244._object = (void *)0x80000001007CAF70;
          v244._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v244);
          unint64_t v274 = (unint64_t)v88;
          goto LABEL_302;
        }
      }
      else
      {
        uint64_t v98 = *(void *)((qword_100942690 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v98) {
          goto LABEL_92;
        }
      }
      v100 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_108:
      swift_bridgeObjectRelease_n();
      unint64_t v109 = v269;
      uint64_t v110 = sub_1002E4864((uint64_t)v264, v268, v86, v100);
      unint64_t v76 = v109;
      if (v109) {
        goto LABEL_174;
      }
      unint64_t v111 = v110;
      unint64_t v59 = v263 + 1;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v112 = sub_100127210(v111);
      swift_bridgeObjectRelease();
      uint64_t v113 = sub_100333A6C(v112);
      unint64_t v114 = sub_1001A27F8(v113);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001A9AD8(v114, (unint64_t)sub_1001AD710, 0, v267);
      swift_unknownObjectRelease();
      if (v59 == v261) {
        goto LABEL_175;
      }
    }
    swift_unknownObjectRetain_n();
LABEL_61:
    v80 = sub_10020AF24(a2, v58, v79, v24);
    goto LABEL_68;
  }
  if (v30 != enum case for REMManualOrdering.ElementType.savedReminders(_:))
  {
LABEL_306:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  if ((a2 & 0x8000000000000000) != 0 || (a2 & 0x4000000000000000) != 0)
  {
    unint64_t v184 = swift_bridgeObjectRetain();
    v115 = sub_10020ACC4(v184);
    swift_bridgeObjectRelease();
  }
  else
  {
    v115 = (void *)(a2 & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  unint64_t v116 = v269;
  v272 = v115;
  sub_100094134(&qword_10090E178);
  sub_1001AD0BC();
  v117 = (char *)BidirectionalCollection<>.slices(by:)();
  swift_release();
  unint64_t v261 = *((void *)v117 + 2);
  if (!v261) {
    goto LABEL_172;
  }
  v262 = v117 + 32;
  id v260 = v117;
  swift_bridgeObjectRetain();
  unint64_t v24 = 0;
  while (1)
  {
    v118 = (unint64_t *)&v262[32 * v24];
    a2 = *v118;
    uint64_t v58 = v118[1];
    uint64_t v119 = v118[2];
    unint64_t v59 = v118[3];
    if ((v59 & 1) == 0)
    {
      swift_unknownObjectRetain_n();
LABEL_122:
      v120 = sub_10020AF24(a2, v58, v119, v59);
      goto LABEL_129;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v121 = (void *)swift_dynamicCastClass();
    if (!v121)
    {
      swift_unknownObjectRelease();
      v121 = _swiftEmptyArrayStorage;
    }
    uint64_t v122 = v121[2];
    swift_release();
    if (__OFSUB__(v59 >> 1, v119))
    {
LABEL_215:
      __break(1u);
      goto LABEL_216;
    }
    if (v122 != (v59 >> 1) - v119)
    {
      swift_unknownObjectRelease();
      goto LABEL_122;
    }
    v120 = (void *)swift_dynamicCastClass();
    if (!v120)
    {
      swift_unknownObjectRelease();
      v120 = _swiftEmptyArrayStorage;
    }
LABEL_129:
    swift_unknownObjectRelease();
    if (qword_100907B50 != -1) {
      swift_once();
    }
    uint64_t v123 = qword_100942698;
    if ((unint64_t)qword_100942698 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v124 = *(void *)((qword_100942698 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    v264 = v120;
    uint64_t v265 = a2;
    unint64_t v263 = v24;
    unint64_t v269 = v116;
    if (v124) {
      break;
    }
    v126 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_148:
    swift_bridgeObjectRelease_n();
    if (qword_100907B58 != -1) {
      swift_once();
    }
    uint64_t v90 = qword_1009426A0;
    if ((unint64_t)qword_1009426A0 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v136 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v136)
      {
LABEL_152:
        unint64_t v271 = v90 & 0xC000000000000001;
        uint64_t v137 = 4;
        v138 = (objc_class *)_swiftEmptyArrayStorage;
        v270 = (void *)v90;
        while (1)
        {
          uint64_t v139 = v137 - 4;
          if (v271)
          {
            v88 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
            unint64_t v29 = v137 - 3;
            if (__OFADD__(v139, 1)) {
              goto LABEL_208;
            }
          }
          else
          {
            v88 = *(void **)(v90 + 8 * v137);
            swift_retain();
            unint64_t v29 = v137 - 3;
            if (__OFADD__(v139, 1)) {
              goto LABEL_208;
            }
          }
          uint64_t v140 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
          if (!v141) {
            break;
          }
          uint64_t v142 = v140;
          uint64_t v143 = v141;
          swift_release();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v138 = (objc_class *)sub_100308F88(0, *((void *)v138 + 2) + 1, 1, v138);
          }
          unint64_t v145 = *((void *)v138 + 2);
          unint64_t v144 = *((void *)v138 + 3);
          if (v145 >= v144 >> 1) {
            v138 = (objc_class *)sub_100308F88((void *)(v144 > 1), v145 + 1, 1, v138);
          }
          *((void *)v138 + 2) = v145 + 1;
          v146 = (void *)((char *)v138 + 16 * v145);
          v146[4] = v142;
          v146[5] = v143;
          ++v137;
          uint64_t v90 = (uint64_t)v270;
          if (v29 == v136) {
            goto LABEL_168;
          }
        }
        v272 = 0;
        unint64_t v273 = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v246._object = (void *)0x80000001007CAF70;
        v246._countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v246);
        unint64_t v274 = (unint64_t)v88;
LABEL_304:
        v245 = &qword_100913AA0;
        goto LABEL_305;
      }
    }
    else
    {
      uint64_t v136 = *(void *)((qword_1009426A0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v136) {
        goto LABEL_152;
      }
    }
    v138 = (objc_class *)_swiftEmptyArrayStorage;
LABEL_168:
    swift_bridgeObjectRelease_n();
    unint64_t v147 = v269;
    uint64_t v148 = sub_100549544((uint64_t)v264, v268, 1, v126, v138);
    unint64_t v116 = v147;
    if (v147)
    {
LABEL_174:
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_172;
    }
    unint64_t v149 = v148;
    unint64_t v24 = v263 + 1;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v150 = sub_10012703C(v149);
    swift_bridgeObjectRelease();
    uint64_t v151 = sub_100333A14(v150);
    unint64_t v152 = sub_1001A27F8(v151);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001A9AD8(v152, (unint64_t)sub_1001AD710, 0, v267);
    swift_unknownObjectRelease();
    if (v24 == v261)
    {
LABEL_175:
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  unint64_t v271 = v123 & 0xC000000000000001;
  uint64_t v125 = 4;
  v126 = (objc_class *)_swiftEmptyArrayStorage;
  uint64_t v127 = v123;
  v88 = (void *)v124;
  while (1)
  {
    uint64_t v128 = v125 - 4;
    if (!v271) {
      break;
    }
    uint64_t v90 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    v129 = (void *)(v125 - 3);
    if (__OFADD__(v128, 1)) {
      goto LABEL_206;
    }
LABEL_140:
    uint64_t v130 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v131)
    {
      v272 = 0;
      unint64_t v273 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v243._object = (void *)0x80000001007CAF70;
      v243._countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v243);
      unint64_t v274 = v90;
      goto LABEL_304;
    }
    uint64_t v132 = v130;
    uint64_t v133 = v131;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v126 = (objc_class *)sub_100308F88(0, *((void *)v126 + 2) + 1, 1, v126);
    }
    unint64_t v29 = *((void *)v126 + 2);
    unint64_t v134 = *((void *)v126 + 3);
    if (v29 >= v134 >> 1) {
      v126 = (objc_class *)sub_100308F88((void *)(v134 > 1), v29 + 1, 1, v126);
    }
    *((void *)v126 + 2) = v29 + 1;
    v135 = (void *)((char *)v126 + 16 * v29);
    v135[4] = v132;
    v135[5] = v133;
    ++v125;
    uint64_t v123 = v127;
    if (v129 == v88) {
      goto LABEL_148;
    }
  }
  uint64_t v90 = *(void *)(v123 + 8 * v125);
  swift_retain();
  v129 = (void *)(v125 - 3);
  if (!__OFADD__(v128, 1)) {
    goto LABEL_140;
  }
LABEL_206:
  __break(1u);
LABEL_207:
  __break(1u);
LABEL_208:
  __break(1u);
LABEL_209:
  swift_bridgeObjectRelease();
  v181 = (void *)v274;
LABEL_222:
  unint64_t v263 = (unint64_t)v181;
  swift_bridgeObjectRelease();
  id v260 = (id)v29;
  if (v263 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v185 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v186 = v265;
    if (!v185) {
      goto LABEL_236;
    }
LABEL_224:
    if (v185 >= 1)
    {
      uint64_t v187 = 0;
      unint64_t v261 = v263 & 0xC000000000000001;
      uint64_t v188 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
      v189 = (void (**)(char *, uint64_t, uint64_t))(v264 + 13);
      v190 = (void (**)(unint64_t, char *, uint64_t))(v264 + 4);
      v191 = _swiftEmptyArrayStorage;
      do
      {
        if (v261) {
          id v192 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v192 = *(id *)(v263 + 8 * v187 + 32);
        }
        v193 = v257;
        *(void *)v257 = v192;
        (*v189)(v193, v188, v186);
        v194 = *v190;
        (*v190)((unint64_t)v262, v193, v186);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v191 = (void *)sub_100309280(0, v191[2] + 1, 1, (unint64_t)v191);
        }
        unint64_t v196 = v191[2];
        unint64_t v195 = v191[3];
        if (v196 >= v195 >> 1) {
          v191 = (void *)sub_100309280(v195 > 1, v196 + 1, 1, (unint64_t)v191);
        }
        ++v187;
        v191[2] = v196 + 1;
        unint64_t v197 = (unint64_t)v191
             + ((*((unsigned __int8 *)v264 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v264 + 80))
             + v264[9] * v196;
        uint64_t v186 = v265;
        v194(v197, v262, v265);
        v88 = (void *)v269;
      }
      while (v185 != v187);
      goto LABEL_237;
    }
    goto LABEL_296;
  }
  uint64_t v185 = *(void *)((v263 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v186 = v265;
  if (v185) {
    goto LABEL_224;
  }
LABEL_236:
  v191 = _swiftEmptyArrayStorage;
LABEL_237:
  swift_bridgeObjectRelease_n();
  uint64_t v198 = v251;
  swift_bridgeObjectRetain();
  v199 = sub_1001AD118((uint64_t)v191, v198);
  unint64_t v59 = (unint64_t)v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100202F60((uint64_t)v199);

  uint64_t v60 = (uint64_t)v270;
  a2 = v271;
LABEL_238:
  uint64_t v58 = v248;
LABEL_239:
  uint64_t v200 = v272[2];
  if (v58)
  {
    swift_bridgeObjectRetain();
    uint64_t v201 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v200 >= v201) {
      goto LABEL_256;
    }
  }
  else if (v200 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_256:
    swift_bridgeObjectRelease();
    goto LABEL_257;
  }
  if (!v60) {
    goto LABEL_256;
  }
  unint64_t v263 = self;
  unint64_t v269 = a2 & 0xC000000000000001;
  swift_bridgeObjectRetain();
  uint64_t v202 = 4;
  while (1)
  {
    if (v269) {
      id v203 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v203 = *(id *)(a2 + 8 * v202);
    }
    uint64_t v90 = (uint64_t)v203;
    v204 = (void *)(v202 - 3);
    if (__OFADD__(v202 - 4, 1))
    {
      __break(1u);
      goto LABEL_276;
    }
    unint64_t v205 = v59;
    id v206 = [v203 entityName];
    uint64_t v207 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v209 = v208;

    id v210 = [(id)v263 cdEntityName];
    uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v213 = v212;

    if (v207 == v211 && v209 == v213) {
      break;
    }
    char v215 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a2 = v271;
    if (v215) {
      goto LABEL_259;
    }
    ++v202;
    unint64_t v59 = v205;
    if (v204 == v270)
    {
      swift_bridgeObjectRelease();
      goto LABEL_256;
    }
  }
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_259:
  v204 = (void *)v205;
  swift_bridgeObjectRelease();
  uint64_t v90 = (uint64_t)v254;
  swift_storeEnumTagMultiPayload();
  uint64_t v202 = sub_100535B3C();
  sub_1001AD488(v90, (uint64_t (*)(void))_s10PredicatesOMa_1);
  if (qword_100907B30 == -1) {
    goto LABEL_260;
  }
LABEL_276:
  swift_once();
LABEL_260:
  unint64_t v29 = sub_1003BD0F4(qword_100942678, 0, 0, v202);

  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  unint64_t v220 = NSManagedObjectContext.fetch<A>(_:)();
  if (v204)
  {
LABEL_261:
    swift_bridgeObjectRelease();

    goto LABEL_172;
  }
  unint64_t v221 = v220;
  unint64_t v274 = (unint64_t)_swiftEmptyArrayStorage;
  if (v220 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v222 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v269 = 0;
    if (!v222) {
      goto LABEL_278;
    }
LABEL_264:
    if (v222 >= 1)
    {
      uint64_t v223 = 0;
      uint64_t v90 = (uint64_t)&selRef_intersectsSet_;
      do
      {
        if ((v221 & 0xC000000000000001) != 0) {
          id v224 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v224 = *(id *)(v221 + 8 * v223 + 32);
        }
        v225 = v224;
        id v226 = [v224 remObjectID];

        if (v226)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v274 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v223;
      }
      while (v222 != v223);
      swift_bridgeObjectRelease();
      v227 = (void *)v274;
      goto LABEL_279;
    }
    goto LABEL_297;
  }
  uint64_t v222 = *(void *)((v220 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  unint64_t v269 = 0;
  if (v222) {
    goto LABEL_264;
  }
LABEL_278:
  swift_bridgeObjectRelease();
  v227 = _swiftEmptyArrayStorage;
LABEL_279:
  unint64_t v271 = (unint64_t)v227;
  swift_bridgeObjectRelease();
  unint64_t v263 = v29;
  if (v271 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v228 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v229 = v265;
    if (!v228) {
      goto LABEL_293;
    }
LABEL_281:
    if (v228 >= 1)
    {
      uint64_t v230 = 0;
      v270 = (void *)(v271 & 0xC000000000000001);
      uint64_t v231 = enum case for REMManualOrdering.PinnedList.listOrCustomSmartList(_:);
      v232 = (void (**)(char *, uint64_t, uint64_t))(v264 + 13);
      v233 = (void (**)(unint64_t, char *, uint64_t))(v264 + 4);
      v234 = _swiftEmptyArrayStorage;
      do
      {
        if (v270) {
          id v235 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v235 = *(id *)(v271 + 8 * v230 + 32);
        }
        v236 = v250;
        *(void *)v250 = v235;
        (*v232)(v236, v231, v229);
        v237 = *v233;
        (*v233)((unint64_t)v252, v236, v229);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v234 = (void *)sub_100309280(0, v234[2] + 1, 1, (unint64_t)v234);
        }
        unint64_t v239 = v234[2];
        unint64_t v238 = v234[3];
        if (v239 >= v238 >> 1) {
          v234 = (void *)sub_100309280(v238 > 1, v239 + 1, 1, (unint64_t)v234);
        }
        ++v230;
        v234[2] = v239 + 1;
        unint64_t v240 = (unint64_t)v234
             + ((*((unsigned __int8 *)v264 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v264 + 80))
             + v264[9] * v239;
        uint64_t v229 = v265;
        v237(v240, v252, v265);
      }
      while (v228 != v230);
      goto LABEL_294;
    }
    goto LABEL_298;
  }
  uint64_t v228 = *(void *)((v271 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v229 = v265;
  if (v228) {
    goto LABEL_281;
  }
LABEL_293:
  v234 = _swiftEmptyArrayStorage;
LABEL_294:
  swift_bridgeObjectRelease_n();
  v241 = sub_1001AD118((uint64_t)v234, v251);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100202F60((uint64_t)v241);

LABEL_257:
  uint64_t v216 = swift_bridgeObjectRetain();
  uint64_t v217 = sub_100126D04(v216);
  swift_bridgeObjectRelease();
  v218 = v249;
  unint64_t v219 = sub_1001A22C4(v217, v249);
  swift_bridgeObjectRelease();
  sub_1001A9AD8(v219, (unint64_t)sub_1001AD710, 0, v267);
  swift_bridgeObjectRelease();
}

void sub_1001A585C(void **a1, void *a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *sub_1000C0DE0(a2, a2[3]);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 16);
  id v5 = v2;
  uint64_t v6 = sub_1002EFF14(v5, v4);
  swift_endAccess();

  swift_beginAccess();
  if (v6)
  {
    id v7 = v5;
    uint64_t v8 = swift_retain();
    sub_1001A6BA8(v8, (uint64_t)v7, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C5648, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
    swift_endAccess();
    swift_release();
  }
  else
  {
    sub_10031DE54(&v9, v5);
    swift_endAccess();
  }
}

void sub_1001A59B0(void *a1, void *a2)
{
  unint64_t v2 = (void *)*a1;
  if (objc_msgSend(*(id *)(*sub_1000C0DE0(a2, a2[3]) + 24), "objectForKey:", *a1))
  {
    swift_beginAccess();
    id v3 = v2;
    uint64_t v4 = swift_retain();
    sub_1001A6BA8(v4, (uint64_t)v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C561C, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_beginAccess();
    sub_10031DE54(&v5, v2);
    swift_endAccess();
  }
}

uint64_t sub_1001A5AF0(uint64_t a1, id *a2, uint64_t *a3, uint64_t a4)
{
  Swift::Int v8 = sub_1002EEC48((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1001AC3A8(v8, a1, (unint64_t)a2);
  swift_bridgeObjectRelease();
  unint64_t v10 = sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v11 = sub_1001AC9B8(v10, a2, v9, a4);
  swift_bridgeObjectRelease_n();
  swift_release();
  *a3 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A5BD0(uint64_t a1, void *a2)
{
  id v3 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  sub_1000C0DE0(a2, a2[3]);
  swift_beginAccess();
  id v4 = v3;
  uint64_t v5 = swift_retain();
  sub_1001A6BA8(v5, (uint64_t)v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C5648, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
  swift_endAccess();

  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    if (*(void *)(result + 32))
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      Swift::Int v8 = *(void **)(v2 + OBJC_IVAR____TtC7remindd21RDAccountManualSortID_accountTypeHost);
      swift_retain();
      if ([v8 isCloudKit])
      {
        if (qword_100907868 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_10008E2DC(v9, (uint64_t)qword_10091C640);
        unint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDManualSortIDCache starts observing account changes", v12, 2u);
          swift_slowDealloc();
        }

        uint64_t v13 = sub_1005314DC();
        swift_release();
        *(void *)(v7 + 32) = v13;
      }
      swift_unknownObjectRelease();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1001A5DD4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v9 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  sub_1001AA7D8(a1, a2, (uint64_t *)&v9);
  swift_bridgeObjectRelease();
  Swift::Int v6 = sub_1002ED8DC((uint64_t)_swiftEmptyArrayStorage);
  *a3 = sub_1001A00B4(v6, a2, (uint64_t)&v9);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_1001A18C8(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A5EAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void *, uint64_t))
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a2 + 16);
  v10[2] = a1;
  swift_bridgeObjectRetain();
  a4(a3, v10, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A5F34()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDManualSortIDAdapter()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RDManualSortIDAdapter.AccountManualSortIDsOption(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A6064);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDManualSortIDAdapter.AccountManualSortIDsOption()
{
  return &type metadata for RDManualSortIDAdapter.AccountManualSortIDsOption;
}

unint64_t sub_1001A60A0()
{
  unint64_t result = qword_10090E150;
  if (!qword_10090E150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E150);
  }
  return result;
}

unint64_t sub_1001A60F4@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t v7 = __CocoaDictionary.makeIterator()();
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t result = v7 | 0x8000000000000000;
  }
  else
  {
    uint64_t v11 = -1;
    uint64_t v12 = -1 << *(unsigned char *)(result + 32);
    unint64_t v8 = result + 64;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v11 = ~(-1 << v13);
    }
    uint64_t v10 = v11 & *(void *)(result + 64);
  }
  *a4 = result;
  a4[1] = v8;
  a4[2] = v9;
  a4[3] = 0;
  a4[4] = v10;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_1001A618C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v10);
    sub_10009A1B0(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    id v12 = v11;
    goto LABEL_23;
  }
  int64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    unint64_t v15 = *(void *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      uint64_t v9 = (v15 - 1) & v15;
      unint64_t v10 = __clz(__rbit64(v15)) + (v13 << 6);
      int64_t v7 = v13;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      unint64_t v15 = *(void *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v13 = v16;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        unint64_t v15 = *(void *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          int64_t v13 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v16 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          unint64_t v15 = *(void *)(v4 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          int64_t v13 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            unint64_t v15 = *(void *)(v4 + 8 * v13);
            if (v15) {
              goto LABEL_7;
            }
            int64_t v7 = v14 - 1;
            int64_t v17 = v5 + 6;
            while (v14 != v17)
            {
              unint64_t v15 = *(void *)(v4 + 8 * v17++);
              if (v15)
              {
                int64_t v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v18 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1001AD6A8((uint64_t)v24, (uint64_t)v22);
  if (*(void *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    uint64_t v21 = v23;
    v18(v20);
    return sub_1000966BC((uint64_t)v20, &qword_10090E1C0);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1001A6368(uint64_t result)
{
  void (*v11)(uint64_t *__return_ptr, void *);
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  void v22[2];

  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if ((*v1 & 0x8000000000000000) == 0)
  {
    int64_t v5 = v1[3];
    unint64_t v4 = v2[4];
    if (v4)
    {
      uint64_t v6 = (v4 - 1) & v4;
      unint64_t v7 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_4:
      unint64_t v8 = *(void **)(*(void *)(v3 + 48) + 8 * v7);
      uint64_t v9 = *(void *)(*(void *)(v3 + 56) + 8 * v7);
      id v10 = v8;
      swift_retain();
      goto LABEL_5;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v16 = (unint64_t)(v2[2] + 64) >> 6;
    if (v15 >= v16)
    {
      uint64_t v9 = 0;
      unint64_t v8 = 0;
      uint64_t v6 = 0;
      goto LABEL_5;
    }
    int64_t v17 = v2[1];
    uint64_t v18 = *(void *)(v17 + 8 * v15);
    if (v18)
    {
LABEL_14:
      uint64_t v6 = (v18 - 1) & v18;
      unint64_t v7 = __clz(__rbit64(v18)) + (v15 << 6);
      int64_t v5 = v15;
      goto LABEL_4;
    }
    uint64_t v19 = v5 + 2;
    if (v5 + 2 >= v16) {
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(v17 + 8 * v19);
    if (v18)
    {
LABEL_18:
      unint64_t v15 = v19;
      goto LABEL_14;
    }
    if (v5 + 3 < v16)
    {
      uint64_t v18 = *(void *)(v17 + 8 * (v5 + 3));
      if (v18)
      {
        unint64_t v15 = v5 + 3;
        goto LABEL_14;
      }
      uint64_t v19 = v5 + 4;
      if (v5 + 4 >= v16)
      {
        uint64_t v9 = 0;
        unint64_t v8 = 0;
        uint64_t v6 = 0;
        v5 += 3;
LABEL_5:
        v2[3] = v5;
        v2[4] = v6;
        if (v8)
        {
LABEL_6:
          uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v2[5];
          v22[0] = v8;
          v22[1] = v9;
          v11(&v21, v22);
          swift_release();

          return v21;
        }
        return 0;
      }
      uint64_t v18 = *(void *)(v17 + 8 * v19);
      if (v18) {
        goto LABEL_18;
      }
      unint64_t v15 = v5 + 5;
      if (v5 + 5 < v16)
      {
        uint64_t v18 = *(void *)(v17 + 8 * v15);
        if (v18) {
          goto LABEL_14;
        }
        unint64_t v15 = v16 - 1;
        uint64_t v20 = v5 + 6;
        while (v16 != v20)
        {
          uint64_t v18 = *(void *)(v17 + 8 * v20++);
          if (v18)
          {
            unint64_t v15 = v20 - 1;
            goto LABEL_14;
          }
        }
LABEL_30:
        uint64_t v9 = 0;
        unint64_t v8 = 0;
        uint64_t v6 = 0;
        int64_t v5 = v15;
        goto LABEL_5;
      }
    }
    uint64_t v9 = 0;
    unint64_t v8 = 0;
    uint64_t v6 = 0;
    int64_t v5 = v19;
    goto LABEL_5;
  }
  id v12 = (void (*)(void))result;
  uint64_t result = __CocoaDictionary.Iterator.next()();
  if (!result) {
    return result;
  }
  int64_t v14 = v13;
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v8 = (void *)v22[0];
  swift_unknownObjectRelease();
  uint64_t v21 = v14;
  v12(0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v9 = v22[0];
  swift_unknownObjectRelease();
  if (v22[0]) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_1001A65E8()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    return v19;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_1001A6770()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    unint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    _OWORD v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

void sub_1001A6908()
{
  void (*v10)(uint64_t *__return_ptr, void *);
  id v11;
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void **)(*(void *)(v1 + 48) + 8 * v6);
    uint64_t v9 = *(void **)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    uint64_t v11 = v8;
    id v12 = v9;
    v10(&v19, v20);

    return;
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      unint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      int64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          int64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            int64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          int64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            int64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  int64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_1001A6A90(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_1001A6B50(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C476C, sub_1001A7568);
}

uint64_t sub_1001A6B7C(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C4E38, sub_1001A77BC);
}

uint64_t sub_1001A6BA8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t *a4, void (*a5)(void), void (*a6)(unint64_t, uint64_t))
{
  uint64_t v8 = v6;
  uint64_t v11 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v11 < 0) {
      uint64_t v15 = *v6;
    }
    else {
      uint64_t v15 = v11 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v8 = sub_1001A7EEC(v15, result + 1, a4, a5, a6);
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  Swift::Int v18 = *v8;
  *uint64_t v8 = 0x8000000000000000;
  a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v8 = v18;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001A6C8C(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C5BF4, sub_1001A85DC);
}

uint64_t sub_1001A6CB8(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C767C, sub_1001A8CD8);
}

uint64_t sub_1001A6CE4(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C77E0, sub_1001A8F54);
}

uint64_t sub_1001A6D10(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C7954, sub_1001A91A8);
}

uint64_t sub_1001A6D3C(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C7AF4, sub_1001A93FC);
}

uint64_t sub_1001A6D68(uint64_t a1, uint64_t a2)
{
  return sub_1001A6D94(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_1002C8004, sub_1001A9884);
}

uint64_t sub_1001A6D94(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  unint64_t v6 = v4;
  uint64_t v9 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *unint64_t v6 = a4(v11, result + 1);
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v6;
  *unint64_t v6 = 0x8000000000000000;
  a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *unint64_t v6 = v14;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001A6E60(uint64_t a1, uint64_t a2)
{
  return sub_1001A7EEC(a1, a2, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
}

Swift::Int sub_1001A6E94(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_1009146C0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for REMObjectID_Codable();
      do
      {
        swift_dynamicCast();
        type metadata accessor for REMList_Codable();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10030ECB4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A70C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1C8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10030ECC0(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A7314(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E168);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_10090ABC0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10030F64C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A7568(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1B0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_1009168E0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100310344(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A77BC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E170);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&qword_100909B00);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100310B3C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A7A10(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_100913AD0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100310B54(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A7C64(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_1009145A0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_10090DC80);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100310F44(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A7EB8(uint64_t a1, uint64_t a2)
{
  return sub_1001A7EEC(a1, a2, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
}

Swift::Int sub_1001A7EEC(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void), void (*a5)(unint64_t, uint64_t))
{
  if (a2)
  {
    sub_100094134(a3);
    uint64_t v7 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v23 = v7;
    __CocoaDictionary.makeIterator()();
    uint64_t v8 = __CocoaDictionary.Iterator.next()();
    if (v8)
    {
      uint64_t v9 = v8;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        a4(0);
        swift_dynamicCast();
        uint64_t v7 = v23;
        unint64_t v17 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v17)
        {
          a5(v17 + 1, 1);
          uint64_t v7 = v23;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
        uint64_t v11 = v7 + 64;
        uint64_t v12 = -1 << *(unsigned char *)(v7 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1 << v13) & ~*(void *)(v7 + 64 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v7 + 64 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v20 = v14 == v19;
            if (v14 == v19) {
              unint64_t v14 = 0;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v11 + 8 * v14);
          }
          while (v21 == -1);
          unint64_t v15 = __clz(__rbit64(~v21)) + (v14 << 6);
        }
        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
        uint64_t v16 = 8 * v15;
        *(void *)(*(void *)(v7 + 48) + v16) = v22;
        *(void *)(*(void *)(v7 + 56) + v16) = v9;
        ++*(void *)(v7 + 16);
        uint64_t v9 = __CocoaDictionary.Iterator.next()();
      }
      while (v9);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v7;
}

Swift::Int sub_1001A8134(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_100913DD0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&qword_10090B040);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100311FA4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A8388(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1D8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&unk_1009148A0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100312658(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A85DC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_100914B10);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_100914150);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&unk_1009102A0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1003134A4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A8830(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_1009143B0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_10090E198);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10031503C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A8A84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1D0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100315048(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A8CD8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_100913B00);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v17 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for RDManualSortIDPersistenceHost();
      do
      {
        swift_dynamicCast();
        type metadata accessor for RDManualSortIDCache();
        swift_dynamicCast();
        uint64_t v2 = v17;
        unint64_t v5 = *(void *)(v17 + 16);
        if (*(void *)(v17 + 24) <= v5)
        {
          sub_100316804(v5 + 1, 1);
          uint64_t v2 = v17;
        }
        Hasher.init(_seed:)();
        if (*(void *)(v16 + 24))
        {
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        Swift::Int result = Hasher._finalize()();
        uint64_t v7 = v2 + 64;
        uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v9 = result & ~v8;
        unint64_t v10 = v9 >> 6;
        if (((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6))) != 0)
        {
          unint64_t v3 = __clz(__rbit64((-1 << v9) & ~*(void *)(v2 + 64 + 8 * (v9 >> 6)))) | v9 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v8) >> 6;
          do
          {
            if (++v10 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v10 == v12;
            if (v10 == v12) {
              unint64_t v10 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)(v7 + 8 * v10);
          }
          while (v14 == -1);
          unint64_t v3 = __clz(__rbit64(~v14)) + (v10 << 6);
        }
        *(void *)(v7 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v3;
        uint64_t v4 = 8 * v3;
        *(void *)(*(void *)(v2 + 48) + v4) = v16;
        *(void *)(*(void *)(v2 + 56) + v4) = v15;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A8F54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1A8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_100910180);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10030DBF8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A91A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E1A0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&unk_100914440);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100316B3C(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A93FC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134(&qword_10090E190);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, &qword_100914310);
      do
      {
        swift_dynamicCast();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100316B54(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A9630(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_10090E1E0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, (unint64_t *)&unk_100920C30);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1003174C8(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_1001A9884(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100094134((uint64_t *)&unk_100914670);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000963CC(0, (unint64_t *)&qword_100914150);
      do
      {
        swift_dynamicCast();
        sub_1000963CC(0, &qword_100910230);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_100317908(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1001A9AD8(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *a4;
  if ((*a4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v10 = *a4;
    }
    else {
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = __CocoaDictionary.count.getter();
    Swift::Int v14 = sub_1001A7EEC(v10, v11, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
    sub_1001A9E20(a1, a2, a3, 1, &v14, (uint64_t)type metadata accessor for RDElementManualSortID, (void (*)(void))sub_100318554, (void (*)(void))sub_10030DC10);
    if (v4)
    {
      return swift_release();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v14;
    }
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v14 = *a4;
    *a4 = 0x8000000000000000;
    sub_1001A9E20(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v14, (uint64_t)type metadata accessor for RDElementManualSortID, (void (*)(void))sub_100318554, (void (*)(void))sub_10030DC10);
    *a4 = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001A9C7C(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v9 = *a4;
  if ((*a4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v10 = *a4;
    }
    else {
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = __CocoaDictionary.count.getter();
    Swift::Int v14 = sub_1001A7EEC(v10, v11, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
    sub_1001A9E20(a1, a2, a3, 1, &v14, (uint64_t)type metadata accessor for RDAccountManualSortID, (void (*)(void))sub_10031A48C, (void (*)(void))sub_100311CC4);
    if (v4)
    {
      return swift_release();
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v14;
    }
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v14 = *a4;
    *a4 = 0x8000000000000000;
    sub_1001A9E20(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v14, (uint64_t)type metadata accessor for RDAccountManualSortID, (void (*)(void))sub_10031A48C, (void (*)(void))sub_100311CC4);
    *a4 = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001A9E20(unint64_t a1, unint64_t a2, unint64_t a3, char a4, void *a5, uint64_t a6, void (*a7)(void), void (*a8)(void))
{
  sub_1001A60F4(a1, a2, a3, (unint64_t *)&v51);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = sub_1001A6368(a6);
  if (!v13) {
    goto LABEL_24;
  }
  BOOL v15 = (void *)v13;
  uint64_t v16 = v14;
  unint64_t v50 = a7;
  uint64_t v17 = (void *)*a5;
  unint64_t v19 = sub_100306FE8(v13);
  uint64_t v20 = v17[2];
  BOOL v21 = (v18 & 1) == 0;
  if (__OFADD__(v20, v21))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v22 = v18;
  if (v17[3] >= v20 + v21)
  {
    if (a4)
    {
      uint64_t v25 = (void *)*a5;
      if (v18) {
        goto LABEL_9;
      }
    }
    else
    {
      v50();
      uint64_t v25 = (void *)*a5;
      if (v22) {
        goto LABEL_9;
      }
    }
LABEL_11:
    v25[(v19 >> 6) + 8] |= 1 << v19;
    uint64_t v27 = 8 * v19;
    *(void *)(v25[6] + v27) = v15;
    *(void *)(v25[7] + v27) = v16;
    uint64_t v28 = v25[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v25[2] = v30;
LABEL_13:
    uint64_t v31 = sub_1001A6368(a6);
    if (v31)
    {
      uint64_t v33 = (void *)v31;
      uint64_t v34 = v32;
      do
      {
        uint64_t v37 = (void *)*a5;
        unint64_t v39 = sub_100306FE8((uint64_t)v33);
        uint64_t v40 = v37[2];
        BOOL v41 = (v38 & 1) == 0;
        if (__OFADD__(v40, v41)) {
          goto LABEL_25;
        }
        char v42 = v38;
        if (v37[3] < v40 + v41)
        {
          a8();
          unint64_t v43 = sub_100306FE8((uint64_t)v33);
          if ((v42 & 1) != (v44 & 1)) {
            goto LABEL_27;
          }
          unint64_t v39 = v43;
        }
        uint64_t v45 = (void *)*a5;
        if (v42)
        {

          uint64_t v35 = v45[7];
          swift_release();
          *(void *)(v35 + 8 * v39) = v34;
        }
        else
        {
          v45[(v39 >> 6) + 8] |= 1 << v39;
          uint64_t v46 = 8 * v39;
          *(void *)(v45[6] + v46) = v33;
          *(void *)(v45[7] + v46) = v34;
          uint64_t v47 = v45[2];
          BOOL v29 = __OFADD__(v47, 1);
          uint64_t v48 = v47 + 1;
          if (v29) {
            goto LABEL_26;
          }
          v45[2] = v48;
        }
        uint64_t v33 = (void *)sub_1001A6368(a6);
        uint64_t v34 = v36;
      }
      while (v33);
    }
LABEL_24:
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000C1AF8();
    return swift_release();
  }
  a8();
  unint64_t v23 = sub_100306FE8((uint64_t)v15);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v19 = v23;
    uint64_t v25 = (void *)*a5;
    if ((v22 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_9:

    uint64_t v26 = v25[7];
    swift_release();
    *(void *)(v26 + 8 * v19) = v16;
    goto LABEL_13;
  }
LABEL_27:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AA11C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = *(void *)a1;
  a2[1] = v3;
  id v4 = v2;

  return swift_retain();
}

uint64_t sub_1001AA158(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    sub_1000ED098((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v66;
    uint64_t v62 = v67;
    uint64_t v6 = v68;
    uint64_t v7 = v69;
    unint64_t v8 = v70;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v62 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v61 = (unint64_t)(v6 + 64) >> 6;
  unint64_t v63 = a2 & 0xC000000000000001;
  uint64_t v13 = &selRef_intersectsSet_;
  uint64_t v60 = a3;
  uint64_t v59 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v5 < 0)
        {
          if (!__CocoaSet.Iterator.next()()) {
            return sub_1000C1AF8();
          }
          sub_1000963CC(0, (unint64_t *)&qword_10090B040);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v17 = v71;
          swift_unknownObjectRelease();
          uint64_t v16 = v7;
          uint64_t v14 = v8;
          if (!v17) {
            return sub_1000C1AF8();
          }
        }
        else
        {
          if (v8)
          {
            uint64_t v14 = (v8 - 1) & v8;
            unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
            uint64_t v16 = v7;
          }
          else
          {
            int64_t v18 = v7 + 1;
            if (__OFADD__(v7, 1)) {
              goto LABEL_81;
            }
            if (v18 >= v61) {
              return sub_1000C1AF8();
            }
            unint64_t v19 = *(void *)(v62 + 8 * v18);
            uint64_t v16 = v7 + 1;
            if (!v19)
            {
              uint64_t v16 = v7 + 2;
              if (v7 + 2 >= v61) {
                return sub_1000C1AF8();
              }
              unint64_t v19 = *(void *)(v62 + 8 * v16);
              if (!v19)
              {
                uint64_t v16 = v7 + 3;
                if (v7 + 3 >= v61) {
                  return sub_1000C1AF8();
                }
                unint64_t v19 = *(void *)(v62 + 8 * v16);
                if (!v19)
                {
                  uint64_t v16 = v7 + 4;
                  if (v7 + 4 >= v61) {
                    return sub_1000C1AF8();
                  }
                  unint64_t v19 = *(void *)(v62 + 8 * v16);
                  if (!v19)
                  {
                    uint64_t v16 = v7 + 5;
                    if (v7 + 5 >= v61) {
                      return sub_1000C1AF8();
                    }
                    unint64_t v19 = *(void *)(v62 + 8 * v16);
                    if (!v19)
                    {
                      uint64_t v20 = v7 + 6;
                      while (v61 != v20)
                      {
                        unint64_t v19 = *(void *)(v62 + 8 * v20++);
                        if (v19)
                        {
                          uint64_t v16 = v20 - 1;
                          goto LABEL_30;
                        }
                      }
                      return sub_1000C1AF8();
                    }
                  }
                }
              }
            }
LABEL_30:
            uint64_t v14 = (v19 - 1) & v19;
            unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
          }
          id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
          if (!v17) {
            return sub_1000C1AF8();
          }
        }
        id v21 = [v17 v13[446]];
        if (v21) {
          break;
        }

        uint64_t v7 = v16;
        unint64_t v8 = v14;
      }
      char v22 = v21;
      unint64_t v64 = v14;
      uint64_t v65 = v16;
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        if (!v23)
        {
LABEL_75:

          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v23) {
          goto LABEL_75;
        }
      }
      id v24 = v63 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 32);
      uint64_t v25 = v24;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      char v26 = static NSObject.== infix(_:_:)();

      if ((v26 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_54:
      uint64_t v34 = *a3;
      if ((*a3 & 0xC000000000000001) != 0)
      {
        if (v34 >= 0) {
          v34 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v35 = v17;
        id v36 = v22;
        uint64_t v37 = __CocoaDictionary.count.getter();
        if (__OFADD__(v37, 1)) {
          goto LABEL_83;
        }
        *a3 = sub_1001A8134(v34, v37 + 1);
      }
      else
      {
        id v38 = v17;
        id v39 = v22;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v71 = (void *)*a3;
      BOOL v41 = v71;
      *a3 = 0x8000000000000000;
      unint64_t v43 = sub_100306FE8((uint64_t)v22);
      uint64_t v44 = v41[2];
      BOOL v45 = (v42 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45)) {
        goto LABEL_82;
      }
      char v47 = v42;
      if (v41[3] >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_10031A63C();
        }
      }
      else
      {
        sub_100311FA4(v46, isUniquelyReferenced_nonNull_native);
        unint64_t v48 = sub_100306FE8((uint64_t)v22);
        if ((v47 & 1) != (v49 & 1)) {
          goto LABEL_85;
        }
        unint64_t v43 = v48;
      }
      unint64_t v50 = v71;
      if (v47)
      {
        uint64_t v51 = v71[7];

        *(void *)(v51 + 8 * v43) = v17;
      }
      else
      {
        v71[(v43 >> 6) + 8] |= 1 << v43;
        *(void *)(v50[6] + 8 * v43) = v22;
        *(void *)(v50[7] + 8 * v43) = v17;
        uint64_t v52 = v50[2];
        BOOL v53 = __OFADD__(v52, 1);
        uint64_t v54 = v52 + 1;
        if (v53) {
          goto LABEL_84;
        }
        v50[2] = v54;
        id v55 = v22;
      }
      a3 = v60;
      *uint64_t v60 = (uint64_t)v50;

      swift_bridgeObjectRelease();
      id v56 = [v17 account];
      if (v56)
      {
        sub_10031F0C0(&v71, v56);

        unint64_t v57 = v71;
      }
      else
      {
      }
      uint64_t v7 = v65;
      unint64_t v8 = v64;
      uint64_t v13 = &selRef_intersectsSet_;
    }
    if (v23 != 1) {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_52:
    uint64_t v13 = &selRef_intersectsSet_;
LABEL_76:

    unint64_t v8 = v64;
    uint64_t v7 = v65;
  }
  if (v63)
  {
    uint64_t v27 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v28 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        break;
      }
      char v29 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v29) {
        goto LABEL_53;
      }
      ++v27;
      if (v28 == v23) {
        goto LABEL_51;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v30 = 5;
    while (1)
    {
      uint64_t v31 = v30 - 3;
      if (__OFADD__(v30 - 4, 1)) {
        break;
      }
      id v32 = *(id *)(a2 + 8 * v30);
      char v33 = static NSObject.== infix(_:_:)();

      if (v33)
      {
LABEL_53:
        swift_bridgeObjectRelease();
        uint64_t v5 = v59;
        a3 = v60;
        goto LABEL_54;
      }
      ++v30;
      if (v31 == v23)
      {
LABEL_51:

        swift_bridgeObjectRelease();
        uint64_t v5 = v59;
        a3 = v60;
        goto LABEL_52;
      }
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AA7D8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    sub_1000ED098(&qword_10090B678, (unint64_t *)&unk_10090AF40);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v66;
    uint64_t v62 = v67;
    uint64_t v6 = v68;
    uint64_t v7 = v69;
    unint64_t v8 = v70;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v62 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v61 = (unint64_t)(v6 + 64) >> 6;
  unint64_t v63 = a2 & 0xC000000000000001;
  uint64_t v13 = &selRef_intersectsSet_;
  uint64_t v60 = a3;
  uint64_t v59 = v5;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v5 < 0)
        {
          if (!__CocoaSet.Iterator.next()()) {
            return sub_1000C1AF8();
          }
          sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v17 = v71;
          swift_unknownObjectRelease();
          uint64_t v16 = v7;
          uint64_t v14 = v8;
          if (!v17) {
            return sub_1000C1AF8();
          }
        }
        else
        {
          if (v8)
          {
            uint64_t v14 = (v8 - 1) & v8;
            unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
            uint64_t v16 = v7;
          }
          else
          {
            int64_t v18 = v7 + 1;
            if (__OFADD__(v7, 1)) {
              goto LABEL_81;
            }
            if (v18 >= v61) {
              return sub_1000C1AF8();
            }
            unint64_t v19 = *(void *)(v62 + 8 * v18);
            uint64_t v16 = v7 + 1;
            if (!v19)
            {
              uint64_t v16 = v7 + 2;
              if (v7 + 2 >= v61) {
                return sub_1000C1AF8();
              }
              unint64_t v19 = *(void *)(v62 + 8 * v16);
              if (!v19)
              {
                uint64_t v16 = v7 + 3;
                if (v7 + 3 >= v61) {
                  return sub_1000C1AF8();
                }
                unint64_t v19 = *(void *)(v62 + 8 * v16);
                if (!v19)
                {
                  uint64_t v16 = v7 + 4;
                  if (v7 + 4 >= v61) {
                    return sub_1000C1AF8();
                  }
                  unint64_t v19 = *(void *)(v62 + 8 * v16);
                  if (!v19)
                  {
                    uint64_t v16 = v7 + 5;
                    if (v7 + 5 >= v61) {
                      return sub_1000C1AF8();
                    }
                    unint64_t v19 = *(void *)(v62 + 8 * v16);
                    if (!v19)
                    {
                      uint64_t v20 = v7 + 6;
                      while (v61 != v20)
                      {
                        unint64_t v19 = *(void *)(v62 + 8 * v20++);
                        if (v19)
                        {
                          uint64_t v16 = v20 - 1;
                          goto LABEL_30;
                        }
                      }
                      return sub_1000C1AF8();
                    }
                  }
                }
              }
            }
LABEL_30:
            uint64_t v14 = (v19 - 1) & v19;
            unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
          }
          id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
          if (!v17) {
            return sub_1000C1AF8();
          }
        }
        id v21 = [v17 v13[446]];
        if (v21) {
          break;
        }

        uint64_t v7 = v16;
        unint64_t v8 = v14;
      }
      char v22 = v21;
      unint64_t v64 = v14;
      uint64_t v65 = v16;
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        if (!v23)
        {
LABEL_75:

          swift_bridgeObjectRelease();
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v23 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v23) {
          goto LABEL_75;
        }
      }
      id v24 = v63 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 32);
      uint64_t v25 = v24;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      char v26 = static NSObject.== infix(_:_:)();

      if ((v26 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_54:
      uint64_t v34 = *a3;
      if ((*a3 & 0xC000000000000001) != 0)
      {
        if (v34 >= 0) {
          v34 &= 0xFFFFFFFFFFFFFF8uLL;
        }
        id v35 = v17;
        id v36 = v22;
        uint64_t v37 = __CocoaDictionary.count.getter();
        if (__OFADD__(v37, 1)) {
          goto LABEL_83;
        }
        *a3 = sub_1001A7A10(v34, v37 + 1);
      }
      else
      {
        id v38 = v17;
        id v39 = v22;
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v71 = (void *)*a3;
      BOOL v41 = v71;
      *a3 = 0x8000000000000000;
      unint64_t v43 = sub_100306FE8((uint64_t)v22);
      uint64_t v44 = v41[2];
      BOOL v45 = (v42 & 1) == 0;
      uint64_t v46 = v44 + v45;
      if (__OFADD__(v44, v45)) {
        goto LABEL_82;
      }
      char v47 = v42;
      if (v41[3] >= v46)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100319990();
        }
      }
      else
      {
        sub_100310B54(v46, isUniquelyReferenced_nonNull_native);
        unint64_t v48 = sub_100306FE8((uint64_t)v22);
        if ((v47 & 1) != (v49 & 1)) {
          goto LABEL_85;
        }
        unint64_t v43 = v48;
      }
      unint64_t v50 = v71;
      if (v47)
      {
        uint64_t v51 = v71[7];

        *(void *)(v51 + 8 * v43) = v17;
      }
      else
      {
        v71[(v43 >> 6) + 8] |= 1 << v43;
        *(void *)(v50[6] + 8 * v43) = v22;
        *(void *)(v50[7] + 8 * v43) = v17;
        uint64_t v52 = v50[2];
        BOOL v53 = __OFADD__(v52, 1);
        uint64_t v54 = v52 + 1;
        if (v53) {
          goto LABEL_84;
        }
        v50[2] = v54;
        id v55 = v22;
      }
      a3 = v60;
      *uint64_t v60 = (uint64_t)v50;

      swift_bridgeObjectRelease();
      id v56 = [v17 account];
      if (v56)
      {
        sub_10031F0C0(&v71, v56);

        unint64_t v57 = v71;
      }
      else
      {
      }
      uint64_t v7 = v65;
      unint64_t v8 = v64;
      uint64_t v13 = &selRef_intersectsSet_;
    }
    if (v23 != 1) {
      break;
    }

    swift_bridgeObjectRelease();
LABEL_52:
    uint64_t v13 = &selRef_intersectsSet_;
LABEL_76:

    unint64_t v8 = v64;
    uint64_t v7 = v65;
  }
  if (v63)
  {
    uint64_t v27 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v28 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        break;
      }
      char v29 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v29) {
        goto LABEL_53;
      }
      ++v27;
      if (v28 == v23) {
        goto LABEL_51;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v30 = 5;
    while (1)
    {
      uint64_t v31 = v30 - 3;
      if (__OFADD__(v30 - 4, 1)) {
        break;
      }
      id v32 = *(id *)(a2 + 8 * v30);
      char v33 = static NSObject.== infix(_:_:)();

      if (v33)
      {
LABEL_53:
        swift_bridgeObjectRelease();
        uint64_t v5 = v59;
        a3 = v60;
        goto LABEL_54;
      }
      ++v30;
      if (v31 == v23)
      {
LABEL_51:

        swift_bridgeObjectRelease();
        uint64_t v5 = v59;
        a3 = v60;
        goto LABEL_52;
      }
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AAE58()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AAE94()
{
  return sub_1001A5DD4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1001AAEA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AAEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001AAEC0()
{
  return swift_release();
}

uint64_t sub_1001AAEC8(uint64_t a1)
{
  return sub_1001A5EAC(a1, v1, (uint64_t)sub_1001AAF54, (void (*)(uint64_t, void *, uint64_t))sub_100236E70);
}

uint64_t sub_1001AAF0C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AAF48()
{
  return sub_100531128(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

id sub_1001AAF54(void *a1)
{
  return sub_1001AD64C(a1);
}

uint64_t sub_1001AAF70()
{
  return sub_1001A5AF0(*(void *)(v0 + 16), *(id **)(v0 + 24), *(uint64_t **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001AAF7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AAF8C(uint64_t a1)
{
  return sub_1001A5EAC(a1, v1, (uint64_t)sub_1001AAFD4, (void (*)(uint64_t, void *, uint64_t))sub_1002371A0);
}

uint64_t sub_1001AAFD4(uint64_t a1)
{
  return sub_1001A5BD0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001AAFF0(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v63 = a1;
  uint64_t v5 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v6 = *(void **)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v62 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  unint64_t v70 = (char *)&v57 - v12;
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v64 = a2 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v67 = (unint64_t)(v14 + 63) >> 6;
  char v74 = v6 + 2;
  uint64_t v72 = v6 + 4;
  uint64_t v17 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v65 = a3 & 0xFFFFFFFFFFFFFF8;
  if (a3 < 0) {
    uint64_t v17 = a3;
  }
  uint64_t v57 = v17;
  unint64_t v61 = a3 & 0xC000000000000001;
  uint64_t v59 = (void (**)(unint64_t, char *, uint64_t))(v6 + 5);
  uint64_t v69 = (void (**)(char *, uint64_t))(v6 + 1);
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v75 = a3;
  uint64_t v58 = a2;
  uint64_t v66 = v5;
  uint64_t v60 = v6;
  uint64_t v68 = v11;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v76 = v18;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_26;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      goto LABEL_65;
    }
    if (v21 >= v67)
    {
LABEL_62:
      swift_release();
      return (uint64_t)v63;
    }
    unint64_t v22 = *(void *)(v64 + 8 * v21);
    int64_t v23 = v18 + 1;
    if (!v22)
    {
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v67) {
        goto LABEL_62;
      }
      unint64_t v22 = *(void *)(v64 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v18 + 3;
        if (v18 + 3 >= v67) {
          goto LABEL_62;
        }
        unint64_t v22 = *(void *)(v64 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v18 + 4;
          if (v18 + 4 >= v67) {
            goto LABEL_62;
          }
          unint64_t v22 = *(void *)(v64 + 8 * v23);
          if (!v22)
          {
            uint64_t v24 = v18 + 5;
            if (v18 + 5 >= v67) {
              goto LABEL_62;
            }
            unint64_t v22 = *(void *)(v64 + 8 * v24);
            int64_t v23 = v18 + 5;
            if (!v22) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v16 = (v22 - 1) & v22;
    int64_t v76 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_26:
    uint64_t v25 = *(void *)(a2 + 48);
    uint64_t v73 = v6[9];
    char v26 = (void (*)(char *, unint64_t, uint64_t))v6[2];
    uint64_t v27 = v70;
    v26(v70, v25 + v73 * v20, v5);
    uint64_t v71 = (void (*)(char *, char *, uint64_t))v6[4];
    v71(v11, v27, v5);
    uint64_t v28 = REMManualOrdering.PinnedList.elementObjectID.getter();
    if (v28)
    {
      char v29 = (void *)v28;
      if ((unint64_t)a3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        if (v30)
        {
LABEL_29:
          if (v61) {
            id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v31 = *(id *)(a3 + 32);
          }
          id v32 = v31;
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          char v33 = static NSObject.== infix(_:_:)();

          if (v33)
          {
            swift_bridgeObjectRelease();
LABEL_48:
            v26(v62, (unint64_t)v68, v66);
            BOOL v41 = v63;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v77 = v41;
            unint64_t v44 = sub_100306FE8((uint64_t)v29);
            uint64_t v45 = v41[2];
            BOOL v46 = (v43 & 1) == 0;
            uint64_t v47 = v45 + v46;
            if (__OFADD__(v45, v46)) {
              goto LABEL_66;
            }
            char v48 = v43;
            if (v41[3] >= v47)
            {
              uint64_t v5 = v66;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_10031A648();
              }
            }
            else
            {
              sub_100311FB0(v47, isUniquelyReferenced_nonNull_native);
              unint64_t v49 = sub_100306FE8((uint64_t)v29);
              if ((v48 & 1) != (v50 & 1)) {
                goto LABEL_69;
              }
              unint64_t v44 = v49;
              uint64_t v5 = v66;
            }
            uint64_t v6 = v60;
            uint64_t v51 = v77;
            if (v48)
            {
              (*v59)(v77[7] + v44 * v73, v62, v5);
            }
            else
            {
              v77[(v44 >> 6) + 8] |= 1 << v44;
              *(void *)(v51[6] + 8 * v44) = v29;
              v71((char *)(v51[7] + v44 * v73), v62, v5);
              uint64_t v52 = v51[2];
              BOOL v53 = __OFADD__(v52, 1);
              uint64_t v54 = v52 + 1;
              if (v53) {
                goto LABEL_67;
              }
              v51[2] = v54;
              id v55 = v29;
            }
            unint64_t v63 = v77;

            swift_bridgeObjectRelease();
            a3 = v75;
          }
          else
          {
            if (v30 != 1)
            {
              if (v61)
              {
                uint64_t v34 = 1;
                while (1)
                {
                  specialized _ArrayBuffer._getElementSlowPath(_:)();
                  uint64_t v35 = v34 + 1;
                  if (__OFADD__(v34, 1)) {
                    break;
                  }
                  char v36 = static NSObject.== infix(_:_:)();
                  swift_unknownObjectRelease();
                  if (v36) {
                    goto LABEL_47;
                  }
                  ++v34;
                  if (v35 == v30) {
                    goto LABEL_45;
                  }
                }
                __break(1u);
              }
              else
              {
                uint64_t v37 = 5;
                while (1)
                {
                  uint64_t v38 = v37 - 3;
                  if (__OFADD__(v37 - 4, 1)) {
                    break;
                  }
                  id v39 = *(id *)(v75 + 8 * v37);
                  char v40 = static NSObject.== infix(_:_:)();

                  if (v40)
                  {
LABEL_47:
                    swift_bridgeObjectRelease();
                    a2 = v58;
                    goto LABEL_48;
                  }
                  ++v37;
                  if (v38 == v30)
                  {
LABEL_45:

                    a3 = v75;
                    swift_bridgeObjectRelease();
                    a2 = v58;
                    goto LABEL_46;
                  }
                }
              }
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
              goto LABEL_68;
            }

            swift_bridgeObjectRelease();
LABEL_46:
            uint64_t v5 = v66;
            uint64_t v6 = v60;
          }
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v30 = *(void *)(v65 + 16);
        swift_bridgeObjectRetain();
        if (v30) {
          goto LABEL_29;
        }
      }

      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v11 = v68;
    }
    int64_t v18 = v76;
    (*v69)(v11, v5);
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v67) {
      goto LABEL_62;
    }
    unint64_t v22 = *(void *)(v64 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_68:
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AB624(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  id v68 = a4;
  uint64_t v80 = a1;
  uint64_t v62 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  unint64_t v61 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134(&qword_10090E188);
  __chkstk_darwin(v10 - 8);
  uint64_t v72 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v73 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  int64_t v67 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v79 = (char *)&v58 - v15;
  if (a2 >> 62)
  {
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_3;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    return v80;
  }
  uint64_t v16 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_45;
  }
LABEL_3:
  uint64_t v58 = v5;
  uint64_t v82 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56);
  unint64_t v83 = a2 & 0xC000000000000001;
  v77 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  v78 = (void (**)(char *, char *, uint64_t))(v73 + 16);
  uint64_t v65 = (void (**)(char *, uint64_t, uint64_t))(v73 + 32);
  uint64_t v60 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v64 = (void (**)(char *, uint64_t))(v73 + 8);
  uint64_t v59 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v17 = 4;
  unint64_t v63 = a2;
  uint64_t v5 = (uint64_t)v72;
  uint64_t v66 = a3;
  uint64_t v81 = v16;
  while (1)
  {
    uint64_t v8 = v17 - 4;
    if (v83)
    {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v20 = v17 - 3;
      if (__OFADD__(v8, 1)) {
        goto LABEL_42;
      }
    }
    else
    {
      id v19 = *(id *)(a2 + 8 * v17);
      uint64_t v20 = v17 - 3;
      if (__OFADD__(v8, 1))
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
    }
    uint64_t v21 = *(void *)(a3 + 16);
    id v84 = v19;
    if (v21) {
      break;
    }
    (*v82)(v5, 1, 1, v12);
LABEL_5:
    sub_1000966BC(v5, &qword_10090E188);
    uint64_t v18 = v81;
LABEL_6:

    ++v17;
    if (v20 == v18) {
      goto LABEL_45;
    }
  }
  id v22 = v19;
  unint64_t v23 = sub_100306FE8((uint64_t)v22);
  if (v24)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v73 + 16))(v5, *(void *)(a3 + 56) + *(void *)(v73 + 72) * v23, v12);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v25 = 1;
  }
  (*v82)(v5, v25, 1, v12);

  if ((*v77)(v5, 1, v12) == 1) {
    goto LABEL_5;
  }
  char v26 = v79;
  (*v65)(v79, v5, v12);
  uint64_t v27 = v67;
  (*v78)(v67, v26, v12);
  id v76 = v22;
  id v28 = v68;
  char v29 = (void *)REMManualOrdering.PinnedList.elementObjectID.getter();
  uint64_t v30 = v64;
  uint64_t v75 = (unint64_t)v64 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  if (v29)
  {
    id v31 = v29;
    unint64_t v71 = (unint64_t)v28;
    id v32 = v64;
    id v33 = [v29 uuid];
    uint64_t v34 = v61;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = UUID.uuidString.getter();
    uint64_t v69 = v36;
    uint64_t v70 = v35;
    uint64_t v37 = v62;
    (*v60)(v34, v62);
    id v38 = [v31 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    char v74 = *v32;
    v74(v27, v12);
    type metadata accessor for RDElementManualSortID();
    uint64_t v5 = swift_allocObject();
    uint64_t v39 = v69;
    *(void *)(v5 + 16) = v70;
    *(void *)(v5 + 24) = v39;
    (*v59)(v5 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_localUUID, v34, v37);
    *(void *)(v5 + OBJC_IVAR____TtC7remindd21RDElementManualSortID_accountID) = v71;
    uint64_t v8 = v80;
    if ((v80 & 0xC000000000000001) != 0)
    {
      if (v80 >= 0) {
        uint64_t v8 = v80 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v40 = __CocoaDictionary.count.getter();
      a3 = v66;
      uint64_t v18 = v81;
      a2 = (unint64_t)v76;
      if (__OFADD__(v40, 1)) {
        goto LABEL_43;
      }
      uint64_t v8 = sub_1001A7EEC(v8, v40 + 1, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
    }
    else
    {
      a3 = v66;
      uint64_t v18 = v81;
      a2 = (unint64_t)v76;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v85 = v8;
    sub_1002C561C(v5, (void *)a2, isUniquelyReferenced_nonNull_native);
    Swift::Int v46 = v85;

    swift_bridgeObjectRelease();
    a2 = v63;
    goto LABEL_40;
  }

  char v74 = *v30;
  v74(v27, v12);
  Swift::Int v41 = v80;
  if ((v80 & 0xC000000000000001) == 0)
  {
    swift_bridgeObjectRetain();
    id v53 = v76;
    unint64_t v71 = sub_100306FE8((uint64_t)v76);
    char v55 = v54;
    swift_bridgeObjectRelease();
    a3 = v66;
    if (v55)
    {
      char v56 = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v85 = v41;
      if ((v56 & 1) == 0)
      {
        sub_100318554();
        Swift::Int v41 = v85;
      }
      unint64_t v57 = v71;

      sub_1002C2188(v57);
      Swift::Int v46 = v41;
      swift_release();

      swift_bridgeObjectRelease();
      goto LABEL_39;
    }

    goto LABEL_38;
  }
  if (v80 < 0) {
    uint64_t v42 = v80;
  }
  else {
    uint64_t v42 = v80 & 0xFFFFFFFFFFFFFF8;
  }
  id v43 = v76;
  swift_bridgeObjectRetain();
  uint64_t v44 = __CocoaDictionary.lookup(_:)();
  id v76 = v43;

  a3 = v66;
  if (!v44)
  {

    swift_bridgeObjectRelease();
LABEL_38:
    Swift::Int v46 = v41;
    goto LABEL_39;
  }
  swift_unknownObjectRelease();
  uint64_t v45 = __CocoaDictionary.count.getter();
  Swift::Int v46 = sub_1001A7EEC(v42, v45, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
  swift_retain();
  id v47 = v76;
  unint64_t v48 = sub_100306FE8((uint64_t)v76);
  char v50 = v49;
  uint64_t result = swift_release();
  if (v50)
  {

    sub_1002C2188(v48);
    swift_release();

    swift_bridgeObjectRelease();
    a2 = v63;
LABEL_39:
    uint64_t v18 = v81;
LABEL_40:
    uint64_t v80 = v46;
    v74(v79, v12);
    uint64_t v5 = (uint64_t)v72;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001ABE3C(Swift::Int a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t isUniquelyReferenced_nonNull_native = a2;
  if (a2 >> 62)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
LABEL_57:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_57;
  }
LABEL_3:
  unint64_t v56 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  uint64_t v8 = 4;
  uint64_t v51 = isUniquelyReferenced_nonNull_native;
  unint64_t v52 = a3;
  uint64_t v53 = v7;
  while (1)
  {
    if (v56) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v8);
    }
    uint64_t v10 = v9;
    uint64_t v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    uint64_t v12 = *(void *)a3;
    if ((*(void *)a3 & 0xC000000000000001) == 0) {
      break;
    }
    id v13 = v9;
    uint64_t v14 = __CocoaDictionary.lookup(_:)();
    if (!v14) {
      goto LABEL_4;
    }
    v57[6] = v14;
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = (id)v57[0];
    swift_unknownObjectRelease();

    if (v15) {
      goto LABEL_18;
    }
LABEL_5:

LABEL_6:
    ++v8;
    if (v11 == v7) {
      goto LABEL_57;
    }
  }
  if (!*(void *)(v12 + 16)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_100306FE8((uint64_t)v9);
  if ((v17 & 1) == 0)
  {
LABEL_4:

    goto LABEL_5;
  }
  id v15 = *(id *)(*(void *)(v12 + 56) + 8 * v16);

  if (!v15) {
    goto LABEL_5;
  }
LABEL_18:
  sub_1001AD554(*(void *)(a4 + 16) + 40, (uint64_t)v57);
  id v18 = v10;
  id v19 = v15;
  uint64_t v20 = sub_10067DE1C(v19, (uint64_t)v57);
  unint64_t v21 = a1 & 0xC000000000000001;
  char v55 = v19;
  if (v20)
  {
    uint64_t v22 = v20;
    if (v21)
    {
      if (a1 < 0) {
        uint64_t v23 = a1;
      }
      else {
        uint64_t v23 = a1 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v24 = __CocoaDictionary.count.getter();
      if (__OFADD__(v24, 1)) {
        goto LABEL_54;
      }
      a1 = sub_1001A7EEC(v23, v24 + 1, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v57[0] = a1;
    a3 = sub_100306FE8((uint64_t)v18);
    uint64_t v26 = *(void *)(a1 + 16);
    BOOL v27 = (v25 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      goto LABEL_53;
    }
    char v29 = v25;
    if (*(void *)(a1 + 24) >= v28)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100318554();
      }
    }
    else
    {
      sub_10030DC10(v28, isUniquelyReferenced_nonNull_native);
      unint64_t v30 = sub_100306FE8((uint64_t)v18);
      if ((v29 & 1) != (v31 & 1)) {
        goto LABEL_59;
      }
      a3 = v30;
    }
    uint64_t isUniquelyReferenced_nonNull_native = v51;
    a1 = v57[0];
    if (v29)
    {
      uint64_t v40 = *(void *)(v57[0] + 56);
      swift_release();
      *(void *)(v40 + 8 * a3) = v22;
    }
    else
    {
      *(void *)(v57[0] + 8 * (a3 >> 6) + 64) |= 1 << a3;
      uint64_t v41 = 8 * a3;
      *(void *)(*(void *)(a1 + 48) + v41) = v18;
      *(void *)(*(void *)(a1 + 56) + v41) = v22;
      uint64_t v42 = *(void *)(a1 + 16);
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_55;
      }
      *(void *)(a1 + 16) = v44;
      id v45 = v18;
    }

    swift_bridgeObjectRelease();
    a3 = v52;
    goto LABEL_50;
  }
  if (!v21)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_100306FE8((uint64_t)v18);
    char v48 = v47;
    swift_bridgeObjectRelease();
    if (v48)
    {
      char v49 = swift_isUniquelyReferenced_nonNull_native();
      v57[0] = a1;
      if ((v49 & 1) == 0)
      {
        sub_100318554();
        a1 = v57[0];
      }

      sub_1002C2188(v46);
      swift_release();

LABEL_48:
      swift_bridgeObjectRelease();
    }
    else
    {
    }
LABEL_50:
    uint64_t v7 = v53;
    goto LABEL_6;
  }
  if (a1 < 0) {
    uint64_t v32 = a1;
  }
  else {
    uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  id v33 = v18;
  swift_bridgeObjectRetain();
  uint64_t v34 = __CocoaDictionary.lookup(_:)();

  if (!v34)
  {

    goto LABEL_48;
  }
  swift_unknownObjectRelease();
  uint64_t v35 = __CocoaDictionary.count.getter();
  Swift::Int v36 = sub_1001A7EEC(v32, v35, &qword_10090E158, (void (*)(void))type metadata accessor for RDElementManualSortID, (void (*)(unint64_t, uint64_t))sub_10030DC10);
  swift_retain();
  unint64_t v37 = sub_100306FE8((uint64_t)v33);
  char v39 = v38;
  swift_release();
  uint64_t v7 = v53;
  if (v39)
  {

    sub_1002C2188(v37);
    swift_release();

    swift_bridgeObjectRelease();
    a1 = v36;
    a3 = v52;
    goto LABEL_6;
  }
  __break(1u);
LABEL_59:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001AC3A8(Swift::Int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = a2;
  if ((a2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, &qword_10090ABC0);
    sub_1000ED098(&qword_10090B670, &qword_10090ABC0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v61;
    uint64_t v57 = v62;
    uint64_t v7 = v63;
    uint64_t v6 = v64;
    unint64_t v8 = v65;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v57 = a2 + 56;
    uint64_t v7 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v56 = (unint64_t)(v7 + 64) >> 6;
  unint64_t v58 = a3 & 0xC000000000000001;
  uint64_t v54 = v4;
LABEL_8:
  Swift::Int v55 = a1;
  while (1)
  {
    uint64_t v12 = v6;
    if ((v4 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_75;
    }
    sub_1000963CC(0, &qword_10090ABC0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v66;
    swift_unknownObjectRelease();
    if (!v66) {
      goto LABEL_75;
    }
LABEL_35:
    id v19 = [v15 remObjectID];
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v20 = v19;
    unint64_t v59 = v8;
    uint64_t v60 = v6;
    if (a3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      if (v21)
      {
LABEL_38:
        if (v58) {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v22 = *(id *)(a3 + 32);
        }
        uint64_t v23 = v22;
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        char v24 = static NSObject.== infix(_:_:)();

        if (v24)
        {
          swift_bridgeObjectRelease();
          if ((a1 & 0xC000000000000001) != 0)
          {
LABEL_57:
            if (a1 < 0) {
              uint64_t v32 = a1;
            }
            else {
              uint64_t v32 = a1 & 0xFFFFFFFFFFFFFF8;
            }
            id v33 = v20;
            id v34 = v15;
            uint64_t v35 = __CocoaDictionary.count.getter();
            if (__OFADD__(v35, 1)) {
              goto LABEL_80;
            }
            a1 = sub_1001A7314(v32, v35 + 1);
          }
          else
          {
LABEL_63:
            id v36 = v20;
            id v37 = v15;
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v66 = (void *)a1;
          unint64_t v40 = sub_100306FE8((uint64_t)v20);
          uint64_t v41 = *(void *)(a1 + 16);
          BOOL v42 = (v39 & 1) == 0;
          uint64_t v43 = v41 + v42;
          if (!__OFADD__(v41, v42))
          {
            char v44 = v39;
            if (*(void *)(a1 + 24) >= v43)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_100319158();
              }
            }
            else
            {
              sub_10030F64C(v43, isUniquelyReferenced_nonNull_native);
              unint64_t v45 = sub_100306FE8((uint64_t)v20);
              if ((v44 & 1) != (v46 & 1))
              {
LABEL_82:
                uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return result;
              }
              unint64_t v40 = v45;
            }
            uint64_t v4 = v54;
            if (v44)
            {
              uint64_t v47 = *(void *)(a1 + 56);

              *(void *)(v47 + 8 * v40) = v15;
            }
            else
            {
              *(void *)(a1 + 8 * (v40 >> 6) + 64) |= 1 << v40;
              uint64_t v48 = 8 * v40;
              *(void *)(*(void *)(a1 + 48) + v48) = v20;
              *(void *)(*(void *)(a1 + 56) + v48) = v15;
              uint64_t v49 = *(void *)(a1 + 16);
              BOOL v50 = __OFADD__(v49, 1);
              uint64_t v51 = v49 + 1;
              if (v50)
              {
LABEL_81:
                __break(1u);
                goto LABEL_82;
              }
              *(void *)(a1 + 16) = v51;
              id v52 = v20;
            }

            swift_bridgeObjectRelease();
            unint64_t v8 = v59;
            uint64_t v6 = v60;
            goto LABEL_8;
          }
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
        if (v21 != 1)
        {
          if (v58)
          {
            uint64_t v25 = 1;
            while (1)
            {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v26 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              char v27 = static NSObject.== infix(_:_:)();
              swift_unknownObjectRelease();
              if (v27) {
                goto LABEL_56;
              }
              ++v25;
              if (v26 == v21) {
                goto LABEL_52;
              }
            }
            __break(1u);
          }
          else
          {
            uint64_t v28 = 5;
            while (1)
            {
              uint64_t v29 = v28 - 3;
              if (__OFADD__(v28 - 4, 1)) {
                break;
              }
              id v30 = *(id *)(a3 + 8 * v28);
              char v31 = static NSObject.== infix(_:_:)();

              if (v31)
              {
LABEL_56:
                swift_bridgeObjectRelease();
                a1 = v55;
                if ((v55 & 0xC000000000000001) == 0) {
                  goto LABEL_63;
                }
                goto LABEL_57;
              }
              ++v28;
              if (v29 == v21)
              {
LABEL_52:

                swift_bridgeObjectRelease();
                uint64_t v4 = v54;
                a1 = v55;
                goto LABEL_10;
              }
            }
          }
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
      }
    }
    else
    {
      uint64_t v21 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v21) {
        goto LABEL_38;
      }
    }

    swift_bridgeObjectRelease();
LABEL_10:
    unint64_t v8 = v59;
    uint64_t v6 = v60;
LABEL_11:
  }
  if (v8)
  {
    unint64_t v13 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v14 = v13 | (v6 << 6);
    goto LABEL_34;
  }
  int64_t v16 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_78;
  }
  if (v16 >= v56) {
    goto LABEL_75;
  }
  unint64_t v17 = *(void *)(v57 + 8 * v16);
  ++v6;
  if (v17) {
    goto LABEL_33;
  }
  uint64_t v6 = v12 + 2;
  if (v12 + 2 >= v56) {
    goto LABEL_75;
  }
  unint64_t v17 = *(void *)(v57 + 8 * v6);
  if (v17) {
    goto LABEL_33;
  }
  uint64_t v6 = v12 + 3;
  if (v12 + 3 >= v56) {
    goto LABEL_75;
  }
  unint64_t v17 = *(void *)(v57 + 8 * v6);
  if (v17) {
    goto LABEL_33;
  }
  uint64_t v6 = v12 + 4;
  if (v12 + 4 >= v56) {
    goto LABEL_75;
  }
  unint64_t v17 = *(void *)(v57 + 8 * v6);
  if (v17) {
    goto LABEL_33;
  }
  uint64_t v6 = v12 + 5;
  if (v12 + 5 >= v56) {
    goto LABEL_75;
  }
  unint64_t v17 = *(void *)(v57 + 8 * v6);
  if (v17)
  {
LABEL_33:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_34:
    id v15 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    if (!v15) {
      goto LABEL_75;
    }
    goto LABEL_35;
  }
  uint64_t v18 = v12 + 6;
  while (v56 != v18)
  {
    unint64_t v17 = *(void *)(v57 + 8 * v18++);
    if (v17)
    {
      uint64_t v6 = v18 - 1;
      goto LABEL_33;
    }
  }
LABEL_75:
  sub_1000C1AF8();
  return a1;
}

uint64_t sub_1001AC9B8(uint64_t a1, id *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (unint64_t)a2;
  if ((unint64_t)a2 >> 62)
  {
LABEL_55:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_56:
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v6 = *(void *)(((unint64_t)a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_56;
  }
LABEL_3:
  unint64_t v7 = v5 & 0xC000000000000001;
  unint64_t v58 = a3 & 0xC000000000000001;
  uint64_t v8 = 4;
  id v52 = (id *)v5;
  uint64_t v53 = v6;
  uint64_t v54 = a3;
  unint64_t v55 = v5 & 0xC000000000000001;
  while (1)
  {
    if (v7) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v5 + 8 * v8);
    }
    uint64_t v10 = v9;
    uint64_t v11 = v8 - 3;
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (!v58) {
      break;
    }
    id v12 = v9;
    if (!__CocoaDictionary.lookup(_:)()) {
      goto LABEL_4;
    }
    sub_1000963CC(0, &qword_10090ABC0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v13 = v59;
    swift_unknownObjectRelease();

    if (v13) {
      goto LABEL_18;
    }
LABEL_5:

LABEL_6:
    ++v8;
    if (v11 == v6) {
      goto LABEL_56;
    }
  }
  if (!*(void *)(a3 + 16)) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_100306FE8((uint64_t)v9);
  if ((v15 & 1) == 0)
  {
LABEL_4:

    goto LABEL_5;
  }
  id v13 = *(id *)(*(void *)(a3 + 56) + 8 * v14);

  if (!v13) {
    goto LABEL_5;
  }
LABEL_18:
  type metadata accessor for RDAccountManualSortID();
  int64_t v16 = *(void **)(a4 + 16);
  id v17 = v10;
  swift_retain();
  id v18 = v13;
  uint64_t v19 = sub_10051A158(v18, v16);
  a3 = a1;
  unint64_t v20 = a1 & 0xC000000000000001;
  if (v19)
  {
    uint64_t v21 = v19;
    if (v20)
    {
      if (a1 >= 0) {
        a3 = a1 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v22 = __CocoaDictionary.count.getter();
      if (__OFADD__(v22, 1)) {
        goto LABEL_53;
      }
      unint64_t v5 = (unint64_t)v18;
      a3 = sub_1001A7EEC(a3, v22 + 1, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
    }
    else
    {
      unint64_t v5 = (unint64_t)v18;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v59 = (void *)a3;
    unint64_t v32 = sub_100306FE8((uint64_t)v17);
    uint64_t v33 = *(void *)(a3 + 16);
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      goto LABEL_52;
    }
    char v36 = v31;
    if (*(void *)(a3 + 24) >= v35)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        a3 = (uint64_t)&v59;
        sub_10031A48C();
      }
    }
    else
    {
      sub_100311CC4(v35, isUniquelyReferenced_nonNull_native);
      a3 = (uint64_t)v59;
      unint64_t v37 = sub_100306FE8((uint64_t)v17);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_58;
      }
      unint64_t v32 = v37;
    }
    unint64_t v7 = v55;
    char v39 = v59;
    a1 = (uint64_t)v59;
    if (v36)
    {
      uint64_t v40 = v59[7];
      swift_release();
      *(void *)(v40 + 8 * v32) = v21;
    }
    else
    {
      v59[(v32 >> 6) + 8] |= 1 << v32;
      uint64_t v41 = 8 * v32;
      *(void *)(v39[6] + v41) = v17;
      *(void *)(v39[7] + v41) = v21;
      uint64_t v42 = v39[2];
      BOOL v43 = __OFADD__(v42, 1);
      uint64_t v44 = v42 + 1;
      if (v43) {
        goto LABEL_54;
      }
      v39[2] = v44;
      id v45 = v17;
    }

    swift_bridgeObjectRelease();
    unint64_t v5 = (unint64_t)v52;
    goto LABEL_42;
  }
  if (!v20)
  {
    swift_bridgeObjectRetain();
    unint64_t v46 = sub_100306FE8((uint64_t)v17);
    char v48 = v47;
    swift_bridgeObjectRelease();
    unint64_t v7 = v55;
    if (v48)
    {
      char v49 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v59 = (void *)a1;
      uint64_t v50 = a1;
      if ((v49 & 1) == 0)
      {
        sub_10031A48C();
        uint64_t v50 = (uint64_t)v59;
      }

      a1 = v50;
      sub_1002C2188(v46);

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
    }
LABEL_42:
    uint64_t v6 = v53;
    a3 = v54;
    goto LABEL_6;
  }
  if (a1 >= 0) {
    a3 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  id v23 = v17;
  swift_bridgeObjectRetain();
  uint64_t v24 = __CocoaDictionary.lookup(_:)();

  if (!v24)
  {

    swift_bridgeObjectRelease();
    goto LABEL_48;
  }
  swift_unknownObjectRelease();
  uint64_t v25 = __CocoaDictionary.count.getter();
  Swift::Int v26 = sub_1001A7EEC(a3, v25, &qword_10090E160, (void (*)(void))type metadata accessor for RDAccountManualSortID, (void (*)(unint64_t, uint64_t))sub_100311CC4);
  swift_retain();
  unint64_t v27 = sub_100306FE8((uint64_t)v23);
  char v29 = v28;
  swift_release();
  if (v29)
  {

    sub_1002C2188(v27);
    swift_release();

    swift_bridgeObjectRelease();
    a1 = v26;
LABEL_48:
    uint64_t v6 = v53;
    a3 = v54;
    unint64_t v7 = v55;
    goto LABEL_6;
  }
  __break(1u);
LABEL_58:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001ACF58(uint64_t a1)
{
}

uint64_t sub_1001ACF74()
{
  return sub_10053111C(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001ACF80()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001ACF90(void **a1)
{
  sub_1001A585C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001ACFB4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001ACFFC(uint64_t a1)
{
}

void sub_1001AD014(uint64_t a1, void (*a2)(id *))
{
  uint64_t v3 = v2[2];
  uint64_t v4 = v2[3] + 16;
  uint64_t v5 = v2[4] + 16;
  v6[2] = a1;
  v6[3] = v4;
  v6[4] = v5;
  sub_100236E9C(a2, (uint64_t)v6, v3);
}

uint64_t sub_1001AD068()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001AD078(void *a1)
{
  sub_1001A59B0(a1, *(void **)(v1 + 16));
}

void sub_1001AD098()
{
  sub_1001A3644(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(uint64_t **)(v0 + 56));
}

unint64_t sub_1001AD0BC()
{
  unint64_t result = qword_10090E180;
  if (!qword_10090E180)
  {
    sub_100096058(&qword_10090E178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E180);
  }
  return result;
}

char *sub_1001AD118(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v40 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v34 - v9;
  unint64_t result = (char *)_swiftEmptyArrayStorage;
  char v47 = (char *)_swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    v34[0] = v2;
    uint64_t v13 = 0;
    int64_t v16 = *(void (**)(void, void, void))(v6 + 16);
    uint64_t v15 = v6 + 16;
    unint64_t v14 = v16;
    unint64_t v17 = (*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64);
    v34[1] = v15;
    unint64_t v35 = v17;
    uint64_t v45 = a1 + v17;
    uint64_t v46 = *(void *)(v15 + 56);
    uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0) {
      uint64_t v18 = a2;
    }
    uint64_t v36 = v18;
    unint64_t v37 = v14;
    unint64_t v42 = a2 & 0xC000000000000001;
    uint64_t v43 = a2 + 56;
    uint64_t v38 = v12;
    char v39 = (void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v44 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v41 = a2;
    while (1)
    {
      v14(v10, v45 + v46 * v13, v5);
      uint64_t v19 = REMManualOrdering.PinnedList.elementObjectID.getter();
      if (v19)
      {
        unint64_t v20 = (void *)v19;
        if (v42)
        {
          char v21 = __CocoaSet.contains(_:)();

          if (v21) {
            goto LABEL_19;
          }
        }
        else
        {
          if (*(void *)(a2 + 16))
          {
            Swift::Int v22 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
            uint64_t v23 = -1 << *(unsigned char *)(a2 + 32);
            unint64_t v24 = v22 & ~v23;
            if ((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24))
            {
              sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
              id v25 = *(id *)(*(void *)(a2 + 48) + 8 * v24);
              char v26 = static NSObject.== infix(_:_:)();

              if (v26)
              {
LABEL_18:

                a2 = v41;
LABEL_19:
                id v30 = *v39;
                (*v39)(v40, v10, v5);
                char v31 = v47;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1001DE6BC(0, *((void *)v31 + 2) + 1, 1);
                  char v31 = v47;
                }
                unint64_t v33 = *((void *)v31 + 2);
                unint64_t v32 = *((void *)v31 + 3);
                if (v33 >= v32 >> 1)
                {
                  sub_1001DE6BC(v32 > 1, v33 + 1, 1);
                  char v31 = v47;
                }
                *((void *)v31 + 2) = v33 + 1;
                v30(&v31[v35 + v33 * v46], v40, v5);
                char v47 = v31;
                unint64_t v14 = v37;
                uint64_t v12 = v38;
                goto LABEL_7;
              }
              uint64_t v27 = ~v23;
              while (1)
              {
                unint64_t v24 = (v24 + 1) & v27;
                a2 = v41;
                if (((*(void *)(v43 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
                  break;
                }
                id v28 = *(id *)(*(void *)(v41 + 48) + 8 * v24);
                char v29 = static NSObject.== infix(_:_:)();

                if (v29) {
                  goto LABEL_18;
                }
              }
            }
          }

          unint64_t v14 = v37;
          uint64_t v12 = v38;
        }
      }
      (*v44)(v10, v5);
LABEL_7:
      if (++v13 == v12) {
        return v47;
      }
    }
  }
  return result;
}

uint64_t sub_1001AD488(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001AD4EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001AD534()
{
  return sub_1001A21C8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001AD540()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AD554(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_1009186E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001AD5BC(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 16);
  v3[2] = a1;
  sub_100236E70((void (*)(void *))sub_1001AAF54, (uint64_t)v3, v2);
}

uint64_t sub_1001AD60C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1001AD64C(void *a1)
{
  return [*(id *)(*sub_1000C0DE0(*(void **)(v1 + 16), *(void *)(*(void *)(v1 + 16) + 24)) + 24) setObject:a1[1] forKey:*a1];
}

uint64_t sub_1001AD6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090E1B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1001AD768@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1001AD7A4(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_1001AD7B8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090E1F0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090E1F0);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1001AD880()
{
  id result = [self housekeepingingActivityScheduler];
  qword_10090E208 = (uint64_t)result;
  return result;
}

uint64_t sub_1001AD8BC()
{
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100906FF0 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v7 = v4 + 8;
  uint64_t v23 = v8;
  v8(v6, v3);
  uint64_t v9 = *(void *)(v0 + 16);
  unint64_t v10 = *(void *)(v0 + 24);
  uint64_t v11 = qword_100906FE8;
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v22 = v0;
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10090E1F0);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v21 = v3;
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    v20[1] = v2;
    uint64_t v27 = v16;
    v20[0] = v7;
    *(_DWORD *)uint64_t v15 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1000C51B8(v9, v10, &v27);
    uint64_t v3 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] start execute()", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v17 = swift_bridgeObjectRelease_n();
  }
  v25[0] = 0xD000000000000025;
  v25[1] = 0x800000010077F290;
  v25[3] = 0;
  v26[0] = 0;
  v25[2] = 0;
  *(void *)((char *)v26 + 6) = 0;
  __chkstk_darwin(v17);
  v20[-4] = v18;
  v20[-3] = v9;
  v20[-2] = v10;
  sub_1003B5ADC((uint64_t)v25, (uint64_t)sub_1001B1B48, (uint64_t)&v20[-6]);
  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return v23(v6, v3);
}

void sub_1001ADC7C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  sub_1001ADCFC(a2, a1, a3, a4);
}

void sub_1001ADCFC(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = sub_1001AF464();
  unint64_t v8 = v7;
  if (!(v7 >> 62))
  {
    uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10090E1F0);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v27[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_1000C51B8(a3, a4, (uint64_t *)v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] there's no account supporting attachments, completing execution", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
LABEL_21:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_22;
  }
LABEL_3:
  unint64_t v10 = (void *)a4;
  char v29 = 1;
  unint64_t v11 = a1[10];
  if (v11 >= 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v28 = v11;
  swift_bridgeObjectRetain();
  a4 = 4;
  do
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v8 + 8 * a4);
    }
    uint64_t v13 = v12;
    unint64_t v14 = a4 - 3;
    if (__OFADD__(a4 - 4, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    v27[0] = v12;
    sub_1001AE198(v27, &v29, a1, a2, a3, v10, (uint64_t)&v28);
    if (v4)
    {
      swift_bridgeObjectRelease_n();

      return;
    }

    ++a4;
  }
  while (v14 != v9);
  swift_bridgeObjectRelease_n();
  if (v29)
  {
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10090E1F0);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      v27[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, (unint64_t)v10, (uint64_t *)v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] no staled attachment left, container deemed clean", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    uint64_t v19 = a1[8];
    uint64_t v20 = a1[9];
    sub_100096204((uint64_t)(a1 + 5), v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 40))(1, v19, v20);
    swift_endAccess();
  }
}

void sub_1001AE198(void **a1, unsigned char *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v105 = a7;
  uint64_t v104 = a6;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(NSObject **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  os_log_type_t v17 = sub_1001AF268(v16);
  if (!v7)
  {
    uint64_t v18 = (uint64_t)v17;
    uint64_t v99 = v15;
    os_log_t v100 = v13;
    uint64_t v102 = (void *)v12;
    uint64_t v101 = a3;
    uint64_t v103 = (void *)a5;
    if (v17)
    {
      if (v17[2])
      {
        uint64_t v19 = (uint64_t *)v105;
        swift_beginAccess();
        uint64_t v20 = *v19;
        BOOL v21 = *v19 <= 0;
        v97 = a2;
        if (v21)
        {
          swift_bridgeObjectRelease();
          id v48 = v103;
          if (qword_100906FE8 == -1) {
            goto LABEL_16;
          }
        }
        else
        {
          sub_100232FAC(v20, v18, (uint64_t)&v112);
          long long v117 = *(_OWORD *)&v113[8];
          long long v115 = v112;
          v109[0] = v112;
          v109[1] = *(_OWORD *)v113;
          uint64_t v107 = v114;
          char v118 = v113[24];
          char v116 = v113[0];
          v109[2] = *(_OWORD *)&v113[16];
          uint64_t v110 = v114;
          sub_100094134(&qword_10090E4F8);
          sub_1001B1B68();
          uint64_t v22 = v18;
          unint64_t v96 = sub_10013E30C();
          uint64_t v23 = Sequence.mapToSet<A>(_:)();
          uint64_t v93 = 0;
          sub_1001B1BC4((uint64_t)&v115);
          sub_1001B1BC4((uint64_t)&v117);
          sub_1000F5C48((uint64_t)&v107);
          uint64_t v24 = (uint64_t)v103;
          if (qword_100906FE8 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          uint64_t v26 = sub_10008E2DC(v25, (uint64_t)qword_10090E1F0);
          unint64_t v27 = (unint64_t)v104;
          swift_bridgeObjectRetain_n();
          id v28 = v16;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          id v29 = v28;
          uint64_t v94 = v26;
          id v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.default.getter();
          int v32 = v31;
          BOOL v33 = os_log_type_enabled(v30, v31);
          uint64_t v34 = v23;
          os_log_t v35 = v100;
          uint64_t v98 = v34;
          uint64_t v95 = v22;
          if (v33)
          {
            uint64_t v36 = swift_slowAlloc();
            v91 = (void *)swift_slowAlloc();
            uint64_t v92 = swift_slowAlloc();
            *(void *)&v109[0] = v92;
            *(_DWORD *)uint64_t v36 = 136447234;
            int v90 = v32;
            swift_bridgeObjectRetain();
            uint64_t v108 = sub_1000C51B8(v24, v27, (uint64_t *)v109);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v36 + 12) = 2048;
            uint64_t v37 = *(void *)(v98 + 16);
            swift_bridgeObjectRelease();
            uint64_t v108 = v37;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v36 + 22) = 2048;
            uint64_t v38 = (uint64_t *)v105;
            swift_beginAccess();
            uint64_t v106 = *v38;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v36 + 32) = 2048;
            uint64_t v39 = *(void *)(v22 + 16);
            swift_bridgeObjectRelease();
            uint64_t v106 = v39;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v36 + 42) = 2114;
            uint64_t v106 = (uint64_t)v29;
            id v40 = v29;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v91 = v29;

            _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v90, "[%{public}s] going to purge staled attachments {to-purge.count: %ld, limit-left: %ld, total-staled: %ld, accountID: %{public}@}", (uint8_t *)v36, 0x34u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          int64_t v56 = (void *)v101[4];
          uint64_t v57 = v102;
          Class isa = Set._bridgeToObjectiveC()().super.isa;
          unint64_t v59 = v29;
          id v60 = [v29 uuid];
          uint64_t v61 = v99;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          Class v62 = UUID._bridgeToObjectiveC()().super.isa;
          ((void (*)(char *, void *))v35[1].isa)(v61, v57);
          *(void *)&v109[0] = 0;
          id v63 = [v56 purgeAttachmentFilesWithAttachmentIDs:isa accountID:v62 error:v109];

          id v64 = *(id *)&v109[0];
          if (!v63)
          {
            id v76 = v64;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
LABEL_27:
            unsigned char *v97 = 0;
            return;
          }
          uint64_t v65 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v66 = *(void *)(v65 + 16);
          uint64_t v67 = *(void *)(v98 + 16);
          swift_bridgeObjectRelease();
          if (v66 == v67)
          {
            id v48 = v104;
            swift_bridgeObjectRetain_n();
            id v68 = v59;
            swift_bridgeObjectRetain_n();
            id v69 = v68;
            uint64_t v70 = Logger.logObject.getter();
            os_log_type_t v71 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v70, v71))
            {
              uint64_t v72 = swift_slowAlloc();
              uint64_t v101 = (void *)swift_slowAlloc();
              uint64_t v102 = (void *)swift_slowAlloc();
              *(void *)&v109[0] = v102;
              *(_DWORD *)uint64_t v72 = 136446722;
              os_log_t v100 = v70;
              swift_bridgeObjectRetain();
              uint64_t v106 = sub_1000C51B8((uint64_t)v103, (unint64_t)v48, (uint64_t *)v109);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v72 + 12) = 2048;
              uint64_t v73 = *(void *)(v65 + 16);
              swift_bridgeObjectRelease();
              uint64_t v106 = v73;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v72 + 22) = 2114;
              uint64_t v106 = (uint64_t)v69;
              id v74 = v69;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v101 = v69;

              os_log_t v75 = v100;
              _os_log_impl((void *)&_mh_execute_header, v100, v71, "[%{public}s] purge was successful {purged.count: %ld, accountID: %{public}@}", (uint8_t *)v72, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            unint64_t v83 = v97;
            id v84 = (void *)v105;
            uint64_t v85 = *(void *)(v65 + 16);
            uint64_t v86 = *(void *)(v95 + 16);
            swift_bridgeObjectRelease();
            BOOL v87 = v85 == v86;
          }
          else
          {
            swift_bridgeObjectRelease();
            id v48 = v104;
            swift_bridgeObjectRetain_n();
            id v77 = v59;
            swift_bridgeObjectRetain_n();
            id v78 = v77;
            uint64_t v79 = Logger.logObject.getter();
            os_log_type_t v80 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v79, v80))
            {
              uint64_t v81 = swift_slowAlloc();
              uint64_t v101 = (void *)swift_slowAlloc();
              uint64_t v102 = (void *)swift_slowAlloc();
              *(void *)&v109[0] = v102;
              *(_DWORD *)uint64_t v81 = 136446722;
              swift_bridgeObjectRetain();
              uint64_t v106 = sub_1000C51B8((uint64_t)v103, (unint64_t)v48, (uint64_t *)v109);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v81 + 12) = 2048;
              uint64_t v82 = *(void *)(v65 + 16);
              swift_bridgeObjectRelease();
              uint64_t v106 = v82;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v81 + 22) = 2114;
              uint64_t v106 = (uint64_t)v78;
              id v48 = v78;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v101 = v78;

              _os_log_impl((void *)&_mh_execute_header, v79, v80, "[%{public}s] some purge wasn't successful {purged.count: %ld, accountID: %{public}@}", (uint8_t *)v81, 0x20u);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
            }
            BOOL v87 = 0;
            unint64_t v83 = v97;
            id v84 = (void *)v105;
          }
          uint64_t v88 = *(void *)(v65 + 16);
          swift_bridgeObjectRelease();
          swift_beginAccess();
          if (!__OFSUB__(*v84, v88))
          {
            *v84 -= v88;
            if (!v87) {
              *unint64_t v83 = 0;
            }
            return;
          }
          __break(1u);
        }
        swift_once();
LABEL_16:
        uint64_t v49 = type metadata accessor for Logger();
        sub_10008E2DC(v49, (uint64_t)qword_10090E1F0);
        unint64_t v50 = (unint64_t)v104;
        swift_bridgeObjectRetain_n();
        uint64_t v51 = v101;
        swift_retain_n();
        id v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = swift_slowAlloc();
          *(void *)&v109[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 136446466;
          swift_bridgeObjectRetain();
          uint64_t v108 = sub_1000C51B8((uint64_t)v48, v50, (uint64_t *)v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v54 + 12) = 2048;
          uint64_t v55 = v51[10];
          swift_release();
          uint64_t v108 = v55;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%{public}s] no delete limit left {perRunDeleteLimit: %lu}", (uint8_t *)v54, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        goto LABEL_27;
      }
      swift_bridgeObjectRelease();
    }
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_10090E1F0);
    unint64_t v42 = (unint64_t)v104;
    swift_bridgeObjectRetain_n();
    id v43 = v16;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc();
      uint64_t v102 = (void *)swift_slowAlloc();
      uint64_t v105 = swift_slowAlloc();
      *(void *)&v109[0] = v105;
      *(_DWORD *)uint64_t v46 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v111 = sub_1000C51B8((uint64_t)v103, v42, (uint64_t *)v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 12) = 2114;
      uint64_t v111 = (uint64_t)v43;
      id v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v102 = v43;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%{public}s] no staled attachment found for {accountID: %{public}@}", (uint8_t *)v46, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1001AF1F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

id sub_1001AF268(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v2 + 32);
  id v10 = [a1 uuid:v6];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  id v18 = 0;
  id v12 = [v9 attachmentIDsFromAttachmentDirectoryWithAccountID:isa error:&v18];

  id v13 = v18;
  if (v12)
  {
    sub_10013E30C();
    uint64_t v14 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v14 + 16))
    {
      uint64_t v15 = sub_1001AFAA4(a1);
      id v12 = sub_10023D334((uint64_t)v15, v14);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    uint64_t v16 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v12;
}

unint64_t sub_1001AF464()
{
  unint64_t result = sub_1001AF6F0();
  unint64_t v1 = result;
  if (!(result >> 62))
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_32;
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v4 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v5 = v4;
    id v6 = [objc_allocWithZone((Class)REMAccountCapabilities) initWithAccountType:[v4 type]];
    unsigned int v7 = [v6 supportsAttachments];

    if (v7)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_29;
  }
LABEL_16:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v8 = _swiftEmptyArrayStorage[2];
    unint64_t result = swift_retain();
    if (!v8)
    {
LABEL_30:
      swift_release();
      swift_release();
      return (unint64_t)_swiftEmptyArrayStorage;
    }
    goto LABEL_18;
  }
LABEL_29:
  swift_retain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_30;
  }
LABEL_18:
  if (v8 >= 1)
  {
    for (uint64_t j = 0; j != v8; ++j)
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = (id)_swiftEmptyArrayStorage[j + 4];
      }
      unint64_t v11 = v10;
      id v12 = [v10 remObjectID];

      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    goto LABEL_30;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1001AF6F0()
{
  uint64_t v0 = (void *)sub_1003AD42C(3uLL, 0, 7);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v2 = (void *)sub_1003BC0CC(inited, 0, 0, (uint64_t)v0);
  swift_bridgeObjectRelease();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v3 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  specialized Array._endMutation()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v2 setSortDescriptors:isa];

  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v5 = NSManagedObjectContext.fetch<A>(_:)();

  return v5;
}

char *sub_1001AFAA4(void *a1)
{
  sub_1001AFB44(a1, v1, &v8);
  id v4 = v8;
  sub_1001B009C(a1, v1, &v8);
  id v6 = v8;
  uint64_t v8 = v4;
  sub_100203114((uint64_t)v6);
  return v8;
}

void sub_1001AFB44(void *a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v10 = a1;
  id v11 = [v10 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  id v13 = (void *)sub_10032F7E0(KeyPath, (uint64_t)v8);
  swift_release();
  id v14 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v37[2] >= v37[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v15 = (void *)sub_1002F52FC(v37);
  id v16 = [objc_allocWithZone((Class)NSFetchRequest) init];
  sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
  id v17 = [(id)swift_getObjCClassFromMetadata() entity];
  [v16 setEntity:v17];

  [v16 setAffectedStores:0];
  [v16 setPredicate:v15];
  [v16 setResultType:2];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100776E40;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 32) = 0x696669746E656469;
  *(void *)(v18 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v16 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
    uint64_t v34 = a3;
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10090E1F0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = v35;
    swift_retain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      BOOL v33 = (void *)swift_slowAlloc();
      uint64_t v37 = v33;
      *(_DWORD *)uint64_t v25 = 136446466;
      uint64_t v26 = *(void *)(v22 + 16);
      unint64_t v27 = *(void *)(v22 + 24);
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000C51B8(v26, v27, (uint64_t *)&v37);
      id v32 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v28 = Error.rem_errorDescription.getter();
      uint64_t v36 = sub_1000C51B8(v28, v29, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] failed to fetch file attachment UUIDs from database {error: %{public}s}", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    id v30 = (char *)_swiftEmptyArrayStorage;
    a3 = v34;
  }
  else
  {
    id v30 = sub_1001B1680(v20, 0x696669746E656469, 0xEA00000000007265);
    swift_bridgeObjectRelease();
  }
  *a3 = v30;
}

void sub_1001B009C(void *a1@<X0>, uint64_t a2@<X2>, char **a3@<X8>)
{
  uint64_t v6 = (void *)sub_1005B22E0(a1, 0x60u);
  id v7 = [objc_allocWithZone((Class)NSFetchRequest) init];
  type metadata accessor for REMCDSavedAttachment();
  id v8 = [(id)swift_getObjCClassFromMetadata() entity];
  [v7 setEntity:v8];

  [v7 setAffectedStores:0];
  [v7 setPredicate:v6];
  [v7 setResultType:2];
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100776E40;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 32) = 0x696669746E656469;
  *(void *)(v9 + 40) = 0xEA00000000007265;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v7 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  unint64_t v11 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
    uint64_t v22 = v6;
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090E1F0);
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v21 = a3;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446466;
      uint64_t v16 = *(void *)(a2 + 16);
      unint64_t v17 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      sub_1000C51B8(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v18 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] failed to fetch saved attachment UUIDs from database {error: %{public}s}", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    unint64_t v20 = (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    unint64_t v20 = sub_1001B1680(v11, 0x696669746E656469, 0xEA00000000007265);
    swift_bridgeObjectRelease();
  }
  *a3 = v20;
}

uint64_t sub_1001B049C()
{
  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t sub_1001B04E4()
{
  return sub_1001AD8BC();
}

uint64_t sub_1001B0508()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_1001B053C()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 32];
  sub_1000C0DE0(v2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 8) + 8))(v3);
  if (!v5)
  {
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_10090E1F0);
    id v7 = v1;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136446210;
      uint64_t v11 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier];
      unint64_t v12 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier + 8];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] configuration validation fail - cannot execute because configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return v5 != 0;
}

uint64_t sub_1001B0734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 24];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 32];
  sub_1000C0DE0(&v1[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states], v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  id v7 = v1;
  char v8 = v6(v4, v5);
  uint64_t v9 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24];
  uint64_t v10 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 32];
  sub_1000C0DE0(&v7[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations], v9);
  uint64_t v11 = *(void *)(v10 + 24);
  if (v8) {
    (*(void (**)(uint64_t))(v11 + 16))(v9);
  }
  else {
    double v12 = (*(double (**)(uint64_t))(v11 + 8))(v9);
  }
  double v13 = v12;
  uint64_t v18 = ObjectType;
  unint64_t v19 = &off_1008BD310;
  *(void *)&long long v17 = v7;
  uint64_t v14 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v15 = swift_allocObject();
  uint64_t result = sub_1000967D4(&v17, v15 + 16);
  *(double *)(v15 + 56) = v13;
  a1[3] = v14;
  a1[4] = (uint64_t)&off_1008C8B10;
  *a1 = v15;
  return result;
}

unint64_t sub_1001B0880()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

double sub_1001B09A8()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_1000C0DE0(v0, v1);
  Swift::String v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t sub_1001B0A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v20);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDStaledFileAttachmentCleanupActivity();
  if (swift_dynamicCast())
  {

    swift_beginAccess();
    sub_100096838(v2 + 16, (uint64_t)v16);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000C0DE0(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  }
  else
  {
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10090E1F0);
    sub_100096838(a1, (uint64_t)v16);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      sub_100096838((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = sub_1000C51B8(v12, v13, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDStaledFileAttachmentCleanupExecutionDateStorage.lastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_1001B0CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  id v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDStaledFileAttachmentCleanupActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_100906FE8 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090E1F0);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = (id)sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDStaledFileAttachmentCleanupExecutionDateStorage.updateLastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_1001B0FF4()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t sub_1001B102C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B0A20(a1, a2);
}

uint64_t sub_1001B1050(uint64_t a1, uint64_t a2)
{
  return sub_1001B0CCC(a1, a2);
}

uint64_t sub_1001B1164@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable);
  a1[3] = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  a1[4] = &off_1008BD2C0;
  a1[5] = &off_1008BD2D0;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_1001B11C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states + 32);
  sub_1000C0DE0((void *)(v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states), v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(v2, v3);
  uint64_t v5 = (void *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations + 24);
  uint64_t v7 = v5[4];
  sub_1000C0DE0(v5, v6);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(v8 + 16))(v6);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v8 + 8))(v6);
  }
}

uint64_t sub_1001B1288@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10090EEB0);
}

uint64_t sub_1001B12B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter;
  swift_beginAccess();
  return sub_1000BF710(v3, a1, (uint64_t *)&unk_10090E4D0);
}

uint64_t sub_1001B1314@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001B0734(a1);
}

uint64_t sub_1001B1338()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1001B1378@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executionDateStorage, a1);
}

uint64_t sub_1001B13A4@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 staledFileAttachmentCleanupLastExecutionDate];
  if (v3)
  {
    char v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1001B146C(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v3 setStaledFileAttachmentCleanupLastExecutionDate:];
}

id sub_1001B1570()
{
  return [*v0 staledFileAttachmentCleanupContainerDeemedClean];
}

id sub_1001B1594(char a1)
{
  return [*v1 setStaledFileAttachmentCleanupContainerDeemedClean:a1 & 1];
}

id sub_1001B15AC()
{
  return [*v0 staledFileAttachmentCleanupDefaultThrottleInterval];
}

id sub_1001B15BC()
{
  return [*v0 staledFileAttachmentCleanupBackoffThrottleInterval];
}

id sub_1001B15CC()
{
  id v1 = [*v0 staledFileAttachmentCleanupRateReduceFactor];

  return v1;
}

id sub_1001B1604()
{
  return [*v0 staledFileAttachmentCleanupPerRunDeleteLimit];
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity()
{
  return self;
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable()
{
  return self;
}

uint64_t type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupExecutionDateStorage()
{
  return self;
}

char *sub_1001B1680(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v40 = a2;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  Class v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v36 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v27 = (char *)v26 - v13;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v14; uint64_t v14 = _CocoaArrayWrapper.endIndex.getter())
  {
    v26[1] = v4;
    unint64_t v35 = a1 & 0xC000000000000001;
    id v32 = (unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    id v30 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v28 + 32);
    uint64_t v15 = (char *)_swiftEmptyArrayStorage;
    uint64_t v4 = 4;
    unint64_t v29 = (char *)&type metadata for Any + 8;
    uint64_t v33 = v14;
    unint64_t v34 = a1;
    while (1)
    {
      id v17 = v35 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v4);
      uint64_t v18 = v17;
      a1 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      *(void *)&v37[0] = v40;
      *((void *)&v37[0] + 1) = a3;
      swift_bridgeObjectRetain_n();
      id v19 = [v18 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
      swift_unknownObjectRelease();
      if (v19)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v37, 0, sizeof(v37));
      }
      sub_1000D6CBC((uint64_t)v37, (uint64_t)v38);
      if (v39)
      {
        int v20 = swift_dynamicCast();
        (*v30)(v9, v20 ^ 1u, 1, v10);

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000966BC((uint64_t)v38, &qword_100908190);
        (*v30)(v9, 1, 1, v10);
      }
      if ((*v32)(v9, 1, v10) == 1)
      {
        sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
      }
      else
      {
        uint64_t v21 = *v31;
        uint64_t v22 = v27;
        (*v31)(v27, v9, v10);
        v21(v36, v22, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = (char *)sub_100309EC8(0, *((void *)v15 + 2) + 1, 1, (unint64_t)v15);
        }
        unint64_t v24 = *((void *)v15 + 2);
        unint64_t v23 = *((void *)v15 + 3);
        if (v24 >= v23 >> 1) {
          uint64_t v15 = (char *)sub_100309EC8(v23 > 1, v24 + 1, 1, (unint64_t)v15);
        }
        *((void *)v15 + 2) = v24 + 1;
        v21(&v15[((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(void *)(v28 + 72) * v24], v36, v10);
      }
      ++v4;
      BOOL v16 = a1 == v33;
      a1 = v34;
      if (v16)
      {
        swift_bridgeObjectRelease();
        return v15;
      }
    }
    __break(1u);
LABEL_24:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)_swiftEmptyArrayStorage;
}

id sub_1001B1AD4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1001B1B10(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

const char *sub_1001B1B34()
{
  return "type";
}

void sub_1001B1B48(uint64_t a1)
{
  sub_1001ADC7C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_1001B1B68()
{
  unint64_t result = qword_10090E500;
  if (!qword_10090E500)
  {
    sub_100096058(&qword_10090E4F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E500);
  }
  return result;
}

uint64_t sub_1001B1BC4(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithCopy for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for RDSavedHashtag(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, uint64_t a2)
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer()
{
  return &type metadata for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer;
}

uint64_t sub_1001B1D6C(uint64_t a1)
{
  uint64_t result = sub_1001B382C(&qword_10090E530, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SearchFlatInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001B1DC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v85 = a4;
  id v74 = a3;
  uint64_t v79 = a5;
  uint64_t v6 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v6 - 8);
  id v84 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v77 = *(void *)(v8 - 8);
  uint64_t v78 = v8;
  __chkstk_darwin(v8);
  id v76 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v81 = (char *)&v63 - v11;
  uint64_t v12 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v12 - 8);
  uint64_t v71 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  uint64_t v80 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v15 = (uint64_t *)((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v63 - v17;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v72 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v75 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v63 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = v86;
  uint64_t result = (uint64_t)sub_1001B29D0(a1, v85);
  if (v29) {
    return result;
  }
  id v64 = v21;
  uint64_t v65 = Configuration;
  uint64_t v66 = v15;
  id v68 = v24;
  id v69 = v18;
  uint64_t v86 = result;
  uint64_t v70 = v27;
  uint64_t v67 = v22;
  uint64_t v31 = v84;
  uint64_t v32 = sub_1001B3274(a1);
  int v34 = v33;
  id v35 = [v82 fetchResultTokenToDiffAgainst];
  uint64_t v36 = (uint64_t)v70;
  sub_10051F2BC(v35, a1, (uint64_t)v70);

  uint64_t v83 = 0;
  LODWORD(v82) = v34;
  uint64_t v37 = v64;
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  uint64_t v38 = v69;
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v37, v65);
  uint64_t v39 = v80;
  uint64_t v40 = v66;
  uint64_t v41 = v73;
  (*(void (**)(uint64_t *, char *, uint64_t))(v80 + 16))(v66, v38, v73);
  int v42 = (*(uint64_t (**)(uint64_t *, uint64_t))(v39 + 88))(v40, v41);
  uint64_t v63 = v32;
  if (v42 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 96))(v40, v41);
    uint64_t v43 = *v40;
    uint64_t v44 = v86;
    swift_bridgeObjectRetain();
    sub_1005280D0(v43, v44, a1, v74, 0);
    os_log_type_t v45 = v68;
  }
  else
  {
    os_log_type_t v45 = v68;
    uint64_t v46 = v74;
    if (v42 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
    {
      (*(void (**)(uint64_t *, uint64_t))(v39 + 96))(v40, v41);
      uint64_t v47 = *v40;
      swift_bridgeObjectRetain();
      sub_100528BCC(v47, v36, v28, v46, 0);
    }
    else
    {
      if (v42 != enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
      {
        os_log_type_t v53 = v76;
        uint64_t v52 = v77;
        uint64_t v54 = v81;
        if (v42 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
        {
          uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          return result;
        }
        goto LABEL_9;
      }
      (*(void (**)(uint64_t *, uint64_t))(v39 + 96))(v40, v41);
      uint64_t v48 = *v40;
      uint64_t v49 = sub_100094134(&qword_100909C78);
      uint64_t v50 = v71;
      sub_1001326D0((uint64_t)v40 + *(int *)(v49 + 48), v71);
      uint64_t v51 = v86;
      swift_bridgeObjectRetain();
      sub_1005280D0(v48, v51, v28, v46, 0);
      sub_10052929C(v50, v51, v28, v46, 0);
      sub_1001B37CC(v50);
    }
  }
  swift_bridgeObjectRelease();
  os_log_type_t v53 = v76;
  uint64_t v52 = v77;
  uint64_t v54 = v81;
LABEL_9:
  (*(void (**)(char *, uint64_t))(v80 + 8))(v69, v41);
  if (v82)
  {
    uint64_t v56 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v31, 1, 1, v56);
  }
  else
  {
    REMRemindersListDataView.CountByCompleted.init(completed:incomplete:)();
    uint64_t v55 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v31, 0, 1, v55);
  }
  REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
  uint64_t v57 = v53;
  uint64_t v58 = v78;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v57, v54, v78);
  uint64_t v59 = v75;
  id v60 = v45;
  uint64_t v61 = (uint64_t)v70;
  uint64_t v62 = v67;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v60, v70, v67);
  sub_1001B382C(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
  sub_1001B382C((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
  REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v81, v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v61, v62);
}

uint64_t sub_1001B25F4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1001B2758((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1001B2758((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_1001B2758(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v28 = (unint64_t *)result;
  uint64_t v29 = 0;
  int64_t v3 = 0;
  uint64_t v6 = *(void *)(a3 + 56);
  uint64_t v4 = a3 + 56;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v4 - 24);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v5;
  uint64_t v30 = v4;
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v3 << 6);
LABEL_22:
    id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    id v17 = [v16 entityName:v27];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = [self cdEntityName];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v18 == v22 && v20 == v24)
    {

      uint64_t result = swift_bridgeObjectRelease_n();
LABEL_5:
      *(unint64_t *)((char *)v28 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v29++, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_5;
      }
    }
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v13);
  ++v3;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v3 = v13 + 1;
  if (v13 + 1 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v3);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v3 = v13 + 2;
  if (v13 + 2 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v3);
  if (v14)
  {
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_28:
    swift_retain();
    return sub_100240568(v28, v27, v29, a3);
  }
  unint64_t v14 = *(void *)(v30 + 8 * v15);
  if (v14)
  {
    int64_t v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v3 >= v31) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v30 + 8 * v3);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void (*sub_1001B29D0(uint64_t a1, uint64_t a2))(char *, uint64_t)
{
  uint64_t v81 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v4 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v10 - 8);
  uint64_t v79 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v77);
  uint64_t v75 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t)&v68 - v14;
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v78 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  id v76 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v74 = (char *)&v68 - v19;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v72 = _s10PredicatesOMa(0);
  __chkstk_darwin(v72);
  uint64_t v73 = (uint64_t *)((char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v80 = a2;
  uint64_t v24 = REMRemindersListDataView.SearchFlatInvocation.Parameters.objectIDs.getter();
  uint64_t v86 = v4;
  uint64_t v87 = Subtasks;
  uint64_t v84 = v7;
  uint64_t v85 = v6;
  id v82 = v9;
  if ((v24 & 0xC000000000000001) == 0)
  {
    uint64_t v50 = v88;
    uint64_t v25 = (void *)sub_1001B25F4(v24);
    uint64_t v88 = v50;
    goto LABEL_28;
  }
  uint64_t v71 = v22;
  uint64_t v25 = &_swiftEmptySetSingleton;
  v91 = &_swiftEmptySetSingleton;
  uint64_t v22 = (char *)__CocoaSet.makeIterator()();
  uint64_t v26 = __CocoaSet.Iterator.next()();
  if (!v26) {
    goto LABEL_27;
  }
  uint64_t v27 = v26;
  uint64_t v69 = Configuration;
  uint64_t v70 = v15;
  type metadata accessor for REMObjectID_Codable();
  uint64_t v15 = -1;
  do
  {
    uint64_t v89 = v27;
    swift_dynamicCast();
    id v34 = [v90 entityName];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = v36;

    id v38 = [self cdEntityName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;

    if (v35 == v39 && v37 == v41)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0)
      {

        goto LABEL_7;
      }
    }
    id v44 = v90;
    uint64_t Configuration = (uint64_t)v91;
    unint64_t v45 = v91[2];
    if (v91[3] <= v45)
    {
      sub_100322050(v45 + 1);
      uint64_t Configuration = (uint64_t)v91;
    }
    Swift::Int v28 = NSObject._rawHashValue(seed:)(*(void *)(Configuration + 40));
    uint64_t v29 = Configuration + 56;
    uint64_t v30 = -1 << *(unsigned char *)(Configuration + 32);
    unint64_t v31 = v28 & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(Configuration + 56 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(Configuration + 56 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v46 = 0;
      unint64_t v47 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        BOOL v48 = v32 == v47;
        if (v32 == v47) {
          unint64_t v32 = 0;
        }
        v46 |= v48;
        uint64_t v49 = *(void *)(v29 + 8 * v32);
      }
      while (v49 == -1);
      unint64_t v33 = __clz(__rbit64(~v49)) + (v32 << 6);
    }
    *(void *)(v29 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    *(void *)(*(void *)(Configuration + 48) + 8 * v33) = v44;
    ++*(void *)(Configuration + 16);
LABEL_7:
    uint64_t v27 = __CocoaSet.Iterator.next()();
  }
  while (v27);
  uint64_t v25 = v91;
  uint64_t v15 = v70;
  uint64_t Configuration = v69;
LABEL_27:
  swift_release();
  uint64_t v22 = v71;
LABEL_28:
  uint64_t v51 = (uint64_t)sub_100209B04((uint64_t)v25);
  swift_release();
  if (v51 < 0 || (v51 & 0x4000000000000000) != 0)
  {
LABEL_34:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v52 = _bridgeCocoaArray<A>(_:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v52 = v51;
  }
  swift_release();
  sub_100094134(&qword_10090E538);
  uint64_t v53 = (uint64_t)v73;
  *uint64_t v73 = v52;
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  uint64_t v54 = *(void (**)(char *, uint64_t))(v78 + 8);
  v54(v22, Configuration);
  swift_storeEnumTagMultiPayload();
  uint64_t v55 = (void *)sub_10038F1F0();
  sub_10012607C(v53, _s10PredicatesOMa);
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  uint64_t v56 = Configuration;
  uint64_t v57 = (uint64_t)v79;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  v54(v22, v56);
  uint64_t v58 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v59 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v60 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 104))(v75, v58, v59);
  swift_storeEnumTagMultiPayload();
  sub_100520FD4(v57, v60, v15);
  uint64_t v61 = v74;
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  uint64_t v62 = (uint64_t)v82;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v54(v61, v56);
  uint64_t v63 = v76;
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  id v64 = v83;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v54(v63, v56);
  uint64_t v65 = v88;
  uint64_t v66 = (void (*)(char *, uint64_t))sub_100522260(v81, (uint64_t)v55, v15, 0, 0, v62, v64, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v65)
  {
    uint64_t v54 = v66;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v86 + 8))(v64, v87);
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v62, v85);
  sub_10012607C(v15, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v54;
}

uint64_t sub_1001B3274(uint64_t a1)
{
  uint64_t v49 = _s10PredicatesOMa(0);
  __chkstk_darwin(v49);
  uint64_t v4 = (uint64_t)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  uint64_t v6 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.SearchFlatInvocation.Parameters.configuration.getter();
  int v9 = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, Configuration);
  if ((v9 & 1) == 0) {
    return 0;
  }
  uint64_t v10 = REMRemindersListDataView.SearchFlatInvocation.Parameters.objectIDs.getter();
  if ((v10 & 0xC000000000000001) == 0)
  {
    uint64_t v11 = (void *)sub_1001B25F4(v10);
    goto LABEL_30;
  }
  int v48 = v9;
  uint64_t v11 = &_swiftEmptySetSingleton;
  uint64_t v52 = &_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  uint64_t v12 = __CocoaSet.Iterator.next()();
  if (!v12) {
    goto LABEL_29;
  }
  uint64_t v13 = v12;
  uint64_t v45 = v4;
  uint64_t v46 = a1;
  uint64_t v47 = v1;
  type metadata accessor for REMObjectID_Codable();
  uint64_t v4 = -1;
  do
  {
    uint64_t v50 = v13;
    swift_dynamicCast();
    id v20 = [v51 entityName];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    id v24 = [self cdEntityName];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v21 == v25 && v23 == v27)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {

        goto LABEL_8;
      }
    }
    id v30 = v51;
    unint64_t v31 = v52;
    unint64_t v32 = v52[2];
    if (v52[3] <= v32)
    {
      sub_100322050(v32 + 1);
      unint64_t v31 = v52;
    }
    Swift::Int v14 = NSObject._rawHashValue(seed:)(v31[5]);
    uint64_t v15 = v31 + 7;
    uint64_t v16 = -1 << *((unsigned char *)v31 + 32);
    unint64_t v17 = v14 & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~v31[(v17 >> 6) + 7]) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~v31[(v17 >> 6) + 7])) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        BOOL v35 = v18 == v34;
        if (v18 == v34) {
          unint64_t v18 = 0;
        }
        v33 |= v35;
        uint64_t v36 = v15[v18];
      }
      while (v36 == -1);
      unint64_t v19 = __clz(__rbit64(~v36)) + (v18 << 6);
    }
    *(void *)((char *)v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(void *)(v31[6] + 8 * v19) = v30;
    ++v31[2];
LABEL_8:
    uint64_t v13 = __CocoaSet.Iterator.next()();
  }
  while (v13);
  uint64_t v11 = v52;
  uint64_t v4 = v45;
LABEL_29:
  swift_release();
LABEL_30:
  uint64_t v38 = (uint64_t)sub_100209B04((uint64_t)v11);
  swift_release();
  if (v38 < 0 || (v38 & 0x4000000000000000) != 0)
  {
LABEL_35:
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_bridgeObjectRetain();
    uint64_t v39 = _bridgeCocoaArray<A>(_:)();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    uint64_t v39 = v38;
  }
  swift_release();
  *(void *)uint64_t v4 = v39;
  swift_storeEnumTagMultiPayload();
  uint64_t v40 = (void *)sub_10038F1F0();
  sub_10012607C(v4, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v41 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v42 = [(id)swift_getObjCClassFromMetadata() entity];
  [v41 setEntity:v42];

  [v41 setAffectedStores:0];
  [v41 setPredicate:v40];
  uint64_t v37 = NSManagedObjectContext.count<A>(for:)();

  return v37;
}

uint64_t sub_1001B37CC(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100909C68);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001B382C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1001B3874@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  id result = [v3 hintData];
  if (!result)
  {
    uint64_t v13 = 0;
    long long v11 = 0uLL;
    long long v12 = 0uLL;
LABEL_6:
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v12;
    *(void *)(a1 + 32) = v13;
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  unsigned int v10 = [v3 serializationVersion];
  if (v10 == 1)
  {
    id result = (id)sub_1000F553C(v7, v9, (uint64_t)v16);
    if (v2) {
      return result;
    }
    long long v11 = v16[0];
    long long v12 = v16[1];
    uint64_t v13 = v17;
    goto LABEL_6;
  }
  __int16 v14 = v10;
  sub_1001B3984();
  sub_1001B39D4();
  swift_allocError();
  *uint64_t v15 = v14;
  swift_willThrow();
  return (id)sub_100097F34(v7, v9);
}

void sub_1001B3984()
{
  if (!qword_10090E540)
  {
    unint64_t v0 = _s22DataSerializationErrorOMa();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090E540);
    }
  }
}

unint64_t sub_1001B39D4()
{
  unint64_t result = qword_10090E548;
  if (!qword_10090E548)
  {
    sub_1001B3984();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E548);
  }
  return result;
}

uint64_t sub_1001B3A2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090E550);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090E550);
  if (qword_100907848 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942520);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001B3AF4(char *a1, char *a2)
{
  return sub_1002F240C(*a1, *a2);
}

Swift::Int sub_1001B3B00()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B3B7C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B3BE4()
{
  return Hasher._finalize()();
}

uint64_t sub_1001B3C5C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B2F20;
  return sub_100157960(v2, a1, a2);
}

void sub_1001B3C68(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6911093;
  if (!*v1) {
    uint64_t v2 = 0x44497463656A626FLL;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE300000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001B3CA0(void *a1@<X8>)
{
  *a1 = &off_1008B5D28;
}

uint64_t sub_1001B3CB0@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B2F20;
  return sub_100157A14(a1, v2, a2);
}

uint64_t sub_1001B3CBC()
{
  if (*v0) {
    return 6911093;
  }
  else {
    return 0x44497463656A626FLL;
  }
}

uint64_t sub_1001B3CF0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B2ED0;
  return sub_100157960(v2, a1, a2);
}

uint64_t sub_1001B3CFC@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1008B2ED0;
  return sub_100157A14(a1, v2, a2);
}

void sub_1001B3D08(void *a1@<X8>)
{
  *a1 = &off_1008B5D50;
}

void sub_1001B3D18(void *a1, void *a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)&double v9 = __chkstk_darwin(v7).n128_u64[0];
  long long v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [a2 storeControllerManagedObjectContext];
  if (!v12)
  {
    id v20 = self;
    type metadata accessor for REMCDSavedAttachment();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v22 = String._bridgeToObjectiveC()();
    [v20 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v22];

    swift_willThrow();
    return;
  }
  uint64_t v13 = v12;
  id v14 = [v12 storeController];
  if (!v14)
  {
    uint64_t v23 = self;
    type metadata accessor for REMCDSavedAttachment();
    uint64_t v24 = swift_getObjCClassFromMetadata();
    NSString v25 = String._bridgeToObjectiveC()();
    [v23 unexpectedNilPropertyWithClass:v24 property:v25];

    swift_willThrow();
    return;
  }
  uint64_t v15 = v14;
  uint64_t v65 = v8;
  self;
  uint64_t v16 = swift_dynamicCastObjCClass();
  id v66 = v13;
  if (v16)
  {
    uint64_t v17 = (void *)v16;
    id v64 = (void *)v6;
    unint64_t v68 = sub_1001B472C();
    uint64_t v69 = &off_1008C5F78;
    v67[0] = (uint64_t)v15;
    id v18 = a1;
    id v19 = v15;
    sub_1004388BC(a2, v67, v17, 0);
    if (v3)
    {

LABEL_16:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
      return;
    }
    id v63 = v15;
    goto LABEL_18;
  }
  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    id v64 = (void *)v6;
    unint64_t v68 = sub_1001B472C();
    uint64_t v69 = &off_1008C5F78;
    v67[0] = (uint64_t)v15;
    id v18 = a1;
    Swift::Int v28 = v15;
    id v29 = v15;
    sub_1004388BC(a2, v67, v27, 2);
    if (!v3)
    {
      id v63 = v28;
LABEL_18:

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
      uint64_t v6 = (uint64_t)v64;
      goto LABEL_19;
    }

LABEL_15:
    goto LABEL_16;
  }
  self;
  uint64_t v30 = swift_dynamicCastObjCClass();
  id v63 = v15;
  if (!v30)
  {
    if (qword_100906FF8 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_10008E2DC(v44, (uint64_t)qword_10090E550);
    id v45 = a1;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      id v64 = (void *)swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      v67[0] = v65;
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v49 = sub_1000D82B8();
      uint64_t v70 = sub_1000C51B8(v49, v50, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2114;
      uint64_t v70 = (uint64_t)v45;
      id v51 = v13;
      id v52 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v64 = v45;

      uint64_t v13 = v51;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s: Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: %{public}@}", (uint8_t *)v48, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v53 = self;
    v67[0] = 0;
    v67[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(111);
    v54._countAndFlagsBits = 0xD00000000000006CLL;
    v54._object = (void *)0x80000001007CD700;
    String.append(_:)(v54);
    id v55 = [v45 description];
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;

    v59._countAndFlagsBits = v56;
    v59._object = v58;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v60._countAndFlagsBits = 125;
    v60._object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    NSString v61 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v53 invalidParameterErrorWithDescription:v61];

    swift_willThrow();
    goto LABEL_31;
  }
  unint64_t v31 = (void *)v30;
  unint64_t v68 = sub_1001B472C();
  uint64_t v69 = &off_1008C5F78;
  v67[0] = (uint64_t)v15;
  id v32 = a1;
  id v29 = v15;
  sub_1004388BC(a2, v67, v31, 1);

  if (v3)
  {

    goto LABEL_15;
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v67);
LABEL_19:
  [a2 setMinimumSupportedVersion:kREMSupportedVersionFor2022];
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v65 + 8))(v11, v7);
  [a2 setLastModifiedDate:isa];

  if (qword_100906FF8 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E2DC(v34, (uint64_t)qword_10090E550);
  id v35 = a1;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v36, v37))
  {

LABEL_31:
    id v43 = v63;
    goto LABEL_32;
  }
  uint64_t v38 = swift_slowAlloc();
  id v64 = (void *)swift_slowAlloc();
  uint64_t v65 = swift_slowAlloc();
  uint64_t v70 = v65;
  *(_DWORD *)uint64_t v38 = 136446466;
  v67[0] = v6;
  swift_getMetatypeMetadata();
  uint64_t v39 = String.init<A>(describing:)();
  v67[0] = sub_1000C51B8(v39, v40, &v70);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v38 + 12) = 2114;
  v67[0] = (uint64_t)v35;
  id v41 = v36;
  id v42 = v35;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  void *v64 = v35;

  _os_log_impl((void *)&_mh_execute_header, v41, v37, "%{public}s: Merged storage into cdSavedAttachment {storage: %{public}@}", (uint8_t *)v38, 0x16u);
  sub_100094134((uint64_t *)&unk_10090A040);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  id v43 = v66;
LABEL_32:
}

uint64_t type metadata accessor for REMSavedAttachmentCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1001B4640()
{
  return &off_1008BD480;
}

_UNKNOWN **sub_1001B464C()
{
  return &off_1008BD450;
}

void sub_1001B4658(void *a1, void *a2, char a3, uint64_t a4)
{
  if (a3)
  {
    id v10 = [a1 reminderID];
    sub_100473D0C(1, v10, a4);
    double v9 = v11;

    if (v4) {
      return;
    }
    [a2 setReminder:v9];
  }
  else
  {
    id v7 = [a1 accountID];
    sub_100473CDC(0, v7, a4);
    double v9 = v8;

    if (v4) {
      return;
    }
    [a2 setAccount:v9];
  }
}

unint64_t sub_1001B472C()
{
  unint64_t result = qword_10090E708;
  if (!qword_10090E708)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090E708);
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSavedAttachmentCDIngestor.RelationshipKey()
{
  return &type metadata for REMSavedAttachmentCDIngestor.RelationshipKey;
}

unsigned char *_s7remindd28REMSavedAttachmentCDIngestorC15RelationshipKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B484CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSavedAttachmentCDIngestor.ValueKey()
{
  return &type metadata for REMSavedAttachmentCDIngestor.ValueKey;
}

uint64_t sub_1001B4884()
{
  return sub_1000B2138(&qword_10090E710, &qword_10090E718);
}

unint64_t sub_1001B48B0()
{
  unint64_t result = qword_10090E720;
  if (!qword_10090E720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E720);
  }
  return result;
}

uint64_t sub_1001B4904()
{
  return sub_1000B2138(&qword_10090E728, &qword_10090E730);
}

unint64_t sub_1001B4930()
{
  unint64_t result = qword_10090E738;
  if (!qword_10090E738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090E738);
  }
  return result;
}

uint64_t sub_1001B4984()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090E740);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090E740);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001B4A4C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000961A8(a2, (uint64_t)v28);
  uint64_t v8 = (void *)a1[4];
  *id v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_100907000 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090E740);
  swift_retain();
  sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B5280);
  swift_retain();
  sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B5280);
  long long v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315650;
    uint64_t v14 = a1[2];
    unint64_t v15 = a1[3];
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_1000C51B8(v14, v15, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v16 = sub_100551230();
    uint64_t v26 = sub_1000C51B8(v16, v17, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B534C);
    sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B534C);
    *(_WORD *)(v13 + 22) = 1024;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    swift_release();
    swift_unknownObjectRelease();
    LODWORD(v26) = Strong != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDDARequestsQueue: Appending new request {identifier: %s, request: %s, hasDelegate: %{BOOL}d}.", (uint8_t *)v13, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release();
    sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B534C);
    sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B534C);

    swift_release();
  }
  id v19 = a1 + 8;
  swift_beginAccess();
  id v20 = (void *)a1[8];
  sub_1001B5308((uint64_t)v28, (void (*)(void, void, void, void, void, void, void))sub_1001B5280);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1[8] = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v20 = sub_10030A54C(0, v20[2] + 1, 1, v20);
    *id v19 = v20;
  }
  unint64_t v23 = v20[2];
  unint64_t v22 = v20[3];
  if (v23 >= v22 >> 1)
  {
    id v20 = sub_10030A54C((void *)(v22 > 1), v23 + 1, 1, v20);
    *id v19 = v20;
  }
  void v20[2] = v23 + 1;
  sub_1000961A8((uint64_t)v28, (uint64_t)&v20[7 * v23 + 4]);
  swift_endAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_100744154((uint64_t)a1);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1001B4ED8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[4];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_100907000 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_10090E740);
  swift_retain_n();
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v19[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v12 = v1[2];
    unint64_t v13 = v1[3];
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1000C51B8(v12, v13, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2048;
    swift_beginAccess();
    uint64_t v17 = *(void *)(v1[8] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 1024;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    swift_release();
    swift_unknownObjectRelease();
    LODWORD(v17) = Strong != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDDARequestsQueue: Draining {identifier: %s, count: %ld, hasDelegate: %{BOOL}d}.", (uint8_t *)v11, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t result = v1[8];
  v1[8] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1001B5204()
{
  swift_bridgeObjectRelease();

  sub_1000F3DB4(v0 + 40);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDDARequestsQueue()
{
  return self;
}

uint64_t sub_1001B5280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  else if (!a7)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001B5308(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1001B534C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (a7 == 2 || a7 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else if (!a7)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001B53D4(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090E818, &qword_100907848, (uint64_t)qword_100942520);
}

uint64_t sub_1001B5400(uint64_t a1)
{
  return sub_100156B24(a1, qword_10090E830, &qword_100907840, (uint64_t)qword_100942508);
}

unint64_t sub_1001B542C(char a1)
{
  unint64_t result = 0x44497463656A626FLL;
  switch(a1)
  {
    case 1:
    case 10:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x73694C7472616D73;
      break;
    case 3:
      unint64_t result = 0x53676E6974726F73;
      break;
    case 4:
      unint64_t result = 0x614464656E6E6970;
      break;
    case 5:
      unint64_t result = 0x724F6C61756E616DLL;
      break;
    case 6:
      unint64_t result = 1701667182;
      break;
    case 7:
      unint64_t result = 0x726F6C6F63;
      break;
    case 8:
      unint64_t result = 0x626D456567646162;
      break;
    case 9:
      unint64_t result = 0x61447265746C6966;
      break;
    case 11:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0xD000000000000027;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001B5600(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1001B542C(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1001B542C(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1001B568C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001B542C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001B56F0()
{
  sub_1001B542C(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B5744()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001B542C(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1001B57A4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001B8B74(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001B57D4@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1001B542C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001B5800@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001B8B74(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001B5828()
{
  return sub_1001B542C(*v0);
}

void sub_1001B5830(void *a1@<X8>)
{
  *a1 = &off_1008B5870;
}

uint64_t sub_1001B5840(unsigned __int8 *a1, char *a2)
{
  return sub_1002F205C(*a1, *a2);
}

Swift::Int sub_1001B584C()
{
  return sub_100594FFC();
}

uint64_t sub_1001B5854()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001B5934()
{
  return sub_1002F0E90();
}

unint64_t sub_1001B593C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001B8B28(*a1);
  *a2 = result;
  return result;
}

void sub_1001B596C(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE900000000000044;
  uint64_t v3 = 0x49746E756F636361;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF4449746E756F63;
      uint64_t v3 = 0x6341746E65726170;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "parentListID");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0xD000000000000014;
      *(void *)(a1 + 8) = 0x80000001007C6240;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t sub_1001B5A24@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001B8B28(a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001B5A4C()
{
  unint64_t result = 0x49746E756F636361;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6341746E65726170;
      break;
    case 2:
      unint64_t result = 0x694C746E65726170;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1001B5AF8(void *a1@<X8>)
{
  *a1 = &off_1008B5D78;
}

uint64_t sub_1001B5B08@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5DA0;
  return sub_10015BB9C(v2, a1, a2);
}

uint64_t sub_1001B5B14@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B51D0;
  return sub_10015BC18(a1, v2, a2);
}

void sub_1001B5B20(void *a1@<X8>)
{
  *a1 = &off_1008B5DD8;
}

uint64_t sub_1001B5B30@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5E00;
  return sub_10015BB9C(v2, a1, a2);
}

uint64_t sub_1001B5B3C@<X0>(Swift::String a1@<X1:X0>, BOOL *a2@<X8>)
{
  v2._rawValue = &off_1008B5208;
  return sub_10015BC18(a1, v2, a2);
}

void sub_1001B5B48(void *a1@<X8>)
{
  *a1 = &off_1008B5E38;
}

void *sub_1001B5B58()
{
  unint64_t result = sub_1001B5B78();
  qword_100942030 = (uint64_t)result;
  return result;
}

void *sub_1001B5B78()
{
  uint64_t v0 = 14;
  char v1 = &byte_1008B5890;
  while (2)
  {
    int v3 = *v1++;
    unint64_t v4 = 0xE800000000000000;
    uint64_t v5 = 0x44497463656A626FLL;
    switch(v3)
    {
      case 1:
        uint64_t v6 = "daIsNotificationsCollection";
        goto LABEL_14;
      case 2:
        unint64_t v4 = 0xED00006570795474;
        uint64_t v5 = 0x73694C7472616D73;
        goto LABEL_17;
      case 3:
        unint64_t v4 = 0xEC000000656C7974;
        uint64_t v5 = 0x53676E6974726F73;
        goto LABEL_17;
      case 4:
        unint64_t v4 = 0xEA00000000006574;
        uint64_t v5 = 0x614464656E6E6970;
        goto LABEL_17;
      case 5:
        unint64_t v4 = 0xEE00676E69726564;
        uint64_t v5 = 0x724F6C61756E616DLL;
        goto LABEL_17;
      case 6:
        unint64_t v4 = 0xE400000000000000;
        uint64_t v5 = 1701667182;
        goto LABEL_17;
      case 7:
        unint64_t v4 = 0xE500000000000000;
        uint64_t v5 = 0x726F6C6F63;
        goto LABEL_17;
      case 8:
        unint64_t v4 = 0xEB000000006D656CLL;
        uint64_t v5 = 0x626D456567646162;
        goto LABEL_17;
      case 9:
        uint64_t v5 = 0x61447265746C6966;
        unint64_t v4 = 0xEA00000000006174;
        goto LABEL_17;
      case 10:
        uint64_t v6 = "DsToCategorizeAsGroceryItems";
LABEL_14:
        unint64_t v4 = (unint64_t)v6 | 0x8000000000000000;
        uint64_t v5 = 0xD000000000000017;
        goto LABEL_17;
      case 11:
      case 12:
      case 13:
        goto LABEL_4;
      default:
LABEL_17:
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v9 = sub_1001806F8(v5, v4);
        uint64_t v10 = _swiftEmptyDictionarySingleton[2];
        BOOL v11 = (v8 & 1) == 0;
        uint64_t v12 = v10 + v11;
        if (__OFADD__(v10, v11)) {
          goto LABEL_50;
        }
        char v13 = v8;
        if (_swiftEmptyDictionarySingleton[3] >= v12)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v8) {
              goto LABEL_2;
            }
          }
          else
          {
            sub_100318A14();
            if (v13) {
              goto LABEL_2;
            }
          }
        }
        else
        {
          sub_10030E654(v12, isUniquelyReferenced_nonNull_native);
          unint64_t v14 = sub_1001806F8(v5, v4);
          if ((v13 & 1) != (v15 & 1)) {
            goto LABEL_53;
          }
          unint64_t v9 = v14;
          if (v13)
          {
LABEL_2:
            Swift::OpaquePointer v2 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
            swift_bridgeObjectRelease();
            *Swift::OpaquePointer v2 = v5;
            v2[1] = v4;
            goto LABEL_3;
          }
        }
        _swiftEmptyDictionarySingleton[(v9 >> 6) + 8] |= 1 << v9;
        uint64_t v16 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v9);
        *uint64_t v16 = v5;
        v16[1] = v4;
        uint64_t v17 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v9);
        *uint64_t v17 = v5;
        v17[1] = v4;
        uint64_t v18 = _swiftEmptyDictionarySingleton[2];
        BOOL v19 = __OFADD__(v18, 1);
        uint64_t v20 = v18 + 1;
        if (v19) {
          goto LABEL_52;
        }
        _swiftEmptyDictionarySingleton[2] = v20;
        swift_bridgeObjectRetain();
LABEL_3:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_4:
        if (--v0) {
          continue;
        }
        unint64_t v21 = 0;
        break;
    }
    break;
  }
  do
  {
    if (v21 >= 4)
    {
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x1001B6094);
    }
    unint64_t v23 = v21 + 1;
    uint64_t v24 = 0xE900000000000044;
    uint64_t v25 = 0x49746E756F636361;
    unint64_t v26 = 0xE900000000000044;
    switch(*((unsigned char *)&off_1008B58A0 + v21 + 32))
    {
      case 1:
        unint64_t v26 = 0xED0000746E756F63;
        uint64_t v24 = 0xEF4449746E756F63;
        uint64_t v25 = 0x6341746E65726170;
        break;
      case 2:
        unint64_t v26 = 0xEA00000000007473;
        uint64_t v24 = 0xEC00000044497473;
        uint64_t v25 = 0x694C746E65726170;
        break;
      case 3:
        uint64_t v25 = 0xD000000000000014;
        uint64_t v24 = 0x80000001007C6240;
        unint64_t v26 = 0x80000001007C6240;
        break;
      default:
        break;
    }
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v29 = sub_1001806F8(v25, v24);
    uint64_t v30 = _swiftEmptyDictionarySingleton[2];
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      goto LABEL_49;
    }
    char v33 = v28;
    if (_swiftEmptyDictionarySingleton[3] >= v32)
    {
      if (v27)
      {
        if (v28) {
          goto LABEL_29;
        }
      }
      else
      {
        sub_100318A14();
        if (v33) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      sub_10030E654(v32, v27);
      unint64_t v34 = sub_1001806F8(v25, v24);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_53;
      }
      unint64_t v29 = v34;
      if (v33)
      {
LABEL_29:
        unint64_t v22 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v29);
        swift_bridgeObjectRelease();
        *unint64_t v22 = v25;
        v22[1] = v26;
        goto LABEL_30;
      }
    }
    _swiftEmptyDictionarySingleton[(v29 >> 6) + 8] |= 1 << v29;
    uint64_t v36 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v29);
    *uint64_t v36 = v25;
    v36[1] = v24;
    os_log_type_t v37 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v29);
    *os_log_type_t v37 = v25;
    v37[1] = v26;
    uint64_t v38 = _swiftEmptyDictionarySingleton[2];
    BOOL v19 = __OFADD__(v38, 1);
    uint64_t v39 = v38 + 1;
    if (v19) {
      goto LABEL_51;
    }
    _swiftEmptyDictionarySingleton[2] = v39;
    swift_bridgeObjectRetain();
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v21 = v23;
  }
  while (v23 != 4);
  return _swiftEmptyDictionarySingleton;
}

void sub_1001B60DC(void *a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t v181 = a4;
  uint64_t v8 = *v4;
  uint64_t v9 = type metadata accessor for Date();
  unint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v177 = (char *)&v163 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v12 - 8);
  v179 = (char *)&v163 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for UUID();
  uint64_t v186 = *(char **)(v189 - 8);
  __chkstk_darwin(v189);
  uint64_t v188 = (char *)&v163 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = sub_1001B7AD0();
  [a1 setParentAccountID:v15];

  id v16 = [a2 createResolutionTokenMapIfNecessary];
  id v17 = [a1 resolutionTokenMap];
  if (v17)
  {
    unint64_t v183 = v10;
    uint64_t v174 = v9;
    id v182 = v16;
    id v176 = v17;
    id v184 = sub_10047FBE8(v17, a3);
    if (qword_100907008 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_10008E2DC(v18, (uint64_t)qword_10090E818);
    id v20 = a1;
    swift_bridgeObjectRetain_n();
    id v21 = v20;
    uint64_t v178 = v19;
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    id v180 = a2;
    uint64_t v173 = v8;
    id v191 = v21;
    if (v24)
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v187 = (char *)swift_slowAlloc();
      uint64_t v190 = swift_slowAlloc();
      uint64_t v194 = v190;
      *(_DWORD *)uint64_t v25 = 136446722;
      id v26 = [v21 smartListType];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      id v192 = (void *)sub_1000C51B8(v27, v29, &v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2114;
      uint64_t v30 = [v191 objectID];
      id v192 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v187 = v30;

      *(_WORD *)(v25 + 22) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v31 = Array.description.getter();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t v34 = v31;
      id v21 = v191;
      id v192 = (void *)sub_1000C51B8(v34, v33, &v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ingesting smart list storage {storage.smartListType: %{public}s, storage.objectID: %{public}@, changedValueKeys: %{public}s}", (uint8_t *)v25, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v180;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v35 = v184;
    uint64_t v58 = v182;
    uint64_t v190 = *(void *)(a3 + 16);
    if (v190)
    {
      v186 += 8;
      uint64_t v187 = (char *)(a3 + 32);
      uint64_t v170 = (void (**)(char *, char *, uint64_t))(v183 + 32);
      uint64_t v172 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v183 + 56);
      v169 = (unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48);
      unint64_t v165 = (void (**)(char *, uint64_t))(v183 + 8);
      uint64_t v175 = a3;
      swift_bridgeObjectRetain();
      unint64_t v59 = 0;
      unint64_t v168 = 0xD000000000000018;
      *(void *)&long long v60 = 136446722;
      long long v171 = v60;
      unint64_t v167 = 0x80000001007C6C30;
      uint64_t v166 = (char *)&type metadata for Any + 8;
      NSString v61 = &selRef_intersectsSet_;
      while (2)
      {
        uint64_t v62 = v187[v59++];
        switch(v62)
        {
          case 1:
            unint64_t v69 = v59;
            sub_10047D520(1);
            NSString v70 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v71 = [v58 mergeWithMap:v35 forKey:v70];

            if (v71) {
              [a2 setMinimumSupportedVersion:[v21 minimumSupportedVersion]];
            }
            goto LABEL_38;
          case 2:
            unint64_t v69 = v59;
            sub_10047D520(2);
            NSString v72 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v73 = [v58 mergeWithMap:v35 forKey:v72];

            if (!v73) {
              goto LABEL_38;
            }
            id v74 = [v21 smartListType];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            id isa = String._bridgeToObjectiveC()();
            char v35 = v184;
            swift_bridgeObjectRelease();
            [a2 setSmartListType:isa];
            goto LABEL_37;
          case 3:
            unint64_t v69 = v59;
            sub_10047D520(3);
            NSString v76 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v77 = [v58 mergeWithMap:v35 forKey:v76];

            if (!v77) {
              goto LABEL_38;
            }
            id v78 = [v21 sortingStyle];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            id isa = String._bridgeToObjectiveC()();
            char v35 = v184;
            swift_bridgeObjectRelease();
            [a2 setSortingStyle:isa];
            goto LABEL_37;
          case 4:
            unint64_t v69 = v59;
            sub_10047D520(4);
            NSString v79 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v80 = [v58 mergeWithMap:v35 forKey:v79];

            if (!v80) {
              goto LABEL_38;
            }
            id isa = [v21 pinnedDate];
            if (isa)
            {
              uint64_t v81 = v61;
              id v82 = v177;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v83 = v179;
              uint64_t v84 = v174;
              (*v170)(v179, v82, v174);
              (*v172)(v83, 0, 1, v84);
              if ((*v169)(v83, 1, v84) == 1)
              {
                id isa = 0;
              }
              else
              {
                v129.super.id isa = Date._bridgeToObjectiveC()().super.isa;
                uint64_t v130 = v83;
                id isa = v129.super.isa;
                (*v165)(v130, v84);
              }
              NSString v61 = v81;
            }
            else
            {
              (*v172)(v179, 1, 1, v174);
            }
            [a2 setPinnedDate:isa];
            goto LABEL_37;
          case 5:
            sub_1001B8BC0(v21);
            goto LABEL_39;
          case 6:
            unint64_t v69 = v59;
            sub_10047D520(6);
            NSString v85 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v86 = [v58 mergeWithMap:v35 forKey:v85];

            if (!v86) {
              goto LABEL_38;
            }
            id isa = [v21 name];
            [a2 setName:isa];
            goto LABEL_37;
          case 7:
            unint64_t v69 = v59;
            sub_10047D520(7);
            NSString v87 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v88 = [v58 mergeWithMap:v35 forKey:v87];

            if (!v88) {
              goto LABEL_38;
            }
            id isa = [v21 color];
            [a2 setColor:isa];
            goto LABEL_37;
          case 8:
            unint64_t v69 = v59;
            sub_10047D520(8);
            NSString v89 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v90 = [v58 mergeWithMap:v35 forKey:v89];

            if (!v90) {
              goto LABEL_38;
            }
            id isa = [v21 badgeEmblem];
            [a2 setBadgeEmblem:isa];
LABEL_37:

LABEL_38:
            unint64_t v59 = v69;
            goto LABEL_39;
          case 9:
            unint64_t v69 = v59;
            sub_10047D520(9);
            NSString v91 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v92 = [v58 mergeWithMap:v35 forKey:v91];

            if (!v92) {
              goto LABEL_38;
            }
            v67.super.id isa = (Class)[v21 filterData];
            if (v67.super.isa)
            {
              uint64_t v93 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v95 = v94;

              v67.super.id isa = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v96 = v95;
              char v35 = v184;
              sub_100097F34(v93, v96);
            }
            unint64_t v59 = v69;
            [a2 setFilterData:v67.super.isa];
LABEL_63:

            goto LABEL_39;
          case 10:
            unint64_t v69 = v59;
            sub_10047D520(10);
            NSString v97 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v98 = [v58 mergeWithMap:v35 forKey:v97];

            if (v98) {
              [a2 setShowingLargeAttachments:[v21 showingLargeAttachments]];
            }
            goto LABEL_38;
          case 11:
            goto LABEL_39;
          case 12:
            id v99 = [v21 unsavedSectionIDsOrdering];
            if (!v99) {
              goto LABEL_39;
            }
            os_log_t v100 = v99;
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            unint64_t v101 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v101 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
              unint64_t v183 = v59;
              if (!v102) {
                goto LABEL_90;
              }
            }
            else
            {
              uint64_t v102 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              unint64_t v183 = v59;
              if (!v102) {
                goto LABEL_90;
              }
            }
            if (v102 < 1)
            {
              __break(1u);
              JUMPOUT(0x1001B7A60);
            }
            uint64_t v103 = 0;
            uint64_t v104 = _swiftEmptyArrayStorage;
            do
            {
              if ((v101 & 0xC000000000000001) != 0) {
                id v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v105 = *(id *)(v101 + 8 * v103 + 32);
              }
              uint64_t v106 = v105;
              id v107 = [v105 uuid];
              uint64_t v108 = v188;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v109 = UUID.uuidString.getter();
              uint64_t v111 = v110;
              (*(void (**)(char *, uint64_t))v186)(v108, v189);

              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v104 = sub_100308F88(0, v104[2] + 1, 1, v104);
              }
              unint64_t v113 = v104[2];
              unint64_t v112 = v104[3];
              if (v113 >= v112 >> 1) {
                uint64_t v104 = sub_100308F88((void *)(v112 > 1), v113 + 1, 1, v104);
              }
              ++v103;
              v104[2] = v113 + 1;
              uint64_t v114 = &v104[2 * v113];
              v114[4] = v109;
              v114[5] = v111;
              id v21 = v191;
            }
            while (v102 != v103);
LABEL_90:
            swift_bridgeObjectRelease();
            id v131 = objc_allocWithZone((Class)REMOrderedIdentifierMap);
            swift_bridgeObjectRetain();
            Class v132 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v133 = [v131 initWithOrderedIdentifiers:v132];
            swift_bridgeObjectRelease();

            uint64_t v194 = (uint64_t)v133;
            sub_1000963CC(0, (unint64_t *)&qword_10090D600);
            id v134 = v133;
            v135 = v185;
            uint64_t v136 = REMJSONRepresentable.toJSONData()();
            uint64_t v185 = v135;
            if (v135)
            {
              swift_bridgeObjectRelease();

              id v138 = v21;
              swift_errorRetain();
              id v139 = v138;
              swift_errorRetain();
              uint64_t v140 = Logger.logObject.getter();
              os_log_type_t v141 = static os_log_type_t.fault.getter();
              BOOL v142 = os_log_type_enabled(v140, v141);
              uint64_t v58 = v182;
              if (v142)
              {
                uint64_t v143 = swift_slowAlloc();
                unint64_t v144 = (void *)swift_slowAlloc();
                id v192 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v143 = v171;
                uint64_t v194 = v173;
                swift_getMetatypeMetadata();
                uint64_t v145 = String.init<A>(describing:)();
                *(void *)(v143 + 4) = sub_1000C51B8(v145, v146, (uint64_t *)&v192);
                swift_bridgeObjectRelease();
                *(_WORD *)(v143 + 12) = 2114;
                id v147 = [v139 objectID];
                *(void *)(v143 + 14) = v147;
                *unint64_t v144 = v147;

                NSString v61 = &selRef_intersectsSet_;
                *(_WORD *)(v143 + 22) = 2082;
                swift_getErrorValue();
                uint64_t v148 = Error.rem_errorDescription.getter();
                *(void *)(v143 + 24) = sub_1000C51B8(v148, v149, (uint64_t *)&v192);
                swift_bridgeObjectRelease();
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v140, v141, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedSectionIDsOrdering' into 'cdSmartList' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v143, 0x20u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                id v21 = v191;
                swift_slowDealloc();
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                swift_errorRelease();
                uint64_t v185 = 0;
                a2 = v180;
                goto LABEL_93;
              }
              swift_errorRelease();

              swift_errorRelease();
              swift_errorRelease();

              uint64_t v185 = 0;
              a2 = v180;
            }
            else
            {
              uint64_t v150 = v136;
              unint64_t v151 = v137;
              sub_100097E38(v136, v137);
              Class v152 = Data._bridgeToObjectiveC()().super.isa;
              sub_100097F34(v150, v151);
              id v153 = v180;
              [v180 setSectionIDsOrderingAsData:v152];

              id v154 = [v153 createResolutionTokenMapIfNecessary];
              NSString v155 = String._bridgeToObjectiveC()();
              [v154 updateForKey:v155];

              a2 = v153;
              id v21 = v191;
              sub_100097F34(v150, v151);
              swift_bridgeObjectRelease();

              uint64_t v58 = v182;
            }
            char v35 = v184;
            goto LABEL_97;
          case 13:
            id v115 = [v21 unsavedMembershipsOfRemindersInSections];
            if (v115)
            {
              char v116 = v115;
              unint64_t v183 = v59;
              long long v117 = v185;
              sub_10015AA3C(v115);
              uint64_t v185 = v117;
              if (v117)
              {
                id v118 = v21;
                swift_errorRetain();
                id v119 = v118;
                swift_errorRetain();
                v120 = Logger.logObject.getter();
                os_log_type_t v121 = static os_log_type_t.fault.getter();
                if (os_log_type_enabled(v120, v121))
                {
                  uint64_t v122 = swift_slowAlloc();
                  uint64_t v123 = (void *)swift_slowAlloc();
                  unint64_t v164 = (void *)swift_slowAlloc();
                  id v192 = v164;
                  *(_DWORD *)uint64_t v122 = v171;
                  uint64_t v194 = v173;
                  swift_getMetatypeMetadata();
                  uint64_t v124 = String.init<A>(describing:)();
                  *(void *)(v122 + 4) = sub_1000C51B8(v124, v125, (uint64_t *)&v192);
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v122 + 12) = 2114;
                  id v126 = [v119 objectID];
                  *(void *)(v122 + 14) = v126;
                  *uint64_t v123 = v126;

                  NSString v61 = &selRef_intersectsSet_;
                  *(_WORD *)(v122 + 22) = 2082;
                  swift_getErrorValue();
                  uint64_t v127 = Error.rem_errorDescription.getter();
                  *(void *)(v122 + 24) = sub_1000C51B8(v127, v128, (uint64_t *)&v192);
                  swift_bridgeObjectRelease();
                  swift_errorRelease();
                  swift_errorRelease();
                  _os_log_impl((void *)&_mh_execute_header, v120, v121, "%{public}s#merge(storage:into:changedValueKeys:coordinator:): Failed to merge 'storage.unsavedMembershipsOfRemindersInSections' into 'cdSmartList' {storage.objectID: %{public}@, error: %{public}s}", (uint8_t *)v122, 0x20u);
                  sub_100094134((uint64_t *)&unk_10090A040);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  swift_errorRelease();
                  uint64_t v185 = 0;
                  a2 = v180;
                  unint64_t v59 = v183;
                  char v35 = v184;
                  id v21 = v191;
                }
                else
                {

                  swift_errorRelease();
                  swift_errorRelease();
                  swift_errorRelease();

                  uint64_t v185 = 0;
                  a2 = v180;
                  char v35 = v184;
                  id v21 = v191;
LABEL_97:
                  NSString v61 = &selRef_intersectsSet_;
                  unint64_t v59 = v183;
                }
              }
              else
              {

LABEL_93:
                unint64_t v59 = v183;
                char v35 = v184;
              }
            }
            else
            {
              char v35 = v184;
            }
LABEL_39:
            if (v59 != v190) {
              continue;
            }

            swift_bridgeObjectRelease();
            break;
          default:
            id v63 = [v21 v61[261]];
            unint64_t v64 = v59;
            id v65 = [v63 uuid];

            id v66 = v188;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            unint64_t v59 = v64;
            v67.super.id isa = UUID._bridgeToObjectiveC()().super.isa;
            unint64_t v68 = v66;
            char v35 = v184;
            (*(void (**)(char *, uint64_t))v186)(v68, v189);
            [a2 setIdentifier:v67.super.isa];
            goto LABEL_63;
        }
        break;
      }
    }
    else
    {
    }
  }
  else
  {
    if (qword_100907008 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_10008E2DC(v36, (uint64_t)qword_10090E818);
    swift_bridgeObjectRetain_n();
    id v37 = a1;
    uint64_t v38 = Logger.logObject.getter();
    int v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, (os_log_type_t)v39))
    {
      LODWORD(v189) = v39;
      id v182 = v16;
      uint64_t v40 = swift_slowAlloc();
      id v41 = (void *)swift_slowAlloc();
      id v191 = (id)swift_slowAlloc();
      uint64_t v194 = (uint64_t)v191;
      *(_DWORD *)uint64_t v40 = 138543618;
      uint64_t v42 = a3;
      id v43 = [v37 objectID];
      id v192 = v43;
      uint64_t v188 = &v193;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v190 = (uint64_t)v41;
      *id v41 = v43;

      *(_WORD *)(v40 + 12) = 2082;
      int64_t v44 = *(void *)(v42 + 16);
      uint64_t v175 = v42;
      if (v44)
      {
        id v192 = _swiftEmptyArrayStorage;
        sub_1001DE058(0, v44, 0);
        id v45 = (unsigned __int8 *)(v42 + 32);
        uint64_t v46 = v192;
        unint64_t v47 = (unint64_t)"daIsNotificationsCollection";
        unint64_t v48 = (unint64_t)"DsToCategorizeAsGroceryItems";
        unint64_t v49 = (unint64_t)"remindersICSDisplayOrderChanged";
        unint64_t v50 = (unint64_t)"calDAVNotifications";
        unint64_t v51 = (unint64_t)"unsavedSectionIDsOrdering";
        do
        {
          int v52 = *v45++;
          unint64_t v53 = 0xE800000000000000;
          unint64_t v54 = 0x44497463656A626FLL;
          switch(v52)
          {
            case 1:
              unint64_t v53 = v47 | 0x8000000000000000;
              goto LABEL_22;
            case 2:
              unint64_t v53 = 0xED00006570795474;
              unint64_t v54 = 0x73694C7472616D73;
              break;
            case 3:
              unint64_t v53 = 0xEC000000656C7974;
              unint64_t v54 = 0x53676E6974726F73;
              break;
            case 4:
              unint64_t v53 = 0xEA00000000006574;
              unint64_t v54 = 0x614464656E6E6970;
              break;
            case 5:
              unint64_t v53 = 0xEE00676E69726564;
              unint64_t v54 = 0x724F6C61756E616DLL;
              break;
            case 6:
              unint64_t v53 = 0xE400000000000000;
              unint64_t v54 = 1701667182;
              break;
            case 7:
              unint64_t v53 = 0xE500000000000000;
              unint64_t v54 = 0x726F6C6F63;
              break;
            case 8:
              unint64_t v53 = 0xEB000000006D656CLL;
              unint64_t v54 = 0x626D456567646162;
              break;
            case 9:
              unint64_t v54 = 0x61447265746C6966;
              unint64_t v53 = 0xEA00000000006174;
              break;
            case 10:
              unint64_t v53 = v48 | 0x8000000000000000;
LABEL_22:
              unint64_t v54 = 0xD000000000000017;
              break;
            case 11:
              unint64_t v54 = 0xD00000000000001CLL;
              unint64_t v53 = v49 | 0x8000000000000000;
              break;
            case 12:
              unint64_t v54 = 0xD000000000000019;
              unint64_t v53 = v50 | 0x8000000000000000;
              break;
            case 13:
              unint64_t v54 = 0xD000000000000027;
              unint64_t v53 = v51 | 0x8000000000000000;
              break;
            default:
              break;
          }
          id v192 = v46;
          unint64_t v56 = v46[2];
          unint64_t v55 = v46[3];
          if (v56 >= v55 >> 1)
          {
            uint64_t v186 = (char *)v48;
            uint64_t v187 = (char *)v47;
            id v184 = (id)v50;
            uint64_t v185 = (const char *)v49;
            unint64_t v183 = v51;
            sub_1001DE058(v55 > 1, v56 + 1, 1);
            unint64_t v51 = v183;
            unint64_t v50 = (unint64_t)v184;
            unint64_t v49 = (unint64_t)v185;
            unint64_t v48 = (unint64_t)v186;
            unint64_t v47 = (unint64_t)v187;
            uint64_t v46 = v192;
          }
          v46[2] = v56 + 1;
          uint64_t v57 = &v46[2 * v56];
          v57[4] = v54;
          v57[5] = v53;
          --v44;
        }
        while (v44);
      }
      uint64_t v156 = Array.description.getter();
      unint64_t v158 = v157;
      swift_bridgeObjectRelease();
      id v192 = (void *)sub_1000C51B8(v156, v158, &v194);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v189, "REMSmartListStorageCDIngestor: merge(storage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}", (uint8_t *)v40, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      id v16 = v182;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v159 = self;
    sub_1000963CC(0, &qword_10090B328);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v161 = String._bridgeToObjectiveC()();
    v162 = (const char *)[v159 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v161];

    uint64_t v185 = v162;
    swift_willThrow();
  }
}

id sub_1001B7AD0()
{
  id v1 = [v0 smartListType];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
    {
      uint64_t v8 = &selRef_accountID;
      return [v0 *v8];
    }
  }
  uint64_t v8 = &selRef_parentAccountID;
  id v9 = [v0 parentAccountID];

  if (v9) {
    return [v0 *v8];
  }
  return 0;
}

uint64_t type metadata accessor for REMSmartListStorageCDIngestor()
{
  return self;
}

_UNKNOWN **sub_1001B7C00()
{
  return &off_1008BD660;
}

_UNKNOWN **sub_1001B7C0C()
{
  return &off_1008BD630;
}

_UNKNOWN **sub_1001B7C18()
{
  return &off_1008BD600;
}

_UNKNOWN **sub_1001B7C24()
{
  return &off_1008BD5D0;
}

id sub_1001B7C30(void *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v96 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  unsigned int v98 = (void **)((char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v97 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  *(void *)&double v12 = __chkstk_darwin(v11 - 8).n128_u64[0];
  uint64_t v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99[0] = 0;
  id v15 = [a1 remObjectIDWithError:v99, v12];
  id v16 = v99[0];
  if (v15)
  {
    id v17 = v15;
    uint64_t v95 = v4;
    id v18 = v99[0];
    id v19 = [a1 account];
    if (v19
      && (id v16 = v19, v20 = [v19 remObjectID], v16, v20))
    {
      uint64_t v93 = v3;
      id v21 = [a1 smartListType];
      if (v21)
      {
        unint64_t v22 = v21;
        uint64_t v92 = v1;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v16 = v24;

        swift_bridgeObjectRetain();
        v25._countAndFlagsBits = v23;
        v25._object = v16;
        unint64_t v26 = (unint64_t)REMSmartListType.init(stringValue:)(v25);
        if (v26)
        {
          unint64_t v27 = v26;
          swift_bridgeObjectRelease();
          id v28 = objc_allocWithZone((Class)REMSmartListStorage);
          unsigned int v90 = (void *)v27;
          NSString v91 = v17;
          id v94 = v20;
          id v16 = [v28 initWithObjectID:v17 accountID:v20 smartListType:v27];
          id v29 = [a1 name];
          [v16 setName:v29];

          id v30 = [a1 color];
          [v16 setColor:v30];

          id v31 = [a1 badgeEmblem];
          [v16 setBadgeEmblem:v31];

          [v16 setShowingLargeAttachments:[a1 showingLargeAttachments]];
          id v32 = [a1 filterData];
          if (v32)
          {
            unint64_t v33 = v32;
            uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v36 = v35;

            v37.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v34, v36);
          }
          else
          {
            v37.super.Class isa = 0;
          }
          [v16 setFilterData:v37.super.isa];

          [v16 setIsPersisted:1];
          id v64 = [a1 sortingStyle];
          if (v64)
          {
            id v65 = v64;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            id v66 = (id)REMSortingStyle.init(stringValue:)();
            NSUUID v67 = v91;
            if (!v66) {
              id v66 = REMSortingStyleDefault;
            }
            unint64_t v68 = v66;
            [v16 setSortingStyle:v66];
          }
          else
          {
            [v16 setSortingStyle:REMSortingStyleDefault];
            NSUUID v67 = v91;
          }
          id v69 = [a1 pinnedDate];
          if (v69)
          {
            NSString v70 = v69;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v71 = v97;
            (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v14, v10, v8);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v14, 0, 1, v8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v14, 1, v8) == 1)
            {
              Class isa = 0;
            }
            else
            {
              Class isa = Date._bridgeToObjectiveC()().super.isa;
              (*(void (**)(char *, uint64_t))(v71 + 8))(v14, v8);
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v97 + 56))(v14, 1, 1, v8);
            Class isa = 0;
          }
          unsigned int v73 = v90;
          [v16 setPinnedDate:isa];

          Class v74 = (Class)[a1 mostRecentTargetTemplateIdentifier];
          uint64_t v75 = v98;
          if (v74)
          {
            NSString v76 = v96;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v77 = v95;
            id v78 = v76;
            uint64_t v79 = v93;
            (*(void (**)(void *, char *, uint64_t))(v95 + 32))(v75, v78, v93);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v77 + 56))(v75, 0, 1, v79);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v79) == 1)
            {
              Class v74 = 0;
            }
            else
            {
              Class v74 = UUID._bridgeToObjectiveC()().super.isa;
              (*(void (**)(void *, uint64_t))(v77 + 8))(v75, v79);
            }
          }
          else
          {
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v98, 1, 1, v93);
          }
          [v16 setMostRecentTargetTemplateIdentifier:v74];

          [v16 setResolutionTokenMap:0];
          Class v80 = (Class)[a1 resolutionTokenMapData];
          if (v80)
          {
            uint64_t v81 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v83 = v82;

            Class v80 = Data._bridgeToObjectiveC()().super.isa;
            sub_100097F34(v81, v83);
          }
          [v16 setResolutionTokenMapData:v80];

          id v84 = [a1 parentAccount];
          if (v84)
          {
            NSString v85 = v84;
            id v86 = [v84 remObjectID];
          }
          else
          {
            id v86 = 0;
          }
          [v16 setParentAccountID:v86];

          id v87 = [a1 parentList];
          if (v87)
          {
            unsigned int v88 = v87;
            id v89 = [v87 remObjectID];
          }
          else
          {
            id v89 = 0;
          }
          [v16 setParentListID:v89];

          [v16 setMinimumSupportedVersion:[a1 minimumSupportedVersion]];
          [v16 setEffectiveMinimumSupportedVersion:[a1 effectiveMinimumSupportedVersion]];
          [v16 setShouldUpdateSectionsOrdering:0];
          [v16 setUnsavedSectionIDsOrdering:0];
          [v16 setUnsavedMembershipsOfRemindersInSections:0];
        }
        else
        {
          uint64_t v57 = self;
          v99[0] = 0;
          v99[1] = (id)0xE000000000000000;
          _StringGuts.grow(_:)(57);
          v58._object = (void *)0x80000001007CD810;
          v58._countAndFlagsBits = 0xD000000000000037;
          String.append(_:)(v58);
          v59._countAndFlagsBits = v23;
          v59._object = v16;
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          NSString v60 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v57 internalErrorWithDebugDescription:v60];

          swift_willThrow();
        }
      }
      else
      {
        id v94 = v20;
        if (qword_100907010 != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        sub_10008E2DC(v50, (uint64_t)qword_10090E830);
        unint64_t v51 = v17;
        int v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v52, v53))
        {
          unint64_t v54 = (uint8_t *)swift_slowAlloc();
          unsigned int v98 = (void *)swift_slowAlloc();
          v99[0] = v51;
          *(_DWORD *)unint64_t v54 = 138543362;
          id v16 = v54 + 4;
          unint64_t v55 = v17;
          unint64_t v56 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *unsigned int v98 = v55;

          _os_log_impl((void *)&_mh_execute_header, v52, v53, "REMSmartListStorageCDIngestor: cdSmartList.smartListType is nil {cdSmartList.remObjectID: %{public}@}", v54, 0xCu);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          int v52 = v51;
        }

        NSString v61 = self;
        sub_1000963CC(0, (unint64_t *)&unk_100910210);
        uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
        NSString v63 = String._bridgeToObjectiveC()();
        [v61 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v63];

        swift_willThrow();
      }
    }
    else
    {
      if (qword_100907010 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E2DC(v38, (uint64_t)qword_10090E830);
      int v39 = v17;
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        unsigned int v98 = (void *)swift_slowAlloc();
        v99[0] = v39;
        *(_DWORD *)uint64_t v42 = 138543362;
        id v16 = v42 + 4;
        id v43 = v17;
        int64_t v44 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unsigned int v98 = v43;

        _os_log_impl((void *)&_mh_execute_header, v40, v41, "REMSmartListStorageCDIngestor: cdSmartList.account is nil {cdSmartList.remObjectID: %{public}@}", v42, 0xCu);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v40 = v39;
      }

      uint64_t v46 = self;
      sub_1000963CC(0, (unint64_t *)&unk_100910210);
      uint64_t v47 = swift_getObjCClassFromMetadata();
      NSString v48 = String._bridgeToObjectiveC()();
      [v46 unexpectedNilPropertyWithClass:v47 property:v48];

      swift_willThrow();
    }
  }
  else
  {
    id v45 = v99[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v16;
}

id sub_1001B89A0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090EA40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = a1;
  REMSmartList.NonCustom.init(smartListType:)();
  uint64_t v8 = type metadata accessor for REMSmartList.NonCustom();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    sub_1001BAE08((uint64_t)v6);
    id v10 = [self newObjectID];
  }
  else
  {
    id v10 = (id)REMSmartList.NonCustom.remObjectID.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  id v11 = [objc_allocWithZone((Class)REMSmartListStorage) initWithObjectID:v10 accountID:a2 smartListType:v7];
  [v11 setParentAccountID:a2];

  return v11;
}

unint64_t sub_1001B8B28(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2590, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t sub_1001B8B74(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B2648, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xE) {
    return 14;
  }
  else {
    return v3;
  }
}

void sub_1001B8BC0(void *a1)
{
  id v2 = [a1 remObjectID];
  id v3 = [a1 smartListType];
  id v4 = [a1 manualOrdering];
  if (v4)
  {
    uint64_t v5 = v4;
    if (qword_100907008 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_10090E818);
    id v7 = v2;
    id v8 = v3;
    id v9 = v5;
    id v10 = v7;
    id v11 = v8;
    id v12 = v9;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v39 = v14;
      log = v13;
      uint64_t v15 = swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      unint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543874;
      id v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v16 = v10;

      *(_WORD *)(v15 + 12) = 2082;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v18, v19, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2048;
      id v20 = [v12 topLevelElementIDs];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      unint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v21 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease();
      }
      else
      {
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, log, v39, "ingesting manual ordering {smart list: %{public}@, smart list type: %{public}s, top-level elements count: %ld}", (uint8_t *)v15, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v33 = [a1 accountID];
    id v34 = [self defaultCenter];
    type metadata accessor for REMManualOrderingCDIngestor();
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = v33;
    *(void *)(v35 + 24) = v34;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_10077A530;
    *(void *)(v36 + 32) = v12;
    unint64_t v42 = v36;
    specialized Array._endMutation()();
    unint64_t v37 = v42;
    id v38 = v12;
    sub_10069BF54(v37, v35);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100907008 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10090E818);
    id v23 = v2;
    id v24 = v3;
    id v41 = v23;
    id v25 = v24;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      id v29 = (void *)swift_slowAlloc();
      unint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138543618;
      id v30 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v41;

      *(_WORD *)(v28 + 12) = 2082;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v31, v32, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void *sub_1001B9250(id a1, char a2)
{
  switch(a2)
  {
    case 1:
      id v5 = sub_1001B7AD0();
      id v6 = v5;
      id v4 = _swiftEmptyArrayStorage;
      if (!v5) {
        goto LABEL_20;
      }
      v5;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      goto LABEL_18;
    case 2:
      id v7 = [a1 smartListType];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
      if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          id v6 = 0;
          id v4 = _swiftEmptyArrayStorage;
          goto LABEL_20;
        }
      }
      id v18 = [a1 parentListID];
      id v4 = _swiftEmptyArrayStorage;
      if (v18)
      {
        id v6 = v18;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
LABEL_18:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        id v4 = _swiftEmptyArrayStorage;
      }
      else
      {
        id v6 = 0;
      }
LABEL_20:

      return v4;
    case 3:
      id v14 = [a1 sectionIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1001207D4();
      uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      id v16 = sub_10020A3A0(v15);
      swift_bridgeObjectRelease();
      return v16;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_10077A530;
      *(void *)(v3 + 32) = [a1 accountID];
      specialized Array._endMutation()();
      return (void *)v3;
  }
}

void sub_1001B9520(id a1, NSObject *a2, unsigned __int8 a3, uint64_t a4)
{
  id v6 = a1;
  if (a3 - 1 >= 2)
  {
    if (a3)
    {
      id v19 = [a1 sectionIDsToUndelete];
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_1001207D4();
      uint64_t v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v21 = v20;
      os_log_t v120 = a2;
      uint64_t v22 = v4;
      if ((v20 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v21 = (uint64_t)v129;
        *(void *)type = v130;
        uint64_t v23 = v131;
        uint64_t v8 = (uint64_t)v132;
        unint64_t v7 = v133;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v49 = -1 << *(unsigned char *)(v20 + 32);
        *(void *)type = v20 + 56;
        uint64_t v23 = ~v49;
        uint64_t v50 = -v49;
        if (v50 < 64) {
          uint64_t v51 = ~(-1 << v50);
        }
        else {
          uint64_t v51 = -1;
        }
        unint64_t v7 = v51 & *(void *)(v20 + 56);
      }
      id v6 = (id)(v21 & 0x7FFFFFFFFFFFFFFFLL);
      os_log_t v114 = (os_log_t)((unint64_t)(v23 + 64) >> 6);
      unint64_t loga = v21;
      if ((v21 & 0x8000000000000000) == 0) {
        goto LABEL_35;
      }
LABEL_32:
      uint64_t v52 = v22;
      if (__CocoaSet.Iterator.next()())
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v53 = v134;
        swift_unknownObjectRelease();
        uint64_t v54 = v8;
        uint64_t v55 = v7;
        if (v134)
        {
          do
          {
            sub_100474540(3, v53, a4);
            if (v52)
            {
              sub_1000C1AF8();

              return;
            }
            NSString v60 = v59;
            uint64_t v22 = 0;
            [v59 setSmartList:v120];
            id v61 = [v60 createResolutionTokenMapIfNecessary];
            sub_10047DD38(1);
            NSString v62 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v61 updateForKey:v62];

            uint64_t v8 = v54;
            unint64_t v7 = v55;
            uint64_t v21 = loga;
            if ((loga & 0x8000000000000000) != 0) {
              goto LABEL_32;
            }
LABEL_35:
            uint64_t v52 = v22;
            if (v7)
            {
              uint64_t v55 = (v7 - 1) & v7;
              unint64_t v56 = __clz(__rbit64(v7)) | (v8 << 6);
              uint64_t v54 = v8;
            }
            else
            {
              uint64_t v54 = v8 + 1;
              if (__OFADD__(v8, 1))
              {
                __break(1u);
                goto LABEL_95;
              }
              if (v54 >= (uint64_t)v114) {
                break;
              }
              unint64_t v57 = *(void *)(*(void *)type + 8 * v54);
              if (!v57)
              {
                uint64_t v58 = v8 + 2;
                if (v8 + 2 >= (uint64_t)v114) {
                  break;
                }
                unint64_t v57 = *(void *)(*(void *)type + 8 * v58);
                if (v57) {
                  goto LABEL_44;
                }
                uint64_t v58 = v8 + 3;
                if (v8 + 3 >= (uint64_t)v114) {
                  break;
                }
                unint64_t v57 = *(void *)(*(void *)type + 8 * v58);
                if (v57)
                {
LABEL_44:
                  uint64_t v54 = v58;
                }
                else
                {
                  uint64_t v54 = v8 + 4;
                  if (v8 + 4 >= (uint64_t)v114) {
                    break;
                  }
                  unint64_t v57 = *(void *)(*(void *)type + 8 * v54);
                  if (!v57)
                  {
                    os_log_t v63 = (os_log_t)(v8 + 5);
                    while (v114 != v63)
                    {
                      unint64_t v57 = *(void *)(*(void *)type + 8 * (void)v63);
                      os_log_t v63 = (os_log_t)((char *)v63 + 1);
                      if (v57)
                      {
                        uint64_t v54 = (uint64_t)&v63[-1].isa + 7;
                        goto LABEL_45;
                      }
                    }
                    break;
                  }
                }
              }
LABEL_45:
              uint64_t v55 = (v57 - 1) & v57;
              unint64_t v56 = __clz(__rbit64(v57)) + (v54 << 6);
            }
            id v53 = *(id *)(*(void *)(v21 + 48) + 8 * v56);
          }
          while (v53);
        }
      }
      sub_1000C1AF8();
    }
    else
    {
      id v17 = [a1 accountID];
      sub_100474518(0, v17, a4);
      if (v4)
      {
      }
      else
      {
        unint64_t v32 = v18;
        if (qword_100907008 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_10008E2DC(v33, (uint64_t)qword_10090E818);
        id v34 = a2;
        id v35 = v32;
        uint64_t v36 = v34;
        id v37 = v35;
        id v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc();
          id v134 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136446466;
          id v41 = [v36 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          os_log_type_t typeb = v39;
          uint64_t v42 = Optional.descriptionOrNil.getter();
          unint64_t v44 = v43;

          sub_1000C51B8(v42, v44, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2082;
          id v45 = [v37 remObjectID];
          uint64_t v46 = Optional.descriptionOrNil.getter();
          unint64_t v48 = v47;

          sub_1000C51B8(v46, v48, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v38, typeb, "Updating smartList.account {smartList: %{public}s, account: %{public}s}", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        [v36 setAccount:v37];
      }
    }
  }
  else
  {
    LOBYTE(v7) = a3;
    uint64_t v8 = (uint64_t)[a2 createResolutionTokenMapIfNecessary];
    id v9 = [v6 resolutionTokenMap];
    if (v9)
    {
      uint64_t v10 = v9;
      sub_100094134(&qword_10090EA38);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      *(unsigned char *)(inited + 32) = v7;
      id v12 = sub_10047FF6C(v10, inited);
      swift_setDeallocating();
      sub_10047D91C(v7);
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned int v14 = [(id)v8 mergeWithMap:v12 forKey:v13];

      if (!v14)
      {

        return;
      }
      if (v7 == 1)
      {
        uint64_t v15 = sub_1001B7AD0();
        if (v15)
        {
          sub_100474518(1, v15, a4);
          if (v4)
          {

            return;
          }
          uint64_t v77 = v16;
        }
        else
        {
          uint64_t v77 = 0;
        }
        os_log_t v115 = v15;
        if (qword_100907008 != -1) {
          swift_once();
        }
        uint64_t v79 = type metadata accessor for Logger();
        sub_10008E2DC(v79, (uint64_t)qword_10090E818);
        id v80 = v77;
        uint64_t v81 = a2;
        id v82 = v80;
        unint64_t v83 = v81;
        id v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v84, v85))
        {
          os_log_type_t v112 = v85;
          os_log_type_t v121 = v84;
          os_log_t logc = (os_log_t)v8;
          uint64_t v86 = swift_slowAlloc();
          id v134 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v86 = 136446466;
          id v87 = [v83 remObjectID];
          sub_100094134((uint64_t *)&unk_100914BC0);
          uint64_t v88 = Optional.descriptionOrNil.getter();
          unint64_t v90 = v89;

          sub_1000C51B8(v88, v90, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v86 + 12) = 2082;
          if (v77) {
            id v91 = [v82 remObjectID];
          }
          else {
            id v91 = 0;
          }
          uint64_t v109 = Optional.descriptionOrNil.getter();
          unint64_t v111 = v110;

          sub_1000C51B8(v109, v111, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v121, v112, "Updating smartList.parentAccount {smartList: %{public}s, parentAccount: %{public}s}", (uint8_t *)v86, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v8 = (uint64_t)logc;
        }
        else
        {
        }
        [v83 setParentAccount:v82];

        os_log_t v108 = v115;
        goto LABEL_93;
      }
      os_log_t logb = (os_log_t)v8;
      id v67 = [v6 smartListType];
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v70 = v69;
      typea = v12;
      if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v70 == v71)
      {

        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v72 & 1) == 0)
        {
          id v78 = 0;
          uint64_t v75 = 0;
          os_log_t v74 = logb;
LABEL_81:
          if (qword_100907008 != -1) {
            swift_once();
          }
          uint64_t v92 = type metadata accessor for Logger();
          sub_10008E2DC(v92, (uint64_t)qword_10090E818);
          id v93 = v78;
          id v94 = a2;
          id v95 = v93;
          unint64_t v96 = v94;
          uint64_t v97 = Logger.logObject.getter();
          os_log_type_t v98 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v97, v98))
          {
            os_log_type_t v113 = v98;
            char v116 = v97;
            os_log_t v122 = v75;
            uint64_t v99 = swift_slowAlloc();
            id v134 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v99 = 136315394;
            id v100 = [v96 remObjectID];
            sub_100094134((uint64_t *)&unk_100914BC0);
            uint64_t v101 = Optional.descriptionOrNil.getter();
            unint64_t v103 = v102;

            sub_1000C51B8(v101, v103, (uint64_t *)&v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v99 + 12) = 2080;
            if (v78) {
              id v104 = [v95 remObjectID];
            }
            else {
              id v104 = 0;
            }
            uint64_t v105 = Optional.descriptionOrNil.getter();
            unint64_t v107 = v106;

            sub_1000C51B8(v105, v107, (uint64_t *)&v134);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v116, v113, "Updating smartList.parentList {smartList: %s, parentList: %s}", (uint8_t *)v99, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v75 = v122;
            os_log_t v74 = logb;
          }
          else
          {
          }
          [v96 setParentList:v95];

          os_log_t v108 = typea;
LABEL_93:

          return;
        }
      }
      id v73 = [v6 parentListID];
      os_log_t v74 = logb;
      if (v73)
      {
        uint64_t v75 = v73;
        sub_100474E30(2, v75, a4);
        if (v4)
        {

          return;
        }
        id v78 = v76;
      }
      else
      {
        id v78 = 0;
        uint64_t v75 = 0;
      }
      goto LABEL_81;
    }
    if (qword_100907008 != -1) {
LABEL_95:
    }
      swift_once();
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10090E818);
    id v25 = v6;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      log = v26;
      id v29 = (void *)swift_slowAlloc();
      id v134 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 138543618;
      id v128 = [v25 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v29 = v128;

      *(_WORD *)(v28 + 12) = 2082;
      if (v7 == 2) {
        uint64_t v30 = 0x694C746E65726170;
      }
      else {
        uint64_t v30 = 0x6341746E65726170;
      }
      if (v7 == 2) {
        unint64_t v31 = 0xEC00000044497473;
      }
      else {
        unint64_t v31 = 0xEF4449746E756F63;
      }
      sub_1000C51B8(v30, v31, (uint64_t *)&v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v27, "REMSmartListStorageCDIngestor: establishRelationship(onStorage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}", (uint8_t *)v28, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v64 = self;
    sub_1000963CC(0, &qword_10090B328);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    NSString v66 = String._bridgeToObjectiveC()();
    [v64 unexpectedNilPropertyWithClass:ObjCClassFromMetadata property:v66];

    swift_willThrow();
  }
}

void sub_1001BA59C(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for REMJSONDeserializationError();
  if (objc_msgSend(a2, "shouldUpdateSectionsOrdering", __chkstk_darwin(v5).n128_f64[0]))
  {
    id v6 = [a1 storeControllerManagedObjectContext];
    if (v6)
    {
      unint64_t v7 = v6;
      id v8 = [a2 objectID];
      if (qword_100907108 != -1) {
        swift_once();
      }
      uint64_t v9 = sub_1001D7584((unint64_t)v8, 0, (uint64_t)v7, (Class)qword_100942098, 0, 0);
      if (v2)
      {
      }
      else
      {
        uint64_t v22 = v7;
        unint64_t v23 = v9;
        uint64_t v20 = a1;
        uint64_t v21 = v8;
        id v10 = [a1 sectionIDsOrderingAsData];
        if (v10)
        {
          uint64_t v11 = v10;
          uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v14 = v13;

          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          static REMJSONRepresentable.fromJSONData(_:)();
          sub_100097F34(v12, v14);
          type metadata accessor for REMCDSmartListSection();
          uint64_t v15 = REMOrderedIdentifierMap.reorder<A>(objects:)();

          swift_bridgeObjectRelease();
          unint64_t v16 = v15;
        }
        else
        {
          unint64_t v16 = v23;
        }
        sub_1002004DC(v16);
        swift_bridgeObjectRelease();
        id v17 = objc_allocWithZone((Class)NSMutableOrderedSet);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v19 = [v17 initWithArray:isa];

        [v20 setSections:v19];
      }
    }
  }
}

uint64_t sub_1001BAE08(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10090EA40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.RelationshipOrderingValueKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.RelationshipOrderingValueKey;
}

unsigned char *_s7remindd29REMSmartListStorageCDIngestorC28RelationshipOrderingValueKeyOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001BAF18);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.OrderableRelationshipKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.OrderableRelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMSmartListStorageCDIngestor.RelationshipKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BB01CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.RelationshipKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.RelationshipKey;
}

unsigned char *storeEnumTagSinglePayload for REMSmartListStorageCDIngestor.ValueKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BB120);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMSmartListStorageCDIngestor.ValueKey()
{
  return &type metadata for REMSmartListStorageCDIngestor.ValueKey;
}

uint64_t sub_1001BB158()
{
  return sub_1000B2138(&qword_10090EA48, &qword_10090EA50);
}

unint64_t sub_1001BB184()
{
  unint64_t result = qword_10090EA58;
  if (!qword_10090EA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090EA58);
  }
  return result;
}

uint64_t sub_1001BB1D8()
{
  return sub_1000B2138(&qword_10090EA60, &qword_10090EA68);
}

unint64_t sub_1001BB204()
{
  unint64_t result = qword_10090EA70;
  if (!qword_10090EA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090EA70);
  }
  return result;
}

uint64_t sub_1001BB258()
{
  return sub_1000B2138(&qword_10090EA78, &qword_10090EA80);
}

unint64_t sub_1001BB284()
{
  unint64_t result = qword_10090EA88;
  if (!qword_10090EA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090EA88);
  }
  return result;
}

uint64_t sub_1001BB2D8()
{
  return sub_1000B2138(&qword_10090EA90, &qword_10090EA98);
}

unint64_t sub_1001BB304()
{
  unint64_t result = qword_10090EAA0;
  if (!qword_10090EAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090EAA0);
  }
  return result;
}

uint64_t sub_1001BB358(uint64_t a1, char a2)
{
  if ((a2 & 0x80) == 0)
  {
    if (a1) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t KeyPath = swift_getKeyPath();
  sub_1001BBCCC(a1, a2);
  sub_10039D074(KeyPath, a1);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if ((a2 & 1) == 0)
  {
LABEL_7:
    uint64_t v5 = rem_currentRuntimeVersion();
    uint64_t v6 = swift_getKeyPath();
    sub_10039D088(v6, v5);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (_swiftEmptyArrayStorage[2] >= _swiftEmptyArrayStorage[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
LABEL_10:

  return sub_1002F52FC(_swiftEmptyArrayStorage);
}

const char *sub_1001BB4B4()
{
  return "reminderIdentifier";
}

id sub_1001BB4C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 sortOrder];
  *a2 = result;
  return result;
}

id sub_1001BB4FC(void *a1, id *a2)
{
  return [*a2 setSortOrder:*a1];
}

uint64_t sub_1001BB510()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942038 = v0;
  return result;
}

void sub_1001BB598(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a1;
  if (*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v33 = v7;
    if (v14) {
      goto LABEL_3;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    id v13 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v33 = v7;
  if (!v11) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v12 = *(id *)(v10 + 32);
  }
  id v13 = v12;
  swift_bridgeObjectRelease();
LABEL_9:
  id v35 = v13;
  sub_100094134(&qword_10090EAC0);
  Optional.tryUnwrap(_:file:line:)();
  if (v3)
  {
LABEL_10:

    return;
  }
  unint64_t v32 = a2;

  id v13 = v34;
  id v15 = [v34 account];
  id v35 = v15;
  sub_100094134((uint64_t *)&unk_10090AF30);
  Optional.tryUnwrap(_:file:line:)();

  id v16 = v34;
  id v34 = 0;
  id v17 = [v16 remObjectIDWithError:&v34];
  id v18 = v34;
  if (!v17)
  {
    id v29 = v16;
    id v30 = v34;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_10;
  }
  id v19 = v17;
  uint64_t v20 = self;
  id v21 = v18;
  id v22 = [v13 reminderIdentifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
  id v24 = [v20 objectIDWithUUID:isa];

  type metadata accessor for REMDueDateDeltaAlertCDIngestor();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v19;
  *(void *)(inited + 24) = v24;
  id v26 = v19;
  id v27 = v24;
  uint64_t v28 = sub_1001BBB84(v10);

  swift_release();
  void *v32 = v28;
}

uint64_t sub_1001BB960(uint64_t a1)
{
  sub_100094134(&qword_10090EAB8);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  unsigned int v4 = (void *)result;
  int64_t v5 = 0;
  uint64_t v23 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v6;
  int64_t v22 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    id v18 = *(void **)(*(void *)(v23 + 48) + 8 * i);
    unint64_t v25 = *(void *)(*(void *)(v23 + 56) + 8 * i);
    id v19 = v18;
    swift_bridgeObjectRetain();
    sub_1001BB598(&v25, &v24);
    uint64_t result = swift_bridgeObjectRelease();
    if (v1)
    {

      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(void *)(v4[6] + 8 * i) = v19;
    *(void *)(v4[7] + 8 * i) = v24;
    uint64_t v20 = v4[2];
    BOOL v15 = __OFADD__(v20, 1);
    uint64_t v21 = v20 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v21;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v22) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    unint64_t v11 = (v16 - 1) & v16;
  }
  int64_t v17 = v5 + 1;
  if (v5 + 1 >= v22) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v5 + 2;
  if (v5 + 2 >= v22) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  int64_t v17 = v5 + 3;
  if (v5 + 3 >= v22) {
    return (uint64_t)v4;
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_14:
    int64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v22) {
      return (uint64_t)v4;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001BBB84(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v3) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v3 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v5 = 0;
    while (v3 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      sub_100747480(v6);

      if (v1) {
        return (void *)swift_release();
      }
      ++v5;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v3 == v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001BBCCC(uint64_t a1, char a2)
{
  if (a2 < 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_1001BBCE0(unint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v5 = v3;
  LODWORD(v7) = a2;
  uint64_t v96 = type metadata accessor for UUID();
  uint64_t v9 = *(unsigned __int8 **)(v96 - 8);
  __chkstk_darwin(v96);
  id v94 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v13 = (unint64_t)&v84 - v12;
  uint64_t v14 = (id *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_73;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v15)
  {
    do
    {
      unint64_t v93 = (unint64_t)a3;
      a3 = (unsigned __int8 *)(a1 & 0xC000000000000001);
      if ((a1 & 0xC000000000000001) != 0)
      {
LABEL_77:
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_79;
        }
        id v16 = *(id *)(a1 + 32);
      }
      id v90 = v16;
      swift_bridgeObjectRelease();
      if (v14)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      int64_t v17 = _swiftEmptyArrayStorage;
      uint64_t v95 = v4;
      LODWORD(v92) = v7;
      if (!v4)
      {
LABEL_20:
        int64_t v23 = v17[2];
        uint64_t v4 = (uint64_t)_swiftEmptyArrayStorage;
        id v91 = (void (**)(unint64_t, uint64_t))v17;
        if (v23)
        {
          os_log_type_t v85 = v5;
          v98[0] = _swiftEmptyArrayStorage;
          sub_1001DE148(0, v23, 0);
          uint64_t v24 = v98[0];
          unint64_t v25 = (id *)(v17 + 4);
          do
          {
            id v26 = *v25;
            id v27 = [v26 uuid];
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            v98[0] = v24;
            unint64_t v29 = v24[2];
            unint64_t v28 = v24[3];
            if (v29 >= v28 >> 1)
            {
              sub_1001DE148(v28 > 1, v29 + 1, 1);
              uint64_t v24 = v98[0];
            }
            _OWORD v24[2] = v29 + 1;
            (*((void (**)(unint64_t, unint64_t, uint64_t))v9 + 4))((unint64_t)v24 + ((v9[80] + 32) & ~(unint64_t)v9[80]) + *((void *)v9 + 9) * v29, v13, v96);
            ++v25;
            --v23;
          }
          while (v23);
          uint64_t v5 = v85;
          LOBYTE(v7) = (_BYTE)v92;
          uint64_t v4 = (uint64_t)_swiftEmptyArrayStorage;
        }
        else
        {
          uint64_t v24 = _swiftEmptyArrayStorage;
        }
        id v30 = (void *)sub_1001BB358((uint64_t)v24, v7 & 1 | 0x80);
        swift_bridgeObjectRelease();
        unint64_t v31 = sub_100747F48();
        id v86 = v30;
        a3 = (unsigned __int8 *)sub_1003BC91C(v31, 0, 0, (uint64_t)v30);
        swift_bridgeObjectRelease();
        if (qword_100907020 == -1) {
          goto LABEL_28;
        }
        goto LABEL_80;
      }
      v98[0] = _swiftEmptyArrayStorage;
      uint64_t v14 = v98;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v4 & 0x8000000000000000) == 0)
      {
        unint64_t v7 = 0;
        while (v4 != v7)
        {
          if (a3) {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v18 = *(id *)(a1 + 8 * v7 + 32);
          }
          id v19 = v18;
          id v99 = 0;
          id v20 = [v18 remObjectIDWithError:&v99];
          if (!v20)
          {
            id v63 = v99;
            _convertNSErrorToError(_:)();

            swift_willThrow();
LABEL_59:

            swift_release();
            return a1;
          }
          uint64_t v21 = v20;
          id v22 = v99;
          sub_100693E40(v21);
          if (v5) {
            goto LABEL_59;
          }
          ++v7;

          uint64_t v14 = v98;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v4 = v95;
          if (v95 == v7)
          {
            int64_t v17 = v98[0];
            LOBYTE(v7) = (_BYTE)v92;
            goto LABEL_20;
          }
        }
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      swift_once();
LABEL_28:
      sub_1001BCA48();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [a3 setSortDescriptors:isa];

      uint64_t v89 = sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t inited = swift_initStackObject();
      long long v88 = xmmword_10077A530;
      *(_OWORD *)(inited + 16) = xmmword_10077A530;
      *(void *)(inited + 32) = swift_getKeyPath();
      v98[0] = (id)inited;
      specialized Array._endMutation()();
      a1 = (unint64_t)v98[0];
      id v99 = (id)v4;
      sub_1001DE058(0, 1, 0);
      id v34 = v99;
      if ((a1 & 0xC000000000000001) != 0)
      {
        unint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v7 = *(void *)(a1 + 32);
        swift_retain();
      }
      id v87 = a3;
      uint64_t v35 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v36)
      {
LABEL_83:
        v98[0] = 0;
        v98[1] = (id)0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v83._countAndFlagsBits = 0xD00000000000002CLL;
        v83._object = (void *)0x80000001007CAF70;
        String.append(_:)(v83);
        unint64_t v97 = v7;
        sub_100094134(&qword_100913B30);
        _print_unlocked<A, B>(_:_:)();
        unint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v37 = v35;
      uint64_t v38 = v36;
      swift_release();
      unint64_t v40 = v34[2];
      unint64_t v39 = v34[3];
      unint64_t v7 = v40 + 1;
      if (v40 >= v39 >> 1)
      {
        sub_1001DE058(v39 > 1, v40 + 1, 1);
        id v34 = v99;
      }
      void v34[2] = v7;
      id v41 = (char *)&v34[2 * v40];
      *((void *)v41 + 4) = v37;
      *((void *)v41 + 5) = v38;
      swift_bridgeObjectRelease();
      Class v42 = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      id v43 = v87;
      [v87 setRelationshipKeyPathsForPrefetching:v42];

      type metadata accessor for REMCDDueDateDeltaAlert();
      uint64_t v44 = NSManagedObjectContext.fetch<A>(_:)();
      if (v5)
      {

        swift_bridgeObjectRelease();
LABEL_36:

        return a1;
      }
      unint64_t v13 = v44;
      if (v95 < 2)
      {
        if (v91[2])
        {
          id v64 = v91[4];
          id v65 = v64;
        }
        else
        {
          id v64 = 0;
        }
        id v68 = v90;
        swift_bridgeObjectRelease();
        id v99 = v64;
        sub_100094134(&qword_10090EAA8);
        Optional.tryUnwrap(_:file:line:)();

        id v69 = v98[0];
        id v70 = [v68 account];
        id v99 = v70;
        sub_100094134((uint64_t *)&unk_10090AF30);
        Optional.tryUnwrap(_:file:line:)();

        id v71 = v98[0];
        v98[0] = 0;
        id v72 = [v71 remObjectIDWithError:v98];
        id v73 = v98[0];
        if (v72)
        {
          id v74 = v72;
          type metadata accessor for REMDueDateDeltaAlertCDIngestor();
          uint64_t v75 = swift_initStackObject();
          *(void *)(v75 + 16) = v74;
          *(void *)(v75 + 24) = v69;
          id v76 = v73;
          id v77 = v69;
          uint64_t v79 = sub_1001BBB84(v13);
          swift_bridgeObjectRelease();
          sub_100094134(&qword_10090EAB0);
          uint64_t v80 = swift_initStackObject();
          *(_OWORD *)(v80 + 16) = xmmword_100776E40;
          *(void *)(v80 + 32) = v77;
          *(void *)(v80 + 40) = v79;
          id v81 = v77;
          a1 = sub_1002ED278(v80);
          swift_setDeallocating();
        }
        else
        {
          id v78 = v98[0];
          swift_bridgeObjectRelease();
          a1 = _convertNSErrorToError(_:)();

          swift_willThrow();
        }
        goto LABEL_36;
      }
      swift_bridgeObjectRelease();
      v98[0] = _swiftEmptyDictionarySingleton;
      if (v13 >> 62)
      {
        swift_bridgeObjectRetain();
        a3 = (unsigned __int8 *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        a3 = *(unsigned __int8 **)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      os_log_type_t v85 = 0;
      if (!a3)
      {
        uint64_t v5 = (id *)_swiftEmptyDictionarySingleton;
LABEL_63:
        swift_bridgeObjectRelease();
        NSString v66 = v85;
        uint64_t v67 = sub_1001BB960((uint64_t)v5);
        if (!v66) {
          a1 = v67;
        }

        swift_release();
        goto LABEL_36;
      }
      id v92 = self;
      unint64_t v93 = v13 & 0xC000000000000001;
      id v91 = (void (**)(unint64_t, uint64_t))(v9 + 8);
      uint64_t v5 = (id *)_swiftEmptyDictionarySingleton;
      uint64_t v4 = 4;
      while (1)
      {
        uint64_t v14 = (id *)(v4 - 4);
        if (v93)
        {
          id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v47 = v4 - 3;
          if (__OFADD__(v14, 1)) {
            goto LABEL_71;
          }
        }
        else
        {
          id v46 = *(id *)(v13 + 8 * v4);
          uint64_t v47 = v4 - 3;
          if (__OFADD__(v14, 1)) {
            goto LABEL_71;
          }
        }
        uint64_t v95 = v47;
        uint64_t v9 = a3;
        a3 = (unsigned __int8 *)v13;
        id v48 = v46;
        id v49 = [v46 reminderIdentifier];
        a1 = (unint64_t)v94;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        Class v50 = UUID._bridgeToObjectiveC()().super.isa;
        unint64_t v13 = (unint64_t)[v92 objectIDWithUUID:v50];

        (*v91)(a1, v96);
        uint64_t v14 = v5;
        unint64_t v7 = sub_10030703C((void *)v13);
        id v52 = v5[2];
        BOOL v53 = (v51 & 1) == 0;
        uint64_t v54 = (uint64_t)v52 + v53;
        if (__OFADD__(v52, v53)) {
          break;
        }
        a1 = v51;
        if ((uint64_t)v5[3] < v54)
        {
          sub_10030DC34(v54, 1);
          uint64_t v5 = (id *)v98[0];
          unint64_t v55 = sub_10030703C((void *)v13);
          if ((a1 & 1) != (v56 & 1))
          {
            sub_100094134((uint64_t *)&unk_100913F20);
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            goto LABEL_83;
          }
          unint64_t v7 = v55;
        }
        if (a1)
        {

          id v45 = (char *)v5[7] + 8 * v7;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          a1 = *(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (a1 >= *(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          uint64_t v57 = swift_allocObject();
          *(_OWORD *)(v57 + 16) = v88;
          *(void *)(v57 + 32) = v48;
          id v99 = (id)v57;
          uint64_t v14 = &v99;
          specialized Array._endMutation()();
          id v58 = v99;
          v5[(v7 >> 6) + 8] = (id)((unint64_t)v5[(v7 >> 6) + 8] | (1 << v7));
          uint64_t v59 = 8 * v7;
          *(void *)((char *)v5[6] + v59) = v13;
          *(void *)((char *)v5[7] + v59) = v58;
          NSString v60 = (char *)v5[2];
          BOOL v61 = __OFADD__(v60, 1);
          NSString v62 = v60 + 1;
          if (v61)
          {
            __break(1u);
            goto LABEL_77;
          }
          v5[2] = v62;
        }
        unint64_t v13 = (unint64_t)a3;
        a3 = v9;
        ++v4;
        if ((unsigned __int8 *)v95 == v9) {
          goto LABEL_63;
        }
      }
LABEL_72:
      __break(1u);
LABEL_73:
      swift_bridgeObjectRetain();
    }
    while (_CocoaArrayWrapper.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  return sub_1002ED278((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1001BCA48()
{
  unint64_t result = qword_100910DE0;
  if (!qword_100910DE0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100910DE0);
  }
  return result;
}

id sub_1001BCA88@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1001BCAC4(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

id sub_1001BCAD8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 sortOrder];
  *a2 = result;
  return result;
}

id sub_1001BCB0C(void *a1, id *a2)
{
  return [*a2 setSortOrder:*a1];
}

uint64_t sub_1001BCB20(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BCB84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BCC4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BCCB0(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = a2 + v5++;
    unint64_t v7 = 0x80000001007C66C0;
    unint64_t v8 = 0xD000000000000012;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 1:
        unint64_t v7 = 0x80000001007C6700;
        break;
      case 2:
        unint64_t v8 = 0xD000000000000018;
        unint64_t v7 = 0x80000001007C65F0;
        break;
      case 3:
        unint64_t v8 = 0xD00000000000001DLL;
        unint64_t v7 = 0x80000001007C6E40;
        break;
      case 4:
        unint64_t v8 = 0x44496E6F73726570;
        unint64_t v7 = 0xEC000000746C6153;
        break;
      case 5:
        unint64_t v8 = 0xD000000000000021;
        unint64_t v7 = 0x80000001007C6E60;
        break;
      case 6:
        unint64_t v8 = 0xD000000000000023;
        unint64_t v7 = 0x80000001007C6E90;
        break;
      case 7:
        unint64_t v8 = 0xD000000000000019;
        unint64_t v7 = 0x80000001007C6EC0;
        break;
      case 8:
        unint64_t v8 = 0xD000000000000019;
        unint64_t v7 = 0x80000001007C6EE0;
        break;
      case 9:
        unint64_t v8 = 0xD00000000000001BLL;
        unint64_t v7 = 0x80000001007C6F00;
        break;
      default:
        break;
    }
    unint64_t v9 = 0x80000001007C66C0;
    unint64_t v10 = 0xD000000000000012;
    switch(a1)
    {
      case 1:
        uint64_t v11 = "didChooseToMigrateLocally";
        goto LABEL_22;
      case 2:
        unint64_t v10 = 0xD000000000000018;
        uint64_t v11 = "smartListIDsToUndelete";
        goto LABEL_22;
      case 3:
        unint64_t v10 = 0xD00000000000001DLL;
        uint64_t v11 = "derIdentifier";
        goto LABEL_22;
      case 4:
        unint64_t v9 = 0xEC000000746C6153;
        if (v8 != 0x44496E6F73726570) {
          goto LABEL_27;
        }
        goto LABEL_26;
      case 5:
        unint64_t v10 = 0xD000000000000021;
        uint64_t v11 = "listIDsMergeableOrderingAsset";
        goto LABEL_22;
      case 6:
        unint64_t v10 = 0xD000000000000023;
        uint64_t v11 = "LocalesInfoAsData";
        goto LABEL_22;
      case 7:
        unint64_t v10 = 0xD000000000000019;
        uint64_t v11 = "LocalesInfoChecksum";
LABEL_22:
        unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
        if (v8 != v10) {
          goto LABEL_27;
        }
        goto LABEL_26;
      case 8:
        unint64_t v10 = 0xD000000000000019;
        unint64_t v9 = 0x80000001007C6EE0;
        goto LABEL_25;
      case 9:
        unint64_t v9 = 0x80000001007C6F00;
        if (v8 != 0xD00000000000001BLL) {
          goto LABEL_27;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (v8 != v10) {
          goto LABEL_27;
        }
LABEL_26:
        if (v7 == v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_27:
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v12 & 1) == 0)
        {
          if (v2 == v5)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_1001BCFF4(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (2)
  {
    uint64_t v6 = a2 + v5++;
    unint64_t v7 = 0xE800000000000000;
    uint64_t v8 = 0x7344496D72616C61;
    switch(*(unsigned char *)(v6 + 32))
    {
      case 1:
        unint64_t v7 = 0xE600000000000000;
        uint64_t v8 = 0x7961446C6C61;
        break;
      case 2:
        uint64_t v8 = 0xD000000000000026;
        unint64_t v9 = "alternativeDisplayDateDate_forCalendar";
        goto LABEL_26;
      case 3:
        uint64_t v10 = 0x686361747461;
        goto LABEL_8;
      case 4:
        uint64_t v10 = 0x6E6769737361;
LABEL_8:
        uint64_t v8 = v10 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
        unint64_t v7 = 0xED0000734449746ELL;
        break;
      case 5:
        uint64_t v8 = 0x6574656C706D6F63;
        unint64_t v7 = 0xE900000000000064;
        break;
      case 6:
        uint64_t v8 = 0x6974656C706D6F63;
        unint64_t v7 = 0xEE00657461446E6FLL;
        break;
      case 7:
        uint64_t v8 = 0x48746361746E6F63;
        unint64_t v7 = 0xEE0073656C646E61;
        break;
      case 8:
        uint64_t v8 = 0x6E6F697461657263;
        uint64_t v11 = 1702125892;
        goto LABEL_34;
      case 9:
        unint64_t v7 = 0xE700000000000000;
        uint64_t v8 = 0x65746144657564;
        break;
      case 0xA:
        uint64_t v8 = 0xD000000000000016;
        unint64_t v9 = "dueDateDeltaAlertsData";
        goto LABEL_26;
      case 0xB:
        unint64_t v7 = 0xE700000000000000;
        uint64_t v8 = 0x64656767616C66;
        break;
      case 0xC:
        uint64_t v8 = 0x4967617468736168;
        unint64_t v7 = 0xEA00000000007344;
        break;
      case 0xD:
        unint64_t v7 = 0xE600000000000000;
        uint64_t v8 = 0x6C7255736369;
        break;
      case 0xE:
        uint64_t v8 = 0x646574726F706D69;
        unint64_t v7 = 0xEF61746144534349;
        break;
      case 0xF:
        uint64_t v8 = 0xD000000000000010;
        unint64_t v9 = "lastModifiedDate";
        goto LABEL_26;
      case 0x10:
        unint64_t v7 = 0xE400000000000000;
        uint64_t v8 = 1953720684;
        break;
      case 0x11:
        uint64_t v12 = 0x447365746F6ELL;
        goto LABEL_30;
      case 0x12:
        unint64_t v13 = "notesDocumentAsset";
        goto LABEL_32;
      case 0x13:
        uint64_t v8 = 0x6552746E65726170;
        unint64_t v7 = 0xEE007265646E696DLL;
        break;
      case 0x14:
        uint64_t v8 = 0x797469726F697270;
        break;
      case 0x15:
        uint64_t v8 = 0xD000000000000011;
        unint64_t v9 = "recurrenceRuleIDs";
LABEL_26:
        unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
        break;
      case 0x16:
        uint64_t v8 = 0x7461447472617473;
        unint64_t v7 = 0xE900000000000065;
        break;
      case 0x17:
        uint64_t v8 = 0x656E6F5A656D6974;
        break;
      case 0x18:
        uint64_t v12 = 0x44656C746974;
LABEL_30:
        uint64_t v8 = v12 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
        unint64_t v7 = 0xED0000746E656D75;
        break;
      case 0x19:
        unint64_t v13 = "titleDocumentAsset";
LABEL_32:
        unint64_t v7 = (unint64_t)(v13 - 32) | 0x8000000000000000;
        uint64_t v8 = 0xD000000000000012;
        break;
      case 0x1A:
        uint64_t v8 = 0x6974634172657375;
        uint64_t v11 = 2037672310;
LABEL_34:
        unint64_t v7 = v11 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        break;
      default:
        break;
    }
    unint64_t v14 = 0xE800000000000000;
    unint64_t v15 = 0x7344496D72616C61;
    switch(a1)
    {
      case 1:
        unint64_t v14 = 0xE600000000000000;
        if (v8 == 0x7961446C6C61) {
          goto LABEL_82;
        }
        goto LABEL_83;
      case 2:
        unint64_t v16 = 0xD000000000000026;
        int64_t v17 = "alternativeDisplayDateDate_forCalendar";
        goto LABEL_69;
      case 3:
        uint64_t v18 = 0x686361747461;
        goto LABEL_41;
      case 4:
        uint64_t v18 = 0x6E6769737361;
LABEL_41:
        uint64_t v19 = v18 & 0xFFFFFFFFFFFFLL | 0x656D000000000000;
        uint64_t v20 = 0x734449746ELL;
        goto LABEL_77;
      case 5:
        unint64_t v14 = 0xE900000000000064;
        if (v8 != 0x6574656C706D6F63) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 6:
        uint64_t v21 = 0x6974656C706D6F63;
        uint64_t v22 = 0x657461446E6FLL;
        goto LABEL_64;
      case 7:
        uint64_t v21 = 0x48746361746E6F63;
        uint64_t v22 = 0x73656C646E61;
        goto LABEL_64;
      case 8:
        uint64_t v23 = 0x6E6F697461657263;
        uint64_t v24 = 1702125892;
        goto LABEL_87;
      case 9:
        unint64_t v14 = 0xE700000000000000;
        if (v8 != 0x65746144657564) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 10:
        unint64_t v16 = 0xD000000000000016;
        int64_t v17 = "dueDateDeltaAlertsData";
        goto LABEL_69;
      case 11:
        unint64_t v14 = 0xE700000000000000;
        if (v8 != 0x64656767616C66) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 12:
        unint64_t v14 = 0xEA00000000007344;
        if (v8 != 0x4967617468736168) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 13:
        unint64_t v14 = 0xE600000000000000;
        if (v8 != 0x6C7255736369) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 14:
        unint64_t v14 = 0xEF61746144534349;
        if (v8 != 0x646574726F706D69) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 15:
        unint64_t v16 = 0xD000000000000010;
        int64_t v17 = "lastModifiedDate";
        goto LABEL_69;
      case 16:
        unint64_t v14 = 0xE400000000000000;
        if (v8 != 1953720684) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 17:
        uint64_t v25 = 0x447365746F6ELL;
        goto LABEL_76;
      case 18:
        id v26 = "notesDocumentAsset";
        goto LABEL_80;
      case 19:
        uint64_t v21 = 0x6552746E65726170;
        uint64_t v22 = 0x7265646E696DLL;
LABEL_64:
        unint64_t v14 = v22 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        if (v8 != v21) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 20:
        if (v8 != 0x797469726F697270) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 21:
        unint64_t v16 = 0xD000000000000011;
        int64_t v17 = "recurrenceRuleIDs";
LABEL_69:
        unint64_t v14 = (unint64_t)(v17 - 32) | 0x8000000000000000;
        if (v8 != v16) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 22:
        unint64_t v14 = 0xE900000000000065;
        if (v8 != 0x7461447472617473) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 23:
        if (v8 != 0x656E6F5A656D6974) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 24:
        uint64_t v25 = 0x44656C746974;
LABEL_76:
        uint64_t v19 = v25 & 0xFFFFFFFFFFFFLL | 0x636F000000000000;
        uint64_t v20 = 0x746E656D75;
LABEL_77:
        unint64_t v14 = v20 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
        if (v8 != v19) {
          goto LABEL_83;
        }
        goto LABEL_82;
      case 25:
        id v26 = "titleDocumentAsset";
LABEL_80:
        unint64_t v14 = (unint64_t)(v26 - 32) | 0x8000000000000000;
        unint64_t v15 = 0xD000000000000012;
        goto LABEL_81;
      case 26:
        uint64_t v23 = 0x6974634172657375;
        uint64_t v24 = 2037672310;
LABEL_87:
        unint64_t v14 = v24 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
        if (v8 != v23) {
          goto LABEL_83;
        }
        goto LABEL_82;
      default:
LABEL_81:
        if (v8 != v15) {
          goto LABEL_83;
        }
LABEL_82:
        if (v7 == v14)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_83:
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
        {
          if (v2 == v5)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_1001BD790(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_5:
      uint64_t v6 = v5;
      sub_1001C1A64();
      char v7 = static NSObject.== infix(_:_:)();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001BD908(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = 5;
  while (1)
  {
    uint64_t v11 = v10 - 3;
    if (__OFADD__(v10 - 4, 1)) {
      break;
    }
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_7;
    }
    ++v10;
    if (v11 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_1001BDA60(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001BDAC0()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v4 = sub_1001BDB90((uint64_t)v3);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_1001BDB90(uint64_t a1)
{
  uint64_t v192 = a1;
  uint64_t v225 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v2 = __chkstk_darwin(v225);
  uint64_t v222 = (char *)&v189 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v223 = (char *)&v189 - v4;
  uint64_t v5 = sub_100094134(&qword_10090EB18);
  __chkstk_darwin(v5 - 8);
  id v210 = (char *)&v189 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v214 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLists();
  uint64_t v213 = *(void *)(v214 - 8);
  uint64_t v7 = __chkstk_darwin(v214);
  uint64_t v200 = (char *)&v189 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v204 = (char *)&v189 - v9;
  uint64_t v10 = sub_100094134(&qword_10090EB20);
  __chkstk_darwin(v10 - 8);
  unint64_t v220 = (char *)&v189 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterHashtags();
  uint64_t v218 = *(void *)(v209 - 8);
  uint64_t v12 = __chkstk_darwin(v209);
  v199 = (char *)&v189 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v208 = (char *)&v189 - v14;
  uint64_t v15 = sub_100094134(&qword_10090EB28);
  __chkstk_darwin(v15 - 8);
  *(void *)&long long v221 = (char *)&v189 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v217 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterLocation();
  uint64_t v216 = *(void *)(v217 - 8);
  uint64_t v17 = __chkstk_darwin(v217);
  uint64_t v201 = (char *)&v189 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v207 = (char *)&v189 - v19;
  uint64_t v20 = sub_100094134(&qword_10090EB30);
  __chkstk_darwin(v20 - 8);
  uint64_t v198 = (char *)&v189 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v215 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v205 = *(void *)(v215 - 8);
  uint64_t v22 = __chkstk_darwin(v215);
  char v193 = (char *)&v189 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v190 = (char *)&v189 - v24;
  uint64_t v25 = sub_100094134(&qword_10090EB38);
  __chkstk_darwin(v25);
  char v27 = (char *)&v189 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100094134(&qword_10090EB40);
  __chkstk_darwin(v28 - 8);
  id v30 = (char *)&v189 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100094134(&qword_10090EB48);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  id v191 = (char *)&v189 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v194 = (char *)&v189 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v195 = (char *)&v189 - v37;
  __chkstk_darwin(v36);
  unint64_t v39 = (char *)&v189 - v38;
  uint64_t v40 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = __chkstk_darwin(v40);
  id v203 = (char *)&v189 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  id v45 = (char *)&v189 - v44;
  uint64_t v46 = _s16DateFilterActionOMa();
  uint64_t v47 = __chkstk_darwin(v46 - 8);
  id v206 = (char *)&v189 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  *(void *)&long long v219 = (char *)&v189 - v49;
  v227 = &_swiftEmptyArrayStorage;
  REMCustomSmartListFilterDescriptor.operation.getter();
  REMCustomSmartListFilterDescriptor.date.getter();
  uint64_t v50 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate();
  uint64_t v196 = *(void *)(v50 - 8);
  unint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
  uint64_t v202 = v50;
  unint64_t v197 = v51;
  int v52 = ((uint64_t (*)(char *, uint64_t))v51)(v39, 1);
  sub_1000966BC((uint64_t)v39, &qword_10090EB48);
  uint64_t v224 = v1;
  REMCustomSmartListFilterDescriptor.time.getter();
  uint64_t v53 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterTime();
  int v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48))(v30, 1, v53);
  sub_1000966BC((uint64_t)v30, &qword_10090EB40);
  uint64_t v55 = *(int *)(v25 + 48);
  uint64_t v189 = v25;
  uint64_t v56 = *(int *)(v25 + 64);
  (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v27, v45, v40);
  v27[v55] = v52 != 1;
  v27[v56] = v54 != 1;
  uint64_t v212 = v40;
  uint64_t v211 = v41;
  if (v52 != 1)
  {
    int v57 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v27, v40);
    uint64_t v58 = (uint64_t)v220;
    uint64_t v59 = v221;
    uint64_t v60 = v219;
    uint64_t v61 = v205;
    uint64_t v62 = (uint64_t)v206;
    uint64_t v63 = (uint64_t)v198;
    if (v57 != enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
    {
      if (v57 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:)) {
        goto LABEL_139;
      }
      if (v54 != 1)
      {
        uint64_t v64 = (uint64_t)v191;
        REMCustomSmartListFilterDescriptor.date.getter();
        uint64_t v65 = v202;
        if (v197(v64, 1, v202) == 1)
        {
          sub_1000966BC(v64, &qword_10090EB48);
          uint64_t v66 = v214;
          uint64_t v67 = v213;
          uint64_t v68 = (uint64_t)v210;
          uint64_t v69 = v215;
        }
        else
        {
          uint64_t v91 = v196;
          int v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v196 + 88))(v64, v65);
          uint64_t v93 = v64;
          uint64_t v94 = v61;
          int v95 = v92;
          uint64_t v96 = v65;
          int v97 = enum case for REMCustomSmartListFilterDescriptor.FilterDate.noDate(_:);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v93, v96);
          BOOL v83 = v95 == v97;
          uint64_t v61 = v94;
          uint64_t v66 = v214;
          uint64_t v67 = v213;
          uint64_t v68 = (uint64_t)v210;
          uint64_t v69 = v215;
          if (v83)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v60, 4, 4, v215);
            goto LABEL_27;
          }
        }
        uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
        uint64_t v85 = v60;
        uint64_t v86 = 3;
        goto LABEL_26;
      }
    }
    id v72 = v195;
    REMCustomSmartListFilterDescriptor.date.getter();
    uint64_t v73 = (uint64_t)v72;
    id v74 = v72;
    uint64_t v75 = v197;
    if (v197((uint64_t)v74, 1, v202) == 1)
    {
      sub_1000966BC(v73, &qword_10090EB48);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v63, 1, 1, v215);
    }
    else
    {
      REMCustomSmartListFilterDescriptor.FilterDate.range(now:)();
      (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v73, v202);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v215) != 1)
      {
        id v87 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 32);
        long long v88 = v190;
        uint64_t v89 = v63;
        uint64_t v90 = v215;
        v87(v190, v89, v215);
        v87((char *)v60, (uint64_t)v88, v90);
        uint64_t v69 = v90;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v60, 0, 4, v90);
        uint64_t v66 = v214;
        uint64_t v67 = v213;
        uint64_t v68 = (uint64_t)v210;
        goto LABEL_27;
      }
    }
    sub_1000966BC(v63, &qword_10090EB30);
    uint64_t v76 = (uint64_t)v194;
    REMCustomSmartListFilterDescriptor.date.getter();
    uint64_t v77 = v202;
    if (v75(v76, 1, v202) == 1)
    {
      sub_1000966BC(v76, &qword_10090EB48);
      uint64_t v66 = v214;
      uint64_t v67 = v213;
      uint64_t v68 = (uint64_t)v210;
    }
    else
    {
      uint64_t v78 = v196;
      uint64_t v79 = v61;
      int v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v196 + 88))(v76, v77);
      uint64_t v81 = v77;
      int v82 = enum case for REMCustomSmartListFilterDescriptor.FilterDate.noDate(_:);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v81);
      BOOL v83 = v80 == v82;
      uint64_t v61 = v79;
      uint64_t v66 = v214;
      uint64_t v67 = v213;
      uint64_t v68 = (uint64_t)v210;
      if (v83)
      {
        uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
        uint64_t v85 = v60;
        uint64_t v86 = 2;
LABEL_20:
        uint64_t v69 = v215;
LABEL_26:
        v84(v85, v86, 4, v69);
        goto LABEL_27;
      }
    }
    uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56);
    uint64_t v85 = v60;
    uint64_t v86 = 3;
    goto LABEL_20;
  }
  uint64_t v70 = v205;
  uint64_t v60 = v219;
  if (v54 == 1) {
    uint64_t v71 = 1;
  }
  else {
    uint64_t v71 = 3;
  }
  uint64_t v69 = v215;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v205 + 56))(v219, v71, 4, v215);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v40);
  uint64_t v66 = v214;
  uint64_t v67 = v213;
  uint64_t v68 = (uint64_t)v210;
  uint64_t v58 = (uint64_t)v220;
  uint64_t v59 = v221;
  uint64_t v61 = v70;
  uint64_t v62 = (uint64_t)v206;
LABEL_27:
  sub_1001C184C(v60, v62);
  switch((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v62, 4, v69))
  {
    case 1u:
      break;
    case 2u:
      uint64_t KeyPath = swift_getKeyPath();
      sub_10039AD8C(KeyPath);
      goto LABEL_32;
    case 3u:
      uint64_t v105 = swift_getKeyPath();
      sub_10039B354(v105);
LABEL_32:
      swift_release();
      goto LABEL_33;
    case 4u:
      id v103 = [self predicateWithValue:1];
LABEL_33:
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v227[2] >= v227[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v60 = v219;
      break;
    default:
      uint64_t v98 = v66;
      uint64_t v99 = v68;
      id v100 = v193;
      (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v193, v62, v69);
      uint64_t v101 = sub_1001C0E3C();
      sub_1002009C8((uint64_t)v101);
      unint64_t v102 = v100;
      uint64_t v68 = v99;
      uint64_t v66 = v98;
      uint64_t v59 = v221;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v102, v69);
      break;
  }
  sub_1001C18B0(v60);
  uint64_t v106 = REMCustomSmartListFilterDescriptor.priorities.getter();
  if (v106)
  {
    uint64_t v107 = v106;
    char v108 = sub_1001BCB20(0, v106);
    char v109 = sub_1001BCB20(1, v107);
    char v110 = sub_1001BCB20(2, v107);
    char v111 = sub_1001BCB20(3, v107);
    swift_bridgeObjectRelease();
    if (v109)
    {
      if (v110)
      {
        uint64_t v112 = swift_getKeyPath();
        uint64_t v59 = v221;
        if (v111) {
          uint64_t v113 = 1;
        }
        else {
          uint64_t v113 = 5;
        }
        sub_10039B410(v112, v113);
LABEL_53:
        swift_release();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v58 = (uint64_t)v220;
        if (v227[2] < v227[3] >> 1) {
          goto LABEL_54;
        }
LABEL_133:
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        goto LABEL_54;
      }
      if (v111)
      {
        sub_100094134(&qword_10090C688);
        uint64_t inited = swift_initStackObject();
        long long v219 = xmmword_100776E80;
        *(_OWORD *)(inited + 16) = xmmword_100776E80;
        uint64_t v116 = swift_getKeyPath();
        uint64_t v117 = sub_10039B410(v116, 6);
        swift_release();
        *(void *)(inited + 32) = v117;
        uint64_t v118 = swift_initStackObject();
        *(_OWORD *)(v118 + 16) = v219;
        uint64_t v119 = swift_getKeyPath();
        uint64_t v120 = sub_10039B410(v119, 1);
        swift_release();
        *(void *)(v118 + 32) = v120;
        uint64_t v121 = swift_getKeyPath();
        uint64_t v122 = sub_10039B444(v121, 4);
        swift_release();
        *(void *)(v118 + 40) = v122;
        id v226 = (void *)v118;
        specialized Array._endMutation()();
        *(void *)(inited + 40) = sub_1002F52FC(v226);
        id v226 = (void *)inited;
        specialized Array._endMutation()();
        sub_100397E58(v226);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v227[2] >= v227[3] >> 1)
        {
          uint64_t v58 = (uint64_t)v220;
          uint64_t v59 = v221;
          goto LABEL_133;
        }
        uint64_t v58 = (uint64_t)v220;
        uint64_t v59 = v221;
LABEL_54:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        goto LABEL_55;
      }
      uint64_t v163 = swift_getKeyPath();
      sub_10039B410(v163, 6);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v59 = v221;
      if (v227[2] >= v227[3] >> 1)
      {
LABEL_97:
        uint64_t v58 = (uint64_t)v220;
        goto LABEL_133;
      }
LABEL_49:
      uint64_t v58 = (uint64_t)v220;
      goto LABEL_54;
    }
    if (v110)
    {
      uint64_t v114 = swift_getKeyPath();
      uint64_t v59 = v221;
      if (v111) {
        sub_1001C1618(v114, 1, 5);
      }
      else {
        sub_10032E2CC(v114, 5);
      }
      goto LABEL_53;
    }
    uint64_t v59 = v221;
    if (v111)
    {
      sub_100094134(&qword_10090C688);
      uint64_t v123 = swift_initStackObject();
      *(_OWORD *)(v123 + 16) = xmmword_100776E80;
      uint64_t v124 = swift_getKeyPath();
      uint64_t v125 = sub_10039B410(v124, 1);
      swift_release();
      *(void *)(v123 + 32) = v125;
      uint64_t v126 = swift_getKeyPath();
      uint64_t v127 = sub_10039B444(v126, 4);
      swift_release();
      *(void *)(v123 + 40) = v127;
      id v226 = (void *)v123;
      specialized Array._endMutation()();
      sub_1002F52FC(v226);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v227[2] >= v227[3] >> 1) {
        goto LABEL_97;
      }
      goto LABEL_49;
    }
    uint64_t v58 = (uint64_t)v220;
    if (v108)
    {
      uint64_t v164 = swift_getKeyPath();
      sub_10032E2CC(v164, 0);
      swift_release();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (v227[2] < v227[3] >> 1) {
        goto LABEL_54;
      }
      goto LABEL_133;
    }
  }
LABEL_55:
  char v128 = REMCustomSmartListFilterDescriptor.flagged.getter();
  if (v128 != 2)
  {
    char v129 = v128;
    uint64_t v130 = swift_getKeyPath();
    if (v129) {
      sub_10039B410(v130, 1);
    }
    else {
      sub_10032E2CC(v130, 0);
    }
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v227[2] >= v227[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  REMCustomSmartListFilterDescriptor.location.getter();
  uint64_t v131 = v216;
  uint64_t v132 = v217;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v59, 1, v217) == 1)
  {
    sub_1000966BC(v59, &qword_10090EB28);
    uint64_t v133 = v209;
    goto LABEL_72;
  }
  id v134 = v207;
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 32))(v207, v59, v132);
  v135 = v201;
  (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v201, v134, v132);
  int v136 = (*(uint64_t (**)(char *, uint64_t))(v131 + 88))(v135, v132);
  uint64_t v133 = v209;
  if (v136 != enum case for REMCustomSmartListFilterDescriptor.FilterLocation.vehicle(_:))
  {
    if (v136 == enum case for REMCustomSmartListFilterDescriptor.FilterLocation.location(_:))
    {
      (*(void (**)(char *, uint64_t))(v131 + 96))(v201, v132);
      swift_bridgeObjectRelease();
    }
    else if (v136 != enum case for REMCustomSmartListFilterDescriptor.FilterLocation.any(_:))
    {
      if (v136 != enum case for REMCustomSmartListFilterDescriptor.FilterLocation.noLocation(_:)) {
        goto LABEL_139;
      }
      id v165 = [self predicateWithValue:1];
      goto LABEL_69;
    }
  }
  uint64_t v137 = swift_getKeyPath();
  sub_10039B46C(v137, 0);
  swift_release();
LABEL_69:
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v227[2] >= v227[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  (*(void (**)(char *, uint64_t))(v216 + 8))(v207, v217);
LABEL_72:
  REMCustomSmartListFilterDescriptor.hashtags.getter();
  uint64_t v138 = v218;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v58, 1, v133) == 1)
  {
    sub_1000966BC(v58, &qword_10090EB20);
    goto LABEL_83;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v138 + 32))(v208, v58, v133);
  id v139 = v199;
  (*(void (**)(void))(v138 + 16))();
  int v140 = (*(uint64_t (**)(char *, uint64_t))(v138 + 88))(v139, v133);
  if (v140 == enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.hashtags(_:))
  {
    (*(void (**)(char *, uint64_t))(v138 + 96))(v139, v133);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v141 = sub_100094134(&qword_10090EB50);
    (*(void (**)(char *, uint64_t))(v211 + 8))(&v139[*(int *)(v141 + 64)], v212);
LABEL_79:
    uint64_t v143 = swift_getKeyPath();
    sub_10039B46C(v143, 0);
    goto LABEL_80;
  }
  if (v140 != enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.untagged(_:))
  {
    if (v140 == enum case for REMCustomSmartListFilterDescriptor.FilterHashtags.any(_:)) {
      goto LABEL_79;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
LABEL_139:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    JUMPOUT(0x1001BFB2CLL);
  }
  uint64_t v142 = swift_getKeyPath();
  sub_10039B538(v142, 0);
LABEL_80:
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v227[2] >= v227[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  (*(void (**)(char *, uint64_t))(v218 + 8))(v208, v133);
LABEL_83:
  REMCustomSmartListFilterDescriptor.lists.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v68, 1, v66) == 1)
  {
    sub_1000966BC(v68, &qword_10090EB18);
LABEL_109:
    uint64_t v167 = v211;
    unint64_t v168 = v203;
    goto LABEL_110;
  }
  unint64_t v144 = v204;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v204, v68, v66);
  uint64_t v145 = v200;
  (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v200, v144, v66);
  if ((*(unsigned int (**)(char *, uint64_t))(v67 + 88))(v145, v66) != enum case for REMCustomSmartListFilterDescriptor.FilterLists.lists(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
LABEL_136:
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    goto LABEL_139;
  }
  (*(void (**)(char *, uint64_t))(v67 + 96))(v145, v66);
  uint64_t v146 = *(void *)v145;
  unint64_t v147 = *((void *)v145 + 1);
  if (*(void *)v145 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v166 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v166)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v148 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v148) {
        goto LABEL_89;
      }
      goto LABEL_105;
    }
  }
  else if (*(void *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_bridgeObjectRelease();
    uint64_t v148 = *(void *)((v146 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v148)
    {
LABEL_89:
      id v226 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v148 & 0x8000000000000000) == 0)
      {
        uint64_t v222 = (char *)(v146 & 0xC000000000000001);
        unint64_t v149 = self;
        uint64_t v150 = 0;
        long long v221 = xmmword_100776E80;
        uint64_t v151 = v146;
        do
        {
          if (v222) {
            id v152 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v152 = *(id *)(v146 + 8 * v150 + 32);
          }
          id v153 = v152;
          id v154 = [v152 uuid];
          uint64_t v155 = (uint64_t)v223;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v156 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v155, 0, 1, v156);
          sub_100094134((uint64_t *)&unk_10090A050);
          uint64_t v157 = swift_allocObject();
          *(_OWORD *)(v157 + 16) = v221;
          ++v150;
          *(void *)(v157 + 56) = &type metadata for String;
          *(void *)(v157 + 32) = 0x6564692E7473696CLL;
          *(void *)(v157 + 40) = 0xEF7265696669746ELL;
          *(void *)(v157 + 88) = v225;
          unint64_t v158 = sub_1000C1FE8((uint64_t *)(v157 + 64));
          sub_1001248EC(v155, (uint64_t)v158);
          NSString v159 = String._bridgeToObjectiveC()();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          id v161 = [v149 predicateWithFormat:v159 argumentArray:isa];

          sub_1000966BC(v155, (uint64_t *)&unk_100909E50);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          uint64_t v146 = v151;
        }
        while (v148 != v150);
        v162 = v226;
        swift_bridgeObjectRelease();
        uint64_t v66 = v214;
        uint64_t v67 = v213;
        goto LABEL_106;
      }
      __break(1u);
      goto LABEL_127;
    }
LABEL_105:
    swift_bridgeObjectRelease();
    v162 = &_swiftEmptyArrayStorage;
LABEL_106:
    sub_100397E58(v162);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v227[2] >= v227[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v204, v66);
    goto LABEL_109;
  }
  swift_bridgeObjectRelease();
  uint64_t v223 = (char *)v147;
  if (!(v147 >> 62))
  {
    uint64_t v171 = *(void *)((v147 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v171)
    {
      id v226 = &_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
LABEL_117:
      unint64_t v172 = v147 & 0xC000000000000001;
      uint64_t v173 = self;
      uint64_t v174 = 0;
      long long v221 = xmmword_100776E80;
      do
      {
        if (v172) {
          id v175 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v175 = *(id *)(v147 + 8 * v174 + 32);
        }
        id v176 = v175;
        id v177 = [v175 uuid];
        uint64_t v178 = (uint64_t)v222;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v179 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v179 - 8) + 56))(v178, 0, 1, v179);
        sub_100094134((uint64_t *)&unk_10090A050);
        uint64_t v180 = swift_allocObject();
        *(_OWORD *)(v180 + 16) = v221;
        ++v174;
        *(void *)(v180 + 56) = &type metadata for String;
        *(void *)(v180 + 32) = 0x6564692E7473696CLL;
        *(void *)(v180 + 40) = 0xEF7265696669746ELL;
        *(void *)(v180 + 88) = v225;
        uint64_t v181 = sub_1000C1FE8((uint64_t *)(v180 + 64));
        sub_1001248EC(v178, (uint64_t)v181);
        NSString v182 = String._bridgeToObjectiveC()();
        Class v183 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v184 = [v173 predicateWithFormat:v182 argumentArray:v183];

        sub_1000966BC(v178, (uint64_t *)&unk_100909E50);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t v147 = (unint64_t)v223;
      }
      while (v171 != v174);
      uint64_t v185 = v226;
      swift_bridgeObjectRelease();
      goto LABEL_123;
    }
LABEL_131:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v204, v66);
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
LABEL_127:
  swift_bridgeObjectRetain();
  uint64_t v188 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v188) {
    goto LABEL_131;
  }
  swift_bridgeObjectRetain();
  uint64_t v171 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v171)
  {
    id v226 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t v147 = (unint64_t)v223;
    if (v171 < 0)
    {
      __break(1u);
      goto LABEL_131;
    }
    goto LABEL_117;
  }
  swift_bridgeObjectRelease();
  uint64_t v185 = &_swiftEmptyArrayStorage;
LABEL_123:
  sub_1002F52FC(v185);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v186 = v214;
  uint64_t v187 = v213;
  uint64_t v167 = v211;
  unint64_t v168 = v203;
  if (v227[2] >= v227[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  (*(void (**)(char *, uint64_t))(v187 + 8))(v204, v186);
LABEL_110:
  REMCustomSmartListFilterDescriptor.operation.getter();
  int v169 = (*(uint64_t (**)(char *, uint64_t))(v167 + 88))(v168, v212);
  if (v169 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:)) {
    return sub_1002F52FC(v227);
  }
  if (v169 != enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:)) {
    goto LABEL_136;
  }
  return sub_100397E58(v227);
}

id sub_1001BFB40@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 priority];
  *a2 = result;
  return result;
}

id sub_1001BFB74(void *a1, id *a2)
{
  return [*a2 setPriority:*a1];
}

id sub_1001BFB88@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 displayDateIsAllDay];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001BFBBC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDisplayDateIsAllDay:*a1];
}

void *sub_1001BFBD0()
{
  uint64_t v1 = v0;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v22[-v8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v3 + 16))(&v22[-v8], v1, PredicateType, v7);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter();
  sub_1001C19EC();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v11(v5, PredicateType);
  if ((v10 & 1) == 0)
  {
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter();
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v11(v5, PredicateType);
    if ((v12 & 1) == 0)
    {
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter();
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v11(v5, PredicateType);
      if (v15)
      {
        v11(v9, PredicateType);
        if (qword_100907028 != -1) {
          swift_once();
        }
        uint64_t v14 = qword_10090EAC8;
      }
      else
      {
        static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter();
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
        v11(v5, PredicateType);
        if (v16)
        {
          v11(v9, PredicateType);
          if (qword_100907038 != -1) {
            swift_once();
          }
          uint64_t v14 = qword_10090EAD8;
        }
        else
        {
          static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter();
          char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
          v11(v5, PredicateType);
          if (v17)
          {
            v11(v9, PredicateType);
            if (qword_100907048 != -1) {
              swift_once();
            }
            uint64_t v14 = qword_10090EAE8;
          }
          else
          {
            static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter();
            char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
            v11(v5, PredicateType);
            if (v18)
            {
              v11(v9, PredicateType);
              if (qword_100907058 != -1) {
                swift_once();
              }
              uint64_t v14 = qword_10090EAF8;
            }
            else
            {
              static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter();
              char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
              v11(v5, PredicateType);
              if ((v19 & 1) == 0)
              {
                static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter();
                char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
                v11(v5, PredicateType);
                if ((v21 & 1) == 0)
                {
                  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter();
                  dispatch thunk of static Equatable.== infix(_:_:)();
                  v11(v5, PredicateType);
                  v11(v9, PredicateType);
                  return &_swiftEmptySetSingleton;
                }
                goto LABEL_3;
              }
              v11(v9, PredicateType);
              if (qword_100907068 != -1) {
                swift_once();
              }
              uint64_t v14 = qword_10090EB08;
            }
          }
        }
      }
      swift_bridgeObjectRetain();
      return (void *)v14;
    }
  }
LABEL_3:
  v11(v9, PredicateType);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  unint64_t v23 = inited;
  specialized Array._endMutation()();
  uint64_t v14 = sub_100127578(v23);
  swift_bridgeObjectRelease();
  return (void *)v14;
}

void *sub_1001C0174()
{
  uint64_t v1 = v0;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v23 - v8, v1, PredicateType, v7);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter();
  sub_1001C19EC();
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, PredicateType);
  if ((v10 & 1) == 0)
  {
    static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter();
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v11(v5, PredicateType);
    if ((v12 & 1) == 0)
    {
      static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter();
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      v11(v5, PredicateType);
      if ((v13 & 1) == 0)
      {
        static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter();
        char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
        v11(v5, PredicateType);
        if (v16)
        {
          v11(v9, PredicateType);
          if (qword_100907030 != -1) {
            swift_once();
          }
          uint64_t v14 = qword_10090EAD0;
        }
        else
        {
          static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter();
          char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
          v11(v5, PredicateType);
          if (v17)
          {
            v11(v9, PredicateType);
            if (qword_100907040 != -1) {
              swift_once();
            }
            uint64_t v14 = qword_10090EAE0;
          }
          else
          {
            static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.location.getter();
            char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
            v11(v5, PredicateType);
            if (v18)
            {
              v11(v9, PredicateType);
              if (qword_100907050 != -1) {
                swift_once();
              }
              uint64_t v14 = qword_10090EAF0;
            }
            else
            {
              static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter();
              char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
              v11(v5, PredicateType);
              if (v19)
              {
                v11(v9, PredicateType);
                if (qword_100907060 != -1) {
                  swift_once();
                }
                uint64_t v14 = qword_10090EB00;
              }
              else
              {
                static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter();
                char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
                v11(v5, PredicateType);
                if ((v20 & 1) == 0)
                {
                  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter();
                  char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
                  v11(v5, PredicateType);
                  v11(v9, PredicateType);
                  if (v21)
                  {
                    sub_100094134((uint64_t *)&unk_10090AF20);
                    uint64_t inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_10077A530;
                    *(void *)(inited + 32) = swift_getKeyPath();
                    unint64_t v23 = inited;
                    specialized Array._endMutation()();
                    uint64_t v14 = sub_100127578(v23);
                    swift_bridgeObjectRelease();
                    return (void *)v14;
                  }
                  return &_swiftEmptySetSingleton;
                }
                v11(v9, PredicateType);
                if (qword_100907070 != -1) {
                  swift_once();
                }
                uint64_t v14 = qword_10090EB10;
              }
            }
          }
        }
        swift_bridgeObjectRetain();
        return (void *)v14;
      }
    }
  }
  v11(v9, PredicateType);
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1001C0698(uint64_t a1)
{
  return sub_1001C06C8(a1, (uint64_t (*)(uint64_t))sub_1001BFBD0);
}

uint64_t sub_1001C06B0(uint64_t a1)
{
  return sub_1001C06C8(a1, (uint64_t (*)(uint64_t))sub_1001C0174);
}

uint64_t sub_1001C06C8(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v26 = a2;
  uint64_t v27 = a1;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v3 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - v7;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
LABEL_29:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v9 = (void *)sub_10032E71C((unint64_t)_swiftEmptyArrayStorage);
      goto LABEL_3;
    }
  }
  uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_3:
  uint64_t v28 = v9;
  uint64_t v10 = *(void *)(v27 + 56);
  uint64_t v24 = v27 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v17 = v16 | (v15 << 6);
      goto LABEL_7;
    }
    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v25) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v15);
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v25) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v24 + 8 * v15);
        if (!v21)
        {
          int64_t v15 = v20 + 3;
          if (v20 + 3 >= v25) {
            goto LABEL_27;
          }
          unint64_t v21 = *(void *)(v24 + 8 * v15);
          if (!v21)
          {
            int64_t v15 = v20 + 4;
            if (v20 + 4 >= v25) {
              goto LABEL_27;
            }
            unint64_t v21 = *(void *)(v24 + 8 * v15);
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v13 = (v21 - 1) & v21;
    unint64_t v17 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_7:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v8, *(void *)(v27 + 48) + *(void *)(v3 + 72) * v17, PredicateType);
    uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, PredicateType);
    uint64_t v19 = v26(v18);
    sub_1002F5440(v19);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, PredicateType);
  }
  int64_t v22 = v20 + 5;
  if (v22 >= v25)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v28;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    int64_t v15 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v15 >= v25) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_26;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001C09CC(uint64_t a1)
{
  return sub_1001C09F8(a1, &qword_10090EAC8);
}

void sub_1001C09D8()
{
  qword_10090EAD0 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1001C09EC(uint64_t a1)
{
  return sub_1001C09F8(a1, &qword_10090EAD8);
}

uint64_t sub_1001C09F8(uint64_t a1, uint64_t *a2)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077B710;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)(inited + 40) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v4 = sub_100127578(inited);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1001C0A94()
{
  qword_10090EAE0 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001C0AA8()
{
  qword_10090EAE8 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1001C0ABC(uint64_t a1)
{
  return sub_1001C0B20(a1, (uint64_t)&unk_10077FD68, &qword_10090EAF0);
}

uint64_t sub_1001C0AD0(uint64_t a1)
{
  return sub_1001C0B20(a1, (uint64_t)&unk_10077FF18, &qword_10090EAF8);
}

void sub_1001C0AE4()
{
  qword_10090EB00 = (uint64_t)&_swiftEmptySetSingleton;
}

void sub_1001C0AF8()
{
  qword_10090EB08 = (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_1001C0B0C(uint64_t a1)
{
  return sub_1001C0B20(a1, (uint64_t)&unk_10077FEA8, &qword_10090EB10);
}

uint64_t sub_1001C0B20(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v5 = sub_100127578(inited);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v5;
  return result;
}

uint64_t sub_1001C0BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v5 = type metadata accessor for REMCustomSmartListFilterDescriptor.Operation();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for REMHashtagLabelDataView.Operation();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = __chkstk_darwin(v9);
  unint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a3, v5, v11);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v15 == enum case for REMCustomSmartListFilterDescriptor.Operation.and(_:))
  {
    unint64_t v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.Operation.all(_:);
LABEL_5:
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *v16, v9);
    unint64_t v17 = sub_100572558(v19, v20, (uint64_t)v13, v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return (uint64_t)v17;
  }
  if (v15 == enum case for REMCustomSmartListFilterDescriptor.Operation.or(_:))
  {
    unint64_t v16 = (unsigned int *)&enum case for REMHashtagLabelDataView.Operation.some(_:);
    goto LABEL_5;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1001C0DD0()
{
  uint64_t result = sub_1003E76F8(2, 2, *v0);
  if (!v1)
  {
    uint64_t v3 = sub_1005717EC(result);
    swift_bridgeObjectRelease();
    sub_100572148(v3);
    uint64_t v5 = v4;
    swift_release();
    return v5;
  }
  return result;
}

void *sub_1001C0E3C()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void **)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  *(void *)&long long v68 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v61 - v4;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_10091C320);
  uint64_t v7 = v6 - 8;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v61 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v61 - v17;
  REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange.lowerBound.getter();
  REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange.upperBound.getter();
  uint64_t v19 = (uint64_t)&v9[*(int *)(v7 + 56)];
  sub_1000CAAB4((uint64_t)v18, (uint64_t)v9);
  sub_1000CAAB4((uint64_t)v16, v19);
  uint64_t v20 = (uint64_t (*)(char *, uint64_t, uint64_t))v1[6];
  LODWORD(v16) = v20(v9, 1, v0);
  int v21 = v20((char *)v19, 1, v0);
  int v22 = v21;
  if (v16 != 1)
  {
    uint64_t v24 = (void (*)(char *, char *, uint64_t))v1[4];
    v24(v5, v9, v0);
    if (v22 != 1)
    {
      v24((char *)v68, (char *)v19, v0);
      sub_100094134(&qword_10090C688);
      uint64_t inited = swift_initStackObject();
      long long v67 = xmmword_100776E80;
      *(_OWORD *)(inited + 16) = xmmword_100776E80;
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v41 = sub_10039B438(KeyPath);
      swift_release();
      *(void *)(inited + 32) = v41;
      uint64_t v42 = swift_getKeyPath();
      Date.startOfDay.getter();
      uint64_t v43 = (void (*)(char *, void, uint64_t, uint64_t))v1[7];
      uint64_t v63 = v1 + 7;
      v43(v13, 0, 1, v0);
      uint64_t v44 = sub_10032E2B8(v42, (uint64_t)v13);
      swift_release();
      *(void *)(inited + 40) = v44;
      uint64_t v69 = inited;
      specialized Array._endMutation()();
      id v45 = (void *)sub_1002F52FC(v69);
      uint64_t v65 = v5;
      uint64_t v46 = v45;
      id v62 = v45;
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_100776E40;
      uint64_t v47 = swift_initStackObject();
      uint64_t v64 = v47;
      *(_OWORD *)(v47 + 16) = v67;
      *(void *)(v47 + 32) = v46;
      uint64_t v48 = swift_initStackObject();
      *(_OWORD *)(v48 + 16) = v67;
      uint64_t v49 = swift_getKeyPath();
      uint64_t v50 = (void (*)(char *, char *, uint64_t))v1[2];
      v50(v13, v5, v0);
      v43(v13, 0, 1, v0);
      *(void *)&long long v67 = v62;
      uint64_t v51 = sub_10039ADEC(v49, (uint64_t)v13);
      swift_release();
      *(void *)(v48 + 32) = v51;
      uint64_t v52 = swift_getKeyPath();
      uint64_t v53 = v68;
      v50(v13, (char *)v68, v0);
      v43(v13, 0, 1, v0);
      uint64_t v54 = sub_10039ADC4(v52, (uint64_t)v13);
      swift_release();
      *(void *)(v48 + 40) = v54;
      uint64_t v69 = v48;
      specialized Array._endMutation()();
      uint64_t v55 = sub_1002F52FC(v69);
      uint64_t v56 = v64;
      *(void *)(v64 + 40) = v55;
      uint64_t v69 = v56;
      specialized Array._endMutation()();
      uint64_t v57 = sub_100397E58(v69);
      uint64_t v58 = v66;
      *(void *)(v66 + 32) = v57;
      uint64_t v69 = v58;
      specialized Array._endMutation()();
      uint64_t v23 = v69;

      uint64_t v59 = (void (*)(uint64_t, uint64_t))v1[1];
      v59(v53, v0);
      v59((uint64_t)v65, v0);
      return (void *)v23;
    }
    sub_100094134(&qword_10090C688);
    uint64_t v25 = swift_initStackObject();
    long long v68 = xmmword_100776E80;
    *(_OWORD *)(v25 + 16) = xmmword_100776E80;
    uint64_t v26 = swift_getKeyPath();
    uint64_t v27 = sub_10039B438(v26);
    swift_release();
    *(void *)(v25 + 32) = v27;
    uint64_t v28 = swift_getKeyPath();
    Date.startOfDay.getter();
    *(void *)&long long v67 = v1[7];
    ((void (*)(char *, void, uint64_t, uint64_t))v67)(v13, 0, 1, v0);
    uint64_t v29 = sub_10032E2B8(v28, (uint64_t)v13);
    swift_release();
    *(void *)(v25 + 40) = v29;
    uint64_t v69 = v25;
    specialized Array._endMutation()();
    id v30 = (void *)sub_1002F52FC(v69);
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_100776E40;
    uint64_t v32 = swift_initStackObject();
    *(_OWORD *)(v32 + 16) = v68;
    *(void *)(v32 + 32) = v30;
    uint64_t v33 = swift_getKeyPath();
    ((void (*)(char *, char *, uint64_t))v1[2])(v13, v5, v0);
    ((void (*)(char *, void, uint64_t, uint64_t))v67)(v13, 0, 1, v0);
    id v34 = v30;
    uint64_t v35 = sub_10039ADEC(v33, (uint64_t)v13);
    swift_release();
    *(void *)(v32 + 40) = v35;
    uint64_t v69 = v32;
    specialized Array._endMutation()();
    *(void *)(v31 + 32) = sub_100397E58(v69);
    uint64_t v69 = v31;
    specialized Array._endMutation()();
    uint64_t v23 = v69;

    goto LABEL_7;
  }
  if (v21 != 1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v1[4])(v5, v19, v0);
    sub_100094134(&qword_10090C688);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_100776E40;
    uint64_t v37 = swift_getKeyPath();
    ((void (*)(char *, char *, uint64_t))v1[2])(v13, v5, v0);
    ((void (*)(char *, void, uint64_t, uint64_t))v1[7])(v13, 0, 1, v0);
    uint64_t v38 = sub_10039ADC4(v37, (uint64_t)v13);
    swift_release();
    *(void *)(v36 + 32) = v38;
    uint64_t v69 = v36;
    specialized Array._endMutation()();
    uint64_t v23 = v69;
LABEL_7:
    ((void (*)(char *, uint64_t))v1[1])(v5, v0);
    return (void *)v23;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1001C1618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E80;
  uint64_t v6 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v7)
  {
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v7;
    sub_100094134(&qword_10090EB58);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_100776E80;
    *(void *)(v8 + 32) = a2;
    *(void *)(v8 + 40) = a3;
    *(void *)(v5 + 88) = sub_100094134(&qword_10090EB60);
    *(void *)(v5 + 64) = v8;
    NSString v9 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v11 = [self predicateWithFormat:v9 argumentArray:isa];

    return (uint64_t)v11;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v13._object = (void *)0x80000001007CAF70;
    v13._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v13);
    sub_100094134((uint64_t *)&unk_10090B070);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t _s16DateFilterActionOMa()
{
  uint64_t result = qword_10090EBD8;
  if (!qword_10090EBD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001C184C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s16DateFilterActionOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001C18B0(uint64_t a1)
{
  uint64_t v2 = _s16DateFilterActionOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

const char *sub_1001C1914()
{
  return "alarmStorage";
}

const char *sub_1001C1928()
{
  return "flagged";
}

const char *sub_1001C193C()
{
  return "priority";
}

id sub_1001C1948@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 priority];
  *a2 = result;
  return result;
}

id sub_1001C197C(void *a1, id *a2)
{
  return [*a2 setPriority:*a1];
}

const char *sub_1001C1998()
{
  return "displayDateIsAllDay";
}

id sub_1001C19A4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 displayDateIsAllDay];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001C19D8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDisplayDateIsAllDay:*a1];
}

unint64_t sub_1001C19EC()
{
  unint64_t result = qword_100914720;
  if (!qword_100914720)
  {
    type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100914720);
  }
  return result;
}

unint64_t sub_1001C1A64()
{
  unint64_t result = qword_10090A3B0;
  if (!qword_10090A3B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090A3B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReminderIDsWithMatchingHashtagsProvider()
{
  return &type metadata for ReminderIDsWithMatchingHashtagsProvider;
}

uint64_t *sub_1001C1AB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 4, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 4, v7);
    }
  }
  return a1;
}

uint64_t sub_1001C1C00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 4, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1001C1CD0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *sub_1001C1DE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 4, v6);
  int v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

void *sub_1001C1F54(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 4, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  }
  return a1;
}

void *sub_1001C2064(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 4, v6);
  int v10 = v8(a2, 4, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 4, v6);
  return a1;
}

uint64_t sub_1001C21D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C21EC);
}

uint64_t sub_1001C21EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 5) {
    return v5 - 4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1001C2258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C226C);
}

uint64_t sub_1001C226C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_1001C22F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 4, v2);
}

uint64_t sub_1001C2358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 4, v4);
}

uint64_t sub_1001C23C8()
{
  uint64_t result = type metadata accessor for REMCustomSmartListFilterDescriptor.FilterDate.OptionalDateRange();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

unint64_t sub_1001C2440(char a1)
{
  unint64_t result = 0xD000000000000020;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000026;
      break;
    case 3:
      unint64_t result = 0xD000000000000028;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001C24D4@<X0>(unsigned __int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001C33B0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001C2500()
{
  return sub_1001C2440(*v0);
}

uint64_t sub_1001C2508()
{
  unsigned int v1 = [v0 operationTypeRawValue];
  if (v1 >= 6) {
    return 5;
  }
  else {
    return (0x40302010005uLL >> (8 * v1));
  }
}

id sub_1001C2550()
{
  unsigned int v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v19 - v10;
  id v12 = [v1 templateIdentifier];
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  Swift::String v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v14(v11, v4, v5);
  uint64_t v15 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v17 = [v15 objectIDWithUUID:isa];

  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v17;
}

id sub_1001C27B0()
{
  unsigned int v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v20 - v10;
  id v12 = [v1 listIdentifier];
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_6;
  }
  Swift::String v13 = v12;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v14(v4, v9, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_6:
    sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909E50);
    return 0;
  }
  v14(v11, v4, v5);
  int v15 = (unsigned __int16)[v1 operationTypeRawValue];
  if ((v15 - 1) < 3 || v15 == 4)
  {
    id v17 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v16 = [v17 objectIDWithUUID:isa];

    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    return 0;
  }
  return v16;
}

uint64_t sub_1001C2AF4()
{
  unsigned int v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v84[0] = 0xD000000000000021;
  v84[1] = 0x80000001007CDB60;
  id v5 = [v0 objectID];
  id v6 = [v5 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);

  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8069182;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  uint64_t v13 = v84[0];
  uint64_t v12 = v84[1];
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v84[0] = 0xD000000000000017;
  v84[1] = 0x80000001007CDB90;
  int v14 = (unsigned __int16)[v1 operationTypeRawValue] - 1;
  unint64_t v15 = 0xD000000000000026;
  unint64_t v16 = 0x80000001007CDB00;
  switch(v14)
  {
    case 0:
      id v17 = "copyRemindersInTemplateToREMList";
      goto LABEL_7;
    case 1:
      break;
    case 2:
      id v17 = "copyRemindersInREMListToTemplate";
      goto LABEL_7;
    case 3:
      unint64_t v15 = 0xD000000000000028;
      unint64_t v16 = 0x80000001007CDAA0;
      break;
    case 4:
      id v17 = "batchDeleteCachedPublicTemplates";
LABEL_7:
      unint64_t v16 = (unint64_t)(v17 - 32) | 0x8000000000000000;
      unint64_t v15 = 0xD000000000000020;
      break;
    default:
      unint64_t v16 = 0xE700000000000000;
      unint64_t v15 = 0x6E776F6E6B6E75;
      break;
  }
  unint64_t v18 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 8236;
  v19._object = (void *)0xE200000000000000;
  String.append(_:)(v19);
  uint64_t v20 = v84[0];
  int v21 = (void *)v84[1];
  v84[0] = v13;
  v84[1] = v12;
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = v20;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = v84[0];
  uint64_t v23 = v84[1];
  strcpy((char *)v84, "priority: ");
  BYTE3(v84[1]) = 0;
  HIDWORD(v84[1]) = -369098752;
  unsigned int v25 = [v1 priorityRawValue];
  if (v25 == 30)
  {
    unint64_t v28 = 0xE700000000000000;
    uint64_t v27 = 0x72656B636F6C62;
  }
  else
  {
    BOOL v26 = (unsigned __int16)v25 == 20;
    if ((unsigned __int16)v25 == 20) {
      uint64_t v27 = 1751607656;
    }
    else {
      uint64_t v27 = 0x6D756964656DLL;
    }
    if (v26) {
      unint64_t v28 = 0xE400000000000000;
    }
    else {
      unint64_t v28 = 0xE600000000000000;
    }
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 8236;
  v30._object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v84[0];
  uint64_t v32 = (void *)v84[1];
  v84[0] = v24;
  v84[1] = v23;
  swift_bridgeObjectRetain();
  v33._countAndFlagsBits = v31;
  v33._object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v84[0];
  uint64_t v34 = v84[1];
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  strcpy((char *)v84, "creationDate: ");
  HIBYTE(v84[1]) = -18;
  id v36 = [v1 creationDate];
  if (v36)
  {
    uint64_t v37 = v36;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v4, 0, 1, v38);
  }
  else
  {
    uint64_t v39 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v4, 1, 1, v39);
  }
  uint64_t v40 = Optional.descriptionOrNil.getter();
  uint64_t v42 = v41;
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
  v43._countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 8236;
  v44._object = (void *)0xE200000000000000;
  String.append(_:)(v44);
  uint64_t v45 = v84[0];
  uint64_t v46 = (void *)v84[1];
  v84[0] = v35;
  v84[1] = v34;
  swift_bridgeObjectRetain();
  v47._countAndFlagsBits = v45;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = v84[0];
  uint64_t v48 = v84[1];
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v84, "isCompleted: ");
  HIWORD(v84[1]) = -4864;
  unsigned int v50 = [v1 isCompleted];
  BOOL v51 = v50 == 0;
  if (v50) {
    uint64_t v52 = 1702195828;
  }
  else {
    uint64_t v52 = 0x65736C6166;
  }
  if (v51) {
    unint64_t v53 = 0xE500000000000000;
  }
  else {
    unint64_t v53 = 0xE400000000000000;
  }
  unint64_t v54 = v53;
  String.append(_:)(*(Swift::String *)&v52);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 8236;
  v55._object = (void *)0xE200000000000000;
  String.append(_:)(v55);
  uint64_t v56 = v84[0];
  uint64_t v57 = (void *)v84[1];
  v84[0] = v49;
  v84[1] = v48;
  swift_bridgeObjectRetain();
  v58._countAndFlagsBits = v56;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v60 = v84[0];
  uint64_t v59 = v84[1];
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v84[0] = 0xD000000000000012;
  v84[1] = 0x80000001007CDBB0;
  id v61 = sub_1001C2550();
  id v83 = v61;
  sub_100094134((uint64_t *)&unk_100914BC0);
  uint64_t v62 = Optional.descriptionOrNil.getter();
  uint64_t v64 = v63;

  v65._countAndFlagsBits = v62;
  v65._object = v64;
  String.append(_:)(v65);
  swift_bridgeObjectRelease();
  v66._countAndFlagsBits = 8236;
  v66._object = (void *)0xE200000000000000;
  String.append(_:)(v66);
  uint64_t v67 = v84[0];
  long long v68 = (void *)v84[1];
  v84[0] = v60;
  v84[1] = v59;
  swift_bridgeObjectRetain();
  v69._countAndFlagsBits = v67;
  v69._object = v68;
  String.append(_:)(v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v71 = v84[0];
  uint64_t v70 = v84[1];
  v84[0] = 0;
  v84[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v84, "listObjectID: ");
  HIBYTE(v84[1]) = -18;
  id v72 = sub_1001C27B0();
  id v83 = v72;
  uint64_t v73 = Optional.descriptionOrNil.getter();
  uint64_t v75 = v74;

  v76._countAndFlagsBits = v73;
  v76._object = v75;
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  uint64_t v77 = v84[0];
  uint64_t v78 = (void *)v84[1];
  v84[0] = v71;
  v84[1] = v70;
  swift_bridgeObjectRetain();
  v79._countAndFlagsBits = v77;
  v79._object = v78;
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v80._countAndFlagsBits = 125;
  v80._object = (void *)0xE100000000000000;
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  return v84[0];
}

uint64_t type metadata accessor for REMCDTemplateOperationQueueItem()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for REMCDTemplateOperationQueueItem.OperationType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C3320);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMCDTemplateOperationQueueItem.OperationType()
{
  return &type metadata for REMCDTemplateOperationQueueItem.OperationType;
}

unint64_t sub_1001C335C()
{
  unint64_t result = qword_10090EC10;
  if (!qword_10090EC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090EC10);
  }
  return result;
}

uint64_t sub_1001C33B0(unsigned __int16 a1)
{
  if (a1 >= 6u) {
    return 5;
  }
  else {
    return (0x40302010005uLL >> (8 * a1));
  }
}

id REMCDSmartListSection.parentCDObject.getter()
{
  id v1 = [v0 smartList];

  return v1;
}

uint64_t static REMCDSmartListSection.cdEntityName.getter()
{
  sub_1001C3554();
  id v0 = [(id)swift_getObjCClassFromMetadata() cdEntityName];
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v1;
}

unint64_t sub_1001C3554()
{
  unint64_t result = qword_10090EC18;
  if (!qword_10090EC18)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090EC18);
  }
  return result;
}

Swift::Int __swiftcall REMCDSmartListSection.parentEffectiveMinimumSupportedVersion()()
{
  id v1 = [v0 smartList];
  if (!v1) {
    return kREMSupportedVersionUnset;
  }
  uint64_t v2 = v1;
  id v3 = [v1 effectiveMinimumSupportedVersion];

  return (Swift::Int)v3;
}

uint64_t static REMCDSmartListSection.keyPathsForValuesAffectingEffectiveMinimumSupportedVersion()()
{
  uint64_t v0 = sub_10012674C((uint64_t)&off_1008B5E60);
  swift_arrayDestroy();
  return v0;
}

id REMCDSmartListSection.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id REMCDSmartListSection.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDSmartListSection();
  return [super dealloc];
}

uint64_t type metadata accessor for REMCDSmartListSection()
{
  return self;
}

uint64_t sub_1001C3848()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090EC50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090EC50);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1001C3910()
{
  id result = [self housekeepingingActivityScheduler];
  qword_10090EC68 = (uint64_t)result;
  return result;
}

uint64_t sub_1001C394C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v37 - v5;
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100907080 != -1) {
    swift_once();
  }
  uint64_t v40 = v3;
  Swift::String v47 = v6;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t v11 = v8 + 8;
  uint64_t v45 = v12;
  v12(v10, v7);
  uint64_t v13 = *(void *)(v0 + 16);
  unint64_t v14 = *(void *)(v0 + 24);
  uint64_t v42 = v0;
  uint64_t v15 = qword_100907078;
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v46 = v13;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = sub_10008E2DC(v16, (uint64_t)qword_10090EC50);
  swift_bridgeObjectRetain_n();
  uint64_t v39 = v17;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v37 = v10;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = v11;
    int v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v38 = v7;
    uint64_t v52 = v22;
    *(_DWORD *)int v21 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v23 = v46;
    uint64_t v48 = sub_1000C51B8(v46, v14, &v52);
    Swift::String v10 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] start execute()", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v38;
    swift_slowDealloc();
    uint64_t v11 = v41;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v23 = v46;
  }
  uint64_t v24 = v47;
  uint64_t v25 = Date.init()();
  v49[0] = 0xD00000000000003ALL;
  v49[1] = 0x80000001007CDD60;
  memset(&v49[2], 0, 24);
  int v50 = 0;
  __int16 v51 = 0x4000;
  __chkstk_darwin(v25);
  *(&v37 - 4) = v26;
  *(&v37 - 3) = (char *)v23;
  *(&v37 - 2) = (char *)v14;
  *(&v37 - 1) = v24;
  uint64_t v27 = v43;
  sub_1003B5ADC((uint64_t)v49, (uint64_t)sub_1001C54A8, (uint64_t)(&v37 - 6));
  if (v27)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v1);
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    return v45(v10, v7);
  }
  else
  {
    uint64_t v41 = v11;
    uint64_t v29 = v44;
    Swift::String v30 = v40;
    (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v40, v24, v1);
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    Swift::String v43 = v31;
    LODWORD(v42) = v32;
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v52 = v39;
      *(_DWORD *)uint64_t v33 = 136446466;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_1000C51B8(v46, v14, &v52);
      uint64_t v46 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v33 + 12) = 2048;
      Date.rem_elapsedInMilliseconds.getter();
      uint64_t v48 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
      v35(v30, v46);
      uint64_t v1 = v46;
      id v36 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v42, "[%{public}s] end execute(), elapsedSeconds: %f ms", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v24 = v47;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v29 + 8);
      v35(v30, v1);
    }
    v35(v24, v1);
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    return v45(v10, v7);
  }
}

void sub_1001C4040(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  sub_1001C40C8(a2, a1, a3, a4, a5);
}

void sub_1001C40C8(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v29 = a3;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = a1 + 10;
  uint64_t v16 = a1[13];
  uint64_t v15 = a1[14];
  sub_1000C0DE0(v14, v16);
  double v17 = (*(double (**)(uint64_t))(*(void *)(v15 + 8) + 8))(v16) / 86400.0;
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v17 <= -1.0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v17 >= 1.84467441e19)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once();
    goto LABEL_6;
  }
  id v18 = sub_1003A09CC(a2, (unint64_t)v17);
  if (v5) {
    return;
  }
  uint64_t v16 = (uint64_t)v18;
  if (qword_100907078 != -1) {
    goto LABEL_14;
  }
LABEL_6:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10090EC50);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v27 = v11;
    uint64_t v24 = v23;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v31 = v28;
    *(_DWORD *)uint64_t v24 = 136446978;
    HIDWORD(v26) = v22;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_1000C51B8(v29, a4, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v30 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v30 = *(void *)&v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 32) = 2048;
    Date.rem_elapsedInMilliseconds.getter();
    uint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, BYTE4(v26), "[%{public}s] batch deleted %ld reminders that were deleted for over %f days, elapsedSeconds: %f ms.", (uint8_t *)v24, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t sub_1001C445C()
{
  swift_bridgeObjectRelease();

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 40);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 80);

  return swift_deallocClassInstance();
}

uint64_t sub_1001C44AC()
{
  return sub_1001C394C();
}

BOOL sub_1001C44D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32];
  sub_1000C0DE0(v2, v4);
  double v5 = (*(double (**)(uint64_t))(*(void *)(v3 + 8) + 8))(v4);
  if (v5 <= 0.0)
  {
    if (qword_100907078 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E2DC(v6, (uint64_t)qword_10090EC50);
    uint64_t v7 = v1;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v11 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier];
      unint64_t v12 = *(void *)&v7[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier + 8];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] configuration validation fail - cannot execute because configurations.batchDeleteExpiredRemindersMinimumDeletionTimeInterval must be greater than 0", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  return v5 > 0.0;
}

unint64_t sub_1001C46D4()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier + 8);
  swift_bridgeObjectRetain();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x746973796261622ELL;
  v4._object = (void *)0xEB00000000726574;
  String.append(_:)(v4);
  return 0xD000000000000012;
}

double sub_1001C47FC()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  sub_1000C0DE0(v0, v1);
  Swift::String v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  [v3 doubleValue];
  double v5 = v4;

  return v5;
}

uint64_t sub_1001C4874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v20);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDBatchDeleteExpiredRemindersActivity();
  if (swift_dynamicCast())
  {

    swift_beginAccess();
    sub_100096838(v2 + 16, (uint64_t)v16);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000C0DE0(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  }
  else
  {
    if (qword_100907078 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_10090EC50);
    sub_100096838(a1, (uint64_t)v16);
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      id v19 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      sub_100096838((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = sub_1000C51B8(v12, v13, (uint64_t *)&v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDBatchDeleteExpiredRemindersExecutionDateStorage.lastExecutedDate(for:) must work with RDBatchDeleteExpiredRemindersActivity only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_1001C4B20(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDBatchDeleteExpiredRemindersActivity();
  if (swift_dynamicCast())
  {

    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_100907078 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090EC50);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = (id)sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDBatchDeleteExpiredRemindersExecutionDateStorage.updateLastExecutedDate(for:) must work with RDBatchDeleteExpiredRemindersActivity only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_1001C4E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001C4874(a1, a2);
}

uint64_t sub_1001C4E6C(uint64_t a1, uint64_t a2)
{
  return sub_1001C4B20(a1, a2);
}

uint64_t sub_1001C4F80@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable);
  a1[3] = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  a1[4] = &off_1008BDA30;
  a1[5] = &off_1008BDA40;
  *a1 = v3;

  return swift_retain();
}

uint64_t sub_1001C4FE4()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 24);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations + 32);
  sub_1000C0DE0(v1, v2);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 24) + 8))(v2);
}

uint64_t sub_1001C503C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_rateReducerConfiguration, a1, (uint64_t *)&unk_10090EEB0);
}

uint64_t sub_1001C506C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter;
  swift_beginAccess();
  return sub_1000BF710(v3, a1, (uint64_t *)&unk_10090E4D0);
}

uint64_t sub_1001C50C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = (char *)*v2 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations;
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  sub_1000C0DE0(v6, v7);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(double (**)(uint64_t, uint64_t))(v9 + 8);
  id v11 = v5;
  double v12 = v10(v7, v9);
  uint64_t v17 = a1;
  uint64_t v18 = &off_1008BDA80;
  *(void *)&long long v16 = v11;
  uint64_t v13 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
  uint64_t v14 = swift_allocObject();
  uint64_t result = sub_1000967D4(&v16, v14 + 16);
  *(double *)(v14 + 56) = v12;
  a2[3] = v13;
  a2[4] = (uint64_t)&off_1008C8B10;
  *a2 = v14;
  return result;
}

uint64_t sub_1001C51AC()
{
  uint64_t v1 = *(void *)(*v0 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1001C51EC@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executionDateStorage, a1);
}

uint64_t sub_1001C5218@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 batchDeleteExpiredRemindersLastExecutionDate];
  if (v3)
  {
    double v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1001C52E0(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v3 setBatchDeleteExpiredRemindersLastExecutionDate:];
}

id sub_1001C53E4()
{
  return [*v0 batchDeleteExpiredRemindersDefaultThrottleInterval];
}

id sub_1001C53F4()
{
  id v1 = [*v0 batchDeleteExpiredRemindersRateReduceFactor];

  return v1;
}

id sub_1001C542C()
{
  return [*v0 batchDeleteExpiredRemindersMinimumDeletionTimeInterval];
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity()
{
  return self;
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable()
{
  return self;
}

uint64_t type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersExecutionDateStorage()
{
  return self;
}

void sub_1001C54A8(void *a1)
{
  sub_1001C4040(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

ValueMetadata *type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer()
{
  return &type metadata for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer;
}

uint64_t sub_1001C54D8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090EEC0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090EEC0);
  if (qword_100907820 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424A8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001C55A0(char *a1, char *a2)
{
  return sub_1002F1674(*a1, *a2);
}

Swift::Int sub_1001C55AC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001C5630()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001C56A0()
{
  return Hasher._finalize()();
}

uint64_t sub_1001C5720@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B5EC0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_1001C5780(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x68636E75616CLL;
  if (*v1) {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000001007C7170;
  if (!*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1001C57C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  int v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  *int v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    if (qword_100907088 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10090EEC0);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    double v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "#️⃣ RDSharedInlineTagAutoConvertEngine Starting...", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables);
  swift_beginAccess();
  uint64_t v14 = *v13;
  if ((v14 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_7;
    }
  }
  else if (*(void *)(v14 + 16))
  {
LABEL_7:
    long long v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v16, v17, v19, v18, 2u);
      swift_slowDealloc();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  sub_1001C5AB8();
  long long v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    id v19 = "#️⃣ RDSharedInlineTagAutoConvertEngine Started";
    goto LABEL_12;
  }
LABEL_13:
}

uint64_t sub_1001C5AB8()
{
  uint64_t v60 = *v0;
  uint64_t v1 = sub_100094134(&qword_10090F090);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v52 = v1;
  uint64_t v53 = v2;
  __chkstk_darwin(v1);
  int v50 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134(&qword_10090F098);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  uint64_t v55 = v5;
  __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134(&qword_10090F0A0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v56 = v7;
  uint64_t v57 = v8;
  __chkstk_darwin(v7);
  __int16 v51 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v10 - 8);
  double v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  long long v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v49 = *(void (***)(char *, void))(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v48 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v62 = (id)sub_100407054((void *)0xD000000000000022, 0x8000000100780420, 0);
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134((uint64_t *)&unk_10090AB80);
  Swift::String v47 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  Publisher.map<A>(_:)();
  sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  swift_release();
  uint64_t v21 = v58;
  uint64_t v45 = v58 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration;
  id v62 = *(id *)(v58 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  id v22 = v62;
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v24 = *(void *)(v23 - 8);
  Swift::String v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  uint64_t v44 = v24 + 56;
  uint64_t v39 = v23;
  v43(v12, 1, 1, v23);
  unint64_t v41 = sub_1000D0FD4();
  sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  unint64_t v40 = sub_100096654();
  id v25 = v22;
  uint64_t v26 = v42;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

  v49[1](v18, v26);
  uint64_t v49 = (void (**)(char *, void))&protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
  uint64_t v27 = v46;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v27);
  uint64_t v48 = v21 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_cancellables;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v62 = (id)sub_1001C6434();
  uint64_t v61 = sub_1001C68E8();
  sub_100094134(&qword_10090F0A8);
  sub_1000967F4(&qword_10090F0B0, &qword_10090F0A8);
  uint64_t v28 = v50;
  Publisher.merge(with:)();
  swift_release();
  swift_release();
  type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  id v62 = v25;
  uint64_t v29 = v43;
  v43(v12, 1, 1, v23);
  sub_1000967F4(&qword_10090F0B8, &qword_10090F090);
  id v30 = v25;
  uint64_t v31 = v52;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v31);
  id v62 = v30;
  v29(v12, 1, 1, v39);
  sub_1000967F4(&qword_10090F0C0, &qword_10090F098);
  id v32 = v30;
  uint64_t v33 = v51;
  uint64_t v34 = v54;
  uint64_t v35 = v59;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v34);
  *(void *)(swift_allocObject() + 16) = v60;
  sub_1000967F4(&qword_10090F0C8, &qword_10090F0A0);
  uint64_t v36 = v56;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v36);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1001C6434()
{
  uint64_t v21 = sub_100094134((uint64_t *)&unk_10091D280);
  uint64_t v1 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100094134((uint64_t *)&unk_10090DD10);
  uint64_t v25 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100094134((uint64_t *)&unk_10090F0F8);
  uint64_t v24 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100776E80;
  *(void *)(v9 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v9 + 40) = v10;
  *(void *)(v9 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v9 + 56) = v11;
  uint64_t v12 = sub_100407394(v8, 0xD00000000000004DLL, 0x80000001007CDF80, v9);
  swift_bridgeObjectRelease();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  uint64_t v26 = type metadata accessor for REMCKSharedEntitySyncActivity();
  sub_100094134(&qword_10090F108);
  *(void *)(inited + 32) = String.init<A>(describing:)();
  *(void *)(inited + 40) = v14;
  uint64_t v15 = sub_10012674C(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v26 = v12;
  *(void *)(swift_allocObject() + 16) = v15;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090F110);
  sub_100094134((uint64_t *)&unk_10090DD40);
  sub_1000967F4((unint64_t *)&unk_10090F120, (uint64_t *)&unk_10090F110);
  Publisher.map<A>(_:)();
  swift_release();
  sub_1000967F4((unint64_t *)&unk_10090DD50, (uint64_t *)&unk_10091D280);
  uint64_t v16 = v21;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v16);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000967F4(&qword_10090F130, (uint64_t *)&unk_10090DD10);
  uint64_t v17 = v23;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v17);
  sub_1000967F4(&qword_10090F138, (uint64_t *)&unk_10090F0F8);
  uint64_t v18 = v22;
  uint64_t v19 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v18);
  return v19;
}

uint64_t sub_1001C68E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134(&qword_10090F0D0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v25 = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100094134(&qword_10090F0D8);
  uint64_t v28 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100094134(&qword_10090F0E0);
  uint64_t v29 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v31 = 0;
  Just.init(_:)();
  uint64_t v16 = v1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  id v30 = *(id *)(v16 + 8);
  id v17 = v30;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 1, 1, v18);
  sub_1000D0FD4();
  sub_1000967F4(&qword_10090F0E8, &qword_10090F0D8);
  sub_100096654();
  id v19 = v17;
  uint64_t v20 = v26;
  Publisher.delay<A>(for:tolerance:scheduler:options:)();
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_1009081C0);

  sub_1000966BC((uint64_t)v7, &qword_10090F0D0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v25);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v20);
  sub_1000967F4(&qword_10090F0F0, &qword_10090F0E0);
  uint64_t v21 = v27;
  uint64_t v22 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v21);
  return v22;
}

void sub_1001C6CFC()
{
  sub_1001C7804();
}

uint64_t sub_1001C6D50(uint64_t a1, char *a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v9 = *a2;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration + 8);
  *uint64_t v8 = v10;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v10)
  {
    if (qword_100907088 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_10090EEC0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136446210;
    v20[1] = sub_1000C51B8(0xD00000000000004DLL, 0x80000001007CDF80, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: %{public}s}", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  os_transaction_create();
  id v16 = sub_1001C7398(v9);
  if (v16)
  {
    id v17 = v16;
    sub_1001C702C(v9, a1);
  }
  else
  {
    sub_1001C74BC(v9);
  }
  sub_1001C83AC();
  return swift_unknownObjectRelease();
}

void sub_1001C702C(char a1, uint64_t a2)
{
  if (qword_100907088 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090EEC0);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    if (a1) {
      uint64_t v8 = 0xD000000000000010;
    }
    else {
      uint64_t v8 = 0x68636E75616CLL;
    }
    if (a1) {
      unint64_t v9 = 0x80000001007C7170;
    }
    else {
      unint64_t v9 = 0xE600000000000000;
    }
    sub_1000C51B8(v8, v9, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "#️⃣ RDSharedInlineTagAutoConvertEngine: Starting journal consumption due to %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v10 = *(void *)(a2 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_handler + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136446210;
    if (a1) {
      uint64_t v15 = 0xD000000000000010;
    }
    else {
      uint64_t v15 = 0x68636E75616CLL;
    }
    if (a1) {
      unint64_t v16 = 0x80000001007C7170;
    }
    else {
      unint64_t v16 = 0xE600000000000000;
    }
    sub_1000C51B8(v15, v16, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "#️⃣ RDSharedInlineTagAutoConvertEngine: Finished journal consumption due to %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

id sub_1001C7398(char a1)
{
  id v3 = [self sharedBabysitter];
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (a1) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v4 tokenByRegisteringAccount:v1 forOperationWithName:v6];

  return v5;
}

void sub_1001C74BC(char a1)
{
  uint64_t v2 = v1;
  if (a1) {
    _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 babySatErrorWithOperationName:v4];

  sub_100094134((uint64_t *)&unk_10090DC70);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = 0x696669746E656469;
  *(void *)(inited + 40) = 0xEA00000000007265;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v7;
  unint64_t v8 = sub_1002EDFE8(inited);
  type metadata accessor for Analytics();
  sub_10042085C(v8);
  swift_bridgeObjectRelease();
  id v9 = v5;
  static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
  swift_bridgeObjectRelease();

  if (qword_100907088 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090EEC0);
  id v11 = v2;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136446210;
    sub_1000C51B8(0xD00000000000003FLL, 0x80000001007CDEF0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Babysitting RDSharedInlineTagAutoConvertEngine because it failed too many times {waiterID: %{public}s}", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1001C7804()
{
  id v1 = [self sharedBabysitter];
  if (v1)
  {
    uint64_t v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 giveAccountWithIDAnotherChance:v3];

    if (qword_100907088 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090EEC0);
    id v8 = v0;
    id v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      NSString v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)NSString v7 = 136446210;
      sub_1000C51B8(0xD00000000000003FLL, 0x80000001007CDEF0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDSharedInlineTagAutoConvertEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

id sub_1001C7AD8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget();
  return [super dealloc];
}

uint64_t sub_1001C7B78()
{
  sub_1001C8338(v0 + OBJC_IVAR____TtC7remindd34RDSharedInlineTagAutoConvertEngine_configuration);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1001C7C0C()
{
  return type metadata accessor for RDSharedInlineTagAutoConvertEngine(0);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090EF10);
}

uint64_t sub_1001C7C34()
{
  uint64_t result = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090F048);
}

uint64_t type metadata accessor for RDSharedInlineTagAutoConvertEngine.BabysitTarget()
{
  return self;
}

char *sub_1001C7D2C(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    id v5 = a1;
    NSString v7 = a2[1];
    os_log_type_t v6 = a2[2];
    *((void *)a1 + 1) = v7;
    *((void *)a1 + 2) = v6;
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = &a1[v8];
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    os_log_type_t v13 = v4;
    os_log_type_t v14 = v7;
    v12(v9, v10, v11);
  }
  return v5;
}

uint64_t sub_1001C7E18(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  os_log_type_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1001C7E98(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  NSString v7 = (char *)a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  id v11 = v4;
  id v12 = v5;
  v10(v7, v8, v9);
  return a1;
}

uint64_t sub_1001C7F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  NSString v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_1001C7FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001C8068(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  *(void *)(a1 + 16) = a2[2];
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1001C810C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C8120);
}

uint64_t sub_1001C8120(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001C81D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C81E4);
}

void *sub_1001C81E4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001C828C()
{
  uint64_t result = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001C8338(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDSharedInlineTagAutoConvertEngine.Configuration(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001C8394()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001C83A4(uint64_t a1, char *a2)
{
  return sub_1001C6D50(a1, a2);
}

void sub_1001C83AC()
{
  if (qword_100907088 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090EEC0);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446210;
    sub_1000C51B8(0xD00000000000004DLL, 0x80000001007CDF80, &v4);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "os_transaction RELEASE {name: %{public}s}", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001C8550()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unsigned char *storeEnumTagSinglePayload for RDSharedInlineTagAutoConvertEngine.UpdateReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001C8654);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSharedInlineTagAutoConvertEngine.UpdateReason()
{
  return &type metadata for RDSharedInlineTagAutoConvertEngine.UpdateReason;
}

unint64_t sub_1001C8690()
{
  unint64_t result = qword_10090F140;
  if (!qword_10090F140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F140);
  }
  return result;
}

uint64_t sub_1001C86E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F150);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F150);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1001C87AC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v2 = sub_1001806F8(0x73656E6F6870, 0xE600000000000000);
    if (v3)
    {
      sub_10009A1B0(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v15);
      sub_100094134((uint64_t *)&unk_10090AFB0);
      if (swift_dynamicCast())
      {
        if (*(void *)(a1 + 16))
        {
          unint64_t v4 = sub_1001806F8(0x736C69616D65, 0xE600000000000000);
          if (v5)
          {
            sub_10009A1B0(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v15);
            if (swift_dynamicCast())
            {
              id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              Class v8 = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v9 = [v6 initWithPhones:isa emails:v8];

              return v9;
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  if (qword_100907090 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090F150);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Can't construct REMContactRepresentation from invalid JSON", v13, 2u);
    swift_slowDealloc();
  }

  return 0;
}

id sub_1001C89D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = sub_1001C87AC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C89FC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F168);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F168);
  if (qword_1009077B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942370);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1001C8AC4@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  sub_100094134(&qword_10090F180);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100776E30;
  id v6 = self;
  id v7 = a3;
  id v8 = [v6 sharedConfiguration];
  sub_1000963CC(0, (unint64_t *)&qword_100908178);
  uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v10 = [ObjCClassFromMetadata daemonUserDefaults];
  uint64_t v11 = self;
  id v12 = [v11 sharedBabysitter];
  if (v12)
  {
    id v13 = v12;
    *((void *)&v97 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
    uint64_t v98 = &off_1008C85D8;
    *(void *)&long long v96 = v13;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
  }
  uint64_t v14 = objc_allocWithZone((Class)type metadata accessor for RDStaledFileAttachmentCleanupActivity());
  id v15 = sub_1001C99B0(v7, (uint64_t)v8, v10, (uint64_t)&v96, v14);

  *(void *)(v5 + 32) = v15;
  *(void *)(v5 + 40) = &off_1008BD368;
  id v16 = sub_1001CA1D0(v7);
  if (v16) {
    uint64_t v17 = &off_1008CC820;
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)(v5 + 48) = v16;
  *(void *)(v5 + 56) = v17;
  id v18 = sub_1001CAB20(v7);
  if (v18) {
    id v19 = &off_1008CC820;
  }
  else {
    id v19 = 0;
  }
  *(void *)(v5 + 64) = v18;
  *(void *)(v5 + 72) = v19;
  id v20 = v7;
  id v21 = [v6 sharedConfiguration];
  id v22 = [ObjCClassFromMetadata daemonUserDefaults];
  id v23 = [self daemonUserDefaults];
  id v24 = [v11 sharedBabysitter];
  if (v24)
  {
    id v25 = v24;
    *((void *)&v97 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
    uint64_t v98 = &off_1008C85D8;
    *(void *)&long long v96 = v25;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
  }
  uint64_t v26 = objc_allocWithZone((Class)type metadata accessor for RDSuggestConversionToGroceryListActivity());
  id v27 = sub_1001CAF78(v20, (uint64_t)v21, (uint64_t)v22, (uint64_t)v23, (uint64_t)&v96, v26);

  *(void *)(v5 + 80) = v27;
  *(void *)(v5 + 88) = &off_1008CF400;
  id v28 = v20;
  id v29 = [v6 sharedConfiguration];
  id v30 = [ObjCClassFromMetadata daemonUserDefaults];
  id v31 = [v11 sharedBabysitter];
  if (v31)
  {
    id v32 = v31;
    *((void *)&v97 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
    uint64_t v98 = &off_1008C85D8;
    *(void *)&long long v96 = v32;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
  }
  uint64_t v33 = objc_allocWithZone((Class)type metadata accessor for RDAnalyticsActivity());
  id v34 = sub_1001CB2DC(v28, (uint64_t)v29, (uint64_t)v30, (uint64_t)&v96, v33);

  *(void *)(v5 + 96) = v34;
  *(void *)(v5 + 104) = &off_1008C4B58;
  id v35 = v28;
  id v36 = [v6 sharedConfiguration];
  id v37 = [ObjCClassFromMetadata daemonUserDefaults];
  id v38 = [v11 sharedBabysitter];
  if (v38)
  {
    id v39 = v38;
    *((void *)&v97 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
    uint64_t v98 = &off_1008C85D8;
    *(void *)&long long v96 = v39;
  }
  else
  {
    uint64_t v98 = 0;
    long long v96 = 0u;
    long long v97 = 0u;
  }
  unint64_t v40 = objc_allocWithZone((Class)type metadata accessor for RDBatchDeleteExpiredRemindersActivity());
  id v41 = sub_1001CB638(v35, (uint64_t)v36, (uint64_t)v37, (uint64_t)&v96, v40);

  *(void *)(v5 + 112) = v41;
  *(void *)(v5 + 120) = &off_1008BDAD8;
  *(void *)&long long v96 = v5;
  sub_100094134(&qword_10090F188);
  sub_100094134(&qword_10090F190);
  sub_1001CB978();
  uint64_t v42 = Sequence.removingNils<A>()();
  swift_bridgeObjectRelease();
  id v43 = [v6 sharedConfiguration];
  [v43 housekeepingActivityMinimumDelay];
  uint64_t v45 = v44;

  uint64_t v46 = sub_1001FF624(v42);
  uint64_t v47 = v46[2];
  if (v47)
  {
    uint64_t v48 = (uint64_t)(v46 + 4);
    while (1)
    {
      sub_100096838(v48, (uint64_t)&v96);
      uint64_t v49 = *((void *)&v97 + 1);
      int v50 = v98;
      sub_1000C0DE0(&v96, *((uint64_t *)&v97 + 1));
      char v51 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v50[1])(v49, v50);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v96);
      if ((v51 & 1) == 0) {
        break;
      }
      v48 += 40;
      if (!--v47) {
        goto LABEL_23;
      }
    }
    swift_bridgeObjectRelease();
    char v52 = 0;
  }
  else
  {
LABEL_23:
    swift_bridgeObjectRelease();
    char v52 = 1;
  }
  uint64_t v53 = sub_1001FF624(v42);
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v55 = (uint64_t)(v53 + 4);
    while (1)
    {
      sub_100096838(v55, (uint64_t)&v96);
      uint64_t v56 = *((void *)&v97 + 1);
      uint64_t v57 = v98;
      sub_1000C0DE0(&v96, *((uint64_t *)&v97 + 1));
      char v58 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v57[2])(v56, v57);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v96);
      if (v58) {
        break;
      }
      v55 += 40;
      if (!--v54) {
        goto LABEL_29;
      }
    }
    swift_bridgeObjectRelease();
    LOBYTE(v54) = 1;
  }
  else
  {
LABEL_29:
    swift_bridgeObjectRelease();
  }
  uint64_t v59 = sub_1001FF624(v42);
  uint64_t v60 = v59[2];
  if (v60)
  {
    uint64_t v61 = (uint64_t)(v59 + 4);
    while (1)
    {
      sub_100096838(v61, (uint64_t)&v96);
      uint64_t v62 = *((void *)&v97 + 1);
      uint64_t v63 = v98;
      sub_1000C0DE0(&v96, *((uint64_t *)&v97 + 1));
      char v64 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v63[3])(v62, v63);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v96);
      if (v64) {
        break;
      }
      v61 += 40;
      if (!--v60) {
        goto LABEL_35;
      }
    }
    swift_bridgeObjectRelease();
    char v65 = 1;
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRelease();
    char v65 = 0;
  }
  type metadata accessor for RDJitteredMinimumDelayXPCActivityFactory();
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16) = v45;
  *(unsigned char *)(v66 + 24) = v52;
  *(unsigned char *)(v66 + 25) = v54;
  *(unsigned char *)(v66 + 26) = v65;
  uint64_t v67 = sub_100094134(&qword_10090F1A0);
  uint64_t v68 = swift_allocObject();
  *(_OWORD *)(v68 + 56) = xmmword_100780580;
  *(void *)(v68 + 72) = 0x80000001007CDFD0;
  *(void *)(v68 + 80) = 0xD00000000000001DLL;
  *(void *)(v68 + 128) = 0;
  *(void *)(v68 + 88) = 0x80000001007CDFD0;
  *(void *)(v68 + 96) = 0;
  *(void *)(v68 + 104) = 0;
  *(void *)(v68 + 112) = 0;
  *(void *)(v68 + 118) = 0;
  *(void *)(v68 + 16) = v42;
  *(void *)(v68 + 24) = a1;
  *(void *)(v68 + 32) = a2;
  *(void *)(v68 + 40) = v35;
  *(void *)(v68 + 48) = v66;
  uint64_t v69 = qword_100907098;
  id v70 = v35;
  swift_bridgeObjectRetain();
  id v71 = a1;
  id v72 = a2;
  swift_retain();
  if (v69 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  sub_10008E2DC(v73, (uint64_t)qword_10090F168);
  swift_bridgeObjectRetain();
  id v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    os_log_type_t v94 = v75;
    Swift::String v76 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v96 = swift_slowAlloc();
    *(_DWORD *)Swift::String v76 = 136446210;
    int64_t v77 = *(void *)(v42 + 16);
    if (v77)
    {
      uint64_t v89 = v76;
      uint64_t v90 = v74;
      uint64_t v91 = v67;
      sub_1001DE058(0, v77, 0);
      uint64_t v78 = v42 + 32;
      do
      {
        swift_getObjectType();
        swift_getWitnessTable();
        uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v81 = v80;
        unint64_t v83 = _swiftEmptyArrayStorage[2];
        unint64_t v82 = _swiftEmptyArrayStorage[3];
        if (v83 >= v82 >> 1) {
          sub_1001DE058(v82 > 1, v83 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v83 + 1;
        uint64_t v84 = &_swiftEmptyArrayStorage[2 * v83];
        v84[4] = v79;
        v84[5] = v81;
        v78 += 16;
        --v77;
      }
      while (v77);
      uint64_t v67 = v91;
      Swift::String v76 = v89;
      id v74 = v90;
    }
    uint64_t v85 = Array.description.getter();
    unint64_t v87 = v86;
    swift_bridgeObjectRelease();
    sub_1000C51B8(v85, v87, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v74, v94, "RDHousekeepingActivitiesAssembly has registered activities: %{public}s", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  a4[3] = v67;
  a4[4] = (uint64_t)&off_1008C5DF8;
  uint64_t result = swift_release();
  *a4 = v68;
  return result;
}

void *sub_1001C943C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  v18[3] = sub_1000963CC(0, (unint64_t *)&qword_100908178);
  v18[4] = &off_1008BD218;
  v18[0] = a2;
  a4[2] = 0xD000000000000022;
  a4[3] = 0x80000001007CE0C0;
  a4[4] = a1;
  sub_100096838((uint64_t)v18, (uint64_t)(a4 + 5));
  a4[10] = a3;
  if (!a3)
  {
    uint64_t v8 = qword_100906FE8;
    id v9 = a1;
    if (v8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10090E1F0);
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)id v13 = 136446210;
      uint64_t v14 = a4[2];
      unint64_t v15 = a4[3];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v14, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  return a4;
}

void *sub_1001C9670(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t (*a9)(void), uint64_t a10, uint64_t *a11)
{
  v37[3] = type metadata accessor for Analytics();
  v37[4] = &protocol witness table for Analytics;
  v37[0] = a7;
  v36[3] = a9(0);
  v36[4] = a10;
  uint64_t v35 = a2;
  v36[0] = a4;
  a8[2] = a1;
  a8[3] = a2;
  uint64_t v34 = a1;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x617475636578452ELL;
  v19._object = (void *)0xEB00000000656C62;
  String.append(_:)(v19);
  uint64_t v20 = v35;
  a8[18] = a1;
  a8[19] = v20;
  a8[4] = a3;
  sub_100096838((uint64_t)v36, (uint64_t)(a8 + 5));
  a8[10] = a5;
  a8[11] = a6;
  sub_100094134(a11);
  id v21 = (void *)swift_allocObject();
  v21[5] = _swiftEmptyArrayStorage;
  v21[6] = _swiftEmptyArrayStorage;
  id v22 = (char *)v21 + qword_10091E7D8;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v21[2] = a6;
  v21[3] = a1;
  v21[4] = v20;
  a8[17] = v21;
  sub_100096838((uint64_t)v37, (uint64_t)(a8 + 12));
  if (a6)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v24 = qword_1009079F0;
    id v25 = a3;
    swift_retain();
    swift_bridgeObjectRetain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E2DC(v26, (uint64_t)qword_10091E5B0);
    swift_retain_n();
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)id v29 = 136446210;
      id v30 = v25;
      uint64_t v32 = a8[2];
      unint64_t v31 = a8[3];
      swift_bridgeObjectRetain();
      sub_1000C51B8(v32, v31, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "[%{public}s] configurations.approximatePerRunDeleteLimit is 0", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    swift_release();
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v36);
  return a8;
}

id sub_1001C99B0(void *a1, uint64_t a2, void *a3, uint64_t a4, unsigned char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v37 = sub_1000963CC(0, &qword_1009081B0);
  id v38 = &off_1008BD250;
  v36[0] = a2;
  uint64_t v11 = (void *)sub_1000963CC(0, (unint64_t *)&qword_100908178);
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityAllowBattery] = 1;
  v35[4] = &off_1008BD218;
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityIsCPUIntensive] = 0;
  a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_xpcActivityIsDiskIntensive] = 0;
  v35[3] = v11;
  v35[0] = a3;
  os_log_type_t v12 = (uint64_t *)&a5[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_identifier];
  *(void *)&long long v32 = ObjectType;
  id v13 = a5;
  sub_100094134(&qword_10090F220);
  *os_log_type_t v12 = String.init<A>(reflecting:)();
  v12[1] = v14;
  uint64_t v15 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_babysitter];
  *(void *)(v15 + 32) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_storeController] = a1;
  sub_100096838((uint64_t)v36, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_configurations]);
  sub_100096838((uint64_t)v35, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_states]);
  swift_beginAccess();
  id v16 = a1;
  sub_1001CB9D4(a4, v15);
  swift_endAccess();
  sub_100096838((uint64_t)v35, (uint64_t)&v32);
  uint64_t v17 = type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupExecutionDateStorage();
  uint64_t v18 = swift_allocObject();
  sub_1000967D4(&v32, v18 + 16);
  Swift::String v19 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executionDateStorage];
  uint64_t v19[3] = v17;
  v19[4] = (uint64_t)&off_1008BD2A8;
  *Swift::String v19 = v18;
  uint64_t v20 = v37;
  id v21 = v38;
  id v22 = sub_1000C0DE0(v36, v37);
  uint64_t v33 = &type metadata for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupRateReducer;
  uint64_t v34 = &off_1008BD430;
  uint64_t v23 = (uint64_t *)swift_allocObject();
  *(void *)&long long v32 = v23;
  v23[5] = v20;
  v23[6] = (uint64_t)v21[2];
  uint64_t v24 = sub_1000C1FE8(v23 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v24, v22, v20);
  sub_1001CBA74((uint64_t)&v32, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_rateReducerConfiguration]);
  id v25 = (void *)v36[0];
  id v26 = v16;
  id v27 = [v25 staledFileAttachmentCleanupPerRunDeleteLimit];
  type metadata accessor for RDStaledFileAttachmentCleanupActivity.RDStaledFileAttachmentCleanupActivityExecutable();
  os_log_type_t v28 = (void *)swift_allocObject();
  *(void *)&v13[OBJC_IVAR____TtC7remindd37RDStaledFileAttachmentCleanupActivity_executable] = sub_1001C943C(v26, (uint64_t)v35[0], (uint64_t)v27, v28);

  v31.receiver = v13;
  v31.super_class = ObjectType;
  id v29 = [super init];
  sub_1001CBADC(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v35);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v36);
  return v29;
}

id sub_1001C9CD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned char *a7)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v49 = type metadata accessor for RDImageDeduplicationActivity.Configurations();
  int v50 = &off_1008CC740;
  v48[0] = a2;
  v47[3] = type metadata accessor for RDImageDeduplicationActivity.States();
  v47[4] = &off_1008CC6D0;
  v47[0] = a3;
  a7[qword_10091E5D0] = 0;
  a7[qword_10091E5D8] = 1;
  a7[qword_10091E5E0] = 1;
  uint64_t v14 = (uint64_t)&a7[qword_10091E5E8];
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 32) = 0;
  uint64_t v15 = (uint64_t)&a7[qword_10091E5F8];
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)(v15 + 32) = 0;
  *(void *)&a7[qword_10091E600] = a1;
  sub_100096838((uint64_t)v48, (uint64_t)&a7[qword_10091E608]);
  sub_100096838((uint64_t)v47, (uint64_t)&a7[qword_10091E610]);
  *(void *)&a7[qword_10091E618] = a4;
  swift_beginAccess();
  id v16 = a7;
  id v17 = a1;
  swift_retain();
  sub_1001CB9D4(a5, v15);
  swift_endAccess();
  sub_100096838((uint64_t)v47, (uint64_t)&v44);
  uint64_t v18 = sub_100094134(&qword_10090F1F8);
  uint64_t v19 = swift_allocObject();
  sub_1000967D4(&v44, v19 + 16);
  uint64_t v20 = (uint64_t *)&v16[qword_10091E5F0];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1008CC760;
  *uint64_t v20 = v19;
  uint64_t v21 = v49;
  id v22 = v50;
  uint64_t v23 = sub_1000C0DE0(v48, v49);
  uint64_t v45 = sub_100094134(&qword_10090F200);
  uint64_t v46 = &off_1008CC930;
  uint64_t v24 = (uint64_t *)swift_allocObject();
  *(void *)&long long v44 = v24;
  v24[5] = v21;
  v24[6] = (uint64_t)v22[2];
  id v25 = sub_1000C1FE8(v24 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v25, v23, v21);
  swift_beginAccess();
  sub_1001CBBA4((uint64_t)&v44, v14);
  swift_endAccess();
  *(void *)&long long v44 = ObjectType;
  swift_getMetatypeMetadata();
  uint64_t v26 = String.init<A>(reflecting:)();
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v48[0] + 40);
  uint64_t v30 = *(void *)(v48[0] + 48);
  sub_1000C0DE0((void *)(v48[0] + 16), v29);
  uint64_t v31 = *(void *)(v30 + 8);
  long long v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
  id v33 = v17;
  swift_retain();
  unint64_t v34 = v32(v29, v31);
  if (v34 >= 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v35 = v34;
  }
  sub_100094134(&qword_10090F208);
  id v36 = (void *)swift_allocObject();
  uint64_t v37 = v47[0];
  id v38 = a6;
  swift_retain();
  *(void *)&v16[qword_10091E620] = sub_1001C9670(v26, v28, v33, v37, a4, v35, (uint64_t)v38, v36, (uint64_t (*)(void))type metadata accessor for RDImageDeduplicationActivity.States, (uint64_t)&off_1008CC6D0, &qword_10090F218);

  v43.receiver = v16;
  v43.super_class = (Class)sub_100094134(&qword_10090F210);
  id v39 = [super init];
  sub_1001CBADC(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
  return v39;
}

id sub_1001CA0AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v18[3] = sub_1000963CC(0, &qword_1009081B0);
  v18[4] = &off_1008CC0D0;
  v18[0] = a2;
  os_log_type_t v12 = objc_allocWithZone((Class)type metadata accessor for RDImageDeduplicationActivity(0));
  sub_100096838((uint64_t)v18, (uint64_t)v17);
  type metadata accessor for RDImageDeduplicationActivity.Configurations();
  uint64_t v13 = swift_allocObject();
  sub_1000967D4(v17, v13 + 16);
  type metadata accessor for RDImageDeduplicationActivity.States();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = &off_1008CC060;
  sub_1001CBB3C(a5, (uint64_t)v17);
  id v15 = sub_1001C9CD8(a1, v13, v14, a4, (uint64_t)v17, a6, v12);
  sub_1001CBADC(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  return v15;
}

id sub_1001CA1D0(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - v7;
  id v9 = [a1 _dataSeparationIncompatible_defaultReminderDataContainerURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  id v10 = [self defaultManager];
  *((void *)&v31 + 1) = sub_1000963CC(0, &qword_10090F1C8);
  long long v32 = &off_1008C6848;
  *(void *)&long long v30 = v10;
  type metadata accessor for RDSentinelFileLocation();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0xD00000000000001BLL;
  *(void *)(v11 + 24) = 0x80000001007CE0A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL, v6, v2);
  sub_1000967D4(&v30, v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_1000C0DE0((void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager), *(void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24));
  uint64_t v13 = sub_10044EA10();
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t))(v12 + 8))(v13);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (qword_100907098 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10090F168);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDImageDeduplicationActivity's sentinel file exists, activity does not need to register.", v17, 2u);
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0;
  }
  else
  {
    sub_1000963CC(0, (unint64_t *)&qword_100908178);
    id v19 = [(id)swift_getObjCClassFromMetadata() daemonUserDefaults];
    uint64_t v20 = self;
    id v21 = a1;
    id v22 = [v20 sharedConfiguration];
    uint64_t v23 = self;
    id v24 = v19;
    id v25 = [v23 sharedBabysitter];
    if (v25)
    {
      id v26 = v25;
      *((void *)&v31 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
      long long v32 = &off_1008C85D8;
      *(void *)&long long v30 = v26;
    }
    else
    {
      long long v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
    }
    id v27 = objc_allocWithZone((Class)type metadata accessor for Analytics());
    id v28 = [v27 init:v30];
    id v18 = sub_1001CA0AC(v21, (uint64_t)v22, (uint64_t)v24, v11, (uint64_t)&v30, v28);

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v18;
}

id sub_1001CA628(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, unsigned char *a7)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v49 = type metadata accessor for RDSavedImageDeduplicationActivity.Configurations();
  int v50 = &off_1008CC6B0;
  v48[0] = a2;
  v47[3] = type metadata accessor for RDSavedImageDeduplicationActivity.States();
  v47[4] = &off_1008CC640;
  v47[0] = a3;
  a7[qword_10091E5D0] = 0;
  a7[qword_10091E5D8] = 1;
  a7[qword_10091E5E0] = 1;
  uint64_t v14 = (uint64_t)&a7[qword_10091E5E8];
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 32) = 0;
  uint64_t v15 = (uint64_t)&a7[qword_10091E5F8];
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)(v15 + 32) = 0;
  *(void *)&a7[qword_10091E600] = a1;
  sub_100096838((uint64_t)v48, (uint64_t)&a7[qword_10091E608]);
  sub_100096838((uint64_t)v47, (uint64_t)&a7[qword_10091E610]);
  *(void *)&a7[qword_10091E618] = a4;
  swift_beginAccess();
  os_log_type_t v16 = a7;
  id v17 = a1;
  swift_retain();
  sub_1001CB9D4(a5, v15);
  swift_endAccess();
  sub_100096838((uint64_t)v47, (uint64_t)&v44);
  uint64_t v18 = sub_100094134(&qword_10090F1D0);
  uint64_t v19 = swift_allocObject();
  sub_1000967D4(&v44, v19 + 16);
  uint64_t v20 = (uint64_t *)&v16[qword_10091E5F0];
  v20[3] = v18;
  v20[4] = (uint64_t)&off_1008CC760;
  *uint64_t v20 = v19;
  uint64_t v21 = v49;
  id v22 = v50;
  uint64_t v23 = sub_1000C0DE0(v48, v49);
  uint64_t v45 = sub_100094134(&qword_10090F1D8);
  uint64_t v46 = &off_1008CC930;
  id v24 = (uint64_t *)swift_allocObject();
  *(void *)&long long v44 = v24;
  v24[5] = v21;
  v24[6] = (uint64_t)v22[2];
  id v25 = sub_1000C1FE8(v24 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v25, v23, v21);
  swift_beginAccess();
  sub_1001CBBA4((uint64_t)&v44, v14);
  swift_endAccess();
  *(void *)&long long v44 = ObjectType;
  swift_getMetatypeMetadata();
  uint64_t v26 = String.init<A>(reflecting:)();
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v48[0] + 40);
  uint64_t v30 = *(void *)(v48[0] + 48);
  sub_1000C0DE0((void *)(v48[0] + 16), v29);
  uint64_t v31 = *(void *)(v30 + 8);
  long long v32 = *(uint64_t (**)(uint64_t, uint64_t))(v31 + 8);
  id v33 = v17;
  swift_retain();
  unint64_t v34 = v32(v29, v31);
  if (v34 >= 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v35 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v35 = v34;
  }
  sub_100094134(&qword_10090F1E0);
  id v36 = (void *)swift_allocObject();
  uint64_t v37 = v47[0];
  id v38 = a6;
  swift_retain();
  *(void *)&v16[qword_10091E620] = sub_1001C9670(v26, v28, v33, v37, a4, v35, (uint64_t)v38, v36, (uint64_t (*)(void))type metadata accessor for RDSavedImageDeduplicationActivity.States, (uint64_t)&off_1008CC640, &qword_10090F1F0);

  v43.receiver = v16;
  v43.super_class = (Class)sub_100094134(&qword_10090F1E8);
  id v39 = [super init];
  sub_1001CBADC(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v48);
  return v39;
}

id sub_1001CA9FC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v18[3] = sub_1000963CC(0, &qword_1009081B0);
  v18[4] = &off_1008CC128;
  v18[0] = a2;
  uint64_t v12 = objc_allocWithZone((Class)type metadata accessor for RDSavedImageDeduplicationActivity(0));
  sub_100096838((uint64_t)v18, (uint64_t)v17);
  type metadata accessor for RDSavedImageDeduplicationActivity.Configurations();
  uint64_t v13 = swift_allocObject();
  sub_1000967D4(v17, v13 + 16);
  type metadata accessor for RDSavedImageDeduplicationActivity.States();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  *(void *)(v14 + 24) = &off_1008CC098;
  sub_1001CBB3C(a5, (uint64_t)v17);
  id v15 = sub_1001CA628(a1, v13, v14, a4, (uint64_t)v17, a6, v12);
  sub_1001CBADC(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v18);
  return v15;
}

id sub_1001CAB20(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v30 - v7;
  id v9 = [a1 _dataSeparationIncompatible_defaultReminderDataContainerURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  id v10 = [self defaultManager];
  *((void *)&v31 + 1) = sub_1000963CC(0, &qword_10090F1C8);
  long long v32 = &off_1008C6848;
  *(void *)&long long v30 = v10;
  type metadata accessor for RDSentinelFileLocation();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0xD000000000000020;
  *(void *)(v11 + 24) = 0x80000001007CE070;
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_containerURL, v6, v2);
  sub_1000967D4(&v30, v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager);
  uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 32);
  sub_1000C0DE0((void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager), *(void *)(v11 + OBJC_IVAR____TtC7remindd22RDSentinelFileLocation_fileManager + 24));
  uint64_t v13 = sub_10044EA10();
  LOBYTE(v6) = (*(uint64_t (**)(uint64_t))(v12 + 8))(v13);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if (qword_100907098 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10090F168);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDSavedImageDeduplicationActivity's sentinel file exists, activity does not need to register.", v17, 2u);
      swift_slowDealloc();
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    return 0;
  }
  else
  {
    sub_1000963CC(0, (unint64_t *)&qword_100908178);
    id v19 = [(id)swift_getObjCClassFromMetadata() daemonUserDefaults];
    uint64_t v20 = self;
    id v21 = a1;
    id v22 = [v20 sharedConfiguration];
    uint64_t v23 = self;
    id v24 = v19;
    id v25 = [v23 sharedBabysitter];
    if (v25)
    {
      id v26 = v25;
      *((void *)&v31 + 1) = sub_1000963CC(0, (unint64_t *)&qword_10090F1A8);
      long long v32 = &off_1008C85D8;
      *(void *)&long long v30 = v26;
    }
    else
    {
      long long v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
    }
    id v27 = objc_allocWithZone((Class)type metadata accessor for Analytics());
    id v28 = [v27 init:v30];
    id v18 = sub_1001CA9FC(v21, (uint64_t)v22, (uint64_t)v24, v11, (uint64_t)&v30, v28);

    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  return v18;
}

id sub_1001CAF78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v13 = sub_1000963CC(0, (unint64_t *)&qword_100908178);
  v39[3] = v13;
  v39[4] = &off_1008CF2F0;
  v39[0] = a4;
  uint64_t v37 = sub_1000963CC(0, &qword_1009081B0);
  id v38 = &off_1008CF308;
  v36[0] = a2;
  v35[4] = &off_1008CF2D0;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityAllowBattery] = 0;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityIsCPUIntensive] = 1;
  a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_xpcActivityIsDiskIntensive] = 0;
  v35[3] = v13;
  v35[0] = a3;
  uint64_t v14 = (uint64_t *)&a6[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_identifier];
  *(void *)&long long v32 = ObjectType;
  id v15 = a6;
  sub_100094134(&qword_10090F1C0);
  *uint64_t v14 = String.init<A>(reflecting:)();
  v14[1] = v16;
  uint64_t v17 = (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_babysitter];
  *(void *)(v17 + 32) = 0;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(void *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_storeController] = a1;
  sub_100096838((uint64_t)v36, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_configurations]);
  sub_100096838((uint64_t)v35, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_states]);
  sub_100096838((uint64_t)v39, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_userDefaults]);
  swift_beginAccess();
  id v18 = a1;
  sub_1001CB9D4(a5, v17);
  swift_endAccess();
  sub_100096838((uint64_t)v35, (uint64_t)&v32);
  uint64_t v19 = type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListExecutionDateStorage();
  uint64_t v20 = swift_allocObject();
  sub_1000967D4(&v32, v20 + 16);
  id v21 = (uint64_t *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executionDateStorage];
  v21[3] = v19;
  v21[4] = (uint64_t)&off_1008CF340;
  *id v21 = v20;
  uint64_t v22 = v37;
  uint64_t v23 = v38;
  id v24 = sub_1000C0DE0(v36, v37);
  id v33 = &type metadata for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListRateReducer;
  unint64_t v34 = &off_1008CF4C8;
  id v25 = (uint64_t *)swift_allocObject();
  *(void *)&long long v32 = v25;
  v25[5] = v22;
  v25[6] = (uint64_t)v23[1];
  id v26 = sub_1000C1FE8(v25 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(v26, v24, v22);
  sub_1001CBA74((uint64_t)&v32, (uint64_t)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_rateReducerConfiguration]);
  sub_100096838((uint64_t)v35, (uint64_t)&v32);
  type metadata accessor for RDSuggestConversionToGroceryListActivity.RDSuggestConversionToGroceryListActivityExecutable();
  id v27 = (void *)swift_allocObject();
  v27[2] = 0xD000000000000025;
  uint64_t v27[3] = 0x80000001007CE040;
  v27[4] = v18;
  sub_1000967D4(&v32, (uint64_t)(v27 + 5));
  *(void *)&v15[OBJC_IVAR____TtC7remindd40RDSuggestConversionToGroceryListActivity_executable] = v27;
  id v28 = v18;

  v31.receiver = v15;
  v31.super_class = ObjectType;
  id v29 = [super init];
  sub_1001CBADC(a5);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v39);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v35);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v36);
  return v29;
}

id sub_1001CB2DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v39 = sub_1000963CC(0, &qword_1009081B0);
  unint64_t v40 = &off_1008C4A50;
  v38[0] = a2;
  uint64_t v11 = sub_1000963CC(0, (unint64_t *)&qword_100908178);
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityAllowBattery] = 0;
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityIsCPUIntensive] = 0;
  a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_xpcActivityIsDiskIntensive] = 1;
  v37[3] = v11;
  v37[4] = &off_1008C4A30;
  v37[0] = a3;
  uint64_t v12 = (uint64_t *)&a5[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_identifier];
  *(void *)&long long v34 = ObjectType;
  uint64_t v13 = a5;
  sub_100094134(&qword_10090F1B8);
  *uint64_t v12 = String.init<A>(reflecting:)();
  v12[1] = v14;
  uint64_t v15 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_babysitter];
  *(void *)(v15 + 32) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_storeController] = a1;
  sub_100096838((uint64_t)v38, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_configurations]);
  sub_100096838((uint64_t)v37, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_states]);
  swift_beginAccess();
  id v16 = a1;
  sub_1001CB9D4(a4, v15);
  swift_endAccess();
  sub_100096838((uint64_t)v37, (uint64_t)&v34);
  uint64_t v17 = type metadata accessor for RDAnalyticsActivity.RDAnalyticsExecutionDateStorage();
  uint64_t v18 = swift_allocObject();
  sub_1000967D4(&v34, v18 + 16);
  uint64_t v19 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executionDateStorage];
  uint64_t v19[3] = v17;
  v19[4] = (uint64_t)&off_1008C4A88;
  *uint64_t v19 = v18;
  uint64_t v20 = v39;
  id v21 = v40;
  uint64_t v22 = sub_1000C0DE0(v38, v39);
  uint64_t v35 = &type metadata for RDAnalyticsActivity.RDAnalyticsRateReducer;
  id v36 = &off_1008C4CE0;
  uint64_t v23 = (uint64_t *)swift_allocObject();
  *(void *)&long long v34 = v23;
  v23[5] = v20;
  v23[6] = (uint64_t)v21[1];
  id v24 = sub_1000C1FE8(v23 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v24, v22, v20);
  sub_1001CBA74((uint64_t)&v34, (uint64_t)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_rateReducerConfiguration]);
  sub_100096838((uint64_t)v37, (uint64_t)&v34);
  id v25 = (objc_class *)type metadata accessor for RDAnalyticsActivity.RDAnalyticsActivityExecutable();
  id v26 = (char *)objc_allocWithZone(v25);
  id v27 = &v26[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_name];
  *(void *)id v27 = 0xD000000000000010;
  *((void *)v27 + 1) = 0x80000001007CE020;
  *(void *)&v26[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_storeController] = v16;
  sub_100096838((uint64_t)&v34, (uint64_t)&v26[OBJC_IVAR____TtCC7remindd19RDAnalyticsActivityP33_35FD618111A9B708721C682F761C56BE29RDAnalyticsActivityExecutable_states]);
  v33.receiver = v26;
  v33.super_class = v25;
  id v28 = v16;
  id v29 = [super init];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v34);
  *(void *)&v13[OBJC_IVAR____TtC7remindd19RDAnalyticsActivity_executable] = v29;

  v32.receiver = v13;
  v32.super_class = ObjectType;
  id v30 = [super init];
  sub_1001CBADC(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v37);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v38);
  return v30;
}

id sub_1001CB638(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v36 = sub_1000963CC(0, &qword_1009081B0);
  uint64_t v37 = &off_1008BD9C8;
  v35[0] = a2;
  uint64_t v11 = sub_1000963CC(0, (unint64_t *)&qword_100908178);
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityAllowBattery] = 0;
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityIsCPUIntensive] = 1;
  v34[4] = &off_1008BD9A8;
  a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_xpcActivityIsDiskIntensive] = 0;
  v34[3] = v11;
  v34[0] = a3;
  uint64_t v12 = (uint64_t *)&a5[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_identifier];
  *(void *)&long long v31 = ObjectType;
  uint64_t v13 = a5;
  sub_100094134(&qword_10090F1B0);
  *uint64_t v12 = String.init<A>(reflecting:)();
  v12[1] = v14;
  uint64_t v15 = (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_babysitter];
  *(void *)(v15 + 32) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_storeController] = a1;
  sub_100096838((uint64_t)v35, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_configurations]);
  sub_100096838((uint64_t)v34, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_states]);
  swift_beginAccess();
  id v16 = a1;
  sub_1001CB9D4(a4, v15);
  swift_endAccess();
  sub_100096838((uint64_t)v34, (uint64_t)&v31);
  uint64_t v17 = type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersExecutionDateStorage();
  uint64_t v18 = swift_allocObject();
  sub_1000967D4(&v31, v18 + 16);
  uint64_t v19 = (uint64_t *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executionDateStorage];
  uint64_t v19[3] = v17;
  v19[4] = (uint64_t)&off_1008BDA18;
  *uint64_t v19 = v18;
  uint64_t v20 = v36;
  id v21 = v37;
  uint64_t v22 = sub_1000C0DE0(v35, v36);
  objc_super v32 = &type metadata for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersRateReducer;
  objc_super v33 = &off_1008BDBA0;
  uint64_t v23 = (uint64_t *)swift_allocObject();
  *(void *)&long long v31 = v23;
  v23[5] = v20;
  v23[6] = (uint64_t)v21[2];
  id v24 = sub_1000C1FE8(v23 + 2);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(v24, v22, v20);
  sub_1001CBA74((uint64_t)&v31, (uint64_t)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_rateReducerConfiguration]);
  sub_100096838((uint64_t)v34, (uint64_t)&v31);
  sub_100096838((uint64_t)v35, (uint64_t)v30);
  type metadata accessor for RDBatchDeleteExpiredRemindersActivity.RDBatchDeleteExpiredRemindersActivityExecutable();
  id v25 = (void *)swift_allocObject();
  v25[2] = 0xD000000000000022;
  v25[3] = 0x80000001007CDFF0;
  void v25[4] = v16;
  sub_1000967D4(&v31, (uint64_t)(v25 + 5));
  sub_1000967D4(v30, (uint64_t)(v25 + 10));
  *(void *)&v13[OBJC_IVAR____TtC7remindd37RDBatchDeleteExpiredRemindersActivity_executable] = v25;
  id v26 = v16;

  v29.receiver = v13;
  v29.super_class = ObjectType;
  id v27 = [super init];
  sub_1001CBADC(a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v34);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v35);
  return v27;
}

unint64_t sub_1001CB978()
{
  unint64_t result = qword_10090F198;
  if (!qword_10090F198)
  {
    sub_100096058(&qword_10090F188);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F198);
  }
  return result;
}

uint64_t sub_1001CB9D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090E4D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CBA3C()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001CBA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090EEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CBADC(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090E4D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001CBB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090E4D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CBBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090EEB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001CBC20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          id v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001CBD58(void *a1, uint64_t a2)
{
  return sub_1001CBF94(a1, a2, (unint64_t *)&qword_10090A3B0);
}

uint64_t sub_1001CBD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1001CD87C((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    BOOL v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1001CD87C((unint64_t *)&qword_10090B4D0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1001CBF80(void *a1, uint64_t a2)
{
  return sub_1001CBF94(a1, a2, (unint64_t *)&unk_100916ED0);
}

uint64_t sub_1001CBF94(void *a1, uint64_t a2, unint64_t *a3)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v8 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v9 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v10 = v8 & ~v9,
        uint64_t v11 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0))
  {
LABEL_11:
    char v14 = 0;
    return v14 & 1;
  }
  sub_1000963CC(0, a3);
  id v12 = *(id *)(*(void *)(a2 + 48) + 8 * v10);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    uint64_t v15 = ~v9;
    unint64_t v16 = (v10 + 1) & v15;
    if ((*(void *)(v11 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
    {
      do
      {
        id v17 = *(id *)(*(void *)(a2 + 48) + 8 * v16);
        char v14 = static NSObject.== infix(_:_:)();

        if (v14) {
          break;
        }
        unint64_t v16 = (v16 + 1) & v15;
      }
      while (((*(void *)(v11 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
      return v14 & 1;
    }
    goto LABEL_11;
  }
  char v14 = 1;
  return v14 & 1;
}

uint64_t sub_1001CC0F4(uint64_t a1, uint64_t a2)
{
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v4 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1001CD87C(&qword_1009110B0, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    id v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    char v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, PredicateType);
      sub_1001CD87C((unint64_t *)&qword_100914720, (void (*)(uint64_t))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, PredicateType);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1001CC308(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for REMObjectID_Codable();
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t sub_1001CC458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_1001CD87C(&qword_10090F228, (void (*)(uint64_t))&type metadata accessor for URL),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    char v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    unint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_1001CD87C(&qword_1009149E0, (void (*)(uint64_t))&type metadata accessor for URL);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_1001CC66C(unsigned __int8 a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v4 = Hasher._finalize()();
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v6 = v4 & ~v5;
    if ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
    {
      uint64_t v7 = ~v5;
      uint64_t v8 = a1;
      while (1)
      {
        unint64_t v9 = 0xD000000000000030;
        unint64_t v10 = 0x80000001007C7430;
        switch(*(unsigned char *)(*(void *)(a2 + 48) + v6))
        {
          case 1:
            unint64_t v9 = 0xD00000000000002DLL;
            unint64_t v10 = 0x80000001007C7470;
            break;
          case 2:
            unint64_t v9 = 0xD000000000000034;
            unint64_t v10 = 0x80000001007C74A0;
            break;
          case 3:
            unint64_t v9 = 0xD000000000000031;
            unint64_t v10 = 0x80000001007C74E0;
            break;
          case 4:
            unint64_t v10 = 0x80000001007C7520;
            unint64_t v9 = 0xD00000000000001BLL;
            break;
          default:
            break;
        }
        unint64_t v11 = 0xD000000000000030;
        unint64_t v12 = 0x80000001007C7430;
        switch(v8)
        {
          case 1:
            unint64_t v13 = 0xD00000000000002DLL;
            unint64_t v14 = "butesAutoTrainer";
            goto LABEL_12;
          case 2:
            unint64_t v13 = 0xD000000000000034;
            unint64_t v14 = "d.ICCloudConfigurationUpdater";
LABEL_12:
            unint64_t v12 = (unint64_t)v14 | 0x8000000000000000;
            if (v9 != v13) {
              goto LABEL_17;
            }
            goto LABEL_16;
          case 3:
            unint64_t v11 = 0xD000000000000031;
            unint64_t v12 = 0x80000001007C74E0;
            goto LABEL_15;
          case 4:
            unint64_t v12 = 0x80000001007C7520;
            if (v9 != 0xD00000000000001BLL) {
              goto LABEL_17;
            }
            goto LABEL_16;
          default:
LABEL_15:
            if (v9 != v11) {
              goto LABEL_17;
            }
LABEL_16:
            if (v10 == v12)
            {
              swift_bridgeObjectRelease_n();
              char v15 = 1;
              return v15 & 1;
            }
LABEL_17:
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v15) {
              return v15 & 1;
            }
            unint64_t v6 = (v6 + 1) & v7;
            if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
              return v15 & 1;
            }
            break;
        }
      }
    }
  }
  char v15 = 0;
  return v15 & 1;
}

uint64_t REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(dictionary:forEvaluatingAgainst:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v89 = a1;
  uint64_t v84 = a3;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  unint64_t v83 = (char *)v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v79 = (char *)v76 - v7;
  __chkstk_darwin(v8);
  uint64_t v87 = (uint64_t)v76 - v9;
  uint64_t PredicateType = type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicateType();
  uint64_t v11 = *(void *)(PredicateType - 8);
  __chkstk_darwin(PredicateType);
  unint64_t v13 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  uint64_t v82 = (uint64_t)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v81 = (uint64_t)v76 - v17;
  __chkstk_darwin(v18);
  uint64_t v80 = (uint64_t)v76 - v19;
  __chkstk_darwin(v20);
  uint64_t v78 = (char *)v76 - v21;
  __chkstk_darwin(v22);
  uint64_t v88 = (uint64_t)v76 - v23;
  __chkstk_darwin(v24);
  int64_t v77 = (char *)v76 - v25;
  __chkstk_darwin(v26);
  id v28 = (char *)v76 - v27;
  __chkstk_darwin(v29);
  long long v31 = (char *)v76 - v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (uint64_t)v76 - v33;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  uint64_t v85 = v34;
  v36(v34, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.hashtags.getter();
  uint64_t v90 = a2;
  LOBYTE(v34) = sub_1001CC0F4((uint64_t)v13, a2);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v11 + 8);
  v37(v13, PredicateType);
  unint64_t v86 = v28;
  if (v34)
  {
    *(void *)&long long v92 = 0x696669746E656469;
    *((void *)&v92 + 1) = 0xEA00000000007265;
    id v38 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v38)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
    }
    else
    {
      sub_1000966BC(v85, (uint64_t *)&unk_100909E50);
      long long v92 = 0u;
      long long v93 = 0u;
    }
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    id v28 = v86;
    if (v96)
    {
      uint64_t v39 = swift_dynamicCast() ^ 1;
      unint64_t v40 = v31;
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
      unint64_t v40 = v31;
      uint64_t v39 = 1;
    }
    v36((uint64_t)v40, v39, 1, v35);
    sub_100096408((uint64_t)v31, v85, (uint64_t *)&unk_100909E50);
  }
  v36((uint64_t)v28, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.lists.getter();
  char v41 = sub_1001CC0F4((uint64_t)v13, v90);
  v37(v13, PredicateType);
  uint64_t v42 = v87;
  if (v41)
  {
    *(void *)&long long v92 = 0x6564692E7473696CLL;
    *((void *)&v92 + 1) = 0xEF7265696669746ELL;
    id v43 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v43)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      uint64_t v44 = (uint64_t)v86;
      sub_1000966BC((uint64_t)v86, (uint64_t *)&unk_100909E50);
    }
    else
    {
      uint64_t v44 = (uint64_t)v86;
      sub_1000966BC((uint64_t)v86, (uint64_t *)&unk_100909E50);
      long long v92 = 0u;
      long long v93 = 0u;
    }
    uint64_t v45 = (uint64_t)v77;
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96)
    {
      uint64_t v46 = swift_dynamicCast() ^ 1;
      uint64_t v47 = v45;
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
      uint64_t v47 = v45;
      uint64_t v46 = 1;
    }
    v36(v47, v46, 1, v35);
    sub_100096408(v45, v44, (uint64_t *)&unk_100909E50);
  }
  v36(v88, 1, 1, v35);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.account.getter();
  char v48 = sub_1001CC0F4((uint64_t)v13, v90);
  v37(v13, PredicateType);
  if (v48)
  {
    *(void *)&long long v92 = 0xD000000000000012;
    *((void *)&v92 + 1) = 0x80000001007CE140;
    id v49 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v49)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000966BC(v88, (uint64_t *)&unk_100909E50);
    }
    else
    {
      sub_1000966BC(v88, (uint64_t *)&unk_100909E50);
      long long v92 = 0u;
      long long v93 = 0u;
    }
    uint64_t v50 = (uint64_t)v78;
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96)
    {
      uint64_t v51 = swift_dynamicCast() ^ 1;
      uint64_t v52 = v50;
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
      uint64_t v52 = v50;
      uint64_t v51 = 1;
    }
    v36(v52, v51, 1, v35);
    sub_100096408(v50, v88, (uint64_t *)&unk_100909E50);
  }
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
  v54(v42, 1, 1, v53);
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.date.getter();
  char v55 = sub_1001CC0F4((uint64_t)v13, v90);
  v37(v13, PredicateType);
  if ((v55 & 1) != 0
    || (static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.partOfDay.getter(),
        char v56 = sub_1001CC0F4((uint64_t)v13, v90),
        v37(v13, PredicateType),
        (v56 & 1) != 0))
  {
    *(void *)&long long v92 = 0x4479616C70736964;
    *((void *)&v92 + 1) = 0xEF65746144657461;
    id v57 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v57)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000966BC(v42, (uint64_t *)&unk_100909A40);
    }
    else
    {
      sub_1000966BC(v42, (uint64_t *)&unk_100909A40);
      long long v92 = 0u;
      long long v93 = 0u;
    }
    uint64_t v58 = (uint64_t)v79;
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96)
    {
      uint64_t v59 = swift_dynamicCast() ^ 1;
      uint64_t v60 = v58;
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
      uint64_t v60 = v58;
      uint64_t v59 = 1;
    }
    v54(v60, v59, 1, v53);
    sub_100096408(v58, v42, (uint64_t *)&unk_100909A40);
    unint64_t v94 = 0xD000000000000013;
    unint64_t v95 = 0x80000001007CC440;
    id v61 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v61)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v92 = 0u;
      long long v93 = 0u;
    }
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96)
    {
      if (swift_dynamicCast()) {
        int v62 = v91;
      }
      else {
        int v62 = 2;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
      int v62 = 2;
    }
  }
  else
  {
    int v62 = 2;
  }
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.priorities.getter();
  char v63 = sub_1001CC0F4((uint64_t)v13, v90);
  v37(v13, PredicateType);
  if (v63)
  {
    *(void *)&long long v92 = 0x797469726F697270;
    *((void *)&v92 + 1) = 0xE800000000000000;
    id v64 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    if (v64)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v92 = 0u;
      long long v93 = 0u;
    }
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96)
    {
      if (swift_dynamicCast())
      {
        if (v91 < 0)
        {
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v78 = (char *)REMReminderPriorityLevelForPriority();
        LODWORD(v77) = 0;
        goto LABEL_52;
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
    }
  }
  uint64_t v78 = 0;
  LODWORD(v77) = 1;
LABEL_52:
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.flagged.getter();
  char v65 = sub_1001CC0F4((uint64_t)v13, v90);
  v37(v13, PredicateType);
  LODWORD(v79) = v62;
  if ((v65 & 1) == 0) {
    goto LABEL_60;
  }
  *(void *)&long long v92 = 0x64656767616C66;
  *((void *)&v92 + 1) = 0xE700000000000000;
  id v66 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v66)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v92 = 0u;
    long long v93 = 0u;
  }
  sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
  if (!v96)
  {
    sub_1000966BC((uint64_t)&v94, &qword_100908190);
    goto LABEL_60;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_60:
    int v67 = 2;
    goto LABEL_61;
  }
  int v67 = v91 > 0;
LABEL_61:
  v76[1] = v67;
  static REMCustomSmartListFilterDescriptor.PostFetchPredicateType.completed.getter();
  char v68 = sub_1001CC0F4((uint64_t)v13, v90);
  swift_bridgeObjectRelease();
  v37(v13, PredicateType);
  if (v68)
  {
    unint64_t v94 = 0x6574656C706D6F63;
    unint64_t v95 = 0xE900000000000064;
    id v69 = [v89 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
    swift_unknownObjectRelease();
    uint64_t v70 = (uint64_t)v83;
    if (v69)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v92 = 0u;
      long long v93 = 0u;
    }
    sub_100096408((uint64_t)&v92, (uint64_t)&v94, &qword_100908190);
    if (v96) {
      swift_dynamicCast();
    }
    else {
      sub_1000966BC((uint64_t)&v94, &qword_100908190);
    }
  }
  else
  {
    uint64_t v70 = (uint64_t)v83;
  }
  uint64_t v71 = v85;
  sub_1000BF710(v85, v80, (uint64_t *)&unk_100909E50);
  uint64_t v72 = (uint64_t)v86;
  sub_1000BF710((uint64_t)v86, v81, (uint64_t *)&unk_100909E50);
  uint64_t v73 = v88;
  sub_1000BF710(v88, v82, (uint64_t *)&unk_100909E50);
  uint64_t v74 = v87;
  sub_1000BF710(v87, v70, (uint64_t *)&unk_100909A40);
  REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder.init(identifier:listIdentifier:accountIdentifier:displayDateDate:displayDateIsAllDay:alarmTriggers:priority:flagged:completed:)();

  sub_1000966BC(v74, (uint64_t *)&unk_100909A40);
  sub_1000966BC(v73, (uint64_t *)&unk_100909E50);
  sub_1000966BC(v72, (uint64_t *)&unk_100909E50);
  return sub_1000966BC(v71, (uint64_t *)&unk_100909E50);
}

uint64_t sub_1001CD87C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001CD8C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F230);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F230);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDHashtag.recordTypes()()
{
  return &off_1008B5F10;
}

uint64_t static REMCDHashtag.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDHashtag.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      uint64_t v12 = v11;
      [v10 setAccount:a2];
      [v10 mergeDataFromRecord:a1 accountID:v12];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_1009070A0 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10090F230);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          uint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDHashtag.recordType()()
{
  uint64_t v0 = 0x67617468736148;
  uint64_t v1 = (void *)0xE700000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDHashtag.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v160 = (char *)&v159 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v173 = (char *)&v159 - v8;
  __chkstk_darwin(v9);
  uint64_t v172 = (uint64_t)&v159 - v10;
  __chkstk_darwin(v11);
  uint64_t v166 = (char *)&v159 - v12;
  __chkstk_darwin(v13);
  uint64_t v165 = (uint64_t)&v159 - v14;
  __chkstk_darwin(v15);
  uint64_t v181 = (char *)&v159 - v16;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v178 = (char *)&v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v164 = (char *)&v159 - v21;
  uint64_t v22 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v22 - 8);
  unint64_t v24 = (char *)&v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  id v176 = (char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v27 = String._bridgeToObjectiveC()();
  v192.receiver = v3;
  v192.super_class = (Class)REMCDHashtag;
  [super mergeDataFromRecord:from.super.isa accountID:v27];

  id v28 = [(objc_class *)from.super.isa recordID];
  NSString v29 = [v28 recordName];

  if (!v29)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v30 = [v3 ckIdentifierFromRecordName:v29];

  if (!v30)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v30];

  uint64_t v31 = 0;
  Class v183 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  id v177 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v179 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  uint64_t v186 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v163 = (void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v185 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  uint64_t v180 = (unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v174 = (void (**)(char *, uint64_t))(v25 + 8);
  id v175 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  *(void *)&long long v32 = 136446722;
  long long v171 = v32;
  *(void *)&long long v32 = 136446466;
  long long v167 = v32;
  *(void *)&long long v32 = 136446210;
  long long v161 = v32;
  unint64_t v162 = 0x80000001007CE160;
  uint64_t v170 = (char *)&type metadata for Any + 8;
  NSString v182 = v3;
  Class isa = from.super.isa;
  uint64_t v188 = v17;
  id v184 = v24;
  while (2)
  {
    uint64_t v34 = *((unsigned __int8 *)&off_1008B5F70 + v31++ + 32);
    switch(v34)
    {
      case 1:
        id v43 = [(objc_class *)from.super.isa encryptedValues];
        NSString v44 = String._bridgeToObjectiveC()();
        id v45 = [v43 objectForKeyedSubscript:v44];
        swift_unknownObjectRelease();

        if (!v45 || (id v191 = v45, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) == 0))
        {
          if (qword_1009070A0 != -1) {
            swift_once();
          }
          uint64_t v61 = type metadata accessor for Logger();
          sub_10008E2DC(v61, (uint64_t)qword_10090F230);
          int v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            id v64 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v64 = 0;
            char v65 = v62;
            os_log_type_t v66 = v63;
            int v67 = "Hashtag does not have a name";
            goto LABEL_37;
          }
          goto LABEL_38;
        }
        NSString v46 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v3 setName:v46];

        goto LABEL_10;
      case 2:
        if (CKRecord.subscript.getter())
        {
          self;
          uint64_t v47 = (void *)swift_dynamicCastObjCClass();
          if (!v47) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          uint64_t v47 = 0;
        }
        id v70 = sub_1000C497C(v47);
        if (v70)
        {
          uint64_t v71 = v70;
          self;
          uint64_t v72 = (void *)swift_dynamicCastObjCClass();
          if (!v72) {
        }
          }
        else
        {
          uint64_t v72 = 0;
        }

        [v3 setReminder:v72];
        id v73 = [v3 reminder];
        if (!v73) {
          goto LABEL_48;
        }
        uint64_t v74 = v73;
        id v75 = [v73 remObjectID];
        if (!v75)
        {
          uint64_t v81 = *v186;
          uint64_t v80 = (uint64_t)v181;
          (*v186)(v181, 1, 1, v17);
LABEL_55:
          sub_1000966BC(v80, (uint64_t *)&unk_100909E50);
          if (qword_1009070A0 != -1) {
            swift_once();
          }
          uint64_t v95 = type metadata accessor for Logger();
          sub_10008E2DC(v95, (uint64_t)qword_10090F230);
          id v96 = v3;
          long long v97 = Logger.logObject.getter();
          int v98 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v97, (os_log_type_t)v98))
          {
            LODWORD(v169) = v98;
            uint64_t v99 = swift_slowAlloc();
            uint64_t v168 = swift_slowAlloc();
            v190[0] = v168;
            *(_DWORD *)uint64_t v99 = v167;
            id v100 = [v96 remObjectID];
            if (v100)
            {
              uint64_t v101 = v100;
              id v102 = [v100 description];

              uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v105 = v104;
            }
            else
            {
              unint64_t v105 = 0xE300000000000000;
              uint64_t v103 = 7104878;
            }
            *(void *)(v99 + 4) = sub_1000C51B8(v103, v105, v190);

            swift_bridgeObjectRelease();
            *(_WORD *)(v99 + 12) = 2082;
            id v134 = [v96 reminderIdentifier];
            if (v134)
            {
              v135 = v134;
              uint64_t v136 = (uint64_t)v166;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v137 = 0;
            }
            else
            {
              uint64_t v137 = 1;
              uint64_t v136 = (uint64_t)v166;
            }
            uint64_t v138 = v188;
            v81((char *)v136, v137, 1, v188);
            uint64_t v139 = v165;
            sub_100096408(v136, v165, (uint64_t *)&unk_100909E50);
            if ((*v183)(v139, 1, v138))
            {
              sub_1000966BC(v139, (uint64_t *)&unk_100909E50);
              unint64_t v140 = 0xE300000000000000;
              uint64_t v141 = 7104878;
            }
            else
            {
              uint64_t v142 = v178;
              (*v163)(v178, v139, v138);
              sub_1000966BC(v139, (uint64_t *)&unk_100909E50);
              uint64_t v141 = UUID.uuidString.getter();
              unint64_t v140 = v143;
              (*v177)(v142, v138);
            }
            from.super.Class isa = isa;
            unint64_t v24 = v184;
            *(void *)(v99 + 14) = sub_1000C51B8(v141, v140, v190);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v169, "REMCDHashtag+CloudKit: mergeData(from:) unexpected nil cdReminder.remObjectID when merging cdHashtag.reminder {hashtag: %{public}s, reminderIdentifier: %{public}s}", (uint8_t *)v99, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v3 = v182;
            uint64_t v17 = v188;
          }
          else
          {

            from.super.Class isa = isa;
            unint64_t v24 = v184;
          }
          goto LABEL_10;
        }
        Swift::String v76 = v75;
        id v77 = [v75 uuid];

        uint64_t v78 = v178;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v79 = *v179;
        uint64_t v80 = (uint64_t)v181;
        (*v179)(v181, v78, v17);
        uint64_t v81 = *v186;
        (*v186)((char *)v80, 0, 1, v17);
        if ((*v183)(v80, 1, v17) == 1) {
          goto LABEL_55;
        }
        uint64_t v82 = v164;
        v79(v164, (char *)v80, v17);
        Class v83 = UUID._bridgeToObjectiveC()().super.isa;
        [v3 setReminderIdentifier:v83];

        (*v177)(v82, v17);
        from.super.Class isa = isa;
        unint64_t v24 = v184;
LABEL_48:
        if (qword_1009070A0 != -1) {
          swift_once();
        }
        uint64_t v84 = type metadata accessor for Logger();
        sub_10008E2DC(v84, (uint64_t)qword_10090F230);
        id v85 = v3;
        unint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = swift_slowAlloc();
          v190[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v88 = v171;
          id v89 = [v85 remObjectID];
          if (v89)
          {
            uint64_t v90 = v89;
            id v91 = [v89 description];

            uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v94 = v93;
          }
          else
          {
            unint64_t v94 = 0xE300000000000000;
            uint64_t v92 = 7104878;
          }
          *(void *)(v88 + 4) = sub_1000C51B8(v92, v94, v190);

          swift_bridgeObjectRelease();
          *(_WORD *)(v88 + 12) = 2082;
          id v122 = [v85 reminderIdentifier];
          if (v122)
          {
            uint64_t v123 = v122;
            uint64_t v124 = (uint64_t)v173;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v125 = 0;
          }
          else
          {
            uint64_t v125 = 1;
            uint64_t v124 = (uint64_t)v173;
          }
          uint64_t v126 = v188;
          (*v186)((char *)v124, v125, 1, v188);
          uint64_t v127 = v172;
          sub_100096408(v124, v172, (uint64_t *)&unk_100909E50);
          if ((*v183)(v127, 1, v126))
          {
            sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
            unint64_t v128 = 0xE300000000000000;
            uint64_t v129 = 7104878;
          }
          else
          {
            uint64_t v130 = v178;
            (*v163)(v178, v127, v126);
            sub_1000966BC(v127, (uint64_t *)&unk_100909E50);
            uint64_t v129 = UUID.uuidString.getter();
            unint64_t v128 = v131;
            (*v177)(v130, v126);
          }
          unint64_t v24 = v184;
          *(void *)(v88 + 14) = sub_1000C51B8(v129, v128, v190);

          swift_bridgeObjectRelease();
          *(_WORD *)(v88 + 22) = 2082;
          [v85 markedForDeletion];
          uint64_t v132 = Bool.yesno.getter();
          *(void *)(v88 + 24) = sub_1000C51B8(v132, v133, v190);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from a CK reference {hashtag: %{public}s, reminderIdentifier: %{public}s, markedForDeletion: %{public}s}", (uint8_t *)v88, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v3 = v182;
          from.super.Class isa = isa;
          uint64_t v17 = v188;
        }
        else
        {
        }
        goto LABEL_10;
      case 3:
        uint64_t v48 = CKRecord.subscript.getter();
        swift_unknownObjectRelease();
        if (v48) {
          goto LABEL_10;
        }
        if ([v3 markedForDeletion])
        {
          [v3 setSharedToMeReminderCKIdentifier:0];
          if (qword_1009070A0 != -1) {
            swift_once();
          }
          uint64_t v49 = type metadata accessor for Logger();
          sub_10008E2DC(v49, (uint64_t)qword_10090F230);
          id v50 = v3;
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v51, v52)) {
            goto LABEL_70;
          }
          uint64_t v53 = swift_slowAlloc();
          v190[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = v161;
          id v54 = [v50 remObjectID];
          if (v54)
          {
            char v55 = v54;
            char v56 = from.super.isa;
            id v57 = [v54 description];

            uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v60 = v59;

            from.super.Class isa = v56;
            unint64_t v24 = v184;
          }
          else
          {
            unint64_t v60 = 0xE300000000000000;
            uint64_t v58 = 7104878;
          }
          *(void *)(v53 + 4) = sub_1000C51B8(v58, v60, v190);

          swift_bridgeObjectRelease();
          os_log_type_t v144 = v52;
          uint64_t v145 = v51;
          uint64_t v146 = "REMCDHashtag+CloudKit: mergeData(from:) hashtag is markedForDeletion so we should not try to merge Shar"
                 "edToMeReminderCKIdentifier {hashtag: %{public}s}";
LABEL_98:
          _os_log_impl((void *)&_mh_execute_header, v145, v144, v146, (uint8_t *)v53, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v3 = v182;
          goto LABEL_99;
        }
        id v106 = [(objc_class *)from.super.isa encryptedValues];
        NSString v107 = String._bridgeToObjectiveC()();
        id v108 = [v106 objectForKeyedSubscript:v107];
        swift_unknownObjectRelease();

        if (!v108 || (id v191 = v108, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) == 0))
        {
          if (qword_1009070A0 != -1) {
            swift_once();
          }
          uint64_t v113 = type metadata accessor for Logger();
          sub_10008E2DC(v113, (uint64_t)qword_10090F230);
          id v50 = v3;
          uint64_t v51 = Logger.logObject.getter();
          os_log_type_t v114 = static os_log_type_t.fault.getter();
          BOOL v115 = os_log_type_enabled(v51, v114);
          from.super.Class isa = isa;
          if (!v115)
          {
LABEL_70:

            goto LABEL_10;
          }
          uint64_t v53 = swift_slowAlloc();
          v190[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = v161;
          id v116 = [v50 remObjectID];
          if (v116)
          {
            uint64_t v117 = v116;
            id v118 = [v116 description];

            uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v121 = v120;

            from.super.Class isa = isa;
          }
          else
          {
            unint64_t v121 = 0xE300000000000000;
            uint64_t v119 = 7104878;
          }
          *(void *)(v53 + 4) = sub_1000C51B8(v119, v121, v190);

          swift_bridgeObjectRelease();
          os_log_type_t v144 = v114;
          uint64_t v145 = v51;
          uint64_t v146 = "REMCDHashtag+CloudKit: mergeData(from:) unexpected nil record['SharedToMeReminderCKIdentifier'] when re"
                 "cord['Reminder'] is nil and hashtag not markedForDeletion, the former must present otherwise we have no"
                 " way to associate the tag to the reminder {hashtag: %{public}s}";
          goto LABEL_98;
        }
        uint64_t v110 = v190[0];
        unint64_t v109 = v190[1];
        char v111 = v160;
        UUID.init(uuidString:)();
        if ((*v183)((uint64_t)v111, 1, v17) == 1)
        {
          Class v112 = 0;
        }
        else
        {
          Class v112 = UUID._bridgeToObjectiveC()().super.isa;
          (*v177)(v111, v17);
        }
        from.super.Class isa = isa;
        [v3 setReminderIdentifier:v112];

        NSString v147 = String._bridgeToObjectiveC()();
        [v3 setSharedToMeReminderCKIdentifier:v147];

        if (qword_1009070A0 != -1) {
          swift_once();
        }
        uint64_t v148 = type metadata accessor for Logger();
        sub_10008E2DC(v148, (uint64_t)qword_10090F230);
        id v149 = v3;
        swift_bridgeObjectRetain();
        uint64_t v150 = Logger.logObject.getter();
        os_log_type_t v151 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v150, v151))
        {

          swift_bridgeObjectRelease_n();
LABEL_99:
          uint64_t v17 = v188;
          goto LABEL_10;
        }
        uint64_t v169 = v110;
        uint64_t v152 = swift_slowAlloc();
        v190[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v152 = v167;
        id v153 = [v149 remObjectID];
        if (v153)
        {
          id v154 = v153;
          id v155 = [v153 description];

          uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v158 = v157;
        }
        else
        {
          unint64_t v158 = 0xE300000000000000;
          uint64_t v156 = 7104878;
        }
        *(void *)(v152 + 4) = sub_1000C51B8(v156, v158, v190);

        swift_bridgeObjectRelease();
        *(_WORD *)(v152 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(void *)(v152 + 14) = sub_1000C51B8(v169, v109, v190);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from SharedToMeReminderCKIdentifier {hashtag: %{public}s, sharedToMeReminderCKIdentifier: %{public}s}", (uint8_t *)v152, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v3 = v182;
        from.super.Class isa = isa;
        uint64_t v17 = v188;
        unint64_t v24 = v184;
LABEL_10:
        if (v31 != 5) {
          continue;
        }
        return;
      case 4:
        sub_10012451C();
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v190[0])) {
          __int16 v33 = 0;
        }
        else {
          __int16 v33 = v190[0];
        }
        [v3 setType:v33];
        goto LABEL_10;
      default:
        uint64_t v35 = CKRecord.subscript.getter();
        if (v35)
        {
          v190[0] = v35;
          sub_100094134(&qword_100909AB0);
          uint64_t v36 = v189;
          int v37 = swift_dynamicCast();
          (*v185)(v24, v37 ^ 1u, 1, v36);
          if ((*v180)(v24, 1, v36) != 1)
          {
            id v38 = v176;
            uint64_t v39 = from.super.isa;
            uint64_t v40 = v189;
            (*v175)(v176, v24, v189);
            Class v41 = Date._bridgeToObjectiveC()().super.isa;
            [v3 setCreationDate:v41];

            uint64_t v42 = v40;
            from.super.Class isa = v39;
            (*v174)(v38, v42);
            goto LABEL_10;
          }
        }
        else
        {
          (*v185)(v24, 1, 1, v189);
        }
        sub_1000966BC((uint64_t)v24, (uint64_t *)&unk_100909A40);
        if (qword_1009070A0 != -1) {
          swift_once();
        }
        uint64_t v68 = type metadata accessor for Logger();
        sub_10008E2DC(v68, (uint64_t)qword_10090F230);
        int v62 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v62, v69))
        {
          id v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v64 = 0;
          char v65 = v62;
          os_log_type_t v66 = v69;
          int v67 = "Hashtag does not have creation date";
LABEL_37:
          _os_log_impl((void *)&_mh_execute_header, v65, v66, v67, v64, 2u);
          swift_slowDealloc();
        }
LABEL_38:

        goto LABEL_10;
    }
  }
}

CKRecord_optional __swiftcall REMCDHashtag.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v167 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v167 - 8);
  __chkstk_darwin(v167);
  unint64_t v158 = (char *)&v153 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v153 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v166 = (uint64_t)&v153 - v8;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v153 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v13 = __chkstk_darwin(v12).n128_u64[0];
  uint64_t v15 = (char *)&v153 - v14;
  v176.receiver = v1;
  v176.super_class = (Class)REMCDHashtag;
  id v16 = [super newlyCreatedRecord:v13];
  id v19 = v16;
  if (v16)
  {
    uint64_t v20 = 0;
    uint64_t v164 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    uint64_t v165 = v6;
    uint64_t v163 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    uint64_t v156 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    id v155 = (void (**)(char *, uint64_t))(v2 + 8);
    *(void *)&long long v18 = 136446210;
    long long v159 = v18;
    id v154 = (char *)&type metadata for Any + 8;
    *(void *)&long long v18 = 136446722;
    long long v162 = v18;
    *(void *)&long long v18 = 136446466;
    long long v153 = v18;
    *(void *)&long long v18 = 136446978;
    long long v161 = v18;
    uint64_t v160 = "account.identifier";
    unint64_t v157 = 0x80000001007CE160;
    uint64_t v169 = v11;
    uint64_t v170 = v1;
    uint64_t v168 = v15;
    id v172 = v16;
    while (1)
    {
      uint64_t v21 = *((unsigned __int8 *)&off_1008B5F98 + v20++ + 32);
      switch(v21)
      {
        case 1:
          id v25 = [v19 encryptedValues];
          id v26 = [v1 name];
          if (v26)
          {
            NSString v27 = v26;
            uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v30 = v29;

            *((void *)&v174 + 1) = &type metadata for String;
            id v175 = &protocol witness table for String;
            *(void *)&long long v173 = v28;
            *((void *)&v173 + 1) = v30;
          }
          else
          {
            id v175 = 0;
            long long v173 = 0u;
            long long v174 = 0u;
          }
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          goto LABEL_5;
        case 2:
          id v31 = [v1 reminder];
          if (v31)
          {
            long long v32 = v31;
            unsigned int v33 = [v31 isOwnedByCurrentUser];
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v34 = type metadata accessor for Logger();
            sub_10008E2DC(v34, (uint64_t)qword_10090F230);
            id v35 = v1;
            id v36 = v32;
            id v37 = v35;
            id v38 = v36;
            uint64_t v39 = Logger.logObject.getter();
            os_log_type_t v40 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v39, v40))
            {
              uint64_t v41 = swift_slowAlloc();
              *(void *)&long long v173 = swift_slowAlloc();
              *(_DWORD *)uint64_t v41 = v162;
              unsigned int v171 = v33;
              uint64_t v42 = Bool.yesno.getter();
              *(void *)(v41 + 4) = sub_1000C51B8(v42, v43, (uint64_t *)&v173);
              swift_bridgeObjectRelease();
              *(_WORD *)(v41 + 12) = 2082;
              id v44 = [v37 remObjectID];
              if (v44)
              {
                id v45 = v44;
                id v46 = [v44 description];

                uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v49 = v48;
              }
              else
              {
                unint64_t v49 = 0xE300000000000000;
                uint64_t v47 = 7104878;
              }
              *(void *)(v41 + 14) = sub_1000C51B8(v47, v49, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              *(_WORD *)(v41 + 22) = 2082;
              id v117 = [v38 remObjectID];
              if (v117)
              {
                id v118 = v117;
                id v119 = [v117 description];

                uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v122 = v121;
              }
              else
              {
                unint64_t v122 = 0xE300000000000000;
                uint64_t v120 = 7104878;
              }
              unsigned int v33 = v171;
              *(void *)(v41 + 24) = sub_1000C51B8(v120, v122, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v39, v40, "REMCDHashtag+CloudKit: newlyCreatedRecord() will set up a CK reference only if the tag was created by the owner {owner?: %{public}s, hashtag: %{public}s, reminder: %{public}s}", (uint8_t *)v41, 0x20u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v11 = v169;
              uint64_t v1 = v170;
              uint64_t v15 = v168;
            }
            else
            {
            }
            if (!v33)
            {

              goto LABEL_4;
            }
            id v129 = [v38 recordID];
            id v130 = [v37 cloudKitReferenceWithRecordIDAndValidateAction:v129];

            id v19 = v172;
            CKRecord.subscript.setter();
          }
          else if ([v1 markedForDeletion])
          {
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v74 = type metadata accessor for Logger();
            sub_10008E2DC(v74, (uint64_t)qword_10090F230);
            id v75 = v1;
            Swift::String v76 = Logger.logObject.getter();
            os_log_type_t v77 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v76, v77))
            {
              uint64_t v78 = swift_slowAlloc();
              *(void *)&long long v173 = swift_slowAlloc();
              *(_DWORD *)uint64_t v78 = v159;
              id v79 = [v75 remObjectID];
              if (v79)
              {
                uint64_t v80 = v79;
                id v81 = [v79 description];

                uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v84 = v83;
              }
              else
              {
                unint64_t v84 = 0xE300000000000000;
                uint64_t v82 = 7104878;
              }
              *(void *)(v78 + 4) = sub_1000C51B8(v82, v84, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v76, v77, "REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.reminder) unsetting reminder CK reference as the hashtag is markedForDeletion and no longer connected to its reminder {hashtag: %{public}s}", (uint8_t *)v78, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v11 = v169;
              uint64_t v1 = v170;
              uint64_t v15 = v168;
            }
            else
            {
            }
            CKRecord.subscript.setter();
          }
          else
          {
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v96 = type metadata accessor for Logger();
            sub_10008E2DC(v96, (uint64_t)qword_10090F230);
            id v97 = v1;
            int v98 = Logger.logObject.getter();
            os_log_type_t v99 = static os_log_type_t.fault.getter();
            if (!os_log_type_enabled(v98, v99))
            {

              goto LABEL_81;
            }
            uint64_t v100 = swift_slowAlloc();
            *(void *)&long long v173 = swift_slowAlloc();
            *(_DWORD *)uint64_t v100 = v159;
            id v101 = [v97 remObjectID];
            if (v101)
            {
              id v102 = v101;
              id v103 = [v101 description];

              uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v106 = v105;
            }
            else
            {
              unint64_t v106 = 0xE300000000000000;
              uint64_t v104 = 7104878;
            }
            *(void *)(v100 + 4) = sub_1000C51B8(v104, v106, (uint64_t *)&v173);

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v98, v99, "REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil for a hashtag not marked for deletion in newlyCreatedRecord() (key=.reminder) {hashtag: %{public}s}", (uint8_t *)v100, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v11 = v169;
            uint64_t v1 = v170;
            uint64_t v15 = v168;
          }
          goto LABEL_5;
        case 3:
          id v50 = [v1 reminder];
          if (v50)
          {
            uint64_t v51 = v50;
            unsigned int v171 = [v50 isOwnedByCurrentUser];
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v52 = type metadata accessor for Logger();
            sub_10008E2DC(v52, (uint64_t)qword_10090F230);
            id v53 = v51;
            id v54 = v1;
            id v55 = v53;
            id v56 = v54;
            id v57 = v55;
            uint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v58, v59))
            {
              uint64_t v60 = swift_slowAlloc();
              *(void *)&long long v173 = swift_slowAlloc();
              *(_DWORD *)uint64_t v60 = v161;
              uint64_t v61 = Bool.yesno.getter();
              *(void *)(v60 + 4) = sub_1000C51B8(v61, v62, (uint64_t *)&v173);
              swift_bridgeObjectRelease();
              *(_WORD *)(v60 + 12) = 2082;
              [v57 isSharedViaICloud];
              uint64_t v63 = Bool.yesno.getter();
              *(void *)(v60 + 14) = sub_1000C51B8(v63, v64, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              *(_WORD *)(v60 + 22) = 2082;
              id v65 = [v56 remObjectID];
              if (v65)
              {
                os_log_type_t v66 = v65;
                id v67 = [v65 description];

                uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v70 = v69;
              }
              else
              {
                unint64_t v70 = 0xE300000000000000;
                uint64_t v68 = 7104878;
              }
              *(void *)(v60 + 24) = sub_1000C51B8(v68, v70, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              *(_WORD *)(v60 + 32) = 2082;
              id v123 = [v57 remObjectID];
              if (v123)
              {
                uint64_t v124 = v123;
                id v125 = [v123 description];

                uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v128 = v127;
              }
              else
              {
                unint64_t v128 = 0xE300000000000000;
                uint64_t v126 = 7104878;
              }
              *(void *)(v60 + 34) = sub_1000C51B8(v126, v128, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "REMCDHashtag+CloudKit: newlyCreatedRecord() will write to SharedToMeReminderCKIdentifier only if the tag was created by a participant {owner?: %{public}s, isShared?: %{public}s, hashtag: %{public}s, reminder: %{public}s}", (uint8_t *)v60, 0x2Au);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v11 = v169;
              uint64_t v1 = v170;
              uint64_t v15 = v168;
            }
            else
            {
            }
            if (v171)
            {

LABEL_4:
              id v19 = v172;
            }
            else
            {
              [v172 encryptedValues];
              id v131 = [v56 reminderIdentifier];
              if (v131)
              {
                uint64_t v132 = v131;
                uint64_t v133 = (uint64_t)v165;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v134 = 0;
              }
              else
              {
                uint64_t v134 = 1;
                uint64_t v133 = (uint64_t)v165;
              }
              uint64_t v135 = v167;
              (*v164)(v133, v134, 1, v167);
              uint64_t v136 = v166;
              sub_100096408(v133, v166, (uint64_t *)&unk_100909E50);
              if ((*v163)(v136, 1, v135))
              {
                sub_1000966BC(v136, (uint64_t *)&unk_100909E50);
                long long v173 = 0u;
                long long v174 = 0u;
                id v175 = 0;
              }
              else
              {
                uint64_t v137 = v158;
                (*v156)(v158, v136, v135);
                sub_1000966BC(v136, (uint64_t *)&unk_100909E50);
                uint64_t v138 = v135;
                uint64_t v139 = UUID.uuidString.getter();
                uint64_t v141 = v140;
                (*v155)(v137, v138);
                *((void *)&v174 + 1) = &type metadata for String;
                id v175 = &protocol witness table for String;
                *(void *)&long long v173 = v139;
                *((void *)&v173 + 1) = v141;
              }
              swift_getObjectType();
              CKRecordKeyValueSetting.subscript.setter();

              swift_unknownObjectRelease();
              id v19 = v172;
            }
          }
          else if ([v1 markedForDeletion])
          {
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v85 = type metadata accessor for Logger();
            sub_10008E2DC(v85, (uint64_t)qword_10090F230);
            id v86 = v1;
            os_log_type_t v87 = Logger.logObject.getter();
            os_log_type_t v88 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v87, v88))
            {
              uint64_t v89 = swift_slowAlloc();
              *(void *)&long long v173 = swift_slowAlloc();
              *(_DWORD *)uint64_t v89 = v159;
              id v90 = [v86 remObjectID];
              if (v90)
              {
                id v91 = v90;
                id v92 = [v90 description];

                uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v95 = v94;
              }
              else
              {
                unint64_t v95 = 0xE300000000000000;
                uint64_t v93 = 7104878;
              }
              *(void *)(v89 + 4) = sub_1000C51B8(v93, v95, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) unsetting SharedToMeReminderCKIdentifier as the hashtag is markedForDeletion and no longer connected to its reminder {hashtag: %{public}s}", (uint8_t *)v89, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v11 = v169;
              uint64_t v1 = v170;
              uint64_t v15 = v168;
            }
            else
            {
            }
            id v142 = [v19 encryptedValues:v153];
            NSString v143 = String._bridgeToObjectiveC()();
            [v142 setObject:0 forKeyedSubscript:v143];
            swift_unknownObjectRelease();
          }
          else
          {
            if (qword_1009070A0 != -1) {
              swift_once();
            }
            uint64_t v107 = type metadata accessor for Logger();
            sub_10008E2DC(v107, (uint64_t)qword_10090F230);
            id v97 = v1;
            id v108 = Logger.logObject.getter();
            os_log_type_t v109 = static os_log_type_t.fault.getter();
            if (os_log_type_enabled(v108, v109))
            {
              uint64_t v110 = swift_slowAlloc();
              *(void *)&long long v173 = swift_slowAlloc();
              *(_DWORD *)uint64_t v110 = v153;
              id v111 = [v97 remObjectID];
              if (v111)
              {
                Class v112 = v111;
                id v113 = [v111 description];

                uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v116 = v115;
              }
              else
              {
                unint64_t v116 = 0xE300000000000000;
                uint64_t v114 = 7104878;
              }
              *(void *)(v110 + 4) = sub_1000C51B8(v114, v116, (uint64_t *)&v173);

              swift_bridgeObjectRelease();
              *(_WORD *)(v110 + 12) = 2082;
              id v144 = [v97 reminder];
              if (v144)
              {
                uint64_t v145 = v144;
                id v146 = [v144 remObjectID];
                if (v146)
                {
                  NSString v147 = v146;
                  id v148 = [v146 description];

                  uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v151 = v150;

LABEL_96:
                  *(void *)(v110 + 14) = sub_1000C51B8(v149, v151, (uint64_t *)&v173);

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v108, v109, "REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil for a hashtag not marked for deletion in newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) {hashtag: %{public}s, reminder: %{public}s}", (uint8_t *)v110, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  uint64_t v11 = v169;
                  uint64_t v1 = v170;
                  uint64_t v15 = v168;
                  id v19 = v172;
                  goto LABEL_5;
                }
              }
              unint64_t v151 = 0xE300000000000000;
              uint64_t v149 = 7104878;
              goto LABEL_96;
            }

LABEL_81:
          }
LABEL_5:
          if (v20 == 5) {
            goto LABEL_97;
          }
          break;
        case 4:
          unsigned __int16 v71 = (unsigned __int16)[v1 type];
          *((void *)&v174 + 1) = &type metadata for Int16;
          id v175 = &protocol witness table for Int16;
          LOWORD(v173) = v71;
          sub_10012451C();
          goto LABEL_29;
        default:
          id v22 = [v1 creationDate];
          if (v22)
          {
            uint64_t v23 = v22;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v24 = type metadata accessor for Date();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 0, 1, v24);
          }
          else
          {
            uint64_t v24 = type metadata accessor for Date();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 1, 1, v24);
          }
          sub_100096408((uint64_t)v11, (uint64_t)v15, (uint64_t *)&unk_100909A40);
          type metadata accessor for Date();
          uint64_t v72 = *(void *)(v24 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v15, 1, v24) == 1)
          {
            sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909A40);
            long long v173 = 0u;
            long long v174 = 0u;
            id v175 = 0;
          }
          else
          {
            *((void *)&v174 + 1) = v24;
            id v175 = &protocol witness table for Date;
            id v73 = sub_1000C1FE8((uint64_t *)&v173);
            (*(void (**)(uint64_t *, char *, uint64_t))(v72 + 32))(v73, v15, v24);
          }
          sub_10012451C();
LABEL_29:
          CKRecordKeyValueSetting.subscript.setter();
          goto LABEL_5;
      }
    }
  }
LABEL_97:
  uint64_t v152 = (objc_class *)v19;
  result.value.super.Class isa = v152;
  result.is_nil = v17;
  return result;
}

Swift::Void __swiftcall REMCDHashtag.fixBrokenReferences()()
{
  if (qword_1009070A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090F230);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12) = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  id v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for hashtag {hashtagID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    uint64_t v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          long long v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          id v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reminder is marked for deletion but hashtag is not {hashtagID: %{public}s, reminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

Swift::Void __swiftcall REMCDHashtag.cleanUpAfterLocalObjectMerge()()
{
  if (qword_1009070A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090F230);
  id v7 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090F248);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t _sSo12REMCDHashtagC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_1009070A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090F230);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090F248);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo12REMCDHashtagC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_1009070A0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090F230);
  id v2 = v0;
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_10090F248);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_1001D1A10()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F250);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F250);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  os_log_type_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Class sub_1001D1AD8(void *a1)
{
  return sub_1001D1AF0(a1, (SEL *)&selRef_suggestedAttributesTrainingOverrides);
}

Class sub_1001D1AE4(void *a1)
{
  return sub_1001D1AF0(a1, (SEL *)&selRef_suggestedAttributesHarvestingOverrides);
}

Class sub_1001D1AF0(void *a1, SEL *a2)
{
  Class isa = (Class)[a1 *a2];
  if (isa)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  return isa;
}

id sub_1001D1B90(void *a1, uint64_t a2, void *a3)
{
  os_log_type_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_10090F360);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = v4;
  uint64_t v39 = v13;
  uint64_t v40 = v12;
  unint64_t v41 = (objc_class *)ObjectType;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    id v17 = (void *)sub_10033121C((unint64_t)_swiftEmptyArrayStorage);
  }
  else {
    id v17 = &_swiftEmptySetSingleton;
  }
  *(void *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cancellables] = v17;
  *(void *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedList] = 0;
  uint64_t v18 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedEditingSessionID];
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  unint64_t v20 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels];
  *(_OWORD *)unint64_t v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((void *)v20 + 4) = 0;
  *((void *)v20 + 5) = 255;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *(_OWORD *)(v20 + 73) = 0u;
  *(void *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedContacts] = _swiftEmptyDictionarySingleton;
  uint64_t v21 = OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_contactStore;
  *(void *)&v16[v21] = [objc_allocWithZone((Class)CNContactStore) init];
  id v22 = a3;
  *(void *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue] = a3;
  *(void *)&v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_storePerformer] = a1;
  uint64_t v23 = *(void **)(a2 + 8);
  id v24 = *(void **)(a2 + 24);
  id v25 = a1;
  id v26 = *(void **)(a2 + 40);
  id v27 = *(void **)(a2 + 56);
  uint64_t v28 = &v16[OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource];
  long long v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)a2;
  *((_OWORD *)v28 + 1) = v29;
  long long v30 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v28 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v28 + 3) = v30;
  id v31 = v22;
  v38[0] = v25;
  v38[4] = v23;
  swift_retain();
  void v38[3] = v24;
  swift_retain();
  v38[2] = v26;
  swift_retain();
  v38[1] = v27;
  swift_retain();

  v44.receiver = v16;
  v44.super_class = v41;
  id v32 = [super init];
  uint64_t v33 = qword_1009070B0;
  id v34 = v32;
  if (v33 != -1) {
    swift_once();
  }
  uint64_t v42 = qword_10090F268;
  id v43 = v31;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v11, 1, 1, v35);
  swift_retain();
  sub_100094134(&qword_10090F368);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4((unint64_t *)&unk_10090F378, &qword_10090F368);
  sub_1000E4F40((unint64_t *)&qword_10090D990, (unint64_t *)&qword_10090F370);
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v11, (uint64_t *)&unk_1009081C0);
  swift_release();
  sub_1000967F4(&qword_10090F388, &qword_10090F360);
  uint64_t v36 = v40;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v36);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return v34;
}

uint64_t sub_1001D20A0()
{
  return sub_1001D20C4();
}

uint64_t sub_1001D20C4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void *)((char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  uint64_t v1 = v0 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels;
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 40) != 0xFF)
  {
    uint64_t v8 = *(void *)(v1 + 80);
    char v9 = *(unsigned char *)(v1 + 88);
    v15[1] = v8;
    char v16 = v9;
    sub_1001D448C(v8, v9);
    sub_100094134(&qword_10090F398);
    Result<>.tryMap<A>(transform:)();
    sub_1001D44F8(v8, v9);
    sub_1000CD9D0(*(uint64_t *)&v17[0], SBYTE8(v17[0]));
  }
  if (qword_1009070A8 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090F250);
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "SuggestedAttributesPerformer.cachedMLModels invalidating cache", v13, 2u);
    swift_slowDealloc();
  }

  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  uint64_t v19 = 255;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  swift_beginAccess();
  sub_1001D4B04((uint64_t)v17, v1);
  return swift_endAccess();
}

id sub_1001D236C()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (qword_1009070A8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_10090F250);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Deallocating SuggestedAttributesPerformer", v6, 2u);
    swift_slowDealloc();
  }

  v8.receiver = v1;
  v8.super_class = ObjectType;
  return [super dealloc];
}

uint64_t sub_1001D2684()
{
  return type metadata accessor for RDXPCSuggestedAttributesPerformer();
}

uint64_t type metadata accessor for RDXPCSuggestedAttributesPerformer()
{
  uint64_t result = qword_10090F338;
  if (!qword_10090F338) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D26D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = (void *)((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    if (qword_1009070A8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10090F250);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Prewarming models", v12, 2u);
    swift_slowDealloc();
  }

  sub_1001D28B8(v14);
  return sub_1001D4B6C((uint64_t)v14);
}

double sub_1001D28B8@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __n128 v5 = __chkstk_darwin(v3);
  id v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = *(void **)(v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_queue);
  *id v7 = v8;
  (*(void (**)(void *, void, uint64_t, __n128))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3, v5);
  id v9 = v8;
  uint64_t v10 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
LABEL_4:
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_10090F250);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      char v16 = "SuggestedAttributesPerformer.cachedMLModels cache miss, loaded and set cache";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
      swift_slowDealloc();
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  uint64_t v10 = (uint64_t)&v26;
  uint64_t v11 = v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedMLModels;
  swift_beginAccess();
  sub_1000BF710(v11, (uint64_t)v22, &qword_10090F390);
  if (BYTE8(v23) == 0xFF)
  {
    sub_1000966BC((uint64_t)v22, &qword_10090F390);
    sub_1001D2DC4((uint64_t)&v26);
    sub_1001D4B9C((uint64_t *)&v26, (uint64_t)v22);
    swift_beginAccess();
    sub_1001D4B04((uint64_t)v22, v11);
    swift_endAccess();
    if (qword_1009070A8 == -1) {
      goto LABEL_4;
    }
    goto LABEL_13;
  }
  long long v28 = v23;
  long long v29 = v24;
  v30[0] = v25[0];
  *(_OWORD *)((char *)v30 + 9) = *(_OWORD *)((char *)v25 + 9);
  long long v26 = v22[0];
  long long v27 = v22[1];
  if (qword_1009070A8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090F250);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v15 = 0;
    char v16 = "SuggestedAttributesPerformer.cachedMLModels cache hit";
    goto LABEL_10;
  }
LABEL_11:

  long long v18 = v29;
  a1[2] = v28;
  a1[3] = v18;
  a1[4] = v30[0];
  *(_OWORD *)((char *)a1 + 73) = *(_OWORD *)(v10 + 73);
  double result = *(double *)&v26;
  long long v20 = v27;
  *a1 = v26;
  a1[1] = v20;
  return result;
}

uint64_t sub_1001D2DC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v59 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v8 = (char *)&v57 - v7;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v57 - v10;
  sub_1000963CC(0, (unint64_t *)&qword_10090F3A0);
  static REMPaths.mlModelURL()();
  os_log_type_t v66 = v11;
  sub_1001D3B64(v11, (uint64_t *)&v67);
  char v69 = 0;
  sub_100096408((uint64_t)&v67, (uint64_t)&v71, (uint64_t *)&unk_10090F350);
  sub_100096408((uint64_t)&v71, (uint64_t)v75, (uint64_t *)&unk_10090F350);
  uint64_t v60 = v4;
  uint64_t v61 = v3;
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  uint64_t v13 = v66;
  uint64_t v57 = v4 + 16;
  uint64_t v58 = v12;
  v12(v8, v66, v3);
  type metadata accessor for REMkNNByTitleEmbedding();
  swift_allocObject();
  uint64_t v14 = REMkNNByTitleEmbedding.init(from:with:)();
  uint64_t v62 = 0;
  uint64_t v65 = v14;
  __chkstk_darwin(v14);
  *(&v57 - 2) = (uint64_t)v13;
  sub_100094134((uint64_t *)&unk_10090F350);
  type metadata accessor for RDIntentClusterModel();
  uint64_t v15 = Result<>.tryMap<A>(transform:)();
  uint64_t v63 = v73;
  int v64 = v74;
  uint64_t v16 = v1 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v1
                                           + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_configurationSource
                                           + 48))(v15);
  if (!v17)
  {
    long long v71 = 0u;
    long long v72 = 0u;
LABEL_11:
    uint64_t v21 = sub_1000966BC((uint64_t)&v71, &qword_100908190);
    goto LABEL_12;
  }
  long long v18 = (void *)v17;
  NSString v19 = String._bridgeToObjectiveC()();
  id v20 = [v18 valueForKey:v19];

  if (v20)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  sub_100096408((uint64_t)&v67, (uint64_t)&v71, &qword_100908190);
  if (!*((void *)&v72 + 1)) {
    goto LABEL_11;
  }
  sub_100094134(&qword_10090F3B0);
  uint64_t v21 = swift_dynamicCast();
  if ((v21 & 1) == 0)
  {
LABEL_12:
    uint64_t v26 = 0;
    uint64_t v25 = 0;
    char v27 = 1;
    char v28 = 1;
    goto LABEL_13;
  }
  uint64_t v22 = v67;
  if (*(void *)(v67 + 16))
  {
    unint64_t v23 = sub_1001806F8(0x65766974616C6572, 0xEF74726F70707553);
    if (v24) {
      uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    }
    else {
      uint64_t v25 = 0;
    }
    char v28 = v24 ^ 1;
    if (*(void *)(v22 + 16))
    {
      unint64_t v37 = sub_1001806F8(0x6E656469666E6F63, 0xEA00000000006563);
      if (v38)
      {
        uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v37);
        uint64_t v21 = swift_bridgeObjectRelease();
        char v27 = 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v25 = 0;
    char v28 = 1;
  }
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v26 = 0;
  char v27 = 1;
LABEL_13:
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(v16 + 32))(v21);
  if (!v29)
  {
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v33 = v61;
LABEL_23:
    sub_1000966BC((uint64_t)&v71, &qword_100908190);
    goto LABEL_36;
  }
  long long v30 = (void *)v29;
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [v30 valueForKey:v31];

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  uint64_t v33 = v61;
  sub_100096408((uint64_t)&v67, (uint64_t)&v71, &qword_100908190);
  if (!*((void *)&v72 + 1)) {
    goto LABEL_23;
  }
  sub_100094134(&qword_10090F3B0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v34 = v67;
  if (*(void *)(v67 + 16))
  {
    unint64_t v35 = sub_1001806F8(0x65766974616C6572, 0xEF74726F70707553);
    if (v36) {
      uint64_t v25 = *(void *)(*(void *)(v34 + 56) + 8 * v35);
    }
    else {
      uint64_t v25 = 0;
    }
    char v28 = v36 ^ 1;
    if (*(void *)(v34 + 16))
    {
      unint64_t v39 = sub_1001806F8(0x6E656469666E6F63, 0xEA00000000006563);
      if (v40)
      {
        uint64_t v26 = *(void *)(*(void *)(v34 + 56) + 8 * v39);
        swift_bridgeObjectRelease();
        char v27 = 0;
        goto LABEL_36;
      }
    }
  }
  else
  {
    uint64_t v25 = 0;
    char v28 = 1;
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = 0;
  char v27 = 1;
LABEL_36:
  char v41 = v62 != 0;
  uint64_t v42 = (uint64_t)v59;
  v58(v59, v66, v33);
  type metadata accessor for RDCoreBehaviorModel(0);
  swift_allocObject();
  id v43 = sub_1004AD008(v42, v25, v28 & 1, v26, v27);
  sub_1000BF710((uint64_t)v75, a1, (uint64_t *)&unk_10090F350);
  uint64_t v44 = v65;
  *(void *)(a1 + 48) = v65;
  *(unsigned char *)(a1 + 56) = v41;
  uint64_t v45 = v63;
  *(void *)(a1 + 64) = v63;
  char v46 = v64;
  *(unsigned char *)(a1 + 72) = v64;
  *(void *)(a1 + 80) = v43;
  *(unsigned char *)(a1 + 88) = 0;
  sub_1001D448C(v44, v41);
  sub_1001D448C(v45, v46);
  sub_1001D448C((uint64_t)v43, 0);
  if (qword_1009070A8 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_10008E2DC(v47, (uint64_t)qword_10090F250);
  sub_1001D4B9C((uint64_t *)a1, (uint64_t)&v71);
  unint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    LODWORD(v59) = 0;
    LODWORD(v62) = v62 != 0;
    id v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)id v50 = 136446210;
    sub_1001D4B9C((uint64_t *)&v71, (uint64_t)&v67);
    uint64_t v51 = String.init<A>(describing:)();
    *(void *)&long long v67 = sub_1000C51B8(v51, v52, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D4B6C((uint64_t)&v71);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Loaded MLModels {models: %{public}s}", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_1001D44F8((uint64_t)v43, (char)v59);
    sub_1001D44F8(v63, v64);
    uint64_t v53 = v65;
    char v54 = v62;
  }
  else
  {
    BOOL v55 = v62 != 0;

    sub_1001D4B6C((uint64_t)&v71);
    sub_1001D44F8((uint64_t)v43, 0);
    sub_1001D44F8(v63, v64);
    uint64_t v53 = v65;
    char v54 = v55;
  }
  sub_1001D44F8(v53, v54);
  sub_1000966BC((uint64_t)v75, (uint64_t *)&unk_10090F350);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v66, v61);
}

uint64_t sub_1001D3648(unint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v57 = (uint64_t)_swiftEmptyDictionarySingleton;
  uint64_t v2 = (void *)(a1 >> 62);
  if (a1 >> 62) {
    goto LABEL_47;
  }
  Swift::Int v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  sub_100094134(&qword_10090F3D0);
  Dictionary.reserveCapacity(_:)(v3);
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10077DE90;
  *(void *)(v4 + 32) = [self descriptorForRequiredKeysForStyle:0];
  *(void *)(v4 + 40) = CNContactPhoneNumbersKey;
  *(void *)(v4 + 48) = CNContactEmailAddressesKey;
  specialized Array._endMutation()();
  if (v2)
  {
    swift_bridgeObjectRetain();
    id v8 = CNContactPhoneNumbersKey;
    uint64_t v9 = CNContactEmailAddressesKey;
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5)
    {
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v57;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v6 = CNContactPhoneNumbersKey;
    uint64_t v7 = CNContactEmailAddressesKey;
    if (!v5) {
      goto LABEL_43;
    }
  }
  if (v5 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (uint64_t *)(v55 + OBJC_IVAR____TtC7remindd33RDXPCSuggestedAttributesPerformer_cachedContacts);
    uint64_t v54 = v1;
    unint64_t v12 = v1 & 0xC000000000000001;
    uint64_t v13 = &selRef_willSave;
    unint64_t v52 = v1 & 0xC000000000000001;
    uint64_t v53 = v5;
    while (1)
    {
      if (v12) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = *(id *)(v1 + 8 * v10 + 32);
      }
      uint64_t v15 = v14;
      id v16 = [v14 v13[133]];
      if (!v16
        || (uint64_t v17 = v16,
            static String._unconditionallyBridgeFromObjectiveC(_:)(),
            v17,
            sub_1000963CC(0, (unint64_t *)&unk_10090D5F0),
            (uint64_t v18 = REMContactRepresentation.init(address:)()) == 0))
      {

        goto LABEL_10;
      }
      uint64_t v2 = (void *)v18;
      swift_beginAccess();
      uint64_t v19 = *v11;
      if (*(void *)(*v11 + 16))
      {
        id v20 = v2;
        unint64_t v21 = sub_10030763C((uint64_t)v20);
        if (v22)
        {
          unint64_t v23 = *(void **)(*(void *)(v19 + 56) + 8 * v21);
          swift_endAccess();
          id v24 = v23;

          if (v23) {
            goto LABEL_23;
          }

          uint64_t v13 = &selRef_willSave;
          goto LABEL_10;
        }
      }
      swift_endAccess();
      uint64_t v25 = CNContactStore.contact(matching:keysToFetch:)();
      if (v25)
      {
        uint64_t v26 = (void *)v25;
        swift_beginAccess();
        id v24 = v26;
        id v27 = v2;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = *v11;
        *uint64_t v11 = 0x8000000000000000;
        sub_1002C5804((uint64_t)v26, v27, isUniquelyReferenced_nonNull_native);
        *uint64_t v11 = v56;

        swift_bridgeObjectRelease();
        swift_endAccess();
LABEL_23:
        id v29 = v24;
        uint64_t v1 = (uint64_t)[v15 objectID];
        long long v30 = (void *)v57;
        if ((v57 & 0xC000000000000001) != 0)
        {
          if (v57 < 0) {
            uint64_t v31 = v57;
          }
          else {
            uint64_t v31 = v57 & 0xFFFFFFFFFFFFFF8;
          }
          id v32 = v29;
          uint64_t v33 = __CocoaDictionary.count.getter();
          if (__OFADD__(v33, 1)) {
            goto LABEL_45;
          }
          long long v30 = (void *)sub_1001A8388(v31, v33 + 1);
        }
        else
        {
          id v34 = v29;
        }
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v57 = 0x8000000000000000;
        unint64_t v37 = sub_100306FE8(v1);
        uint64_t v38 = v30[2];
        BOOL v39 = (v36 & 1) == 0;
        uint64_t v40 = v38 + v39;
        if (__OFADD__(v38, v39))
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          swift_bridgeObjectRetain();
          Swift::Int v3 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        char v41 = v36;
        if (v30[3] >= v40)
        {
          if (v35)
          {
            if ((v36 & 1) == 0) {
              goto LABEL_40;
            }
          }
          else
          {
            sub_10031AAA4();
            if ((v41 & 1) == 0) {
              goto LABEL_40;
            }
          }
        }
        else
        {
          sub_100312658(v40, v35);
          unint64_t v42 = sub_100306FE8(v1);
          if ((v41 & 1) != (v43 & 1)) {
            goto LABEL_49;
          }
          unint64_t v37 = v42;
          if ((v41 & 1) == 0)
          {
LABEL_40:
            v30[(v37 >> 6) + 8] |= 1 << v37;
            uint64_t v46 = 8 * v37;
            *(void *)(v30[6] + v46) = v1;
            *(void *)(v30[7] + v46) = v29;
            uint64_t v47 = v30[2];
            BOOL v48 = __OFADD__(v47, 1);
            uint64_t v49 = v47 + 1;
            if (v48) {
              goto LABEL_46;
            }
            _OWORD v30[2] = v49;
            id v50 = (id)v1;
            goto LABEL_42;
          }
        }
        uint64_t v44 = v30[7];
        uint64_t v45 = 8 * v37;

        *(void *)(v44 + v45) = v29;
LABEL_42:
        uint64_t v57 = (uint64_t)v30;

        swift_bridgeObjectRelease();
        uint64_t v5 = v53;
        uint64_t v1 = v54;
        unint64_t v12 = v52;
        uint64_t v13 = &selRef_willSave;
        goto LABEL_10;
      }

      uint64_t v13 = &selRef_willSave;
LABEL_10:
      if (v5 == ++v10) {
        goto LABEL_43;
      }
    }
  }
  __break(1u);
LABEL_49:
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D3B64@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v45 = a1;
  char v43 = a2;
  uint64_t v42 = sub_100094134(&qword_10090F3B8);
  __chkstk_darwin(v42);
  uint64_t v44 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_10090F3C0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for REMTitleEmbeddingConfig();
  uint64_t v10 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  unint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v41 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v41 - v17;
  __n128 v20 = __chkstk_darwin(v19);
  char v22 = (char *)&v41 - v21;
  (*(void (**)(char *, char *, uint64_t, __n128))(v4 + 16))(v6, v45, v3, v20);
  unint64_t v23 = v46;
  REMTitleEmbeddingConfig.init(url:)();
  if (v23)
  {
    swift_errorRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1, 1, v49);
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_10090F3C0);
    id v24 = self;
    NSString v25 = String._bridgeToObjectiveC()();
    [v24 internalErrorWithDebugDescription:v25];

    return swift_willThrow();
  }
  uint64_t v45 = v12;
  uint64_t v46 = v15;
  char v41 = v18;
  id v27 = v43;
  uint64_t v28 = v49;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v9, 0, 1, v49);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v22, v9, v28);
  REMTitleEmbeddingConfig.currentMethod.getter();
  id v29 = v44;
  REMTitleEmbeddingMethods.init(rawValue:)();
  uint64_t v30 = type metadata accessor for REMTitleEmbeddingMethods();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    id v32 = self;
    uint64_t v47 = 0;
    unint64_t v48 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v33._object = (void *)0x80000001007CE2F0;
    v33._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v33);
    v34._countAndFlagsBits = REMTitleEmbeddingConfig.currentMethod.getter();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 0xD000000000000021;
    v35._object = (void *)0x80000001007CE310;
    String.append(_:)(v35);
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 internalErrorWithDebugDescription:v36];

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v22, v28);
  }
  int v37 = (*(uint64_t (**)(char *, uint64_t))(v31 + 88))(v44, v30);
  if (v37 == enum case for REMTitleEmbeddingMethods.Sentence2Vec(_:))
  {
    uint64_t v38 = type metadata accessor for REMSentence2VecTitleEmbedding();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v46, v22, v28);
    uint64_t v39 = REMSentence2VecTitleEmbedding.__allocating_init(from:)();
    uint64_t v40 = &protocol witness table for REMSentence2VecTitleEmbedding;
  }
  else if (v37 == enum case for REMTitleEmbeddingMethods.UniversalGrammar(_:))
  {
    uint64_t v38 = type metadata accessor for REMUniversalGrammarTitleEmbedding();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v45, v22, v28);
    uint64_t v39 = REMUniversalGrammarTitleEmbedding.__allocating_init(from:)();
    uint64_t v40 = &protocol witness table for REMUniversalGrammarTitleEmbedding;
  }
  else
  {
    if (v37 != enum case for REMTitleEmbeddingMethods.FilteredStopWords(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    uint64_t v38 = type metadata accessor for REMFilteredTitleEmbedding();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v41, v22, v28);
    uint64_t v39 = REMFilteredTitleEmbedding.__allocating_init(from:)();
    uint64_t v40 = &protocol witness table for REMFilteredTitleEmbedding;
  }
  uint64_t v27[3] = v38;
  v27[4] = (uint64_t)v40;
  *id v27 = v39;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v22, v28);
}

uint64_t sub_1001D4194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for RDIntentClusterModel();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
  sub_100096838(a1, (uint64_t)v13);
  uint64_t result = RDIntentClusterModel.__allocating_init(url:embedding:)();
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_1001D42A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1004A8D94();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1001D42E8()
{
  sub_100094134(&qword_10090F368);
  swift_allocObject();
  uint64_t result = PassthroughSubject.init()();
  qword_10090F268 = result;
  return result;
}

void sub_1001D435C()
{
  sub_1001D4434();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1001D4434()
{
  if (!qword_10090F348)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090F348);
    }
  }
}

uint64_t sub_1001D448C(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    swift_errorRelease();
  }
  else {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(a1);
  }
  sub_1001D44F8(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  sub_1001D44F8(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  return sub_1001D44F8(*(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
}

uint64_t sub_1001D44F8(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t *a2)
{
  char v4 = *((unsigned char *)a2 + 40);
  if (v4)
  {
    uint64_t v5 = *a2;
    swift_errorRetain();
    *(void *)a1 = v5;
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
  }
  *(unsigned char *)(a1 + 40) = v4;
  uint64_t v7 = a2[6];
  char v8 = *((unsigned char *)a2 + 56);
  sub_1001D448C(v7, v8);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  uint64_t v9 = a2[8];
  char v10 = *((unsigned char *)a2 + 72);
  sub_1001D448C(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v10;
  uint64_t v11 = a2[10];
  char v12 = *((unsigned char *)a2 + 88);
  sub_1001D448C(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_1000966BC(a1, (uint64_t *)&unk_10090F350);
    char v4 = *((unsigned char *)a2 + 40);
    if (v4)
    {
      uint64_t v5 = *a2;
      swift_errorRetain();
      *(void *)a1 = v5;
    }
    else
    {
      uint64_t v6 = a2[3];
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
    }
    *(unsigned char *)(a1 + 40) = v4;
  }
  uint64_t v7 = a2[6];
  char v8 = *((unsigned char *)a2 + 56);
  sub_1001D448C(v7, v8);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  sub_1001D44F8(v9, v10);
  uint64_t v11 = a2[8];
  char v12 = *((unsigned char *)a2 + 72);
  sub_1001D448C(v11, v12);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v12;
  sub_1001D44F8(v13, v14);
  uint64_t v15 = a2[10];
  char v16 = *((unsigned char *)a2 + 88);
  sub_1001D448C(v15, v16);
  uint64_t v17 = *(void *)(a1 + 80);
  char v18 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v15;
  *(unsigned char *)(a1 + 88) = v16;
  sub_1001D44F8(v17, v18);
  return a1;
}

__n128 initializeWithTake for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_1000966BC(a1, (uint64_t *)&unk_10090F350);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v5;
  sub_1001D44F8(v6, v7);
  char v8 = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v8;
  sub_1001D44F8(v9, v10);
  char v11 = *(unsigned char *)(a2 + 88);
  uint64_t v12 = *(void *)(a1 + 80);
  char v13 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v11;
  sub_1001D44F8(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDXPCSuggestedAttributesPerformer.MLModels(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCSuggestedAttributesPerformer.MLModels()
{
  return &type metadata for RDXPCSuggestedAttributesPerformer.MLModels;
}

uint64_t destroy for RDXPCSuggestedAttributesPerformer.ConfigurationSource()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for RDXPCSuggestedAttributesPerformer.ConfigurationSource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RDXPCSuggestedAttributesPerformer.ConfigurationSource(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for RDSavedReminders(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_OWORD *assignWithTake for RDXPCSuggestedAttributesPerformer.ConfigurationSource(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_release();
  a1[3] = a2[3];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedReminders(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedReminders(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDXPCSuggestedAttributesPerformer.ConfigurationSource()
{
  return &type metadata for RDXPCSuggestedAttributesPerformer.ConfigurationSource;
}

uint64_t sub_1001D4B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090F390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D4B6C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001D4B9C(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001D4BD4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001D4194(a1, *(void *)(v2 + 16), a2);
}

id sub_1001D4C38(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;

  return v5;
}

id sub_1001D4CC8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDDispatchQueue_ObjC();
  return [super dealloc];
}

uint64_t type metadata accessor for RDDispatchQueue_ObjC()
{
  return self;
}

uint64_t sub_1001D4D20()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  long long v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  sub_1000D0FD4();
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100942058 = result;
  return result;
}

NSObject *sub_1001D4F20()
{
  uint64_t result = rd_dispatch_workloop_create("com.apple.remindd.xpc.default");
  qword_100942060 = (uint64_t)result;
  return result;
}

NSObject *sub_1001D4F50()
{
  uint64_t result = rd_dispatch_workloop_create("com.apple.remindd.xpc.notification");
  qword_100942068 = (uint64_t)result;
  return result;
}

uint64_t sub_1001D4F80()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000D0FD4();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100942070 = result;
  return result;
}

uint64_t sub_1001D5178(uint64_t a1)
{
  return sub_1001D51E8(a1, (void (*)(void))&static DispatchQoS.utility.getter, 0xD000000000000019, 0x80000001007CE480, &qword_100942078);
}

uint64_t sub_1001D51B0(uint64_t a1)
{
  return sub_1001D51E8(a1, (void (*)(void))&static DispatchQoS.background.getter, 0xD00000000000001CLL, 0x80000001007CE3E0, &qword_100942080);
}

uint64_t sub_1001D51E8(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v14[1] = a4;
  uint64_t v15 = a5;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  sub_1000D0FD4();
  a2();
  char v16 = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  if (qword_1009070E8 != -1) {
    swift_once();
  }
  id v12 = (id)qword_100942088;
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *uint64_t v15 = result;
  return result;
}

unint64_t sub_1001D5428()
{
  unint64_t result = qword_10090AAC0;
  if (!qword_10090AAC0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090AAC0);
  }
  return result;
}

unint64_t sub_1001D5480()
{
  unint64_t result = qword_10090AAD0;
  if (!qword_10090AAD0)
  {
    sub_100096058((uint64_t *)&unk_10090DDA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090AAD0);
  }
  return result;
}

NSObject *sub_1001D54DC()
{
  unint64_t result = rd_dispatch_workloop_create("com.apple.remindd.discretionary");
  qword_100942088 = (uint64_t)result;
  return result;
}

uint64_t sub_1001D550C(int a1)
{
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  unint64_t v10 = sub_1000D0FD4();
  id v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  id v12 = (void *)0xD000000000000019;
  unint64_t v13 = 0x80000001007CE460;
  int v11 = a1;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  static DispatchQoS.unspecified.getter();
  id v12 = _swiftEmptyArrayStorage;
  sub_1001D5428();
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1001D5480();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t sub_1001D5768()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F400);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F400);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t type metadata accessor for RDAlarmCoreSuggestionsConsumer()
{
  return self;
}

uint64_t sub_1001D5854(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1009070F0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_10090F400);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDAlarmCoreSuggestionsConsumer consume %ld producerAlarms", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v21 = v2;
    sub_100121F2C();
    id v22 = self;
    swift_bridgeObjectRetain();
    uint64_t v9 = (unsigned __int8 *)(a1 + 64);
    do
    {
      int v11 = (void *)*((void *)v9 - 3);
      uint64_t v12 = *((void *)v9 - 2);
      uint64_t v13 = *((void *)v9 - 1);
      int v10 = *v9;
      id v14 = *((id *)v9 - 4);
      sub_1001D5B5C(v11, v12, v13, v10);
      id v15 = [v14 list];
      id v16 = [v15 objectID];

      id v17 = [v22 siriFoundInAppsListID];
      char v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) != 0 && !v10)
      {
        id v19 = v14;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        LOBYTE(v10) = 0;
      }
      v9 += 40;

      sub_1001D5BC4(v11, v12, v13, v10);
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v2 = v21;
  }
  sub_1000C0DE0((void *)(v2 + 16), *(void *)(v2 + 40));
  sub_10038D8A4((unint64_t)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D5B38(uint64_t a1)
{
  return sub_1001D5854(a1);
}

id sub_1001D5B5C(id result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 < 3u || a4 == 4)
  {
    return result;
  }
  if (a4 == 3)
  {
    id v6 = result;
    swift_bridgeObjectRetain();
    unint64_t result = v6;
    return result;
  }
  return result;
}

void sub_1001D5BC4(id a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 4u)
  {
    uint64_t v4 = a4;
    if (a4 > 4uLL) {
      uint64_t v4 = 0;
    }
    ((void (*)(id))((char *)&loc_1001D5BE8 + (int)funcs_1001D5BF0[v4]))(a1);
  }
}

void sub_1001D5BF4(id a1)
{
}

uint64_t sub_1001D5C08(void *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D5C54()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F4B8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F4B8);
  if (qword_100907838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424F0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1001D5D1C(void *a1)
{
  id v3 = [objc_allocWithZone((Class)NSFetchRequest) init];
  type metadata accessor for REMCDListWithSharedOwnerIdentifier();
  id v4 = [(id)swift_getObjCClassFromMetadata() entity];
  [v3 setEntity:v4];

  [v3 setPredicate:0];
  [v3 setResultType:1];
  sub_1001D6578();
  unint64_t v5 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1)
  {
    if (v5 >> 62) {
      goto LABEL_16;
    }
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      uint64_t v7 = 4;
      while (1)
      {
        id v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
           : *(id *)(v5 + 8 * v7);
        uint64_t v9 = v8;
        uint64_t v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        sub_1001D5F80(a1, v9);

        ++v7;
        if (v10 == v6) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_11:
    swift_bridgeObjectRelease();
    if ([a1 hasChanges])
    {
      id v14 = 0;
      if ([a1 save:&v14])
      {
        id v12 = v14;
        [a1 refreshAllObjects];
      }
      else
      {
        id v13 = v14;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void sub_1001D5F80(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  *(void *)&double v9 = __chkstk_darwin(v8 - 8).n128_u64[0];
  int v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v36 = 0;
  id v12 = [a1 existingObjectWithID:a2 error:&v36];
  id v13 = v36;
  if (v12)
  {
    id v14 = v12;
    type metadata accessor for REMCDListWithSharedOwnerIdentifier();
    id v15 = (void *)swift_dynamicCastClass();
    id v16 = v13;
    if (v15)
    {
      id v17 = [v15 sharedOwner];
      if (v17
        && (char v18 = v17, v19 = [v17 remObjectID],
                       v18,
                       v19))
      {
        id v20 = [v19 uuid];

        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v11, v7, v4);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
        Class isa = 0;
      }
      [v15 setSharedOwnerIdentifier:isa];
    }
    else
    {

      if (qword_1009070F8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10090F4B8);
      id v24 = a2;
      NSString v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        Swift::String v33 = (void *)swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        Swift::String v34 = v28;
        *(_DWORD *)uint64_t v27 = 136315650;
        Swift::String v35 = &_s50MigrateListsFromSharedOwnerToSharedOwnerIdentifierON;
        id v36 = v28;
        sub_100094134(&qword_10090F4F8);
        uint64_t v29 = String.init<A>(describing:)();
        Swift::String v35 = (ValueMetadata *)sub_1000C51B8(v29, v30, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        Swift::String v35 = (ValueMetadata *)sub_1000C51B8(0xD000000000000014, 0x80000001007CE540, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 22) = 2114;
        Swift::String v35 = v24;
        uint64_t v31 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v33 = v24;

        _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%s|%s] Failed to process list of {listMOID: %{public}@} since its managed object could not be fetched", (uint8_t *)v27, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  else
  {
    id v22 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

id sub_1001D6514()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for REMCDListWithSharedOwnerIdentifier();
  return [super dealloc];
}

uint64_t type metadata accessor for REMCDListWithSharedOwnerIdentifier()
{
  return self;
}

unint64_t sub_1001D6578()
{
  unint64_t result = qword_100914150;
  if (!qword_100914150)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100914150);
  }
  return result;
}

ValueMetadata *_s50MigrateListsFromSharedOwnerToSharedOwnerIdentifierOMa()
{
  return &_s50MigrateListsFromSharedOwnerToSharedOwnerIdentifierON;
}

id sub_1001D65C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 smartList];
  *a2 = result;
  return result;
}

id sub_1001D6604(void *a1, id *a2)
{
  return [*a2 setSmartList:*a1];
}

uint64_t sub_1001D6618(unint64_t a1, char a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v31 - v9;
  Swift::String v34 = _swiftEmptyArrayStorage;
  if (a2 < 0)
  {
    uint64_t KeyPath = swift_getKeyPath();
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      sub_1001D78D4((id)a1, a2);
    }
    else
    {
      uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    id v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      Swift::String v33 = _swiftEmptyArrayStorage;
      uint64_t result = sub_1001DE118(0, v15 & ~(v15 >> 63), 0);
      if (v15 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v32 = KeyPath;
      uint64_t v18 = 0;
      id v16 = v33;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v19 = *(id *)(a1 + 8 * v18 + 32);
        }
        id v20 = v19;
        id v21 = [v19 uuid];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v22 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);

        Swift::String v33 = v16;
        unint64_t v24 = v16[2];
        unint64_t v23 = v16[3];
        if (v24 >= v23 >> 1)
        {
          sub_1001DE118(v23 > 1, v24 + 1, 1);
          id v16 = v33;
        }
        ++v18;
        _OWORD v16[2] = v24 + 1;
        sub_1000F44F4((uint64_t)v7, (uint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v24);
      }
      while (v15 != v18);
      uint64_t KeyPath = v32;
    }
    sub_10039CDD0(KeyPath, (uint64_t)v16);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    uint64_t v11 = swift_getKeyPath();
    id v12 = [(id)a1 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
    sub_10032E980(v11, (uint64_t)v10);
    swift_release();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (v34[2] >= v34[3] >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_1001D78D4((id)a1, a2);
    if ((a2 & 1) == 0) {
      goto LABEL_26;
    }
  }
  sub_100398324(0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  sub_100094134(&qword_10090F500);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = sub_10039CDE4(v26);
  swift_release();
  *(void *)(inited + 32) = v27;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = sub_10039CE08(v28);
  swift_release();
  *(void *)(inited + 40) = v29;
  Swift::String v33 = (void *)inited;
  specialized Array._endMutation()();
  sub_100397E58(v33);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
LABEL_26:
  uint64_t v30 = swift_getKeyPath();
  sub_10039CE08(v30);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v34[2] >= v34[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return sub_1002F52FC(v34);
}

uint64_t sub_1001D6B38()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942090 = v0;
  return result;
}

uint64_t sub_1001D6BC0()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  sub_1001BCA48();
  swift_getKeyPath();
  *(void *)(v0 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  swift_getKeyPath();
  *(void *)(v0 + 40) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  uint64_t result = specialized Array._endMutation()();
  qword_100942098 = v0;
  return result;
}

uint64_t sub_1001D6C60@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    a3();

    uint64_t v10 = ((uint64_t (*)(void))a4)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a4();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a5;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

void sub_1001D6D40(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  id v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    id v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

void *sub_1001D6E88()
{
  sub_1001DE058(0, 5, 0);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v2 = _swiftEmptyArrayStorage[2];
  unint64_t v1 = _swiftEmptyArrayStorage[3];
  unint64_t v3 = v2 + 1;
  if (v2 >= v1 >> 1)
  {
    sub_1001DE058(v1 > 1, v2 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v3;
  uint64_t v4 = &_swiftEmptyArrayStorage[2 * v2];
  v4[4] = 0xD000000000000023;
  v4[5] = 0x80000001007CE560;
  unint64_t v5 = _swiftEmptyArrayStorage[3];
  int64_t v6 = v2 + 2;
  if (v3 >= v5 >> 1)
  {
    sub_1001DE058(v5 > 1, v6, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v6;
  uint64_t v7 = &_swiftEmptyArrayStorage[2 * v3];
  v7[4] = 0x696669746E656469;
  v7[5] = 0xEA00000000007265;
  unint64_t v9 = _swiftEmptyArrayStorage[2];
  unint64_t v8 = _swiftEmptyArrayStorage[3];
  unint64_t v10 = v9 + 1;
  if (v9 >= v8 >> 1)
  {
    sub_1001DE058(v8 > 1, v9 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v10;
  uint64_t v11 = &_swiftEmptyArrayStorage[2 * v9];
  v11[4] = 0xD00000000000001ALL;
  v11[5] = 0x80000001007C6B40;
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  int64_t v13 = v9 + 2;
  if (v10 >= v12 >> 1)
  {
    sub_1001DE058(v12 > 1, v13, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v13;
  uint64_t v14 = &_swiftEmptyArrayStorage[2 * v10];
  v14[4] = 0xD00000000000001ELL;
  v14[5] = 0x80000001007C8BC0;
  unint64_t v16 = _swiftEmptyArrayStorage[2];
  unint64_t v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
  {
    sub_1001DE058(v15 > 1, v16 + 1, 1);
    uint64_t result = _swiftEmptyArrayStorage;
  }
  _swiftEmptyArrayStorage[2] = v16 + 1;
  id v17 = &_swiftEmptyArrayStorage[2 * v16];
  v17[4] = 0x4E79616C70736964;
  v17[5] = 0xEB00000000656D61;
  return result;
}

uint64_t sub_1001D73A8()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v1 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = v2;
    swift_release();
    unint64_t v5 = _swiftEmptyArrayStorage;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = sub_100308F88(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
    }
    unint64_t v7 = v5[2];
    unint64_t v6 = v5[3];
    if (v7 >= v6 >> 1) {
      unint64_t v5 = sub_100308F88((void *)(v6 > 1), v7 + 1, 1, v5);
    }
    v5[2] = v7 + 1;
    unint64_t v8 = &v5[2 * v7];
    v8[4] = v3;
    v8[5] = v4;
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  else
  {
    _StringGuts.grow(_:)(46);
    v10._object = (void *)0x80000001007CAF70;
    v10._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v10);
    sub_100094134(&qword_10090F508);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D7584(unint64_t a1, char a2, uint64_t a3, Class a4, Class isa, Class a6)
{
  unint64_t v9 = (void *)sub_1001D6618(a1, a2);
  type metadata accessor for REMCDSmartListSection();
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];

  if (isa)
  {
    sub_1001FFC40((uint64_t)isa);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  [v10 setPropertiesToFetch:isa];

  if (a6) {
    a6 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setRelationshipKeyPathsForPrefetching:a6];

  if (a4)
  {
    sub_1001BCA48();
    a4 = Array._bridgeToObjectiveC()().super.isa;
  }
  [v10 setSortDescriptors:a4];

  uint64_t v12 = NSManagedObjectContext.fetch<A>(_:)();
  return v12;
}

uint64_t sub_1001D7734@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_identifier, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1001D777C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1001D77CC()
{
  return "smartList";
}

id sub_1001D77D8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 smartList];
  *a2 = result;
  return result;
}

id sub_1001D7814(void *a1, id *a2)
{
  return [*a2 setSmartList:*a1];
}

id sub_1001D7828@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001D785C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

id sub_1001D7870@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1001D78AC(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

const char *sub_1001D78C0()
{
  return "inactive";
}

void sub_1001D78D4(id a1, char a2)
{
  if (a2 < 0) {
    swift_bridgeObjectRelease();
  }
  else {
}
  }

uint64_t sub_1001D78E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D6C60(a1, (SEL *)&selRef_creationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1001D7930(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

int32x4_t *sub_1001D7980(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    id result = (int32x4_t *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return (int32x4_t *)_swiftEmptyArrayStorage;
  }
  id result = (int32x4_t *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[1].i64[0] = a1;
  i32 = result[2].i32;
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *i32++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  i32 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  unint64_t v8 = result + 3;
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *unint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

void *sub_1001D7A74(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    id result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  id result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[2] = a1;
  uint64_t v4 = (double *)(result + 4);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  unint64_t v8 = (int64x2_t *)(result + 6);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *unint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t static REMGroceryClassifier.modelBaseLocale(for:)()
{
  return static REMGroceryDummyModel.modelBaseLocale(for:)();
}

void *static REMGroceryClassifier.intelligentCategoryNamesFromTrial(localeIdentifier:includeMisc:removeDuplicate:)(uint64_t a1, unint64_t a2, int a3, int a4)
{
  return sub_1001E2A94(a1, a2, a3, a4);
}

uint64_t static REMGroceryClassifier.isSupported(localeIdentifier:)()
{
  return static REMGroceryDummyModel.isSupported(localeIdentifier:)() & 1;
}

uint64_t sub_1001D7C24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F510);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F510);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t REMGroceryModelType.modelFileName.getter(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  unint64_t result = 0;
  switch(v1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x736A2E7865676572;
      break;
    case 3:
      return result;
    case 4:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      unint64_t result = 0xD000000000000014;
      break;
  }
  return result;
}

uint64_t REMGroceryModelType.description.getter(char a1)
{
  uint64_t result = 1953654114;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6465726F68636E61;
      break;
    case 2:
      uint64_t result = 0x7865676572;
      break;
    case 3:
      uint64_t result = 0x796D6D7564;
      break;
    case 4:
      uint64_t result = 0x6C774F69726973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t REMGroceryModelType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_1001D7E58@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s7remindd19REMGroceryModelTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001D7E84(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t REMGroceryClassifierLoadingError.msg.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1001D7EC4(char a1)
{
  unint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x7079546C65646F6DLL;
      break;
    case 3:
      unint64_t result = 0x6E656B6F5478616DLL;
      break;
    case 4:
      unint64_t result = 0x6C6F687365726874;
      break;
    case 5:
      unint64_t result = 1315991412;
      break;
    case 6:
      unint64_t result = 0x69726F6765746163;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0xD000000000000022;
      break;
    case 9:
      unint64_t result = 0x6C6E4F6969637361;
      break;
    case 10:
    case 12:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 13:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001D8080(char a1)
{
  unint64_t result = 0x6E6F6973726576;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7079546C65646F6DLL;
      break;
    case 2:
      unint64_t result = 0x6E656B6F5478616DLL;
      break;
    case 3:
      unint64_t result = 0x6C6F687365726874;
      break;
    case 4:
      unint64_t result = 1315991412;
      break;
    case 5:
      unint64_t result = 0x69726F6765746163;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000022;
      break;
    case 8:
      unint64_t result = 0x6C6E4F6969637361;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001D81C8()
{
  uint64_t v1 = 0x6E6F6973726576;
  if (*v0 != 1) {
    uint64_t v1 = 0x6974636572726F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1001D8230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001E3434(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001D8258(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1001D8264(uint64_t a1)
{
  unint64_t v2 = sub_1001E7ED0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D82A0(uint64_t a1)
{
  unint64_t v2 = sub_1001E7ED0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D82DC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1001E35A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

unint64_t sub_1001D830C()
{
  return sub_1001D7EC4(*v0);
}

uint64_t sub_1001D8314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001E3790(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001D833C(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1001D8348(uint64_t a1)
{
  unint64_t v2 = sub_1001E8C50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D8384(uint64_t a1)
{
  unint64_t v2 = sub_1001E8C50();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1001D83C0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001E3D14(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v12;
    *(_OWORD *)(a2 + 64) = v11;
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v13;
    *(_WORD *)(a2 + 112) = v14;
    long long v6 = v8[1];
    *(_OWORD *)a2 = v8[0];
    *(_OWORD *)(a2 + 16) = v6;
    double result = *(double *)&v9;
    long long v7 = v10;
    *(_OWORD *)(a2 + 32) = v9;
    *(_OWORD *)(a2 + 48) = v7;
  }
  return result;
}

unint64_t sub_1001D8428()
{
  return sub_1001D8080(*v0);
}

uint64_t sub_1001D8430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001E4564(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001D8458(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1001D8464(uint64_t a1)
{
  unint64_t v2 = sub_1001E8D08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D84A0(uint64_t a1)
{
  unint64_t v2 = sub_1001E8D08();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1001D84DC@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001E492C(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(unsigned char *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t static REMGroceryClassifier.fromTrial(localeIdentifier:client:)(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  return sub_1001E68F4(a1, a2, a3);
}

void sub_1001D854C(uint64_t a1, uint64_t a2, void *a3)
{
  long long v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_1001D85C4(uint64_t a1, uint64_t a2, void *a3, const char *a4, const char *a5, const char *a6, const char *a7)
{
  if (a2)
  {
    if (qword_100907110 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E2DC(v9, (uint64_t)qword_10090F510);
    id v10 = a3;
    swift_errorRetain();
    id v11 = v10;
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      __int16 v14 = (void *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000C51B8(v15, v16, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2112;
      swift_errorRetain();
      uint64_t v42 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *__int16 v14 = v42;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, a7, (uint8_t *)v13, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_27;
  }
  switch(a1)
  {
    case 0:
      return;
    case 2:
      if (qword_100907110 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_10090F510);
      oslog = a3;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v29))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000C51B8(v30, v31, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        unint64_t v24 = v19;
        os_log_type_t v25 = v29;
        uint64_t v26 = a5;
        goto LABEL_18;
      }
      break;
    case 1:
      if (qword_100907110 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_10090F510);
      oslog = a3;
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000C51B8(v22, v23, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        unint64_t v24 = v19;
        os_log_type_t v25 = v20;
        uint64_t v26 = a4;
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v24, v25, v26, v21, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
      break;
    default:
      if (qword_100907110 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_10008E2DC(v33, (uint64_t)qword_10090F510);
      oslog = a3;
      Swift::String v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315394;
        uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_1000C51B8(v37, v38, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2080;
        type metadata accessor for AssetsResult(0);
        uint64_t v39 = String.init<A>(describing:)();
        sub_1000C51B8(v39, v40, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, a6, (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

      goto LABEL_26;
  }

LABEL_26:
LABEL_27:
}

uint64_t REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 376) = v13;
  *(void *)(v9 + 384) = v8;
  *(unsigned char *)(v9 + 65) = v16;
  *(unsigned char *)(v9 + 59) = v15;
  *(unsigned char *)(v9 + 58) = v14;
  *(void *)(v9 + 360) = a7;
  *(void *)(v9 + 368) = a8;
  *(void *)(v9 + 344) = a4;
  *(void *)(v9 + 352) = a6;
  *(unsigned char *)(v9 + 57) = a5;
  *(void *)(v9 + 328) = a2;
  *(void *)(v9 + 336) = a3;
  *(void *)(v9 + 320) = a1;
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v9 + 392) = v10;
  *(void *)(v9 + 400) = *(void *)(v10 - 8);
  *(void *)(v9 + 408) = swift_task_alloc();
  *(void *)(v9 + 416) = swift_task_alloc();
  return _swift_task_switch(sub_1001D8DA8, 0, 0);
}

uint64_t sub_1001D8DA8()
{
  uint64_t v72 = v0;
  uint64_t v1 = (long long *)(v0 + 72);
  if (qword_100907110 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 424) = sub_10008E2DC(v2, (uint64_t)qword_10090F510);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v68 = *(unsigned __int8 *)(v0 + 65);
    int v67 = *(unsigned __int8 *)(v0 + 59);
    int v66 = *(unsigned __int8 *)(v0 + 58);
    uint64_t v64 = *(void *)(v0 + 352);
    uint64_t v65 = *(void *)(v0 + 360);
    char v63 = *(unsigned char *)(v0 + 57);
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v62 = *(void *)(v0 + 344);
    os_log_type_t v69 = v4;
    uint64_t v6 = *(void *)(v0 + 320);
    unint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = swift_slowAlloc();
    v71[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136316674;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 272) = sub_1000C51B8(v6, v7, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2080;
    *(_DWORD *)(v0 + 60) = v5;
    *(unsigned char *)(v0 + 64) = BYTE4(v5) & 1;
    sub_100094134(&qword_10090F560);
    uint64_t v9 = Optional.descriptionOrNil.getter();
    *(void *)(v0 + 288) = sub_1000C51B8(v9, v10, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 22) = 2080;
    *(void *)(v0 + 216) = v62;
    *(unsigned char *)(v0 + 224) = v63 & 1;
    sub_100094134(&qword_10090F568);
    uint64_t v11 = Optional.descriptionOrNil.getter();
    *(void *)(v0 + 304) = sub_1000C51B8(v11, v12, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 32) = 2080;
    uint64_t v1 = (long long *)(v0 + 72);
    *(void *)(v0 + 200) = v64;
    *(void *)(v0 + 208) = v65;
    sub_100094134((uint64_t *)&unk_10090A4C0);
    uint64_t v13 = Optional.descriptionOrNil.getter();
    *(void *)(v0 + 280) = sub_1000C51B8(v13, v14, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 42) = 1024;
    *(_DWORD *)(v0 + 68) = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 48) = 1024;
    *(_DWORD *)(v0 + 228) = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 54) = 1024;
    *(_DWORD *)(v0 + 536) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v69, "REMGroceryClassifier predicting {title: %s, threshold: %s, topN: %s, localeReason: %s, withGlobalCorrections: %{BOOL}d, includeMisc: %{BOOL}d, shouldPostGroceryPredictionAnalytics: %{BOOL}d}", (uint8_t *)v8, 0x3Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  Date.init()();
  uint64_t v15 = sub_1001DA70C();
  *(void *)(v0 + 432) = v15;
  *(void *)(v0 + 440) = v16;
  *(void *)(v0 + 448) = sub_1001DA9A4(v15, v16);
  *(void *)(v0 + 456) = v17;
  id v18 = [objc_allocWithZone((Class)NLTokenizer) initWithUnit:0];
  *(void *)(v0 + 464) = v18;
  NSString v19 = String._bridgeToObjectiveC()();
  [v18 setString:v19];

  uint64_t v20 = NLTokenizer.tokens(for:)();
  swift_bridgeObjectRetain();
  sub_1001E24A4(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
  uint64_t v21 = self;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v23 = String._bridgeToObjectiveC()();
  LODWORD(v21) = [v21 profanityInTokens:isa forLocaleIdentifier:v23];

  if (v21)
  {
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "REMGroceryClassifier predict func triggered profanity", v27, 2u);
      swift_slowDealloc();
    }

    *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  uint64_t v28 = *(void *)(v0 + 384);
  if ((*(void *)(v0 + 336) & 0x100000000) != 0)
  {
    uint64_t v29 = swift_bridgeObjectRetain();
  }
  else
  {
    v24.i32[0] = *(void *)(v0 + 336);
    uint64_t v29 = (uint64_t)sub_1001D7980(*(void *)(*(void *)(v28 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels) + 16), v24);
    uint64_t v28 = *(void *)(v0 + 384);
  }
  *(void *)(v0 + 472) = v29;
  uint64_t v30 = *(void *)(v28 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_models);
  *(void *)(v0 + 480) = v30;
  uint64_t v31 = *(void *)(v28 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
  *(void *)(v0 + 488) = v31;
  uint64_t v32 = *(void *)(v30 + 16);
  *(void *)(v0 + 496) = v32;
  swift_bridgeObjectRetain();
  uint64_t v33 = swift_bridgeObjectRetain();
  if (v32)
  {
    *(void *)(v0 + 504) = 0;
    if (!*(void *)(v30 + 16))
    {
      __break(1u);
      return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(v33, v34, v35, v36, v37);
    }
    sub_100096838(v30 + 32, (uint64_t)v1);
    if (*(void *)(v31 + 16))
    {
      char v38 = *(unsigned char *)(*(void *)(v0 + 488) + 32);
      *(unsigned char *)(v0 + 66) = v38;
      sub_1000967D4(v1, v0 + 16);
      *(unsigned char *)(v0 + 56) = v38;
      sub_1000967D4((long long *)(v0 + 16), v0 + 112);
      uint64_t v39 = *(void *)(v0 + 136);
      uint64_t v40 = *(void *)(v0 + 144);
      sub_1000C0DE0((void *)(v0 + 112), v39);
      char v41 = (void *)swift_task_alloc();
      *(void *)(v0 + 512) = v41;
      *char v41 = v0;
      v41[1] = sub_1001D9838;
      uint64_t v35 = *(void *)(v0 + 472);
      uint64_t v34 = *(void *)(v0 + 456);
      uint64_t v33 = *(void *)(v0 + 448);
      uint64_t v36 = v39;
      uint64_t v37 = v40;
      return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(v33, v34, v35, v36, v37);
    }
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRetain_n();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    v71[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    uint64_t v45 = Array.description.getter();
    *(void *)(v0 + 264) = sub_1000C51B8(v45, v46, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  char v47 = *(unsigned char *)(v0 + 57);
  swift_beginAccess();
  if (v47) {
    unint64_t v48 = (uint64_t *)(*(void *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
  }
  else {
    unint64_t v48 = (uint64_t *)(v0 + 344);
  }
  uint64_t v49 = *(void *)(v0 + 400);
  uint64_t v50 = *(void *)(v0 + 408);
  uint64_t v51 = *(void *)(v0 + 392);
  uint64_t v70 = sub_1001DAB98(*(void **)(v0 + 296), *(unsigned __int8 *)(v0 + 59), *v48, *(void *)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 368), *(void *)(v0 + 376), *(unsigned __int8 *)(v0 + 58), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v0 + 65));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v53 = v52;
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v54(v50, v51);
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 134217984;
    *(void *)(v0 + 256) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "REMGroceryClassifier model prediction time: %f", v57, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v58 = *(void *)(v0 + 416);
  uint64_t v59 = *(void *)(v0 + 392);

  v54(v58, v59);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v60 = *(uint64_t (**)(void *))(v0 + 8);
  return v60(v70);
}

uint64_t sub_1001D9838(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 520) = a1;
  *(void *)(v3 + 528) = v1;
  swift_task_dealloc();
  if (v1) {
    os_log_type_t v4 = sub_1001DA01C;
  }
  else {
    os_log_type_t v4 = sub_1001D9950;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001D9950()
{
  uint64_t v56 = v0;
  uint64_t v1 = v0 + 112;
  uint64_t v2 = (void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 520);
  int64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (v4)
  {
    uint64_t v50 = v0 + 112;
    uint64_t v51 = (void *)(v0 + 296);
    uint64_t v6 = (void *)(v0 + 240);
    *(void *)(v0 + 240) = _swiftEmptyArrayStorage;
    sub_1001DE738(0, v4, 0);
    uint64_t v5 = *(void **)(v0 + 240);
    unint64_t v7 = (_DWORD *)(v3 + 56);
    do
    {
      long long v53 = *(_OWORD *)(v7 - 6);
      uint64_t v8 = *((void *)v7 - 1);
      unint64_t v9 = 0xE400000000000000;
      uint64_t v10 = 1953654114;
      int v11 = *v7;
      switch(*(unsigned char *)(v0 + 66))
      {
        case 1:
          unint64_t v9 = 0xEE00656C62627542;
          uint64_t v10 = 0x6465726F68636E61;
          break;
        case 2:
          unint64_t v9 = 0xE500000000000000;
          uint64_t v10 = 0x7865676572;
          break;
        case 3:
          unint64_t v9 = 0xE500000000000000;
          uint64_t v10 = 0x796D6D7564;
          break;
        case 4:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x6C774F69726973;
          break;
        default:
          break;
      }
      *uint64_t v6 = v5;
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1)
      {
        sub_1001DE738(v12 > 1, v13 + 1, 1);
        uint64_t v5 = (void *)*v6;
      }
      v5[2] = v13 + 1;
      unint64_t v14 = &v5[6 * v13];
      *((_OWORD *)v14 + 2) = v53;
      _OWORD v14[6] = v8;
      *((_DWORD *)v14 + 14) = v11;
      v14[8] = v10;
      v14[9] = v9;
      v7 += 8;
      --v4;
      uint64_t v0 = v52;
    }
    while (v4);
    uint64_t v1 = v50;
    uint64_t v2 = v51;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *uint64_t v2 = v5;
  if (v5[2])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1);
LABEL_20:
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int32x2_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)int32x2_t v24 = 136315138;
      uint64_t v25 = Array.description.getter();
      *(void *)(v52 + 264) = sub_1000C51B8(v25, v26, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v24, 0xCu);
      swift_arrayDestroy();
      uint64_t v0 = v52;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    char v27 = *(unsigned char *)(v0 + 57);
    swift_beginAccess();
    if (v27) {
      uint64_t v28 = (uint64_t *)(*(void *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
    }
    else {
      uint64_t v28 = (uint64_t *)(v0 + 344);
    }
    uint64_t v29 = *(void *)(v52 + 408);
    uint64_t v30 = *(void *)(v52 + 400);
    uint64_t v31 = *(void *)(v52 + 392);
    uint64_t v54 = sub_1001DAB98(*(void **)(v0 + 296), *(unsigned __int8 *)(v52 + 59), *v28, *(void *)(v52 + 352), *(void *)(v52 + 360), *(void *)(v52 + 368), *(void *)(v52 + 376), *(unsigned __int8 *)(v52 + 58), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v52 + 65));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v33 = v32;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v34(v29, v31);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 134217984;
      *(void *)(v52 + 256) = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "REMGroceryClassifier model prediction time: %f", v37, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v38 = *(void *)(v52 + 416);
    uint64_t v39 = *(void *)(v52 + 392);

    v34(v38, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void *))(v52 + 8);
    return v40(v54);
  }
  uint64_t v15 = *(void *)(v0 + 496);
  uint64_t v16 = *(void *)(v0 + 504) + 1;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1);
  if (v16 == v15)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v17 = v1;
  unint64_t v18 = *(void *)(v0 + 504) + 1;
  *(void *)(v0 + 504) = v18;
  uint64_t v19 = *(void *)(v0 + 480);
  if (v18 >= *(void *)(v19 + 16))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v20 = *(void *)(v0 + 488);
  sub_100096838(v19 + 40 * v18 + 32, v0 + 72);
  unint64_t v21 = *(void *)(v20 + 16);
  if (v18 == v21)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 72);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (v18 >= v21)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x1001DA008);
  }
  char v42 = *(unsigned char *)(*(void *)(v0 + 488) + v18 + 32);
  *(unsigned char *)(v0 + 66) = v42;
  sub_1000967D4((long long *)(v0 + 72), v0 + 16);
  *(unsigned char *)(v0 + 56) = v42;
  os_log_type_t v43 = (void *)v17;
  sub_1000967D4((long long *)(v0 + 16), v17);
  uint64_t v44 = *(void *)(v0 + 136);
  uint64_t v45 = *(void *)(v0 + 144);
  sub_1000C0DE0(v43, v44);
  unint64_t v46 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v46;
  void *v46 = v0;
  v46[1] = sub_1001D9838;
  uint64_t v47 = *(void *)(v0 + 472);
  uint64_t v48 = *(void *)(v0 + 456);
  uint64_t v49 = *(void *)(v0 + 448);
  return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(v49, v48, v47, v44, v45);
}

uint64_t sub_1001DA01C()
{
  uint64_t v45 = v0;
  uint64_t v1 = (void *)(v0 + 112);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(unsigned __int8 *)(v0 + 66);
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 248) = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    unint64_t v6 = 0xE400000000000000;
    uint64_t v7 = 1953654114;
    switch(v4)
    {
      case 1:
        unint64_t v6 = 0xEE00656C62627542;
        uint64_t v7 = 0x6465726F68636E61;
        break;
      case 2:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x7865676572;
        break;
      case 3:
        unint64_t v6 = 0xE500000000000000;
        uint64_t v7 = 0x796D6D7564;
        break;
      case 4:
        unint64_t v6 = 0xE700000000000000;
        uint64_t v7 = 0x6C774F69726973;
        break;
      default:
        break;
    }
    *(void *)(v5 + 4) = sub_1000C51B8(v7, v6, (uint64_t *)(v0 + 248));
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v8 = Error.rem_errorDescription.getter();
    *(void *)(v5 + 14) = sub_1000C51B8(v8, v9, (uint64_t *)(v0 + 248));
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "REMGroceryClassifier of type %s failed to make prediction %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v1 = (void *)(v0 + 112);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = *(void *)(v0 + 496);
  uint64_t v11 = *(void *)(v0 + 504) + 1;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v1);
  if (v11 == v10)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v19 = Array.description.getter();
      *(void *)(v0 + 264) = sub_1000C51B8(v19, v20, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "REMGroceryClassifier: prediction from model pipeline before filtering and correction: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    char v21 = *(unsigned char *)(v0 + 57);
    swift_beginAccess();
    if (v21) {
      uint64_t v22 = (uint64_t *)(*(void *)(v0 + 384) + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN);
    }
    else {
      uint64_t v22 = (uint64_t *)(v0 + 344);
    }
    uint64_t v23 = *(void *)(v0 + 400);
    uint64_t v24 = *(void *)(v0 + 408);
    uint64_t v25 = *(void *)(v0 + 392);
    os_log_type_t v43 = sub_1001DAB98(*(void **)(v0 + 296), *(unsigned __int8 *)(v0 + 59), *v22, *(void *)(v0 + 352), *(void *)(v0 + 360), *(void *)(v0 + 368), *(void *)(v0 + 376), *(unsigned __int8 *)(v0 + 58), *(void *)(v0 + 432), *(void *)(v0 + 440), *(void *)(v0 + 448), *(void *)(v0 + 456), *(unsigned char *)(v0 + 65));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Date.init()();
    Date.timeIntervalSince(_:)();
    uint64_t v27 = v26;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v28(v24, v25);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 134217984;
      *(void *)(v0 + 256) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "REMGroceryClassifier model prediction time: %f", v31, 0xCu);
      swift_slowDealloc();
    }
    uint64_t v32 = *(void *)(v0 + 416);
    uint64_t v33 = *(void *)(v0 + 392);

    v28(v32, v33);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(void *))(v0 + 8);
    return v34(v43);
  }
  unint64_t v12 = *(void *)(v0 + 504) + 1;
  *(void *)(v0 + 504) = v12;
  uint64_t v13 = *(void *)(v0 + 480);
  if (v12 >= *(void *)(v13 + 16))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v14 = *(void *)(v0 + 488);
  sub_100096838(v13 + 40 * v12 + 32, v0 + 72);
  unint64_t v15 = *(void *)(v14 + 16);
  if (v12 == v15)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 72);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v12 >= v15)
  {
LABEL_30:
    __break(1u);
    JUMPOUT(0x1001DA6F8);
  }
  char v36 = *(unsigned char *)(*(void *)(v0 + 488) + v12 + 32);
  *(unsigned char *)(v0 + 66) = v36;
  sub_1000967D4((long long *)(v0 + 72), v0 + 16);
  *(unsigned char *)(v0 + 56) = v36;
  sub_1000967D4((long long *)(v0 + 16), (uint64_t)v1);
  uint64_t v37 = *(void *)(v0 + 136);
  uint64_t v38 = *(void *)(v0 + 144);
  sub_1000C0DE0(v1, v37);
  uint64_t v39 = (void *)swift_task_alloc();
  *(void *)(v0 + 512) = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_1001D9838;
  uint64_t v40 = *(void *)(v0 + 472);
  uint64_t v42 = *(void *)(v0 + 448);
  uint64_t v41 = *(void *)(v0 + 456);
  return dispatch thunk of REMGroceryModel.predict(_:thresholds:)(v42, v41, v40, v37, v38);
}

uint64_t sub_1001DA70C()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  os_log_type_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = type metadata accessor for Locale.Components();
  uint64_t v4 = *(void *)(v11[0] - 8);
  __chkstk_darwin(v11[0]);
  unint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)();
  NSString rawValue = Locale.Components.rem_language()()._rawValue;
  type metadata accessor for REMFilteredTitleEmbedding();
  v11[2] = static REMFilteredTitleEmbedding.decodeEmojiInText(_:language:)();
  v11[3] = v8;
  v11[1] = &off_1008B5FC0;
  sub_1001E82F0(&qword_10090F828, (void (*)(uint64_t))&type metadata accessor for CharacterSet);
  sub_100094134(&qword_10090F830);
  sub_1000967F4(&qword_10090F838, &qword_10090F830);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_1000E4FD8();
  uint64_t v9 = StringProtocol.trimmingCharacters(in:)();

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, void))(v4 + 8))(v6, v11[0]);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1001DA9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Locale.Components();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)();
  v10._NSString rawValue = Locale.Components.rem_language()()._rawValue;
  v19[0] = a1;
  v19[1] = a2;
  if (sub_1001BDA60(0, *(void *)(v3 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes)))
  {
    uint64_t v11 = *(void (**)(char *, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    v11(v9, v6);
LABEL_10:

    return v19[0];
  }
  int v12 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization);
  int v13 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers);
  if (v13 == 2)
  {
    if (v12)
    {
      int v14 = 0;
LABEL_9:
      int v15 = v12 & 1;
      swift_bridgeObjectRetain();
      sub_1001DCFA4(v15, a1, a2, (uint64_t)v10._rawValue, v14, v19);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      goto LABEL_10;
    }
  }
  else if ((v13 | v12))
  {
    int v14 = v13 & 1;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v19[0];
}

void *sub_1001DAB98(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t v182 = a7;
  uint64_t v181 = a5;
  uint64_t v183 = type metadata accessor for REMAnalyticsEvent();
  uint64_t v168 = *(void *)(v183 - 8);
  __chkstk_darwin(v183);
  __chkstk_darwin(v19);
  char v21 = (char *)v159 - v20;
  LODWORD(v177) = a2;
  uint64_t v167 = v22;
  uint64_t v180 = a6;
  uint64_t v179 = a4;
  LODWORD(v178) = a8;
  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v23 = a1[2];
    if (v23)
    {
      uint64_t v176 = a3;
      swift_bridgeObjectRetain_n();
      id v175 = a1;
      uint64_t v24 = a1 + 9;
      uint64_t v25 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v29 = *(v24 - 4);
        uint64_t v30 = *(v24 - 3);
        if (v29 != 0x616C6C656373694DLL || v30 != 0xED000073756F656ELL)
        {
          uint64_t v184 = *(v24 - 5);
          int v32 = *((_DWORD *)v24 - 4);
          uint64_t v34 = *(v24 - 1);
          uint64_t v33 = *v24;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v192 = v25;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001DE738(0, v25[2] + 1, 1);
              uint64_t v25 = (void *)v192;
            }
            unint64_t v27 = v25[2];
            unint64_t v26 = v25[3];
            if (v27 >= v26 >> 1)
            {
              sub_1001DE738(v26 > 1, v27 + 1, 1);
              uint64_t v25 = (void *)v192;
            }
            _OWORD v25[2] = v27 + 1;
            uint64_t v28 = &v25[6 * v27];
            v28[4] = v184;
            v28[5] = v29;
            v28[6] = v30;
            *((_DWORD *)v28 + 14) = v32;
            v28[8] = v34;
            v28[9] = v33;
          }
        }
        v24 += 6;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease_n();
      a3 = v176;
      a1 = v25;
    }
    else
    {
      a1 = _swiftEmptyArrayStorage;
    }
  }
  uint64_t v36 = sub_10022BE54(a3, a1);
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  unint64_t v42 = v41;
  if ((v41 & 1) == 0) {
    goto LABEL_19;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v44 = (void *)swift_dynamicCastClass();
  if (!v44)
  {
    swift_unknownObjectRelease();
    uint64_t v44 = _swiftEmptyArrayStorage;
  }
  uint64_t v45 = v44[2];
  swift_release();
  if (__OFSUB__(v42 >> 1, v40))
  {
    __break(1u);
    goto LABEL_109;
  }
  if (v45 != (v42 >> 1) - v40)
  {
LABEL_109:
    swift_unknownObjectRelease();
LABEL_19:
    os_log_type_t v43 = sub_10020B1F4(v36, v38, v40, v42);
    goto LABEL_26;
  }
  os_log_type_t v43 = (void *)swift_dynamicCastClass();
  if (!v43)
  {
    swift_unknownObjectRelease();
    os_log_type_t v43 = _swiftEmptyArrayStorage;
  }
LABEL_26:
  uint64_t v169 = a9;
  swift_unknownObjectRelease();
  uint64_t v186 = v43;
  uint64_t v46 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_corrections + 16);
  uint64_t v176 = a11;
  uint64_t v184 = a12;
  Swift::String v47 = String.lowercased()();
  swift_bridgeObjectRetain();
  v48._uint64_t countAndFlagsBits = 115;
  v48._object = (void *)0xE100000000000000;
  Swift::Bool v49 = String.hasSuffix(_:)(v48);
  swift_bridgeObjectRetain();
  uint64_t countAndFlagsBits = v47._countAndFlagsBits;
  object = v47._object;
  if (v49)
  {
    sub_100602CE0(1);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = static String._fromSubstring(_:)();
    object = v52;
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v53 = a13;
  if (v178)
  {
    if (*(void *)(v46 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v54 = sub_1001806F8(v169, a10);
      if (v55)
      {
        uint64_t v163 = *(void *)(*(void *)(v46 + 56) + 8 * v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v164 = a10;
        goto LABEL_42;
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v46 + 16))
      {
        uint64_t v56 = v184;
        swift_bridgeObjectRetain();
        unint64_t v57 = sub_1001806F8(v176, v56);
        if (v58)
        {
          uint64_t v164 = a10;
          uint64_t v163 = *(void *)(*(void *)(v46 + 56) + 8 * v57);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_42;
        }
        swift_bridgeObjectRelease();
        if (*(void *)(v46 + 16))
        {
          unint64_t v59 = sub_1001806F8(v47._countAndFlagsBits, (uint64_t)v47._object);
          if (v60)
          {
            uint64_t v164 = a10;
            uint64_t v163 = *(void *)(*(void *)(v46 + 56) + 8 * v59);
            swift_bridgeObjectRelease();
            goto LABEL_42;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v46 + 16))
    {
      unint64_t v61 = sub_1001806F8(countAndFlagsBits, (uint64_t)object);
      if (v62)
      {
        uint64_t v164 = a10;
        uint64_t v163 = *(void *)(*(void *)(v46 + 56) + 8 * v61);
LABEL_42:
        swift_bridgeObjectRelease();
        uint64_t v63 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels);
        uint64_t v187 = v63;
        *(void *)&long long v191 = v163;
        swift_bridgeObjectRetain();
        sub_100094134((uint64_t *)&unk_10090AFB0);
        sub_1000967F4(&qword_10091F0C0, (uint64_t *)&unk_10090AFB0);
        Collection.subscript.getter();
        uint64_t v64 = *((void *)&v192 + 1);
        if (*((void *)&v192 + 1))
        {
          uint64_t v65 = v192;
          swift_bridgeObjectRelease();
          if ((v65 == 0x616C6C656373694DLL && v64 == 0xED000073756F656ELL
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            && (v177 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            int64_t v66 = v43[2];
            if (v66)
            {
              *(void *)&long long v192 = _swiftEmptyArrayStorage;
              sub_1001DE6F8(0, v66, 0);
              int v67 = (void *)v192;
              int v68 = v43 + 7;
              do
              {
                uint64_t v69 = *((void *)v68 - 3);
                uint64_t v70 = *((void *)v68 - 2);
                uint64_t v71 = *((void *)v68 - 1);
                int v72 = *v68;
                *(void *)&long long v192 = v67;
                unint64_t v74 = v67[2];
                unint64_t v73 = v67[3];
                swift_bridgeObjectRetain();
                if (v74 >= v73 >> 1)
                {
                  sub_1001DE6F8(v73 > 1, v74 + 1, 1);
                  int v67 = (void *)v192;
                }
                v67[2] = v74 + 1;
                id v75 = &v67[4 * v74];
                v75[4] = v69;
                v75[5] = v70;
                v75[6] = v71;
                *((_DWORD *)v75 + 14) = v72;
                v68 += 12;
                --v66;
              }
              while (v66);
              swift_release_n();
              return v67;
            }
            swift_release_n();
            return _swiftEmptyArrayStorage;
          }
          unint64_t v102 = sub_1001E81F8((uint64_t)v43, v65, v64);
          char v104 = v103;
          swift_release();
          if ((v104 & 1) == 0)
          {
            sub_100453158(v102, (uint64_t)&v187);
            long long v191 = v188;
            sub_1001E828C((uint64_t)&v191);
            long long v190 = v189;
            sub_1001E828C((uint64_t)&v190);
            goto LABEL_78;
          }
          if (!v43[2])
          {
LABEL_78:
            if (a13)
            {
              uint64_t v178 = type metadata accessor for REMAnalyticsManager();
              uint64_t v184 = static REMAnalyticsManager.shared.getter();
              uint64_t v106 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
              uint64_t v107 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
              id v108 = *(void **)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
              uint64_t v109 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
              *(void *)char v21 = 0xD000000000000010;
              *((void *)v21 + 1) = 0x80000001007CE800;
              v21[16] = 0;
              uint64_t v177 = v106;
              *((void *)v21 + 3) = v106;
              *((void *)v21 + 4) = v107;
              uint64_t v110 = v181;
              *((void *)v21 + 5) = v179;
              *((void *)v21 + 6) = v110;
              uint64_t v161 = v65;
              uint64_t v111 = v182;
              *((void *)v21 + 7) = v180;
              *((void *)v21 + 8) = v111;
              *((void *)v21 + 9) = v161;
              *((void *)v21 + 10) = v64;
              id v175 = v108;
              *((void *)v21 + 11) = v108;
              *((void *)v21 + 12) = v109;
              uint64_t v112 = v168;
              id v113 = *(void (***)(char *, uint64_t))(v168 + 104);
              unsigned int v173 = enum case for REMAnalyticsEvent.groceryPrediction(_:);
              uint64_t v114 = v183;
              id v172 = (void (**)(char *, void, uint64_t))(v168 + 104);
              unsigned int v171 = v113;
              ((void (*)(char *))v113)(v21);
              uint64_t v174 = v109;
              swift_bridgeObjectRetain();
              uint64_t v176 = v107;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v65 = v161;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              REMAnalyticsManager.post(event:)();
              swift_release();
              unint64_t v115 = *(void (**)(char *, uint64_t))(v112 + 8);
              v115(v21, v114);
              uint64_t v116 = v186[2];
              if (v116)
              {
                uint64_t v160 = v64;
                int v162 = a13;
                uint64_t v117 = swift_bridgeObjectRetain();
                uint64_t v166 = v115;
                v159[1] = v117;
                id v118 = (uint64_t *)(v117 + 72);
                uint64_t v165 = v112 + 8;
                uint64_t v119 = v176;
                uint64_t v120 = v181;
                do
                {
                  uint64_t v121 = *(v118 - 4);
                  uint64_t v122 = *(v118 - 3);
                  uint64_t v123 = *(v118 - 1);
                  uint64_t v124 = *v118;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v184 = static REMAnalyticsManager.shared.getter();
                  *(void *)char v21 = v123;
                  *((void *)v21 + 1) = v124;
                  v21[16] = 0;
                  *((void *)v21 + 3) = v177;
                  *((void *)v21 + 4) = v119;
                  *((void *)v21 + 5) = v179;
                  *((void *)v21 + 6) = v120;
                  uint64_t v125 = v182;
                  *((void *)v21 + 7) = v180;
                  *((void *)v21 + 8) = v125;
                  *((void *)v21 + 9) = v121;
                  *((void *)v21 + 10) = v122;
                  uint64_t v126 = v174;
                  *((void *)v21 + 11) = v175;
                  *((void *)v21 + 12) = v126;
                  uint64_t v127 = v183;
                  ((void (*)(char *, void, uint64_t))v171)(v21, v173, v183);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  REMAnalyticsManager.post(event:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v166(v21, v127);
                  v118 += 6;
                  --v116;
                }
                while (v116);
                swift_bridgeObjectRelease();
                unsigned __int8 v53 = v162;
                uint64_t v64 = v160;
                uint64_t v65 = v161;
              }
            }
            *(void *)&long long v192 = v163;
            *((void *)&v192 + 1) = v65;
            uint64_t v193 = v64;
            int v194 = 1065353216;
            unint64_t v195 = 0xD000000000000010;
            unint64_t v196 = 0x80000001007CE800;
            sub_1001ECBBC(0, 0, &v192);
            goto LABEL_84;
          }
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            uint64_t v105 = v43[2];
            if (v105)
            {
LABEL_77:
              v43[2] = v105 - 1;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v186 = v43;
              goto LABEL_78;
            }
          }
          else
          {
            os_log_type_t v43 = sub_1001ECDBC(v43);
            uint64_t v105 = v43[2];
            if (v105) {
              goto LABEL_77;
            }
          }
          __break(1u);
          JUMPOUT(0x1001DBF58);
        }
        if (qword_100907110 != -1) {
          swift_once();
        }
        uint64_t v88 = type metadata accessor for Logger();
        sub_10008E2DC(v88, (uint64_t)qword_10090F510);
        swift_bridgeObjectRetain();
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = swift_slowAlloc();
          *(_DWORD *)uint64_t v91 = 134218240;
          *(void *)&long long v192 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v91 + 12) = 2048;
          uint64_t v92 = *(void *)(v63 + 16);
          swift_bridgeObjectRelease();
          *(void *)&long long v192 = v92;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "REMGroceryClassifier topNFilteredCorrected asked for %ld in intelligentCategoryNames with count %ld", (uint8_t *)v91, 0x16u);
          swift_slowDealloc();

          int64_t v93 = v43[2];
          if (v93) {
            goto LABEL_64;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n();
          int64_t v93 = v43[2];
          if (v93)
          {
LABEL_64:
            *(void *)&long long v192 = _swiftEmptyArrayStorage;
            sub_1001DE6F8(0, v93, 0);
            int v67 = (void *)v192;
            unint64_t v94 = v43 + 7;
            do
            {
              uint64_t v95 = *((void *)v94 - 3);
              uint64_t v96 = *((void *)v94 - 2);
              uint64_t v97 = *((void *)v94 - 1);
              int v98 = *v94;
              *(void *)&long long v192 = v67;
              unint64_t v100 = v67[2];
              unint64_t v99 = v67[3];
              swift_bridgeObjectRetain();
              if (v100 >= v99 >> 1)
              {
                sub_1001DE6F8(v99 > 1, v100 + 1, 1);
                int v67 = (void *)v192;
              }
              v67[2] = v100 + 1;
              id v101 = &v67[4 * v100];
              v101[4] = v95;
              v101[5] = v96;
              v101[6] = v97;
              *((_DWORD *)v101 + 14) = v98;
              v94 += 12;
              --v93;
            }
            while (v93);
            swift_release();
            goto LABEL_73;
          }
        }
        swift_release();
        int v67 = _swiftEmptyArrayStorage;
LABEL_73:
        swift_bridgeObjectRelease();
        return v67;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if ((a13 & 1) == 0)
  {
    swift_release();
    goto LABEL_98;
  }
  uint64_t v164 = a10;
  uint64_t v76 = v43[2];
  if (v76)
  {
    int v162 = a13;
    uint64_t v178 = type metadata accessor for REMAnalyticsManager();
    uint64_t v77 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    uint64_t v177 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    uint64_t v176 = v77;
    id v175 = *(void **)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
    uint64_t v174 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
    unsigned int v173 = enum case for REMAnalyticsEvent.groceryPrediction(_:);
    id v172 = (void (**)(char *, void, uint64_t))(v168 + 104);
    unsigned int v171 = (void (**)(char *, uint64_t))(v168 + 8);
    uint64_t v166 = (void (*)(char *, uint64_t))v43;
    uint64_t v78 = v43 + 9;
    uint64_t v79 = v182;
    uint64_t v80 = v183;
    do
    {
      uint64_t v82 = *(v78 - 4);
      uint64_t v81 = *(v78 - 3);
      uint64_t v83 = *(v78 - 1);
      uint64_t v84 = *v78;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v184 = static REMAnalyticsManager.shared.getter();
      *(void *)char v21 = v83;
      *((void *)v21 + 1) = v84;
      v21[16] = 0;
      uint64_t v85 = v176;
      *((void *)v21 + 3) = v177;
      *((void *)v21 + 4) = v85;
      uint64_t v86 = v181;
      *((void *)v21 + 5) = v179;
      *((void *)v21 + 6) = v86;
      *((void *)v21 + 7) = v180;
      *((void *)v21 + 8) = v79;
      *((void *)v21 + 9) = v82;
      *((void *)v21 + 10) = v81;
      uint64_t v87 = v174;
      *((void *)v21 + 11) = v175;
      *((void *)v21 + 12) = v87;
      (*v172)(v21, v173, v80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      REMAnalyticsManager.post(event:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      (*v171)(v21, v80);
      v78 += 6;
      --v76;
    }
    while (v76);
    swift_release();
    unsigned __int8 v53 = v162;
  }
  else
  {
    swift_release();
  }
LABEL_84:
  os_log_type_t v43 = v186;
  if (!v186[2] && (v53 & 1) != 0)
  {
    type metadata accessor for REMAnalyticsManager();
    static REMAnalyticsManager.shared.getter();
    uint64_t v128 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
    int64_t v129 = *(void *)(v128 + 16);
    id v130 = _swiftEmptyArrayStorage;
    if (v129)
    {
      uint64_t v185 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1001DE058(0, v129, 0);
      uint64_t v131 = 0;
      id v130 = v185;
      do
      {
        unint64_t v132 = 0xE400000000000000;
        uint64_t v133 = 1953654114;
        switch(*(unsigned char *)(v128 + v131 + 32))
        {
          case 1:
            unint64_t v132 = 0xEE00656C62627542;
            uint64_t v133 = 0x6465726F68636E61;
            break;
          case 2:
            unint64_t v132 = 0xE500000000000000;
            uint64_t v133 = 0x7865676572;
            break;
          case 3:
            unint64_t v132 = 0xE500000000000000;
            uint64_t v133 = 0x796D6D7564;
            break;
          case 4:
            unint64_t v132 = 0xE700000000000000;
            uint64_t v133 = 0x6C774F69726973;
            break;
          default:
            break;
        }
        uint64_t v185 = v130;
        unint64_t v135 = v130[2];
        unint64_t v134 = v130[3];
        if (v135 >= v134 >> 1)
        {
          sub_1001DE058(v134 > 1, v135 + 1, 1);
          id v130 = v185;
        }
        ++v131;
        v130[2] = v135 + 1;
        uint64_t v136 = &v130[2 * v135];
        v136[4] = v133;
        v136[5] = v132;
      }
      while (v129 != v131);
      swift_bridgeObjectRelease();
    }
    uint64_t v185 = v130;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
    uint64_t v137 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v139 = v138;
    swift_bridgeObjectRelease();
    uint64_t v140 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale);
    uint64_t v141 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale + 8);
    uint64_t v142 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID);
    uint64_t v143 = *(void *)(v170 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID + 8);
    id v144 = v167;
    *uint64_t v167 = v137;
    v144[1] = v139;
    *((unsigned char *)v144 + 16) = 1;
    v144[3] = v140;
    v144[4] = v141;
    uint64_t v145 = v181;
    v144[5] = v179;
    v144[6] = v145;
    uint64_t v146 = v182;
    v144[7] = v180;
    v144[8] = v146;
    v144[9] = 0;
    v144[10] = 0;
    v144[11] = v142;
    v144[12] = v143;
    uint64_t v147 = v168;
    uint64_t v148 = v183;
    (*(void (**)(uint64_t *, void, uint64_t))(v168 + 104))(v144, enum case for REMAnalyticsEvent.groceryPrediction(_:), v183);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    REMAnalyticsManager.post(event:)();
    swift_release();
    (*(void (**)(uint64_t *, uint64_t))(v147 + 8))(v144, v148);
    type metadata accessor for Analytics();
    static Analytics.postBiomeEventForUncategorizedGroceryItem(item:locale:)();
    os_log_type_t v43 = v186;
  }
LABEL_98:
  int64_t v149 = v43[2];
  if (!v149)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v185 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_1001DE6F8(0, v149, 0);
  int v67 = v185;
  unint64_t v150 = v43 + 7;
  do
  {
    uint64_t v151 = *((void *)v150 - 3);
    uint64_t v152 = *((void *)v150 - 2);
    uint64_t v153 = *((void *)v150 - 1);
    int v154 = *v150;
    uint64_t v185 = v67;
    unint64_t v156 = v67[2];
    unint64_t v155 = v67[3];
    swift_bridgeObjectRetain();
    if (v156 >= v155 >> 1)
    {
      sub_1001DE6F8(v155 > 1, v156 + 1, 1);
      int v67 = v185;
    }
    v67[2] = v156 + 1;
    unint64_t v157 = &v67[4 * v156];
    v157[4] = v151;
    v157[5] = v152;
    v157[6] = v153;
    *((_DWORD *)v157 + 14) = v154;
    v150 += 12;
    --v149;
  }
  while (v149);
  swift_bridgeObjectRelease_n();
  return v67;
}

uint64_t REMGroceryClassifier.shouldSuggestConvertToGrocery(titles:listName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  return _swift_task_switch(sub_1001DBF90, 0, 0);
}

uint64_t sub_1001DBF90()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(*(void *)(v0 + 64) + 16);
  if ((unint64_t)v2 > 4)
  {
    float v3 = *(float *)(v1 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreThreshold);
LABEL_10:
    uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels);
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    int v12 = sub_1001E25C4(v11, v10);
    *(void *)(v0 + 96) = v12;
    swift_bridgeObjectRelease();
    uint64_t v13 = swift_bridgeObjectRelease();
    float v20 = ceilf(v3 * (float)v2);
    *(float *)(v0 + 120) = v20;
    if ((~LODWORD(v20) & 0x7F800000) != 0)
    {
      if (v20 > -9.2234e18)
      {
        if (v20 < 9.2234e18)
        {
          uint64_t v21 = *(void *)(v0 + 88);
          *(void *)(v0 + 48) = *(void *)(v0 + 64);
          *(void *)(v0 + 56) = 0;
          uint64_t v22 = swift_task_alloc();
          *(void *)(v0 + 104) = v22;
          *(void *)(v22 + 16) = v21;
          *(void *)(v22 + 24) = v12;
          uint64_t v23 = (void *)swift_task_alloc();
          *(void *)(v0 + 112) = v23;
          uint64_t v24 = sub_100094134((uint64_t *)&unk_10090AFB0);
          uint64_t v19 = sub_1000967F4((unint64_t *)&unk_100915BA0, (uint64_t *)&unk_10090AFB0);
          *uint64_t v23 = v0;
          v23[1] = sub_1001DC290;
          unint64_t v18 = &type metadata for Int;
          int v15 = &unk_10090F590;
          uint64_t v13 = v0 + 40;
          uint64_t v14 = v0 + 56;
          uint64_t v16 = v22;
          uint64_t v17 = v24;
          return Sequence.asyncReduce<A>(_:_:)(v13, v14, v15, v16, v17, v18, v19);
        }
LABEL_22:
        __break(1u);
        return Sequence.asyncReduce<A>(_:_:)(v13, v14, v15, v16, v17, v18, v19);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_22;
  }
  float v3 = 1.0;
  if (!*(void *)(v0 + 80)) {
    goto LABEL_10;
  }
  *(void *)(v0 + 16) = 0x65697265636F7247;
  *(void *)(v0 + 24) = 0xE900000000000073;
  sub_1000E4FD8();
  uint64_t v4 = StringProtocol.localizedLowercase.getter();
  uint64_t v6 = v5;
  Swift::String v7 = String.lowercased()();
  if (v4 == v7._countAndFlagsBits && v6 == v7._object)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      uint64_t v1 = *(void *)(v0 + 88);
      goto LABEL_10;
    }
  }
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v25(1);
}

uint64_t sub_1001DC290()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_1001DC3C4, 0, 0);
}

uint64_t sub_1001DC3C4()
{
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(void *)(v0 + 40) >= (uint64_t)*(float *)(v0 + 120));
}

uint64_t sub_1001DC3F0(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  sub_100094134(&qword_100909BE0);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *a2;
  v5[5] = v8;
  v5[6] = v9;
  uint64_t v10 = a3[1];
  v5[7] = *a3;
  v5[8] = v10;
  return _swift_task_switch(sub_1001DC49C, 0, 0);
}

uint64_t sub_1001DC49C()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = (void *)v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  v8[5] = v2;
  v8[6] = v1;
  v8[7] = v5;
  v8[8] = v4;
  id v9 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_1000C6B8C(v3, (uint64_t)&unk_10090F818, (uint64_t)v8);
  v0[9] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[10] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1001DC608;
  uint64_t v12 = v0[2];
  return Task<>.value.getter(v12, v10, &type metadata for Int);
}

uint64_t sub_1001DC608()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001DC738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[7] = a1;
  uint64_t v11 = (void *)swift_task_alloc();
  v8[10] = v11;
  *uint64_t v11 = v8;
  v11[1] = sub_1001DC834;
  return REMGroceryClassifier.predict(_:threshold:topN:localeReason:predictReason:withGlobalCorrections:includeMisc:shouldPostGroceryPredictionAnalytics:)(a5, a6, 0x100000000, 1, 0, 0, 0, 0xD000000000000017);
}

uint64_t sub_1001DC834(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 88) = a1;
  *(void *)(v3 + 96) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001DCA10;
  }
  else {
    uint64_t v4 = sub_1001DC948;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001DC948()
{
  uint64_t v1 = *(void **)(v0 + 88);
  if (!v1[2]) {
    goto LABEL_6;
  }
  uint64_t v2 = *(void **)(v0 + 64);
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v5 = sub_1001BCB84(v3, v4, v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v0 + 72);
  if ((v5 & 1) == 0 && __OFADD__(v6++, 1))
  {
    __break(1u);
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void *)(v0 + 72);
  }
  **(void **)(v0 + 56) = v6;
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001DCA10()
{
  uint64_t v10 = v0;
  if (qword_100907110 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090F510);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.rem_errorDescription.getter();
    *(void *)(v0 + 48) = sub_1000C51B8(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "REMGroceryClassifier.shouldSuggestConvertToGrocery: predict failed with {error: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  **(void **)(v0 + 56) = *(void *)(v0 + 72);
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t REMGroceryClassifier.modelTypesDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_1001DE058(0, v2, 0);
    uint64_t v3 = 0;
    do
    {
      unint64_t v4 = 0xE400000000000000;
      uint64_t v5 = 1953654114;
      switch(*(unsigned char *)(v1 + v3 + 32))
      {
        case 1:
          unint64_t v4 = 0xEE00656C62627542;
          uint64_t v5 = 0x6465726F68636E61;
          break;
        case 2:
          unint64_t v4 = 0xE500000000000000;
          uint64_t v5 = 0x7865676572;
          break;
        case 3:
          unint64_t v4 = 0xE500000000000000;
          uint64_t v5 = 0x796D6D7564;
          break;
        case 4:
          unint64_t v4 = 0xE700000000000000;
          uint64_t v5 = 0x6C774F69726973;
          break;
        default:
          break;
      }
      unint64_t v7 = _swiftEmptyArrayStorage[2];
      unint64_t v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1) {
        sub_1001DE058(v6 > 1, v7 + 1, 1);
      }
      ++v3;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      uint64_t v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t REMGroceryClassifier.__allocating_init(baseURL:modelLocale:trialDeploymentID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v13 = __chkstk_darwin(v12);
  int v15 = (char *)&v19 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v16((char *)&v19 - v14, a1, v8, v13);
  ((void (*)(char *, uint64_t, uint64_t))v16)(v11, a1, v8);
  uint64_t v17 = sub_1001E5204(v15, v11, a2, a3, v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
  return v17;
}

uint64_t sub_1001DCFA4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v33 = a6;
  int v31 = a5;
  uint64_t v9 = type metadata accessor for CharacterSet();
  uint64_t v32 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_100914A70);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100776E40;
  *(void *)(v12 + 32) = NLTagSchemeNameTypeOrLexicalClass;
  int v30 = a1;
  __n128 v13 = NLTagSchemeNameTypeOrLexicalClass;
  if (a1)
  {
    uint64_t v14 = NLTagSchemeLemma;
    int v15 = sub_10030A9F8((void *)1, 2, 1, (void *)v12);
    void v15[2] = 2;
    uint64_t v15[5] = v14;
  }
  id v16 = objc_allocWithZone((Class)NLTagger);
  type metadata accessor for NLTagScheme(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithTagSchemes:isa];

  NSString v19 = String._bridgeToObjectiveC()();
  [v18 setString:v19];

  uint64_t v20 = NLTagger.setLanguage(_:range:)();
  uint64_t v37 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v20);
  *((unsigned char *)&v29 - 48) = v31 & 1;
  *((unsigned char *)&v29 - 47) = v30 & 1;
  *(&v29 - 5) = (uint64_t)v18;
  *(&v29 - 4) = (uint64_t)&v37;
  *(&v29 - 3) = a2;
  *(&v29 - 2) = a3;
  NLTagger.enumerateTags(in:unit:scheme:options:using:)();
  uint64_t v35 = v37;
  swift_bridgeObjectRetain();
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1000967F4((unint64_t *)&qword_10090B200, (uint64_t *)&unk_10090AFB0);
  uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)v21;
  uint64_t v36 = v23;
  uint64_t v34 = &off_1008B5FF0;
  sub_1001E82F0(&qword_10090F828, (void (*)(uint64_t))&type metadata accessor for CharacterSet);
  sub_100094134(&qword_10090F830);
  sub_1000967F4(&qword_10090F838, &qword_10090F830);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_1000E4FD8();
  uint64_t v24 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v26 = v25;

  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v9);
  swift_bridgeObjectRelease();
  uint64_t v27 = v33;
  uint64_t *v33 = v24;
  v27[1] = v26;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001DD3AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, void **a7)
{
  if ((a4 & 1) == 0 || !a1) {
    goto LABEL_8;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
    return 1;
  }
  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_8:
    if (a5)
    {
      uint64_t v15 = NLTagger.tags(in:unit:scheme:options:)();
      if (*(void *)(v15 + 16))
      {
        id v16 = *(void **)(v15 + 32);
        id v17 = v16;
        swift_bridgeObjectRelease();
        if (v16)
        {
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

LABEL_15:
          uint64_t v22 = *a7;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *a7 = v22;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v22 = sub_100308F88(0, v22[2] + 1, 1, v22);
            *a7 = v22;
          }
          unint64_t v25 = v22[2];
          unint64_t v24 = v22[3];
          if (v25 >= v24 >> 1)
          {
            uint64_t v22 = sub_100308F88((void *)(v24 > 1), v25 + 1, 1, v22);
            *a7 = v22;
          }
          _OWORD v22[2] = v25 + 1;
          uint64_t v26 = &v22[2 * v25];
          v26[4] = v18;
          v26[5] = v20;
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    String.subscript.getter();
    uint64_t v18 = static String._fromSubstring(_:)();
    uint64_t v20 = v21;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  return 1;
}

id sub_1001DD588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, char a16)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v26 = OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization;
  v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireLemmatization] = 2;
  uint64_t v27 = OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers;
  v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_requireRemovingNumbers] = 2;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_models] = a1;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelTypes] = a2;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_labels] = a3;
  uint64_t v28 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_corrections];
  *uint64_t v28 = a4;
  v28[1] = a5;
  v28[2] = a6;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_thresholds] = a7;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_topN] = a8;
  *(float *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreThreshold] = a9;
  *(void *)&v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_groceryListScoreExcludedCategories] = a10;
  uint64_t v29 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_modelLocale];
  *uint64_t v29 = a11;
  v29[1] = a12;
  int v30 = &v16[OBJC_IVAR____TtC7remindd20REMGroceryClassifier_trialDeploymentID];
  *int v30 = a13;
  v30[1] = a14;
  v16[v26] = a15;
  v16[v27] = a16;
  v33.receiver = v16;
  v33.super_class = ObjectType;
  return [super init];
}

void REMGroceryClassifier.init()()
{
}

uint64_t REMRegExTextClassifier.predict(_:thresholds:)()
{
  uint64_t result = REMRegExTextClassifier.predictIndices(_:)();
  if (!v0)
  {
    uint64_t v2 = result;
    swift_retain();
    uint64_t v3 = sub_1001E3298(v2);
    swift_bridgeObjectRelease();
    swift_release();
    return (uint64_t)v3;
  }
  return result;
}

uint64_t sub_1001DD884()
{
  uint64_t v1 = REMRegExTextClassifier.predictIndices(_:)();
  swift_retain();
  uint64_t v2 = sub_1001E3298(v1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return sub_1001E7F98(v3, v0, (uint64_t)v2);
}

uint64_t sub_1001DD980()
{
  return REMRegExTextClassifier.labels.getter();
}

uint64_t sub_1001DD9A4(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_1001DD9AC()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1001DD9B8(uint64_t a1)
{
  return sub_1001DDA00(a1, (uint64_t (*)(void))sub_1001DE058);
}

uint64_t sub_1001DD9D0(uint64_t a1)
{
  return sub_1001DDA00(a1, (uint64_t (*)(void))sub_1001DE118);
}

uint64_t sub_1001DD9E8(uint64_t a1)
{
  return sub_1001DDA00(a1, (uint64_t (*)(void))sub_1001DE148);
}

uint64_t sub_1001DDA00(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v4;
  if (!result || a1 > *(void *)(v4 + 24) >> 1)
  {
    return a2();
  }
  return result;
}

void *sub_1001DDA90(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    sub_100094134(&qword_10090F600);
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_1001DDB34(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001DDBD0(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_100094134((uint64_t *)&unk_100909E50);
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = &_swiftEmptyArrayStorage;
    }
    sub_100094134((uint64_t *)&unk_100909E50);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_1001DDCB8(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for UUID();
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = &_swiftEmptyArrayStorage;
    }
    type metadata accessor for UUID();
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_1001DDD98()
{
  return sub_1001DDDE0((uint64_t (*)(void, uint64_t, uint64_t))sub_1001DE058);
}

uint64_t sub_1001DDDB0()
{
  return sub_1001DDDE0((uint64_t (*)(void, uint64_t, uint64_t))sub_1001DE118);
}

uint64_t sub_1001DDDC8()
{
  return sub_1001DDDE0((uint64_t (*)(void, uint64_t, uint64_t))sub_1001DE148);
}

uint64_t sub_1001DDDE0(uint64_t (*a1)(void, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 16) + 1;
    return a1(0, v4, 1);
  }
  return result;
}

uint64_t sub_1001DDE54(uint64_t a1)
{
  return sub_1001DDE9C(a1, (uint64_t (*)(BOOL))sub_1001DE058);
}

uint64_t sub_1001DDE6C(uint64_t a1)
{
  return sub_1001DDE9C(a1, (uint64_t (*)(BOOL))sub_1001DE118);
}

uint64_t sub_1001DDE84(uint64_t a1)
{
  return sub_1001DDE9C(a1, (uint64_t (*)(BOOL))sub_1001DE148);
}

uint64_t sub_1001DDE9C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1)) {
    return a2(v3 > 1);
  }
  return result;
}

uint64_t sub_1001DDECC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t sub_1001DDEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = *(void *)(sub_100094134((uint64_t *)&unk_100909E50) - 8);
  uint64_t v7 = v5
     + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 72) * a1;

  return sub_1000F44F4(a2, v7);
}

uint64_t sub_1001DDF90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v6;
  unint64_t v10 = v5
      + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
      + *(void *)(v7 + 72) * a1;

  return v8(v10, a2, v9);
}

uint64_t sub_1001DE028(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFE70(a1, a2, a3, (void *)*v3, &qword_10090F868, &qword_1009102B0);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE058(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DEC24(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE078(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DED90(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE098(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFE70(a1, a2, a3, (void *)*v3, &qword_10090F658, &qword_10090F660);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE0C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DEF48(a1, a2, a3, (void *)*v3, &qword_10090F640, (uint64_t *)&unk_100914340);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE0F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DF0F4(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE118(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E201C(a1, a2, a3, (void *)*v3, &qword_10090F5F8, (uint64_t *)&unk_100909E50);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE148(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090DC40, (uint64_t (*)(void))&type metadata accessor for UUID);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE184(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DF27C(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE1A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DF3D8(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE1C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DF564(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE1E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_1009142E0, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.SectionLite);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE220(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFE70(a1, a2, a3, (void *)*v3, &qword_10090F6D8, &qword_10090F6E0);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE250(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F748, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.Account);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE28C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F740, (uint64_t (*)(void))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate.FilterableReminder);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE2C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F738, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE304(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E201C(a1, a2, a3, (void *)*v3, &qword_10090F788, &qword_10090F790);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE334(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F798, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE370(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E201C(a1, a2, a3, (void *)*v3, &qword_10090F708, &qword_100914420);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE3A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_1009146A0, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE3DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E201C(a1, a2, a3, (void *)*v3, &qword_10090F720, &qword_10090F728);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE40C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090C168, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ReminderLite);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE448(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_100920EE0, (uint64_t (*)(void))&type metadata accessor for Date);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE484(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DF6F4(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE4A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F7A0, (uint64_t (*)(void))&type metadata accessor for REMSmartListSection.PredefinedSectionType.Today);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE4E0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFBB4(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE500(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0DD4(a1, a2, a3, (void *)*v3, &qword_10090F770, &qword_10091F060);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE530(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0DD4(a1, a2, a3, (void *)*v3, &qword_10090F778, (uint64_t *)&unk_100914330);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE560(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFD14(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE580(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DFE70(a1, a2, a3, (void *)*v3, &qword_10090F718, (uint64_t *)&unk_1009145F0);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE5B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0018(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE5D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E01A0(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE5F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0324(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE610(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F710, type metadata accessor for RDSharedInlineTagAutoConvertStoreHandler.ReminderFieldConverter.CandidateHashtag);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE64C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E04AC(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE66C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1400(a1, a2, a3, *v3, &qword_10090F690);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE694(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1EC0(a1, a2, a3, *v3, &qword_100910200);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE6BC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_100913DE0, (uint64_t (*)(void))&type metadata accessor for REMManualOrdering.PinnedList);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE6F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0608(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE718(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0790(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE738(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E08EC(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE758(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_100913930, type metadata accessor for RDXPCEventStream.AlarmHandler);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE794(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0A74(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE7B4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0C1C(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE7D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0DD4(a1, a2, a3, (void *)*v3, &qword_10090F848, &qword_10090F850);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE804(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_100914AC0, type metadata accessor for RDTimelineEngineReminder);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE840(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F860, type metadata accessor for RDTimelineEngineDueReminder);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE87C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10091BFE0, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE8B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0DD4(a1, a2, a3, (void *)*v3, &qword_10090F7D8, &qword_10090F7E0);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE8E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E0F64(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE908(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1EC0(a1, a2, a3, *v3, &qword_10090EB58);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE930(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E10F0(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE950(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1400(a1, a2, a3, *v3, &qword_10090F6A8);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE978(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E127C(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE998(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1400(a1, a2, a3, *v3, &qword_10090F7A8);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DE9C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_1009148D0, (uint64_t (*)(void))&type metadata accessor for REMSuggestedAttributeOutput);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DE9FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E155C(a1, a2, a3, (void *)*v3);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEA1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1890(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DEA3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E19FC(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DEA5C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1D24(a1, a2, a3, (void *)*v3, &qword_10090F6F0, &qword_10090F190);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEA8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F730, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.AccountChild);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEAC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_100913750, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEB04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, &qword_10090F628, (uint64_t (*)(void))&type metadata accessor for Locale);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEB40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1BB8(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DEB60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1D24(a1, a2, a3, (void *)*v3, &qword_10090F750, &qword_10090F758);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEB90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E1EC0(a1, a2, a3, *v3, &qword_1009149C0);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1001DEBB8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E201C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_100914190, (uint64_t *)&unk_100920EF0);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEBE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001E225C(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_100914920, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.DatesModel.Group);
  *unint64_t v3 = result;
  return result;
}

uint64_t sub_1001DEC24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_10090A490);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  __n128 v13 = v10 + 32;
  char v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DED90(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_100908148);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_100094134(&qword_10090F840);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DEF34(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001DEF48(a1, a2, a3, a4, &qword_10090F648, &qword_10090F650);
}

uint64_t sub_1001DEF48(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100094134(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11) {
      memmove(v13 + 4, a4 + 4, 24 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    sub_100094134(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF0F4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F618);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    type metadata accessor for NLLanguage(0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF27C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F610);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 4 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF3D8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F608);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100094134((uint64_t *)&unk_10090A4C0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF564(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_10090A050);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF6D4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E225C(a1, a2, a3, a4, (uint64_t *)&unk_100920EE0, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1001DF6F4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F7C8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100094134(&qword_10090F7D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF880(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_1009101A0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100094134(&qword_10090F780);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DFA28(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F760);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100094134(&qword_10090F768);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DFBB4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_100913B20);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DFD14(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6B0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DFE70(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100094134(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_100094134(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0018(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F698);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[88 * v8] || v12 >= &v13[88 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E01A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F688);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0324(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6A0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E04AC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6C8);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E05FC(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001E1EC0(a1, a2, a3, a4, &qword_100910200);
}

uint64_t sub_1001E0608(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_100914A40);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 4;
  size_t v14 = a4 + 4;
  size_t v15 = 4 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v10 + 4, a4 + 4, v15 * 8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    sub_100094134(&qword_10090F6D0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0790(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F7E8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  size_t v15 = 16 * v8;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E08EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F820);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[48 * v8] || v12 >= &v13[48 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0A74(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F858);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100094134((uint64_t *)&unk_100913940);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0C1C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F5F0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0D94(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E225C(a1, a2, a3, a4, &qword_100914AF0, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1001E0DB4(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E225C(a1, a2, a3, a4, (uint64_t *)&unk_10091BFE0, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1001E0DD4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100094134(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_100094134(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E0F64(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F7C0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 56 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E10E4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001E1EC0(a1, a2, a3, a4, &qword_10090EB58);
}

uint64_t sub_1001E10F0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6B8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_100094134(&qword_10090F6C0);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E127C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F700);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1400(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100094134(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v9] || v14 >= &v15[16 * v9])
  {
    memcpy(v14, v15, 16 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E155C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_100914870);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100094134(&qword_10090F7B0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1704(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_100914890);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_100094134(&qword_10090F7B8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1890(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6F8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E19FC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F620);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1B84(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E1D24(a1, a2, a3, a4, &qword_10090F6F0, &qword_10090F190);
}

uint64_t sub_1001E1B98(char a1, int64_t a2, char a3, void *a4)
{
  return sub_1001E225C(a1, a2, a3, a4, (uint64_t *)&unk_10090FEE0, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
}

uint64_t sub_1001E1BB8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090F6E8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1D24(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_100094134(a5);
    unint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 4);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 16 * v11) {
      memmove(v13 + 4, a4 + 4, 16 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 16 * v11 || v16 >= v17 + 16 * v11)
  {
    sub_100094134(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E1EB4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1001E1EC0(a1, a2, a3, a4, &qword_1009149C0);
}

uint64_t sub_1001E1EC0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_100094134(a5);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E201C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100094134(a5);
  uint64_t v13 = *(void *)(sub_100094134(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  _OWORD v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_100094134(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E225C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100094134(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  _OWORD v16[2] = v11;
  void v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  unint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001E24A4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001DE058(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      String.subscript.getter();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      Swift::String v4 = String.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t v6 = _swiftEmptyArrayStorage[2];
      unint64_t v5 = _swiftEmptyArrayStorage[3];
      if (v6 >= v5 >> 1) {
        sub_1001DE058(v5 > 1, v6 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v6 + 1;
      *(Swift::String *)&_swiftEmptyArrayStorage[2 * v6 + 4] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001E25C4(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)sub_1001DE058(0, v2, 0);
  unint64_t v6 = (unint64_t *)(a1 + 32);
  uint64_t v7 = a2 + 32;
  unint64_t v8 = *(void *)(a2 + 16);
  while (1)
  {
    unint64_t v10 = *v6++;
    unint64_t v9 = v10;
    if (v10 >= v8) {
      break;
    }
    uint64_t v11 = (uint64_t *)(v7 + 16 * v9);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v14 >= v15 >> 1) {
      uint64_t result = (void *)sub_1001DE058(v15 > 1, v14 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    unint64_t v16 = &_swiftEmptyArrayStorage[2 * v14];
    v16[4] = v13;
    v16[5] = v12;
    if (!--v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E26C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:)();
  uint64_t v7 = Data.init(contentsOf:options:)();
  if (v1) {
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v10 = v7;
  unint64_t v11 = v8;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1001E7E28();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_release();
  uint64_t result = sub_100097F34(v10, v11);
  uint64_t v13 = v24;
  uint64_t v12 = v25;
  long long v14 = v26;
  uint64_t v15 = v27;
  int v16 = v28;
  uint64_t v17 = v29;
  char v18 = v30;
  long long v19 = v31;
  long long v20 = v32;
  char v21 = v33;
  char v22 = v34;
  *(_OWORD *)a1 = v23[6];
  *(void *)(a1 + 16) = v13;
  *(void *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 32) = v14;
  *(void *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v17;
  *(unsigned char *)(a1 + 72) = v18;
  *(_OWORD *)(a1 + 80) = v19;
  *(_OWORD *)(a1 + 96) = v20;
  *(unsigned char *)(a1 + 112) = v21;
  *(unsigned char *)(a1 + 113) = v22;
  return result;
}

void *sub_1001E2A94(uint64_t a1, unint64_t a2, int a3, int a4)
{
  int v43 = a4;
  LODWORD(v50) = a3;
  uint64_t v51 = a1;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v47 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for REMGroceryLocaleMapping();
  uint64_t v12 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  unsigned __int8 v53 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907110 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_10008E2DC(v14, (uint64_t)qword_10090F510);
  swift_bridgeObjectRetain_n();
  uint64_t v42 = v15;
  int v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v46 = v5;
  uint64_t v45 = v6;
  Swift::Bool v49 = v11;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v44 = v9;
    char v55 = (void *)v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_1000C51B8(v51, a2, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    char v21 = (void *)a2;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 1026;
    LODWORD(v54) = v50 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "loading category names from Trial assets for {locale: %{public}s, includeMisc: %{BOOL,public}d}", (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    uint64_t v9 = v44;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    char v21 = (void *)a2;
    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for REMTrialClient();
  swift_allocObject();
  uint64_t v22 = v52;
  REMTrialClient.init()();
  uint64_t v23 = v53;
  if (!v22)
  {
    dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()();
    REMGroceryLocaleMapping.localeSetting(for:)();
    REMGroceryLocaleMapping.LocaleSetting.meta.getter();
    uint64_t v52 = v25;
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)();
    swift_bridgeObjectRelease();
    sub_1001E26C8((uint64_t)v56);
    uint64_t v44 = v9;
    if (v50)
    {
      char v21 = v57;
      swift_bridgeObjectRetain();
      sub_1001E7FAC((uint64_t)v56);
    }
    else
    {
      uint64_t v52 = v8;
      char v58 = v57;
      uint64_t v26 = v57[2];
      if (v26)
      {
        uint64_t v51 = v12;
        uint64_t v27 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        char v21 = _swiftEmptyArrayStorage;
        do
        {
          uint64_t v32 = *(v27 - 1);
          uint64_t v33 = *v27;
          BOOL v34 = v32 == 0x616C6C656373694DLL && v33 == 0xED000073756F656ELL;
          if (!v34 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            swift_bridgeObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            char v55 = v21;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              sub_1001DE058(0, v21[2] + 1, 1);
              char v21 = v55;
            }
            unint64_t v29 = v21[2];
            unint64_t v28 = v21[3];
            unint64_t v30 = v29 + 1;
            if (v29 >= v28 >> 1)
            {
              unint64_t v36 = v29 + 1;
              unint64_t v50 = v29;
              sub_1001DE058(v28 > 1, v29 + 1, 1);
              unint64_t v30 = v36;
              unint64_t v29 = v50;
              char v21 = v55;
            }
            v21[2] = v30;
            long long v31 = &v21[2 * v29];
            v31[4] = v32;
            v31[5] = v33;
          }
          v27 += 2;
          --v26;
        }
        while (v26);
        sub_1000F5C48((uint64_t)&v58);
        uint64_t v12 = v51;
        uint64_t v23 = v53;
      }
      else
      {
        char v21 = _swiftEmptyArrayStorage;
      }
      sub_1001E7FAC((uint64_t)v56);
      uint64_t v8 = v52;
    }
    if (v43)
    {
      uint64_t v37 = Array<A>.removingDuplicates()();
      swift_bridgeObjectRelease();
      char v21 = (void *)v37;
    }
    swift_bridgeObjectRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = v8;
      unint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v41 = 134349056;
      char v55 = (void *)v21[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Number of category names loaded {count: %{public}ld}", v41, 0xCu);
      uint64_t v8 = v40;
      uint64_t v23 = v53;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v49, v8);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v48);
  }
  return v21;
}

void *sub_1001E3298(uint64_t a1)
{
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  uint64_t v3 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v5 = *(void *)(a1 + 8 * v2 + 32);
    REMRegExTextClassifier.labels.getter();
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_1000967F4(&qword_10091F0C0, (uint64_t *)&unk_10090AFB0);
    Collection.subscript.getter();
    swift_bridgeObjectRelease();
    if (v11)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = sub_10030A6B0(0, v3[2] + 1, 1, v3);
      }
      unint64_t v7 = v3[2];
      unint64_t v6 = v3[3];
      if (v7 >= v6 >> 1) {
        uint64_t v3 = sub_10030A6B0((void *)(v6 > 1), v7 + 1, 1, v3);
      }
      v3[2] = v7 + 1;
      uint64_t v4 = &v3[4 * v7];
      v4[4] = v5;
      v4[5] = v10;
      v4[6] = v11;
      *((_DWORD *)v4 + 14) = 1065353216;
    }
    ++v2;
  }
  while (v9 != v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t _s7remindd19REMGroceryModelTypeO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_1001E3434(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001007CE840
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6974636572726F63 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1001E35A0(void *a1)
{
  uint64_t v2 = sub_100094134(&qword_10090F668);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = &v8[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_1001E7ED0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v8[31] = 0;
  uint64_t v6 = KeyedDecodingContainer.decode(_:forKey:)();
  v8[30] = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  sub_100094134(&qword_10090F678);
  v8[15] = 2;
  sub_1001E7F24();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return v6;
}

uint64_t sub_1001E3790(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007CE860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7079546C65646F6DLL && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xEE006874676E654CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xEA00000000007364 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1315991412 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001007CE680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001007CE6C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6C6E4F6969637361 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007CE880 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001007CE8A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007CE6F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001007CE710)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

uint64_t sub_1001E3D14@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_10090F888);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1001E8C50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    return v49;
  }
  else
  {
    LOBYTE(v51) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v51) = 1;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v47 = v9;
    uint64_t v48 = v10;
    sub_100094134(&qword_10091F060);
    char v50 = 2;
    uint64_t v11 = sub_1001E8CA4(&qword_10090F898, &qword_10091F060);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v46 = v11;
    uint64_t v12 = v51;
    LOBYTE(v51) = 3;
    swift_bridgeObjectRetain();
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v45 = v12;
    sub_100094134(&qword_10090F8A0);
    char v50 = 4;
    sub_1001E8CA4(&qword_10090F8A8, &qword_10090F8A0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v13 = v51;
    LOBYTE(v51) = 5;
    uint64_t v14 = v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v49 = v14;
    uint64_t v43 = v15;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    char v50 = 6;
    sub_1001E8CA4(&qword_10090F8B0, (uint64_t *)&unk_10090AFB0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = v51;
    LOBYTE(v51) = 7;
    uint64_t v42 = v16;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v42;
    int v41 = v18;
    uint64_t v40 = a2;
    char v50 = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v19 = v5;
    uint64_t v20 = v51;
    LOBYTE(v51) = 9;
    swift_bridgeObjectRetain();
    uint64_t v46 = v19;
    char v21 = v8;
    int v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v51) = 10;
    uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v23 = v22;
    LOBYTE(v51) = 11;
    swift_bridgeObjectRetain();
    uint64_t v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v25 = v24;
    LOBYTE(v51) = 12;
    swift_bridgeObjectRetain();
    int v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v51) = 13;
    char v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v46);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = v17;
    swift_bridgeObjectRelease();
    uint64_t v28 = v49;
    swift_bridgeObjectRelease();
    uint64_t v29 = v45;
    uint64_t result = swift_bridgeObjectRelease();
    long long v31 = v40;
    uint64_t v32 = v48;
    *uint64_t v40 = v47;
    v31[1] = v32;
    uint64_t v33 = v44;
    v31[2] = v29;
    v31[3] = v33;
    uint64_t v34 = v43;
    v31[4] = v28;
    v31[5] = v34;
    v31[6] = v27;
    *((_DWORD *)v31 + 14) = v41;
    v31[8] = v20;
    *((unsigned char *)v31 + 72) = v39;
    v31[10] = v38;
    v31[11] = v23;
    v31[12] = v37;
    v31[13] = v25;
    *((unsigned char *)v31 + 112) = v36;
    *((unsigned char *)v31 + 113) = v26;
  }
  return result;
}

uint64_t sub_1001E4564(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7079546C65646F6DLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656B6F5478616DLL && a2 == 0xEE006874676E654CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C6F687365726874 && a2 == 0xEA00000000007364 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1315991412 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001007CE680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000022 && a2 == 0x80000001007CE6C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6C6E4F6969637361 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t sub_1001E492C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_10090F8B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1001E8D08();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  LOBYTE(v28) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v28) = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v28) = 2;
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v10;
  sub_100094134(&qword_10090F8A0);
  char v27 = 3;
  sub_1001E8CA4(&qword_10090F8A8, &qword_10090F8A0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v11 = v28;
  LOBYTE(v28) = 4;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v24 = v11;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  char v27 = 5;
  sub_1001E8CA4(&qword_10090F8B0, (uint64_t *)&unk_10090AFB0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v12 = v28;
  LOBYTE(v28) = 6;
  uint64_t v22 = v12;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  int v14 = v13;
  sub_100094134(&qword_10091F060);
  char v27 = 7;
  sub_1001E8CA4(&qword_10090F898, &qword_10091F060);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v28;
  LOBYTE(v28) = 8;
  swift_bridgeObjectRetain();
  char v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v24;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v18 = v22;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v26;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v25;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 32) = v23;
  *(void *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  *(unsigned char *)(a2 + 64) = v16;
  return result;
}

uint64_t sub_1001E4DF4()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v9 - v3;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v5 = Data.init(contentsOf:options:)();
  unint64_t v7 = v6;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1001E8078();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  swift_release();
  sub_100097F34(v5, v7);
  return v9[3];
}

uint64_t sub_1001E5204(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v177 = a6;
  uint64_t v166 = a5;
  uint64_t v178 = a4;
  uint64_t v172 = a3;
  long long v190 = a2;
  uint64_t v183 = a1;
  uint64_t v189 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v189 - 8);
  __chkstk_darwin(v189);
  unsigned int v173 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v176 = (char *)&v149 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v149 - v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v149 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v149 - v17;
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v149 - v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v149 - v23;
  __chkstk_darwin(v25);
  char v27 = (char *)&v149 - v26;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)&v149 - v29;
  __chkstk_darwin(v31);
  uint64_t v33 = (char *)&v149 - v32;
  uint64_t v34 = v192;
  sub_1001E26C8((uint64_t)&v198);
  uint64_t v184 = v34;
  if (v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    uint64_t v36 = v189;
    v35((uint64_t)v190, v189);
    v35((uint64_t)v183, v36);
    return v36;
  }
  long long v191 = v33;
  int v162 = v24;
  long long v188 = v21;
  uint64_t v163 = v12;
  uint64_t v167 = v15;
  uint64_t v182 = v30;
  uint64_t v168 = v27;
  uint64_t v169 = v18;
  uint64_t v37 = v199;
  uint64_t v38 = v201;
  uint64_t v193 = v199;
  uint64_t v39 = v203;
  uint64_t v40 = v205;
  uint64_t v41 = v208;
  uint64_t v160 = v207;
  uint64_t v42 = v209[1];
  uint64_t v161 = v209[0];
  sub_1000F5C74((uint64_t)&v193);
  uint64_t v180 = v42;
  swift_bridgeObjectRetain();
  uint64_t v181 = v39;
  swift_bridgeObjectRetain();
  uint64_t v158 = v38;
  swift_bridgeObjectRetain();
  uint64_t v159 = v40;
  swift_bridgeObjectRetain();
  uint64_t v175 = v41;
  swift_bridgeObjectRetain();
  sub_1001E7FAC((uint64_t)&v198);
  uint64_t v151 = sub_1001E4DF4();
  unint64_t v165 = v44;
  uint64_t v45 = *(void *)(v37 + 16);
  uint64_t v152 = v6;
  uint64_t v150 = v46;
  if (!v45)
  {
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v50 = v189;
LABEL_55:
    uint64_t v174 = v48;
    sub_1000F5C48((uint64_t)&v193);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v118 = v165;
    uint64_t v179 = v49;
    if (v165)
    {
      uint64_t v119 = v190;
      uint64_t v120 = v177;
      uint64_t v121 = v178;
      uint64_t v122 = v151;
      uint64_t v123 = v150;
    }
    else
    {
      uint64_t v122 = v198;
      unint64_t v118 = sub_1002EEC74((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v123 = 0;
      uint64_t v119 = v190;
      uint64_t v120 = v177;
      uint64_t v121 = v178;
    }
    uint64_t v124 = v202;
    float v125 = v204;
    __int16 v126 = v210;
    id v127 = objc_allocWithZone((Class)type metadata accessor for REMGroceryClassifier());
    uint64_t v36 = (uint64_t)sub_1001DD588((uint64_t)v179, (uint64_t)v174, v181, v122, v123, v118, v158, v124, v125, v159, v172, v121, v166, v120, v126, SHIBYTE(v126));
    uint64_t v128 = *(void (**)(uint64_t, uint64_t))(v152 + 8);
    v128((uint64_t)v119, v50);
    v128((uint64_t)v183, v50);
    return v36;
  }
  uint64_t v47 = (char **)(v37 + 32);
  uint64_t v185 = (void (**)(void))(v6 + 16);
  uint64_t v187 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v48 = _swiftEmptyArrayStorage;
  int v157 = v206 & 1;
  uint64_t v156 = v200;
  unint64_t v155 = 0x80000001007CE5D0;
  unint64_t v154 = 0x80000001007CE5B0;
  unint64_t v153 = 0x80000001007CE590;
  *(void *)&long long v43 = 134218242;
  long long v171 = v43;
  uint64_t v170 = (char *)&type metadata for Any + 8;
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v50 = v189;
  uint64_t v51 = v188;
  while (2)
  {
    uint64_t v52 = *v47;
    uint64_t v192 = v45;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v186 = v47 + 1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v48 = sub_10030A6A4(0, v48[2] + 1, 1, v48);
    }
    unint64_t v55 = v48[2];
    unint64_t v54 = v48[3];
    uint64_t v47 = &selRef_stringFromDate_;
    if (v55 >= v54 >> 1) {
      uint64_t v48 = sub_10030A6A4((void *)(v54 > 1), v55 + 1, 1, v48);
    }
    uint64_t v56 = v52;
    v48[2] = v55 + 1;
    *((unsigned char *)v48 + v55 + 32) = (_BYTE)v52;
    uint64_t v57 = v180;
    char v58 = v182;
    switch((unint64_t)v56)
    {
      case 0uLL:
        URL.appendingPathComponent(_:isDirectory:)();
        unint64_t v59 = v168;
        URL.appendingPathComponent(_:isDirectory:)();
        char v60 = *v185;
        ((void (*)(char *, char *, uint64_t))*v185)(v162, v59, v50);
        ((void (*)(char *, char *, uint64_t))v60)(v51, v58, v50);
        uint64_t v61 = type metadata accessor for REMBertTextClassifier();
        swift_bridgeObjectRetain();
        uint64_t v62 = v184;
        uint64_t v63 = REMBertTextClassifier.__allocating_init(vocabURL:modelURL:numOfClasses:maxLength:labels:asciiOnly:)();
        uint64_t v184 = v62;
        if (!v62)
        {
          uint64_t v64 = v63;
          swift_retain();
          uint64_t v65 = v48;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = sub_10030A560(0, v49[2] + 1, 1, v49);
          }
          uint64_t v50 = v189;
          unint64_t v67 = v49[2];
          unint64_t v66 = v49[3];
          int v68 = v168;
          if (v67 >= v66 >> 1) {
            uint64_t v49 = sub_10030A560((void *)(v66 > 1), v67 + 1, 1, v49);
          }
          uint64_t v196 = v61;
          unint64_t v197 = &protocol witness table for REMBertTextClassifier;
          *(void *)&long long v194 = v64;
          v49[2] = v67 + 1;
          sub_1000967D4(&v194, (uint64_t)&v49[5 * v67 + 4]);
          swift_release();
          uint64_t v69 = *v187;
          (*v187)(v68, v50);
          v69(v182, v50);
          goto LABEL_36;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000F5C48((uint64_t)&v193);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_getErrorValue();
        uint64_t v130 = Error.rem_errorDescription.getter();
        uint64_t v132 = v131;
        sub_1001E8024();
        uint64_t v133 = swift_allocError();
        *(unsigned char *)uint64_t v134 = 0;
        *(void *)(v134 + 8) = v130;
        *(void *)(v134 + 16) = v132;
        swift_willThrow();
        swift_errorRelease();
        uint64_t v36 = (uint64_t)v187;
        unint64_t v135 = *v187;
        uint64_t v136 = v189;
        (*v187)(v190, v189);
        v135(v183, v136);
        v135(v168, v136);
        v135(v182, v136);
        uint64_t v184 = v133;
        return v36;
      case 1uLL:
        URL.appendingPathComponent(_:isDirectory:)();
        uint64_t v77 = type metadata accessor for REMAnchoredBubbleModel();
        uint64_t v78 = static REMAnchoredBubbleModel.loadGroceryModel(from:labels:)();
        if (!v78)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000F5C48((uint64_t)&v193);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1001E8024();
          uint64_t v137 = swift_allocError();
          *(unsigned char *)uint64_t v138 = 1;
          *(void *)(v138 + 8) = 0xD000000000000025;
          *(void *)(v138 + 16) = 0x80000001007CE790;
          uint64_t v184 = v137;
          swift_willThrow();
          uint64_t v36 = (uint64_t)v187;
          uint64_t v139 = *v187;
          (*v187)(v190, v50);
          v139(v183, v50);
          uint64_t v140 = &v195;
          goto LABEL_66;
        }
        uint64_t v79 = v78;
        swift_retain();
        uint64_t v65 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = sub_10030A560(0, v49[2] + 1, 1, v49);
        }
        unint64_t v81 = v49[2];
        unint64_t v80 = v49[3];
        unint64_t v82 = v81 + 1;
        uint64_t v83 = v169;
        if (v81 >= v80 >> 1) {
          uint64_t v49 = sub_10030A560((void *)(v80 > 1), v81 + 1, 1, v49);
        }
        uint64_t v196 = v77;
        unint64_t v197 = &protocol witness table for REMAnchoredBubbleModel;
        goto LABEL_35;
      case 2uLL:
        URL.appendingPathComponent(_:isDirectory:)();
        uint64_t v84 = type metadata accessor for REMRegExTextClassifier();
        (*v185)();
        swift_bridgeObjectRetain();
        uint64_t v85 = v184;
        uint64_t v86 = REMRegExTextClassifier.__allocating_init(modelURL:numOfClasses:labels:)();
        uint64_t v184 = v85;
        if (v85)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v36 = (uint64_t)v187;
          uint64_t v141 = *v187;
          (*v187)(v190, v50);
          v141(v183, v50);
          v141(v167, v50);
          sub_1000F5C48((uint64_t)&v193);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v36;
        }
        uint64_t v79 = v86;
        swift_retain();
        uint64_t v65 = v48;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = sub_10030A560(0, v49[2] + 1, 1, v49);
        }
        unint64_t v81 = v49[2];
        unint64_t v87 = v49[3];
        unint64_t v82 = v81 + 1;
        uint64_t v83 = v167;
        if (v81 >= v87 >> 1) {
          uint64_t v49 = sub_10030A560((void *)(v87 > 1), v81 + 1, 1, v49);
        }
        uint64_t v196 = v84;
        unint64_t v197 = (void *)sub_1001E82F0(&qword_10090F800, (void (*)(uint64_t))&type metadata accessor for REMRegExTextClassifier);
LABEL_35:
        *(void *)&long long v194 = v79;
        v49[2] = v82;
        sub_1000967D4(&v194, (uint64_t)&v49[5 * v81 + 4]);
        swift_release();
        (*v187)(v83, v50);
LABEL_36:
        uint64_t v48 = v65;
        goto LABEL_43;
      case 3uLL:
        if (v165)
        {
          uint64_t v88 = (objc_class *)type metadata accessor for REMGroceryDummyModel();
          id v89 = objc_allocWithZone(v88);
          swift_bridgeObjectRetain();
          uint64_t v90 = REMGroceryDummyModel.init(labels:)();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v49 = sub_10030A560(0, v49[2] + 1, 1, v49);
          }
          unint64_t v92 = v49[2];
          unint64_t v91 = v49[3];
          if (v92 >= v91 >> 1) {
            uint64_t v49 = sub_10030A560((void *)(v91 > 1), v92 + 1, 1, v49);
          }
          uint64_t v196 = (uint64_t)v88;
          unint64_t v197 = &protocol witness table for REMGroceryDummyModel;
          *(void *)&long long v194 = v90;
          v49[2] = v92 + 1;
          sub_1000967D4(&v194, (uint64_t)&v49[5 * v92 + 4]);
LABEL_43:
          uint64_t v51 = v188;
LABEL_44:
          uint64_t v47 = v186;
LABEL_7:
          uint64_t v45 = v192 - 1;
          if (v192 == 1) {
            goto LABEL_55;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000F5C48((uint64_t)&v193);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1001E8024();
        uint64_t v142 = swift_allocError();
        *(unsigned char *)uint64_t v143 = 3;
        unint64_t v144 = 0xD000000000000026;
        uint64_t v145 = "Dummy model missing global corrections";
LABEL_65:
        *(void *)(v143 + 8) = v144;
        *(void *)(v143 + 16) = (unint64_t)(v145 - 32) | 0x8000000000000000;
        uint64_t v184 = v142;
        swift_willThrow();
        uint64_t v36 = (uint64_t)v187;
        uint64_t v139 = *v187;
        (*v187)(v190, v50);
        uint64_t v140 = (char *)v209;
LABEL_66:
        v139(*((char **)v140 - 32), v50);
        return v36;
      case 4uLL:
        if (!v175)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000F5C48((uint64_t)&v193);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1001E8024();
          uint64_t v142 = swift_allocError();
          *(unsigned char *)uint64_t v143 = 4;
          unint64_t v144 = 0xD000000000000028;
          uint64_t v145 = "Missing siriEmbeddingVersion for siriOwl";
          goto LABEL_65;
        }
        uint64_t v174 = v48;
        swift_bridgeObjectRetain();
        int64_t v93 = v176;
        URL.appendingPathComponent(_:isDirectory:)();
        uint64_t v94 = v161;
        uint64_t v95 = v57;
        if (!v57)
        {
          uint64_t v95 = swift_bridgeObjectRetain();
          uint64_t v94 = v172;
        }
        uint64_t v164 = v94;
        uint64_t v179 = (void *)v95;
        uint64_t v96 = v173;
        ((void (*)(char *, char *, uint64_t))*v185)(v173, v93, v50);
        uint64_t v97 = v181;
        uint64_t v98 = *(void *)(v181 + 16);
        id v99 = objc_allocWithZone((Class)MLModelConfiguration);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v100 = [v99 init];
        [v100 setComputeUnits:2];
        id v101 = v100;
        URL._bridgeToObjectiveC()(v102);
        char v104 = v103;
        uint64_t v105 = self;
        *(void *)&long long v194 = 0;
        uint64_t v106 = v50;
        id v107 = [v105 modelWithContentsOfURL:v104 configuration:v101 error:&v194];

        if (!v107)
        {
          id v146 = (id)v194;
          uint64_t v147 = _convertNSErrorToError(_:)();

          uint64_t v184 = v147;
          swift_willThrow();

          uint64_t v36 = (uint64_t)v187;
          uint64_t v148 = *v187;
          (*v187)(v96, v106);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v148(v190, v106);
          v148(v183, v106);
          v148(v176, v106);
          sub_1000F5C48((uint64_t)&v193);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v36;
        }
        id v108 = (id)v194;

        uint64_t v109 = v98;
        uint64_t v110 = type metadata accessor for REMOwlEmbeddingClassifier();
        uint64_t v111 = (void *)swift_allocObject();
        v111[3] = [objc_allocWithZone((Class)CDMClient) init];
        Locale.init(identifier:)();

        uint64_t v112 = (void *)((char *)v111 + OBJC_IVAR____TtC7remindd25REMOwlEmbeddingClassifier_embeddingVersion);
        uint64_t v113 = v175;
        *uint64_t v112 = v160;
        v112[1] = v113;
        v111[4] = v107;
        v111[5] = v109;
        v111[2] = v97;
        uint64_t v114 = *v187;
        (*v187)(v96, v106);
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v49 = sub_10030A560(0, v49[2] + 1, 1, v49);
        }
        unint64_t v115 = v176;
        uint64_t v51 = v188;
        unint64_t v117 = v49[2];
        unint64_t v116 = v49[3];
        if (v117 >= v116 >> 1) {
          uint64_t v49 = sub_10030A560((void *)(v116 > 1), v117 + 1, 1, v49);
        }
        uint64_t v196 = v110;
        unint64_t v197 = (void *)sub_1001E82F0(&qword_10090F7F8, (void (*)(uint64_t))type metadata accessor for REMOwlEmbeddingClassifier);
        *(void *)&long long v194 = v111;
        v49[2] = v117 + 1;
        sub_1000967D4(&v194, (uint64_t)&v49[5 * v117 + 4]);
        swift_release();
        uint64_t v50 = v189;
        v114(v115, v189);
        uint64_t v48 = v174;
        goto LABEL_44;
      default:
        if (qword_100907110 != -1) {
          swift_once();
        }
        uint64_t v70 = type metadata accessor for Logger();
        sub_10008E2DC(v70, (uint64_t)qword_10090F510);
        ((void (*)(char *, char *, uint64_t))*v185)(v58, v190, v50);
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = swift_slowAlloc();
          uint64_t v179 = v49;
          uint64_t v74 = v73;
          *(void *)&long long v194 = swift_slowAlloc();
          *(_DWORD *)uint64_t v74 = v171;
          *(void *)(v74 + 4) = v57;
          *(_WORD *)(v74 + 12) = 2080;
          uint64_t v75 = URL.description.getter();
          *(void *)(v74 + 14) = sub_1000C51B8(v75, v76, (uint64_t *)&v194);
          swift_bridgeObjectRelease();
          (*v187)(v191, v189);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "Invalid model type value %ld found in model info file %s}.", (uint8_t *)v74, 0x16u);
          swift_arrayDestroy();
          uint64_t v50 = v189;
          swift_slowDealloc();
          uint64_t v49 = v179;
          swift_slowDealloc();
        }
        else
        {
          (*v187)(v58, v50);
        }

        uint64_t v51 = v188;
        goto LABEL_7;
    }
  }
}

uint64_t sub_1001E68F4(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v85 = a1;
  uint64_t v86 = a2;
  uint64_t v77 = type metadata accessor for URL();
  uint64_t v79 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v75 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v74 = (char *)v65 - v7;
  __chkstk_darwin(v8);
  unint64_t v76 = (char *)v65 - v9;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v65 - v11;
  __chkstk_darwin(v13);
  uint64_t v78 = (char *)v65 - v14;
  __chkstk_darwin(v15);
  unint64_t v82 = (char *)v65 - v16;
  uint64_t v17 = type metadata accessor for REMGroceryLocaleMapping.LocaleSetting();
  uint64_t v80 = *(void *)(v17 - 8);
  uint64_t v81 = v17;
  __chkstk_darwin(v17);
  unint64_t v87 = (char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for REMGroceryLocaleMapping();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v83 = v19;
  uint64_t v84 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for REMTrialNamespace();
  uint64_t v24 = *(void *)(v23 - 8);
  __n128 v25 = __chkstk_darwin(v23);
  char v27 = (char *)v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v73 = v12;
    uint64_t v28 = a3;
  }
  else
  {
    type metadata accessor for REMTrialClient();
    uint64_t v29 = swift_allocObject();
    uint64_t v33 = REMTrialClient.init()();
    if (v3) {
      return v29;
    }
    uint64_t v28 = v33;
    uint64_t v73 = v12;
  }
  (*(void (**)(char *, void, uint64_t, __n128))(v24 + 104))(v27, enum case for REMTrialNamespace.grocery(_:), v23, v25);
  swift_retain();
  uint64_t v29 = v28;
  uint64_t v30 = dispatch thunk of REMTrialClient.deploymentId(for:)();
  unint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
  dispatch thunk of REMTrialClient.loadGroceryLocaleMapping()();
  if (v3)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v72 = v30;
    REMGroceryLocaleMapping.localeSetting(for:)();
    unint64_t v34 = v32;
    REMGroceryLocaleMapping.LocaleSetting.base.getter();
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)();
    swift_bridgeObjectRelease();
    REMGroceryLocaleMapping.LocaleSetting.meta.getter();
    dispatch thunk of REMTrialClient.groceryDirectoryURL(for:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = v77;
    if (qword_100907110 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10090F510);
    uint64_t v39 = v79 + 16;
    uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    v38(v73, v82, v36);
    uint64_t v70 = v38;
    uint64_t v71 = v39;
    v38(v76, v78, v36);
    swift_bridgeObjectRetain_n();
    unint64_t v40 = (unint64_t)v86;
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    int v43 = v42;
    BOOL v44 = os_log_type_enabled(v41, v42);
    unint64_t v69 = v34;
    if (v44)
    {
      uint64_t v45 = swift_slowAlloc();
      os_log_t v67 = v41;
      uint64_t v46 = v45;
      uint64_t v68 = swift_slowAlloc();
      uint64_t v90 = v68;
      *(_DWORD *)uint64_t v46 = 136446978;
      int v66 = v43;
      swift_bridgeObjectRetain();
      uint64_t v88 = sub_1000C51B8(v72, v34, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v88 = sub_1000C51B8(v85, v40, &v90);
      v65[1] = &v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v46 + 22) = 2082;
      uint64_t v47 = v73;
      uint64_t v48 = URL.absoluteString.getter();
      uint64_t v88 = sub_1000C51B8(v48, v49, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v79 + 8);
      v50(v47, v77);
      *(_WORD *)(v46 + 32) = 2082;
      uint64_t v51 = v76;
      uint64_t v52 = URL.absoluteString.getter();
      uint64_t v88 = sub_1000C51B8(v52, v53, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v86 = v50;
      v50(v51, v77);
      uint64_t v36 = v77;
      os_log_t v54 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v66, "loading model from Trial {deploymentId: %{public}s, locale: %{public}s, base directory: %{public}s, meta directory: %{public}s}", (uint8_t *)v46, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      unint64_t v55 = *(void (**)(char *, uint64_t))(v79 + 8);
      v55(v73, v36);
      uint64_t v86 = v55;
      v55(v76, v36);
    }
    uint64_t v56 = v74;
    uint64_t v57 = v70;
    v70(v74, v82, v36);
    char v58 = v75;
    unint64_t v59 = v78;
    v57(v75, v78, v36);
    char v60 = v87;
    uint64_t v61 = REMGroceryLocaleMapping.LocaleSetting.meta.getter();
    uint64_t v29 = sub_1001E5204(v56, v58, v61, v62, v72, v69);
    swift_release();
    uint64_t v63 = v59;
    uint64_t v64 = v86;
    v86(v63, v36);
    v64(v82, v36);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v22, v83);
  }
  return v29;
}

void _s7remindd20REMGroceryClassifierC26requestNLAssetsIfNecessary11modelLocaleySS_tFZ_0()
{
  uint64_t v0 = type metadata accessor for Locale.Components();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)();
  v4._NSString rawValue = Locale.Components.rem_language()()._rawValue;
  uint64_t v5 = self;
  id v6 = [v5 availableTagSchemesForUnit:0 language:v4._rawValue];
  type metadata accessor for NLTagScheme(0);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = NLTagSchemeNameTypeOrLexicalClass;
  char v9 = sub_1001BD908((uint64_t)v8, v7);
  swift_bridgeObjectRelease();

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (__C::NLLanguage *)swift_allocObject();
    v10[2]._NSString rawValue = v4._rawValue;
    __n128 v25 = sub_1001E8370;
    uint64_t v26 = v10;
    aBlock = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    uint64_t v23 = sub_1001D854C;
    uint64_t v24 = &unk_1008BE1D8;
    uint64_t v11 = _Block_copy(&aBlock);
    uint64_t v12 = v0;
    NSString v13 = v4._rawValue;
    swift_release();
    NSString v14 = v13;
    uint64_t v0 = v12;
    [v5 requestAssetsForLanguage:v14 tagScheme:v8 completionHandler:v11];
    _Block_release(v11);
  }
  id v15 = [v5 availableTagSchemesForUnit:0 language:v4._rawValue];
  uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = NLTagSchemeLemma;
  LOBYTE(v15) = sub_1001BD908((uint64_t)v17, v16);
  swift_bridgeObjectRelease();

  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    uint64_t v18 = (__C::NLLanguage *)swift_allocObject();
    v18[2]._NSString rawValue = v4._rawValue;
    __n128 v25 = sub_1001E83C4;
    uint64_t v26 = v18;
    aBlock = _NSConcreteStackBlock;
    uint64_t v22 = 1107296256;
    uint64_t v23 = sub_1001D854C;
    uint64_t v24 = &unk_1008BE228;
    uint64_t v19 = _Block_copy(&aBlock);
    NSString v20 = v4._rawValue;
    swift_release();
    [v5 requestAssetsForLanguage:v20 tagScheme:v17 completionHandler:v19];
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
}

uint64_t sub_1001E75A4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_1000C6EF4;
  return sub_1001DC3F0(a1, a2, a3, v9, v8);
}

unint64_t sub_1001E766C()
{
  unint64_t result = qword_10090F598;
  if (!qword_10090F598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F598);
  }
  return result;
}

uint64_t sub_1001E76C4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for REMGroceryClassifierError(uint64_t a1)
{
  return sub_1001E76EC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1001E76EC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7remindd25REMGroceryClassifierErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001E76C4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifierError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1001E76C4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001E76EC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for REMGroceryClassifierError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001E76EC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifierError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifierError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001E787C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifierError()
{
  return &type metadata for REMGroceryClassifierError;
}

unsigned char *storeEnumTagSinglePayload for REMGroceryModelType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E7960);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryModelType()
{
  return &type metadata for REMGroceryModelType;
}

uint64_t sub_1001E799C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifierLoadingError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RDSavedDueDateDeltaAlert(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifierLoadingError(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for REMGroceryClassifierLoadingError()
{
  return &type metadata for REMGroceryClassifierLoadingError;
}

uint64_t type metadata accessor for REMGroceryClassifier()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for REMGroceryClassifier.GlobalCorrections(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for REMGroceryClassifier.GlobalCorrections()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for REMGroceryClassifier.GlobalCorrections(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for REMGroceryClassifier.GlobalCorrections(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.GlobalCorrections()
{
  return &type metadata for REMGroceryClassifier.GlobalCorrections;
}

uint64_t destroy for REMGroceryClassifier.PredictionResult()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.PredictionResult(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.PredictionResult(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.PredictionResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.PredictionResult()
{
  return &type metadata for REMGroceryClassifier.PredictionResult;
}

unint64_t sub_1001E7E28()
{
  unint64_t result = qword_10090F630;
  if (!qword_10090F630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F630);
  }
  return result;
}

unint64_t sub_1001E7E7C()
{
  unint64_t result = qword_10090F638;
  if (!qword_10090F638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F638);
  }
  return result;
}

unint64_t sub_1001E7ED0()
{
  unint64_t result = qword_10090F670;
  if (!qword_10090F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F670);
  }
  return result;
}

unint64_t sub_1001E7F24()
{
  unint64_t result = qword_10090F680;
  if (!qword_10090F680)
  {
    sub_100096058(&qword_10090F678);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F680);
  }
  return result;
}

uint64_t sub_1001E7F98(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1001E7FAC(uint64_t a1)
{
  return a1;
}

unint64_t sub_1001E8024()
{
  unint64_t result = qword_10090F7F0;
  if (!qword_10090F7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F7F0);
  }
  return result;
}

unint64_t sub_1001E8078()
{
  unint64_t result = qword_10090F808;
  if (!qword_10090F808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10090F808);
  }
  return result;
}

uint64_t sub_1001E80CC()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001E811C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_1000C6EF4;
  return sub_1001DC738(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001E81F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = 0;
  for (uint64_t i = (void *)(a1 + 48); ; i += 6)
  {
    BOOL v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      break;
    }
    if (v3 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1001E828C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001E82B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001DD3AC(a1, a2, a3, *(unsigned char *)(v3 + 16), *(unsigned char *)(v3 + 17), *(void *)(v3 + 24), *(void ***)(v3 + 32)) & 1;
}

uint64_t sub_1001E82F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E8338()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001E8370(uint64_t a1, uint64_t a2)
{
  sub_1001D85C4(a1, a2, *(void **)(v2 + 16), "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) not available", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) error in loading asset", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) unknown result: %s", "REMGroceryClassifier.requestAssets(%s, nameTypeOrLexicalClass) error: %@");
}

uint64_t sub_1001E83AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E83BC()
{
  return swift_release();
}

void sub_1001E83C4(uint64_t a1, uint64_t a2)
{
  sub_1001D85C4(a1, a2, *(void **)(v2 + 16), "REMGroceryClassifier.requestAssets(%s, lemma) not available", "REMGroceryClassifier.requestAssets(%s, lemma) error in loading asset", "REMGroceryClassifier.requestAssets(%s, lemma) unknown result: %s", "REMGroceryClassifier.requestAssets(%s, lemma) error: %@");
}

unsigned char *storeEnumTagSinglePayload for REMGroceryClassifier.GlobalCorrections.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E84CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.GlobalCorrections.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.GlobalCorrections.CodingKeys;
}

uint64_t destroy for REMGroceryClassifier.ModelInfoV2()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.ModelInfoV2(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfoV2()
{
  return &type metadata for REMGroceryClassifier.ModelInfoV2;
}

uint64_t destroy for REMGroceryClassifier.ModelInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  uint64_t v6 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v6;
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  return a1;
}

__n128 initializeWithTake for REMGroceryClassifier.ModelInfo(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for REMGroceryClassifier.ModelInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 114)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 114) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 114) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfo()
{
  return &type metadata for REMGroceryClassifier.ModelInfo;
}

unint64_t sub_1001E8B4C()
{
  unint64_t result = qword_10090F870;
  if (!qword_10090F870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F870);
  }
  return result;
}

unint64_t sub_1001E8BA4()
{
  unint64_t result = qword_10090F878;
  if (!qword_10090F878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F878);
  }
  return result;
}

unint64_t sub_1001E8BFC()
{
  unint64_t result = qword_10090F880;
  if (!qword_10090F880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F880);
  }
  return result;
}

unint64_t sub_1001E8C50()
{
  unint64_t result = qword_10090F890;
  if (!qword_10090F890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F890);
  }
  return result;
}

uint64_t sub_1001E8CA4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001E8D08()
{
  unint64_t result = qword_10090F8C0;
  if (!qword_10090F8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8C0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfoV2.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E8EB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfoV2.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.ModelInfoV2.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for REMGroceryClassifier.ModelInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *unint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001E8FBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for REMGroceryClassifier.ModelInfo.CodingKeys()
{
  return &type metadata for REMGroceryClassifier.ModelInfo.CodingKeys;
}

unint64_t sub_1001E8FF8()
{
  unint64_t result = qword_10090F8C8;
  if (!qword_10090F8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8C8);
  }
  return result;
}

unint64_t sub_1001E9050()
{
  unint64_t result = qword_10090F8D0;
  if (!qword_10090F8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8D0);
  }
  return result;
}

unint64_t sub_1001E90A8()
{
  unint64_t result = qword_10090F8D8;
  if (!qword_10090F8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8D8);
  }
  return result;
}

unint64_t sub_1001E9100()
{
  unint64_t result = qword_10090F8E0;
  if (!qword_10090F8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8E0);
  }
  return result;
}

unint64_t sub_1001E9158()
{
  unint64_t result = qword_10090F8E8;
  if (!qword_10090F8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8E8);
  }
  return result;
}

unint64_t sub_1001E91B0()
{
  unint64_t result = qword_10090F8F0;
  if (!qword_10090F8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090F8F0);
  }
  return result;
}

void *sub_1001E921C()
{
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100776E40;
  v2._object = (void *)0x80000001007C68D0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 58;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  Date.timeIntervalSinceReferenceDate.getter();
  Double.write<A>(to:)();
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(void *)&long long v14 = 0xD000000000000018;
  *((void *)&v14 + 1) = 0x80000001007CE8C0;
  v4._uint64_t countAndFlagsBits = sub_1001E9490(*(void *)(v0
                                                  + OBJC_IVAR____TtC7remindd29RDSecondaryGroceryLocalesInfo_secondaryGroceryLocales));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v15 = &type metadata for String;
  unint64_t v6 = *(void *)(v1 + 16);
  unint64_t v5 = *(void *)(v1 + 24);
  if (v6 >= v5 >> 1) {
    uint64_t v1 = (uint64_t)sub_1003090C0((void *)(v5 > 1), v6 + 1, 1, (void *)v1);
  }
  *(void *)(v1 + 16) = v6 + 1;
  sub_10009A1A0(&v14, (_OWORD *)(v1 + 32 * v6 + 32));
  int v8 = self;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)&long long v14 = 0;
  id v10 = [v8 dataWithJSONObject:isa options:0 error:&v14];

  id v11 = (id)v14;
  if (v10)
  {
    uint64_t v12 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v12 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1001E9490(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    int64_t v6 = *(void *)(a1 + 16);
    if (v6)
    {
      uint64_t v41 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1001DE058(0, v6, 0);
      int v8 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      uint64_t v7 = v3 + 16;
      uint64_t v9 = a1 + ((*(unsigned __int8 *)(v7 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 64));
      uint64_t v38 = *(void *)(v7 + 56);
      uint64_t v39 = v8;
      uint64_t v40 = v7;
      id v10 = (void (**)(char *, uint64_t))(v7 - 8);
      do
      {
        v39(v5, v9, v2);
        uint64_t v11 = Locale.identifier.getter();
        uint64_t v13 = v12;
        (*v10)(v5, v2);
        uint64_t v14 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE058(0, *(void *)(v14 + 16) + 1, 1);
          uint64_t v14 = v41;
        }
        unint64_t v16 = *(void *)(v14 + 16);
        unint64_t v15 = *(void *)(v14 + 24);
        if (v16 >= v15 >> 1)
        {
          sub_1001DE058(v15 > 1, v16 + 1, 1);
          uint64_t v14 = v41;
        }
        *(void *)(v14 + 16) = v16 + 1;
        unint64_t v17 = v14 + 16 * v16;
        *(void *)(v17 + 32) = v11;
        *(void *)(v17 + 40) = v13;
        v9 += v38;
        --v6;
      }
      while (v6);
    }
    uint64_t v18 = sub_100308F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v20 = v18[2];
    unint64_t v19 = v18[3];
    if (v20 >= v19 >> 1) {
      uint64_t v18 = sub_100308F88((void *)(v19 > 1), v20 + 1, 1, v18);
    }
    v18[2] = v20 + 1;
    uint64_t v21 = &v18[2 * v20];
    v21[4] = 0xD000000000000013;
    v21[5] = 0x80000001007CE8E0;
    uint64_t v41 = 0x3A73656C61636F6CLL;
    unint64_t v42 = 0xE800000000000000;
    uint64_t v22 = Array.description.getter();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    v25._uint64_t countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = v41;
    unint64_t v26 = v42;
    unint64_t v29 = v18[2];
    unint64_t v28 = v18[3];
    if (v29 >= v28 >> 1) {
      uint64_t v18 = sub_100308F88((void *)(v28 > 1), v29 + 1, 1, v18);
    }
    v18[2] = v29 + 1;
    uint64_t v30 = &v18[2 * v29];
    v30[4] = v27;
    unint64_t v31 = v30 + 4;
  }
  else
  {
    uint64_t v18 = sub_100308F88(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v33 = v18[2];
    unint64_t v32 = v18[3];
    if (v33 >= v32 >> 1) {
      uint64_t v18 = sub_100308F88((void *)(v32 > 1), v33 + 1, 1, v18);
    }
    v18[2] = v33 + 1;
    unint64_t v34 = &v18[2 * v33];
    v34[4] = 0xD000000000000012;
    unint64_t v31 = v34 + 4;
    unint64_t v26 = 0x80000001007CE900;
  }
  v31[1] = v26;
  uint64_t v41 = (uint64_t)v18;
  sub_100094134((uint64_t *)&unk_10090AFB0);
  sub_1001E98BC();
  uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v35;
}

void *sub_1001E9824()
{
  return sub_1001E921C();
}

uint64_t sub_1001E9848@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for REMChecksumAlgorithm.sha512(_:);
  uint64_t v3 = type metadata accessor for REMChecksumAlgorithm();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

unint64_t sub_1001E98BC()
{
  unint64_t result = qword_10090B200;
  if (!qword_10090B200)
  {
    sub_100096058((uint64_t *)&unk_10090AFB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090B200);
  }
  return result;
}

uint64_t sub_1001E9918()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F8F8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F8F8);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1001E99E0()
{
}

uint64_t type metadata accessor for RDTodayNotificationAssembly()
{
  return self;
}

uint64_t sub_1001E9A28()
{
  if (*(unsigned char *)(v0 + 24))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v1 = v0;
    *(unsigned char *)(v0 + 24) = 1;
    if (qword_100907120 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10090F9B0);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting XPC Event Stream", v5, 2u);
      swift_slowDealloc();
    }

    int64_t v6 = *(NSObject **)(v1 + 16);
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = sub_1001EDC90;
    aBlock[5] = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100594E04;
    aBlock[3] = &unk_1008BE590;
    int v8 = _Block_copy(aBlock);
    swift_retain_n();
    swift_release();
    xpc_set_event_stream_handler("com.apple.alarm", v6, v8);
    _Block_release(v8);
    return swift_release_n();
  }
  return result;
}

uint64_t sub_1001E9C34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090F9B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090F9B0);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_1001E9CFC()
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  type metadata accessor for UUID();
  sub_1001EC1CC((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0xD000000000000017;
}

Swift::Int sub_1001E9DE0()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E9E68()
{
  type metadata accessor for UUID();
  sub_1001EC1CC((unint64_t *)&qword_100913920, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1001E9EEC()
{
  return Hasher._finalize()();
}

uint64_t sub_1001E9F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a1;
  uint64_t v8 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  uint64_t v33 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __n128 v16 = __chkstk_darwin(v14);
  uint64_t v18 = (unint64_t *)((char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v19 = *(void **)(v5 + 16);
  *uint64_t v18 = (unint64_t)v19;
  (*(void (**)(unint64_t *, void, uint64_t, __n128))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14, v16);
  id v20 = v19;
  unint64_t v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(unint64_t *, uint64_t))(v15 + 8))(v18, v14);
  if (v21)
  {
    UUID.init()();
    sub_1001EC100(a5, (uint64_t)v13, type metadata accessor for RDXPCEventStream.Token);
    uint64_t v22 = &v13[*(int *)(v8 + 20)];
    *(void *)uint64_t v22 = v30;
    *((void *)v22 + 1) = a2;
    uint64_t v23 = &v13[*(int *)(v8 + 24)];
    uint64_t v24 = v32;
    *(void *)uint64_t v23 = v31;
    *((void *)v23 + 1) = v24;
    sub_1001EC100((uint64_t)v13, (uint64_t)v10, type metadata accessor for RDXPCEventStream.AlarmHandler);
    uint64_t v18 = (unint64_t *)(v5 + 32);
    swift_beginAccess();
    unint64_t v21 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v5 + 32) = v21;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  unint64_t v21 = sub_100308CD4(0, *(void *)(v21 + 16) + 1, 1, v21);
  *uint64_t v18 = v21;
LABEL_3:
  unint64_t v27 = *(void *)(v21 + 16);
  unint64_t v26 = *(void *)(v21 + 24);
  if (v27 >= v26 >> 1)
  {
    unint64_t v21 = sub_100308CD4(v26 > 1, v27 + 1, 1, v21);
    *uint64_t v18 = v21;
  }
  *(void *)(v21 + 16) = v27 + 1;
  sub_1001EC168((uint64_t)v10, v21+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(void *)(v33 + 72) * v27);
  swift_endAccess();
  return sub_1001EDAF8((uint64_t)v13, type metadata accessor for RDXPCEventStream.AlarmHandler);
}

uint64_t sub_1001EA280(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v2 + 16);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t, __n128))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4, v6);
  id v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    __chkstk_darwin(result);
    *(&v13 - 2) = a1;
    swift_beginAccess();
    uint64_t result = sub_1001EC5F0((uint64_t (*)(unint64_t))sub_1001EC214);
    uint64_t v12 = *(void *)(*(void *)(v2 + 32) + 16);
    if (v12 >= result)
    {
      sub_1001ED8E0(result, v12, (uint64_t (*)(void))sub_100308CD4, type metadata accessor for RDXPCEventStream.AlarmHandler);
      return swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001EA440(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RDXPCEventStream.Alarm(0);
  __chkstk_darwin(v4);
  __n128 v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void **)(v2 + 16);
  *id v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  Date.timeIntervalSince1970.getter();
  double v14 = ceil(v13);
  if (v14 >= 9.22337204e18)
  {
    if (qword_100907120 == -1)
    {
LABEL_11:
      uint64_t v21 = type metadata accessor for Logger();
      sub_10008E2DC(v21, (uint64_t)qword_10090F9B0);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v17, v18))
      {
LABEL_14:

        return;
      }
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      id v20 = "Not scheduling alarm because timeIntervalInSeconds > Int64.max";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v20, v19, 2u);
      swift_slowDealloc();
      goto LABEL_14;
    }
LABEL_24:
    swift_once();
    goto LABEL_11;
  }
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0) {
    goto LABEL_22;
  }
  if (v14 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int64_t v15 = 1000000000 * (uint64_t)v14;
  if ((unsigned __int128)((uint64_t)v14 * (__int128)1000000000) >> 64 != v15 >> 63)
  {
    if (qword_100907120 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10090F9B0);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v17, v18)) {
      goto LABEL_14;
    }
    unint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v19 = 0;
    id v20 = "Not scheduling alarm because dateInNanoSeconds > Int64.max";
    goto LABEL_13;
  }
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_date(v22, "Date", v15);
  xpc_dictionary_set_BOOL(v22, "UserVisible", *(unsigned char *)(a1 + 16));
  uint64_t v23 = xpc_copy_description(v22);
  if (qword_100907120 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_10090F9B0);
  sub_1001EC100(a1, (uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
  Swift::String v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  int v27 = v26;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v40[0] = v37;
    *(_DWORD *)uint64_t v28 = 136315394;
    int v36 = v27;
    uint64_t v29 = String.init(cString:)();
    uint64_t v38 = v23;
    uint64_t v39 = sub_1000C51B8(v29, v30, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v31 = Date.description.getter();
    uint64_t v39 = sub_1000C51B8(v31, v32, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001EDAF8((uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v36, "Setting xpc event {xpc_event: %s, date: %s}", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001EDAF8((uint64_t)v6, type metadata accessor for RDXPCEventStream.Alarm);
  }

  swift_slowDealloc();
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void *)(a1 + 8);
  swift_retain();
  swift_unknownObjectRetain();
  sub_1001EA9D0(v33, v34);
  swift_unknownObjectRelease();
}

uint64_t sub_1001EA9D0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    if (v2)
    {
LABEL_7:
      swift_unknownObjectRelease();
      return swift_release();
    }
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) == 0) {
      _StringObject.sharedUTF8.getter();
    }
    sub_1001EDB58();
    if (v2) {
      goto LABEL_7;
    }
LABEL_10:
    swift_release();
    return swift_unknownObjectRelease();
  }
  xpc_set_event();
  swift_release();
  return swift_unknownObjectRelease();
}

void sub_1001EAB00(void *a1)
{
  uint64_t v2 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v64 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  xpc_copy_description(a1);
  uint64_t v67 = String.init(cString:)();
  unint64_t v10 = v9;
  swift_slowDealloc();
  if (qword_100907120 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = sub_10008E2DC(v11, (uint64_t)qword_10090F9B0);
  swift_bridgeObjectRetain_n();
  uint64_t v66 = v12;
  double v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v63 = v3;
  uint64_t v62 = v2;
  if (v15)
  {
    uint64_t v65 = a1;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v61 = (char *)v6;
    uint64_t v17 = (uint8_t *)v16;
    *(void *)&long long v71 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    v70[1] = sub_1000C51B8(v67, v10, (uint64_t *)&v71);
    a1 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received xpc event {xpc_event: %s}", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = (uint64_t)v61;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v19 = Strong;
  id v20 = *(void **)(Strong + 16);
  *uint64_t v8 = v20;
  uint64_t v21 = v64;
  ((void (*)(void *, void, uint64_t))v64[13])(v8, enum case for DispatchPredicate.onQueue(_:), v6);
  id v22 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t))v21[1])(v8, v6);
  if (v20)
  {
    uint64_t v64 = (void *)v10;
    if (qword_100907360 == -1) {
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_9:
  long long v71 = xmmword_100780F40;
  uint64_t v73 = 0;
  v74[0] = 0;
  uint64_t v72 = 0;
  *(void *)((char *)v74 + 6) = 0;
  sub_10036ED54((uint64_t)&v71, 0x6C7070612E6D6F63, 0xEF6D72616C612E65);
  if (!xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    unint64_t v30 = (unint64_t)v64;
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v31, v32))
    {

      swift_release();
      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    swift_bridgeObjectRetain();
    v70[0] = sub_1000C51B8(v67, v30, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v34 = "Received xpc_event missing name {xpc_event: %s}";
    goto LABEL_21;
  }
  uint64_t v61 = v5;
  uint64_t v23 = String.init(cString:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRetain_n();
  os_log_type_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v65 = a1;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    swift_bridgeObjectRetain();
    v70[0] = sub_1000C51B8(v23, v25, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unsetting alarm {eventName: %s}", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  xpc_set_event();
  swift_beginAccess();
  uint64_t v35 = swift_bridgeObjectRetain();
  int v36 = sub_1001ED248(v35, v23, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = v36[2];
  if (!v37)
  {
    swift_bridgeObjectRelease();
    unint64_t v41 = (unint64_t)v64;
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v31, v32))
    {

      swift_bridgeObjectRelease_n();
      swift_release();
      return;
    }
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    v70[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = sub_1000C51B8(v67, v41, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v34 = "Received xpc_event with no handlers -- Dropping {xpc_event: %s}";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v34, v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 134217984;
    v70[0] = v36[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Delivering xpc_event to handlers {handlers.count: %ld}", v40, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  uint64_t v42 = v62;
  v60[1] = v19;
  int v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "os_transaction INIT {name: com.apple.remindd.xpcalarm}", v45, 2u);
    swift_slowDealloc();
  }

  v60[0] = os_transaction_create();
  uint64_t v47 = *(int *)(v42 + 20);
  uint64_t v46 = *(int *)(v42 + 24);
  uint64_t v48 = (uint64_t)v61;
  unint64_t v49 = &v61[v46];
  uint64_t v50 = &v61[v47];
  uint64_t v51 = *(unsigned __int8 *)(v63 + 80);
  uint64_t v64 = v36;
  uint64_t v52 = (uint64_t)v36 + ((v51 + 32) & ~v51);
  uint64_t v67 = *(void *)(v63 + 72);
  unint64_t v53 = v65;
  do
  {
    sub_1001EC100(v52, v48, type metadata accessor for RDXPCEventStream.AlarmHandler);
    os_log_t v54 = *(void (**)(uint64_t, uint64_t, void *))v49;
    uint64_t v55 = *(void *)v50;
    uint64_t v56 = *((void *)v50 + 1);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1001EDAF8(v48, type metadata accessor for RDXPCEventStream.AlarmHandler);
    v54(v55, v56, v53);
    swift_release();
    swift_bridgeObjectRelease();
    v52 += v67;
    --v37;
  }
  while (v37);
  swift_bridgeObjectRelease();
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    unint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "os_transaction RELEASE {name: com.apple.remindd.xpcalarm}", v59, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  swift_unknownObjectRelease();
}

uint64_t sub_1001EB5AC()
{
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDXPCEventStream()
{
  return self;
}

uint64_t type metadata accessor for RDXPCEventStream.SystemXPCEventInterface()
{
  return self;
}

uint64_t sub_1001EB63C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1001EB6A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1001EB70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001EB770(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001EB7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001EB838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001EB89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EB8B0);
}

uint64_t sub_1001EB8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1001EB91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EB930);
}

uint64_t sub_1001EB930(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for RDXPCEventStream.Token(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090FB78);
}

uint64_t sub_1001EB9C0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1001EBA4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    double v13 = (uint64_t *)((char *)v4 + v9);
    os_log_type_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *double v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_1001EBB38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1001EBBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  double v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_1001EBC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001EBD20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1001EBDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_1001EBE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EBE5C);
}

uint64_t sub_1001EBE5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDXPCEventStream.Token(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1001EBF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EBF34);
}

uint64_t sub_1001EBF34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for RDXPCEventStream.Token(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for RDXPCEventStream.AlarmHandler(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090FC08);
}

uint64_t sub_1001EC014()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001EC0B8()
{
  return sub_1001EC1CC(&qword_10090FC48, (void (*)(uint64_t))type metadata accessor for RDXPCEventStream.Token);
}

uint64_t sub_1001EC100(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001EC168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EC1CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001EC214()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1001EC244(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Observer(0) - 8;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v34 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v33 = (uint64_t)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v35 = (uint64_t)&v30 - v11;
  unint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v31 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    unint64_t v30 = v1;
    uint64_t v32 = v15;
    while (v21 < v19)
    {
      id v22 = v3;
      uint64_t v36 = v20;
      uint64_t v23 = v35;
      sub_1001EC100(v12 + v20, v35, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
      char v24 = a1(v23);
      uint64_t result = sub_1001EDAF8(v23, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          unint64_t v26 = *v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = sub_1001EC100(v26 + v31 + v16 * v32, v33, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
          if (v21 >= v27) {
            goto LABEL_34;
          }
          sub_1001EC100(v26 + v36, v34, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = v30;
          *unint64_t v30 = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1001ECD54(v26);
            unint64_t v26 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = sub_1001EDB90(v34, v26 + v31 + v16 * v25, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = sub_1001EDB90(v33, *v3 + v36, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      unint64_t v12 = *v3;
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v36 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EC5F0(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for RDXPCEventStream.AlarmHandler(0) - 8;
  __chkstk_darwin(v5);
  uint64_t v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v33 = (uint64_t)&v30 - v8;
  __chkstk_darwin(v9);
  uint64_t v35 = (uint64_t)&v30 - v11;
  unint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v31 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    unint64_t v30 = v1;
    uint64_t v32 = v15;
    while (v21 < v19)
    {
      id v22 = v3;
      uint64_t v36 = v20;
      uint64_t v23 = v35;
      sub_1001EC100(v12 + v20, v35, type metadata accessor for RDXPCEventStream.AlarmHandler);
      char v24 = a1(v23);
      uint64_t result = sub_1001EDAF8(v23, type metadata accessor for RDXPCEventStream.AlarmHandler);
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          unint64_t v26 = *v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = sub_1001EC100(v26 + v31 + v16 * v32, v33, type metadata accessor for RDXPCEventStream.AlarmHandler);
          if (v21 >= v27) {
            goto LABEL_34;
          }
          sub_1001EC100(v26 + v36, v34, type metadata accessor for RDXPCEventStream.AlarmHandler);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = v30;
          *unint64_t v30 = v26;
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1001ECDD0(v26);
            unint64_t v26 = result;
            *uint64_t v3 = result;
          }
          if (v16 >= *(void *)(v26 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = sub_1001EDB90(v34, v26 + v31 + v16 * v25, type metadata accessor for RDXPCEventStream.AlarmHandler);
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = sub_1001EDB90(v33, *v3 + v36, type metadata accessor for RDXPCEventStream.AlarmHandler);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      unint64_t v12 = *v3;
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v36 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001EC99C(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  unint64_t v5 = *v3;
  int64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_100309638(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.DatesModel.Group();
  uint64_t v15 = *(void *)(v14 - 8);
  unint64_t v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  uint64_t v17 = *(void *)(v15 + 72);
  unint64_t v18 = v16 + v17 * a1;
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_35;
  }
  if (v20 < 0)
  {
LABEL_37:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  unint64_t v21 = v18 + v17;
  unint64_t v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  uint64_t v24 = *(void *)(v5 + 16);
  BOOL v25 = __OFADD__(v24, v9);
  uint64_t v26 = v24 + v9;
  if (v25)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  *(void *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1) {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }

  return sub_1001EDBF8(a3);
}

char *sub_1001ECBBC(uint64_t a1, int64_t a2, _OWORD *a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    unint64_t v5 = sub_10030A8D0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = &v5[6 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 3);
    uint64_t v19 = (char *)&v5[6 * a2 + 4];
    if (v14 + 3 != (_OWORD *)v19 || result >= &v19[48 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 48 * v18);
    }
    uint64_t v20 = v5[2];
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      v5[2] = v21;
LABEL_20:
      long long v22 = a3[1];
      *uint64_t v14 = *a3;
      v14[1] = v22;
      void v14[2] = a3[2];
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001ECD54(unint64_t a1)
{
  return sub_100308C8C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001ECD6C(unint64_t a1)
{
  return sub_10030924C(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001ECD80(unint64_t a1)
{
  return sub_100309894(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1001ECD94(void *a1)
{
  return sub_10030A348(0, a1[2], 0, a1);
}

void *sub_1001ECDA8(void *a1)
{
  return sub_100309F10(0, a1[2], 0, a1);
}

void *sub_1001ECDBC(void *a1)
{
  return sub_10030A8D0(0, a1[2], 0, a1);
}

uint64_t sub_1001ECDD0(unint64_t a1)
{
  return sub_100308CD4(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1001ECDE4(void *a1)
{
  return sub_10030AB08(0, a1[2], 0, a1);
}

uint64_t sub_1001ECDF8(unint64_t a1)
{
  return sub_10030B144(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1001ECE0C(void *a1)
{
  return sub_10030B824(0, a1[2], 0, a1);
}

uint64_t sub_1001ECE20(unint64_t a1)
{
  return sub_10030BCA8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001ECE34(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_1001ECEB0(uint64_t a1, uint64_t a2)
{
  return sub_1001ED8E0(a1, a2, (uint64_t (*)(void))sub_100308C8C, type metadata accessor for RDStoreControllerNotificationCenter.Observer);
}

uint64_t sub_1001ECEDC(uint64_t a1, uint64_t a2)
{
  return sub_1001ECF04(a1, a2, (unint64_t *)&qword_10090B040);
}

uint64_t sub_1001ECEF0(uint64_t a1, uint64_t a2)
{
  return sub_1001ECF04(a1, a2, &qword_100910E10);
}

uint64_t sub_1001ECF04(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    uint64_t v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v7 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v8 = (unint64_t *)(v5 - v3);
  if (__OFSUB__(0, v7))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    int64_t v10 = (char *)v8 + v23;
    if (!__OFADD__(v23, v8)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v10 = (char *)(v9 - v7);
  if (__OFADD__(v9, v8)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, (uint64_t)v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    uint64_t v26 = v5;
    uint64_t v7 = (uint64_t)v8;
    uint64_t v8 = v6;
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      int64_t v6 = v8;
      uint64_t v8 = (unint64_t *)v7;
      uint64_t v5 = v26;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  uint64_t v15 = (char *)(v13 + 32 + 8 * v5);
  sub_1000963CC(0, v6);
  swift_arrayDestroy();
  if (v8)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v3;
      if (!__OFSUB__(v24, v3))
      {
LABEL_17:
        if (v17 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v18[8 * v17]) {
          memmove(v15, v18, 8 * v17);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v19 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v20 = (char *)v8 + v19;
          if (!__OFADD__(v19, v8))
          {
LABEL_23:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = (char *)v8 + v25;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v17 = v16 - v3;
      if (!__OFSUB__(v16, v3)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

void *sub_1001ED248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = type metadata accessor for RDXPCEventStream.AlarmHandler(0);
  uint64_t v7 = __chkstk_darwin(v24);
  uint64_t v25 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v22 - v10;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v22 = v3;
    uint64_t v23 = (v14 + 32) & ~v14;
    uint64_t v16 = a1 + v23;
    uint64_t v17 = _swiftEmptyArrayStorage;
    do
    {
      sub_1001EC100(v16, (uint64_t)v11, type metadata accessor for RDXPCEventStream.AlarmHandler);
      uint64_t v18 = &v11[*(int *)(v24 + 20)];
      BOOL v19 = *(void *)v18 == a2 && *((void *)v18 + 1) == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        sub_1001EC168((uint64_t)v11, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001DE758(0, v17[2] + 1, 1);
        }
        uint64_t v17 = v26;
        unint64_t v21 = v26[2];
        unint64_t v20 = v26[3];
        if (v21 >= v20 >> 1)
        {
          sub_1001DE758(v20 > 1, v21 + 1, 1);
          uint64_t v17 = v26;
        }
        _OWORD v17[2] = v21 + 1;
        sub_1001EC168(v25, (uint64_t)v17 + v23 + v21 * v15);
      }
      else
      {
        sub_1001EDAF8((uint64_t)v11, type metadata accessor for RDXPCEventStream.AlarmHandler);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
    return v26;
  }
  return result;
}

uint64_t sub_1001ED47C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_10030A13C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_100094134((uint64_t *)&unk_10090FC60);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001ED5F0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001ED8E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  uint64_t v13 = *(void *)(a4(0) - 8);
  unint64_t v14 = v6 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v16 = v15 * a1;
  unint64_t v17 = v14 + v15 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_28;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    if (v16 < v15 * a2 || v17 >= v14 + v15 * a2 + v20 * v15)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != v15 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v22 = *(void *)(v6 + 16);
    BOOL v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 - v9;
    if (!v23)
    {
      *(void *)(v6 + 16) = v24;
LABEL_22:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RDXPCEventStream.Alarm(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_10090FCD0);
}

uint64_t sub_1001EDAF8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001EDB58()
{
  return xpc_set_event();
}

uint64_t sub_1001EDB90(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001EDBF8(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_10090FC70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001EDC58()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001EDC90(void *a1)
{
}

uint64_t sub_1001EDC98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001EDCA8()
{
  return swift_release();
}

void *sub_1001EDCB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1001EDDA0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1001EDE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1001EDEB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_1001EDF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1001EDFE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1001EE074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001EE088);
}

uint64_t sub_1001EE088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001EE138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001EE14C);
}

uint64_t sub_1001EE14C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001EE1F4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001EE294(uint64_t a1)
{
  uint64_t result = sub_1001F8484(&qword_10090FD58, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t (*sub_1001EE2EC(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_1001F4350(v2, (uint64_t)v6);
  return sub_1001EE3DC;
}

void (*sub_1001EE3E0(void *a1, void *a2))(void *a1)
{
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[4] = a2;
  v4[5] = sub_1001F4474(v4, a2);
  return sub_1001EE44C;
}

void sub_1001EE44C(void *a1)
{
  unint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t (*sub_1001EE49C(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  _OWORD v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1001F4580(v6, a2, a3);
  return sub_1001EE51C;
}

uint64_t (*sub_1001EE520(void *a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  _OWORD v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_1001F4630(v6, a2, a3);
  return sub_1001EE51C;
}

void sub_1001EE5A0(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_1001EE5F4(void *a1))()
{
  uint64_t v2 = malloc(0x40uLL);
  *a1 = v2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = v4;
  v2[5] = v4;
  uint64_t v6 = malloc(*(void *)(v4 + 64));
  v2[6] = v6;
  (*(void (**)(void))(v5 + 16))();
  v2[7] = sub_1001F4750(v2, (uint64_t)v6);
  return sub_1001EE3DC;
}

void sub_1001EE6E4(void *a1)
{
  unint64_t v1 = (void *)*a1;
  uint64_t v2 = *(void **)(*a1 + 48);
  uint64_t v3 = *(void *)(*a1 + 32);
  uint64_t v4 = *(void *)(*a1 + 40);
  (*(void (**)(void, void))(*a1 + 56))(*a1, 0);
  (*(void (**)(void *, uint64_t))(v4 + 8))(v2, v3);
  free(v2);

  free(v1);
}

uint64_t sub_1001EE75C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090FD10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090FD10);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1001EE824(uint64_t a1@<X1>, uint64_t a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v113 = a2;
  uint64_t v100 = a4;
  uint64_t v6 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v6 - 8);
  int64_t v93 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.SectionsModel();
  __chkstk_darwin(v8 - 8);
  uint64_t v94 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.TemplateSectionsModel();
  uint64_t v98 = *(void *)(v10 - 8);
  uint64_t v99 = v10;
  __chkstk_darwin(v10);
  uint64_t v97 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v104 = (char *)&v89 - v13;
  uint64_t v103 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v95 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v96 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v102 = (char *)&v89 - v16;
  __chkstk_darwin(v17);
  id v101 = (char *)&v89 - v18;
  __chkstk_darwin(v19);
  id v107 = (char *)&v89 - v20;
  uint64_t v21 = sub_100094134(&qword_100909C60);
  __chkstk_darwin(v21 - 8);
  uint64_t v92 = (uint64_t)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v106 = (uint64_t)&v89 - v24;
  uint64_t v25 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  __chkstk_darwin(v25 - 8);
  uint64_t v110 = (char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = (void (*)(char *, uint64_t))_s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v109);
  BOOL v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v111 = (id *)((char *)&v89 - v30);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v108 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v115 = (uint64_t)&v89 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration();
  uint64_t v34 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v36 = (char *)&v89 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  os_log_type_t v39 = (char *)&v89 - v38;
  id v112 = a3;
  uint64_t v40 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter();
  id v41 = v114;
  sub_1001EF564(v40, a1, v113);
  if (v41)
  {
  }
  else
  {
    uint64_t v90 = Subtasks;
    uint64_t v113 = 0;
    id v114 = v42;
    unint64_t v91 = (void *)a1;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter();
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.fetchSubtasks.getter();
    int v43 = *(void (**)(char *, uint64_t))(v34 + 8);
    v43(v39, Configuration);
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter();
    uint64_t v44 = (uint64_t)v110;
    REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.sortingStyle.getter();
    v43(v36, Configuration);
    uint64_t v45 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    uint64_t v46 = type metadata accessor for REMRemindersListDataView.SortingDirection();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 104))(v28, v45, v46);
    swift_storeEnumTagMultiPayload();
    uint64_t v47 = v111;
    sub_100520FD4(v44, (uint64_t)v28, (uint64_t)v111);
    uint64_t v48 = v91;
    uint64_t v49 = v113;
    uint64_t v50 = sub_1001F62F0((unint64_t)v40, (uint64_t)v91, v115, v47);
    if (v49)
    {

      sub_1001F8364((uint64_t)v47);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v115, v90);
    }
    else
    {
      uint64_t v51 = (uint64_t)v50;
      id v89 = v40;
      sub_1001F8364((uint64_t)v47);
      (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v115, v90);
      id v52 = [v114 accountID];
      unint64_t v53 = v48;
      id v54 = [v48 persistentStoreOfAccountWithAccountID:v52];
      if (v54)
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v55 = swift_allocObject();
        *(_OWORD *)(v55 + 16) = xmmword_10077A530;
        *(void *)(v55 + 32) = v54;
        uint64_t v116 = v55;
        specialized Array._endMutation()();
      }
      uint64_t v115 = v51;
      uint64_t v56 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter();
      if (qword_100907478 != -1) {
        swift_once();
      }
      uint64_t v57 = (objc_class *)qword_100942200;
      os_log_type_t v58 = (objc_class *)sub_1003DCBA4();
      unint64_t v59 = (objc_class *)sub_1003DD0C4();
      unint64_t v60 = sub_1003DD360((unint64_t)v56, 1, (uint64_t)v53, v57, v58, v59);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v61 = (void *)sub_100200000(v60);
      swift_bridgeObjectRelease();
      sub_10013D83C(v61, v115);
      swift_bridgeObjectRelease();
      uint64_t v62 = v106;
      sub_1001EF8DC(v53, v52, v106);
      id v63 = [v105 fetchResultTokenToDiffAgainst];
      uint64_t v64 = v107;
      sub_1001EFB7C(v63);
      uint64_t v113 = 0;
      id v112 = v52;

      uint64_t v65 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v93, 1, 1, v65);
      REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
      sub_1000BF710(v62, v92, &qword_100909C60);
      id v114 = v114;
      REMRemindersListDataView.TemplateSectionsModel.init(sectionsModel:listRepresentationOfTemplate:manualOrderingID:)();
      if (qword_100907128 != -1) {
        swift_once();
      }
      uint64_t v66 = type metadata accessor for Logger();
      sub_10008E2DC(v66, (uint64_t)qword_10090FD10);
      uint64_t v67 = v95;
      uint64_t v68 = *(id **)(v95 + 16);
      unint64_t v69 = v101;
      uint64_t v70 = v103;
      ((void (*)(char *, char *, uint64_t))v68)(v101, v64, v103);
      long long v71 = v102;
      uint64_t v111 = v68;
      ((void (*)(char *, char *, uint64_t))v68)(v102, v64, v70);
      uint64_t v72 = v115;
      swift_bridgeObjectRetain();
      uint64_t v73 = Logger.logObject.getter();
      int v74 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v73, (os_log_type_t)v74))
      {
        LODWORD(v109) = v74;
        uint64_t v75 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 134218496;
        uint64_t v76 = *(void *)(v72 + 16);
        swift_bridgeObjectRelease();
        uint64_t v116 = v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2048;
        uint64_t v77 = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
        if ((v77 & 0xC000000000000001) != 0) {
          uint64_t v78 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v78 = *(void *)(v77 + 16);
        }
        swift_bridgeObjectRelease();
        uint64_t v83 = *(void (**)(char *, uint64_t))(v67 + 8);
        uint64_t v110 = (char *)((v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v83(v101, v103);
        uint64_t v116 = v78;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v75 + 22) = 2048;
        uint64_t v84 = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
        unint64_t v82 = v96;
        if ((v84 & 0xC000000000000001) != 0) {
          uint64_t v85 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v85 = *(void *)(v84 + 16);
        }
        swift_bridgeObjectRelease();
        uint64_t v70 = v103;
        v83(v102, v103);
        uint64_t v116 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v109, "REMRemindersListDataView.TemplateSectionsInvocation: reminders %ld updated %ld inserted %ld", (uint8_t *)v75, 0x20u);
        swift_slowDealloc();

        uint64_t v81 = v98;
        uint64_t v80 = v99;
        uint64_t v109 = v83;
      }
      else
      {
        uint64_t v79 = *(void (**)(char *, uint64_t))(v67 + 8);
        uint64_t v110 = (char *)((v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        v79(v71, v70);
        uint64_t v109 = v79;
        v79(v69, v70);

        swift_bridgeObjectRelease_n();
        uint64_t v81 = v98;
        uint64_t v80 = v99;
        unint64_t v82 = v96;
      }
      uint64_t v86 = v104;
      (*(void (**)(void))(v81 + 16))();
      unint64_t v87 = v82;
      uint64_t v88 = v107;
      ((void (*)(char *, char *, uint64_t))v111)(v87, v107, v70);
      sub_1001F8484(&qword_10090FD98, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsModel);
      sub_1001F8484((unint64_t *)&unk_10090FDA0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.TemplateSectionsModel);
      REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

      (*(void (**)(char *, uint64_t))(v81 + 8))(v86, v80);
      v109(v88, v70);
      sub_1000966BC(v106, &qword_100909C60);
    }
  }
}

void sub_1001EF564(void *a1, uint64_t a2, uint64_t a3)
{
  id v7 = [objc_allocWithZone((Class)REMListsDataViewInvocation_fetchByTemplateObjectID) initWithTemplateObjectID:a1];
  sub_10016C7F4(a2);
  uint64_t v9 = v8;

  if (v3) {
    return;
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
    [self noSuchObjectErrorWithObjectID:a1];
    swift_willThrow();
LABEL_18:

    return;
  }
  uint64_t v11 = (void *)v10;
  id v23 = v9;
  Class isa = (Class)[v11 accountStorages];
  if (!isa)
  {
    sub_1000963CC(0, &qword_100910180);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  Class v13 = (Class)[v11 listStorages];
  if (!v13)
  {
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    Class v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = self;
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_10077A530;
  *(void *)(v15 + 32) = a1;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  id v22 = a1;
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = [v14 listsFromAccountStorages:isa listStorages:v13 store:a3 requestedListIDs:v16];

  if (!v17)
  {
LABEL_17:
    [self noSuchObjectErrorWithObjectID:v22];
    swift_willThrow();

    goto LABEL_18;
  }
  sub_1000963CC(0, &qword_10090E198);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
LABEL_10:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(v18 + 32);
LABEL_13:
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    REMList.codable.getter();

    return;
  }
  __break(1u);
}

uint64_t sub_1001EF8DC@<X0>(void *a1@<X0>, void *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration();
  uint64_t v10 = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMRemindersListDataView.TemplateSectionsInvocation.Parameters.configuration.getter();
  char ManualOrdering = REMRemindersListDataView.TemplateSectionsInvocation.Parameters.FetchConfiguration.shouldFetchManualOrderingID.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, Configuration);
  if (ManualOrdering)
  {
    uint64_t v14 = (void *)REMRemindersListDataView.TemplateSectionsInvocation.Parameters.templateObjectID.getter();
    id v15 = [v14 uuid];

    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    id v19 = sub_100529EE0((void *)6, v16, v18, v25, a1);
    if (!v19) {
      id v19 = [self newObjectID];
    }
    uint64_t v20 = v19;
    REMObjectID.codable.getter();
    REMManualOrdering.ManualOrderingID.init(objectID:listType:listID:)();

    uint64_t v21 = type metadata accessor for REMManualOrdering.ManualOrderingID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 0, 1, v21);
  }
  else
  {
    uint64_t v23 = type metadata accessor for REMManualOrdering.ManualOrderingID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a3, 1, 1, v23);
  }
}

void sub_1001EFB7C(void *a1)
{
  if (!a1)
  {
    uint64_t v2 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      goto LABEL_94;
    }
LABEL_105:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
    }
    else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
    {
      goto LABEL_94;
    }
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
LABEL_95:
      if (_CocoaArrayWrapper.endIndex.getter())
      {
        sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
        goto LABEL_98;
      }
LABEL_97:
      if ((v2 & 0xC000000000000000) == 0)
      {
LABEL_101:
        REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)();
        return;
      }
LABEL_98:
      if (_CocoaArrayWrapper.endIndex.getter()) {
        sub_10032E994((unint64_t)_swiftEmptyArrayStorage);
      }
      goto LABEL_101;
    }
LABEL_94:
    if ((v2 & 0xC000000000000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_95;
  }
  v97[6] = &_swiftEmptySetSingleton;
  v97[2] = &_swiftEmptySetSingleton;
  v97[3] = &_swiftEmptySetSingleton;
  v97[1] = &_swiftEmptySetSingleton;
  id v3 = a1;
  unint64_t v4 = sub_1005A52C0(v3, (unint64_t)_swiftEmptyArrayStorage);
  uint64_t v86 = v1;
  if (!v1)
  {
    unint64_t v5 = v4;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6)
      {
LABEL_5:
        unint64_t v7 = 0;
        unint64_t v92 = v5 & 0xC000000000000001;
        unint64_t v87 = v5 + 32;
        uint64_t v88 = v5 & 0xFFFFFFFFFFFFFF8;
        id v90 = v3;
        uint64_t v89 = v6;
        while (1)
        {
          if (v92)
          {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (v7 >= *(void *)(v88 + 16)) {
              goto LABEL_104;
            }
            id v8 = *(id *)(v87 + 8 * v7);
          }
          uint64_t v9 = v8;
          if (__OFADD__(v7++, 1))
          {
            __break(1u);
            goto LABEL_103;
          }
          id v11 = [v8 changes];
          if (!v11)
          {
            if (qword_100907128 != -1) {
              swift_once();
            }
            uint64_t v81 = type metadata accessor for Logger();
            sub_10008E2DC(v81, (uint64_t)qword_10090FD10);
            id v82 = v9;
            uint64_t v83 = Logger.logObject.getter();
            os_log_type_t v84 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v83, v84))
            {
              uint64_t v85 = swift_slowAlloc();
              uint64_t v2 = swift_slowAlloc();
              *(_DWORD *)uint64_t v85 = 138412290;
              *(void *)(v85 + 4) = v82;
              *(void *)uint64_t v2 = v82;
              _os_log_impl((void *)&_mh_execute_header, v83, v84, "Skipping transaction because it contains no changes {transaction: %@}", (uint8_t *)v85, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
            }
            goto LABEL_7;
          }
          uint64_t v12 = v11;
          sub_1000963CC(0, &qword_10090FD90);
          unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v93 = v13;
          if (!(v13 >> 62))
          {
            uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v14) {
              break;
            }
            goto LABEL_92;
          }
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v14) {
            break;
          }
LABEL_92:

          swift_bridgeObjectRelease();
LABEL_7:
          if (v7 == v6)
          {
            swift_bridgeObjectRelease();
LABEL_109:
            REMRemindersListDataView.Diff.init(updatedReminderObjectIDs:insertedReminderObjectIDs:updatedListObjectIDs:updatedSectionObjectIDs:newReminderMembershipsViaAutomation:)();
            goto LABEL_110;
          }
        }
        type metadata accessor for REMCDSavedReminder();
        uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
        sub_1000963CC(0, (unint64_t *)&unk_100917C20);
        if (v14 >= 1)
        {
          unint64_t v91 = v9;
          uint64_t v15 = 0;
          unint64_t v16 = v13;
          uint64_t v94 = v14;
          unint64_t v95 = v13 & 0xC000000000000001;
          unint64_t v17 = &selRef_ckServerChangeTokens;
          while (1)
          {
            id v18 = v95
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v16 + 8 * v15 + 32);
            id v19 = v18;
            id v20 = [v18 changedObjectID:v86];
            id v21 = [v20 v17[228]];
            uint64_t v2 = (uint64_t)[ObjCClassFromMetadata v17[228]];
            char v22 = static NSObject.== infix(_:_:)();

            if ((v22 & 1) == 0) {
              break;
            }

            id v23 = sub_1005A2E48(v20);
            if (!v23) {
              goto LABEL_19;
            }
            uint64_t v2 = (uint64_t)v23;
            uint64_t v24 = swift_dynamicCastClass();
            if (!v24)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v47 = type metadata accessor for Logger();
              sub_10008E2DC(v47, (uint64_t)qword_10090FD10);
              id v48 = v20;
              uint64_t v49 = Logger.logObject.getter();
              os_log_type_t v50 = static os_log_type_t.fault.getter();
              if (!os_log_type_enabled(v49, v50))
              {

LABEL_68:
                unint64_t v17 = &selRef_ckServerChangeTokens;
                goto LABEL_20;
              }
              uint64_t v51 = swift_slowAlloc();
              id v52 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v51 = 138412290;
              *(void *)(v51 + 4) = v48;
              *id v52 = v48;

              _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to cast managedObject to REMCDSavedReminder {objectID: %@}", (uint8_t *)v51, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v16 = v93;
              swift_slowDealloc();

              goto LABEL_55;
            }
            uint64_t v25 = (void *)v24;
            uint64_t v2 = (uint64_t)(id)v2;
            id v26 = [v25 remObjectID];
            if (!v26)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v53 = type metadata accessor for Logger();
              sub_10008E2DC(v53, (uint64_t)qword_10090FD10);
              id v54 = v20;
              uint64_t v49 = Logger.logObject.getter();
              os_log_type_t v55 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v49, v55))
              {

                goto LABEL_68;
              }
              uint64_t v56 = swift_slowAlloc();
              uint64_t v57 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v56 = 138412290;
              *(void *)(v56 + 4) = v54;
              *uint64_t v57 = v54;

              _os_log_impl((void *)&_mh_execute_header, v49, v55, "Failed to get remObjectID from REMCDSavedReminder {objectID: %@}", (uint8_t *)v56, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              unint64_t v16 = v93;
              swift_slowDealloc();
              swift_slowDealloc();

LABEL_55:
              unint64_t v17 = &selRef_ckServerChangeTokens;
              goto LABEL_20;
            }
            uint64_t v27 = v26;
            if ((unint64_t)[v19 changeType] <= 1)
            {
              int v74 = (void *)REMObjectID.codable.getter();
              sub_10031DE8C(v97, v74);

LABEL_69:
              goto LABEL_20;
            }

LABEL_20:
            if (v94 == ++v15)
            {

              swift_bridgeObjectRelease();
              id v3 = v90;
              uint64_t v6 = v89;
              goto LABEL_7;
            }
          }
          type metadata accessor for REMCDTemplate();
          uint64_t v28 = swift_getObjCClassFromMetadata();
          id v29 = v21;
          uint64_t v2 = (uint64_t)[(id)v28 v17[228]];
          LOBYTE(v28) = static NSObject.== infix(_:_:)();

          if (v28)
          {

            id v30 = sub_1005A2E48(v20);
            if (!v30) {
              goto LABEL_42;
            }
            uint64_t v2 = (uint64_t)v30;
            uint64_t v31 = swift_dynamicCastClass();
            if (!v31)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v58 = type metadata accessor for Logger();
              sub_10008E2DC(v58, (uint64_t)qword_10090FD10);
              id v59 = v20;
              int v43 = Logger.logObject.getter();
              os_log_type_t v60 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v43, v60))
              {
                uint64_t v61 = swift_slowAlloc();
                uint64_t v62 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v61 = 138412290;
                *(void *)(v61 + 4) = v59;
                *uint64_t v62 = v59;
                id v63 = v43;
                os_log_type_t v64 = v60;
                uint64_t v65 = "Failed to cast managedObject to REMCDTemplate {objectID: %@}";
                goto LABEL_74;
              }
LABEL_75:

LABEL_83:
LABEL_84:
              unint64_t v17 = &selRef_ckServerChangeTokens;
              unint64_t v16 = v93;
              goto LABEL_20;
            }
            uint64_t v32 = (void *)v31;
            uint64_t v2 = (uint64_t)(id)v2;
            id v33 = [v32 remObjectID];
            if (!v33)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v66 = type metadata accessor for Logger();
              sub_10008E2DC(v66, (uint64_t)qword_10090FD10);
              id v67 = v20;
              int v43 = Logger.logObject.getter();
              os_log_type_t v68 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v43, v68))
              {
                uint64_t v69 = swift_slowAlloc();
                uint64_t v70 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v69 = 138412290;
                *(void *)(v69 + 4) = v67;
                *uint64_t v70 = v67;
                long long v71 = v43;
                os_log_type_t v72 = v68;
                uint64_t v73 = "Failed to get remObjectID from REMCDTemplate {objectID: %@}";
LABEL_80:
                _os_log_impl((void *)&_mh_execute_header, v71, v72, v73, (uint8_t *)v69, 0xCu);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                goto LABEL_81;
              }
              goto LABEL_85;
            }
            uint64_t v34 = v33;
            unint64_t v17 = &selRef_ckServerChangeTokens;
            unint64_t v16 = v93;
            if ([v19 changeType] == (id)1) {
              goto LABEL_41;
            }
          }
          else
          {
            type metadata accessor for REMCDTemplateSection();
            uint64_t v2 = (uint64_t)[(id)swift_getObjCClassFromMetadata() v17[228]];
            char v35 = static NSObject.== infix(_:_:)();

            if ((v35 & 1) == 0)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v41 = type metadata accessor for Logger();
              sub_10008E2DC(v41, (uint64_t)qword_10090FD10);
              id v42 = v20;
              int v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.debug.getter();
              uint64_t v2 = v44;
              if (!os_log_type_enabled(v43, v44))
              {

                goto LABEL_83;
              }
              uint64_t v45 = swift_slowAlloc();
              uint64_t v46 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v45 = 138412290;
              *(void *)(v45 + 4) = v42;
              void *v46 = v42;
              _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v2, "Skipping change unhandled type {objectID: %@}", (uint8_t *)v45, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              goto LABEL_82;
            }
            id v36 = sub_1005A2E48(v20);
            if (!v36)
            {
LABEL_42:

              goto LABEL_84;
            }
            uint64_t v2 = (uint64_t)v36;
            uint64_t v37 = swift_dynamicCastClass();
            if (!v37)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v75 = type metadata accessor for Logger();
              sub_10008E2DC(v75, (uint64_t)qword_10090FD10);
              id v59 = v20;
              int v43 = Logger.logObject.getter();
              os_log_type_t v76 = static os_log_type_t.fault.getter();
              if (!os_log_type_enabled(v43, v76)) {
                goto LABEL_75;
              }
              uint64_t v61 = swift_slowAlloc();
              uint64_t v77 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v61 = 138412290;
              *(void *)(v61 + 4) = v59;
              void *v77 = v59;
              id v63 = v43;
              os_log_type_t v64 = v76;
              uint64_t v65 = "Failed to cast managedObject to REMCDTemplateSection {objectID: %@}";
LABEL_74:
              _os_log_impl((void *)&_mh_execute_header, v63, v64, v65, (uint8_t *)v61, 0xCu);
              sub_100094134((uint64_t *)&unk_10090A040);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

LABEL_81:
LABEL_82:

              goto LABEL_83;
            }
            uint64_t v38 = (void *)v37;
            uint64_t v2 = (uint64_t)(id)v2;
            id v39 = [v38 remObjectID];
            if (!v39)
            {
              if (qword_100907128 != -1) {
                swift_once();
              }
              uint64_t v78 = type metadata accessor for Logger();
              sub_10008E2DC(v78, (uint64_t)qword_10090FD10);
              id v67 = v20;
              int v43 = Logger.logObject.getter();
              os_log_type_t v79 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v43, v79))
              {
                uint64_t v69 = swift_slowAlloc();
                uint64_t v80 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v69 = 138412290;
                *(void *)(v69 + 4) = v67;
                void *v80 = v67;
                long long v71 = v43;
                os_log_type_t v72 = v79;
                uint64_t v73 = "Failed to get remObjectID from REMCDTemplateSection {objectID: %@}";
                goto LABEL_80;
              }
LABEL_85:

              goto LABEL_83;
            }
            uint64_t v34 = v39;
            unint64_t v17 = &selRef_ckServerChangeTokens;
            unint64_t v16 = v93;
            if ([v19 changeType] == (id)1)
            {
LABEL_41:
              uint64_t v40 = (void *)REMObjectID.codable.getter();
              sub_10031DE8C(v97, v40);

              goto LABEL_69;
            }
          }

LABEL_19:
          goto LABEL_20;
        }
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_109;
  }
LABEL_110:
}

uint64_t sub_1001F0B10(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v6 = *(void *)(v5 - 8);
  __n128 v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(void **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  (*(void (**)(char *, void, uint64_t, __n128))(v6 + 104))(v9, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v5, v7);
  sub_1001F8484((unint64_t *)&qword_10090A9A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection);
  id v12 = v11;
  swift_bridgeObjectRetain();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v13 = v22;
  uint64_t v14 = v21[1];
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  if (v13 == v14) {
    uint64_t v15 = -1;
  }
  else {
    uint64_t v15 = 1;
  }
  if (v10 < 0 || (v10 & 0x4000000000000000) != 0)
  {
    unint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v16 = (uint64_t)sub_10020A018(v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = v16;
  sub_1001F2F64(&v22, v15);
  if (v2)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = v22;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = *a1;
    *a1 = 0x8000000000000000;
    sub_1002C4254(v17, v12, isUniquelyReferenced_nonNull_native);
    *a1 = v22;

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001F0D54@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v81 = a5;
  unint64_t v84 = a4;
  uint64_t v89 = a3;
  uint64_t v10 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v10 - 8);
  uint64_t v88 = (char *)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v13 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v92 = (char *)v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v87 = (char *)v80 - v16;
  id v82 = (void (**)(uint64_t, uint64_t, uint64_t, id))_s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v82);
  unint64_t v83 = (unint64_t)v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v19 = *(void *)(Subtasks - 8);
  *(void *)&double v20 = __chkstk_darwin(Subtasks).n128_u64[0];
  uint64_t v22 = (char *)v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = (char *)*a1;
  id v90 = (void (**)(uint64_t, uint64_t, uint64_t, id))[v23 remObjectID:v20];
  if (!v90) {
    return v13[7](a6, 1, 1, v12);
  }
  unint64_t v91 = (char *)v13;
  uint64_t v85 = a6;
  uint64_t v86 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, a2, Subtasks);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v22, Subtasks);
  if (v24 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
  {
    uint64_t v25 = v85;
    uint64_t v26 = v12;
    uint64_t v27 = v90;
    goto LABEL_58;
  }
  uint64_t v26 = v12;
  if (v24 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    uint64_t v27 = v90;
    uint64_t v29 = *v89;
    if (*(void *)(*v89 + 16))
    {
      id v30 = v90;
      unint64_t v31 = sub_100306FE8((uint64_t)v30);
      if (v32)
      {
        unint64_t v33 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
        swift_bridgeObjectRetain();

        if (v33 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v35 = v34;
        }
        uint64_t v36 = (uint64_t)v88;
        v80[2] = v35;
        if (!v34) {
          goto LABEL_36;
        }
        uint64_t v37 = (void *)v83;
        sub_1001F82BC(v84, v83);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
          sub_1001F8364((uint64_t)v37);
          goto LABEL_36;
        }
        uint64_t v38 = v37;
        uint64_t v40 = *v37;
        unint64_t v39 = v37[1];
        uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, id))v38[2];
        uint64_t v41 = v38[3];

        if (!v40) {
          goto LABEL_36;
        }
        if (!v81)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_36;
        }
        v80[1] = v41;
        id v82 = v27;
        unint64_t v83 = v39;
        unint64_t v84 = v33;
        uint64_t v89 = (uint64_t *)v81;
        unint64_t v33 = (unint64_t)sub_1005E82D8();
        uint64_t v42 = type metadata accessor for RDManualSortIDCache();
        uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, id))v42;
        if (qword_100907870 != -1) {
          goto LABEL_60;
        }
        while (1)
        {
          uint64_t v43 = qword_10091C658;
          __chkstk_darwin(v42);
          v80[-4] = v27;
          v80[-3] = v33;
          v80[-2] = v43;
          uint64_t v44 = v86;
          OS_dispatch_queue.sync<A>(execute:)();
          uint64_t v86 = v44;
          uint64_t v45 = v93;
          type metadata accessor for RDManualSortIDAdapter();
          swift_allocObject();
          sub_1001A1374(v45, v33, 0);
          id v46 = [v23 remObjectID];
          if (!v46) {
            goto LABEL_30;
          }
          uint64_t v47 = v46;
          sub_100094134((uint64_t *)&unk_10090AF20);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_10077A530;
          *(void *)(inited + 32) = v23;
          uint64_t v93 = inited;
          specialized Array._endMutation()();
          unint64_t v49 = v93;
          os_log_type_t v50 = v23;
          uint64_t v51 = sub_100127518(v49);
          swift_bridgeObjectRelease();
          uint64_t v52 = sub_1001A27F8(v51);
          swift_bridgeObjectRelease();
          id v53 = v47;
          uint64_t v54 = sub_1002EFDB4(v53, v52);
          swift_bridgeObjectRelease();

          if (v54)
          {
            uint64_t v55 = sub_10026651C(v54, v83);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = (uint64_t)v88;
            if (v55)
            {
              if (*(void *)(v55 + 16))
              {
                unint64_t v56 = v84;
                unint64_t v57 = swift_bridgeObjectRetain();
                uint64_t v58 = sub_10012703C(v57);
                swift_bridgeObjectRelease();
                uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, id))sub_100333A14(v58);
                uint64_t v59 = sub_1001A27F8((uint64_t)v27);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                os_log_type_t v60 = sub_1001F6090(v55, v59, v56);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();

                swift_bridgeObjectRelease();
                unint64_t v33 = (unint64_t)v60;
                goto LABEL_36;
              }
              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_release();
            }
            swift_release();
          }
          else
          {
LABEL_30:
            swift_release();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v36 = (uint64_t)v88;
          }
          unint64_t v33 = v84;
LABEL_36:
          id v23 = v91;
          uint64_t v89 = (uint64_t *)v26;
          if (v33 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
            if (!v26) {
              goto LABEL_57;
            }
          }
          else
          {
            uint64_t v26 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v26) {
              goto LABEL_57;
            }
          }
          if (v26 >= 1)
          {
            uint64_t v66 = 0;
            id v82 = (void (**)(uint64_t, uint64_t, uint64_t, id))(v23 + 56);
            unint64_t v83 = v33 & 0xC000000000000001;
            id v67 = (unsigned int (**)(uint64_t, uint64_t, id))(v23 + 48);
            os_log_type_t v68 = (void (**)(char *, uint64_t, id))(v23 + 32);
            uint64_t v69 = (char *)_swiftEmptyArrayStorage;
            unint64_t v84 = v33;
            id v70 = v89;
            do
            {
              if (v83) {
                id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v71 = *(id *)(v33 + 8 * v66 + 32);
              }
              os_log_type_t v72 = v71;
              id v73 = [v71 remObjectID];
              if (v73)
              {
                int v74 = v73;
                REMObjectID.codable.getter();
                REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)();

                uint64_t v75 = 0;
              }
              else
              {
                uint64_t v75 = 1;
              }
              (*v82)(v36, v75, 1, v70);

              if ((*v67)(v36, 1, v70) == 1)
              {
                sub_1000966BC(v36, &qword_10090FD78);
              }
              else
              {
                os_log_type_t v76 = *v68;
                uint64_t v77 = v87;
                (*v68)(v87, v36, v70);
                v76(v92, (uint64_t)v77, v70);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v69 = (char *)sub_1003091E4(0, *((void *)v69 + 2) + 1, 1, (unint64_t)v69);
                }
                unint64_t v79 = *((void *)v69 + 2);
                unint64_t v78 = *((void *)v69 + 3);
                if (v79 >= v78 >> 1) {
                  uint64_t v69 = (char *)sub_1003091E4(v78 > 1, v79 + 1, 1, (unint64_t)v69);
                }
                *((void *)v69 + 2) = v79 + 1;
                v76(&v69[((v91[80] + 32) & ~(unint64_t)v91[80])+ *((void *)v91 + 9) * v79], (uint64_t)v92, v89);
                uint64_t v36 = (uint64_t)v88;
              }
              ++v66;
              unint64_t v33 = v84;
            }
            while (v26 != v66);
LABEL_57:
            swift_bridgeObjectRelease_n();
            uint64_t v25 = v85;
            uint64_t v26 = (uint64_t)v89;
            uint64_t v27 = v90;
LABEL_58:
            REMObjectID.codable.getter();
            REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)();

            return (*((uint64_t (**)(uint64_t, void, uint64_t, uint64_t))v91 + 7))(v25, 0, 1, v26);
          }
          __break(1u);
LABEL_60:
          uint64_t v42 = swift_once();
        }
      }
    }
    uint64_t v25 = v85;
    goto LABEL_58;
  }
  uint64_t v27 = v90;
  if (v24 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
  {
    uint64_t v61 = *v89;
    uint64_t v25 = v85;
    if (*(void *)(*v89 + 16))
    {
      uint64_t v62 = v90;
      unint64_t v63 = sub_100306FE8((uint64_t)v62);
      if (v64)
      {
        unint64_t v65 = *(void *)(*(void *)(v61 + 56) + 8 * v63);
        swift_bridgeObjectRetain();

        if (v65 >> 62)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
      }
    }
    goto LABEL_58;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F178C@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, id *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v81 = a6;
  id v82 = a5;
  unint64_t v83 = a4;
  uint64_t v87 = a7;
  uint64_t v91 = sub_100094134(&qword_100916E10);
  uint64_t v89 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v85 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v84 = (char *)&v78 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v79 = *(void *)(v13 - 8);
  uint64_t v80 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v17 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v88 = *a1;
  uint64_t v86 = (void (*)(char *, unint64_t, uint64_t))sub_1001F1F4C(a2);
  char v21 = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, Subtasks);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, Subtasks);
  if (v22 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
  {
    id v23 = v88;
LABEL_12:
    id v92 = v23;
    type metadata accessor for REMCDSavedReminder();
    id v46 = v23;
    uint64_t v47 = v87;
    REMSortableElement.init(element:sortIndex:)();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v47, 0, 1, v91);
  }
  if (v22 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    id v23 = v88;
    id v24 = [v88 remObjectID];
    if (!v24) {
      goto LABEL_12;
    }
    uint64_t v25 = *v83;
    if (!*(void *)(*v83 + 16))
    {

      goto LABEL_12;
    }
    id v26 = v24;
    unint64_t v27 = sub_100306FE8((uint64_t)v26);
    if ((v28 & 1) == 0)
    {

      goto LABEL_12;
    }
    unint64_t v29 = *(void *)(*(void *)(v25 + 56) + 8 * v27);
    swift_bridgeObjectRetain();

    __chkstk_darwin(v30);
    *(&v78 - 2) = a2;
    uint64_t v31 = v90;
    sub_1003B37B0((void (*)(id *))sub_1001F8B1C, (uint64_t)(&v78 - 4), v29);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t *)v26;
    swift_bridgeObjectRetain();
    uint64_t v35 = v82;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v92 = *v35;
    *uint64_t v35 = (id)0x8000000000000000;
    sub_1002C5978(v33, v34, isUniquelyReferenced_nonNull_native);
    *uint64_t v35 = v92;

    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_51:
      swift_bridgeObjectRelease();

      goto LABEL_12;
    }
    uint64_t v38 = v79;
    uint64_t v37 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v15, v81, v80);
    int v39 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v15, v37);
    if (v39 == enum case for REMRemindersListDataView.SortingDirection.ascending(_:))
    {
      uint64_t v40 = *(void *)(v33 + 16);
      if (v40)
      {
        id v82 = (id *)v33;
        unint64_t v83 = v34;
        uint64_t v90 = v31;
        uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 16);
        unint64_t v42 = v33 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
        uint64_t v85 = *(char **)(v89 + 72);
        uint64_t v86 = v41;
        uint64_t v43 = (void (**)(char *, uint64_t))(v89 + 8);
        swift_bridgeObjectRetain();
        uint64_t v44 = (double *)_swiftEmptyArrayStorage;
        uint64_t v45 = v84;
        do
        {
          uint64_t v49 = v91;
          v86(v45, v42, v91);
          uint64_t v50 = REMSortableElement.sortIndex.getter();
          char v52 = v51;
          (*v43)(v45, v49);
          if ((v52 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v44 = (double *)sub_10030AB08(0, *((void *)v44 + 2) + 1, 1, v44);
            }
            unint64_t v54 = *((void *)v44 + 2);
            unint64_t v53 = *((void *)v44 + 3);
            if (v54 >= v53 >> 1) {
              uint64_t v44 = (double *)sub_10030AB08((void *)(v53 > 1), v54 + 1, 1, v44);
            }
            *((void *)v44 + 2) = v54 + 1;
            *(void *)&v44[v54 + 4] = v50;
          }
          v42 += (unint64_t)v85;
          --v40;
        }
        while (v40);
        swift_bridgeObjectRelease_n();
        id v23 = v88;
        uint64_t v34 = v83;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = (double *)_swiftEmptyArrayStorage;
      }
      uint64_t v66 = *((void *)v44 + 2);
      if (v66)
      {
        double v67 = v44[4];
        uint64_t v68 = v66 - 1;
        if (v68)
        {
          uint64_t v69 = v44 + 5;
          do
          {
            double v70 = *v69++;
            double v71 = v70;
            if (v70 < v67) {
              double v67 = v71;
            }
            --v68;
          }
          while (v68);
        }
      }
      goto LABEL_51;
    }
    if (v39 == enum case for REMRemindersListDataView.SortingDirection.descending(_:))
    {
      uint64_t v55 = *(void *)(v33 + 16);
      if (v55)
      {
        id v82 = (id *)v33;
        unint64_t v83 = v34;
        uint64_t v90 = v31;
        uint64_t v86 = *(void (**)(char *, unint64_t, uint64_t))(v89 + 16);
        unint64_t v56 = v33 + ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80));
        unint64_t v84 = *(char **)(v89 + 72);
        unint64_t v57 = (void (**)(char *, uint64_t))(v89 + 8);
        swift_bridgeObjectRetain();
        uint64_t v58 = (double *)_swiftEmptyArrayStorage;
        uint64_t v59 = v85;
        do
        {
          uint64_t v60 = v91;
          v86(v59, v56, v91);
          uint64_t v61 = REMSortableElement.sortIndex.getter();
          char v63 = v62;
          (*v57)(v59, v60);
          if ((v63 & 1) == 0)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v58 = (double *)sub_10030AB08(0, *((void *)v58 + 2) + 1, 1, v58);
            }
            unint64_t v65 = *((void *)v58 + 2);
            unint64_t v64 = *((void *)v58 + 3);
            if (v65 >= v64 >> 1) {
              uint64_t v58 = (double *)sub_10030AB08((void *)(v64 > 1), v65 + 1, 1, v58);
            }
            *((void *)v58 + 2) = v65 + 1;
            *(void *)&v58[v65 + 4] = v61;
          }
          v56 += (unint64_t)v84;
          --v55;
        }
        while (v55);
        swift_bridgeObjectRelease_n();
        id v23 = v88;
        uint64_t v34 = v83;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = (double *)_swiftEmptyArrayStorage;
      }
      uint64_t v72 = *((void *)v58 + 2);
      if (v72)
      {
        double v73 = v58[4];
        uint64_t v74 = v72 - 1;
        if (v74)
        {
          uint64_t v75 = v58 + 5;
          do
          {
            double v76 = *v75++;
            double v77 = v76;
            if (v73 < v76) {
              double v73 = v77;
            }
            --v74;
          }
          while (v74);
        }
      }
      goto LABEL_51;
    }
  }
  else
  {
    id v23 = v88;
    if (v22 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:)) {
      goto LABEL_12;
    }
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F1F4C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)((char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F82BC(a1, (uint64_t)v15);
  double v16 = 0.0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      id v20 = [v1 priority];
      if (!v20) {
        goto LABEL_2;
      }
      char v21 = v20;
      int v22 = [v20 shortValue];

      if (v22 < 1) {
        goto LABEL_2;
      }
      double v16 = (double)(__int16)(10 - v22);
      sub_1001F8364((uint64_t)v15);
      break;
    case 2u:
    case 3u:
LABEL_2:
      sub_1001F8364((uint64_t)v15);
      goto LABEL_9;
    case 4u:
      uint64_t v23 = *v15;
      id v24 = (void *)v15[5];
      sub_1001F84E8(v23);

LABEL_9:
      double v16 = 0.0;
      break;
    case 5u:
      return *(void *)&v16;
    default:
      id v17 = [v1 displayDateDate];
      if (v17)
      {
        uint64_t v18 = v17;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v19 = 0;
      }
      else
      {
        uint64_t v19 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v9, v19, 1, v3);
      sub_1000CAAB4((uint64_t)v9, (uint64_t)v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3))
      {
        sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
        double v16 = 0.0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v12, v3);
        sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
        Date.timeIntervalSinceReferenceDate.getter();
        double v26 = v25;
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        double v16 = v26;
      }
      sub_1001F8364((uint64_t)v15);
      break;
  }
  return *(void *)&v16;
}

uint64_t sub_1001F22B8@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = *a1;
  sub_1001F1F4C(a2);
  type metadata accessor for REMCDSavedReminder();
  REMSortableElement.init(element:sortIndex:)();
  uint64_t v6 = sub_100094134(&qword_100916E10);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a3, 0, 1, v6);
}

uint64_t sub_1001F237C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t sub_1001F23C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

void sub_1001F2404(void (*a1)(char *, unint64_t, uint64_t)@<X1>, uint64_t *a2@<X2>, void (**a3)(char *, uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v57 = a2;
  uint64_t v58 = a4;
  unint64_t v56 = a3;
  char v62 = a1;
  uint64_t v6 = sub_100094134(&qword_10090FD78);
  __chkstk_darwin(v6 - 8);
  double v67 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v61 = (char *)v52 - v12;
  uint64_t v13 = sub_100094134(&qword_100916E10);
  uint64_t v68 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v17 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v19 = (char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  REMSortableElement.element.getter();
  id v20 = v69;
  id v63 = [v69 remObjectID];
  if (!v63)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a5, 1, 1, v8);

    return;
  }
  uint64_t v64 = v8;
  uint64_t v65 = v9;
  uint64_t v60 = a5;
  (*(void (**)(char *, void, uint64_t))(v17 + 16))(v19, v62, Subtasks);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, Subtasks);
  id v59 = v20;
  if (v21 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:))
  {
    uint64_t v22 = v60;
    uint64_t v24 = v64;
    uint64_t v23 = v65;
    id v25 = v63;
LABEL_31:
    REMObjectID.codable.getter();
    REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtaskCount:subtasks:)();

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v22, 0, 1, v24);
    return;
  }
  id v25 = v63;
  if (v21 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
  {
    uint64_t v26 = *v57;
    if (!*(void *)(*v57 + 16))
    {
      uint64_t v22 = v60;
      uint64_t v24 = v64;
      uint64_t v23 = v65;
      goto LABEL_31;
    }
    id v27 = v63;
    unint64_t v28 = sub_100306FE8((uint64_t)v27);
    uint64_t v24 = v64;
    if (v29)
    {
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 8 * v28);
      swift_bridgeObjectRetain();

      v52[2] = *(void *)(v30 + 16);
      sub_1000967F4(&qword_10090FD60, &qword_100916E10);
      uint64_t v31 = Array<A>.sorted(by:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v31 + 16);
      if (v32)
      {
        char v62 = *(void (**)(char *, unint64_t, uint64_t))(v68 + 16);
        unint64_t v33 = v31 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
        uint64_t v34 = *(void *)(v68 + 72);
        unint64_t v57 = (uint64_t *)(v65 + 56);
        uint64_t v58 = v34;
        v68 += 16;
        uint64_t v55 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
        unint64_t v56 = (void (**)(char *, uint64_t))(v68 - 8);
        unint64_t v54 = (void (**)(char *, uint64_t, uint64_t))(v65 + 32);
        v52[1] = v31;
        swift_bridgeObjectRetain();
        uint64_t v35 = _swiftEmptyArrayStorage;
        unint64_t v53 = v15;
        do
        {
          v62(v15, v33, v13);
          REMSortableElement.element.getter();
          id v36 = v69;
          id v37 = [v69 remObjectID];
          if (v37)
          {
            uint64_t v38 = v37;
            REMObjectID.codable.getter();
            int v39 = v67;
            REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)();

            uint64_t v40 = (uint64_t)v39;
            ((void (*)(char *, void, uint64_t, uint64_t))*v57)(v39, 0, 1, v24);
          }
          else
          {
            uint64_t v40 = (uint64_t)v67;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))*v57)(v67, 1, 1, v24);
          }
          (*v56)(v15, v13);
          if ((*v55)(v40, 1, v24) == 1)
          {
            sub_1000966BC(v40, &qword_10090FD78);
          }
          else
          {
            uint64_t v41 = *v54;
            unint64_t v42 = v61;
            (*v54)(v61, v40, v24);
            v41(v66, (uint64_t)v42, v24);
            unint64_t v43 = (unint64_t)v35;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v43 = sub_1003091E4(0, v35[2] + 1, 1, (unint64_t)v35);
            }
            unint64_t v45 = *(void *)(v43 + 16);
            unint64_t v44 = *(void *)(v43 + 24);
            uint64_t v15 = v53;
            if (v45 >= v44 >> 1) {
              uint64_t v35 = (void *)sub_1003091E4(v44 > 1, v45 + 1, 1, v43);
            }
            else {
              uint64_t v35 = (void *)v43;
            }
            v35[2] = v45 + 1;
            unint64_t v46 = (unint64_t)v35
                + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))
                + *(void *)(v65 + 72) * v45;
            uint64_t v24 = v64;
            v41((char *)v46, (uint64_t)v66, v64);
          }
          v33 += v58;
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease_n();
        uint64_t v22 = v60;
        uint64_t v23 = v65;
        id v25 = v63;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v60;
        uint64_t v23 = v65;
      }
      goto LABEL_31;
    }

LABEL_30:
    uint64_t v22 = v60;
    uint64_t v23 = v65;
    goto LABEL_31;
  }
  if (v21 == enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
  {
    uint64_t v47 = *(void *)v58;
    uint64_t v24 = v64;
    if (*(void *)(*(void *)v58 + 16))
    {
      id v48 = v63;
      unint64_t v49 = sub_100306FE8((uint64_t)v48);
      if (v50)
      {
        unint64_t v51 = *(void *)(*(void *)(v47 + 56) + 8 * v49);
        swift_bridgeObjectRetain();

        if (v51 >> 62)
        {
          swift_bridgeObjectRetain();
          _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease_n();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
      }
    }
    goto LABEL_30;
  }
  _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
}

uint64_t sub_1001F2B98()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077B710;
  *(void *)(v0 + 32) = swift_getKeyPath();
  *(void *)(v0 + 40) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_10090FD28 = v0;
  return result;
}

uint64_t sub_1001F2C1C()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  *(void *)(v0 + 32) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_10090FD30 = v0;
  return result;
}

void sub_1001F2C90(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 title];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1001F2CF8(uint64_t a1, void **a2)
{
  double v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setTitle:];
}

uint64_t sub_1001F2D68@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 creationDate];
  if (v3)
  {
    id v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1001F2E30(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909A40);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setCreationDate:isa];
}

uint64_t sub_1001F2F64(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1001F53F4(v4);
    *a1 = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  sub_1001F2FE8(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1001F2FE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v5);
  if (result < v5)
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 >= -1)
    {
      Swift::Int v8 = result;
      uint64_t v108 = a1;
      if (v5 < 2)
      {
        uint64_t v11 = (char *)_swiftEmptyArrayStorage;
        uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
        __dst = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        if (v5 != 1)
        {
          unint64_t v14 = _swiftEmptyArrayStorage[2];
          if (v14 < 2) {
            goto LABEL_124;
          }
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v9 = v7 >> 1;
        type metadata accessor for REMCDSavedReminder();
        uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
        __dst = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
        uint64_t v122 = v10;
      }
      Swift::Int v12 = 0;
      uint64_t v13 = *a1;
      uint64_t v110 = *a1 + 16;
      Swift::Int v111 = v8;
      uint64_t v109 = *a1 - 8;
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      Swift::Int v115 = v5;
      uint64_t v120 = *a1;
      while (1)
      {
        Swift::Int v15 = v12++;
        Swift::Int v116 = v15;
        if (v12 < v5)
        {
          id v112 = v11;
          double v16 = *(void **)(v13 + 8 * v15);
          id v17 = *(id *)(v13 + 8 * v12);
          id v18 = v16;
          id v19 = [v17 title];
          if (v19)
          {
            id v20 = v19;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          id v21 = [v18 title];
          if (v21)
          {
            uint64_t v22 = v21;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          sub_1000E4FD8();
          uint64_t v117 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::Int v12 = v15 + 2;
          if (v15 + 2 < v5)
          {
            uint64_t v23 = (id *)(v110 + 8 * v15);
            while (1)
            {
              uint64_t v24 = *(v23 - 1);
              id v25 = *v23;
              id v26 = v24;
              id v27 = [v25 title];
              if (v27)
              {
                unint64_t v28 = v27;
                static String._unconditionallyBridgeFromObjectiveC(_:)();
              }
              id v29 = [v26 title];
              if (v29)
              {
                uint64_t v30 = v29;
                static String._unconditionallyBridgeFromObjectiveC(_:)();
              }
              uint64_t v31 = StringProtocol.localizedStandardCompare<A>(_:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v117 == a2) == (v31 != a2)) {
                break;
              }
              ++v12;
              ++v23;
              Swift::Int v5 = v115;
              if (v115 == v12)
              {
                Swift::Int v12 = v115;
                goto LABEL_30;
              }
            }
            Swift::Int v5 = v115;
LABEL_30:
            Swift::Int v15 = v116;
          }
          uint64_t v13 = v120;
          uint64_t v11 = v112;
          if (v117 == a2)
          {
            if (v12 < v15) {
              goto LABEL_148;
            }
            if (v15 < v12)
            {
              uint64_t v32 = (uint64_t *)(v109 + 8 * v12);
              Swift::Int v33 = v12;
              Swift::Int v34 = v15;
              uint64_t v35 = (uint64_t *)(v120 + 8 * v15);
              do
              {
                if (v34 != --v33)
                {
                  if (!v120) {
                    goto LABEL_153;
                  }
                  uint64_t v36 = *v35;
                  *uint64_t v35 = *v32;
                  uint64_t *v32 = v36;
                }
                ++v34;
                --v32;
                ++v35;
              }
              while (v34 < v33);
            }
          }
        }
        if (v12 < v5)
        {
          if (__OFSUB__(v12, v15)) {
            goto LABEL_146;
          }
          if (v12 - v15 < v111)
          {
            if (__OFADD__(v15, v111)) {
              goto LABEL_149;
            }
            if (v15 + v111 >= v5) {
              Swift::Int v37 = v5;
            }
            else {
              Swift::Int v37 = v15 + v111;
            }
            if (v37 < v15)
            {
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              break;
            }
            if (v12 != v37)
            {
              uint64_t v113 = v11;
              Swift::Int v114 = v37;
              uint64_t v38 = v109 + 8 * v12;
              do
              {
                int v39 = *(void **)(v13 + 8 * v12);
                uint64_t v118 = v38;
                while (1)
                {
                  uint64_t v40 = *(void **)v38;
                  id v41 = v39;
                  id v42 = v40;
                  id v43 = [v41 title];
                  if (v43)
                  {
                    unint64_t v44 = v43;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  id v45 = [v42 title];
                  if (v45)
                  {
                    unint64_t v46 = v45;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  sub_1000E4FD8();
                  uint64_t v47 = StringProtocol.localizedStandardCompare<A>(_:)();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v47 != a2) {
                    break;
                  }
                  uint64_t v13 = v120;
                  if (!v120) {
                    goto LABEL_151;
                  }
                  id v48 = *(void **)v38;
                  int v39 = *(void **)(v38 + 8);
                  *(void *)uint64_t v38 = v39;
                  *(void *)(v38 + 8) = v48;
                  v38 -= 8;
                  if (v12 == ++v15) {
                    goto LABEL_51;
                  }
                }
                uint64_t v13 = v120;
LABEL_51:
                ++v12;
                Swift::Int v15 = v116;
                uint64_t v38 = v118 + 8;
              }
              while (v12 != v114);
              Swift::Int v12 = v114;
              uint64_t v11 = v113;
            }
          }
        }
        if (v12 < v15) {
          goto LABEL_141;
        }
        unint64_t v49 = v11;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v11 = v49;
        }
        else {
          uint64_t v11 = sub_1001F3D80(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v51 = *((void *)v11 + 2);
        unint64_t v50 = *((void *)v11 + 3);
        unint64_t v14 = v51 + 1;
        uint64_t v13 = v120;
        if (v51 >= v50 >> 1)
        {
          uint64_t v100 = sub_1001F3D80((char *)(v50 > 1), v51 + 1, 1, v11);
          uint64_t v13 = v120;
          uint64_t v11 = v100;
        }
        *((void *)v11 + 2) = v14;
        char v52 = v11 + 32;
        unint64_t v53 = &v11[16 * v51 + 32];
        *(void *)unint64_t v53 = v116;
        *((void *)v53 + 1) = v12;
        if (v51)
        {
          while (1)
          {
            unint64_t v54 = v14 - 1;
            if (v14 >= 4)
            {
              id v59 = &v52[16 * v14];
              uint64_t v60 = *((void *)v59 - 8);
              uint64_t v61 = *((void *)v59 - 7);
              BOOL v65 = __OFSUB__(v61, v60);
              uint64_t v62 = v61 - v60;
              if (v65) {
                goto LABEL_130;
              }
              uint64_t v64 = *((void *)v59 - 6);
              uint64_t v63 = *((void *)v59 - 5);
              BOOL v65 = __OFSUB__(v63, v64);
              uint64_t v57 = v63 - v64;
              char v58 = v65;
              if (v65) {
                goto LABEL_131;
              }
              unint64_t v66 = v14 - 2;
              double v67 = &v52[16 * v14 - 32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v65 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v65) {
                goto LABEL_133;
              }
              BOOL v65 = __OFADD__(v57, v70);
              uint64_t v71 = v57 + v70;
              if (v65) {
                goto LABEL_136;
              }
              if (v71 >= v62)
              {
                uint64_t v89 = &v52[16 * v54];
                uint64_t v91 = *(void *)v89;
                uint64_t v90 = *((void *)v89 + 1);
                BOOL v65 = __OFSUB__(v90, v91);
                uint64_t v92 = v90 - v91;
                if (v65) {
                  goto LABEL_140;
                }
                BOOL v82 = v57 < v92;
                goto LABEL_99;
              }
            }
            else
            {
              if (v14 != 3)
              {
                uint64_t v83 = *((void *)v11 + 4);
                uint64_t v84 = *((void *)v11 + 5);
                BOOL v65 = __OFSUB__(v84, v83);
                uint64_t v76 = v84 - v83;
                char v77 = v65;
                goto LABEL_93;
              }
              uint64_t v56 = *((void *)v11 + 4);
              uint64_t v55 = *((void *)v11 + 5);
              BOOL v65 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              char v58 = v65;
            }
            if (v58) {
              goto LABEL_132;
            }
            unint64_t v66 = v14 - 2;
            uint64_t v72 = &v52[16 * v14 - 32];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v75 = __OFSUB__(v73, v74);
            uint64_t v76 = v73 - v74;
            char v77 = v75;
            if (v75) {
              goto LABEL_135;
            }
            uint64_t v78 = &v52[16 * v54];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v65 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v65) {
              goto LABEL_138;
            }
            if (__OFADD__(v76, v81)) {
              goto LABEL_139;
            }
            if (v76 + v81 >= v57)
            {
              BOOL v82 = v57 < v81;
LABEL_99:
              if (v82) {
                unint64_t v54 = v66;
              }
              goto LABEL_101;
            }
LABEL_93:
            if (v77) {
              goto LABEL_134;
            }
            uint64_t v85 = &v52[16 * v54];
            uint64_t v87 = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v65 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v65) {
              goto LABEL_137;
            }
            if (v88 < v76) {
              goto LABEL_14;
            }
LABEL_101:
            unint64_t v93 = v54 - 1;
            if (v54 - 1 >= v14)
            {
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
              goto LABEL_150;
            }
            if (!v13) {
              goto LABEL_152;
            }
            uint64_t v94 = v11;
            unint64_t v95 = &v52[16 * v93];
            uint64_t v96 = *(void *)v95;
            uint64_t v97 = &v52[16 * v54];
            uint64_t v98 = *((void *)v97 + 1);
            sub_1001F3928((void **)(v13 + 8 * *(void *)v95), (id *)(v13 + 8 * *(void *)v97), v13 + 8 * v98, __dst, a2);
            if (v2) {
              goto LABEL_124;
            }
            if (v98 < v96) {
              goto LABEL_127;
            }
            if (v54 > *((void *)v94 + 2)) {
              goto LABEL_128;
            }
            *(void *)unint64_t v95 = v96;
            *(void *)&v52[16 * v93 + 8] = v98;
            unint64_t v99 = *((void *)v94 + 2);
            if (v54 >= v99) {
              goto LABEL_129;
            }
            unint64_t v14 = v99 - 1;
            memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
            uint64_t v11 = v94;
            *((void *)v94 + 2) = v99 - 1;
            uint64_t v13 = v120;
            if (v99 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v14 = 1;
LABEL_14:
        Swift::Int v5 = v115;
        if (v12 >= v115)
        {
          uint64_t v3 = v2;
          if (v14 < 2)
          {
LABEL_124:
            swift_bridgeObjectRelease();
            *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            return swift_bridgeObjectRelease();
          }
LABEL_112:
          uint64_t v101 = *v108;
          while (1)
          {
            unint64_t v102 = v14 - 2;
            if (v14 < 2) {
              goto LABEL_142;
            }
            if (!v101) {
              goto LABEL_154;
            }
            uint64_t v103 = v11;
            uint64_t v104 = *(void *)&v11[16 * v102 + 32];
            uint64_t v105 = *(void *)&v11[16 * v14 + 24];
            sub_1001F3928((void **)(v101 + 8 * v104), (id *)(v101 + 8 * *(void *)&v11[16 * v14 + 16]), v101 + 8 * v105, __dst, a2);
            if (v3) {
              goto LABEL_124;
            }
            if (v105 < v104) {
              goto LABEL_143;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v103 = sub_1001F433C((uint64_t)v103);
            }
            if (v102 >= *((void *)v103 + 2)) {
              goto LABEL_144;
            }
            uint64_t v106 = &v103[16 * v102 + 32];
            *(void *)uint64_t v106 = v104;
            *((void *)v106 + 1) = v105;
            unint64_t v107 = *((void *)v103 + 2);
            if (v14 > v107) {
              goto LABEL_145;
            }
            memmove(&v103[16 * v14 + 16], &v103[16 * v14 + 32], 16 * (v107 - v14));
            uint64_t v11 = v103;
            *((void *)v103 + 2) = v107 - 1;
            unint64_t v14 = v107 - 1;
            if (v107 <= 2) {
              goto LABEL_124;
            }
          }
        }
      }
    }
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v5 < 0) {
    goto LABEL_147;
  }
  if (v5) {
    return sub_1000EE5C8(0, v5, 1, a1, a2);
  }
  return result;
}

uint64_t sub_1001F3928(void **__src, id *a2, unint64_t a3, void **__dst, uint64_t a5)
{
  Swift::Int v5 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v47 = __src;
  unint64_t v46 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v24 = &v5[v13];
      id v45 = v24;
      uint64_t v47 = v6;
      int v39 = v7;
      if (v7 < v6 && v11 >= 8)
      {
        id v25 = (id *)(a3 - 8);
        id v26 = v6;
        uint64_t v38 = v5;
        do
        {
          unint64_t v42 = (unint64_t)v24;
          id v27 = v24 - 1;
          unint64_t v28 = *--v26;
          id v29 = *(v24 - 1);
          id v30 = v28;
          id v31 = [v29 title];
          unint64_t v44 = v6;
          if (v31)
          {
            uint64_t v32 = v31;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          id v33 = [v30 title];
          if (v33)
          {
            Swift::Int v34 = v33;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          uint64_t v35 = v25 + 1;
          sub_1000E4FD8();
          uint64_t v36 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v36 == a5)
          {
            uint64_t v24 = (void **)v42;
            if (v35 != v44 || v25 >= v44) {
              id *v25 = *v26;
            }
            uint64_t v47 = v26;
          }
          else
          {
            id v45 = v27;
            if ((unint64_t)v35 < v42 || (unint64_t)v25 >= v42 || v35 != (id *)v42) {
              id *v25 = *v27;
            }
            id v26 = v44;
            uint64_t v24 = v27;
          }
          if (v26 <= v39) {
            break;
          }
          --v25;
          uint64_t v6 = v26;
        }
        while (v24 > v38);
      }
      goto LABEL_51;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    id v41 = &v5[v10];
    id v45 = v41;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        unint64_t v14 = *v5;
        id v15 = *v6;
        id v16 = v14;
        id v17 = [v15 title];
        if (v17)
        {
          id v18 = v17;
          id v19 = v6;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          id v19 = v6;
        }
        id v20 = [v16 title];
        if (v20)
        {
          id v21 = v20;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        sub_1000E4FD8();
        uint64_t v22 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v22 == a5)
        {
          uint64_t v23 = v19 + 1;
          if (v7 < v19 || v7 >= v23 || v7 != v19) {
            *uint64_t v7 = *v19;
          }
        }
        else
        {
          if (v7 != v5) {
            *uint64_t v7 = *v5;
          }
          unint64_t v46 = ++v5;
          uint64_t v23 = v19;
        }
        ++v7;
        if (v5 >= v41) {
          break;
        }
        uint64_t v6 = v23;
      }
      while ((unint64_t)v23 < a3);
      uint64_t v47 = v7;
    }
LABEL_51:
    sub_1001F4024((void **)&v47, (const void **)&v46, &v45);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001F3D80(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134(&qword_10090FD68);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1001F3E7C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
    {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }
  return result;
}

uint64_t sub_1001F3F50(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001F41F8(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

char *sub_1001F3F68(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

char *sub_1001F4024(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1001F40E0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -16)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0xFuLL : 0)) & 0xFFFFFFFFFFFFFFF0;
    if (result != v3 || result >= &v3[v6])
    {
      return (char *)memmove(result, v3, v6);
    }
  }
  return result;
}

uint64_t sub_1001F4198(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001F41F8(a1, a2, a3, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_1001F41B0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001F41F8(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1001F41C8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001F41F8(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for Date);
}

uint64_t sub_1001F41E0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001F41F8(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder);
}

uint64_t sub_1001F41F8(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1001F433C(uint64_t a1)
{
  return sub_1001F3D80(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t (*sub_1001F4350(void *a1, uint64_t a2))()
{
  unint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_1001F5090(v4);
  v4[12] = sub_1001F4908(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1001F4470;
}

void (*sub_1001F4474(void *a1, void *a2))(uint64_t a1)
{
  unint64_t v4 = malloc(0x58uLL);
  *a1 = v4;
  v4[8] = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  id v6 = a2;
  v4[9] = sub_1001F50CC(v4);
  v4[10] = sub_1001F4A64(v4 + 4, (uint64_t)v6, isUniquelyReferenced_nonNull_native);
  return sub_1001F4510;
}

void sub_1001F4510(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 80))();

  v2(v1, 0);

  free(v1);
}

uint64_t (*sub_1001F4580(void *a1, uint64_t a2, uint64_t a3))()
{
  id v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1001F50CC(v6);
  v6[10] = sub_1001F4BF4(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1001F462C;
}

uint64_t (*sub_1001F4630(void *a1, uint64_t a2, uint64_t a3))()
{
  id v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_1001F50CC(v6);
  v6[10] = sub_1001F4D68(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_1001F462C;
}

void sub_1001F46DC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

uint64_t (*sub_1001F4750(void *a1, uint64_t a2))()
{
  unint64_t v4 = malloc(0x68uLL);
  *a1 = v4;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  v4[9] = v6;
  uint64_t v8 = malloc(*(void *)(v6 + 64));
  v4[10] = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  (*(void (**)(void *, uint64_t, uint64_t))(v7 + 16))(v8, a2, v5);
  v4[11] = sub_1001F50CC(v4);
  v4[12] = sub_1001F4F08(v4 + 4, (uint64_t)v8, isUniquelyReferenced_nonNull_native);
  return sub_1001F4470;
}

void sub_1001F4870(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 88);
  uint64_t v4 = *(void *)(*(void *)a1 + 72);
  uint64_t v3 = *(void **)(*(void *)a1 + 80);
  uint64_t v5 = *(void *)(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 96))();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v5);
  v2(v1, 0);
  free(v3);

  free(v1);
}

void (*sub_1001F4908(void *a1, uint64_t a2, char a3))(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  uint64_t v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_100306EC4(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1001F4A38;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10031856C();
      goto LABEL_7;
    }
    sub_10030DC28(v14, a3 & 1);
    unint64_t v18 = sub_100306EC4(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F4A38(uint64_t **a1, uint64_t a2)
{
}

void (*sub_1001F4A64(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  uint64_t v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_100306FE8(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1001F4BA4;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_100318DD0();
      goto LABEL_7;
    }
    sub_10030ED10(v14, a3 & 1);
    unint64_t v18 = sub_100306FE8(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F4BA4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1001F50FC(*a1, *((unsigned char *)*a1 + 32), (void **)(*a1)[2], (*a1)[3], (void *)(*a1)[1]);
  swift_bridgeObjectRelease();

  free(v1);
}

void (*sub_1001F4BF4(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1001806F8(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *char v10 = v19;
        return sub_1001F4D3C;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100319638();
      goto LABEL_7;
    }
    sub_100310668(v16, a4 & 1);
    unint64_t v20 = sub_1001806F8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F4D3C(uint64_t **a1, uint64_t a2)
{
}

void (*sub_1001F4D68(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = v4;
  char v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_1001806F8(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *char v10 = v19;
        return sub_1001F4D3C;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_100319664();
      goto LABEL_7;
    }
    sub_100310680(v16, a4 & 1);
    unint64_t v20 = sub_1001806F8(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F4EB0(uint64_t **a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, void), void (*a4)(uint64_t, void))
{
  uint64_t v4 = *a1;
  sub_1001F51B8(*a1, *((unsigned char *)*a1 + 40), (void *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], a3, a4);
  swift_bridgeObjectRelease();

  free(v4);
}

void (*sub_1001F4F08(void *a1, uint64_t a2, char a3))(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[1] = a2;
  uint64_t v8[2] = v3;
  uint64_t v9 = *v3;
  unint64_t v11 = sub_100306EC4(a2);
  *((unsigned char *)v8 + 32) = v10 & 1;
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
  }
  else
  {
    char v15 = v10;
    uint64_t v16 = *(void *)(v9 + 24);
    if (v16 >= v14 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v11;
      if (v15)
      {
LABEL_8:
        uint64_t v17 = *(void *)(*(void *)(*v4 + 56) + 8 * v11);
LABEL_12:
        *uint64_t v8 = v17;
        return sub_1001F4A38;
      }
LABEL_11:
      uint64_t v17 = 0;
      goto LABEL_12;
    }
    if (v16 >= v14 && (a3 & 1) == 0)
    {
      sub_10031BE08();
      goto LABEL_7;
    }
    sub_100314C18(v14, a3 & 1);
    unint64_t v18 = sub_100306EC4(a2);
    if ((v15 & 1) == (v19 & 1))
    {
      unint64_t v11 = v18;
      v8[3] = v18;
      if (v15) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  type metadata accessor for UUID();
  uint64_t result = (void (*)(uint64_t **, uint64_t))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F5038(uint64_t **a1, uint64_t a2, void (*a3)(uint64_t, char *, uint64_t, uint64_t), void (*a4)(uint64_t, void))
{
  uint64_t v4 = *a1;
  sub_1001F527C(*a1, *((unsigned char *)*a1 + 32), (void *)(*a1)[2], (*a1)[3], (*a1)[1], a3, a4);
  swift_bridgeObjectRelease();

  free(v4);
}

uint64_t (*sub_1001F5090(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1001F50C0;
}

uint64_t sub_1001F50C0(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t (*sub_1001F50CC(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *uint64_t v1 = 0x8000000000000000;
  return sub_1001F8BC4;
}

uint64_t sub_1001F50FC(uint64_t *a1, char a2, void **a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    uint64_t v7 = *a3;
    if (a2)
    {
      *(void *)(v7[7] + 8 * a4) = v6;
    }
    else
    {
      sub_1002C8248(a4, (uint64_t)a5, v6, v7);
      id v9 = a5;
    }
  }
  else if (a2)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_arrayDestroy();
    sub_1002C2188(a4);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F51B8(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, void), void (*a8)(uint64_t, void))
{
  uint64_t v10 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    a8(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F527C(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, char *, uint64_t, uint64_t), void (*a7)(uint64_t, void))
{
  uint64_t v14 = type metadata accessor for UUID();
  __n128 v16 = __chkstk_darwin(v14);
  unint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *a1;
  if (v19)
  {
    uint64_t v20 = *a3;
    if (a2)
    {
      *(void *)(*(void *)(v20 + 56) + 8 * a4) = v19;
    }
    else
    {
      (*(void (**)(char *, uint64_t, __n128))(v15 + 16))(v18, a5, v16);
      a6(a4, v18, v19, v20);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    a7(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F53CC(void *a1)
{
  return sub_1001DEF34(0, a1[2], 0, a1);
}

uint64_t sub_1001F53E0(uint64_t a1)
{
  return sub_1001DEC24(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F53F4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_1001F5408(void *a1)
{
  return sub_1001DF880(0, a1[2], 0, a1);
}

uint64_t sub_1001F541C(void *a1)
{
  return sub_1001DFA28(0, a1[2], 0, a1);
}

uint64_t sub_1001F5430(uint64_t a1)
{
  return sub_1001E0790(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F5444(void *a1)
{
  return sub_1001E0D94(0, a1[2], 0, a1);
}

uint64_t sub_1001F5458(void *a1)
{
  return sub_1001E0DB4(0, a1[2], 0, a1);
}

uint64_t sub_1001F546C(uint64_t a1)
{
  return sub_1001E05FC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F5480(uint64_t a1)
{
  return sub_1001E10E4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001F5494(void *a1)
{
  return sub_1001DF6D4(0, a1[2], 0, a1);
}

uint64_t sub_1001F54A8(void *a1)
{
  return sub_1001E1704(0, a1[2], 0, a1);
}

uint64_t sub_1001F54BC(void *a1)
{
  return sub_1001E1B84(0, a1[2], 0, a1);
}

uint64_t sub_1001F54D0(void *a1)
{
  return sub_1001E1B98(0, a1[2], 0, a1);
}

uint64_t sub_1001F54E4(uint64_t a1)
{
  return sub_1001E1EB4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

id sub_1001F54F8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 remObjectID];
  *a2 = result;
  return result;
}

void *sub_1001F553C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_1002ED230((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1001F8554(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_1002C3E8C);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    id v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(v7 + 16))
      {
        uint64_t v10 = *(v9 - 1);
        uint64_t v11 = *v9;
        swift_bridgeObjectRetain_n();
        unint64_t v12 = sub_1001806F8(v10, v11);
        if (v13)
        {
          id v14 = *(id *)(*(void *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease();
          id v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_100094134(&qword_10090D750);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000967F4((unint64_t *)&qword_10090FD80, &qword_10090D750);
  sub_1001207D4();
  unint64_t v16 = Sequence.compactMapToSet<A>(_:)();
  unint64_t v17 = swift_bridgeObjectRetain();
  unint64_t v18 = sub_1001F5DF0(v17, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100201318((unint64_t)v18);
  return _swiftEmptyArrayStorage;
}

void *sub_1001F579C(uint64_t a1)
{
  uint64_t v2 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F82BC(a1, (uint64_t)v4);
  uint64_t v5 = _swiftEmptyArrayStorage;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      goto LABEL_3;
    case 4u:
      uint64_t v7 = *v4;
      uint64_t v8 = (void *)v4[5];
      sub_1001F84E8(v7);

      if (qword_100907B50 != -1) {
        swift_once();
      }
      uint64_t v5 = (void *)qword_100942698;
      swift_bridgeObjectRetain();
      break;
    case 5u:
      return v5;
    default:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_10077A530;
      *(void *)(v6 + 32) = swift_getKeyPath();
      uint64_t v11 = (void *)v6;
      specialized Array._endMutation()();
      uint64_t v5 = v11;
LABEL_3:
      sub_1001F8364((uint64_t)v4);
      break;
  }
  return v5;
}

void *sub_1001F5988(uint64_t a1)
{
  uint64_t v2 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F82BC(a1, (uint64_t)v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  id result = _swiftEmptyArrayStorage;
  switch(EnumCaseMultiPayload)
  {
    case 4:
      uint64_t v7 = *v4;
      uint64_t v8 = (void *)v4[5];
      sub_1001F84E8(v7);

      if (qword_100907B58 != -1) {
        swift_once();
      }
      id result = (void *)swift_bridgeObjectRetain();
      break;
    case 5:
      return result;
    default:
      sub_1001F8364((uint64_t)v4);
      id result = _swiftEmptyArrayStorage;
      break;
  }
  return result;
}

uint64_t sub_1001F5AC4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001F82BC(a1, (uint64_t)v11);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v8, v11, v2);
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
      int v12 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
      if (v12 != enum case for REMRemindersListDataView.SortingDirection.ascending(_:)
        && v12 != enum case for REMRemindersListDataView.SortingDirection.descending(_:))
      {
        _diagnoseUnexpectedEnumCase<A>(type:)();
        __break(1u);
        JUMPOUT(0x1001F5DD8);
      }
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_10077A530;
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      swift_getKeyPath();
      *(void *)(v14 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
      uint64_t v20 = v14;
      specialized Array._endMutation()();
      uint64_t v15 = v20;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      return v15;
    case 4u:
      unint64_t v16 = (void *)v11[5];
      sub_1001F84E8(*v11);

      goto LABEL_10;
    case 5u:
      goto LABEL_10;
    default:
      sub_1001F8364((uint64_t)v11);
LABEL_10:
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_10077A530;
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      swift_getKeyPath();
      *(void *)(v17 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
      uint64_t v20 = v17;
      specialized Array._endMutation()();
      return v20;
  }
}

void *sub_1001F5DF0(unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_28;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      unint64_t v5 = v2 & 0xC000000000000001;
      uint64_t v6 = v2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v7 = v2 + 32;
      unint64_t v2 = a2;
      unint64_t v32 = a2 + 56;
      unint64_t v30 = v5;
      uint64_t v31 = v3;
      unint64_t v28 = v7;
      uint64_t v29 = v6;
      while (v5)
      {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v9 = v8;
        if (__OFADD__(v4++, 1)) {
          goto LABEL_27;
        }
        id v11 = [v8 remObjectID];
        if (!v11) {
          goto LABEL_4;
        }
        int v12 = v11;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v13 = v11;
          char v14 = __CocoaSet.contains(_:)();

          if ((v14 & 1) == 0) {
            goto LABEL_23;
          }
LABEL_4:

          goto LABEL_5;
        }
        if (!*(void *)(a2 + 16)) {
          goto LABEL_22;
        }
        Swift::Int v15 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
        uint64_t v16 = -1 << *(unsigned char *)(a2 + 32);
        unint64_t v17 = v15 & ~v16;
        if (((*(void *)(v32 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
          goto LABEL_22;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        id v18 = *(id *)(*(void *)(a2 + 48) + 8 * v17);
        char v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) == 0)
        {
          uint64_t v20 = ~v16;
          for (unint64_t i = v17 + 1; ; unint64_t i = v22 + 1)
          {
            uint64_t v22 = i & v20;
            if (((*(void *)(v32 + (((i & v20) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v20)) & 1) == 0) {
              break;
            }
            id v23 = *(id *)(*(void *)(a2 + 48) + 8 * v22);
            char v24 = static NSObject.== infix(_:_:)();

            if (v24) {
              goto LABEL_17;
            }
          }
LABEL_22:

          unint64_t v5 = v30;
          uint64_t v3 = v31;
          unint64_t v7 = v28;
          uint64_t v6 = v29;
LABEL_23:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
LABEL_17:

        unint64_t v5 = v30;
        uint64_t v3 = v31;
        unint64_t v7 = v28;
        uint64_t v6 = v29;
LABEL_5:
        if (v4 == v3) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v4 < *(void *)(v6 + 16)) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      unint64_t v26 = v2;
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v2 = v26;
      uint64_t v3 = v27;
      if (!v27) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v8 = *(id *)(v7 + 8 * v4);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001F6090(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_1002EDC5C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1001F8554(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_1002C4228);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(v7 + 16))
      {
        uint64_t v10 = *(v9 - 1);
        uint64_t v11 = *v9;
        swift_bridgeObjectRetain_n();
        unint64_t v12 = sub_1001806F8(v10, v11);
        if (v13)
        {
          id v14 = *(id *)(*(void *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease();
          id v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_100094134(&qword_100921B80);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000967F4(&qword_10090FD70, &qword_100921B80);
  sub_1001207D4();
  unint64_t v16 = Sequence.compactMapToSet<A>(_:)();
  unint64_t v17 = swift_bridgeObjectRetain();
  id v18 = sub_1001F5DF0(v17, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1002022A0((unint64_t)v18);
  return _swiftEmptyArrayStorage;
}

char *sub_1001F62F0(unint64_t a1, uint64_t isa, uint64_t a3, id a4)
{
  uint64_t v219 = a3;
  uint64_t v216 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v216);
  unint64_t v8 = (unint64_t)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t)&v192 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t)&v192 - v13;
  __chkstk_darwin(v15);
  uint64_t v224 = (char *)&v192 - v16;
  __chkstk_darwin(v17);
  uint64_t v215 = (uint64_t)&v192 - v18;
  __chkstk_darwin(v19);
  uint64_t v214 = (uint64_t *)((char *)&v192 - v20);
  uint64_t v212 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v210 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  uint64_t v205 = (char *)&v192 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v209 = (char *)&v192 - v23;
  __chkstk_darwin(v24);
  uint64_t v207 = (char *)&v192 - v25;
  uint64_t v26 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v26 - 8);
  uint64_t v229 = (char *)&v192 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = (void *)type metadata accessor for UUID();
  uint64_t v211 = *(v230 - 1);
  __chkstk_darwin(v230);
  v227 = (char *)&v192 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  uint64_t v223 = (char *)&v192 - v30;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v31 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  uint64_t v203 = (char *)&v192 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  unint64_t v35 = (unint64_t)&v192 - v34;
  if (qword_100907130 != -1) {
    goto LABEL_37;
  }
  while (1)
  {
    uint64_t v206 = v14;
    uint64_t v217 = (char *)isa;
    unint64_t v241 = qword_10090FD28;
    uint64_t v36 = qword_100907138;
    swift_bridgeObjectRetain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v238 = qword_10090FD30;
    swift_bridgeObjectRetain();
    Swift::Int v37 = sub_1001F579C((uint64_t)a4);
    sub_1002024A4((unint64_t)v37);
    uint64_t v38 = sub_1001F5988((uint64_t)a4);
    sub_1002024A4((unint64_t)v38);
    sub_100094134(&qword_10090FED0);
    Array<A>.removeDuplicates()();
    Array<A>.removeDuplicates()();
    int v39 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    uint64_t v40 = Subtasks;
    uint64_t v202 = v31 + 16;
    uint64_t v201 = v39;
    v39((char *)v35, v219, Subtasks);
    id v41 = *(uint64_t (**)(char *, uint64_t))(v31 + 88);
    uint64_t v204 = v31 + 88;
    uint64_t v200 = v41;
    int v42 = v41((char *)v35, v40);
    unint64_t v35 = enum case for REMRemindersListDataView.FetchSubtasks.off(_:);
    if (v42 != enum case for REMRemindersListDataView.FetchSubtasks.off(_:)
      && v42 != enum case for REMRemindersListDataView.FetchSubtasks.on(_:)
      && v42 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
    {
      goto LABEL_155;
    }
    uint64_t v196 = (_OWORD *)v11;
    id v43 = (void *)sub_100547218(a1, (v42 == enum case for REMRemindersListDataView.FetchSubtasks.off(_:)) | 0x20u);
    uint64_t v31 = type metadata accessor for REMCDSavedReminder();
    id v44 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
    id v45 = [ObjCClassFromMetadata entity];
    [v44 setEntity:v45];

    [v44 setAffectedStores:0];
    [v44 setPredicate:v43];

    Class isa = v241;
    *(void *)&long long v232 = v241;
    if (v241 >> 62)
    {
      swift_bridgeObjectRetain_n();
      Class isa = v232;
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((v241 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    uint64_t v213 = (char *)v8;
    id v221 = a4;
    int v199 = v35;
    uint64_t v228 = v44;
    unint64_t v225 = v31;
    if (!v11) {
      break;
    }
    unint64_t v237 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v14 = (uint64_t)&v237;
    sub_1001DE1C4(0, v11 & ~(v11 >> 63), 0);
    if (v11 < 0) {
      goto LABEL_143;
    }
    a4 = (id)a1;
    a1 = 0;
    uint64_t v31 = v237;
    unint64_t v35 = isa & 0xC000000000000001;
    while (v11 != a1)
    {
      if (v35)
      {
        uint64_t v46 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v46 = *(void *)(isa + 8 * a1 + 32);
        swift_retain();
      }
      uint64_t v47 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v48)
      {
        *(void *)&long long v235 = 0;
        *((void *)&v235 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(46);
        v188._object = (void *)0x80000001007CAF70;
        v188._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
        String.append(_:)(v188);
        v234 = (void *)v46;
        goto LABEL_153;
      }
      uint64_t v49 = v47;
      uint64_t v14 = v48;
      v236 = &type metadata for String;
      swift_release();
      *(void *)&long long v235 = v49;
      *((void *)&v235 + 1) = v14;
      unint64_t v237 = v31;
      unint64_t v8 = *(void *)(v31 + 16);
      unint64_t v50 = *(void *)(v31 + 24);
      if (v8 >= v50 >> 1)
      {
        uint64_t v14 = (uint64_t)&v237;
        sub_1001DE1C4(v50 > 1, v8 + 1, 1);
        uint64_t v31 = v237;
      }
      ++a1;
      *(void *)(v31 + 16) = v8 + 1;
      sub_10009A1A0(&v235, (_OWORD *)(v31 + 32 * v8 + 32));
      Class isa = v232;
      if (v11 == a1)
      {
        swift_bridgeObjectRelease();
        a1 = (unint64_t)a4;
        a4 = v221;
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once();
  }
  swift_bridgeObjectRelease();
LABEL_22:
  Class isa = (uint64_t)Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v228 setPropertiesToFetch:isa];

  uint64_t v51 = v238;
  id v197 = (id)a1;
  if ((unint64_t)v238 >> 62)
  {
    if (v238 < 0) {
      Class isa = v238;
    }
    else {
      Class isa = v238 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v31 = *(void *)((v238 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v31)
    {
LABEL_24:
      unint64_t v237 = (unint64_t)_swiftEmptyArrayStorage;
      uint64_t v14 = (uint64_t)&v237;
      sub_1001DE058(0, v31 & ~(v31 >> 63), 0);
      if (v31 < 0) {
        goto LABEL_144;
      }
      unint64_t v8 = 0;
      a1 = v237;
      *(void *)&long long v231 = v51 & 0xC000000000000001;
      a4 = (id)v51;
      while (1)
      {
        if (v31 == v8) {
          goto LABEL_36;
        }
        if ((void)v231)
        {
          uint64_t v52 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v52 = *(void *)(v51 + 8 * v8 + 32);
          swift_retain();
        }
        uint64_t v14 = v52;
        uint64_t v53 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
        if (!v54) {
          break;
        }
        unint64_t v35 = v53;
        uint64_t v55 = v54;
        swift_release();
        unint64_t v237 = a1;
        uint64_t v11 = *(void *)(a1 + 16);
        unint64_t v56 = *(void *)(a1 + 24);
        Class isa = v11 + 1;
        if (v11 >= v56 >> 1)
        {
          uint64_t v14 = (uint64_t)&v237;
          sub_1001DE058(v56 > 1, v11 + 1, 1);
          a1 = v237;
        }
        ++v8;
        *(void *)(a1 + 16) = isa;
        unint64_t v57 = a1 + 16 * v11;
        *(void *)(v57 + 32) = v35;
        *(void *)(v57 + 40) = v55;
        uint64_t v51 = (uint64_t)a4;
        if (v31 == v8)
        {
          swift_bridgeObjectRelease();
          a4 = v221;
          goto LABEL_44;
        }
      }
      *(void *)&long long v235 = 0;
      *((void *)&v235 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      v189._object = (void *)0x80000001007CAF70;
      v189._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
      String.append(_:)(v189);
      v234 = (void *)v52;
LABEL_153:
      sub_100094134(&qword_100913AA0);
      _print_unlocked<A, B>(_:_:)();
      LODWORD(v191) = 0;
      uint64_t v190 = 19;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_154:
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_155;
    }
  }
  swift_bridgeObjectRelease();
LABEL_44:
  Class v58 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v59 = v228;
  [v228 setRelationshipKeyPathsForPrefetching:v58];

  sub_1001F5AC4((uint64_t)a4);
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  Class v60 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v59 setSortDescriptors:v60];

  uint64_t v61 = v217;
  uint64_t v62 = v226;
  uint64_t v63 = NSManagedObjectContext.fetch<A>(_:)();
  a4 = v62;
  uint64_t v31 = (uint64_t)v224;
  if (v62)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v61;
  }
  a1 = v63;

  unint64_t v237 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = (uint64_t)_swiftEmptyDictionarySingleton;
  v234 = _swiftEmptyDictionarySingleton;
  Class isa = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_146;
  }
  uint64_t v64 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_48:
  uint64_t v65 = (uint64_t)v213;
  unint64_t v225 = a1;
  uint64_t v193 = isa;
  if (!v64)
  {
    id v195 = 0;
    id v69 = 0;
    goto LABEL_91;
  }
  *(void *)&long long v232 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_149:
      __break(1u);
LABEL_150:
      unint64_t v187 = swift_bridgeObjectRetain();
      uint64_t v124 = (uint64_t)sub_10020A018(v187);
      swift_bridgeObjectRelease();
LABEL_102:
      *(void *)&long long v235 = v124;
      sub_1001F2F64((uint64_t *)&v235, v14);
      if (a4)
      {
LABEL_156:
        swift_release();
        __break(1u);
        JUMPOUT(0x1001F82A4);
      }
      a4 = 0;
      uint64_t v65 = a1;
      swift_bridgeObjectRelease();
      unint64_t v237 = v235;
      float v125 = v203;
      uint64_t v126 = Subtasks;
      v201(v203, v219, Subtasks);
      int v127 = v200(v125, v126);
      if (v127 != v199)
      {
        if (v127 == enum case for REMRemindersListDataView.FetchSubtasks.on(_:))
        {
          uint64_t v128 = (uint64_t)v234;
          swift_bridgeObjectRetain();
          unint64_t v129 = sub_1002EDC68((uint64_t)_swiftEmptyArrayStorage);
          __chkstk_darwin(v129);
          uint64_t v130 = v209;
          uint64_t v190 = (uint64_t)v209;
          sub_1002B1438(v131, (void (*)(uint64_t *, id *))sub_1001F84CC, (uint64_t)(&v192 - 4), v128);
          uint64_t v133 = v132;
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v64)(v130, v212);
          v234 = v133;
          swift_bridgeObjectRelease();
          goto LABEL_112;
        }
        if (v127 != enum case for REMRemindersListDataView.FetchSubtasks.count(_:))
        {
LABEL_155:
          _diagnoseUnexpectedEnumCase<A>(type:)();
          __break(1u);
          goto LABEL_156;
        }
      }
      ((void (*)(char *, uint64_t))v64)(v209, v212);
      goto LABEL_112;
    }
    id v66 = *(id *)(a1 + 32);
  }
  double v67 = v66;
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t)[v67 account];

  if (v14) {
    id v68 = [(id)v14 remObjectID];
  }
  else {
    id v68 = 0;
  }
  id v195 = v68;
  id v198 = (id)v14;
  id v194 = a4;
  if (v64 < 1)
  {
    __break(1u);
    goto LABEL_149;
  }
  uint64_t v228 = (void *)(v211 + 32);
  uint64_t v70 = (void (**)(char *, uint64_t, uint64_t, void *))(v211 + 56);
  id v226 = (unsigned int (**)(uint64_t, uint64_t, void *))(v211 + 48);
  unint64_t v220 = (void (**)(char *, void *))(v211 + 8);
  swift_bridgeObjectRetain();
  uint64_t v71 = 0;
  long long v208 = xmmword_10077A530;
  *(void *)&long long v231 = v64;
  do
  {
    if ((void)v232) {
      id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v73 = *(id *)(a1 + 8 * v71 + 32);
    }
    uint64_t v74 = v73;
    id v75 = [v73 parentSavedReminderIdentifier];
    if (!v75)
    {
      uint64_t v79 = (uint64_t)v229;
      (*v70)(v229, 1, 1, v230);
LABEL_74:
      sub_1000966BC(v79, (uint64_t *)&unk_100909E50);
LABEL_75:
      id v94 = v74;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v237 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v237 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      goto LABEL_60;
    }
    uint64_t v76 = v75;
    char v77 = v227;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v78 = (void (*)(char *, char *, void *))*v228;
    uint64_t v79 = (uint64_t)v229;
    uint64_t v80 = v77;
    uint64_t v81 = v230;
    ((void (*)(char *, char *, void *))*v228)(v229, v80, v230);
    (*v70)((char *)v79, 0, 1, v81);
    if ((*v226)(v79, 1, v81) == 1) {
      goto LABEL_74;
    }
    BOOL v82 = v223;
    uint64_t v83 = v79;
    uint64_t v84 = v230;
    v78(v223, (char *)v83, v230);
    Class v85 = UUID._bridgeToObjectiveC()().super.isa;
    id v86 = [ObjCClassFromMetadata objectIDWithUUID:v85];

    uint64_t v87 = v82;
    a1 = v225;
    (*v220)(v87, v84);
    if (!v86) {
      goto LABEL_75;
    }
    if (v234[2])
    {
      id v88 = v86;
      sub_100306FE8((uint64_t)v88);
      if (v89)
      {
        uint64_t v91 = sub_1001EE3E0(&v235, v88);
        if (*v90)
        {
          uint64_t v92 = v90;
          id v93 = v74;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v92 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v92 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          ((void (*)(long long *, void))v91)(&v235, 0);
        }
        else
        {
          ((void (*)(long long *, void))v91)(&v235, 0);
        }
        uint64_t v31 = (uint64_t)v224;
        goto LABEL_60;
      }
    }
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = v208;
    *(void *)(v95 + 32) = v74;
    *(void *)&long long v235 = v95;
    specialized Array._endMutation()();
    uint64_t v96 = v235;
    uint64_t v31 = (uint64_t)v86;
    a4 = v74;
    Class isa = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = (uint64_t)v234;
    v234 = (void *)0x8000000000000000;
    *(void *)&long long v235 = v14;
    a1 = sub_100306FE8(v31);
    uint64_t v98 = *(void *)(v14 + 16);
    BOOL v99 = (v97 & 1) == 0;
    uint64_t v100 = v98 + v99;
    if (__OFADD__(v98, v99))
    {
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      swift_bridgeObjectRetain();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      goto LABEL_48;
    }
    char v101 = v97;
    if (*(void *)(v14 + 24) >= v100)
    {
      if ((isa & 1) == 0) {
        sub_100318DD0();
      }
    }
    else
    {
      sub_10030ED10(v100, isa);
      unint64_t v102 = sub_100306FE8(v31);
      if ((v101 & 1) != (v103 & 1)) {
        goto LABEL_154;
      }
      a1 = v102;
    }
    uint64_t v14 = v235;
    Class isa = 8 * a1;
    if (v101)
    {
      uint64_t v72 = *(void *)(v235 + 56);
      swift_bridgeObjectRelease();
      *(void *)(v72 + 8 * a1) = v96;
    }
    else
    {
      *(void *)(v235 + 8 * (a1 >> 6) + 64) |= 1 << a1;
      *(void *)(*(void *)(v14 + 48) + 8 * a1) = v31;
      *(void *)(*(void *)(v14 + 56) + 8 * a1) = v96;
      uint64_t v104 = *(void *)(v14 + 16);
      BOOL v105 = __OFADD__(v104, 1);
      uint64_t v106 = v104 + 1;
      if (v105) {
        goto LABEL_145;
      }
      *(void *)(v14 + 16) = v106;
      id v107 = (id)v31;
    }
    v234 = (void *)v14;

    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t)v224;
    a1 = v225;
LABEL_60:
    ++v71;
  }
  while ((void)v231 != v71);
  a4 = v194;
  id v69 = v198;
  uint64_t v65 = (uint64_t)v213;
  uint64_t v14 = (uint64_t)_swiftEmptyDictionarySingleton;
LABEL_91:
  swift_bridgeObjectRelease();
  sub_1001F82BC((uint64_t)v221, (uint64_t)v214);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
    case 3u:
      sub_1001F8364((uint64_t)v214);
      goto LABEL_95;
    case 4u:
      Swift::Int v115 = (void *)v214[5];
      sub_1001F84E8(*v214);

      goto LABEL_95;
    case 5u:
LABEL_95:
      uint64_t v116 = (uint64_t)v221;
      sub_1001F82BC((uint64_t)v221, v215);
      sub_1001F82BC(v116, v31);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        id v198 = v69;
        a1 = v65;
        swift_bridgeObjectRelease();
        uint64_t v117 = v31;
        uint64_t v118 = v210;
        uint64_t v119 = v212;
        (*(void (**)(char *, uint64_t, uint64_t))(v210 + 32))(v209, v117, v212);
        unint64_t v120 = v237;
        uint64_t v121 = v205;
        (*(void (**)(char *, void, uint64_t))(v118 + 104))(v205, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v119);
        sub_1001F8484((unint64_t *)&qword_10090A9A0, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.SortingDirection);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v122 = v235;
        uint64_t v123 = v233;
        uint64_t v64 = *(void *)(v118 + 8);
        ((void (*)(char *, uint64_t))v64)(v121, v119);
        if (v122 == v123) {
          uint64_t v14 = -1;
        }
        else {
          uint64_t v14 = 1;
        }
        uint64_t v31 = (uint64_t)v195;
        if ((v120 & 0x8000000000000000) == 0 && (v120 & 0x4000000000000000) == 0)
        {
          uint64_t v124 = v120 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          goto LABEL_102;
        }
        goto LABEL_150;
      }
      sub_1001F8364(v31);
      uint64_t v134 = v116;
      uint64_t v135 = v206;
      sub_1001F82BC(v134, v206);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v31 = (uint64_t)v195;
      if (EnumCaseMultiPayload != 5)
      {
        swift_bridgeObjectRelease();
        sub_1001F8364(v135);
        goto LABEL_113;
      }
      sub_1001F8364(v135);
      if (v31)
      {
        id v137 = (id)v31;
        swift_bridgeObjectRelease();
        id v138 = [v197 uuid];
        uint64_t v139 = v227;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v140 = UUID.uuidString.getter();
        uint64_t v142 = v141;
        (*(void (**)(char *, void *))(v211 + 8))(v139, v230);
        sub_100526968(v217, 6, v140, v142, v137, (uint64_t)v239);
        long long v231 = v239[1];
        long long v232 = v239[0];
        uint64_t v143 = v240;
        swift_bridgeObjectRelease();
        uint64_t v144 = v215;
        sub_1001F8364(v215);
        long long v145 = v231;
        *(_OWORD *)uint64_t v144 = v232;
        *(_OWORD *)(v144 + 16) = v145;
        *(void *)(v144 + 32) = v143;
        *(void *)(v144 + 40) = v31;
        swift_storeEnumTagMultiPayload();
        goto LABEL_113;
      }
      id v198 = v69;
      if (qword_100907128 != -1) {
        swift_once();
      }
      uint64_t v165 = type metadata accessor for Logger();
      sub_10008E2DC(v165, (uint64_t)qword_10090FD10);
      id v166 = v197;
      id v167 = v197;
      swift_bridgeObjectRetain();
      id v168 = v167;
      uint64_t v169 = Logger.logObject.getter();
      os_log_type_t v170 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v169, v170))
      {
        id v194 = a4;
        uint64_t v171 = swift_slowAlloc();
        uint64_t v172 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v171 = 138543618;
        *(void *)&long long v235 = v168;
        id v173 = v168;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)&long long v232 = v172;
        *uint64_t v172 = v166;

        *(_WORD *)(v171 + 12) = 2048;
        if (v193)
        {
          swift_bridgeObjectRetain();
          uint64_t v174 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v174 = *(void *)((v225 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        a4 = v194;
        uint64_t v31 = (uint64_t)v195;
        uint64_t v65 = (uint64_t)v213;
        swift_bridgeObjectRelease();
        *(void *)&long long v235 = v174;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v169, v170, "[fetchReminderLitesOfTemplate] Could not fetch manual sort hint of .savedReminders without an accountObjectID {listID: %{public}@, cdReminders.count: %ld}", (uint8_t *)v171, 0x16u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v185 = [self newObjectID];
      uint64_t v186 = (uint64_t)v196;
      *uint64_t v196 = 0u;
      *(_OWORD *)(v186 + 16) = 0u;
      *(void *)(v186 + 32) = 0;
      *(void *)(v186 + 40) = v185;
      swift_storeEnumTagMultiPayload();
      sub_1001F8420(v186, v215);
      break;
    default:
      swift_bridgeObjectRelease();
      uint64_t v108 = v210;
      uint64_t v109 = v207;
      uint64_t v110 = (*(uint64_t (**)(char *, uint64_t *, uint64_t))(v210 + 32))(v207, v214, v212);
      *(void *)&long long v235 = v14;
      unint64_t v111 = v237;
      __chkstk_darwin(v110);
      id v198 = v69;
      uint64_t v112 = v219;
      *(&v192 - 6) = (uint64_t)v221;
      *(&v192 - 5) = v112;
      *(&v192 - 4) = (uint64_t)&v234;
      *(&v192 - 3) = (uint64_t)&v235;
      swift_bridgeObjectRetain();
      sub_1003B37B0((void (*)(id *))sub_1001F8320, (uint64_t)(&v192 - 8), v111);
      swift_bridgeObjectRelease();
      sub_100094134(&qword_100916E10);
      sub_1000967F4(&qword_10090FD60, &qword_100916E10);
      uint64_t v113 = Array<A>.sorted(by:)();
      uint64_t v114 = swift_bridgeObjectRelease();
      __chkstk_darwin(v114);
      *(&v192 - 4) = v112;
      *(&v192 - 3) = (uint64_t)&v235;
      uint64_t v190 = (uint64_t)v109;
      long long v191 = &v234;
      uint64_t v61 = sub_1003B3B88((void (*)(void))sub_1001F8344, (uint64_t)(&v192 - 6), v113);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v212);
      swift_bridgeObjectRelease();
      goto LABEL_136;
  }
LABEL_112:
  id v69 = v198;
LABEL_113:
  sub_1001F82BC(v215, v65);
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    uint64_t v146 = *(void *)v65;
    uint64_t v147 = *(void **)(v65 + 8);
    uint64_t v148 = *(void *)(v65 + 16);
    uint64_t v149 = *(void *)(v65 + 24);
    uint64_t v150 = *(char **)(v65 + 32);

    if (v146)
    {
      if (v69)
      {
        uint64_t v229 = v150;
        *(void *)&long long v231 = v149;
        *(void *)&long long v232 = v148;
        id v198 = v69;
        uint64_t v230 = v69;
        uint64_t v152 = sub_1005E82D8();
        uint64_t v153 = type metadata accessor for RDManualSortIDCache();
        uint64_t v154 = v153;
        if (qword_100907870 != -1) {
          uint64_t v153 = swift_once();
        }
        __chkstk_darwin(v153);
        *(&v192 - 4) = v154;
        *(&v192 - 3) = (uint64_t)v152;
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v155 = v235;
        type metadata accessor for RDManualSortIDAdapter();
        swift_allocObject();
        uint64_t v156 = sub_1001A1374(v155, (uint64_t)v152, 0);
        *(void *)&long long v235 = 0;
        __chkstk_darwin(v156);
        int v157 = v217;
        *(&v192 - 4) = v158;
        *(&v192 - 3) = (uint64_t)v157;
        uint64_t v190 = (uint64_t)&v235;
        NSManagedObjectContext.performAndWait<A>(_:)();
        if (a4)
        {
          uint64_t v228 = v147;
          swift_bridgeObjectRelease();
          if (qword_100907128 != -1) {
            swift_once();
          }
          uint64_t v159 = type metadata accessor for Logger();
          sub_10008E2DC(v159, (uint64_t)qword_10090FD10);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v160 = Logger.logObject.getter();
          os_log_type_t v161 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v160, v161))
          {
            int v162 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v235 = swift_slowAlloc();
            *(_DWORD *)int v162 = 136315138;
            v227 = (char *)(v162 + 4);
            swift_getErrorValue();
            uint64_t v163 = Error.localizedDescription.getter();
            uint64_t v233 = sub_1000C51B8(v163, v164, (uint64_t *)&v235);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v160, v161, "[fetchReminderLitesOfTemplate] Failed to fetch signed-in accounts {error: %s}", v162, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
        }
        else
        {
          if (!(void)v235) {
            sub_1002ED224((uint64_t)_swiftEmptyArrayStorage);
          }
          swift_bridgeObjectRelease();
        }
        unint64_t v175 = v237;
        unint64_t v176 = swift_bridgeObjectRetain();
        uint64_t v177 = sub_10012703C(v176);
        swift_bridgeObjectRelease();
        uint64_t v178 = sub_100333A14(v177);
        uint64_t v179 = sub_1001A27F8(v178);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v180 = sub_1001F6090(v146, v179, v175);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();

        uint64_t v151 = swift_bridgeObjectRelease();
        unint64_t v237 = (unint64_t)v180;
        id v69 = v198;
        uint64_t v31 = (uint64_t)v195;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v151 = swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v151 = sub_1001F8364(v65);
  }
  unint64_t v181 = v237;
  __chkstk_darwin(v151);
  *(&v192 - 4) = v219;
  *(&v192 - 3) = (uint64_t)&v234;
  uint64_t v182 = v215;
  uint64_t v190 = v215;
  long long v191 = (void **)v69;
  swift_bridgeObjectRetain();
  sub_1003B3768((void (*)(id *))sub_1001F83C0, (uint64_t)(&v192 - 6), v181);
  uint64_t v61 = v183;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001F8364(v182);
LABEL_136:
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t sub_1001F82BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s9UtilitiesO12SortingStyleOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F8320@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F178C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(uint64_t **)(v2 + 32), *(id **)(v2 + 40), *(void *)(v2 + 48), a2);
}

void sub_1001F8344(uint64_t a1@<X8>)
{
  sub_1001F2404(*(void (**)(char *, unint64_t, uint64_t))(v1 + 16), *(uint64_t **)(v1 + 24), *(void (***)(char *, uint64_t))(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_1001F8364(uint64_t a1)
{
  uint64_t v2 = _s9UtilitiesO12SortingStyleOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F83C0@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F0D54(a1, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_1001F83E0@<X0>(void *a1@<X8>)
{
  return sub_100530FA8(*(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_1001F8400()
{
  sub_1001A148C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_1001F8420(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s9UtilitiesO12SortingStyleOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F8484(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F84CC(uint64_t *a1, uint64_t a2)
{
  return sub_1001F0B10(a1, a2);
}

uint64_t sub_1001F84E8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001F8554(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(id, uint64_t, unint64_t, uint64_t))
{
  unint64_t v5 = a2;
  if (a2 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      unint64_t v33 = v5 & 0xC000000000000001;
      uint64_t v30 = a1;
      unint64_t v31 = a3 & 0xC000000000000001;
      uint64_t v8 = 4;
      uint64_t v28 = a3;
      unint64_t v32 = v5;
      uint64_t v27 = v7;
      while (1)
      {
        if (v33) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v5 + 8 * v8);
        }
        uint64_t v10 = v9;
        a1 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
        {
          __break(1u);
          goto LABEL_26;
        }
        id v11 = [v9 remObjectID];
        if (v11) {
          break;
        }

LABEL_5:
        ++v8;
        if (a1 == v7)
        {
          swift_bridgeObjectRelease();
          return v30;
        }
      }
      uint64_t v12 = v11;
      uint64_t v13 = v7;
      if (v31)
      {
        id v14 = v11;
        if (__CocoaDictionary.lookup(_:)())
        {
          type metadata accessor for RDElementManualSortID();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v15 = v34;
          swift_unknownObjectRelease();

          if (v34) {
            goto LABEL_18;
          }
          goto LABEL_21;
        }
      }
      else
      {
        if (!*(void *)(a3 + 16))
        {
LABEL_21:

          uint64_t v7 = v13;
          unint64_t v5 = v32;
          goto LABEL_5;
        }
        unint64_t v16 = sub_100306FE8((uint64_t)v11);
        if (v17)
        {
          uint64_t v15 = *(void *)(*(void *)(a3 + 56) + 8 * v16);
          swift_retain();

          if (v15)
          {
LABEL_18:
            if (*(void *)(v15 + 24))
            {
              uint64_t v18 = *(void *)(v15 + 16);
              unint64_t v19 = *(void *)(v15 + 24);
            }
            else
            {
              v20._uint64_t countAndFlagsBits = UUID.uuidString.getter();
              String.append(_:)(v20);
              swift_bridgeObjectRelease();
              uint64_t v18 = 0x7C6C61636F6CLL;
              unint64_t v19 = 0xE600000000000000;
            }
            swift_bridgeObjectRetain();
            id v21 = v10;
            uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            a4(v21, v18, v19, isUniquelyReferenced_nonNull_native);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v23._uint64_t countAndFlagsBits = UUID.uuidString.getter();
            String.append(_:)(v23);
            swift_bridgeObjectRelease();
            id v24 = v21;
            uint64_t v25 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v34 = v30;
            a4(v24, 0x7C6C61636F6CLL, 0xE600000000000000, v25);

            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v5 = v32;
            uint64_t v7 = v27;
            a3 = v28;
            goto LABEL_5;
          }
          goto LABEL_21;
        }
      }

      goto LABEL_21;
    }
  }
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1001F88BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_1002EE55C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_1001F8554(v6, a3, a2, (void (*)(id, uint64_t, unint64_t, uint64_t))sub_1002C4C20);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    id v9 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(v7 + 16))
      {
        uint64_t v10 = *(v9 - 1);
        uint64_t v11 = *v9;
        swift_bridgeObjectRetain_n();
        unint64_t v12 = sub_1001806F8(v10, v11);
        if (v13)
        {
          id v14 = *(id *)(*(void *)(v7 + 56) + 8 * v12);
          swift_bridgeObjectRelease();
          id v15 = v14;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_100094134(&qword_100921A90);
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000967F4(&qword_10090FD88, &qword_100921A90);
  sub_1001207D4();
  unint64_t v16 = Sequence.compactMapToSet<A>(_:)();
  unint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = sub_1001F5DF0(v17, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100202D14((unint64_t)v18);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001F8B1C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001F22B8(a1, *(void *)(v2 + 16), a2);
}

id sub_1001F8B40@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 priority];
  *a2 = result;
  return result;
}

id sub_1001F8B7C(void *a1, id *a2)
{
  return [*a2 setPriority:*a1];
}

const char *sub_1001F8BB0()
{
  return "parentSavedReminderIdentifier";
}

id sub_1001F8BCC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1001F54F8(a1, a2);
}

uint64_t sub_1001F8BE4@<X0>(void *a1@<X8>)
{
  return sub_1001F83E0(a1);
}

void *sub_1001F8BFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  id result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    id result = (void *)sub_1000E162C(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 64;
    uint64_t v17 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(unsigned char *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if ((*(void *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_22;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v18 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      id result = (void *)specialized ContiguousArray._endMutation()();
      int64_t v9 = 1 << *(unsigned char *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v12 = *(void *)(v8 + 8 * v10);
      if ((v12 & (1 << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v13 = v12 & (-2 << (v4 & 0x3F));
      if (v13)
      {
        int64_t v9 = __clz(__rbit64(v13)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v14 = v10 + 1;
        unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v15)
        {
          unint64_t v16 = *(void *)(v8 + 8 * v14);
          if (v16)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v16)) + (v14 << 6);
          }
          else
          {
            while (v15 - 2 != v10)
            {
              unint64_t v16 = *(void *)(a1 + 80 + 8 * v10++);
              if (v16)
              {
                unint64_t v14 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      uint64_t v7 = v18 + 1;
      uint64_t v4 = v9;
      if (v18 + 1 == v17) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

char *sub_1001F8DDC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v108 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v107 = (char *)v98 - v7;
  __chkstk_darwin(v8);
  uint64_t v110 = (char *)v98 - v9;
  __chkstk_darwin(v10);
  uint64_t v109 = (char *)v98 - v11;
  uint64_t v12 = type metadata accessor for Date();
  unint64_t v13 = *(char **)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v106 = (char *)v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Swift::Int v115 = (char *)v98 - v16;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)v98 - v18;
  __chkstk_darwin(v20);
  uint64_t v118 = (char *)v98 - v21;
  __chkstk_darwin(v22);
  uint64_t v116 = (char *)v98 - v23;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1001FD4B0();
    Set.Iterator.init(_cocoa:)();
    a1 = v123;
    uint64_t v24 = v124;
    uint64_t v26 = v125;
    uint64_t v25 = v126;
    unint64_t v27 = v127;
    if (v123 < 0)
    {
      uint64_t v128 = v13;
      uint64_t v94 = v126;
      uint64_t v101 = v124;
      uint64_t v95 = __CocoaSet.Iterator.next()();
      if (v95)
      {
        BOOL v105 = v19;
        uint64_t v99 = v2;
        uint64_t v119 = v95;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v31 = v121;
        swift_unknownObjectRelease();
        int v111 = 0;
        uint64_t v30 = v94;
        unint64_t v28 = v27;
        unint64_t v13 = v128;
        if (v31)
        {
LABEL_6:
          uint64_t v128 = v31;
          uint64_t v103 = a1 & 0x7FFFFFFFFFFFFFFFLL;
          v98[1] = v26;
          int64_t v100 = (unint64_t)(v26 + 64) >> 6;
          uint64_t v104 = a1;
          unint64_t v32 = v13;
          unint64_t v33 = (void (**)(char *, char *, uint64_t))(v13 + 32);
          uint64_t v34 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
          uint64_t v117 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
          unint64_t v35 = (void (**)(char *, uint64_t))(v32 + 8);
          unint64_t v102 = (char *)&type metadata for Swift.AnyObject + 8;
          uint64_t v112 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56);
          if (v111) {
            goto LABEL_10;
          }
LABEL_7:
          uint64_t v36 = __CocoaSet.Iterator.next()();
          if (!v36) {
            goto LABEL_74;
          }
          uint64_t v119 = v36;
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          Swift::Int v37 = v121;
          swift_unknownObjectRelease();
          uint64_t v38 = v30;
          uint64_t v39 = v28;
          if (!v37)
          {
LABEL_74:
            sub_1000C1AF8();
            return v128;
          }
          while (1)
          {
            unint64_t v113 = v39;
            uint64_t v114 = v38;
            id v44 = [v37 creationDate];
            if (v44)
            {
              id v45 = v44;
              uint64_t v46 = v118;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v47 = *v33;
              uint64_t v48 = (uint64_t)v109;
              (*v33)(v109, v46, v12);
              uint64_t v49 = *v34;
              (*v34)(v48, 0, 1, v12);
              int v50 = (*v117)(v48, 1, v12);
              uint64_t v51 = (uint64_t)v110;
              if (v50 != 1)
              {
                v47(v116, (char *)v48, v12);
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v49 = *v34;
              uint64_t v48 = (uint64_t)v109;
              (*v34)((uint64_t)v109, 1, 1, v12);
              uint64_t v51 = (uint64_t)v110;
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v48, (uint64_t *)&unk_100909A40);
LABEL_34:
            id v52 = [v128 creationDate];
            uint64_t v53 = v105;
            if (v52)
            {
              uint64_t v54 = v52;
              uint64_t v55 = v118;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              unint64_t v56 = *v33;
              unint64_t v57 = v55;
              uint64_t v34 = v112;
              (*v33)((char *)v51, v57, v12);
              v49(v51, 0, 1, v12);
              if ((*v117)(v51, 1, v12) != 1)
              {
                v56(v53, (char *)v51, v12);
                goto LABEL_39;
              }
            }
            else
            {
              v49(v51, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v51, (uint64_t *)&unk_100909A40);
LABEL_39:
            Class v58 = v116;
            char v59 = static Date.< infix(_:_:)();
            Class v60 = v53;
            uint64_t v61 = *v35;
            (*v35)(v60, v12);
            v61(v58, v12);
            if (v59) {
              goto LABEL_61;
            }
            id v62 = [v37 creationDate];
            if (v62)
            {
              uint64_t v63 = v62;
              uint64_t v64 = v118;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v65 = *v33;
              uint64_t v66 = (uint64_t)v107;
              double v67 = v64;
              uint64_t v34 = v112;
              (*v33)(v107, v67, v12);
              v49(v66, 0, 1, v12);
              if ((*v117)(v66, 1, v12) != 1)
              {
                v65(v115, (char *)v66, v12);
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v66 = (uint64_t)v107;
              v49((uint64_t)v107, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v66, (uint64_t *)&unk_100909A40);
LABEL_45:
            id v68 = [v128 creationDate];
            if (!v68)
            {
              uint64_t v72 = (uint64_t)v108;
              v49((uint64_t)v108, 1, 1, v12);
LABEL_49:
              uint64_t v74 = v106;
              static Date.distantFuture.getter();
              sub_1000966BC(v72, (uint64_t *)&unk_100909A40);
              goto LABEL_50;
            }
            id v69 = v68;
            uint64_t v70 = v118;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v71 = *v33;
            uint64_t v72 = (uint64_t)v108;
            id v73 = v70;
            uint64_t v34 = v112;
            (*v33)(v108, v73, v12);
            v49(v72, 0, 1, v12);
            if ((*v117)(v72, 1, v12) == 1) {
              goto LABEL_49;
            }
            uint64_t v74 = v106;
            v71(v106, (char *)v72, v12);
LABEL_50:
            id v75 = v115;
            char v76 = static Date.== infix(_:_:)();
            v61(v74, v12);
            v61(v75, v12);
            if ((v76 & 1) == 0) {
              goto LABEL_58;
            }
            id v77 = [v37 name];
            if (v77)
            {
              uint64_t v78 = v77;
              uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v81 = v80;
            }
            else
            {
              uint64_t v79 = 0;
              unint64_t v81 = 0xE000000000000000;
            }
            uint64_t v121 = (char *)v79;
            unint64_t v122 = v81;
            id v82 = [v128 name];
            if (v82)
            {
              uint64_t v83 = v82;
              uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v86 = v85;
            }
            else
            {
              uint64_t v84 = 0;
              unint64_t v86 = 0xE000000000000000;
            }
            uint64_t v119 = v84;
            unint64_t v120 = v86;
            sub_1000E4FD8();
            uint64_t v87 = StringProtocol.localizedStandardCompare<A>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v87 != -1)
            {
LABEL_58:

              goto LABEL_59;
            }
LABEL_61:

            uint64_t v128 = v37;
LABEL_59:
            unint64_t v28 = v113;
            uint64_t v30 = v114;
            if (!v111) {
              goto LABEL_7;
            }
LABEL_10:
            if (v28)
            {
              uint64_t v39 = (v28 - 1) & v28;
              unint64_t v40 = __clz(__rbit64(v28)) | (v30 << 6);
              uint64_t v38 = v30;
            }
            else
            {
              int64_t v41 = v30 + 1;
              if (__OFADD__(v30, 1))
              {
                __break(1u);
                goto LABEL_89;
              }
              if (v41 >= v100) {
                goto LABEL_74;
              }
              unint64_t v42 = *(void *)(v101 + 8 * v41);
              uint64_t v38 = v30 + 1;
              if (!v42)
              {
                uint64_t v38 = v30 + 2;
                if (v30 + 2 >= v100) {
                  goto LABEL_74;
                }
                unint64_t v42 = *(void *)(v101 + 8 * v38);
                if (!v42)
                {
                  uint64_t v38 = v30 + 3;
                  if (v30 + 3 >= v100) {
                    goto LABEL_74;
                  }
                  unint64_t v42 = *(void *)(v101 + 8 * v38);
                  if (!v42)
                  {
                    uint64_t v38 = v30 + 4;
                    if (v30 + 4 >= v100) {
                      goto LABEL_74;
                    }
                    unint64_t v42 = *(void *)(v101 + 8 * v38);
                    if (!v42)
                    {
                      uint64_t v38 = v30 + 5;
                      if (v30 + 5 >= v100) {
                        goto LABEL_74;
                      }
                      unint64_t v42 = *(void *)(v101 + 8 * v38);
                      if (!v42)
                      {
                        uint64_t v43 = v30 + 6;
                        while (v100 != v43)
                        {
                          unint64_t v42 = *(void *)(v101 + 8 * v43++);
                          if (v42)
                          {
                            uint64_t v38 = v43 - 1;
                            goto LABEL_27;
                          }
                        }
                        goto LABEL_74;
                      }
                    }
                  }
                }
              }
LABEL_27:
              uint64_t v39 = (v42 - 1) & v42;
              unint64_t v40 = __clz(__rbit64(v42)) + (v38 << 6);
            }
            Swift::Int v37 = (char *)*(id *)(*(void *)(v104 + 48) + 8 * v40);
            if (!v37) {
              goto LABEL_74;
            }
          }
        }
      }
      goto LABEL_87;
    }
    if (v127)
    {
LABEL_4:
      BOOL v105 = v19;
      uint64_t v101 = v24;
      uint64_t v99 = v2;
      unint64_t v28 = (v27 - 1) & v27;
      unint64_t v29 = __clz(__rbit64(v27)) | (v25 << 6);
      uint64_t v30 = v25;
LABEL_5:
      unint64_t v31 = (char *)*(id *)(*(void *)(a1 + 48) + 8 * v29);
      int v111 = 1;
      if (v31) {
        goto LABEL_6;
      }
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v88 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v26 = ~v88;
    uint64_t v89 = -v88;
    if (v89 < 64) {
      uint64_t v90 = ~(-1 << v89);
    }
    else {
      uint64_t v90 = -1;
    }
    unint64_t v27 = v90 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    if (v27) {
      goto LABEL_4;
    }
  }
  int64_t v91 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
LABEL_89:
    __break(1u);
    goto LABEL_87;
  }
  int64_t v92 = (unint64_t)(v26 + 64) >> 6;
  if (v91 < v92)
  {
    unint64_t v93 = *(void *)(v24 + 8 * v91);
    uint64_t v30 = v25 + 1;
    if (!v93)
    {
      uint64_t v30 = v25 + 2;
      if (v25 + 2 >= v92) {
        goto LABEL_87;
      }
      unint64_t v93 = *(void *)(v24 + 8 * v30);
      if (!v93)
      {
        uint64_t v30 = v25 + 3;
        if (v25 + 3 >= v92) {
          goto LABEL_87;
        }
        unint64_t v93 = *(void *)(v24 + 8 * v30);
        if (!v93)
        {
          uint64_t v30 = v25 + 4;
          if (v25 + 4 >= v92) {
            goto LABEL_87;
          }
          unint64_t v93 = *(void *)(v24 + 8 * v30);
          if (!v93)
          {
            uint64_t v30 = v25 + 5;
            if (v25 + 5 >= v92) {
              goto LABEL_87;
            }
            unint64_t v93 = *(void *)(v24 + 8 * v30);
            if (!v93)
            {
              uint64_t v97 = v25 + 6;
              do
              {
                if (v92 == v97) {
                  goto LABEL_87;
                }
                unint64_t v93 = *(void *)(v24 + 8 * v97++);
              }
              while (!v93);
              uint64_t v30 = v97 - 1;
            }
          }
        }
      }
    }
    BOOL v105 = v19;
    uint64_t v101 = v24;
    uint64_t v99 = v2;
    unint64_t v28 = (v93 - 1) & v93;
    unint64_t v29 = __clz(__rbit64(v93)) + (v30 << 6);
    goto LABEL_5;
  }
LABEL_87:
  sub_1000C1AF8();
  return 0;
}

id sub_1001F99E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v106 = (char *)v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  BOOL v105 = (char *)v96 - v7;
  __chkstk_darwin(v8);
  uint64_t v108 = (char *)v96 - v9;
  __chkstk_darwin(v10);
  id v107 = (char *)v96 - v11;
  uint64_t v12 = type metadata accessor for Date();
  unint64_t v13 = *(void (***)(void, void, void, void))(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v104 = (char *)v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v113 = (char *)v96 - v16;
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)v96 - v18;
  __chkstk_darwin(v20);
  uint64_t v116 = (char *)v96 - v21;
  __chkstk_darwin(v22);
  uint64_t v114 = (char *)v96 - v23;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    sub_1001FD4B0();
    Set.Iterator.init(_cocoa:)();
    a1 = v121;
    uint64_t v24 = v122;
    uint64_t v26 = v123;
    uint64_t v25 = v124;
    unint64_t v27 = v125;
    if (v121 < 0)
    {
      uint64_t v126 = v13;
      uint64_t v92 = v124;
      uint64_t v99 = v122;
      uint64_t v93 = __CocoaSet.Iterator.next()();
      if (v93)
      {
        uint64_t v103 = v19;
        uint64_t v97 = v2;
        uint64_t v117 = v93;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v31 = v119;
        swift_unknownObjectRelease();
        int v109 = 0;
        uint64_t v30 = v92;
        unint64_t v28 = v27;
        unint64_t v13 = v126;
        if (v31)
        {
LABEL_6:
          uint64_t v101 = a1 & 0x7FFFFFFFFFFFFFFFLL;
          v96[1] = v26;
          int64_t v98 = (unint64_t)(v26 + 64) >> 6;
          uint64_t v102 = a1;
          unint64_t v32 = v13;
          unint64_t v33 = (void (**)(char *, char *, uint64_t))(v13 + 4);
          uint64_t v126 = v32 + 7;
          Swift::Int v115 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 6);
          uint64_t v112 = (void (**)(char *, uint64_t))(v32 + 1);
          int64_t v100 = (char *)&type metadata for Swift.AnyObject + 8;
          if (v109) {
            goto LABEL_10;
          }
LABEL_7:
          uint64_t v34 = __CocoaSet.Iterator.next()();
          if (!v34) {
            goto LABEL_74;
          }
          uint64_t v117 = v34;
          sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v35 = v119;
          swift_unknownObjectRelease();
          uint64_t v36 = v30;
          uint64_t v37 = v28;
          if (!v35)
          {
LABEL_74:
            sub_1000C1AF8();
            return v31;
          }
          while (1)
          {
            uint64_t v111 = v36;
            id v42 = [v31 creationDate];
            if (v42)
            {
              uint64_t v43 = v42;
              id v44 = v116;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v45 = *v33;
              uint64_t v46 = (uint64_t)v107;
              (*v33)(v107, v44, v12);
              uint64_t v47 = *v126;
              (*v126)(v46, 0, 1, v12);
              int v48 = (*v115)(v46, 1, v12);
              uint64_t v49 = (uint64_t)v108;
              if (v48 != 1)
              {
                v45(v114, (char *)v46, v12);
                goto LABEL_34;
              }
            }
            else
            {
              uint64_t v47 = *v126;
              uint64_t v46 = (uint64_t)v107;
              (*v126)(v107, 1, 1, v12);
              uint64_t v49 = (uint64_t)v108;
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v46, (uint64_t *)&unk_100909A40);
LABEL_34:
            unint64_t v110 = v37;
            id v50 = [v35 creationDate];
            uint64_t v51 = v103;
            if (v50)
            {
              id v52 = v50;
              id v53 = v31;
              uint64_t v54 = v116;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v55 = *v33;
              unint64_t v56 = v54;
              id v31 = v53;
              (*v33)((char *)v49, v56, v12);
              v47(v49, 0, 1, v12);
              if ((*v115)(v49, 1, v12) != 1)
              {
                v55(v51, (char *)v49, v12);
                goto LABEL_39;
              }
            }
            else
            {
              v47(v49, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v49, (uint64_t *)&unk_100909A40);
LABEL_39:
            unint64_t v57 = v114;
            char v58 = static Date.< infix(_:_:)();
            char v59 = v51;
            Class v60 = *v112;
            (*v112)(v59, v12);
            v60(v57, v12);
            if (v58) {
              goto LABEL_61;
            }
            id v61 = v31;
            id v62 = [v31 creationDate];
            if (v62)
            {
              uint64_t v63 = v62;
              uint64_t v64 = v116;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v65 = *v33;
              uint64_t v66 = (uint64_t)v105;
              (*v33)(v105, v64, v12);
              v47(v66, 0, 1, v12);
              if ((*v115)(v66, 1, v12) != 1)
              {
                v65(v113, (char *)v66, v12);
                goto LABEL_45;
              }
            }
            else
            {
              uint64_t v66 = (uint64_t)v105;
              v47((uint64_t)v105, 1, 1, v12);
            }
            static Date.distantFuture.getter();
            sub_1000966BC(v66, (uint64_t *)&unk_100909A40);
LABEL_45:
            id v67 = [v35 creationDate];
            if (!v67)
            {
              uint64_t v71 = (uint64_t)v106;
              v47((uint64_t)v106, 1, 1, v12);
              id v31 = v61;
LABEL_49:
              uint64_t v72 = v104;
              static Date.distantFuture.getter();
              sub_1000966BC(v71, (uint64_t *)&unk_100909A40);
              goto LABEL_50;
            }
            id v68 = v67;
            id v69 = v116;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v70 = *v33;
            uint64_t v71 = (uint64_t)v106;
            (*v33)(v106, v69, v12);
            v47(v71, 0, 1, v12);
            id v31 = v61;
            if ((*v115)(v71, 1, v12) == 1) {
              goto LABEL_49;
            }
            uint64_t v72 = v104;
            v70(v104, (char *)v71, v12);
LABEL_50:
            id v73 = v113;
            char v74 = static Date.== infix(_:_:)();
            v60(v72, v12);
            v60(v73, v12);
            if ((v74 & 1) == 0) {
              goto LABEL_58;
            }
            id v75 = [v31 name];
            if (v75)
            {
              char v76 = v75;
              uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v79 = v78;
            }
            else
            {
              uint64_t v77 = 0;
              unint64_t v79 = 0xE000000000000000;
            }
            uint64_t v119 = (void *)v77;
            unint64_t v120 = v79;
            id v80 = [v35 name];
            if (v80)
            {
              unint64_t v81 = v80;
              uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v84 = v83;
            }
            else
            {
              uint64_t v82 = 0;
              unint64_t v84 = 0xE000000000000000;
            }
            uint64_t v117 = v82;
            unint64_t v118 = v84;
            sub_1000E4FD8();
            uint64_t v85 = StringProtocol.localizedStandardCompare<A>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v85 != -1)
            {
LABEL_58:

              goto LABEL_59;
            }
LABEL_61:

            id v31 = v35;
LABEL_59:
            unint64_t v28 = v110;
            uint64_t v30 = v111;
            if (!v109) {
              goto LABEL_7;
            }
LABEL_10:
            if (v28)
            {
              uint64_t v37 = (v28 - 1) & v28;
              unint64_t v38 = __clz(__rbit64(v28)) | (v30 << 6);
              uint64_t v36 = v30;
            }
            else
            {
              int64_t v39 = v30 + 1;
              if (__OFADD__(v30, 1))
              {
                __break(1u);
                goto LABEL_89;
              }
              if (v39 >= v98) {
                goto LABEL_74;
              }
              unint64_t v40 = *(void *)(v99 + 8 * v39);
              uint64_t v36 = v30 + 1;
              if (!v40)
              {
                uint64_t v36 = v30 + 2;
                if (v30 + 2 >= v98) {
                  goto LABEL_74;
                }
                unint64_t v40 = *(void *)(v99 + 8 * v36);
                if (!v40)
                {
                  uint64_t v36 = v30 + 3;
                  if (v30 + 3 >= v98) {
                    goto LABEL_74;
                  }
                  unint64_t v40 = *(void *)(v99 + 8 * v36);
                  if (!v40)
                  {
                    uint64_t v36 = v30 + 4;
                    if (v30 + 4 >= v98) {
                      goto LABEL_74;
                    }
                    unint64_t v40 = *(void *)(v99 + 8 * v36);
                    if (!v40)
                    {
                      uint64_t v36 = v30 + 5;
                      if (v30 + 5 >= v98) {
                        goto LABEL_74;
                      }
                      unint64_t v40 = *(void *)(v99 + 8 * v36);
                      if (!v40)
                      {
                        uint64_t v41 = v30 + 6;
                        while (v98 != v41)
                        {
                          unint64_t v40 = *(void *)(v99 + 8 * v41++);
                          if (v40)
                          {
                            uint64_t v36 = v41 - 1;
                            goto LABEL_27;
                          }
                        }
                        goto LABEL_74;
                      }
                    }
                  }
                }
              }
LABEL_27:
              uint64_t v37 = (v40 - 1) & v40;
              unint64_t v38 = __clz(__rbit64(v40)) + (v36 << 6);
            }
            id v35 = *(id *)(*(void *)(v102 + 48) + 8 * v38);
            if (!v35) {
              goto LABEL_74;
            }
          }
        }
      }
      goto LABEL_87;
    }
    if (v125)
    {
LABEL_4:
      uint64_t v103 = v19;
      uint64_t v99 = v24;
      uint64_t v97 = v2;
      unint64_t v28 = (v27 - 1) & v27;
      unint64_t v29 = __clz(__rbit64(v27)) | (v25 << 6);
      uint64_t v30 = v25;
LABEL_5:
      id v31 = *(id *)(*(void *)(a1 + 48) + 8 * v29);
      int v109 = 1;
      if (v31) {
        goto LABEL_6;
      }
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v86 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v26 = ~v86;
    uint64_t v87 = -v86;
    if (v87 < 64) {
      uint64_t v88 = ~(-1 << v87);
    }
    else {
      uint64_t v88 = -1;
    }
    unint64_t v27 = v88 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    if (v27) {
      goto LABEL_4;
    }
  }
  int64_t v89 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
LABEL_89:
    __break(1u);
    goto LABEL_87;
  }
  int64_t v90 = (unint64_t)(v26 + 64) >> 6;
  if (v89 < v90)
  {
    unint64_t v91 = *(void *)(v24 + 8 * v89);
    uint64_t v30 = v25 + 1;
    if (!v91)
    {
      uint64_t v30 = v25 + 2;
      if (v25 + 2 >= v90) {
        goto LABEL_87;
      }
      unint64_t v91 = *(void *)(v24 + 8 * v30);
      if (!v91)
      {
        uint64_t v30 = v25 + 3;
        if (v25 + 3 >= v90) {
          goto LABEL_87;
        }
        unint64_t v91 = *(void *)(v24 + 8 * v30);
        if (!v91)
        {
          uint64_t v30 = v25 + 4;
          if (v25 + 4 >= v90) {
            goto LABEL_87;
          }
          unint64_t v91 = *(void *)(v24 + 8 * v30);
          if (!v91)
          {
            uint64_t v30 = v25 + 5;
            if (v25 + 5 >= v90) {
              goto LABEL_87;
            }
            unint64_t v91 = *(void *)(v24 + 8 * v30);
            if (!v91)
            {
              uint64_t v95 = v25 + 6;
              do
              {
                if (v90 == v95) {
                  goto LABEL_87;
                }
                unint64_t v91 = *(void *)(v24 + 8 * v95++);
              }
              while (!v91);
              uint64_t v30 = v95 - 1;
            }
          }
        }
      }
    }
    uint64_t v103 = v19;
    uint64_t v99 = v24;
    uint64_t v97 = v2;
    unint64_t v28 = (v91 - 1) & v91;
    unint64_t v29 = __clz(__rbit64(v91)) + (v30 << 6);
    goto LABEL_5;
  }
LABEL_87:
  sub_1000C1AF8();
  return 0;
}

uint64_t sub_1001FA61C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090FDB0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090FDB0);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  *(void *)&v8[0] = 0xD00000000000003CLL;
  *((void *)&v8[0] + 1) = 0x8000000100781260;
  id v4 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  sub_1000D6CBC((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    sub_1000966BC((uint64_t)v9, &qword_100908190);
LABEL_9:
    sub_1001FA8FC(_.super.isa);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    v9[0] = 0xD00000000000003CLL;
    v9[1] = 0x8000000100781260;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v5 = [v7 integerValue];

  if ((uint64_t)v5 <= 0) {
    goto LABEL_9;
  }
}

uint64_t sub_1001FA8FC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100907140 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_10090FDB0);
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    id v10 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v10, v11, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "DiacriticsInsensitiveHashtagLabelsMigrator BEGIN {store: %{public}s}", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v13 = [v6 persistentStoreCoordinator];
  [v12 setPersistentStoreCoordinator:v13];

  [v12 setTransactionAuthor:RDStoreControllerDiacriticsInsensitiveHashtagLabelsMigrationAuthor];
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = v2;
  v14[3] = v12;
  v14[4] = v6;
  v14[5] = ObjectType;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1001FB89C;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = (uint64_t)sub_10008F6F4;
  aBlock[5] = v15;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1003B3260;
  aBlock[3] = (uint64_t)&unk_1008BE618;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v6;
  id v18 = v2;
  id v19 = v12;
  swift_retain();
  swift_release();
  [v19 performBlockAndWait:v16];

  _Block_release(v16);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v19) {
    __break(1u);
  }
  return result;
}

void sub_1001FAC58(uint64_t a1, void *a2, void *a3)
{
  unint64_t v4 = sub_1001FB8D0((uint64_t)a2, a3, 50);
  uint64_t v5 = &qword_100907000;
  unint64_t v12 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13)
    {
LABEL_8:
      uint64_t v33 = v13;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v5 = (uint64_t *)(v12 & 0xC000000000000001);
      while (1)
      {
        id v16 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v12 + 8 * v14 + 32);
        id v17 = v16;
        uint64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          break;
        }
        unint64_t v19 = (unint64_t)sub_1001FC3B8(v16, a2, a3);
        if (v19 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        BOOL v21 = __OFADD__(v15, v20);
        v15 += v20;
        if (v21) {
          goto LABEL_25;
        }
        if (__ROR8__(0x8F5C28F5C28F5C29 * v18 + 0x51EB851EB851EB8, 1) <= 0x51EB851EB851EB8uLL
          && ([a2 hasChanges] & 1) != 0)
        {
          id v35 = 0;
          if (![a2 save:&v35])
          {
            id v23 = v35;
            swift_bridgeObjectRelease();
            _convertNSErrorToError(_:)();

            swift_willThrow();
            uint64_t v5 = &qword_100907000;
            goto LABEL_2;
          }
          id v22 = v35;
        }

        ++v14;
        if (v18 == v33)
        {
          swift_bridgeObjectRelease();
          uint64_t v5 = &qword_100907000;
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      swift_once();
LABEL_3:
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10090FDB0);
      swift_errorRetain();
      swift_errorRetain();
      id v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        id v35 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315138;
        swift_getErrorValue();
        uint64_t v10 = Error.rem_errorDescription.getter();
        sub_1000C51B8(v10, v11, (uint64_t *)&v35);
        uint64_t v5 = &qword_100907000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "DiacriticsInsensitiveHashtagLabelsMigrator with error: %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
LABEL_29:
  if (objc_msgSend(a2, "hasChanges", v33))
  {
    id v35 = 0;
    if ([a2 save:&v35])
    {
      id v24 = v35;
      goto LABEL_32;
    }
    id v32 = v35;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_2:
    if (v5[40] == -1) {
      goto LABEL_3;
    }
    goto LABEL_26;
  }
LABEL_32:
  if (v5[40] != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10090FDB0);
  id v26 = a3;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    id v35 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136446722;
    id v30 = sub_1002ECF34();
    sub_1000C51B8((uint64_t)v30, v31, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v29 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "DiacriticsInsensitiveHashtagLabelsMigrator END {store: %{public}s, existing hashtag labels count = %ld, newly created hashtag labels count: %ld}", (uint8_t *)v29, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1001FB26C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v7 = (char *)v38 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v38 - v13;
  *(void *)&double v16 = __chkstk_darwin(v15).n128_u64[0];
  uint64_t v18 = (char *)v38 - v17;
  id v19 = [v1 hashtags:v16];
  if (!v19) {
    return;
  }
  uint64_t v20 = v19;
  uint64_t v41 = v4;
  sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  sub_1001FD4B0();
  uint64_t v21 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v21 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      goto LABEL_10;
    }
  }
  else if (!*(void *)(v21 + 16))
  {
    goto LABEL_10;
  }
  id v22 = sub_1001F8DDC(v21);
  if (v22)
  {
    v38[1] = 0;
    id v23 = v11;
    id v24 = v22;
    id v25 = [v22 name];
    id v40 = v1;
    [v1 setName:v25];

    int64_t v39 = v24;
    id v26 = [v24 creationDate];
    if (v26)
    {
      unint64_t v27 = v26;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      os_log_type_t v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v28(v7, v14, v8);
      v38[0] = *(void *)(v9 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v38[0])(v7, 0, 1, v8);
      uint64_t v29 = v23;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        v28(v18, v7, v8);
        goto LABEL_15;
      }
    }
    else
    {
      v38[0] = *(void *)(v9 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v38[0])(v7, 1, 1, v8);
      uint64_t v29 = v23;
    }
    static Date.distantFuture.getter();
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
LABEL_15:
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    unint64_t v31 = *(void (**)(char *, uint64_t))(v9 + 8);
    v31(v18, v8);
    [v40 setFirstOccurrenceCreationDate:isa];

    id v32 = sub_1001F99E4(v21);
    swift_bridgeObjectRelease();
    if (!v32)
    {

      return;
    }
    id v33 = [v32 creationDate];
    if (v33)
    {
      uint64_t v34 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v36 = (uint64_t)v41;
      v35(v41, v14, v8);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v38[0])(v36, 0, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v36, 1, v8) != 1)
      {
        v35(v29, (char *)v36, v8);
LABEL_22:
        Class v37 = Date._bridgeToObjectiveC()().super.isa;
        v31(v29, v8);
        [v40 setRecencyDate:v37];

        return;
      }
    }
    else
    {
      uint64_t v36 = (uint64_t)v41;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v38[0])(v41, 1, 1, v8);
    }
    static Date.distantPast.getter();
    sub_1000966BC(v36, (uint64_t *)&unk_100909A40);
    goto LABEL_22;
  }
LABEL_10:

  swift_bridgeObjectRelease();
}

id RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels();
  return [super init];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels()
{
  return self;
}

id RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels();
  return [super dealloc];
}

uint64_t sub_1001FB854()
{
  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001FB89C()
{
  sub_1001FAC58(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1001FB8A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001FB8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001FB8C8()
{
  return swift_release();
}

uint64_t sub_1001FB8D0(uint64_t a1, void *a2, uint64_t a3)
{
  sub_100094134((uint64_t *)&unk_10090FE10);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = sub_1002E1D18(KeyPath, v5);
  swift_release();
  swift_release();
  *(void *)(inited + 32) = v6;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = sub_10039F83C(v7, 1);
  swift_release();
  *(void *)(inited + 40) = v8;
  specialized Array._endMutation()();
  uint64_t v9 = sub_100397E58(inited);
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:v9];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_10077B710;
  *(void *)(v12 + 32) = swift_getKeyPath();
  *(void *)(v12 + 40) = swift_getKeyPath();
  *(void *)&long long v49 = v12;
  specialized Array._endMutation()();
  uint64_t v13 = v12;
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 2, 0);
  uint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v46 = (void *)v9;
  if ((v12 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v15 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v16) {
    goto LABEL_20;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  id v50 = &type metadata for String;
  swift_release();
  *(void *)&long long v49 = v17;
  *((void *)&v49 + 1) = v18;
  unint64_t v20 = _swiftEmptyArrayStorage[2];
  unint64_t v19 = _swiftEmptyArrayStorage[3];
  if (v20 >= v19 >> 1)
  {
    sub_1001DE1C4(v19 > 1, v20 + 1, 1);
    uint64_t v14 = v51;
  }
  void v14[2] = v20 + 1;
  sub_10009A1A0(&v49, &v14[4 * v20 + 4]);
  if ((v13 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v21 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v22)
  {
LABEL_20:
    _StringGuts.grow(_:)(46);
    v44._object = (void *)0x80000001007CAF70;
    v44._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v44);
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
LABEL_22:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v23 = v21;
  uint64_t v24 = v22;
  id v50 = &type metadata for String;
  swift_release();
  *(void *)&long long v49 = v23;
  *((void *)&v49 + 1) = v24;
  uint64_t v51 = v14;
  unint64_t v26 = v14[2];
  unint64_t v25 = v14[3];
  if (v26 >= v25 >> 1)
  {
    sub_1001DE1C4(v25 > 1, v26 + 1, 1);
    uint64_t v14 = v51;
  }
  void v14[2] = v26 + 1;
  sub_10009A1A0(&v49, &v14[4 * v26 + 4]);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v10 setPropertiesToFetch:isa];

  uint64_t v28 = swift_initStackObject();
  *(_OWORD *)(v28 + 16) = xmmword_10077A530;
  *(void *)(v28 + 32) = swift_getKeyPath();
  *(void *)&long long v49 = v28;
  specialized Array._endMutation()();
  uint64_t v29 = v49;
  sub_1001DE058(0, 1, 0);
  if ((v29 & 0xC000000000000001) != 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v30 = *(void *)(v29 + 32);
    swift_retain();
  }
  uint64_t v31 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v32)
  {
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v45._object = (void *)0x80000001007CAF70;
    v45._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v45);
    uint64_t v51 = (void *)v30;
    sub_100094134(&qword_10090DC68);
    _print_unlocked<A, B>(_:_:)();
    goto LABEL_22;
  }
  uint64_t v33 = v31;
  uint64_t v34 = v32;
  swift_release();
  unint64_t v36 = _swiftEmptyArrayStorage[2];
  unint64_t v35 = _swiftEmptyArrayStorage[3];
  if (v36 >= v35 >> 1) {
    sub_1001DE058(v35 > 1, v36 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v36 + 1;
  Class v37 = &_swiftEmptyArrayStorage[2 * v36];
  v37[4] = v33;
  void v37[5] = v34;
  swift_bridgeObjectRelease();
  Class v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v10 setRelationshipKeyPathsForPrefetching:v38];

  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_10077A530;
  *(void *)(v39 + 32) = a2;
  *(void *)&long long v49 = v39;
  specialized Array._endMutation()();
  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  id v40 = a2;
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 setAffectedStores:v41];

  [v10 setFetchBatchSize:a3];
  uint64_t v42 = NSManagedObjectContext.fetch<A>(_:)();

  return v42;
}

uint64_t sub_1001FBF3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)sub_10032F83C(KeyPath, a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_10090BFF0);
  id v9 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v10 = [(id)swift_getObjCClassFromMetadata() entity];
  [v9 setEntity:v10];

  [v9 setAffectedStores:0];
  [v9 setPredicate:v8];

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v9 setPropertiesToFetch:isa];

  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  specialized Array._endMutation()();
  sub_1001DE058(0, 1, 0);
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v13 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v14;
    swift_release();
    unint64_t v18 = _swiftEmptyArrayStorage[2];
    unint64_t v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1) {
      sub_1001DE058(v17 > 1, v18 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v18 + 1;
    unint64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
    v19[4] = v15;
    id v19[5] = v16;
    swift_bridgeObjectRelease();
    Class v20 = Array._bridgeToObjectiveC()().super.isa;
    swift_release();
    [v9 setRelationshipKeyPathsForPrefetching:v20];

    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_10077A530;
    uint64_t v22 = (uint64_t)a4;
    *(void *)(v21 + 32) = a4;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
    id v23 = a4;
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v9 setAffectedStores:v24];

    [v9 setFetchLimit:1];
    unint64_t v25 = NSManagedObjectContext.fetch<A>(_:)();
    if (v4)
    {

      return v22;
    }
    unint64_t v26 = v25;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v22 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v22)
      {
LABEL_15:
        swift_bridgeObjectRelease();

        return v22;
      }
    }
    if ((v26 & 0xC000000000000001) != 0)
    {
      id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_14;
    }
    if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v27 = *(id *)(v26 + 32);
LABEL_14:
      uint64_t v22 = (uint64_t)v27;
      goto LABEL_15;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(46);
  v29._object = (void *)0x80000001007CAF70;
  v29._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v29);
  sub_100094134(&qword_10090DC68);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001FC3B8(void *a1, void *a2, void *a3)
{
  uint64_t v121 = a3;
  uint64_t v124 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090FDF0);
  *(void *)&double v5 = __chkstk_darwin(v4 - 8).n128_u64[0];
  uint64_t v132 = (char *)v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 hashtags:v5];
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = v7;
  uint64_t v9 = sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
  unint64_t v117 = sub_1001FD4B0();
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v11 = [a1 canonicalName];
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11;
  id v122 = a1;
  uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  int64_t v14 = v13;

  if (qword_100907140 != -1) {
LABEL_107:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_10008E2DC(v15, (uint64_t)qword_10090FDB0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v130 = v16;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v134 = (void *)v14;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    v139[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v138 = sub_1000C51B8(v136, v14, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2048;
    if ((v10 & 0xC000000000000001) != 0) {
      uint64_t v21 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v21 = *(void *)(v10 + 16);
    }
    swift_bridgeObjectRelease();
    uint64_t v138 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "DiacriticsInsensitiveHashtagLabelsMigrator: process hashtag label '%s' with hashtags: %ld", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((v10 & 0xC000000000000001) == 0) {
      goto LABEL_13;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if ((v10 & 0xC000000000000001) == 0)
    {
LABEL_13:
      uint64_t v25 = 0;
      uint64_t v27 = *(void *)(v10 + 56);
      uint64_t v129 = v10 + 56;
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      uint64_t v29 = ~v28;
      uint64_t v30 = -v28;
      if (v30 < 64) {
        uint64_t v31 = ~(-1 << v30);
      }
      else {
        uint64_t v31 = -1;
      }
      unint64_t v26 = v31 & v27;
      uint64_t v24 = v29;
      goto LABEL_17;
    }
  }
  __CocoaSet.makeIterator()();
  Set.Iterator.init(_cocoa:)();
  uint64_t v10 = v139[2];
  uint64_t v129 = v139[3];
  uint64_t v24 = v139[4];
  uint64_t v25 = v139[5];
  unint64_t v26 = v139[6];
LABEL_17:
  uint64_t v126 = v10 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v113 = v24;
  int64_t v127 = (unint64_t)(v24 + 64) >> 6;
  v111[1] = v139;
  uint64_t v128 = _swiftEmptyDictionarySingleton;
  *(void *)&long long v23 = 136446210;
  long long v120 = v23;
  uint64_t v119 = (char *)&type metadata for Any + 8;
  *(void *)&long long v23 = 136446466;
  long long v114 = v23;
  *(void *)&long long v23 = 138412290;
  long long v112 = v23;
  unint64_t v125 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v123 = v9;
  uint64_t v135 = v10;
  while (1)
  {
    if (v10 < 0)
    {
      uint64_t v34 = __CocoaSet.Iterator.next()();
      if (!v34) {
        goto LABEL_72;
      }
      uint64_t v138 = v34;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v35 = (id)v139[0];
      swift_unknownObjectRelease();
      int64_t v14 = v25;
      uint64_t v32 = v26;
      if (!v35) {
        goto LABEL_72;
      }
      goto LABEL_35;
    }
    if (v26)
    {
      uint64_t v32 = (v26 - 1) & v26;
      unint64_t v33 = __clz(__rbit64(v26)) | (v25 << 6);
      int64_t v14 = v25;
      goto LABEL_34;
    }
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v14 >= v127) {
      goto LABEL_72;
    }
    unint64_t v36 = *(void *)(v129 + 8 * v14);
    if (!v36) {
      break;
    }
LABEL_33:
    uint64_t v32 = (v36 - 1) & v36;
    unint64_t v33 = __clz(__rbit64(v36)) + (v14 << 6);
LABEL_34:
    id v35 = *(id *)(*(void *)(v10 + 48) + 8 * v33);
    if (!v35) {
      goto LABEL_72;
    }
LABEL_35:
    id v38 = [v35 name];
    if (v38)
    {
      uint64_t v39 = v38;
      int64_t v137 = v14;
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      v139[0] = v40;
      v139[1] = v42;
      uint64_t v43 = (uint64_t)v132;
      static Locale.current.getter();
      uint64_t v44 = type metadata accessor for Locale();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 0, 1, v44);
      sub_1000E4FD8();
      uint64_t v45 = StringProtocol.foldedStringForWriting(locale:)();
      uint64_t v22 = v46;
      sub_1000966BC(v43, (uint64_t *)&unk_10090FDF0);
      swift_bridgeObjectRelease();
      if (v45 == v136 && v22 == v134 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();

        uint64_t v25 = v137;
        goto LABEL_44;
      }
      swift_bridgeObjectRetain_n();
      id v58 = v35;
      char v59 = Logger.logObject.getter();
      int v118 = static os_log_type_t.info.getter();
      BOOL v60 = os_log_type_enabled(v59, (os_log_type_t)v118);
      uint64_t v131 = v32;
      if (v60)
      {
        uint64_t v61 = swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        v139[0] = v115;
        *(_DWORD *)uint64_t v61 = v114;
        id v116 = v58;
        id v62 = [v58 remObjectID];
        if (v62)
        {
          uint64_t v63 = v62;
          id v64 = [v62 description];

          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;

          uint64_t v32 = v131;
        }
        else
        {
          unint64_t v67 = 0xE300000000000000;
          uint64_t v65 = 7104878;
        }
        *(void *)(v61 + 4) = sub_1000C51B8(v65, v67, v139);
        id v68 = v116;

        swift_bridgeObjectRelease();
        *(_WORD *)(v61 + 12) = 2080;
        unint64_t v69 = (unint64_t)v134;
        swift_bridgeObjectRetain();
        *(void *)(v61 + 14) = sub_1000C51B8(v136, v69, v139);
        id v58 = v68;
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v118, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not match hashtag label name '%s'", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v9 = v123;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      [v122 removeHashtagsObject:v58];
      uint64_t v70 = v137;
      if (!v128[2]) {
        goto LABEL_57;
      }
      swift_bridgeObjectRetain();
      uint64_t v71 = v128;
      unint64_t v72 = sub_1001806F8(v45, (uint64_t)v22);
      if (v73)
      {
        id v74 = *(id *)(v71[7] + 8 * v72);
        swift_bridgeObjectRelease_n();
        [v74 addHashtagsObject:v58];

        uint64_t v25 = v70;
LABEL_44:
        unint64_t v26 = v32;
        uint64_t v10 = v135;
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_57:
        id v75 = v58;
        uint64_t v76 = v133;
        uint64_t v77 = (void *)sub_1001FBF3C(v45, (uint64_t)v22, (uint64_t)v124, v121);
        uint64_t v133 = v76;
        if (v76)
        {
          sub_1000C1AF8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v22;
        }
        unint64_t v78 = v77;
        if (v77)
        {
          unint64_t v79 = v77;
          id v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v80, v81))
          {
            uint64_t v82 = swift_slowAlloc();
            unint64_t v83 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v82 = v112;
            *(void *)(v82 + 4) = v79;
            *unint64_t v83 = v78;
            _os_log_impl((void *)&_mh_execute_header, v80, v81, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag label '%@' is already in database", (uint8_t *)v82, 0xCu);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            uint64_t v9 = v123;
            swift_slowDealloc();
            uint64_t v70 = v137;
            swift_slowDealloc();
          }
          else
          {

            id v80 = v79;
          }

          [v79 addHashtagsObject:v75];
          int64_t v89 = v79;
        }
        else
        {
          uint64_t v84 = v133;
          uint64_t v85 = sub_10062C2E8(v75, v124);
          uint64_t v133 = v84;
          int64_t v89 = v85;
        }
        uint64_t v86 = v89;
        uint64_t v87 = (uint64_t)v128;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v139[0] = v87;
        sub_1002C3EE4((uint64_t)v86, v45, (uint64_t)v22, isUniquelyReferenced_nonNull_native);
        uint64_t v128 = (void *)v139[0];

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v25 = v70;
LABEL_65:
        unint64_t v26 = v131;
        uint64_t v10 = v135;
      }
    }
    else
    {
      id v47 = v35;
      int v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v131 = v32;
        int64_t v50 = v14;
        uint64_t v51 = swift_slowAlloc();
        v139[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = v120;
        id v52 = [v47 remObjectID];
        if (v52)
        {
          id v53 = v52;
          id v54 = [v52 description];

          uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v57 = v56;

          uint64_t v9 = v123;
        }
        else
        {
          unint64_t v57 = 0xE300000000000000;
          uint64_t v55 = 7104878;
        }
        *(void *)(v51 + 4) = sub_1000C51B8(v55, v57, v139);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not have canonicalName", (uint8_t *)v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v25 = v50;
        goto LABEL_65;
      }

      uint64_t v25 = v14;
      unint64_t v26 = v32;
    }
  }
  int64_t v37 = v25 + 2;
  if (v25 + 2 >= v127) {
    goto LABEL_72;
  }
  unint64_t v36 = *(void *)(v129 + 8 * v37);
  if (v36) {
    goto LABEL_32;
  }
  int64_t v37 = v25 + 3;
  if (v25 + 3 >= v127) {
    goto LABEL_72;
  }
  unint64_t v36 = *(void *)(v129 + 8 * v37);
  if (v36)
  {
LABEL_32:
    int64_t v14 = v37;
    goto LABEL_33;
  }
  int64_t v14 = v25 + 4;
  if (v25 + 4 >= v127) {
    goto LABEL_72;
  }
  unint64_t v36 = *(void *)(v129 + 8 * v14);
  if (v36) {
    goto LABEL_33;
  }
  uint64_t v90 = v25 + 5;
  while (v127 != v90)
  {
    unint64_t v36 = *(void *)(v129 + 8 * v90++);
    if (v36)
    {
      int64_t v14 = v90 - 1;
      goto LABEL_33;
    }
  }
LABEL_72:
  sub_1000C1AF8();
  swift_bridgeObjectRelease();
  int64_t v14 = (int64_t)v128;
  unint64_t v91 = v128 + 8;
  uint64_t v92 = 1 << *((unsigned char *)v128 + 32);
  uint64_t v93 = -1;
  if (v92 < 64) {
    uint64_t v93 = ~(-1 << v92);
  }
  unint64_t v94 = v93 & v128[8];
  int64_t v95 = (unint64_t)(v92 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v96 = 0;
  while (2)
  {
    if (v94)
    {
      unint64_t v97 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      unint64_t v98 = v97 | (v96 << 6);
      goto LABEL_76;
    }
    if (__OFADD__(v96++, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
      goto LABEL_106;
    }
    if (v96 >= v95) {
      break;
    }
    unint64_t v101 = v91[v96];
    if (v101) {
      goto LABEL_88;
    }
    int64_t v102 = v96 + 1;
    if (v96 + 1 >= v95) {
      break;
    }
    unint64_t v101 = v91[v102];
    if (v101) {
      goto LABEL_87;
    }
    int64_t v102 = v96 + 2;
    if (v96 + 2 >= v95) {
      break;
    }
    unint64_t v101 = v91[v102];
    if (v101) {
      goto LABEL_87;
    }
    int64_t v102 = v96 + 3;
    if (v96 + 3 < v95)
    {
      unint64_t v101 = v91[v102];
      if (!v101)
      {
        while (1)
        {
          int64_t v96 = v102 + 1;
          if (__OFADD__(v102, 1)) {
            goto LABEL_105;
          }
          if (v96 >= v95) {
            goto LABEL_93;
          }
          unint64_t v101 = v91[v96];
          ++v102;
          if (v101) {
            goto LABEL_88;
          }
        }
      }
LABEL_87:
      int64_t v96 = v102;
LABEL_88:
      unint64_t v94 = (v101 - 1) & v101;
      unint64_t v98 = __clz(__rbit64(v101)) + (v96 << 6);
LABEL_76:
      id v99 = *(id *)(*(void *)(v14 + 56) + 8 * v98);
      sub_1001FB26C();

      continue;
    }
    break;
  }
LABEL_93:
  swift_release();
  id v103 = v122;
  id v104 = [v122 hashtags];
  if (v104
    && ((BOOL v105 = v104,
         uint64_t v106 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
         v105,
         (v106 & 0xC000000000000001) == 0)
      ? (uint64_t v107 = *(void *)(v106 + 16))
      : (uint64_t v107 = __CocoaSet.count.getter()),
        swift_bridgeObjectRelease(),
        v107))
  {
    if (*(void *)(v14 + 16)) {
      sub_1001FB26C();
    }
  }
  else
  {
    [v124 deleteObject:v103];
  }
  uint64_t v108 = swift_bridgeObjectRetain();
  uint64_t v109 = v133;
  uint64_t v22 = sub_1001F8BFC(v108);
  uint64_t v133 = v109;
  swift_bridgeObjectRelease_n();
  return v22;
}

unint64_t sub_1001FD4B0()
{
  unint64_t result = qword_10090BFA0;
  if (!qword_10090BFA0)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090DC20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090BFA0);
  }
  return result;
}

void *sub_1001FD530()
{
  uint64_t v1 = type metadata accessor for CharacterSet();
  uint64_t v2 = *(void *)(v1 - 8);
  *(void *)&double v3 = __chkstk_darwin(v1).n128_u64[0];
  double v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(v0, "isInserted", v3) && (objc_msgSend(v0, "completed") & 1) == 0)
  {
    uint64_t v6 = sub_10030AC18(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v8 = v6[2];
    unint64_t v7 = v6[3];
    if (v8 >= v7 >> 1) {
      uint64_t v6 = sub_10030AC18((void *)(v7 > 1), v8 + 1, 1, v6);
    }
    v6[2] = v8 + 1;
    *((unsigned char *)v6 + v8 + 32) = 1;
  }
  else
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
  }
  id v9 = [v0 changedValues];
  uint64_t v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (([v0 isInserted] & 1) == 0)
  {
    if (*(void *)(v10 + 16))
    {
      unint64_t v11 = sub_1001806F8(0x6574656C706D6F63, 0xE900000000000064);
      if (v12)
      {
        sub_10009A1B0(*(void *)(v10 + 56) + 32 * v11, (uint64_t)&v29);
        if ((swift_dynamicCast() & 1) != 0 && v28 == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_10030AC18(0, v6[2] + 1, 1, v6);
          }
          unint64_t v14 = v6[2];
          unint64_t v13 = v6[3];
          if (v14 >= v13 >> 1) {
            uint64_t v6 = sub_10030AC18((void *)(v13 > 1), v14 + 1, 1, v6);
          }
          v6[2] = v14 + 1;
          *((unsigned char *)v6 + v14 + 32) = 2;
        }
      }
    }
  }
  static CharacterSet.hashtagTokenPrefixCharacters.getter();
  if (*(void *)(v10 + 16))
  {
    unint64_t v15 = sub_1001806F8(0x656C746974, 0xE500000000000000);
    if (v16)
    {
      sub_10009A1B0(*(void *)(v10 + 56) + 32 * v15, (uint64_t)&v29);
      if (swift_dynamicCast())
      {
        long long v29 = v28;
        sub_1000E4FD8();
        StringProtocol.rangeOfCharacter(from:options:range:)();
        char v18 = v17;
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v6 = sub_10030AC18(0, v6[2] + 1, 1, v6);
          }
          unint64_t v20 = v6[2];
          unint64_t v19 = v6[3];
          if (v20 >= v19 >> 1) {
            uint64_t v6 = sub_10030AC18((void *)(v19 > 1), v20 + 1, 1, v6);
          }
          v6[2] = v20 + 1;
          *((unsigned char *)v6 + v20 + 32) = 3;
        }
      }
    }
  }
  if (*(void *)(v10 + 16) && (unint64_t v21 = sub_1001806F8(0x7365746F6ELL, 0xE500000000000000), (v22 & 1) != 0))
  {
    sub_10009A1B0(*(void *)(v10 + 56) + 32 * v21, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v30 + 1))
  {
    if (swift_dynamicCast())
    {
      long long v29 = v28;
      sub_1000E4FD8();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      char v24 = v23;
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = sub_10030AC18(0, v6[2] + 1, 1, v6);
        }
        unint64_t v26 = v6[2];
        unint64_t v25 = v6[3];
        if (v26 >= v25 >> 1) {
          uint64_t v6 = sub_10030AC18((void *)(v25 > 1), v26 + 1, 1, v6);
        }
        v6[2] = v26 + 1;
        *((unsigned char *)v6 + v26 + 32) = 4;
      }
    }
  }
  else
  {
    sub_1000F5B8C((uint64_t)&v29);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

unint64_t sub_1001FD9F8(uint64_t a1)
{
  unint64_t result = sub_1001FDA20();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001FDA20()
{
  unint64_t result = qword_10090FE40;
  if (!qword_10090FE40)
  {
    type metadata accessor for REMListStableSortingDataView.Invocation();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090FE40);
  }
  return result;
}

uint64_t sub_1001FDA78(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1001FDBDC((uint64_t)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_1001FDBDC((uint64_t)v7, v4, v2);
    swift_release();
    swift_slowDealloc();
  }
  return v6;
}

uint64_t sub_1001FDBDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  long long v28 = (unint64_t *)result;
  uint64_t v29 = 0;
  int64_t v3 = 0;
  uint64_t v6 = *(void *)(a3 + 56);
  uint64_t v4 = a3 + 56;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v4 - 24);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v5;
  uint64_t v30 = v4;
  int64_t v31 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v12 = v11 | (v3 << 6);
LABEL_22:
    id v16 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    id v17 = [v16 entityName:v27];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    id v21 = [self cdEntityName];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    if (v18 == v22 && v20 == v24)
    {

      unint64_t result = swift_bridgeObjectRelease_n();
LABEL_5:
      *(unint64_t *)((char *)v28 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v29++, 1)) {
        goto LABEL_31;
      }
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      unint64_t result = swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_5;
      }
    }
  }
  int64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v13 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v13);
  ++v3;
  if (v14) {
    goto LABEL_21;
  }
  int64_t v3 = v13 + 1;
  if (v13 + 1 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v3);
  if (v14) {
    goto LABEL_21;
  }
  int64_t v3 = v13 + 2;
  if (v13 + 2 >= v31) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v30 + 8 * v3);
  if (v14)
  {
LABEL_21:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v3 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v31)
  {
LABEL_28:
    swift_retain();
    return sub_100240568(v28, v27, v29, a3);
  }
  unint64_t v14 = *(void *)(v30 + 8 * v15);
  if (v14)
  {
    int64_t v3 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v3 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v3 >= v31) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v30 + 8 * v3);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_1001FDE54(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v165 = a2;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  unint64_t v175 = (char *)&v154 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for UUID();
  *(void *)&long long v164 = *(void *)(v176 - 8);
  __chkstk_darwin(v176);
  uint64_t v172 = (char *)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = _s10PredicatesOMa(0);
  __chkstk_darwin(v166);
  id v167 = (unint64_t *)((char *)&v154 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v169 = a1;
  if ((a3 & 0xC000000000000001) == 0)
  {
    uint64_t v36 = swift_bridgeObjectRetain();
    uint64_t v37 = sub_1001FDA78(v36);
    goto LABEL_29;
  }
  *(void *)&long long v181 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  uint64_t v11 = __CocoaSet.Iterator.next()();
  if (!v11)
  {
    uint64_t v37 = (uint64_t)&_swiftEmptySetSingleton;
LABEL_28:
    swift_release();
LABEL_29:
    unint64_t v174 = v37 & 0xC000000000000001;
    uint64_t v177 = v37;
    if ((v37 & 0xC000000000000001) != 0)
    {
      if (!__CocoaSet.count.getter()) {
        goto LABEL_45;
      }
      uint64_t v38 = __CocoaSet.count.getter();
      uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
      if (!v38) {
        goto LABEL_48;
      }
      unint64_t v39 = v38;
      uint64_t v183 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v37 = v177;
      *(void *)&long long v178 = __CocoaSet.startIndex.getter();
      *((void *)&v178 + 1) = v40;
      LOBYTE(v179) = 1;
      if ((v39 & 0x8000000000000000) == 0)
      {
        do
        {
LABEL_39:
          long long v48 = v178;
          uint64_t v49 = v179;
          sub_1003C9F1C(v178, SDWORD2(v178), v179, v37);
          id v51 = v50;
          sub_100694D98(v51);
          if (v4)
          {

            sub_1000E4EA4(v48, *((uint64_t *)&v48 + 1), v49);
            swift_release();
            return swift_release();
          }

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (v174)
          {
            if ((v49 & 1) == 0)
            {
              __break(1u);
LABEL_185:
              *(void *)&long long v181 = 0;
              *((void *)&v181 + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              v152._object = (void *)0x80000001007CAF70;
              v152._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
              String.append(_:)(v152);
              uint64_t v183 = v49;
              sub_100094134(&qword_100913A10);
              goto LABEL_186;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_100094134(&qword_10090FE48);
            id v52 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v52(&v181, 0);
          }
          else
          {
            uint64_t v43 = sub_1003C9E34(v48, *((void *)&v48 + 1), v49, v177);
            uint64_t v45 = v44;
            char v47 = v46;
            sub_1000E4EA4(v48, *((uint64_t *)&v48 + 1), v49);
            *(void *)&long long v178 = v43;
            *((void *)&v178 + 1) = v45;
            LOBYTE(v179) = v47 & 1;
          }
          --v39;
          uint64_t v37 = v177;
        }
        while (v39);
        sub_1000E4EA4(v178, *((uint64_t *)&v178 + 1), v179);
        uint64_t v20 = v183;
LABEL_48:
        if (qword_100907890 == -1) {
          goto LABEL_49;
        }
        goto LABEL_63;
      }
      __break(1u);
    }
    unint64_t v39 = *(void *)(v37 + 16);
    if (v39)
    {
      uint64_t v183 = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v37 = v177;
      *(void *)&long long v178 = sub_1003CA790(v177);
      *((void *)&v178 + 1) = v41;
      LOBYTE(v179) = v42 & 1;
      goto LABEL_39;
    }
LABEL_45:
    swift_release();
    return sub_1002EDB3C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v12 = v11;
  uint64_t v168 = v3;
  uint64_t v4 = type metadata accessor for REMObjectID_Codable();
LABEL_8:
  uint64_t v183 = v12;
  swift_dynamicCast();
  id v19 = [(id)v178 entityName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  id v23 = [self cdEntityName];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  if (v20 == v24 && v22 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {

      goto LABEL_7;
    }
  }
  uint64_t v29 = v178;
  uint64_t v30 = v181;
  unint64_t v31 = *(void *)(v181 + 16);
  if (*(void *)(v181 + 24) <= v31)
  {
    sub_100322050(v31 + 1);
    uint64_t v30 = v181;
  }
  Swift::Int v13 = NSObject._rawHashValue(seed:)(*(void *)(v30 + 40));
  uint64_t v14 = v30 + 56;
  uint64_t v15 = -1 << *(unsigned char *)(v30 + 32);
  unint64_t v16 = v13 & ~v15;
  unint64_t v17 = v16 >> 6;
  if (((-1 << v16) & ~*(void *)(v30 + 56 + 8 * (v16 >> 6))) != 0)
  {
    unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v30 + 56 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    goto LABEL_6;
  }
  char v32 = 0;
  unint64_t v33 = (unint64_t)(63 - v15) >> 6;
  while (++v17 != v33 || (v32 & 1) == 0)
  {
    BOOL v34 = v17 == v33;
    if (v17 == v33) {
      unint64_t v17 = 0;
    }
    v32 |= v34;
    uint64_t v35 = *(void *)(v14 + 8 * v17);
    if (v35 != -1)
    {
      unint64_t v18 = __clz(__rbit64(~v35)) + (v17 << 6);
LABEL_6:
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v30 + 48) + 8 * v18) = v29;
      ++*(void *)(v30 + 16);
LABEL_7:
      uint64_t v12 = __CocoaSet.Iterator.next()();
      if (!v12)
      {
        uint64_t v37 = v181;
        uint64_t v4 = v168;
        goto LABEL_28;
      }
      goto LABEL_8;
    }
  }
  __break(1u);
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once();
LABEL_49:
  unint64_t v39 = qword_100942570;
  if ((unint64_t)qword_100942570 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_51;
    }
LABEL_65:
    swift_bridgeObjectRelease();
    unint64_t v56 = _swiftEmptyArrayStorage;
    goto LABEL_66;
  }
  uint64_t v54 = *(void *)((qword_100942570 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v54) {
    goto LABEL_65;
  }
LABEL_51:
  uint64_t v171 = (void (**)(char *, uint64_t, uint64_t))v20;
  uint64_t v168 = v4;
  *(void *)&long long v178 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v54 & ~(v54 >> 63), 0);
  if (v54 < 0)
  {
    __break(1u);
    goto LABEL_82;
  }
  uint64_t v55 = 0;
  unint64_t v56 = (void *)v178;
  id v173 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 & 0xC000000000000001);
  do
  {
    if (v54 == v55) {
      goto LABEL_62;
    }
    if (v173)
    {
      uint64_t v49 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v49 = *(void *)(v39 + 8 * v55 + 32);
      swift_retain();
    }
    uint64_t v4 = v39;
    uint64_t v57 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    if (!v58) {
      goto LABEL_185;
    }
    uint64_t v59 = v57;
    uint64_t v60 = v58;
    swift_release();
    *(void *)&long long v178 = v56;
    unint64_t v62 = v56[2];
    unint64_t v61 = v56[3];
    uint64_t v20 = v62 + 1;
    if (v62 >= v61 >> 1)
    {
      sub_1001DE058(v61 > 1, v62 + 1, 1);
      unint64_t v56 = (void *)v178;
    }
    ++v55;
    v56[2] = v20;
    uint64_t v63 = &v56[2 * v62];
    v63[4] = v59;
    v63[5] = v60;
    unint64_t v39 = v4;
  }
  while (v54 != v55);
  swift_bridgeObjectRelease();
  uint64_t v4 = v168;
  uint64_t v20 = (uint64_t)v171;
LABEL_66:
  id v64 = sub_10069705C(v20, 0, 1, (uint64_t)v56, 0);
  if (v4)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  unint64_t v39 = (unint64_t)v64;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v181 = _swiftEmptyArrayStorage;
  if (v39 >> 62)
  {
LABEL_82:
    swift_bridgeObjectRetain();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v65) {
      goto LABEL_70;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    uint64_t v20 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_181;
    }
    goto LABEL_84;
  }
  uint64_t v65 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v65) {
    goto LABEL_83;
  }
LABEL_70:
  if (v65 < 1)
  {
    __break(1u);
    goto LABEL_183;
  }
  for (uint64_t i = 0; i != v65; ++i)
  {
    if ((v39 & 0xC000000000000001) != 0) {
      id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v67 = *(id *)(v39 + 8 * i + 32);
    }
    id v68 = v67;
    if ([v67 isConcealed])
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v20 = v181;
  if ((v181 & 0x8000000000000000) != 0) {
    goto LABEL_181;
  }
LABEL_84:
  if ((v20 & 0x4000000000000000) != 0) {
    goto LABEL_181;
  }
  uint64_t v69 = *(void *)(v20 + 16);
  swift_retain();
  while (1)
  {
    Swift::Int v70 = (Swift::Int)_swiftEmptyDictionarySingleton;
    if (!v69) {
      break;
    }
    id v173 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 & 0xC000000000000001);
    uint64_t v71 = 4;
    uint64_t v171 = (void (**)(char *, uint64_t, uint64_t))v20;
    os_log_type_t v170 = (void (**)(char *, uint64_t))v69;
    while (1)
    {
      id v72 = v173 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v20 + 8 * v71);
      unint64_t v39 = (unint64_t)v72;
      uint64_t v73 = v71 - 3;
      if (__OFADD__(v71 - 4, 1)) {
        break;
      }
      id v74 = [v72 remObjectID];
      if (v74)
      {
        id v75 = v74;
        if ((v70 & 0xC000000000000001) != 0)
        {
          if (v70 < 0) {
            uint64_t v76 = v70;
          }
          else {
            uint64_t v76 = v70 & 0xFFFFFFFFFFFFFF8;
          }
          id v77 = (id)v39;
          uint64_t v78 = __CocoaDictionary.count.getter();
          if (__OFADD__(v78, 1)) {
            goto LABEL_175;
          }
          Swift::Int v70 = sub_1001A70C0(v76, v78 + 1);
        }
        else
        {
          id v79 = (id)v39;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v181 = v70;
        unint64_t v82 = sub_100306FE8((uint64_t)v75);
        uint64_t v83 = *(void *)(v70 + 16);
        BOOL v84 = (v81 & 1) == 0;
        uint64_t v85 = v83 + v84;
        if (__OFADD__(v83, v84)) {
          goto LABEL_174;
        }
        uint64_t v20 = v81;
        if (*(void *)(v70 + 24) >= v85)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            Swift::Int v70 = v181;
            if ((v81 & 1) == 0) {
              goto LABEL_106;
            }
          }
          else
          {
            sub_100318D8C();
            Swift::Int v70 = v181;
            if ((v20 & 1) == 0) {
              goto LABEL_106;
            }
          }
        }
        else
        {
          sub_10030ECC0(v85, isUniquelyReferenced_nonNull_native);
          unint64_t v86 = sub_100306FE8((uint64_t)v75);
          if ((v20 & 1) != (v87 & 1)) {
            goto LABEL_187;
          }
          unint64_t v82 = v86;
          Swift::Int v70 = v181;
          if ((v20 & 1) == 0)
          {
LABEL_106:
            *(void *)(v70 + 8 * (v82 >> 6) + 64) |= 1 << v82;
            uint64_t v88 = 8 * v82;
            *(void *)(*(void *)(v70 + 48) + v88) = v75;
            *(void *)(*(void *)(v70 + 56) + v88) = v39;
            uint64_t v89 = *(void *)(v70 + 16);
            BOOL v90 = __OFADD__(v89, 1);
            uint64_t v91 = v89 + 1;
            if (v90) {
              goto LABEL_176;
            }
            *(void *)(v70 + 16) = v91;
            id v92 = v75;
            goto LABEL_111;
          }
        }
        uint64_t v93 = *(void *)(v70 + 56);

        *(void *)(v93 + 8 * v82) = v39;
LABEL_111:

        swift_bridgeObjectRelease();
        uint64_t v20 = (uint64_t)v171;
        uint64_t v69 = (uint64_t)v170;
        goto LABEL_89;
      }

LABEL_89:
      ++v71;
      if (v73 == v69) {
        goto LABEL_114;
      }
    }
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
LABEL_181:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v69 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
LABEL_114:
  swift_release();
  uint64_t v94 = sub_10053B340(v20, v165);
  if (v4)
  {
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v156 = v94;
  swift_release();
  uint64_t v183 = (uint64_t)_swiftEmptyDictionarySingleton;
  Swift::Int v160 = v70;
  if (v174) {
    Swift::Int v95 = __CocoaSet.count.getter();
  }
  else {
    Swift::Int v95 = *(void *)(v177 + 16);
  }
  swift_release();
  sub_100094134(&qword_10090FE50);
  Dictionary.reserveCapacity(_:)(v95);
  if (v156 >> 62)
  {
LABEL_183:
    swift_bridgeObjectRetain();
    uint64_t v96 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_122;
  }
  uint64_t v96 = *(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_122:
  uint64_t v97 = v160;
  if (v96)
  {
    unint64_t v98 = 0;
    unint64_t v159 = v156 & 0xC000000000000001;
    uint64_t v155 = v156 & 0xFFFFFFFFFFFFFF8;
    unint64_t v154 = v156 + 32;
    id v99 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56);
    id v173 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 48);
    uint64_t v171 = (void (**)(char *, uint64_t, uint64_t))(v164 + 32);
    os_log_type_t v170 = (void (**)(char *, uint64_t))(v164 + 8);
    long long v164 = xmmword_10077A530;
    uint64_t v158 = (char *)&type metadata for Any + 8;
    uint64_t v157 = v96;
    while (1)
    {
      if (v159)
      {
        id v102 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v90 = __OFADD__(v98, 1);
        unint64_t v103 = v98 + 1;
        if (v90) {
          goto LABEL_177;
        }
      }
      else
      {
        if (v98 >= *(void *)(v155 + 16)) {
          goto LABEL_180;
        }
        id v102 = *(id *)(v154 + 8 * v98);
        BOOL v90 = __OFADD__(v98, 1);
        unint64_t v103 = v98 + 1;
        if (v90) {
          goto LABEL_177;
        }
      }
      unint64_t v161 = v103;
      uint64_t v104 = v4;
      id v163 = v102;
      id v105 = [v102 objectID:v154];
      uint64_t v106 = v97;
      *id v167 = v105;
      swift_storeEnumTagMultiPayload();
      id v107 = v105;
      uint64_t v108 = (void *)sub_10038F1F0();
      id v109 = v107;
      unint64_t v110 = (objc_class *)sub_1002EFE24(v109, v106);
      uint64_t v165 = v109;

      if (v110)
      {
        sub_100094134((uint64_t *)&unk_10090AF20);
        uint64_t v111 = swift_allocObject();
        *(_OWORD *)(v111 + 16) = v164;
        *(void *)(v111 + 32) = v110;
        *(void *)&long long v181 = v111;
        specialized Array._endMutation()();
        sub_100094134(&qword_10090FF00);
        sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
        sub_1001FF560();
        sub_1001FF5BC();
        uint64_t v112 = Sequence.compactMapToSet<A>(_:)();
        unint64_t v110 = (objc_class *)sub_1002099D8(v112);
        swift_bridgeObjectRelease();
      }
      id v162 = sub_100520998(v110, (uint64_t)v108);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v164;
      *(void *)(inited + 32) = swift_getKeyPath();
      *(void *)&long long v181 = inited;
      specialized Array._endMutation()();
      uint64_t v114 = v181;
      *(void *)&long long v178 = _swiftEmptyArrayStorage;
      sub_1001DE1C4(0, 1, 0);
      uint64_t v115 = v178;
      if ((v114 & 0xC000000000000001) != 0)
      {
        unint64_t v39 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        unint64_t v39 = *(void *)(v114 + 32);
        swift_retain();
      }
      uint64_t v116 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      if (!v117)
      {
        while (1)
        {
          *(void *)&long long v181 = 0;
          *((void *)&v181 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v153._object = (void *)0x80000001007CAF70;
          v153._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v153);
          unint64_t v180 = v39;
          sub_100094134((uint64_t *)&unk_10090B070);
LABEL_186:
          _print_unlocked<A, B>(_:_:)();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_187:
          sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
        }
      }
      uint64_t v118 = v116;
      uint64_t v119 = v117;
      uint64_t v182 = &type metadata for String;
      swift_release();
      *(void *)&long long v181 = v118;
      *((void *)&v181 + 1) = v119;
      unint64_t v121 = *(void *)(v115 + 16);
      unint64_t v120 = *(void *)(v115 + 24);
      if (v121 >= v120 >> 1)
      {
        sub_1001DE1C4(v120 > 1, v121 + 1, 1);
        uint64_t v115 = v178;
      }
      *(void *)(v115 + 16) = v121 + 1;
      sub_10009A1A0(&v181, (_OWORD *)(v115 + 32 * v121 + 32));
      swift_bridgeObjectRelease();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_release();
      id v123 = v162;
      [v162 setPropertiesToFetch:isa];

      uint64_t v124 = swift_allocObject();
      *(_OWORD *)(v124 + 16) = v164;
      if (qword_1009073C8 != -1) {
        swift_once();
      }
      unint64_t v125 = (void *)qword_100942188;
      *(void *)(v124 + 32) = qword_100942188;
      *(void *)&long long v181 = v124;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
      id v126 = v125;
      Class v127 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v123 setSortDescriptors:v127];

      sub_1000963CC(0, &qword_10090E4F0);
      unint64_t v128 = NSManagedObjectContext.fetch<A>(_:)();
      uint64_t v20 = (uint64_t)v163;
      if (v104) {
        break;
      }
      unint64_t v129 = v128;
      uint64_t v168 = 0;
      unint64_t v180 = (unint64_t)_swiftEmptyArrayStorage;
      if (v128 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v130 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v130 = *(void *)((v128 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
      }
      uint64_t v4 = 0x696669746E656469;
      if (v130)
      {
        if (v130 < 1) {
          goto LABEL_178;
        }
        uint64_t v131 = 0;
        unint64_t v174 = v129 & 0xC000000000000001;
        uint64_t v177 = v129;
        while (2)
        {
          if (v174) {
            id v132 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v132 = *(id *)(v129 + 8 * v131 + 32);
          }
          uint64_t v133 = v132;
          *(void *)&long long v178 = 0x696669746E656469;
          *((void *)&v178 + 1) = 0xEA00000000007265;
          id v134 = [v132 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
          swift_unknownObjectRelease();
          if (v134)
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            long long v178 = 0u;
            long long v179 = 0u;
          }
          uint64_t v135 = (uint64_t)v175;
          sub_1000D6CBC((uint64_t)&v178, (uint64_t)&v181);
          if (v182)
          {
            uint64_t v136 = v176;
            int v137 = swift_dynamicCast();
            (*v99)(v135, v137 ^ 1u, 1, v136);
            if ((*v173)(v135, 1, v136) != 1)
            {
              uint64_t v138 = v99;
              uint64_t v139 = v172;
              uint64_t v140 = v176;
              (*v171)(v172, v135, v176);
              uint64_t v141 = self;
              Class v142 = UUID._bridgeToObjectiveC()().super.isa;
              id v143 = [v141 objectIDWithUUID:v142];

              uint64_t v144 = v139;
              id v99 = v138;
              (*v170)(v144, v140);

              if (v143)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v180 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
LABEL_150:
              ++v131;
              unint64_t v129 = v177;
              if (v130 == v131)
              {
                swift_bridgeObjectRelease();
                long long v145 = (void *)v180;
                uint64_t v20 = (uint64_t)v163;
                id v123 = v162;
                goto LABEL_165;
              }
              continue;
            }
          }
          else
          {
            sub_1000966BC((uint64_t)&v181, &qword_100908190);
            (*v99)(v135, 1, 1, v176);
          }
          break;
        }
        sub_1000966BC(v135, (uint64_t *)&unk_100909E50);

        goto LABEL_150;
      }
      swift_bridgeObjectRelease();
      long long v145 = _swiftEmptyArrayStorage;
LABEL_165:
      swift_bridgeObjectRelease();
      sub_1001FFDB0((unint64_t)v145);
      swift_bridgeObjectRelease();
      id v146 = objc_allocWithZone((Class)NSOrderedSet);
      Class v147 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v148 = [v146 initWithArray:v147];

      [v20 hack_overrideReminderIDsOrderingWithOrderedObjectIDs:v148];
      uint64_t v4 = REMObjectID.codable.getter();
      uint64_t v149 = v183;
      if ((v183 & 0xC000000000000001) != 0)
      {
        if (v183 >= 0) {
          uint64_t v149 = v183 & 0xFFFFFFFFFFFFFF8;
        }
        id v150 = (id)v20;
        uint64_t v151 = __CocoaDictionary.count.getter();
        unint64_t v98 = v161;
        if (__OFADD__(v151, 1)) {
          goto LABEL_179;
        }
        uint64_t v149 = sub_1001A6E94(v149, v151 + 1);
      }
      else
      {
        id v100 = (id)v20;
        unint64_t v98 = v161;
      }
      char v101 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v181 = v149;
      sub_1002C40C4(v20, (void *)v4, v101);
      uint64_t v183 = v181;

      swift_bridgeObjectRelease();
      sub_1000C6DAC((uint64_t)v167);
      uint64_t v4 = v168;
      uint64_t v97 = v160;
      if (v98 == v157) {
        goto LABEL_171;
      }
    }

    swift_bridgeObjectRelease();
    sub_1000C6DAC((uint64_t)v167);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_171:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v183;
  }
}

unint64_t sub_1001FF560()
{
  unint64_t result = qword_10090FE58;
  if (!qword_10090FE58)
  {
    sub_100096058(&qword_10090FF00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090FE58);
  }
  return result;
}

unint64_t sub_1001FF5BC()
{
  unint64_t result = qword_100910050;
  if (!qword_100910050)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090FE00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910050);
  }
  return result;
}

void *sub_1001FF624(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_1001DE028(0, v1, 0);
    uint64_t v4 = (id *)(a1 + 32);
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      id v5 = *v4;
      sub_100094134(&qword_10090F190);
      sub_100094134(&qword_1009102B0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE028(0, v2[2] + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_1001DE028(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v10;
      }
      v2[2] = v7 + 1;
      sub_1000967D4(&v9, (uint64_t)&v2[5 * v7 + 4]);
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001FF764(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    sub_1001DE078(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_100096838(v4, (uint64_t)v8);
      sub_100094134((uint64_t *)&unk_100910270);
      sub_100094134(&qword_10090F840);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE078(0, v2[2] + 1, 1);
        uint64_t v2 = v10;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001DE078(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v10;
      }
      v2[2] = v6 + 1;
      sub_100096408((uint64_t)v9, (uint64_t)&v2[5 * v6 + 4], &qword_10090F840);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void *sub_1001FF8A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v6 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = &_swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v20 = &_swiftEmptyArrayStorage;
    sub_1001DE118(0, v9, 0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v17 = *(void *)(v11 + 56);
    unint64_t v18 = v12;
    do
    {
      v18(v5, v13, v2);
      swift_dynamicCast();
      uint64_t v10 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE118(0, v10[2] + 1, 1);
        uint64_t v10 = v20;
      }
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001DE118(v14 > 1, v15 + 1, 1);
        uint64_t v10 = v20;
      }
      v10[2] = v15 + 1;
      sub_100096408((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, (uint64_t *)&unk_100909E50);
      v13 += v17;
      --v9;
    }
    while (v9);
  }
  return v10;
}

void *sub_1001FFB00(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001DE1A4(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      sub_100094134((uint64_t *)&unk_10090A4C0);
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1001DE1A4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_1001DE1A4(v4 > 1, v5 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v5 + 1;
      uint64_t v6 = (char *)&_swiftEmptyArrayStorage[2 * v5];
      *((void *)v6 + 4) = v8;
      *((void *)v6 + 5) = v9;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001FFC40(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    sub_1001DE1C4(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE1C4(0, v2[2] + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = v2[2];
      unint64_t v5 = v2[3];
      if (v6 >= v5 >> 1)
      {
        sub_1001DE1C4(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      v2[2] = v6 + 1;
      sub_10009A1A0(&v8, &v2[4 * v6 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001FFD68(unint64_t a1)
{
  return sub_1001FFE0C(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001DE220, (uint64_t (*)(void))type metadata accessor for REMCDSmartListSection, (uint64_t)&off_1008BB238, (void (*)(void *, void *))sub_1000967D4);
}

uint64_t sub_1001FFDB0(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&qword_10090A3B0);
}

uint64_t sub_1001FFDC4(unint64_t a1)
{
  return sub_1001FFE0C(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001DE220, (uint64_t (*)(void))type metadata accessor for REMCDListSection, (uint64_t)&off_1008BB210, (void (*)(void *, void *))sub_1000967D4);
}

uint64_t sub_1001FFE0C(unint64_t a1, void (*a2)(BOOL, unint64_t, uint64_t), uint64_t (*a3)(void), uint64_t a4, void (*a5)(void *, void *))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (!v10) {
    return (uint64_t)v11;
  }
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t result = ((uint64_t (*)(void, uint64_t, void))a2)(0, v10 & ~(v10 >> 63), 0);
  if ((v10 & 0x8000000000000000) == 0)
  {
    uint64_t v22 = a2;
    uint64_t v11 = v26;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v13 = 0;
      do
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v26 = v11;
        unint64_t v16 = v11[2];
        unint64_t v15 = v11[3];
        if (v16 >= v15 >> 1)
        {
          v22(v15 > 1, v16 + 1, 1);
          uint64_t v11 = v26;
        }
        ++v13;
        uint64_t v24 = a3(0);
        uint64_t v25 = a4;
        v23[0] = v14;
        v11[2] = v16 + 1;
        a5(v23, &v11[5 * v16 + 4]);
      }
      while (v10 != v13);
    }
    else
    {
      uint64_t v17 = (void **)(a1 + 32);
      do
      {
        unint64_t v18 = *v17;
        uint64_t v26 = v11;
        unint64_t v19 = v11[2];
        unint64_t v20 = v11[3];
        id v21 = v18;
        if (v19 >= v20 >> 1)
        {
          v22(v20 > 1, v19 + 1, 1);
          uint64_t v11 = v26;
        }
        uint64_t v24 = a3(0);
        uint64_t v25 = a4;
        v23[0] = v21;
        v11[2] = v19 + 1;
        a5(v23, &v11[5 * v19 + 4]);
        ++v17;
        --v10;
      }
      while (v10);
    }
    return (uint64_t)v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100200000(unint64_t a1)
{
  return sub_1001FFE0C(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001DE220, (uint64_t (*)(void))type metadata accessor for REMCDTemplateSection, (uint64_t)&off_1008BB260, (void (*)(void *, void *))sub_1000967D4);
}

uint64_t sub_100200048(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE580(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_1001DE580(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
        unint64_t v16 = &off_1008B9B60;
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_1000967D4(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v9 = (void **)(a1 + 32);
      do
      {
        uint64_t v10 = *v9;
        uint64_t v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_1001DE580(v11 > 1, v12 + 1, 1);
          uint64_t v3 = v17;
        }
        uint64_t v15 = sub_1000963CC(0, (unint64_t *)&unk_10090AF90);
        unint64_t v16 = &off_1008B9B60;
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_1000967D4(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020023C(unint64_t a1)
{
  return sub_1001FFE0C(a1, (void (*)(BOOL, unint64_t, uint64_t))sub_1001DE580, (uint64_t (*)(void))type metadata accessor for REMCDSavedAttachment, (uint64_t)&off_1008B9BA0, (void (*)(void *, void *))sub_1000967D4);
}

uint64_t sub_100200284(unint64_t a1)
{
  return sub_10020029C(a1, (void (*)(void))type metadata accessor for REMCDTemplateSection);
}

uint64_t sub_10020029C(unint64_t a1, void (*a2)(void))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE1C4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        a2(0);
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE1C4(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1)
        {
          sub_1001DE1C4(v8 > 1, v9 + 1, 1);
          uint64_t v5 = v15;
        }
        v5[2] = v9 + 1;
        sub_10009A1A0(v14, &v5[4 * v9 + 4]);
      }
    }
    else
    {
      uint64_t v10 = (id *)(a1 + 32);
      a2(0);
      do
      {
        id v11 = *v10;
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE1C4(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1)
        {
          sub_1001DE1C4(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v15;
        }
        v5[2] = v13 + 1;
        sub_10009A1A0(v14, &v5[4 * v13 + 4]);
        ++v10;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002004DC(unint64_t a1)
{
  return sub_10020029C(a1, (void (*)(void))type metadata accessor for REMCDSmartListSection);
}

uint64_t sub_1002004F4(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&unk_100910210);
}

uint64_t sub_100200508(unint64_t a1, unint64_t *a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE1C4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1000963CC(0, a2);
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE1C4(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v9 = v5[2];
        unint64_t v8 = v5[3];
        if (v9 >= v8 >> 1)
        {
          sub_1001DE1C4(v8 > 1, v9 + 1, 1);
          uint64_t v5 = v15;
        }
        v5[2] = v9 + 1;
        sub_10009A1A0(v14, &v5[4 * v9 + 4]);
      }
    }
    else
    {
      uint64_t v10 = (id *)(a1 + 32);
      sub_1000963CC(0, a2);
      do
      {
        id v11 = *v10;
        swift_dynamicCast();
        uint64_t v5 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001DE1C4(0, v5[2] + 1, 1);
          uint64_t v5 = v15;
        }
        unint64_t v13 = v5[2];
        unint64_t v12 = v5[3];
        if (v13 >= v12 >> 1)
        {
          sub_1001DE1C4(v12 > 1, v13 + 1, 1);
          uint64_t v5 = v15;
        }
        v5[2] = v13 + 1;
        sub_10009A1A0(v14, &v5[4 * v13 + 4]);
        ++v10;
        --v4;
      }
      while (v4);
    }
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020075C(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&unk_100910040);
}

uint64_t sub_100200770(unint64_t a1)
{
  return sub_10020029C(a1, (void (*)(void))type metadata accessor for REMCDListSection);
}

uint64_t sub_100200788(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&qword_10090B040);
}

uint64_t sub_10020079C(unint64_t a1)
{
  return sub_100200508(a1, &qword_100910230);
}

uint64_t sub_1002007B0(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&qword_10090DC20);
}

uint64_t sub_1002007C4(unint64_t a1)
{
  return sub_10020029C(a1, (void (*)(void))type metadata accessor for REMCDSavedAttachment);
}

uint64_t sub_1002007DC(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&qword_10090FE00);
}

void *sub_1002007F0(unint64_t a1)
{
  return sub_100200808(a1, (uint64_t)&off_1008CBFC0);
}

void *sub_1002007FC(unint64_t a1)
{
  return sub_100200808(a1, (uint64_t)&off_1008CC010);
}

void *sub_100200808(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = (void *)sub_1001DEB60(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = 0;
      do
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v9 = _swiftEmptyArrayStorage[2];
        unint64_t v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1) {
          sub_1001DEB60(v8 > 1, v9 + 1, 1);
        }
        ++v6;
        _swiftEmptyArrayStorage[2] = v9 + 1;
        uint64_t v10 = &_swiftEmptyArrayStorage[2 * v9];
        v10[4] = v7;
        void v10[5] = a2;
      }
      while (v4 != v6);
    }
    else
    {
      id v11 = (id *)(a1 + 32);
      do
      {
        unint64_t v12 = _swiftEmptyArrayStorage[2];
        unint64_t v13 = _swiftEmptyArrayStorage[3];
        id v14 = *v11;
        if (v12 >= v13 >> 1) {
          sub_1001DEB60(v13 > 1, v12 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v12 + 1;
        uint64_t v15 = &_swiftEmptyArrayStorage[2 * v12];
        v15[4] = v14;
        uint64_t v15[5] = a2;
        ++v11;
        --v4;
      }
      while (v4);
    }
    return _swiftEmptyArrayStorage;
  }
  __break(1u);
  return result;
}

uint64_t sub_100200988(unint64_t a1)
{
  return sub_100200508(a1, (unint64_t *)&qword_100909B00);
}

BOOL sub_10020099C(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_1002009C8(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v1 = v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v7 = *(void *)(v3 + 24) >> 1;
    if (v7 >= (uint64_t)(v4 + v2))
    {
      unint64_t v8 = *(void *)(a1 + 16);
      if (v8) {
        goto LABEL_5;
      }
LABEL_15:
      if (!v2) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  swift_bridgeObjectRelease();
  *int64_t v1 = v3;
  uint64_t v7 = *(void *)(v3 + 24) >> 1;
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  if (v7 - v9 < (uint64_t)v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v10 = v3 + 8 * v9 + 32;
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_23;
  }
  sub_100094134((uint64_t *)&unk_10090FE90);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(*v1 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(*v1 + 16) = v14;
LABEL_16:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100200B74(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_1003090C0(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100200CD0(unint64_t a1)
{
  return sub_100203324(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020E608);
}

uint64_t sub_100200CE8(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020E828);
}

uint64_t sub_100200D00(uint64_t result)
{
  int64_t v4 = v2;
  uint64_t v5 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = *(void *)(result + 16);
  }
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = v18 + v6;
    if (!__OFADD__(v18, v6)) {
      goto LABEL_6;
    }
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v6;
  if (__OFADD__(v7, v6)) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v9 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v4 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *int64_t v4 = v12;
    uint64_t v11 = v12 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = (*(void *)(v11 + 24) >> 1) - v13;
  uint64_t result = (uint64_t)sub_10020D690(&v42, (void *)(v11 + 8 * v13 + 32), v14, v5, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (unint64_t *)&qword_10090A3C0);
  if (result < v6) {
    goto LABEL_22;
  }
  if (result >= 1)
  {
    uint64_t v15 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v16 = __OFADD__(v15, result);
    uint64_t v17 = v15 + result;
    if (v16)
    {
      __break(1u);
LABEL_29:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_18;
      }
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v22 = v41;
      swift_unknownObjectRelease();
      while (2)
      {
        if (!v22) {
          goto LABEL_18;
        }
        while (1)
        {
          uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
          if (v3 + 1 > *(void *)(v24 + 0x18) >> 1)
          {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v25 = *(void *)(v24 + 24) >> 1;
          if (v3 < v25) {
            break;
          }
LABEL_33:
          *(void *)(v24 + 16) = v3;
        }
        uint64_t v26 = v24 + 32;
        while (1)
        {
          *(void *)(v26 + 8 * v3++) = v22;
          int64_t v27 = v45;
          if (v42 < 0)
          {
            if (!__CocoaSet.Iterator.next()()) {
              goto LABEL_70;
            }
            sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            uint64_t v22 = v41;
            swift_unknownObjectRelease();
            goto LABEL_45;
          }
          if (!v46) {
            break;
          }
          unint64_t v28 = (v46 - 1) & v46;
          unint64_t v29 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_41:
          uint64_t v22 = *(void **)(*(void *)(v42 + 48) + 8 * v29);
          id v30 = v22;
LABEL_42:
          int64_t v45 = v27;
          unint64_t v46 = v28;
LABEL_45:
          if (!v22)
          {
LABEL_70:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v3;
            goto LABEL_18;
          }
          if (v3 >= v25)
          {
            uint64_t v24 = *v4 & 0xFFFFFFFFFFFFFF8;
            goto LABEL_33;
          }
        }
        int64_t v31 = v45 + 1;
        if (__OFADD__(v45, 1))
        {
          __break(1u);
LABEL_94:
          uint64_t v22 = 0;
          unint64_t v20 = 0;
          int64_t v19 = v1;
LABEL_27:
          int64_t v45 = v19;
          unint64_t v46 = v20;
          continue;
        }
        break;
      }
      int64_t v32 = (unint64_t)(v44 + 64) >> 6;
      if (v31 >= v32)
      {
        uint64_t v22 = 0;
        unint64_t v28 = 0;
        goto LABEL_42;
      }
      unint64_t v33 = *(void *)(v43 + 8 * v31);
      if (!v33)
      {
        int64_t v34 = v45 + 2;
        if (v45 + 2 >= v32) {
          goto LABEL_67;
        }
        unint64_t v33 = *(void *)(v43 + 8 * v34);
        if (!v33)
        {
          int64_t v1 = v45 + 3;
          if (v45 + 3 >= v32) {
            goto LABEL_68;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v1);
          if (v33)
          {
            int64_t v31 = v45 + 3;
            goto LABEL_51;
          }
          int64_t v34 = v45 + 4;
          if (v45 + 4 >= v32)
          {
            uint64_t v22 = 0;
            unint64_t v28 = 0;
            int64_t v27 = v45 + 3;
            goto LABEL_42;
          }
          unint64_t v33 = *(void *)(v43 + 8 * v34);
          if (!v33)
          {
            int64_t v31 = v45 + 5;
            if (v45 + 5 >= v32)
            {
LABEL_68:
              uint64_t v22 = 0;
              unint64_t v28 = 0;
              int64_t v27 = v34;
              goto LABEL_42;
            }
            unint64_t v33 = *(void *)(v43 + 8 * v31);
            if (!v33)
            {
              int64_t v31 = v32 - 1;
              uint64_t v35 = v45 + 6;
              while (v32 != v35)
              {
                unint64_t v33 = *(void *)(v43 + 8 * v35++);
                if (v33)
                {
                  int64_t v31 = v35 - 1;
                  goto LABEL_51;
                }
              }
LABEL_67:
              uint64_t v22 = 0;
              unint64_t v28 = 0;
              int64_t v27 = v31;
              goto LABEL_42;
            }
            goto LABEL_51;
          }
        }
        int64_t v31 = v34;
      }
LABEL_51:
      unint64_t v28 = (v33 - 1) & v33;
      unint64_t v29 = __clz(__rbit64(v33)) + (v31 << 6);
      int64_t v27 = v31;
      goto LABEL_41;
    }
    *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v17;
  }
  if (result != v14)
  {
LABEL_18:
    sub_1000C1AF8();
    return specialized Array._endMutation()();
  }
LABEL_23:
  uint64_t v3 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v19 = v45;
  if (v42 < 0) {
    goto LABEL_29;
  }
  if (v46)
  {
    unint64_t v20 = (v46 - 1) & v46;
    unint64_t v21 = __clz(__rbit64(v46)) | (v45 << 6);
LABEL_26:
    uint64_t v22 = *(void **)(*(void *)(v42 + 48) + 8 * v21);
    id v23 = v22;
    goto LABEL_27;
  }
  int64_t v36 = v45 + 1;
  if (!__OFADD__(v45, 1))
  {
    int64_t v37 = (unint64_t)(v44 + 64) >> 6;
    if (v36 >= v37)
    {
      uint64_t v22 = 0;
      unint64_t v20 = 0;
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v36);
    if (v38) {
      goto LABEL_75;
    }
    int64_t v39 = v45 + 2;
    if (v45 + 2 >= v37)
    {
LABEL_91:
      uint64_t v22 = 0;
      unint64_t v20 = 0;
      int64_t v19 = v36;
      goto LABEL_27;
    }
    unint64_t v38 = *(void *)(v43 + 8 * v39);
    if (v38) {
      goto LABEL_79;
    }
    int64_t v1 = v45 + 3;
    if (v45 + 3 < v37)
    {
      unint64_t v38 = *(void *)(v43 + 8 * v1);
      if (v38)
      {
        int64_t v36 = v45 + 3;
        goto LABEL_75;
      }
      int64_t v39 = v45 + 4;
      if (v45 + 4 >= v37) {
        goto LABEL_94;
      }
      unint64_t v38 = *(void *)(v43 + 8 * v39);
      if (v38)
      {
LABEL_79:
        int64_t v36 = v39;
LABEL_75:
        unint64_t v20 = (v38 - 1) & v38;
        unint64_t v21 = __clz(__rbit64(v38)) + (v36 << 6);
        int64_t v19 = v36;
        goto LABEL_26;
      }
      int64_t v36 = v45 + 5;
      if (v45 + 5 < v37)
      {
        unint64_t v38 = *(void *)(v43 + 8 * v36);
        if (!v38)
        {
          int64_t v36 = v37 - 1;
          uint64_t v40 = v45 + 6;
          do
          {
            if (v37 == v40) {
              goto LABEL_91;
            }
            unint64_t v38 = *(void *)(v43 + 8 * v40++);
          }
          while (!v38);
          int64_t v36 = v40 - 1;
        }
        goto LABEL_75;
      }
    }
    uint64_t v22 = 0;
    unint64_t v20 = 0;
    int64_t v19 = v39;
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

uint64_t sub_100201318(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020EA48);
}

uint64_t sub_100201330(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_1003091D0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_100094134(&qword_100914420) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *int64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002014E4(unint64_t a1)
{
  return sub_1002024D4(a1, (uint64_t *)&unk_10090B070, &qword_10090FF48, &qword_10090FF40, (uint64_t *)sub_10032D678);
}

uint64_t sub_100201514(uint64_t result)
{
  int64_t v5 = v2;
  uint64_t v6 = result;
  if ((result & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    int64_t v7 = result;
  }
  else
  {
    int64_t v7 = *(void *)(result + 16);
  }
  if ((unint64_t)*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v9 = v19 + v7;
    if (!__OFADD__(v19, v7)) {
      goto LABEL_6;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v9 = v8 + v7;
  if (__OFADD__(v8, v7)) {
    goto LABEL_23;
  }
LABEL_6:
  unint64_t v10 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v5 = v10;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v10 & 0x8000000000000000) != 0
    || (v10 & 0x4000000000000000) != 0
    || (uint64_t v12 = v10 & 0xFFFFFFFFFFFFFF8, v9 > *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v3 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v3 <= v9) {
      uint64_t v3 = v9;
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *int64_t v5 = v13;
    uint64_t v12 = v13 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = (*(void *)(v12 + 24) >> 1) - v14;
  uint64_t result = sub_10020C0B0((uint64_t)&v38, (void *)(v12 + 8 * v14 + 32), v15, v6);
  if (result < v7) {
    goto LABEL_24;
  }
  if (result >= 1)
  {
    uint64_t v16 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v17 = __OFADD__(v16, result);
    uint64_t v18 = v16 + result;
    if (v17)
    {
      __break(1u);
LABEL_31:
      if (__CocoaSet.Iterator.next()())
      {
        swift_unknownObjectRetain();
        sub_100094134((uint64_t *)&unk_10090B070);
        swift_dynamicCast();
        uint64_t v21 = v37;
        swift_unknownObjectRelease();
        goto LABEL_38;
      }
      goto LABEL_20;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
  }
  if (result != v15)
  {
LABEL_20:
    sub_1000C1AF8();
    return specialized Array._endMutation()();
  }
LABEL_25:
  uint64_t v4 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v15 = v38;
  uint64_t v36 = v39;
  int64_t v7 = v40;
  uint64_t v3 = v41;
  int64_t v9 = v42;
  if (v38 < 0) {
    goto LABEL_31;
  }
  if (v42)
  {
    int64_t v9 = (v42 - 1) & v42;
    unint64_t v20 = __clz(__rbit64(v42)) | (v41 << 6);
LABEL_28:
    uint64_t v21 = *(void *)(*(void *)(v38 + 48) + 8 * v20);
    swift_retain();
    goto LABEL_38;
  }
  int64_t v22 = v41 + 1;
  if (!__OFADD__(v41, 1))
  {
    int64_t v23 = (unint64_t)(v40 + 64) >> 6;
    if (v22 >= v23)
    {
      int64_t v9 = 0;
      uint64_t v21 = 0;
      goto LABEL_38;
    }
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    if (v24) {
      goto LABEL_36;
    }
    uint64_t v34 = v41 + 2;
    if (v41 + 2 >= v23)
    {
LABEL_91:
      int64_t v9 = 0;
      uint64_t v21 = 0;
      uint64_t v3 = v22;
      goto LABEL_38;
    }
    unint64_t v24 = *(void *)(v39 + 8 * v34);
    if (v24) {
      goto LABEL_76;
    }
    uint64_t v1 = v41 + 3;
    if (v41 + 3 < v23)
    {
      unint64_t v24 = *(void *)(v39 + 8 * v1);
      if (v24)
      {
        int64_t v22 = v41 + 3;
        goto LABEL_36;
      }
      uint64_t v34 = v41 + 4;
      if (v41 + 4 >= v23) {
        goto LABEL_94;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v34);
      if (v24)
      {
LABEL_76:
        int64_t v22 = v34;
LABEL_36:
        int64_t v9 = (v24 - 1) & v24;
        unint64_t v20 = __clz(__rbit64(v24)) + (v22 << 6);
        uint64_t v3 = v22;
        goto LABEL_28;
      }
      int64_t v22 = v41 + 5;
      if (v41 + 5 < v23)
      {
        unint64_t v24 = *(void *)(v39 + 8 * v22);
        if (!v24)
        {
          int64_t v22 = v23 - 1;
          uint64_t v35 = v41 + 6;
          do
          {
            if (v23 == v35) {
              goto LABEL_91;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v35++);
          }
          while (!v24);
          int64_t v22 = v35 - 1;
        }
        goto LABEL_36;
      }
    }
    int64_t v9 = 0;
    uint64_t v21 = 0;
    uint64_t v3 = v34;
LABEL_38:
    while (2)
    {
      if (!v21) {
        goto LABEL_20;
      }
      int64_t v7 = (unint64_t)(v7 + 64) >> 6;
      while (1)
      {
        uint64_t v25 = *v5 & 0xFFFFFFFFFFFFFF8;
        if (v4 + 1 > *(void *)(v25 + 0x18) >> 1)
        {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v25 = *v5 & 0xFFFFFFFFFFFFFF8;
        }
        uint64_t v26 = *(void *)(v25 + 24) >> 1;
        if (v4 < v26) {
          break;
        }
LABEL_42:
        *(void *)(v25 + 16) = v4;
      }
      uint64_t v27 = v25 + 32;
      while (1)
      {
        *(void *)(v27 + 8 * v4++) = v21;
        if ((v15 & 0x8000000000000000) == 0) {
          break;
        }
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_82;
        }
        swift_unknownObjectRetain();
        sub_100094134((uint64_t *)&unk_10090B070);
        swift_dynamicCast();
        uint64_t v21 = v37;
        swift_unknownObjectRelease();
        if (!v37) {
          goto LABEL_82;
        }
LABEL_49:
        if (v4 >= v26)
        {
          uint64_t v25 = *v5 & 0xFFFFFFFFFFFFFF8;
          goto LABEL_42;
        }
      }
      if (v9)
      {
        unint64_t v28 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v29 = v28 | (v3 << 6);
        goto LABEL_48;
      }
      int64_t v30 = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
LABEL_94:
        int64_t v9 = 0;
        uint64_t v21 = 0;
        uint64_t v3 = v1;
        continue;
      }
      break;
    }
    if (v30 >= v7) {
      goto LABEL_82;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v30);
    if (!v31)
    {
      uint64_t v32 = v3 + 2;
      if (v3 + 2 >= v7) {
        goto LABEL_82;
      }
      unint64_t v31 = *(void *)(v36 + 8 * v32);
      if (!v31)
      {
        if (v3 + 3 >= v7) {
          goto LABEL_82;
        }
        unint64_t v31 = *(void *)(v36 + 8 * (v3 + 3));
        if (v31)
        {
          int64_t v30 = v3 + 3;
          goto LABEL_64;
        }
        uint64_t v32 = v3 + 4;
        if (v3 + 4 >= v7) {
          goto LABEL_82;
        }
        unint64_t v31 = *(void *)(v36 + 8 * v32);
        if (!v31)
        {
          int64_t v30 = v3 + 5;
          if (v3 + 5 >= v7) {
            goto LABEL_82;
          }
          unint64_t v31 = *(void *)(v36 + 8 * v30);
          if (!v31)
          {
            uint64_t v33 = v3 + 6;
            while (v7 != v33)
            {
              unint64_t v31 = *(void *)(v36 + 8 * v33++);
              if (v31)
              {
                int64_t v30 = v33 - 1;
                goto LABEL_64;
              }
            }
LABEL_82:
            *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v4;
            goto LABEL_20;
          }
          goto LABEL_64;
        }
      }
      int64_t v30 = v32;
    }
LABEL_64:
    int64_t v9 = (v31 - 1) & v31;
    unint64_t v29 = __clz(__rbit64(v31)) + (v30 << 6);
    uint64_t v3 = v30;
LABEL_48:
    uint64_t v21 = *(void *)(*(void *)(v15 + 48) + 8 * v29);
    swift_retain();
    if (!v21) {
      goto LABEL_82;
    }
    goto LABEL_49;
  }
  __break(1u);
  return result;
}

uint64_t sub_100201AF8(unint64_t a1)
{
  return sub_100203324(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020EC68);
}

uint64_t sub_100201B10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100308F88(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100201C64(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020EE88);
}

uint64_t sub_100201C7C(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020F0A8);
}

uint64_t sub_100201C94(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (isUniquelyReferenced_nonNull_native)
  {
    uint64_t v7 = *(void *)(v3 + 24) >> 1;
    if (v7 >= (uint64_t)(v4 + v2))
    {
      unint64_t v8 = *(void *)(a1 + 16);
      if (v8) {
        goto LABEL_5;
      }
LABEL_15:
      if (!v2) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  uint64_t v7 = *(void *)(v3 + 24) >> 1;
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  if (v7 - v9 < (uint64_t)v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v10 = v3 + 8 * v9 + 32;
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8) {
    goto LABEL_23;
  }
  sub_100094134(&qword_10090FEA8);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)(*v1 + 16);
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  *(void *)(*v1 + 16) = v14;
LABEL_16:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100201E40(uint64_t a1)
{
  return sub_100203A84(a1, (uint64_t (*)(void))sub_10030924C, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.PinnedList);
}

uint64_t sub_100201E6C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F4E8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))&type metadata accessor for REMObjectID_Codable, &qword_100910038, &qword_100910030, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D610);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100202070(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F70C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))_s19PolymorphicListItemCMa_0, (unint64_t *)&unk_1009101B0, &qword_1009101A8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100202274(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_10030931C, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist);
}

uint64_t sub_1002022A0(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F4E8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for REMCDSavedReminder, &qword_10090FEA0, &qword_100921B80, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D5A4);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1002024A4(unint64_t a1)
{
  return sub_1002024D4(a1, &qword_100913AA0, &qword_10090FED8, &qword_10090FED0, (uint64_t *)sub_10032D678);
}

uint64_t sub_1002024D4(unint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v5 >> 62))
  {
    uint64_t v12 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v13 = v12 + v11;
    if (!__OFADD__(v12, v11)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v13 = v23 + v11;
  if (__OFADD__(v23, v11)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v14 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v5 = v14;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v14 & 0x8000000000000000) == 0 && (v14 & 0x4000000000000000) == 0)
    {
      uint64_t v16 = v14 & 0xFFFFFFFFFFFFFF8;
      if (v13 <= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  uint64_t v24 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v14 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v5 = v17;
    uint64_t v16 = v17 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    uint64_t v11 = v24;
LABEL_11:
    uint64_t result = sub_10020E3E8(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1002026F8(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_1003091E4, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ReminderLite);
}

uint64_t sub_100202724(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F70C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))_s19PolymorphicListItemCMa_1, &qword_100910178, &qword_100910170, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100202928(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_100309604, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List);
}

uint64_t sub_100202954(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F70C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))_s8BaseListCMa, &qword_1009101E8, &qword_1009101E0, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100202B58(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_100309894, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

uint64_t sub_100202B84(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100309EFC(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  sub_100094134((uint64_t *)&unk_1009145F0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100202CFC(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020FB50);
}

uint64_t sub_100202D14(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F4E8(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))type metadata accessor for REMCDTemplate, (unint64_t *)&unk_1009101C0, &qword_100921A90, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D5A4);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100202F18(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020FD70);
}

uint64_t sub_100202F30(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020FF90);
}

uint64_t sub_100202F48(unint64_t a1)
{
  return sub_100203324(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1002101B0);
}

uint64_t sub_100202F60(uint64_t a1)
{
  uint64_t result = type metadata accessor for REMManualOrdering.PinnedList();
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *v1;
  int64_t v6 = *(void *)(*v1 + 16);
  int64_t v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v8 = *(void *)(result - 8);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v5;
  if (!result || (int64_t v9 = *(void *)(v5 + 24) >> 1, v9 < v7))
  {
    if (v6 <= v7) {
      int64_t v10 = v6 + v4;
    }
    else {
      int64_t v10 = v6;
    }
    uint64_t result = sub_100309280(result, v10, 1, v5);
    unint64_t v5 = result;
    *uint64_t v1 = result;
    int64_t v9 = *(void *)(result + 24) >> 1;
  }
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = v9 - v11;
  if (!*(void *)(a1 + 16))
  {
    if (!v4) {
      goto LABEL_19;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v12 < v4)
  {
    __break(1u);
    goto LABEL_25;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 72);
  unint64_t v15 = v5 + v13 + v14 * v11;
  if (a1 + v13 < v15 + v14 * v4 && v15 < a1 + v13 + v14 * v4) {
    goto LABEL_26;
  }
  swift_arrayInitWithCopy();
  if (v4)
  {
    uint64_t v17 = *(void *)(v5 + 16);
    BOOL v18 = __OFADD__(v17, v4);
    uint64_t v19 = v17 + v4;
    if (!v18)
    {
      *(void *)(v5 + 16) = v19;
      goto LABEL_19;
    }
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_19:
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == v12) {
LABEL_23:
  }
    *uint64_t v1 = v5;
  return result;
}

uint64_t sub_100203114(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_100309EC8, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100203140(unint64_t a1)
{
  return sub_100203324(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10020F930);
}

uint64_t sub_100203158(uint64_t a1)
{
  return sub_100203A84(a1, (uint64_t (*)(void))sub_10030B248, type metadata accessor for RDTimelineEngineReminder);
}

uint64_t sub_100203184(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_10030B2E4, (uint64_t (*)(void))type metadata accessor for RDIntentsRelevantShortcutsHandlerItem);
}

uint64_t sub_1002031B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10030B338(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[7 * v8 + 4];
  if (a1 + 32 < v9 + 56 * v2 && v9 < a1 + 32 + 56 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020330C(unint64_t a1)
{
  return sub_100203324(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1002105F0);
}

uint64_t sub_100203324(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_1002034F8(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_10030B7F0, type metadata accessor for RDSharedListActivityNotificationsEngine.JournalEntryUpdateItem);
}

uint64_t sub_100203524(uint64_t a1)
{
  return sub_100203550(a1, (uint64_t (*)(void))sub_100309218, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.SectionLite);
}

uint64_t sub_100203550(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10020370C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)&double v6 = __chkstk_darwin(v4).n128_u64[0];
  unint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (char *)[a1 count:v6];
  uint64_t v10 = *v2;
  int64_t v11 = (*v2)[2];
  uint64_t v12 = &v9[v11];
  if (__OFADD__(v11, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v13 = (uint64_t)v9;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v10;
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v15 = v10[3] >> 1, v15 < (uint64_t)v12))
  {
    if (v11 <= (uint64_t)v12) {
      int64_t v16 = (int64_t)v12;
    }
    else {
      int64_t v16 = v11;
    }
    uint64_t v10 = sub_1003090C0(isUniquelyReferenced_nonNull_native, v16, 1, v10);
    *uint64_t v2 = v10;
    uint64_t v15 = v10[3] >> 1;
  }
  uint64_t v17 = v10[2];
  uint64_t v18 = v15 - v17;
  sub_100210C44((uint64_t)v8, &v10[4 * v17 + 4], v15 - v17);
  if (v19 < v13) {
    goto LABEL_15;
  }
  if (v19 >= 1)
  {
    uint64_t v20 = v10[2];
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return;
    }
    v10[2] = v22;
  }
  if (v19 != v18)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return;
  }
LABEL_16:
  int64_t v23 = v10[2];
  sub_10021122C((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()();
  sub_1000E6E80((uint64_t)v33, (uint64_t)&v31);
  while (v32)
  {
    sub_1000966BC((uint64_t)&v31, &qword_100908190);
    uint64_t v25 = *v2;
    unint64_t v26 = (*v2)[3];
    int64_t v27 = v26 >> 1;
    if ((uint64_t)(v26 >> 1) < v23 + 1)
    {
      uint64_t v25 = sub_1003090C0((void *)(v26 > 1), v23 + 1, 1, *v2);
      *uint64_t v2 = v25;
      int64_t v27 = v25[3] >> 1;
    }
    sub_1000E6E80((uint64_t)v33, (uint64_t)&v29);
    if (v30)
    {
      if (v23 <= v27) {
        int64_t v24 = v27;
      }
      else {
        int64_t v24 = v23;
      }
      unint64_t v28 = &v25[4 * v23 + 4];
      while (1)
      {
        sub_10009A1A0(&v29, &v31);
        if (v24 == v23) {
          break;
        }
        sub_1000966BC((uint64_t)v33, &qword_100908190);
        sub_10009A1A0(&v31, v28);
        ++v23;
        dispatch thunk of IteratorProtocol.next()();
        sub_1000E6E80((uint64_t)v33, (uint64_t)&v29);
        v28 += 2;
        if (!v30) {
          goto LABEL_18;
        }
      }
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v31);
      int64_t v23 = v24;
    }
    else
    {
LABEL_18:
      sub_1000966BC((uint64_t)&v29, &qword_100908190);
      int64_t v24 = v23;
    }
    (*v2)[2] = v24;
    sub_1000E6E80((uint64_t)v33, (uint64_t)&v31);
  }
  sub_1000966BC((uint64_t)v33, &qword_100908190);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_1000966BC((uint64_t)&v31, &qword_100908190);
}

uint64_t sub_100203A58(uint64_t a1)
{
  return sub_100203A84(a1, (uint64_t (*)(void))sub_10030BCD0, (uint64_t (*)(void))&type metadata accessor for REMCustomSmartListFilterDescriptor.PostFetchPredicate);
}

uint64_t sub_100203A84(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  unint64_t v17 = a1 + v15;
  uint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  unint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v5 + 16);
  BOOL v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100203C44(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_10020F70C(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1, (void (*)(void))_s19PolymorphicListItemCMa, (unint64_t *)&unk_100910190, &qword_100910188, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D6E0);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100203E48(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_100210810);
}

uint64_t sub_100203E60(unint64_t a1)
{
  return sub_100203E78(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_100210A24);
}

uint64_t sub_100203E78(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

void _s7remindd13REMCDTemplateC19sortChildrenObjectsyyF_0()
{
  uint64_t v1 = v0;
  if ((sub_100204E6C() & 1) == 0)
  {
    id v2 = [v0 remObjectID];
    if (v2)
    {
      id v29 = v2;
      id v3 = [v0 storeControllerManagedObjectContext];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = qword_100907480;
        id v6 = v29;
        if (v5 != -1) {
          swift_once();
        }
        uint64_t v7 = sub_1003DD360((unint64_t)v29, 0, (uint64_t)v4, (Class)qword_100942208, 0, 0);

        id v8 = [v1 sectionIDsOrderingAsData];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v12 = v11;

          sub_1000963CC(0, (unint64_t *)&qword_10090D600);
          static REMJSONRepresentable.fromJSONData(_:)();
          sub_100097F34(v10, v12);
          type metadata accessor for REMCDTemplateSection();
          unint64_t v13 = REMOrderedIdentifierMap.reorder<A>(objects:)();
          swift_bridgeObjectRelease();
          if (qword_100907148 != -1) {
            swift_once();
          }
          uint64_t v14 = type metadata accessor for Logger();
          sub_10008E2DC(v14, (uint64_t)qword_10090FE60);
          id v15 = v1;
          uint64_t v16 = Logger.logObject.getter();
          os_log_type_t v17 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v16, v17))
          {
            os_log_type_t log = v17;
            id v30 = v31[0];
            uint64_t v18 = (uint8_t *)swift_slowAlloc();
            v31[0] = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v18 = 136315138;
            id v19 = [v15 remObjectID];
            if (v19)
            {
              unint64_t v20 = v19;
              id v21 = [v19 description];

              uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v24 = v23;
            }
            else
            {
              uint64_t v22 = 7104878;
              unint64_t v24 = 0xE300000000000000;
            }
            sub_1000C51B8(v22, v24, (uint64_t *)v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v16, log, "REMCDTemplate+CloudKit#sortChildSections(): Sorted child sections {cdTemplate: %s}", v18, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
        }
        else
        {
          unint64_t v13 = v7;
        }
        sub_10020029C(v13, (void (*)(void))type metadata accessor for REMCDTemplateSection);
        swift_bridgeObjectRelease();
        id v25 = objc_allocWithZone((Class)NSMutableOrderedSet);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v27 = [v25 initWithArray:isa];

        [v1 setSections:v27];
      }
      else
      {
      }
    }
  }
}

uint64_t sub_100204968()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090FE60);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090FE60);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100204A38(char a1)
{
  unint64_t result = 0x626D456567646162;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F6C6F63;
      break;
    case 2:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000026;
      break;
    case 5:
      unint64_t result = 0xD000000000000028;
      break;
    case 6:
      unint64_t result = 0xD000000000000025;
      break;
    case 7:
      unint64_t result = 1701667182;
      break;
    case 8:
      unint64_t result = 0x6341746E65726170;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 10:
      unint64_t result = 0xD000000000000016;
      break;
    case 11:
    case 14:
      unint64_t result = 0xD000000000000018;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    case 15:
      unint64_t result = 0x53676E6974726F73;
      break;
    case 16:
      unint64_t result = 0x694C656372756F73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100204C5C(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100204A38(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100204A38(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100204CE8()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100204A38(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100204D4C()
{
  sub_100204A38(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100204DA0()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100204A38(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100204E00@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100210E48();
  *a1 = result;
  return result;
}

unint64_t sub_100204E30@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100204A38(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100204E5C(void *a1@<X8>)
{
  *a1 = &off_1008B34E8;
}

uint64_t sub_100204E6C()
{
  id v1 = [v0 managedObjectContext];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  self;
  uint64_t v3 = swift_dynamicCastObjCClass();
  if (!v3)
  {
LABEL_11:

    return 0;
  }
  unint64_t v4 = (void *)v3;
  uint64_t v5 = (uint64_t)[v0 recordID];
  if (v5)
  {
    if ([v4 containerShouldSortChildrenAfterFetchingWithRecordID:v5])
    {
      if (qword_100907148 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10008E2DC(v6, (uint64_t)qword_10090FE60);
      id v7 = (id)v5;
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v8, v9))
      {

        return 1;
      }
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      unint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138543362;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v11 = v5;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sorting children (sections) deferred {templateRecordID: %{public}@}", v10, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      uint64_t v5 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_9;
    }

    goto LABEL_11;
  }
LABEL_9:

  return v5;
}

_UNKNOWN **static REMCDTemplate.recordTypes()()
{
  return &off_1008B6020;
}

uint64_t static REMCDTemplate.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for REMCDTemplate();
  id v6 = a1;
  swift_bridgeObjectRetain();
  id v7 = a4;
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [(id)swift_getObjCClassFromMetadata() objectWithRecordID:v6 accountID:v8 context:v7];

  if (v9)
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDTemplate.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      id v12 = v11;
      [v10 setAccount:a2];
      [v10 mergeDataFromRecord:a1 accountID:v12];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100907148 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_10090FE60);
      id v14 = a2;
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          id v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDTemplate.recordType()()
{
  uint64_t v0 = 0x6574616C706D6554;
  id v1 = (void *)0xE800000000000000;
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Void __swiftcall REMCDTemplate.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6);
  id v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = (objc_class *)type metadata accessor for REMCDTemplate();
  v50.receiver = v3;
  v50.super_class = v10;
  [super mergeDataFromRecord:from.super.isa accountID:v9];

  id v11 = [(objc_class *)from.super.isa recordID];
  NSString v12 = [v11 recordName];

  if (!v12)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  NSString v13 = [v3 ckIdentifierFromRecordName:v12];

  if (!v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v13];

  id v14 = [v3 mergeDataRevertedLocallyMarkedForDeletion];
  id v15 = [v3 mergeDataRefusedToMergeMarkedForDeletion];
  char v49 = 0;
  id v16 = v3;
  uint64_t v17 = from.super.isa;
  sub_1004B9B28((char *)v17, (uint64_t)v14, (uint64_t)v15, v16, v16, v17, &v49, ObjectType);
  if (v49 == 1)
  {
    if (qword_100907148 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10090FE60);
    id v19 = v16;
    id v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v48 = v23;
      *(_DWORD *)uint64_t v22 = 136446722;
      id v24 = [v19 ckIdentifier];
      HIDWORD(v44) = v21;
      uint64_t v45 = v23;
      if (v24)
      {
        unint64_t v25 = v24;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v28 = 0;
      }
      uint64_t v46 = v26;
      uint64_t v47 = v28;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v29 = Optional.descriptionOrNil.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      uint64_t v46 = sub_1000C51B8(v29, v31, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2082;
      [v19 markedForDeletion];
      uint64_t v32 = Bool.yesno.getter();
      uint64_t v46 = sub_1000C51B8(v32, v33, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2082;
      id v34 = [v19 sourceListIDURL];
      if (v34)
      {
        uint64_t v35 = v34;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v36 = type metadata accessor for URL();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v8, 0, 1, v36);
      }
      else
      {
        uint64_t v37 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v8, 1, 1, v37);
      }
      os_log_type_t v38 = BYTE4(v44);
      uint64_t v39 = Optional.descriptionOrNil.getter();
      unint64_t v41 = v40;
      sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909E40);
      uint64_t v46 = sub_1000C51B8(v39, v41, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v38, "REMCDTemplate.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' due to change in 'sourceListIDURL' {ckIdentifier: %{public}s, markedForDeletion: %{public}s, sourceListIDURL: %{public}s}", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v42 = [v19 storeControllerManagedObjectContext];
    if (v42)
    {
      uint64_t v43 = v42;
      [v42 setPendingPostSaveActions:((unint64_t)[v42 pendingPostSaveActions] | 4)];
    }
  }
}

void sub_100205CE8(unsigned char *a1, void *a2, void *a3, unsigned char *a4, uint64_t a5)
{
  v143[1] = a5;
  uint64_t v149 = a4;
  id v150 = a3;
  id v151 = a2;
  uint64_t v148 = 0;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v147 = (uint64_t)v143 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v145 = *(void *)(v8 - 8);
  uint64_t v146 = v8;
  __chkstk_darwin(v8);
  v143[0] = (char *)v143 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  NSString v12 = (char *)v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v144 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v15 = (char *)v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  int v21 = (char *)v143 - v20;
  __chkstk_darwin(v22);
  id v24 = (char *)v143 - v23;
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)v143 - v26;
  __chkstk_darwin(v28);
  unint64_t v30 = (char *)v143 - v29;
  *(void *)&double v32 = __chkstk_darwin(v31).n128_u64[0];
  id v34 = (char *)v143 - v33;
  switch(*a1)
  {
    case 1:
      uint64_t v36 = CKRecord.subscript.getter();
      id v37 = v151;
      if (v36)
      {
        uint64_t v154 = v36;
        sub_100094134(&qword_100909AB0);
        if (swift_dynamicCast())
        {
          uint64_t v35 = (void *)sub_1000D3BEC(v152, v153);
          swift_bridgeObjectRelease();
          if (v35)
          {
            [v37 setColor:v35];
            goto LABEL_76;
          }
        }
      }
      [v37 setColor:0];
      return;
    case 2:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v38 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v39 = *(void *)(v38 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v34, 1, v38) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v34, v38);
      }
      [v151 setCreationDate:isa];
      goto LABEL_40;
    case 3:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v41 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v42 = *(void *)(v41 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v30, 1, v41) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v41);
      }
      [v151 setLastModifiedDate:isa];
      goto LABEL_40;
    case 4:
      return;
    case 5:
      id v43 = [v150 encryptedValues:v32];
      NSString v44 = String._bridgeToObjectiveC()();
      id v45 = [v43 objectForKeyedSubscript:v44];
      swift_unknownObjectRelease();

      if (v45)
      {
        uint64_t v154 = (uint64_t)v45;
        sub_100094134(&qword_100909AB0);
        int v46 = swift_dynamicCast();
        if (v46) {
          uint64_t v47 = v152;
        }
        else {
          uint64_t v47 = 0;
        }
        if (v46) {
          unint64_t v48 = v153;
        }
        else {
          unint64_t v48 = 0;
        }
      }
      else
      {
        uint64_t v47 = 0;
        unint64_t v48 = 0;
      }
      id v90 = [v151 membershipsOfRemindersInSectionsChecksum];
      if (v90)
      {
        uint64_t v91 = v90;
        uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v94 = v93;

        if (v48)
        {
          if (v92 == v47 && v48 == v94)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v95)
          {
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else if (!v48)
      {
        return;
      }
      id v96 = v151;
      uint64_t v149 = [v151 membershipsOfRemindersInSectionsChecksum];
      id v97 = [v96 membershipsOfRemindersInSectionsAsData];
      if (v97)
      {
        unint64_t v98 = v97;
        uint64_t v147 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v100 = v99;
      }
      else
      {
        uint64_t v147 = 0;
        unint64_t v100 = 0xF000000000000000;
      }
      uint64_t v101 = v148;
      id v102 = [v96 membershipsOfRemindersInSectionsAsData];
      unint64_t v103 = &selRef_willSave;
      if (v102)
      {
        uint64_t v104 = v102;
        uint64_t v105 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v107 = v106;

        sub_1000963CC(0, (unint64_t *)&qword_100910240);
        static REMJSONRepresentable.fromJSONData(_:)();
        if (v101)
        {
          sub_100097F34(v105, v107);
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
        sub_100097F34(v105, v107);
        uint64_t v108 = (void *)v152;
        unint64_t v103 = &selRef_willSave;
      }
      else
      {
        uint64_t v108 = 0;
      }
      if (v48)
      {
        NSString v114 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v114 = 0;
      }
      [v96 v103[392]:v114];

      uint64_t v115 = sub_1004C6530();
      if (v116 >> 60 == 15)
      {
        Class v117 = 0;
      }
      else
      {
        uint64_t v118 = v115;
        unint64_t v119 = v116;
        Class v117 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v118, v119);
      }
      [v96 setMembershipsOfRemindersInSectionsAsData:v117];

      if (!v108)
      {

        sub_100097F20(v147, v100);
        return;
      }
      id v120 = v108;
      sub_10015A2B0(v120);
      if (!v101)
      {

        sub_100097F20(v147, v100);
        return;
      }

LABEL_105:
      if (qword_100907148 != -1) {
        swift_once();
      }
      uint64_t v121 = type metadata accessor for Logger();
      sub_10008E2DC(v121, (uint64_t)qword_10090FE60);
      id v122 = v96;
      swift_errorRetain();
      id v123 = v122;
      swift_errorRetain();
      uint64_t v124 = Logger.logObject.getter();
      os_log_type_t v125 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v124, v125))
      {
        uint64_t v148 = v101;
        uint64_t v126 = swift_slowAlloc();
        uint64_t v152 = swift_slowAlloc();
        *(_DWORD *)uint64_t v126 = 136446722;
        uint64_t v127 = sub_1000D82B8();
        uint64_t v154 = sub_1000C51B8(v127, v128, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v126 + 12) = 2082;
        id v129 = [v123 remObjectID];
        if (v129)
        {
          uint64_t v130 = v129;
          id v131 = [v129 description];

          uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v134 = v133;
        }
        else
        {
          unint64_t v134 = 0xE300000000000000;
          uint64_t v132 = 7104878;
        }
        uint64_t v154 = sub_1000C51B8(v132, v134, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v126 + 22) = 2082;
        swift_getErrorValue();
        uint64_t v138 = Error.rem_errorDescription.getter();
        uint64_t v154 = sub_1000C51B8(v138, v139, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v124, v125, "%{public}s#mergeData(from record: CKRecord, accountID:): Failed to update 'membershipsOfRemindersInSections'. {objectID: %{public}s, error: %{public}s}", (uint8_t *)v126, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v140 = v147;
      id v141 = v149;
      [v123 setMembershipsOfRemindersInSectionsChecksum:v149];

      if (v100 >> 60 == 15)
      {
        Class v142 = 0;
      }
      else
      {
        sub_100097E38(v140, v100);
        Class v142 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v140, v100);
      }
      [v123 setMembershipsOfRemindersInSectionsAsData:v142];
      sub_100097F20(v140, v100);

      swift_errorRelease();
      return;
    case 6:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v49 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v50 = *(void *)(v49 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v27, 1, v49) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v49);
      }
      [v151 setMostRecentPublicLinkUpdateRequestDate:isa];
      goto LABEL_40;
    case 7:
      id v51 = [v150 encryptedValues:v32];
      swift_getObjectType();
      CKRecordKeyValueSetting.subscript.getter();
      swift_unknownObjectRelease();
      if (v153)
      {
        uint64_t v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = 0;
      }
      [v151 setName:v35];
      goto LABEL_76;
    case 8:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      if (v152 == 2)
      {
        id v52 = 0;
        id v53 = v151;
      }
      else
      {
        id v53 = v151;
        if (v152) {
          id v52 = [v151 account];
        }
        else {
          id v52 = 0;
        }
      }
      [v53 setParentAccount:v52];

      goto LABEL_82;
    case 9:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v35 = 0;
      unint64_t v54 = v153;
      if (v153 >> 60 != 15)
      {
        uint64_t v55 = v152;
        uint64_t v35 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v55, v54);
      }
      [v151 setPublicLinkConfigurationData:v35];
      goto LABEL_76;
    case 0xA:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v56 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v57 = *(void *)(v56 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v24, 1, v56) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v57 + 8))(v24, v56);
      }
      [v151 setPublicLinkCreationDate:isa];
      goto LABEL_40;
    case 0xB:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v58 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v59 = *(void *)(v58 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v21, 1, v58) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v59 + 8))(v21, v58);
      }
      [v151 setPublicLinkExpirationDate:isa];
      goto LABEL_40;
    case 0xC:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      uint64_t v60 = type metadata accessor for Date();
      CKRecordKeyValueSetting.subscript.getter();
      uint64_t v61 = *(void *)(v60 - 8);
      Class isa = 0;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v18, 1, v60) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v18, v60);
      }
      [v151 setPublicLinkLastModifiedDate:isa];
      goto LABEL_40;
    case 0xD:
      id v62 = [v150 encryptedValues:v32];
      NSString v63 = String._bridgeToObjectiveC()();
      id v64 = [v62 objectForKeyedSubscript:v63];
      swift_unknownObjectRelease();

      id v65 = v151;
      if (!v64) {
        goto LABEL_45;
      }
      uint64_t v154 = (uint64_t)v64;
      sub_100094134(&qword_100909AB0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_45;
      }
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v66 = v144;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v144 + 48))(v12, 1, v13) == 1)
      {
        sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909E50);
LABEL_45:
        [v65 setPublicLinkURLUUID:0];
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v15, v12, v13);
        Class v109 = UUID._bridgeToObjectiveC()().super.isa;
        [v65 setPublicLinkURLUUID:v109];

        (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v13);
      }
      return;
    case 0xE:
      uint64_t v67 = sub_1004C6530();
      unint64_t v69 = v68;
      swift_bridgeObjectRelease();
      if (v69 >> 60 == 15)
      {
        Class v70 = 0;
      }
      else
      {
        Class v70 = Data._bridgeToObjectiveC()().super.isa;
        sub_100097F20(v67, v69);
      }
      [v151 setSectionIDsOrderingAsData:v70];

      _s7remindd13REMCDTemplateC19sortChildrenObjectsyyF_0();
      return;
    case 0xF:
      uint64_t v71 = CKRecord.subscript.getter();
      id v72 = v151;
      if (v71 && (uint64_t v154 = v71, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) != 0))
      {
        Class isa = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v72 setSortingStyle:isa];
LABEL_40:
      }
      else
      {
        if (qword_100907148 != -1) {
          swift_once();
        }
        uint64_t v80 = type metadata accessor for Logger();
        sub_10008E2DC(v80, (uint64_t)qword_10090FE60);
        id v81 = v72;
        unint64_t v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v82, v83))
        {
          BOOL v84 = (uint8_t *)swift_slowAlloc();
          uint64_t v154 = swift_slowAlloc();
          *(_DWORD *)BOOL v84 = 136446210;
          id v85 = [v81 ckIdentifier];
          if (v85)
          {
            unint64_t v86 = v85;
            uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v89 = v88;
          }
          else
          {
            uint64_t v87 = 0;
            unint64_t v89 = 0;
          }
          uint64_t v152 = v87;
          unint64_t v153 = v89;
          sub_100094134((uint64_t *)&unk_10090A4C0);
          uint64_t v135 = Optional.descriptionOrNil.getter();
          unint64_t v137 = v136;
          swift_bridgeObjectRelease();
          uint64_t v152 = sub_1000C51B8(v135, v137, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Template (ckIdentifier: %{public}s) does not have a sorting style", v84, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      return;
    case 0x10:
      id v73 = [v150 encryptedValues:v32];
      NSString v74 = String._bridgeToObjectiveC()();
      id v75 = [v73 objectForKeyedSubscript:v74];
      swift_unknownObjectRelease();

      id v76 = v151;
      if (!v75) {
        goto LABEL_55;
      }
      uint64_t v154 = (uint64_t)v75;
      sub_100094134(&qword_100909AB0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_55;
      }
      uint64_t v77 = v147;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v79 = v145;
      uint64_t v78 = v146;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v77, 1, v146) == 1)
      {
        sub_1000966BC(v147, (uint64_t *)&unk_100909E40);
LABEL_55:
        [v76 setSourceListIDURL:0];
      }
      else
      {
        uint64_t v110 = v143[0];
        (*(void (**)(void, uint64_t, uint64_t))(v79 + 32))(v143[0], v147, v78);
        URL._bridgeToObjectiveC()(v111);
        uint64_t v113 = v112;
        [v76 setSourceListIDURL:v112];

        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v110, v78);
      }
LABEL_82:
      *uint64_t v149 = 1;
      return;
    default:
      sub_1000963CC(0, (unint64_t *)&qword_100909E80);
      CKRecordKeyValueSetting.subscript.getter();
      if (v153)
      {
        uint64_t v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = 0;
      }
      [v151 setBadgeEmblem:v35];
LABEL_76:

      return;
  }
}

CKRecord_optional __swiftcall REMCDTemplate.newlyCreatedRecord()()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v174 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v6 - 8);
  uint64_t v212 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v213 = (uint64_t)&v174 - v9;
  uint64_t v211 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  int v199 = (char *)&v174 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v12 - 8);
  uint64_t v203 = (char *)&v174 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v209 = (uint64_t)&v174 - v15;
  uint64_t v16 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v174 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  int v21 = (char *)&v174 - v20;
  __chkstk_darwin(v22);
  uint64_t v215 = (char *)&v174 - v23;
  __chkstk_darwin(v24);
  uint64_t v208 = (uint64_t)&v174 - v25;
  __chkstk_darwin(v26);
  uint64_t v202 = (char *)&v174 - v27;
  __chkstk_darwin(v28);
  uint64_t v207 = (uint64_t)&v174 - v29;
  __chkstk_darwin(v30);
  uint64_t v201 = (char *)&v174 - v31;
  __chkstk_darwin(v32);
  uint64_t v206 = (uint64_t)&v174 - v33;
  __chkstk_darwin(v34);
  uint64_t v200 = (char *)&v174 - v35;
  __chkstk_darwin(v36);
  uint64_t v205 = (uint64_t)&v174 - v37;
  __chkstk_darwin(v38);
  unint64_t v40 = (char *)&v174 - v39;
  *(void *)&double v42 = __chkstk_darwin(v41).n128_u64[0];
  uint64_t v204 = (uint64_t)&v174 - v43;
  if (objc_msgSend(v1, "isOwnedByCurrentUser", v42))
  {
    id v197 = v40;
    NSString v44 = (objc_class *)type metadata accessor for REMCDTemplate();
    v219.receiver = v1;
    v219.super_class = v44;
    id v45 = [[super newlyCreatedRecord];
    uint64_t v47 = v45;
    if (v45)
    {
      uint64_t v182 = v5;
      uint64_t v48 = 17;
      uint64_t v196 = v2;
      id v195 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      id v194 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
      long long v179 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      long long v178 = (void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v193 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      uint64_t v192 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      uint64_t v177 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
      uint64_t v49 = &byte_1008B3508;
      uint64_t v176 = (void (**)(char *, uint64_t))(v10 + 8);
      unint64_t v191 = 0x80000001007CEB80;
      unint64_t v190 = 0x80000001007CCA20;
      unint64_t v189 = 0x80000001007CEB50;
      unint64_t v188 = 0x80000001007CC9D0;
      unint64_t v187 = 0x80000001007CEB30;
      unint64_t v186 = 0x80000001007CEB10;
      unint64_t v185 = 0x80000001007C8940;
      unint64_t v184 = 0x80000001007CEAF0;
      unint64_t v183 = 0x80000001007C88A0;
      long long v181 = "indersInSectionsChecksum";
      unint64_t v175 = 0x80000001007CCA50;
      unint64_t v180 = "ShowingLargeAttachments";
      unint64_t v174 = 0x80000001007CC9B0;
      uint64_t v210 = v18;
      uint64_t v214 = v21;
      uint64_t v50 = v215;
      id v198 = v45;
      while (2)
      {
        int v63 = *v49++;
        switch(v63)
        {
          case 1:
            id v65 = [v1 color];
            if (v65)
            {
              uint64_t v66 = v65;
              uint64_t v67 = sub_10016FAD4();
              if (v68)
              {
                *((void *)&v217 + 1) = &type metadata for String;
                uint64_t v218 = &protocol witness table for String;
                *(void *)&long long v216 = v67;
                *((void *)&v216 + 1) = v68;
              }
              else
              {
                uint64_t v218 = 0;
                long long v216 = 0u;
                long long v217 = 0u;
              }
              sub_1000963CC(0, (unint64_t *)&qword_100909E80);
              CKRecordKeyValueSetting.subscript.setter();

              uint64_t v50 = v215;
            }
            else
            {
              CKRecord.subscript.setter();
              uint64_t v50 = v215;
            }
            goto LABEL_13;
          case 2:
            id v69 = [v1 creationDate];
            if (v69)
            {
              Class v70 = v69;
              uint64_t v71 = (uint64_t)v197;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v72 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v71, 0, 1, v72);
            }
            else
            {
              uint64_t v72 = type metadata accessor for Date();
              uint64_t v71 = (uint64_t)v197;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v197, 1, 1, v72);
            }
            uint64_t v132 = v204;
            sub_100096408(v71, v204, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v133 = *(void *)(v72 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v132, 1, v72) == 1)
            {
              sub_1000966BC(v132, (uint64_t *)&unk_100909A40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              *((void *)&v217 + 1) = v72;
              uint64_t v218 = &protocol witness table for Date;
              id v62 = sub_1000C1FE8((uint64_t *)&v216);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v133 + 32))(v62, v132, v72);
            }
            uint64_t v50 = v215;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            uint64_t v47 = v198;
            goto LABEL_12;
          case 3:
            id v73 = [v1 lastModifiedDate];
            if (v73)
            {
              NSString v74 = v73;
              uint64_t v75 = (uint64_t)v200;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v76 = type metadata accessor for Date();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 0, 1, v76);
            }
            else
            {
              uint64_t v76 = type metadata accessor for Date();
              uint64_t v75 = (uint64_t)v200;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v200, 1, 1, v76);
            }
            uint64_t v134 = v205;
            sub_100096408(v75, v205, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v135 = *(void *)(v76 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48))(v134, 1, v76) == 1)
            {
              sub_1000966BC(v134, (uint64_t *)&unk_100909A40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              *((void *)&v217 + 1) = v76;
              uint64_t v218 = &protocol witness table for Date;
              unint64_t v136 = sub_1000C1FE8((uint64_t *)&v216);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v135 + 32))(v136, v134, v76);
            }
            uint64_t v50 = v215;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            CKRecordKeyValueSetting.subscript.setter();
            goto LABEL_13;
          case 4:
            goto LABEL_13;
          case 5:
            id v77 = [v1 membershipsOfRemindersInSectionsAsData];
            if (v77)
            {
              uint64_t v78 = v77;
              uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v81 = v80;

              unint64_t v82 = self;
              sub_100097E38(v79, v81);
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              id v84 = [v82 assetForData:isa];

              CKRecord.subscript.setter();
              sub_100097F34(v79, v81);
              sub_100097F34(v79, v81);
            }
            else
            {
              CKRecord.subscript.setter();
            }
            id v137 = [v47 encryptedValues:v174, v175];
            id v138 = [v1 membershipsOfRemindersInSectionsChecksum];
            if (v138)
            {
              unint64_t v139 = v138;
              uint64_t v140 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v142 = v141;

              *((void *)&v217 + 1) = &type metadata for String;
              uint64_t v218 = &protocol witness table for String;
              *(void *)&long long v216 = v140;
              *((void *)&v216 + 1) = v142;
            }
            else
            {
              uint64_t v218 = 0;
              long long v216 = 0u;
              long long v217 = 0u;
            }
            uint64_t v18 = v210;
            int v21 = v214;
            uint64_t v50 = v215;
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            swift_unknownObjectRelease();
            goto LABEL_13;
          case 6:
            id v85 = [v1 mostRecentPublicLinkUpdateRequestDate];
            if (v85)
            {
              unint64_t v86 = v85;
              uint64_t v87 = v201;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = type metadata accessor for Date();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 0, 1, v88);
            }
            else
            {
              uint64_t v88 = type metadata accessor for Date();
              uint64_t v87 = v201;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v201, 1, 1, v88);
            }
            uint64_t v143 = (uint64_t)v87;
            uint64_t v144 = v206;
            sub_100096408(v143, v206, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v145 = *(void *)(v88 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v144, 1, v88) != 1) {
              goto LABEL_64;
            }
            goto LABEL_70;
          case 7:
            [v47 encryptedValues];
            id v89 = [v1 name];
            if (v89)
            {
              id v90 = v89;
              uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v93 = v92;

              *((void *)&v217 + 1) = &type metadata for String;
              uint64_t v218 = &protocol witness table for String;
              *(void *)&long long v216 = v91;
              *((void *)&v216 + 1) = v93;
              int v21 = v214;
              uint64_t v18 = v210;
            }
            else
            {
              uint64_t v218 = 0;
              long long v216 = 0u;
              long long v217 = 0u;
            }
            swift_getObjectType();
            CKRecordKeyValueSetting.subscript.setter();
            goto LABEL_98;
          case 8:
            id v94 = [v1 parentAccount];
            id v95 = v94;
            if (v94) {

            }
            *((void *)&v217 + 1) = &type metadata for Bool;
            uint64_t v218 = &protocol witness table for Bool;
            LOBYTE(v216) = v95 != 0;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_12;
          case 9:
            id v96 = [v1 publicLinkConfigurationData];
            if (v96)
            {
              id v97 = v96;
              uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v100 = v99;

              *((void *)&v217 + 1) = &type metadata for Data;
              uint64_t v218 = &protocol witness table for Data;
              *(void *)&long long v216 = v98;
              *((void *)&v216 + 1) = v100;
              int v21 = v214;
              uint64_t v50 = v215;
            }
            else
            {
              uint64_t v218 = 0;
              long long v216 = 0u;
              long long v217 = 0u;
            }
            goto LABEL_87;
          case 10:
            id v101 = [v1 publicLinkCreationDate];
            if (v101)
            {
              id v102 = v101;
              unint64_t v103 = v202;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = type metadata accessor for Date();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v103, 0, 1, v88);
            }
            else
            {
              uint64_t v88 = type metadata accessor for Date();
              unint64_t v103 = v202;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v202, 1, 1, v88);
            }
            uint64_t v147 = (uint64_t)v103;
            uint64_t v144 = v207;
            sub_100096408(v147, v207, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v145 = *(void *)(v88 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v144, 1, v88) == 1)
            {
LABEL_70:
              sub_1000966BC(v144, (uint64_t *)&unk_100909A40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
LABEL_64:
              *((void *)&v217 + 1) = v88;
              uint64_t v218 = &protocol witness table for Date;
              uint64_t v146 = sub_1000C1FE8((uint64_t *)&v216);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v145 + 32))(v146, v144, v88);
            }
            goto LABEL_81;
          case 11:
            id v104 = [v1 publicLinkExpirationDate];
            if (v104)
            {
              uint64_t v105 = v104;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v106 = type metadata accessor for Date();
              uint64_t v107 = (uint64_t)v50;
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v50, 0, 1, v106);
            }
            else
            {
              uint64_t v106 = type metadata accessor for Date();
              uint64_t v107 = (uint64_t)v50;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v50, 1, 1, v106);
            }
            uint64_t v148 = v107;
            uint64_t v149 = v208;
            sub_100096408(v148, v208, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v150 = *(void *)(v106 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v149, 1, v106) == 1)
            {
              sub_1000966BC(v149, (uint64_t *)&unk_100909A40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              *((void *)&v217 + 1) = v106;
              uint64_t v218 = &protocol witness table for Date;
              id v151 = sub_1000C1FE8((uint64_t *)&v216);
              (*(void (**)(uint64_t *, uint64_t, uint64_t))(v150 + 32))(v151, v149, v106);
            }
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            CKRecordKeyValueSetting.subscript.setter();
            uint64_t v50 = v215;
            goto LABEL_13;
          case 12:
            id v108 = [v1 publicLinkLastModifiedDate];
            if (v108)
            {
              Class v109 = v108;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v110 = type metadata accessor for Date();
              (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v18, 0, 1, v110);
            }
            else
            {
              uint64_t v110 = type metadata accessor for Date();
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56))(v18, 1, 1, v110);
            }
            sub_100096408((uint64_t)v18, (uint64_t)v21, (uint64_t *)&unk_100909A40);
            type metadata accessor for Date();
            uint64_t v152 = *(void *)(v110 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v21, 1, v110) == 1)
            {
              sub_1000966BC((uint64_t)v21, (uint64_t *)&unk_100909A40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              *((void *)&v217 + 1) = v110;
              uint64_t v218 = &protocol witness table for Date;
              unint64_t v153 = sub_1000C1FE8((uint64_t *)&v216);
              (*(void (**)(uint64_t *, char *, uint64_t))(v152 + 32))(v153, v21, v110);
            }
LABEL_81:
            uint64_t v50 = v215;
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
            goto LABEL_12;
          case 13:
            [v47 encryptedValues];
            id v111 = [v1 publicLinkURLUUID];
            if (v111)
            {
              uint64_t v112 = v111;
              uint64_t v113 = v203;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v114 = 0;
            }
            else
            {
              uint64_t v114 = 1;
              uint64_t v113 = v203;
            }
            uint64_t v154 = v113;
            uint64_t v155 = (uint64_t)v113;
            uint64_t v156 = v211;
            (*v193)(v154, v114, 1, v211);
            uint64_t v157 = v155;
            uint64_t v158 = v209;
            sub_100096408(v157, v209, (uint64_t *)&unk_100909E50);
            if ((*v192)(v158, 1, v156))
            {
              sub_1000966BC(v158, (uint64_t *)&unk_100909E50);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              id v163 = v199;
              uint64_t v164 = v211;
              (*v177)(v199, v158, v211);
              sub_1000966BC(v158, (uint64_t *)&unk_100909E50);
              uint64_t v165 = UUID.uuidString.getter();
              uint64_t v167 = v166;
              (*v176)(v163, v164);
              *((void *)&v217 + 1) = &type metadata for String;
              uint64_t v218 = &protocol witness table for String;
              *(void *)&long long v216 = v165;
              *((void *)&v216 + 1) = v167;
              int v21 = v214;
            }
            uint64_t v47 = v198;
            swift_getObjectType();
            goto LABEL_97;
          case 14:
            id v115 = [v1 sectionIDsOrderingAsData];
            if (v115)
            {
              unint64_t v116 = v115;
              uint64_t v117 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v119 = v118;

              id v120 = self;
              sub_100097E38(v117, v119);
              Class v121 = Data._bridgeToObjectiveC()().super.isa;
              id v122 = [v120 assetForData:v121];

              uint64_t v18 = v210;
              CKRecord.subscript.setter();
              sub_100097F34(v117, v119);
              uint64_t v123 = v117;
              unint64_t v124 = v119;
              int v21 = v214;
              uint64_t v50 = v215;
              sub_100097F34(v123, v124);
            }
            else
            {
              CKRecord.subscript.setter();
            }
            goto LABEL_13;
          case 15:
            id v64 = [v1 sortingStyle];
            if (v64) {
              goto LABEL_46;
            }
            uint64_t v218 = 0;
            long long v216 = 0u;
            long long v217 = 0u;
            goto LABEL_87;
          case 16:
            [v47 encryptedValues:v174 v175];
            id v129 = [v1 sourceListIDURL];
            if (v129)
            {
              uint64_t v130 = v129;
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v131 = 0;
            }
            else
            {
              uint64_t v131 = 1;
            }
            unint64_t v159 = v212;
            uint64_t v160 = v196;
            (*v195)(v212, v131, 1, v196);
            uint64_t v161 = (uint64_t)v159;
            uint64_t v162 = v213;
            sub_100096408(v161, v213, (uint64_t *)&unk_100909E40);
            if ((*v194)(v162, 1, v160))
            {
              sub_1000966BC(v213, (uint64_t *)&unk_100909E40);
              long long v216 = 0u;
              long long v217 = 0u;
              uint64_t v218 = 0;
            }
            else
            {
              uint64_t v168 = v182;
              uint64_t v169 = v213;
              (*v179)(v182, v213, v160);
              sub_1000966BC(v169, (uint64_t *)&unk_100909E40);
              uint64_t v170 = URL.absoluteString.getter();
              uint64_t v172 = v171;
              (*v178)(v168, v160);
              *((void *)&v217 + 1) = &type metadata for String;
              uint64_t v218 = &protocol witness table for String;
              *(void *)&long long v216 = v170;
              *((void *)&v216 + 1) = v172;
              uint64_t v47 = v198;
              int v21 = v214;
            }
            uint64_t v18 = v210;
            swift_getObjectType();
LABEL_97:
            CKRecordKeyValueSetting.subscript.setter();
LABEL_98:
            swift_unknownObjectRelease();
            uint64_t v50 = v215;
            goto LABEL_13;
          default:
            id v64 = [v1 badgeEmblem];
            if (v64)
            {
LABEL_46:
              os_log_type_t v125 = v64;
              uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v128 = v127;

              *((void *)&v217 + 1) = &type metadata for String;
              uint64_t v218 = &protocol witness table for String;
              *(void *)&long long v216 = v126;
              *((void *)&v216 + 1) = v128;
              int v21 = v214;
              uint64_t v50 = v215;
            }
            else
            {
              uint64_t v218 = 0;
              long long v216 = 0u;
              long long v217 = 0u;
            }
LABEL_87:
            sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_12:
            CKRecordKeyValueSetting.subscript.setter();
LABEL_13:
            if (--v48) {
              continue;
            }
            goto LABEL_104;
        }
      }
    }
  }
  else
  {
    if (qword_100907148 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_10090FE60);
    id v52 = v1;
    id v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v216 = swift_slowAlloc();
      *(_DWORD *)uint64_t v55 = 136446210;
      id v56 = [v52 remObjectID];
      if (v56)
      {
        uint64_t v57 = v56;
        id v58 = [v56 description];

        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;
      }
      else
      {
        unint64_t v61 = 0xE300000000000000;
        uint64_t v59 = 7104878;
      }
      uint64_t v220 = sub_1000C51B8(v59, v61, (uint64_t *)&v216);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "REMCDTemplate will not be used to represent a public template, which is fetched from a template's public link, and is not expected to be shared, we shouldn't upload it for non-owner (templateID: %{public}s)", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v47 = 0;
  }
LABEL_104:
  id v173 = (objc_class *)v47;
  result.value.super.Class isa = v173;
  result.is_nil = v46;
  return result;
}

Swift::Void __swiftcall REMCDTemplate.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100907148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090FE60);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10090FE80);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void *REMCDTemplate.objectsToBeDeletedBeforeThisObject()()
{
  id v1 = [v0 savedReminders];
  if (v1)
  {
    uint64_t v2 = v1;
    type metadata accessor for REMCDSavedReminder();
    sub_10021122C(&qword_10090B668, (void (*)(uint64_t))type metadata accessor for REMCDSavedReminder);
    uint64_t v3 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v4 = sub_100209B4C(v3, (uint64_t)type metadata accessor for REMCDSavedReminder, (uint64_t)&qword_10090B668, (uint64_t)type metadata accessor for REMCDSavedReminder, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D384);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10020029C((unint64_t)v4, (void (*)(void))type metadata accessor for REMCDSavedReminder);
    swift_release();
    sub_100200B74(v5);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100209730(uint64_t a1)
{
  return sub_10020A17C(a1, &qword_10090F648, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_10020BBC0);
}

uint64_t *sub_100209750(unint64_t a1)
{
  return sub_10020B6E4(a1, (unint64_t *)&unk_100914440);
}

uint64_t *sub_100209764(unint64_t a1)
{
  return sub_10020B6E4(a1, &qword_100910180);
}

void *sub_100209778(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, &qword_10090FEB0, (unint64_t *)&unk_10090FEC0, &qword_10090FEB8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020989C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, (uint64_t *)&unk_10090B070, &qword_10090FF48, &qword_10090FF40, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1002099C0(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_10020EA48);
}

void *sub_1002099D8(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_10090FE00, (uint64_t)NSPersistentStore_ptr, (uint64_t)&qword_100910050, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_100209A08(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FFD8);
}

void *sub_100209A14(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090D2E0);
}

void *sub_100209A20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134(a2);
  int64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v2;
  v4[3] = 2 * (v6 >> 3);
  id v7 = sub_10020DFEC(&v9, v4 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_1000C1AF8();
  if (v7 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

void *sub_100209B04(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&type metadata accessor for REMObjectID_Codable, (uint64_t)&unk_1009110C0, (uint64_t)&type metadata accessor for REMObjectID_Codable, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D384);
}

void *sub_100209B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = __CocoaSet.count.getter();
    if (v10) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v10 <= 0)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v10;
    v11[3] = (2 * (v13 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = a5(&v16, v11 + 4, v10, a1, a2, a3, a4);
  CKRecord_optional result = (void *)sub_1000C1AF8();
  if (v14 == v10) {
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100209C78(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10020C0B0((uint64_t)&v8, v3 + 4, v2, a1);
  CKRecord_optional result = (void *)sub_1000C1AF8();
  if (v6 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_100209D74(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_10020F2C8);
}

void *sub_100209D8C(uint64_t a1)
{
  return sub_10020A2AC(a1, (uint64_t *)&unk_10090A490, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_10020C398, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100211580);
}

void *sub_100209DC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134(&qword_10090DC40);
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  CKRecord_optional result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      sub_10020C598(&v11, (char *)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      sub_1000C1AF8();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100209EF4(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, &qword_100913AA0, &qword_10090FED8, &qword_10090FED0, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020A018(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020F4E8((unint64_t)(v3 + 4), v2, v1, (void (*)(void))type metadata accessor for REMCDSavedReminder, &qword_10090FEA0, &qword_100921B80, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D5A4);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

uint64_t *sub_10020A148(unint64_t a1)
{
  return sub_10020B6E4(a1, &qword_10090ABC0);
}

void *sub_10020A15C(uint64_t a1)
{
  return sub_10020A17C(a1, &qword_1009101A0, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_10020C98C);
}

void *sub_10020A17C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134(a2);
  unint64_t v6 = (void *)swift_allocObject();
  size_t v7 = j__malloc_size(v6);
  v6[2] = v3;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 24);
  uint64_t v8 = a3(&v10, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_1000C1AF8();
  if (v8 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

void *sub_10020A278(uint64_t a1)
{
  return sub_10020A2AC(a1, &qword_10090F760, (uint64_t (*)(void *, void *, uint64_t, uint64_t))sub_10020CB90, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000C1AF8);
}

void *sub_10020A2AC(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void *, void *, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134(a2);
  uint64_t v8 = (void *)swift_allocObject();
  int64_t v9 = j__malloc_size(v8);
  uint64_t v10 = v9 - 32;
  if (v9 < 32) {
    uint64_t v10 = v9 - 17;
  }
  _OWORD v8[2] = v4;
  v8[3] = 2 * (v10 >> 4);
  uint64_t v11 = a3(v18, v8 + 4, v4, a1);
  uint64_t v12 = v18[0];
  uint64_t v13 = v18[1];
  uint64_t v14 = v18[2];
  uint64_t v15 = v18[3];
  uint64_t v16 = v18[4];
  swift_bridgeObjectRetain();
  a4(v12, v13, v14, v15, v16);
  if (v11 != v4)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v8;
}

void *sub_10020A3A0(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (uint64_t)&qword_10090A3C0, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020A3D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10020A8A4(a1, a2, a3, a4, &qword_100913750, (uint64_t (*)(void))&type metadata accessor for REMAccountsListDataView.Model.GroupChild);
}

void *sub_10020A3F0(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_10020F930);
}

void *sub_10020A408(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FFB8);
}

void *sub_10020A414(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF10);
}

void *sub_10020A424(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020F70C((unint64_t)(v3 + 4), v2, v1, (void (*)(void))type metadata accessor for DueDateNonVerifiableAlarm, &qword_100910268, &qword_100910260, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020A554(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020F70C((unint64_t)(v3 + 4), v2, v1, (void (*)(void))type metadata accessor for DueDateVerifiableAlarm, &qword_100910258, &qword_100910250, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020A684(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910018);
}

void *sub_10020A690(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_10020E1E8((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000C1AF8();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t *sub_10020A778(unint64_t a1)
{
  return sub_10020B6E4(a1, &qword_10090DC80);
}

void *sub_10020A78C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_10020CD94(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000C1AF8();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_10020A878(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF38);
}

void *sub_10020A884(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10020A8A4(a1, a2, a3, a4, &qword_10090DC40, (uint64_t (*)(void))&type metadata accessor for UUID);
}

void *sub_10020A8A4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_21;
  }
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  if (v7 <= 0)
  {
    uint64_t v14 = _swiftEmptyArrayStorage;
    if (v6 != a3)
    {
LABEL_10:
      if (v7 < 0) {
        goto LABEL_24;
      }
      uint64_t v17 = *(void *)(a6(0) - 8);
      uint64_t v18 = (char *)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      uint64_t v19 = *(void *)(v17 + 72);
      unint64_t v20 = a2 + v19 * a3;
      uint64_t v21 = v19 * v7;
      uint64_t v22 = &v18[v21];
      unint64_t v23 = v20 + v21;
      if (v20 < (unint64_t)v22 && (unint64_t)v18 < v23) {
        goto LABEL_24;
      }
      swift_arrayInitWithCopy();
      return v14;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  sub_100094134(a5);
  uint64_t v11 = *(void *)(a6(0) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (void *)swift_allocObject();
  size_t v15 = j__malloc_size(v14);
  if (v12)
  {
    if (v15 - v13 == 0x8000000000000000 && v12 == -1) {
      goto LABEL_23;
    }
    _OWORD v14[2] = v7;
    v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
    if (v6 != a3) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  CKRecord_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10020AAEC(uint64_t a1)
{
  return sub_10020BA24(a1, &qword_10090DC40, (uint64_t (*)(void))&type metadata accessor for UUID, sub_10020CF90);
}

void *sub_10020AB20(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      int64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090A490);
      int64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  CKRecord_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10020AC94(uint64_t a1)
{
  return sub_100209A20(a1, &qword_1009100F0);
}

void *sub_10020ACA0(uint64_t a1)
{
  return sub_100209A20(a1, &qword_1009100E8);
}

void *sub_10020ACAC(uint64_t a1)
{
  return sub_100209A20(a1, &qword_1009100E0);
}

void *sub_10020ACB8(uint64_t a1)
{
  return sub_100209A20(a1, &qword_1009100D8);
}

void *sub_10020ACC4(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_10020E828);
}

void *sub_10020ACDC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, &qword_10090FF50, (unint64_t *)&unk_10090FF60, &qword_10090FF58, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020AE00(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, &qword_100913A10, &qword_10090FF78, &qword_10090FF70, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020AF24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      int64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      int64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  CKRecord_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10020B0B8(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_10020E3E8((unint64_t)(v3 + 4), v2, v1, &qword_10090FF80, (unint64_t *)&unk_10090FF90, &qword_10090FF88, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_10032D678);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10020B1DC(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002103D0);
}

void *sub_10020B1F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_5:
        if (v5 < 0) {
          goto LABEL_17;
        }
        unint64_t v10 = a2 + 48 * a3;
        if (v10 < (unint64_t)&v8[6 * v5 + 4] && (unint64_t)(v8 + 4) < v10 + 48 * v5) {
          goto LABEL_17;
        }
        swift_arrayInitWithCopy();
        return v8;
      }
    }
    else
    {
      sub_100094134(&qword_10090F820);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      _OWORD v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 48);
      if (v4 != a3) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_17:
  CKRecord_optional result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10020B384(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_10020EE88);
}

void *sub_10020B39C(unint64_t a1)
{
  return sub_10020B3B4(a1, (void (*)(void *, uint64_t, unint64_t))sub_1002105F0);
}

void *sub_10020B3B4(unint64_t a1, void (*a2)(void *, uint64_t, unint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v4 <= 0)
    {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v5 = (void *)swift_allocObject();
      int64_t v6 = j__malloc_size(v5);
      uint64_t v7 = v6 - 32;
      if (v6 < 32) {
        uint64_t v7 = v6 - 25;
      }
      v5[2] = v4;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    a2(v5 + 4, v4, a1);
    a2 = v8;
    swift_bridgeObjectRelease();
    if (a2 == (void (*)(void *, uint64_t, unint64_t))v4) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v5;
}

void *sub_10020B4BC(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FFE0);
}

void *sub_10020B4C8(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FFE8);
}

void *sub_10020B4D4(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&unk_10090FFF0, (uint64_t)REMAssignment_ptr, (uint64_t)&qword_10090A410, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020B504(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910000);
}

void *sub_10020B510(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910008);
}

void *sub_10020B51C(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910010);
}

void *sub_10020B528(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_10090DC80, (uint64_t)REMHashtag_ptr, (uint64_t)&qword_10090B7C0, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020B558(uint64_t a1)
{
  return sub_100209A20(a1, (uint64_t *)&unk_100910020);
}

char *sub_10020B564(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return (char *)_swiftEmptyArrayStorage;
    }
    uint64_t v8 = 8 * v5;
    if (v5 <= 0)
    {
      size_t v9 = (char *)_swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = v9 + 32;
        unint64_t v13 = (char *)(a2 + 8 * a3);
        if (v13 < &v9[v8 + 32] && v12 < &v13[v8]) {
          goto LABEL_19;
        }
        memcpy(v12, v13, 8 * v5);
        return v9;
      }
    }
    else
    {
      sub_100094134(&qword_100910200);
      size_t v9 = (char *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      *((void *)v9 + 2) = v5;
      *((void *)v9 + 3) = 2 * (v11 >> 3);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  CKRecord_optional result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_10020B6D0(unint64_t a1)
{
  return sub_10020B6E4(a1, (unint64_t *)&unk_1009102A0);
}

uint64_t *sub_10020B6E4(unint64_t a1, unint64_t *a2)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaDictionary.count.getter();
    if (v4) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v4 <= 0)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v5 = (uint64_t *)swift_allocObject();
    int64_t v6 = j__malloc_size(v5);
    uint64_t v7 = v6 - 32;
    if (v6 < 32) {
      uint64_t v7 = v6 - 25;
    }
    v5[2] = v4;
    v5[3] = (2 * (v7 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_10020BDC8((uint64_t)&v10, v5 + 4, v4, a1, a2);
  CKRecord_optional result = (uint64_t *)sub_1000C1AF8();
  if (v8 == v4) {
    return v5;
  }
  __break(1u);
  return result;
}

void *sub_10020B7F8(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_10090B040, (uint64_t)off_1008AA488, (uint64_t)&qword_100914B80, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020B828(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_10090DC20, (uint64_t)off_1008AA448, (uint64_t)&qword_10090BFA0, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020B858(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)&qword_100910230, (uint64_t)off_1008AA410, (uint64_t)&unk_100914B70, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D690);
}

void *sub_10020B888(uint64_t a1)
{
  return sub_100209B4C(a1, (uint64_t)type metadata accessor for REMCDSavedAttachment, (uint64_t)&unk_100910220, (uint64_t)type metadata accessor for REMCDSavedAttachment, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10020D384);
}

void *sub_10020B8D0(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF18);
}

void *sub_10020B8DC(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910058);
}

void *sub_10020B8E8(uint64_t a1)
{
  return sub_100209A20(a1, (uint64_t *)&unk_100910060);
}

uint64_t *sub_10020B8F4(unint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaDictionary.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v3 = (uint64_t *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10020D98C((uint64_t)&v8, v3 + 4, v2, a1);
  CKRecord_optional result = (uint64_t *)sub_1000C1AF8();
  if (v6 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_10020B9F0(uint64_t a1)
{
  return sub_10020BA24(a1, (uint64_t *)&unk_10090FEE0, (uint64_t (*)(void))type metadata accessor for RDPermanentlyHiddenReminder, (uint64_t (*)(uint64_t *, char *, uint64_t, uint64_t))sub_10020DC5C);
}

void *sub_10020BA24(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t *, char *, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  sub_100094134(a2);
  uint64_t v8 = *(void *)(a3(0) - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (void *)swift_allocObject();
  CKRecord_optional result = (void *)j__malloc_size(v11);
  if (v9)
  {
    if ((void *)((char *)result - v10) != (void *)0x8000000000000000 || v9 != -1)
    {
      v11[2] = v4;
      v11[3] = 2 * ((uint64_t)((uint64_t)result - v10) / v9);
      swift_bridgeObjectRetain();
      uint64_t v14 = a4(&v15, (char *)v11 + v10, v4, a1);
      sub_1000C1AF8();
      if (v14 == v4) {
        return v11;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10020BB6C(uint64_t a1)
{
  return sub_100209A20(a1, &qword_100910208);
}

void *sub_10020BB78(uint64_t a1)
{
  return sub_100209A20(a1, (uint64_t *)&unk_10090FEF0);
}

void *sub_10020BB84(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF20);
}

void *sub_10020BB90(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF28);
}

void *sub_10020BB9C(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FF30);
}

void *sub_10020BBA8(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090D2D8);
}

void *sub_10020BBB4(uint64_t a1)
{
  return sub_100209A20(a1, &qword_10090FFB0);
}

uint64_t sub_10020BBC0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    uint64_t v22 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *v20;
    v11[1] = v21;
    v11[2] = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 3;
    CKRecord_optional result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10020BDC8(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  unint64_t v5 = a4;
  uint64_t v7 = a2;
  uint64_t v8 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    CKRecord_optional result = __CocoaDictionary.makeIterator()();
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v5 = result | 0x8000000000000000;
    if (v7) {
      goto LABEL_3;
    }
LABEL_36:
    int64_t v12 = 0;
    a3 = 0;
LABEL_45:
    *uint64_t v8 = v5;
    v8[1] = v9;
    _OWORD v8[2] = v10;
    v8[3] = v12;
    v8[4] = v11;
    return a3;
  }
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v9 = a4 + 64;
  uint64_t v21 = ~v20;
  uint64_t v22 = -v20;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v11 = v23 & *(void *)(a4 + 64);
  uint64_t v10 = v21;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_45;
  }
  if (a3 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v24 = v10;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v25 = (unint64_t)(v10 + 64) >> 6;
  while ((v5 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()())
    {
      a3 = v13;
LABEL_44:
      uint64_t v10 = v24;
      goto LABEL_45;
    }
    swift_unknownObjectRelease();
    sub_1000963CC(0, a5);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v16 = v27;
    CKRecord_optional result = swift_unknownObjectRelease();
    if (!v27) {
      goto LABEL_43;
    }
LABEL_8:
    ++v13;
    *v7++ = v16;
    if (v13 == a3) {
      goto LABEL_44;
    }
  }
  if (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v12 << 6);
    goto LABEL_7;
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v17 >= v25) {
    goto LABEL_39;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v17);
  if (v18) {
    goto LABEL_23;
  }
  v12 += 2;
  if (v17 + 1 >= v25)
  {
    unint64_t v11 = 0;
    int64_t v12 = v17;
    goto LABEL_43;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v12);
  if (v18)
  {
LABEL_16:
    int64_t v17 = v12;
LABEL_23:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
LABEL_7:
    CKRecord_optional result = (uint64_t)*(id *)(*(void *)(v5 + 56) + 8 * v15);
    uint64_t v16 = result;
    if (!result) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v25) {
    goto LABEL_39;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18)
  {
LABEL_22:
    int64_t v17 = v19;
    goto LABEL_23;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v25)
  {
    unint64_t v11 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_43;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v12);
  if (v18) {
    goto LABEL_16;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v25)
  {
LABEL_39:
    unint64_t v11 = 0;
LABEL_43:
    a3 = v13;
    goto LABEL_44;
  }
  unint64_t v18 = *(void *)(v9 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v25)
    {
      unint64_t v11 = 0;
      int64_t v12 = v25 - 1;
      goto LABEL_43;
    }
    unint64_t v18 = *(void *)(v9 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

void *sub_10020C094(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10020D690(a1, a2, a3, a4, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (unint64_t *)&qword_10090A3C0);
}

uint64_t sub_10020C0B0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_100094134((uint64_t *)&unk_10090B070);
    CKRecord_optional result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    uint64_t v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    *uint64_t v24 = v4;
    v24[1] = v8;
    _OWORD v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  uint64_t v24 = (void *)result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      swift_unknownObjectRetain();
      sub_100094134((uint64_t *)&unk_10090B070);
      swift_dynamicCast();
      uint64_t v15 = v26;
      CKRecord_optional result = swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t v15 = *(void *)(*(void *)(v4 + 48) + 8 * v14);
    CKRecord_optional result = swift_retain();
    if (!v15) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_10020C398(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    CKRecord_optional result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_10020C598(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v11 - 8);
  __n128 v12 = __chkstk_darwin(v11);
  uint64_t v41 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a4;
  uint64_t v15 = a4 + 64;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
  if (-v33 < 64) {
    uint64_t v16 = ~(-1 << -(char)v33);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
LABEL_39:
    uint64_t v29 = ~v33;
    *a1 = v43;
    a1[1] = v15;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v37 = a3;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v41;
  uint64_t v39 = v42 + 16;
  unint64_t v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v42 + 56);
  uint64_t v38 = v42 + 48;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v42 + 32);
  uint64_t v34 = v15;
  int64_t v35 = (unint64_t)(63 - v33) >> 6;
  int64_t v31 = v35 - 1;
  uint64_t v32 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v22 = v21 | (v18 << 6);
  while (1)
  {
    uint64_t v26 = v42;
    uint64_t v27 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v42 + 16))(v10, *(void *)(v43 + 48) + v27 * v22, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v34;
      goto LABEL_38;
    }
    ++v19;
    uint64_t v28 = *v36;
    (*v36)(v20, v10, v11);
    v28(a2, v20, v11);
    if (v19 == v37)
    {
      a1 = v32;
      uint64_t v15 = v34;
      goto LABEL_39;
    }
    a2 += v27;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v34;
    if (v23 >= v35) {
      goto LABEL_37;
    }
    unint64_t v24 = *(void *)(v34 + 8 * v23);
    if (!v24)
    {
      int64_t v25 = v18 + 2;
      ++v18;
      if (v23 + 1 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v25);
      if (v24) {
        goto LABEL_14;
      }
      int64_t v18 = v23 + 1;
      if (v23 + 2 >= v35) {
        goto LABEL_37;
      }
      unint64_t v24 = *(void *)(v34 + 8 * (v23 + 2));
      if (v24)
      {
        v23 += 2;
      }
      else
      {
        int64_t v18 = v23 + 2;
        if (v23 + 3 >= v35) {
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v34 + 8 * (v23 + 3));
        if (!v24)
        {
          int64_t v25 = v23 + 4;
          int64_t v18 = v23 + 3;
          if (v23 + 4 < v35)
          {
            unint64_t v24 = *(void *)(v34 + 8 * v25);
            if (!v24)
            {
              while (1)
              {
                int64_t v23 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v23 >= v35)
                {
                  int64_t v18 = v31;
                  goto LABEL_37;
                }
                unint64_t v24 = *(void *)(v34 + 8 * v23);
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v23 = v25;
            goto LABEL_21;
          }
LABEL_37:
          (*v40)(v10, 1, 1, v11, v12);
          unint64_t v17 = 0;
LABEL_38:
          sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
          a1 = v32;
          goto LABEL_39;
        }
        v23 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v18 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
}

uint64_t sub_10020C98C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    ++v13;
    *(_OWORD *)uint64_t v11 = *(_OWORD *)(*(void *)(a4 + 48) + 16 * v16);
    *(void *)(v11 + 16) = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    CKRecord_optional result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10020CB90(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    *uint64_t v11 = *(void *)(*(void *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    CKRecord_optional result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_10020CD94(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    CKRecord_optional result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10020CF90(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  unint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  int64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  int64_t v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  int64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    uint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_10020D384(void *result, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  int64_t v30 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    a5(0);
    sub_10021122C(a6, a7);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v34;
    uint64_t v13 = v35;
    uint64_t v14 = v36;
    int64_t v15 = v37;
    unint64_t v16 = v38;
    if (v9) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v17 = 0;
    goto LABEL_38;
  }
  int64_t v15 = 0;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v13 = a4 + 56;
  uint64_t v14 = ~v25;
  uint64_t v26 = -v25;
  if (v26 < 64) {
    uint64_t v27 = ~(-1 << v26);
  }
  else {
    uint64_t v27 = -1;
  }
  unint64_t v16 = v27 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v17 = 0;
LABEL_38:
    uint64_t v28 = v30;
LABEL_41:
    *uint64_t v28 = v7;
    v28[1] = v13;
    v28[2] = v14;
    v28[3] = v15;
    v28[4] = v16;
    return (void *)v17;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v17 = 0;
  int64_t v31 = (unint64_t)(v14 + 64) >> 6;
  uint64_t v29 = v14;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      a5(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v20 = v33;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v33) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_7;
    }
    int64_t v21 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v21 >= v31)
    {
      unint64_t v16 = 0;
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v21);
    if (v22) {
      goto LABEL_23;
    }
    int64_t v23 = v15 + 2;
    if (v15 + 2 >= v31)
    {
      unint64_t v16 = 0;
      ++v15;
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v23);
    if (!v22)
    {
      if (v15 + 3 >= v31) {
        goto LABEL_44;
      }
      unint64_t v22 = *(void *)(v13 + 8 * (v15 + 3));
      if (v22)
      {
        int64_t v21 = v15 + 3;
        goto LABEL_23;
      }
      int64_t v23 = v15 + 4;
      if (v15 + 4 >= v31)
      {
        unint64_t v16 = 0;
        v15 += 3;
        goto LABEL_40;
      }
      unint64_t v22 = *(void *)(v13 + 8 * v23);
      if (!v22)
      {
        int64_t v21 = v15 + 5;
        if (v15 + 5 >= v31)
        {
LABEL_44:
          unint64_t v16 = 0;
          int64_t v15 = v23;
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(v13 + 8 * v21);
        if (!v22)
        {
          int64_t v24 = v15 + 6;
          while (v31 != v24)
          {
            unint64_t v22 = *(void *)(v13 + 8 * v24++);
            if (v22)
            {
              int64_t v21 = v24 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v16 = 0;
          int64_t v15 = v31 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v21 = v23;
LABEL_23:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v21 << 6);
    int64_t v15 = v21;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v19);
    id v20 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v17;
    *v9++ = v20;
    if (v17 == a3)
    {
      uint64_t v17 = a3;
LABEL_40:
      uint64_t v14 = v29;
      uint64_t v28 = v30;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *sub_10020D690(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  uint64_t v9 = a2;
  uint64_t v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_1000963CC(0, a5);
    sub_1000ED098(a7, a5);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v33;
    uint64_t v12 = v34;
    uint64_t v13 = v35;
    int64_t v14 = v36;
    unint64_t v15 = v37;
    if (v9) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v16 = 0;
    goto LABEL_38;
  }
  int64_t v14 = 0;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v12 = a4 + 56;
  uint64_t v13 = ~v24;
  uint64_t v25 = -v24;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v15 = v26 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v16 = 0;
LABEL_38:
    uint64_t v27 = v29;
LABEL_41:
    *uint64_t v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    uint64_t v27[3] = v14;
    v27[4] = v15;
    return (void *)v16;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v16 = 0;
  int64_t v30 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_1000963CC(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v19 = v32;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v32) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v20 >= v30)
    {
      unint64_t v15 = 0;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    if (v21) {
      goto LABEL_23;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      unint64_t v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30) {
        goto LABEL_44;
      }
      unint64_t v21 = *(void *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        int64_t v20 = v14 + 3;
        goto LABEL_23;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        unint64_t v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          unint64_t v15 = 0;
          int64_t v14 = v22;
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v20);
        if (!v21)
        {
          int64_t v23 = v14 + 6;
          while (v30 != v23)
          {
            unint64_t v21 = *(void *)(v12 + 8 * v23++);
            if (v21)
            {
              int64_t v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v15 = 0;
          int64_t v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v20 = v22;
LABEL_23:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    id v19 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      uint64_t v16 = a3;
LABEL_40:
      uint64_t v13 = v28;
      uint64_t v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_10020D98C(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaDictionary.makeIterator()();
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v4 = result | 0x8000000000000000;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    int64_t v11 = 0;
    a3 = 0;
LABEL_45:
    *uint64_t v7 = v4;
    v7[1] = v8;
    void v7[2] = v9;
    v7[3] = v11;
    v7[4] = v10;
    return a3;
  }
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = a4 + 64;
  uint64_t v20 = ~v19;
  uint64_t v21 = -v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v10 = v22 & *(void *)(a4 + 64);
  uint64_t v9 = v20;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_45;
  }
  if (a3 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v23 = v9;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.nextKey()())
    {
      a3 = v12;
LABEL_44:
      uint64_t v9 = v23;
      goto LABEL_45;
    }
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v25;
    uint64_t result = swift_unknownObjectRelease();
    if (!v25) {
      goto LABEL_43;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3) {
      goto LABEL_44;
    }
  }
  if (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v11 << 6);
    goto LABEL_7;
  }
  int64_t v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_47;
  }
  if (v16 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v16);
  if (v17) {
    goto LABEL_23;
  }
  v11 += 2;
  if (v16 + 1 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17)
  {
LABEL_16:
    int64_t v16 = v11;
LABEL_23:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
LABEL_7:
    uint64_t result = (uint64_t)*(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v24) {
    goto LABEL_39;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_22:
    int64_t v16 = v18;
    goto LABEL_23;
  }
  int64_t v11 = v16 + 3;
  if (v16 + 3 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16 + 2;
    goto LABEL_43;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v24)
  {
LABEL_39:
    unint64_t v10 = 0;
LABEL_43:
    a3 = v12;
    goto LABEL_44;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v24)
    {
      unint64_t v10 = 0;
      int64_t v11 = v24 - 1;
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

void sub_10020DC5C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100914280);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RDPermanentlyHiddenReminder();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a4;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v17 = a4 + 56;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 24);
  uint64_t v34 = a1;
  uint64_t v35 = v19;
  uint64_t v20 = -v19;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  else {
    uint64_t v21 = -1;
  }
  unint64_t v22 = v21 & v16;
  if (!a2)
  {
    int64_t v23 = 0;
LABEL_38:
    int64_t v31 = v34;
    uint64_t v32 = ~v35;
    void *v34 = v40;
    v31[1] = v17;
    id v31[2] = v32;
    v31[3] = v23;
    v31[4] = v22;
    return;
  }
  if (!a3)
  {
    int64_t v23 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v37 = a3;
  int64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v38 = v12 + 48;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v12 + 56);
  int64_t v36 = (unint64_t)(63 - v35) >> 6;
  int64_t v33 = v36 - 1;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v25 = __clz(__rbit64(v22));
  v22 &= v22 - 1;
  unint64_t v26 = v25 | (v23 << 6);
  while (1)
  {
    uint64_t v30 = *(void *)(v12 + 72);
    sub_100128070(*(void *)(v40 + 48) + v30 * v26, (uint64_t)v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
      goto LABEL_37;
    }
    ++v24;
    sub_1001280D4((uint64_t)v10, (uint64_t)v15);
    sub_1001280D4((uint64_t)v15, a2);
    if (v24 == v37) {
      goto LABEL_38;
    }
    a2 += v30;
    if (v22) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v27 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v27 >= v36) {
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v17 + 8 * v27);
    if (!v28) {
      break;
    }
LABEL_21:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v27 << 6);
    int64_t v23 = v27;
  }
  int64_t v29 = v23 + 2;
  ++v23;
  if (v27 + 1 >= v36) {
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v17 + 8 * v29);
  if (v28) {
    goto LABEL_14;
  }
  int64_t v23 = v27 + 1;
  if (v27 + 2 >= v36) {
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v17 + 8 * (v27 + 2));
  if (v28)
  {
    v27 += 2;
    goto LABEL_21;
  }
  int64_t v23 = v27 + 2;
  if (v27 + 3 >= v36) {
    goto LABEL_36;
  }
  unint64_t v28 = *(void *)(v17 + 8 * (v27 + 3));
  if (v28)
  {
    v27 += 3;
    goto LABEL_21;
  }
  int64_t v29 = v27 + 4;
  int64_t v23 = v27 + 3;
  if (v27 + 4 >= v36)
  {
LABEL_36:
    (*v39)(v10, 1, 1, v11, v13);
    unint64_t v22 = 0;
LABEL_37:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100914280);
    goto LABEL_38;
  }
  unint64_t v28 = *(void *)(v17 + 8 * v29);
  if (v28)
  {
LABEL_14:
    int64_t v27 = v29;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v27 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v27 >= v36)
    {
      int64_t v23 = v33;
      goto LABEL_36;
    }
    unint64_t v28 = *(void *)(v17 + 8 * v27);
    ++v29;
    if (v28) {
      goto LABEL_21;
    }
  }
LABEL_41:
  __break(1u);
}

void *sub_10020DFEC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10020E1E8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10020E3E8(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_1000B2138(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_100094134(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    sub_100094134(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020E608(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_1009100A0, (uint64_t *)&unk_100910090);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134((uint64_t *)&unk_100910090);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020E828(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_10090FFA0, &qword_10090E178);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_10090E178);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020EA48(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_100910080, &qword_10090D750);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_10090D750);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020EC68(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_100910150, &qword_100910140);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_100910140);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_100910148);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020EE88(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_1009100B8, &qword_1009100B0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_1009100B0);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020F0A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_100910168, &qword_100910160);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_100910160);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020F2C8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_100910078, &qword_100910070);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_100910070);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_10090ABC0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020F4E8(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_1000B2138(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_100094134(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          id v24 = *v23;
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020F70C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_1000B2138(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_100094134(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020F930(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_10090FFD0, (uint64_t *)&unk_10090FFC0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134((uint64_t *)&unk_10090FFC0);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&unk_100920C30);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020FB50(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_10090FF08, &qword_10090FF00);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_10090FF00);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020FD70(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_100910108, &qword_100910100);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_100910100);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_1009100F8);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10020FF90(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_100910118, &qword_10090DCA0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_10090DCA0);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090DC20);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002101B0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_100910130, (uint64_t *)&unk_100910120);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134((uint64_t *)&unk_100910120);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_100914BE0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002103D0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_1009100D0, &qword_1009100C8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_1009100C8);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_1009100C0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002105F0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_1009101F8, &qword_1009101F0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_1009101F0);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_100910180);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100210810(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138(&qword_1009101D8, &qword_1009101D0);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_1009101D0);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100094134(&qword_1009148E0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100210A24(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000B2138((unint64_t *)&unk_100910290, &qword_100910288);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100094134(&qword_100910288);
          int64_t v12 = sub_10032D5A4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1000963CC(0, &qword_100910280);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100210C44(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSOrderedSet.makeIterator()();

  if (!a2 || !a3)
  {
LABEL_9:
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v10, v7);
    return;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_10021122C((unint64_t *)&qword_100910238, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    if (v13)
    {
      uint64_t v11 = 0;
      do
      {
        sub_10009A1A0(&v12, v14);
        sub_10009A1A0(v14, a2);
        if (a3 - 1 == v11) {
          goto LABEL_9;
        }
        a2 += 2;
        dispatch thunk of IteratorProtocol.next()();
        ++v11;
      }
      while (v13);
    }
    sub_1000966BC((uint64_t)&v12, &qword_100908190);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v10, v7);
  }
}

uint64_t sub_100210E48()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

uint64_t _s7remindd13REMCDTemplateC26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100907148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090FE60);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10090FE80);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _s7remindd13REMCDTemplateC5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100907148 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_10090FE60);
  id v2 = v0;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134((uint64_t *)&unk_10090FE80);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t sub_10021122C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s6FieldsOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s6FieldsOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002113D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *_s6FieldsOMa_0()
{
  return &_s6FieldsON_0;
}

unint64_t sub_100211408(uint64_t a1)
{
  unint64_t result = sub_100211430();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100211430()
{
  unint64_t result = qword_1009102B8;
  if (!qword_1009102B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009102B8);
  }
  return result;
}

unint64_t sub_100211484(uint64_t a1)
{
  unint64_t result = sub_1002114AC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1002114AC()
{
  unint64_t result = qword_1009102C0;
  if (!qword_1009102C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009102C0);
  }
  return result;
}

uint64_t sub_100211500()
{
  return sub_1000B2138(&qword_1009102C8, &qword_1009102D0);
}

unint64_t sub_10021152C()
{
  unint64_t result = qword_1009102D8;
  if (!qword_1009102D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009102D8);
  }
  return result;
}

uint64_t sub_100211584()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009102E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009102E0);
  if (qword_1009077E8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942400);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10021164C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v140 = a5;
  uint64_t v141 = a7;
  uint64_t v131 = a6;
  uint64_t v139 = a4;
  id v137 = a3;
  uint64_t v126 = a2;
  unint64_t v124 = *(void (**)(char *, uint64_t))v7;
  uint64_t v9 = sub_100094134((uint64_t *)&unk_10090F3C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v130 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for REMTitleEmbeddingConfig();
  uint64_t v135 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  long long v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  os_log_type_t v125 = (char *)&v118 - v14;
  uint64_t v133 = type metadata accessor for URL();
  uint64_t v128 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v127 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v118 - v17;
  __chkstk_darwin(v19);
  unint64_t v136 = (char *)&v118 - v20;
  uint64_t v21 = type metadata accessor for SymmetricKeySize();
  __chkstk_darwin(v21 - 8);
  uint64_t v22 = sub_100094134(&qword_100910410);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SymmetricKey();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  unint64_t v28 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v7 + 16) = a1;
  uint64_t v134 = v7;
  uint64_t v29 = v7 + 24;
  uint64_t v31 = v30;
  sub_10010B4E8(v126, v29);
  sub_1000BF710(v139, (uint64_t)v24, &qword_100910410);
  int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v31);
  id v132 = a1;
  unint64_t v118 = v12;
  uint64_t v123 = (void *)v26;
  if (v32 == 1)
  {
    id v33 = a1;
    static SymmetricKeySize.bits128.getter();
    SymmetricKey.init(size:)();
    sub_1000966BC((uint64_t)v24, &qword_100910410);
    uint64_t v34 = *(void (**)(void))(v26 + 32);
  }
  else
  {
    uint64_t v34 = *(void (**)(void))(v26 + 32);
    ((void (*)(char *, char *, uint64_t))v34)(v28, v24, v31);
    id v35 = a1;
  }
  uint64_t v36 = v134;
  uint64_t v126 = v134 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_salt;
  v34();
  uint64_t v37 = v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
  uint64_t v38 = type metadata accessor for TimeZone();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16);
  uint64_t v122 = v37;
  v40(v37, v140, v38);
  id v41 = v137;
  uint64_t v120 = OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options;
  *(void *)(v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options) = v137;
  uint64_t v121 = v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL;
  sub_1000BF710(v141, v36 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t *)&unk_100909E40);
  sub_1000963CC(0, (unint64_t *)&qword_10090F3A0);
  uint64_t v119 = v31;
  id v137 = v41;
  static REMPaths.mlModelURL()();
  static REMTitleEmbeddingConfig.configFileName.getter();
  uint64_t v42 = v136;
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v43 = v128;
  uint64_t v45 = v128 + 8;
  NSString v44 = *(void (**)(char *, uint64_t))(v128 + 8);
  Swift::Bool v46 = v18;
  uint64_t v47 = v133;
  v44(v46, v133);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v127, v42, v47);
  uint64_t v49 = v129;
  id v48 = v130;
  REMTitleEmbeddingConfig.init(url:)();
  if (v49)
  {
    swift_errorRelease();
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v135 + 56))(v48, 1, 1, v138);
    sub_1000966BC((uint64_t)v48, (uint64_t *)&unk_10090F3C0);
    uint64_t v50 = self;
    NSString v51 = String._bridgeToObjectiveC()();
    [v50 internalErrorWithDebugDescription:v51, v118];

    swift_willThrow();
    sub_1000966BC(v141, (uint64_t *)&unk_100909E40);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
    id v52 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v52(v140, v38);
    sub_1000966BC(v139, &qword_100910410);
    v44(v42, v47);

    sub_10012227C(*(void *)(v36 + 24), *(void *)(v36 + 32), *(void *)(v36 + 40), *(void *)(v36 + 48), *(void *)(v36 + 56), *(unsigned int *)(v36 + 64) | ((unint64_t)*(unsigned __int16 *)(v36 + 68) << 32));
    ((void (*)(uint64_t, uint64_t))v123[1])(v126, v119);
    v52(v122, v38);

    sub_1000966BC(v121, (uint64_t *)&unk_100909E40);
    swift_deallocPartialClassInstance();
    return v36;
  }
  else
  {
    uint64_t v129 = 0;
    unint64_t v124 = v44;
    uint64_t v126 = v45;
    uint64_t v128 = v39;
    uint64_t v54 = v135;
    id v55 = v48;
    id v56 = v48;
    uint64_t v57 = v138;
    (*(void (**)(id, void, uint64_t, uint64_t))(v135 + 56))(v55, 0, 1, v138);
    (*(void (**)(char *, id, uint64_t))(v54 + 32))(v125, v56, v57);
    REMTitleEmbeddingConfig.majorLanguage.getter();
    id v58 = (char *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v59 = v137;
    unsigned int v60 = [v137 includeReminderTitleCategorySentence2Vec];
    uint64_t v127 = (char *)v38;
    uint64_t v130 = v58;
    if (v60)
    {
      uint64_t v61 = type metadata accessor for REMSentence2VecTitleEmbedding();
      swift_allocObject();
      id v62 = v58;
      uint64_t v63 = v129;
      uint64_t v64 = REMSentence2VecTitleEmbedding.init(lang:)();
      uint64_t v65 = v140;
      uint64_t v66 = v128;
      if (v63)
      {
        swift_errorRelease();
        if (qword_100907150 != -1) {
          swift_once();
        }
        uint64_t v67 = type metadata accessor for Logger();
        sub_10008E2DC(v67, (uint64_t)qword_1009102E0);
        uint64_t v68 = v62;
        id v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v142 = swift_slowAlloc();
          *(_DWORD *)uint64_t v71 = 136315138;
          uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = sub_1000C51B8(v72, v73, (uint64_t *)&v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "DES recipe has includeReminderTitleCategorySentence2Vec = true, but failed initializing embedding for {lang: %s}", v71, 0xCu);
          swift_arrayDestroy();
          uint64_t v65 = v140;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v129 = 0;
        NSString v74 = _swiftEmptyArrayStorage;
        uint64_t v42 = v136;
        uint64_t v38 = (uint64_t)v127;
        uint64_t v66 = v128;
      }
      else
      {
        uint64_t v75 = v64;
        uint64_t v129 = 0;
        swift_retain();
        uint64_t v76 = sub_10030AC24(0, 1, 1, _swiftEmptyArrayStorage);
        unint64_t v78 = v76[2];
        unint64_t v77 = v76[3];
        uint64_t v79 = v76;
        if (v78 >= v77 >> 1) {
          uint64_t v79 = sub_10030AC24((void *)(v77 > 1), v78 + 1, 1, v76);
        }
        uint64_t v143 = v61;
        uint64_t v144 = &protocol witness table for REMSentence2VecTitleEmbedding;
        *(void *)&long long v142 = v75;
        v79[2] = v78 + 1;
        NSString v74 = v79;
        sub_1000967D4(&v142, (uint64_t)&v79[5 * v78 + 4]);
        swift_release();
        uint64_t v42 = v136;
        uint64_t v38 = (uint64_t)v127;
      }
      id v59 = v137;
    }
    else
    {
      NSString v74 = _swiftEmptyArrayStorage;
      uint64_t v65 = v140;
      uint64_t v66 = v128;
    }
    if (objc_msgSend(v59, "includeReminderTitleCategoryUniversalGrammar", v118))
    {
      uint64_t v123 = v74;
      uint64_t v80 = type metadata accessor for REMUniversalGrammarTitleEmbedding();
      unint64_t v81 = v130;
      uint64_t v82 = v129;
      uint64_t v83 = REMUniversalGrammarTitleEmbedding.__allocating_init(lang:)();
      uint64_t v84 = v65;
      if (v82)
      {
        swift_errorRelease();
        uint64_t v85 = v135;
        if (qword_100907150 != -1) {
          swift_once();
        }
        uint64_t v86 = type metadata accessor for Logger();
        sub_10008E2DC(v86, (uint64_t)qword_1009102E0);
        uint64_t v87 = v81;
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v88, v89))
        {
          id v90 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v142 = swift_slowAlloc();
          *(_DWORD *)id v90 = 136315138;
          uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = sub_1000C51B8(v91, v92, (uint64_t *)&v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          uint64_t v85 = v135;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "DES recipe has includeReminderTitleCategoryUniversalGrammar = true, but failed initializing embedding for {lang: %s}", v90, 0xCu);
          swift_arrayDestroy();
          uint64_t v84 = v140;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v129 = 0;
        uint64_t v42 = v136;
        id v59 = v137;
        uint64_t v94 = v141;
        id v95 = v132;
        uint64_t v93 = v127;
        uint64_t v66 = v128;
        NSString v74 = v123;
      }
      else
      {
        uint64_t v96 = v83;
        uint64_t v129 = 0;
        swift_retain();
        id v97 = v123;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v85 = v135;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          id v97 = sub_10030AC24(0, v97[2] + 1, 1, v97);
        }
        unint64_t v100 = v97[2];
        unint64_t v99 = v97[3];
        id v101 = v97;
        if (v100 >= v99 >> 1) {
          id v101 = sub_10030AC24((void *)(v99 > 1), v100 + 1, 1, v97);
        }
        uint64_t v143 = v80;
        uint64_t v144 = &protocol witness table for REMUniversalGrammarTitleEmbedding;
        *(void *)&long long v142 = v96;
        v101[2] = v100 + 1;
        NSString v74 = v101;
        sub_1000967D4(&v142, (uint64_t)&v101[5 * v100 + 4]);
        swift_release();
        uint64_t v42 = v136;
        id v59 = v137;
        uint64_t v94 = v141;
        id v95 = v132;
        uint64_t v93 = v127;
      }
    }
    else
    {
      uint64_t v93 = (char *)v38;
      uint64_t v94 = v141;
      id v95 = v132;
      uint64_t v84 = v65;
      uint64_t v85 = v135;
    }
    if ([v59 includeReminderTitleCategoryFilteredStopWords])
    {
      uint64_t v102 = type metadata accessor for REMFilteredTitleEmbedding();
      (*(void (**)(char *, char *, uint64_t))(v85 + 16))(v118, v125, v138);
      uint64_t v103 = v129;
      uint64_t v104 = REMFilteredTitleEmbedding.__allocating_init(from:)();
      if (v103)
      {
        swift_errorRelease();
        if (qword_100907150 != -1) {
          swift_once();
        }
        uint64_t v105 = type metadata accessor for Logger();
        sub_10008E2DC(v105, (uint64_t)qword_1009102E0);
        uint64_t v106 = v130;
        uint64_t v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v107, v108))
        {
          uint64_t v109 = swift_slowAlloc();
          uint64_t v123 = v74;
          uint64_t v110 = (uint8_t *)v109;
          *(void *)&long long v142 = swift_slowAlloc();
          *(_DWORD *)uint64_t v110 = 136315138;
          uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v145 = sub_1000C51B8(v111, v112, (uint64_t *)&v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "DES recipe has includeReminderTitleCategoryFilteredStopWords = true, but failed initializing embedding for {lang: %s}", v110, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          NSString v74 = v123;
          swift_slowDealloc();

          sub_1000966BC(v141, (uint64_t *)&unk_100909E40);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
          (*(void (**)(uint64_t, char *))(v128 + 8))(v140, v127);
          sub_1000966BC(v139, &qword_100910410);
          (*(void (**)(char *, uint64_t))(v85 + 8))(v125, v138);
          uint64_t v113 = v136;
        }
        else
        {

          sub_1000966BC(v141, (uint64_t *)&unk_100909E40);
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
          (*(void (**)(uint64_t, char *))(v128 + 8))(v84, v127);
          sub_1000966BC(v139, &qword_100910410);
          (*(void (**)(char *, uint64_t))(v85 + 8))(v125, v138);
          uint64_t v113 = v42;
        }
        v124(v113, v133);
      }
      else
      {
        uint64_t v114 = v104;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          NSString v74 = sub_10030AC24(0, v74[2] + 1, 1, v74);
        }
        unint64_t v116 = v74[2];
        unint64_t v115 = v74[3];
        uint64_t v117 = v74;
        if (v116 >= v115 >> 1) {
          uint64_t v117 = sub_10030AC24((void *)(v115 > 1), v116 + 1, 1, v74);
        }
        uint64_t v143 = v102;
        uint64_t v144 = &protocol witness table for REMFilteredTitleEmbedding;
        *(void *)&long long v142 = v114;
        v117[2] = v116 + 1;
        NSString v74 = v117;
        sub_1000967D4(&v142, (uint64_t)&v117[5 * v116 + 4]);

        swift_release();
        sub_1000966BC(v141, (uint64_t *)&unk_100909E40);
        _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
        (*(void (**)(uint64_t, char *))(v66 + 8))(v84, v127);
        sub_1000966BC(v139, &qword_100910410);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v125, v138);
        v124(v136, v133);
      }
    }
    else
    {

      sub_1000966BC(v94, (uint64_t *)&unk_100909E40);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v131);
      (*(void (**)(uint64_t, char *))(v66 + 8))(v84, v93);
      sub_1000966BC(v139, &qword_100910410);
      (*(void (**)(char *, uint64_t))(v85 + 8))(v125, v138);
      v124(v42, v133);
    }
    uint64_t result = v134;
    *(void *)(v134
              + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings) = v74;
  }
  return result;
}

uint64_t sub_100212808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale();
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)&double v9 = __chkstk_darwin(v7).n128_u64[0];
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *(void **)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  unsigned int v13 = [v12 includeSystemLanguage:v9];
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  if (v13)
  {
    static Locale.current.getter();
    uint64_t v16 = Locale.languageCodeIdentifier.getter();
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    if (v18) {
      uint64_t v14 = v16;
    }
    else {
      uint64_t v14 = 0x6E776F6E6B6E753CLL;
    }
    if (v18) {
      unint64_t v15 = v18;
    }
    else {
      unint64_t v15 = 0xE90000000000003ELL;
    }
  }
  uint64_t v30 = v14;
  unsigned int v19 = [v12 includeSystemTimezone];
  if (v19)
  {
    uint64_t v20 = TimeZone.identifier.getter();
    uint64_t v22 = v21;
    Date.init()();
    uint64_t v23 = TimeZone.secondsFromGMT(for:)();
    uint64_t v24 = v6;
    uint64_t v25 = v20;
    (*(void (**)(char *, uint64_t))(v31 + 8))(v24, v32);
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v26 = v34;
  sub_10010B4E8(v2 + 24, (uint64_t)v33);
  uint64_t result = sub_1003B848C((uint64_t)v33, (uint64_t)sub_1002194F4, v2);
  if (v26)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = v30;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = v28;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v25;
    *(void *)(a1 + 32) = v22;
    *(void *)(a1 + 40) = v23;
    *(unsigned char *)(a1 + 48) = v19 ^ 1;
  }
  return result;
}

void sub_100212AA0(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (void *)sub_1003AD42C(3uLL, 0, 7);
  sub_1000963CC(0, &qword_10090ABC0);
  id v8 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v9 = [(id)swift_getObjCClassFromMetadata() entity];
  [v8 setEntity:v9];

  [v8 setAffectedStores:0];
  [v8 setPredicate:v7];
  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {
  }
  else
  {
    unint64_t v11 = v10;

    swift_retain();
    long long v12 = a1;
    unsigned int v13 = sub_10021BE8C(v11, a2, v12);
    swift_bridgeObjectRelease();

    swift_release();
    *a3 = v13;
  }
}

void sub_100212C0C(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  id v8 = *(void **)(v3 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  if ([v8 includeListNames]
    && (id v9 = [a1 name]) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v11;
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v31 = 0;
  }
  if ([v8 includeListNameFuzzedEmbeddings])
  {
    id v12 = [a1 name];
    if (v12)
    {
      unsigned int v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v16 = 0;
    }
    id v17 = sub_100212E54(v14, v16);
    uint64_t v29 = v19;
    uint64_t v30 = v18;
    uint64_t v28 = v20;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v17 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
  }
  if ([v8 includeListGroupInfo])
  {
    unsigned __int8 v21 = [a1 isShared];
    unsigned __int8 v22 = [a1 isGroup];
  }
  else
  {
    unsigned __int8 v22 = 2;
    unsigned __int8 v21 = 2;
  }
  uint64_t v23 = sub_1005390B4((uint64_t)a2, (uint64_t)[v8 creationDateWithinDays]);
  if (v32)
  {
    swift_bridgeObjectRelease();
    sub_10021C120((uint64_t)v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v24 = (unint64_t)v23;
    swift_retain();
    id v25 = a2;
    uint64_t v26 = sub_10021B960(v24, v4, (uint64_t)v25);
    swift_bridgeObjectRelease();
    swift_release();

    *(unsigned char *)a3 = v21;
    *(unsigned char *)(a3 + 1) = v22;
    *(void *)(a3 + 8) = v27;
    *(void *)(a3 + 16) = v31;
    *(void *)(a3 + 24) = v17;
    *(void *)(a3 + 32) = v30;
    *(void *)(a3 + 40) = v29;
    *(void *)(a3 + 48) = v28;
    *(void *)(a3 + 56) = v26;
  }
}

id sub_100212E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  if (a2)
  {
    id v41 = (char *)&v38 - v10;
    uint64_t v42 = v11;
    id v12 = self;
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v12 dominantLanguageForString:v13];

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;
      if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    NSString v22 = sub_100215EA0();
    if (!v22) {
      return 0;
    }
    id v14 = v22;
LABEL_14:
    uint64_t v39 = v8;
    uint64_t v40 = v2;
    id v43 = *(id *)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
    Swift::String v23 = String.lowercased()();
    sub_100094134(&qword_100914A70);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_100776E40;
    *(void *)(v24 + 32) = NLTagSchemeLexicalClass;
    id v25 = objc_allocWithZone((Class)NLTagger);
    type metadata accessor for NLTagScheme(0);
    uint64_t v26 = NLTagSchemeLexicalClass;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v28 = [v25 initWithTagSchemes:isa];

    NSString v29 = String._bridgeToObjectiveC()();
    [v28 setString:v29];

    uint64_t v30 = NLTagger.tags(in:unit:scheme:options:)();
    id v31 = v43;
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_10021ACD0(v30, v31, v23._countAndFlagsBits, (uint64_t)v23._object);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    if (v32[2])
    {
      sub_1000BF710(v40 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t)v6, (uint64_t *)&unk_100909E40);
      uint64_t v33 = v39;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v6, 1, v7) == 1)
      {
        sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909E40);
        id v21 = [self wordEmbeddingForLanguage:v14];
        if (v21)
        {
LABEL_17:
          uint64_t v34 = v21;
          id v21 = sub_10021B338((uint64_t)v32, v34);
          swift_bridgeObjectRelease();
          [v34 revision];
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          return v21;
        }
      }
      else
      {
        id v35 = v41;
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v41, v6, v7);
        sub_1000963CC(0, &qword_1009103E8);
        uint64_t v36 = v42;
        (*(void (**)(uint64_t, char *, uint64_t))(v33 + 16))(v42, v35, v7);
        id v21 = sub_100216014(v36);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v7);
        if (v21) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRelease();

      return v21;
    }
    swift_bridgeObjectRelease();

    return 0;
  }
  return 0;
}

id sub_1002133B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_100910400);
  __chkstk_darwin(v4 - 8);
  uint64_t v237 = (uint64_t)&v214 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v251 = type metadata accessor for Calendar.Component();
  uint64_t v250 = *(void *)(v251 - 8);
  __chkstk_darwin(v251);
  uint64_t v248 = (char *)&v214 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = type metadata accessor for Calendar();
  uint64_t v247 = *(void *)(v249 - 8);
  __chkstk_darwin(v249);
  Swift::String v246 = (char *)&v214 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  v236 = (char *)&v214 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  long long v235 = (char *)&v214 - v11;
  __chkstk_darwin(v12);
  uint64_t v230 = (char *)&v214 - v13;
  __chkstk_darwin(v14);
  unint64_t v239 = (char *)&v214 - v15;
  __chkstk_darwin(v16);
  uint64_t v229 = (char *)&v214 - v17;
  __chkstk_darwin(v18);
  uint64_t v228 = (char *)&v214 - v19;
  __chkstk_darwin(v20);
  v227 = (char *)&v214 - v21;
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  objc_super v219 = (char *)&v214 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  long long v217 = (char *)&v214 - v26;
  __chkstk_darwin(v27);
  v252 = (char *)&v214 - v28;
  __n128 v30 = __chkstk_darwin(v29);
  uint64_t v220 = (char *)&v214 - v31;
  uint64_t v255 = v23;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v23 + 56);
  v32(a2, 1, 1, v22, v30);
  uint64_t v33 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  uint64_t v34 = a2 + v33[5];
  *(void *)uint64_t v34 = 0;
  uint64_t v215 = (uint64_t *)v34;
  *(unsigned char *)(v34 + 8) = 1;
  uint64_t v35 = a2 + v33[6];
  *(void *)uint64_t v35 = 0;
  long long v216 = (uint64_t *)v35;
  *(unsigned char *)(v35 + 8) = 1;
  uint64_t v36 = a2 + v33[7];
  *(void *)uint64_t v36 = 0;
  uint64_t v218 = (uint64_t *)v36;
  *(unsigned char *)(v36 + 8) = 1;
  uint64_t v37 = a2 + v33[8];
  *(void *)uint64_t v37 = 0;
  id v221 = (uint64_t *)v37;
  *(unsigned char *)(v37 + 8) = 1;
  uint64_t v38 = (void *)(a2 + v33[9]);
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v240 = v38;
  uint64_t v39 = (uint64_t *)(a2 + v33[10]);
  *(_OWORD *)uint64_t v39 = 0u;
  *((_OWORD *)v39 + 1) = 0u;
  unint64_t v241 = v39;
  uint64_t v40 = (uint64_t *)(a2 + v33[11]);
  *uint64_t v40 = 0;
  v40[1] = 0;
  id v41 = (void *)(a2 + v33[12]);
  *id v41 = 0;
  v41[1] = 0;
  uint64_t v261 = (uint64_t)v41;
  uint64_t v42 = (void *)(a2 + v33[13]);
  *uint64_t v42 = 0;
  v42[1] = 0;
  uint64_t v253 = v42;
  id v43 = (uint64_t *)(a2 + v33[14]);
  *id v43 = 0;
  v43[1] = 0;
  uint64_t v238 = v43;
  uint64_t v44 = a2 + v33[15];
  uint64_t v45 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
  uint64_t v234 = v44;
  uint64_t v233 = v45;
  long long v232 = v47;
  uint64_t v231 = v46 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v47)(v44, 1, 1);
  uint64_t v242 = a2 + v33[16];
  uint64_t v256 = v22;
  v258 = v32;
  uint64_t v259 = v23 + 56;
  ((void (*)(void))v32)();
  *(void *)(a2 + v33[17]) = _swiftEmptyArrayStorage;
  uint64_t v243 = v33[18];
  *(unsigned char *)(a2 + v243) = 2;
  uint64_t v48 = a2 + v33[19];
  *(void *)uint64_t v48 = 0;
  Swift::String v244 = (void *)v48;
  *(unsigned char *)(v48 + 8) = 1;
  uint64_t v49 = (void *)(a2 + v33[20]);
  *uint64_t v49 = 0;
  v49[1] = 0;
  uint64_t v50 = (void *)(a2 + v33[21]);
  *uint64_t v50 = 0;
  v50[1] = 0;
  NSString v51 = (uint64_t *)(a2 + v33[22]);
  *NSString v51 = 0;
  v51[1] = 0;
  v245 = v51;
  uint64_t v222 = v33[23];
  *(void *)(a2 + v222) = 0;
  uint64_t v223 = v33[24];
  *(unsigned char *)(a2 + v223) = 2;
  uint64_t v225 = v33[25];
  *(unsigned char *)(a2 + v225) = 2;
  uint64_t v226 = v33[26];
  *(unsigned char *)(a2 + v226) = 2;
  uint64_t v52 = v33[27];
  uint64_t v257 = a2;
  uint64_t v224 = v52;
  *(unsigned char *)(a2 + v52) = 2;
  id v53 = &selRef_stringFromDate_;
  id v262 = a1;
  id v54 = [a1 title];
  if (v54)
  {
    id v55 = v54;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v56 = *(void *)(v260
                    + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings);
    uint64_t v57 = *(void *)(v56 + 16);
    if (v57)
    {
      uint64_t v58 = v56 + 32;
      uint64_t v214 = *(void *)(v260
                       + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_reminderTitleEmbeddings);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100096838(v58, (uint64_t)&v264);
        sub_100096838((uint64_t)&v264, (uint64_t)v263);
        sub_100094134(&qword_100914370);
        type metadata accessor for REMSentence2VecTitleEmbedding();
        if (swift_dynamicCast())
        {
          swift_bridgeObjectRetain();
          REMSentence2VecTitleEmbedding.vector(for:)();
          swift_bridgeObjectRelease();
          uint64_t v59 = REMSentence2VecTitleEmbedding.closestWord(for:)();
          uint64_t v61 = v60;
          swift_release();
          swift_release();
          _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v264);
          swift_bridgeObjectRelease();
          *uint64_t v40 = v59;
          v40[1] = v61;
        }
        else
        {
          sub_100096838((uint64_t)&v264, (uint64_t)v263);
          type metadata accessor for REMUniversalGrammarTitleEmbedding();
          if (swift_dynamicCast())
          {
            swift_bridgeObjectRetain();
            REMUniversalGrammarTitleEmbedding.vector(for:)();
            swift_bridgeObjectRelease();
            uint64_t v62 = REMUniversalGrammarTitleEmbedding.closestWord(for:)();
            uint64_t v64 = v63;
            swift_release();
            swift_release();
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v264);
            uint64_t v65 = (void *)v261;
          }
          else
          {
            sub_100096838((uint64_t)&v264, (uint64_t)v263);
            type metadata accessor for REMFilteredTitleEmbedding();
            if (!swift_dynamicCast())
            {
              if (qword_100907150 != -1) {
                swift_once();
              }
              uint64_t v67 = type metadata accessor for Logger();
              sub_10008E2DC(v67, (uint64_t)qword_1009102E0);
              uint64_t v68 = Logger.logObject.getter();
              os_log_type_t v69 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v68, v69))
              {
                os_log_type_t v70 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)os_log_type_t v70 = 0;
                _os_log_impl((void *)&_mh_execute_header, v68, v69, "DES unrecognized embedding", v70, 2u);
                swift_slowDealloc();
              }

              _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v264);
              goto LABEL_5;
            }
            swift_bridgeObjectRetain();
            REMFilteredTitleEmbedding.vector(for:)();
            swift_bridgeObjectRelease();
            uint64_t v62 = REMFilteredTitleEmbedding.closestWord(for:)();
            uint64_t v64 = v66;
            swift_release();
            swift_release();
            _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v264);
            uint64_t v65 = v253;
          }
          swift_bridgeObjectRelease();
          *uint64_t v65 = v62;
          v65[1] = v64;
        }
LABEL_5:
        v58 += 40;
        if (!--v57)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v53 = &selRef_stringFromDate_;
          goto LABEL_19;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
LABEL_19:
  uint64_t v71 = *(void **)(v260 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
  uint64_t v72 = &selRef_ckServerChangeTokens;
  if ([v71 includeDayOfWeek])
  {
    id v73 = [v262 creationDate];
    if (v73)
    {
      NSString v74 = v73;
      uint64_t v75 = v252;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = v255;
      unint64_t v77 = *(void (**)(char *, char *, uint64_t))(v255 + 32);
      uint64_t v78 = (uint64_t)v227;
      uint64_t v79 = v75;
      uint64_t v80 = v256;
      v77(v227, v79, v256);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v258)(v78, 0, 1, v80);
      int v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v78, 1, v80);
      uint64_t v82 = (uint64_t)v228;
      if (v81 != 1)
      {
        v77(v220, (char *)v78, v80);
        uint64_t v83 = v246;
        static Calendar.current.getter();
        uint64_t v84 = v250;
        uint64_t v85 = v53;
        uint64_t v86 = v248;
        uint64_t v87 = v251;
        (*(void (**)(char *, void, uint64_t))(v250 + 104))(v248, enum case for Calendar.Component.weekday(_:), v251);
        uint64_t v88 = v220;
        uint64_t v261 = Calendar.component(_:from:)();
        os_log_type_t v89 = v86;
        uint64_t v72 = &selRef_ckServerChangeTokens;
        uint64_t v90 = v87;
        id v53 = v85;
        (*(void (**)(char *, uint64_t))(v84 + 8))(v89, v90);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v83, v249);
        (*(void (**)(char *, uint64_t))(v255 + 8))(v88, v80);
        uint64_t v91 = v215;
        *uint64_t v215 = v261;
        *((unsigned char *)v91 + 8) = 0;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v78 = (uint64_t)v227;
      uint64_t v80 = v256;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v258)(v227, 1, 1, v256);
      uint64_t v82 = (uint64_t)v228;
    }
    sub_1000966BC(v78, (uint64_t *)&unk_100909A40);
LABEL_25:
    id v92 = [v262 completionDate];
    if (v92)
    {
      uint64_t v93 = v92;
      uint64_t v94 = v252;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v95 = v255;
      uint64_t v96 = *(void (**)(uint64_t, char *, uint64_t))(v255 + 32);
      v96(v82, v94, v80);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v258)(v82, 0, 1, v80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v95 + 48))(v82, 1, v80) != 1)
      {
        id v97 = v217;
        v96((uint64_t)v217, (char *)v82, v80);
        uint64_t v98 = v246;
        static Calendar.current.getter();
        uint64_t v99 = v250;
        unint64_t v100 = v53;
        id v101 = v72;
        uint64_t v102 = v248;
        uint64_t v103 = v251;
        (*(void (**)(char *, void, uint64_t))(v250 + 104))(v248, enum case for Calendar.Component.weekday(_:), v251);
        uint64_t v261 = Calendar.component(_:from:)();
        uint64_t v104 = v102;
        uint64_t v72 = v101;
        uint64_t v105 = v103;
        id v53 = v100;
        (*(void (**)(char *, uint64_t))(v99 + 8))(v104, v105);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v98, v249);
        (*(void (**)(char *, uint64_t))(v255 + 8))(v97, v80);
        uint64_t v106 = v216;
        *long long v216 = v261;
        *((unsigned char *)v106 + 8) = 0;
        goto LABEL_30;
      }
    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v258)(v82, 1, 1, v80);
    }
    sub_1000966BC(v82, (uint64_t *)&unk_100909A40);
LABEL_30:
    id v107 = [v262 dueDate];
    if (v107)
    {
      os_log_type_t v108 = v107;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v109 = v255;
      uint64_t v110 = *(void (**)(void))(v255 + 32);
      uint64_t v111 = (uint64_t)v229;
      v110();
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v258)(v111, 0, 1, v80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v111, 1, v80) != 1)
      {
        unint64_t v112 = v219;
        ((void (*)(char *, uint64_t, uint64_t))v110)(v219, v111, v80);
        uint64_t v113 = v246;
        static Calendar.current.getter();
        uint64_t v114 = v250;
        unint64_t v115 = v53;
        unint64_t v116 = v72;
        uint64_t v117 = v248;
        uint64_t v118 = v251;
        (*(void (**)(char *, void, uint64_t))(v250 + 104))(v248, enum case for Calendar.Component.weekday(_:), v251);
        uint64_t v261 = Calendar.component(_:from:)();
        uint64_t v119 = v117;
        uint64_t v72 = v116;
        uint64_t v120 = v118;
        id v53 = v115;
        (*(void (**)(char *, uint64_t))(v114 + 8))(v119, v120);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v113, v249);
        (*(void (**)(char *, uint64_t))(v255 + 8))(v112, v80);
        uint64_t v121 = v218;
        uint64_t *v218 = v261;
        *((unsigned char *)v121 + 8) = 0;
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v111 = (uint64_t)v229;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v258)(v229, 1, 1, v80);
    }
    sub_1000966BC(v111, (uint64_t *)&unk_100909A40);
LABEL_35:
    id v122 = [v262 displayDate];
    if (v122)
    {
      uint64_t v123 = v122;
      unint64_t v124 = v246;
      static Calendar.current.getter();
      os_log_type_t v125 = v53;
      uint64_t v126 = v250;
      uint64_t v127 = v248;
      uint64_t v128 = v251;
      (*(void (**)(char *, void, uint64_t))(v250 + 104))(v248, enum case for Calendar.Component.weekday(_:), v251);
      id v129 = [v123 date];
      uint64_t v130 = v252;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v131 = Calendar.component(_:from:)();
      (*(void (**)(char *, uint64_t))(v255 + 8))(v130, v256);
      (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
      id v53 = v125;
      uint64_t v72 = &selRef_ckServerChangeTokens;
      (*(void (**)(char *, uint64_t))(v247 + 8))(v124, v249);
      id v132 = v221;
      *id v221 = v131;
      *((unsigned char *)v132 + 8) = 0;
    }
  }
  if ([v71 includeDates])
  {
    id v133 = [v262 v72[88]];
    if (v133)
    {
      uint64_t v134 = v133;
      uint64_t v135 = v53;
      uint64_t v136 = (uint64_t)v230;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v137 = 0;
    }
    else
    {
      uint64_t v135 = v53;
      uint64_t v137 = 1;
      uint64_t v136 = (uint64_t)v230;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v258)(v136, v137, 1, v256);
    uint64_t v138 = v239;
    sub_100214D20(v136, v239);
    sub_1000966BC(v136, (uint64_t *)&unk_100909A40);
    sub_1000B1CB4((uint64_t)v138, v257, (uint64_t *)&unk_100909A40);
    id v53 = v135;
  }
  if ([v71 includeReminderTitles])
  {
    id v139 = [v262 v53[69]];
    if (v139)
    {
      uint64_t v140 = v139;
      uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v143 = v142;
    }
    else
    {
      uint64_t v141 = 0;
      uint64_t v143 = 0;
    }
    uint64_t v144 = v238;
    swift_bridgeObjectRelease();
    *uint64_t v144 = v141;
    v144[1] = v143;
  }
  if ([v71 includeReminderTitleSaltedHash])
  {
    id v145 = [v262 v53[69]];
    if (v145)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v145 = (id)String.base64EncodedHMACString(using:)();
      uint64_t v147 = v146;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v147 = 0;
    }
    uint64_t v148 = v240;
    swift_bridgeObjectRelease();
    *uint64_t v148 = v145;
    v148[1] = v147;
  }
  unsigned int v149 = [v71 includeReminderTitleFuzzedEmbeddings];
  uint64_t v261 = (uint64_t)v71;
  if (v149)
  {
    id v150 = [v262 v53[69]];
    if (v150)
    {
      id v151 = v150;
      uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v154 = v153;
    }
    else
    {
      uint64_t v152 = 0;
      uint64_t v154 = 0;
    }
    id v155 = sub_100212E54(v152, v154);
    uint64_t v157 = v156;
    uint64_t v159 = v158;
    uint64_t v161 = v160;
    swift_bridgeObjectRelease();
    uint64_t v162 = v241;
    sub_10021C120(*v241);
    uint64_t *v162 = (uint64_t)v155;
    v162[1] = v157;
    v162[2] = v159;
    v162[3] = v161;
    uint64_t v71 = (void *)v261;
  }
  if ([v71 includeDates])
  {
    id v163 = [v262 completionDate];
    if (v163)
    {
      uint64_t v164 = v163;
      uint64_t v165 = (uint64_t)v236;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v166 = 0;
    }
    else
    {
      uint64_t v166 = 1;
      uint64_t v165 = (uint64_t)v236;
    }
    uint64_t v167 = v235;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v258)(v165, v166, 1, v256);
    sub_100214D20(v165, v167);
    sub_1000966BC(v165, (uint64_t *)&unk_100909A40);
    sub_1000B1CB4((uint64_t)v167, v242, (uint64_t *)&unk_100909A40);
  }
  if ([v71 includeIsFlagged])
  {
    BOOL v168 = [v262 flagged] != 0;
    *(unsigned char *)(v257 + v243) = v168;
  }
  if ([v71 includePriority])
  {
    id v169 = [v262 priority];
    uint64_t v170 = v244;
    *Swift::String v244 = v169;
    *((unsigned char *)v170 + 8) = 0;
  }
  if ([v71 includeDates])
  {
    id v171 = [v262 displayDate];
    uint64_t v172 = v257;
    if (v171)
    {
      v264 = v171;
      id v173 = v171;
      uint64_t v174 = v237;
      uint64_t v175 = v254;
      sub_100214F60(&v264, v237);
      uint64_t v254 = v175;

      v232(v174, 0, 1, v233);
    }
    else
    {
      uint64_t v174 = v237;
      v232(v237, 1, 1, v233);
    }
    sub_1000B1CB4(v174, v234, &qword_100910400);
  }
  else
  {
    uint64_t v172 = v257;
  }
  if ([v71 includeRecurrenceInfo])
  {
    id v176 = [v262 recurrenceRules];
    uint64_t v177 = sub_10021B45C((uint64_t)v176);
    uint64_t v179 = v178;

    unint64_t v180 = v245;
    swift_bridgeObjectRelease();
    *unint64_t v180 = v177;
    v180[1] = v179;
  }
  if (![v71 includeAttachmentUTIs]) {
    goto LABEL_96;
  }
  id v181 = [v262 attachments];
  if (v181)
  {
    uint64_t v182 = v181;
    v264 = v181;
    sub_1000963CC(0, (unint64_t *)&unk_10090AFC0);
    sub_1000963CC(0, (unint64_t *)&unk_10090B010);
    sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
    unint64_t v183 = Sequence.elements<A>(ofType:)();

    if (v183 >> 62)
    {
      swift_bridgeObjectRetain();
      id result = (id)_CocoaArrayWrapper.endIndex.getter();
      uint64_t v184 = (uint64_t)result;
      uint64_t v71 = (void *)v261;
      if (result) {
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v184 = *(void *)((v183 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id result = (id)swift_bridgeObjectRetain();
      uint64_t v71 = (void *)v261;
      if (v184)
      {
LABEL_78:
        if (v184 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v186 = 0;
        unint64_t v187 = _swiftEmptyArrayStorage;
        do
        {
          if ((v183 & 0xC000000000000001) != 0) {
            id v188 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v188 = *(id *)(v183 + 8 * v186 + 32);
          }
          unint64_t v189 = v188;
          id v190 = [v188 uti];
          if (v190)
          {
            unint64_t v191 = v190;
            uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v194 = v193;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v187 = sub_100308F88(0, v187[2] + 1, 1, v187);
            }
            unint64_t v196 = v187[2];
            unint64_t v195 = v187[3];
            if (v196 >= v195 >> 1) {
              unint64_t v187 = sub_100308F88((void *)(v195 > 1), v196 + 1, 1, v187);
            }
            v187[2] = v196 + 1;
            id v197 = &v187[2 * v196];
            v197[4] = v192;
            v197[5] = v194;
            uint64_t v71 = (void *)v261;
          }
          else
          {
          }
          ++v186;
        }
        while (v184 != v186);
        goto LABEL_94;
      }
    }
    unint64_t v187 = _swiftEmptyArrayStorage;
LABEL_94:
    swift_bridgeObjectRelease_n();
    uint64_t v172 = v257;
    goto LABEL_95;
  }
  unint64_t v187 = 0;
LABEL_95:
  uint64_t v198 = v222;
  swift_bridgeObjectRelease();
  *(void *)(v172 + v198) = v187;
LABEL_96:
  if ([v71 includeRemindMeWhenMessagingInfo])
  {
    id v199 = [v262 contactHandles];
    if (v199)
    {
      uint64_t v200 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v202 = v201;

      sub_100097F34(v200, v202);
    }
    *(unsigned char *)(v172 + v223) = v199 != 0;
  }
  if ([v71 includeUserActivityInfo])
  {
    id v203 = [v262 userActivity];
    if (v203)
    {
      uint64_t v204 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v206 = v205;

      sub_100097F34(v204, v206);
    }
    *(unsigned char *)(v172 + v224) = v203 != 0;
  }
  if ([v71 includeSubtaskInfo])
  {
    id v207 = [v262 children];
    if (v207)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      sub_1000E4F40((unint64_t *)&qword_100914B80, (unint64_t *)&qword_10090B040);
      uint64_t v208 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v208 & 0xC000000000000001) != 0) {
        id v207 = (id)__CocoaSet.count.getter();
      }
      else {
        id v207 = *(id *)(v208 + 16);
      }
      swift_bridgeObjectRelease();
    }
    *(unsigned char *)(v172 + v225) = (uint64_t)v207 > 0;
    id v209 = [v262 parentReminder];
    id v210 = v209;
    if (v209) {

    }
    *(unsigned char *)(v172 + v226) = v210 != 0;
  }
  id result = [v71 includeAlarmDates];
  if (result)
  {
    id v211 = [v262 alarms];
    if (v211)
    {
      uint64_t v212 = v211;
      sub_1000963CC(0, &qword_10090C4B8);
      uint64_t v213 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v213 = 0;
    }
    sub_100215288(v172, v213);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100214D20@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v20 - v13;
  sub_1000BF710(a1, (uint64_t)v7, (uint64_t *)&unk_100909A40);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909A40);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v16(v14, v7, v8);
    if ([*(id *)(v2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options) dateResolutionInSeconds])
    {
      Date.timeIntervalSinceReferenceDate.getter();
      Date.init(timeIntervalSinceReferenceDate:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      uint64_t v17 = a2;
      uint64_t v18 = v11;
    }
    else
    {
      uint64_t v17 = a2;
      uint64_t v18 = v14;
    }
    v16(v17, v18, v8);
    uint64_t v15 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, v15, 1, v8);
}

uint64_t sub_100214F60@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v14 = __chkstk_darwin(v13).n128_u64[0];
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *a1;
  id v18 = [v17 date:v14];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 0, 1, v19);
  sub_100214D20((uint64_t)v12, v16);
  sub_1000966BC((uint64_t)v12, (uint64_t *)&unk_100909A40);
  id v20 = [v17 timeZone];
  if (v20)
  {
    uint64_t v21 = v20;
    static TimeZone._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v22 = type metadata accessor for TimeZone();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v6, 0, 1, v22);
  }
  else
  {
    uint64_t v22 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v6, 1, 1, v22);
  }
  sub_100096408((uint64_t)v6, (uint64_t)v9, &qword_100910408);
  type metadata accessor for TimeZone();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v9, 1, v22) == 1)
  {
    sub_1000966BC((uint64_t)v9, &qword_100910408);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v24 = TimeZone.identifier.getter();
    uint64_t v25 = v26;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
  }
  sub_100096408((uint64_t)v16, a2, (uint64_t *)&unk_100909A40);
  uint64_t result = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v28 = (uint64_t *)(a2 + *(int *)(result + 20));
  *uint64_t v28 = v24;
  v28[1] = v25;
  return result;
}

uint64_t sub_100215288(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100094134(&qword_100910408);
  __chkstk_darwin(v4 - 8);
  uint64_t v88 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v86 = *(void *)(v6 - 8);
  uint64_t v87 = v6;
  __chkstk_darwin(v6);
  uint64_t v95 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v94 = (uint64_t)&v80 - v9;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  uint64_t v85 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v93 = (char *)&v80 - v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v103 = type metadata accessor for DateComponents();
  uint64_t v17 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v84 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v100 = (char *)&v80 - v20;
  uint64_t v104 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  id v92 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v91 = (char *)&v80 - v24;
  if (a2) {
    unint64_t v25 = (unint64_t)a2;
  }
  else {
    unint64_t v25 = (unint64_t)_swiftEmptyArrayStorage;
  }
  if (v25 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_6;
    }
LABEL_34:
    return swift_bridgeObjectRelease();
  }
  uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v26) {
    goto LABEL_34;
  }
LABEL_6:
  if (v26 >= 1)
  {
    uint64_t v28 = 0;
    uint64_t v98 = v89 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
    uint64_t v99 = v16;
    unint64_t v106 = v25 & 0xC000000000000001;
    uint64_t v96 = (void (**)(char *, char *, uint64_t))(v21 + 32);
    id v101 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v102 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v90 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
    uint64_t v82 = (void (**)(char *, char *, uint64_t))(v21 + 16);
    int v81 = (void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v105 = v26;
    uint64_t v97 = a1;
    uint64_t v83 = (void *)v25;
    while (1)
    {
      if (v106) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v38 = *(id *)(v25 + 8 * v28 + 32);
      }
      uint64_t v39 = v38;
      id v40 = [v38 trigger];
      self;
      uint64_t v41 = swift_dynamicCastObjCClass();
      if (v41)
      {
        uint64_t v42 = (void *)v41;
        id v43 = v40;
        unint64_t v44 = (unint64_t)[v42 proximity];
        if (v44 <= 2)
        {
          uint64_t v29 = *(void *)&aNone_3[8 * v44];
          unint64_t v30 = qword_100781F48[v44];
        }
        else
        {
          unint64_t v30 = 0xE90000000000003ELL;
          uint64_t v29 = 0x6E776F6E6B6E753CLL;
        }
        uint64_t v31 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
        uint64_t v32 = (uint64_t *)(a1 + *(int *)(v31 + 84));
        swift_bridgeObjectRelease();
        uint64_t *v32 = v29;
        v32[1] = v30;
        id v33 = [v42 structuredLocation];
        uint64_t v34 = sub_10021B5F0(v33);
        uint64_t v36 = v35;

        uint64_t v37 = (uint64_t *)(a1 + *(int *)(v31 + 80));
        swift_bridgeObjectRelease();
        *uint64_t v37 = v34;
        v37[1] = v36;
      }
      else
      {
        self;
        uint64_t v45 = swift_dynamicCastObjCClass();
        if (!v45)
        {

          goto LABEL_11;
        }
        uint64_t v46 = (void *)v45;
        uint64_t v47 = self;
        id v48 = v40;
        id v49 = [v46 dateComponents];
        uint64_t v50 = v100;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
        uint64_t v52 = *v102;
        (*v102)(v50, v103);
        Class v53 = TimeZone._bridgeToObjectiveC()().super.isa;
        id v54 = [v47 rem_dateWithDateComponents:isa timeZone:v53];

        if (v54)
        {
          id v55 = v92;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v56 = *v96;
          uint64_t v57 = (uint64_t)v99;
          uint64_t v58 = v55;
          uint64_t v59 = v104;
          (*v96)(v99, v58, v104);
          uint64_t v60 = *v101;
          (*v101)(v57, 0, 1, v59);
          if ((*v90)(v57, 1, v59) != 1)
          {
            uint64_t v61 = v91;
            uint64_t v62 = v104;
            v56(v91, (char *)v57, v104);
            uint64_t v63 = (uint64_t)v85;
            (*v82)(v85, v61, v62);
            v60(v63, 0, 1, v62);
            sub_100214D20(v63, v93);
            sub_1000966BC(v63, (uint64_t *)&unk_100909A40);
            id v64 = [v46 dateComponents];
            uint64_t v65 = v84;
            static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v66 = (uint64_t)v88;
            DateComponents.timeZone.getter();
            v52(v65, v103);
            uint64_t v67 = type metadata accessor for TimeZone();
            uint64_t v68 = *(void *)(v67 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v66, 1, v67) == 1)
            {
              sub_1000966BC(v66, &qword_100910408);
              uint64_t v69 = 0;
              uint64_t v70 = 0;
            }
            else
            {
              uint64_t v71 = v66;
              uint64_t v69 = TimeZone.identifier.getter();
              uint64_t v70 = v72;
              (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v71, v67);
            }
            a1 = v97;
            uint64_t v73 = v94;
            sub_100096408((uint64_t)v93, v94, (uint64_t *)&unk_100909A40);
            NSString v74 = (uint64_t *)(v73 + *(int *)(v87 + 20));
            *NSString v74 = v69;
            v74[1] = v70;
            sub_10021FD28(v73, v95, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            uint64_t v75 = *(int *)(type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0) + 68);
            unint64_t v76 = *(void *)(a1 + v75);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v25 = (unint64_t)v83;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              unint64_t v76 = sub_10030AEB8(0, *(void *)(v76 + 16) + 1, 1, v76);
            }
            unint64_t v79 = *(void *)(v76 + 16);
            unint64_t v78 = *(void *)(v76 + 24);
            if (v79 >= v78 >> 1) {
              unint64_t v76 = sub_10030AEB8(v78 > 1, v79 + 1, 1, v76);
            }
            *(void *)(v76 + 16) = v79 + 1;
            sub_10021C1A0(v95, v76+ ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))+ *(void *)(v86 + 72) * v79, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);

            *(void *)(a1 + v75) = v76;
            sub_10021FC74(v94, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            (*v81)(v91, v104);
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v57 = (uint64_t)v99;
          (*v101)((uint64_t)v99, 1, 1, v104);
        }

        sub_1000966BC(v57, (uint64_t *)&unk_100909A40);
        a1 = v97;
      }
LABEL_10:
      uint64_t v26 = v105;
LABEL_11:
      if (v26 == ++v28) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

void sub_100215C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    String.lowercased()();
    sub_100094134((uint64_t *)&unk_10090A490);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = a3;
    *(_OWORD *)(inited + 16) = xmmword_100778370;
    *(void *)(inited + 40) = a4;
    *(void *)(inited + 48) = a5;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a7;
    *(void *)(inited + 72) = a8;
    *(void *)(inited + 80) = a9;
    *(void *)(inited + 88) = a10;
    sub_1000E4FD8();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((StringProtocol.contains<A>(_:)() & 1) != 0
      || (swift_bridgeObjectRelease(), swift_bridgeObjectRetain(), (StringProtocol.contains<A>(_:)() & 1) != 0)
      || (swift_bridgeObjectRelease(), swift_bridgeObjectRetain(), (StringProtocol.contains<A>(_:)() & 1) != 0)
      || (swift_bridgeObjectRelease(), swift_bridgeObjectRetain(), (StringProtocol.contains<A>(_:)() & 1) != 0))
    {
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
    }
    swift_bridgeObjectRelease();
  }
}

NSString sub_100215EA0()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Locale.current.getter();
  Locale.languageCodeIdentifier.getter();
  uint64_t v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
    if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0) {
        return v6;
      }
    }
  }
  return 0;
}

id sub_100216014(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() embeddingWithContentsOfURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_10021616C(void **a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v5 = *a1;
  sub_100094134(&qword_1009103F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E80;
  *(void *)(inited + 32) = NLTagVerb;
  *(void *)(inited + 40) = NLTagNoun;
  id v7 = v5;
  id v8 = NLTagVerb;
  id v9 = NLTagNoun;
  if ([a2 relevantWordTagsIncludeOtherWord])
  {
    uint64_t v10 = NLTagOtherWord;
    uint64_t v11 = 3;
    uint64_t inited = (uint64_t)sub_10030B034((void *)1, 3, 1, (void *)inited);
    *(void *)(inited + 16) = 3;
    *(void *)(inited + 48) = NLTagOtherWord;
  }
  else
  {
    uint64_t v11 = *(void *)(inited + 16);
    if (!v11)
    {

LABEL_17:
      swift_bridgeObjectRelease();
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = 0;
  while (1)
  {
    if (!*(void *)(inited + 8 * v12 + 32))
    {
      if (!v5) {
        goto LABEL_19;
      }
      goto LABEL_6;
    }
    if (!v5) {
      goto LABEL_6;
    }
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_19;
    }
LABEL_6:
    if (v11 == ++v12)
    {

      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }

  swift_bridgeObjectRelease_n();
LABEL_19:
  swift_bridgeObjectRelease_n();
  String.subscript.getter();
  uint64_t v19 = static String._fromSubstring(_:)();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();

  *a3 = v19;
  a3[1] = v21;
}

uint64_t sub_1002163B0()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  long long v11 = *v0;
  sub_1002194A0();
  uint64_t v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v4 = v3;
  uint64_t result = swift_release();
  if (!v1)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v7 = [(objc_class *)isa TT_gzipDeflate];

    if (v7)
    {
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v10 = 0xF000000000000000;
    }
    sub_100094134(&qword_10090A830);
    Optional.tryUnwrap(_:file:line:)();
    sub_100097F34(v2, v4);
    sub_100097F20(v8, v10);
    return v11;
  }
  return result;
}

uint64_t sub_10021652C(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_100910598);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10021FADC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  sub_100094134(&qword_1009105A8);
  sub_100221EB0(&qword_1009105B0, &qword_1009105A8, (void (*)(void))sub_10021FB30);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    void v10[5] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[4] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10021673C()
{
  unint64_t result = 0x73746E756F636361;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x614C6D6574737973;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1002167E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10021FEB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021680C(uint64_t a1)
{
  unint64_t v2 = sub_10021FADC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100216848(uint64_t a1)
{
  unint64_t v2 = sub_10021FADC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100216884@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10022008C(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1002168D4(void *a1)
{
  return sub_10021652C(a1);
}

uint64_t sub_1002168EC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  char v6 = *(unsigned char *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  void v7[2] = *(_OWORD *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 48);
  return sub_10021ABE4((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t sub_100216948(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = a4;
  uint64_t v6 = sub_100094134(&qword_1009106E8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100221DB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v13 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v4)
  {
    v11[1] = v11[0];
    char v12 = 1;
    sub_100094134(&qword_1009106D0);
    sub_100221EB0(&qword_1009106F0, &qword_1009106D0, (void (*)(void))sub_100221E5C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100216B18()
{
  if (*v0) {
    return 0x737473696CLL;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100216B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10022038C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100216B70(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100216B7C(uint64_t a1)
{
  unint64_t v2 = sub_100221DB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100216BB8(uint64_t a1)
{
  unint64_t v2 = sub_100221DB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100216BF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100220468(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100216C24(void *a1)
{
  return sub_100216948(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100216C44(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  if (v3)
  {
    if (v5)
    {
      BOOL v7 = *a1 == *a2 && v3 == v5;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_8;
      }
    }
    return 0;
  }
  if (v5) {
    return 0;
  }
LABEL_8:

  return sub_10034FB90(v4, v6);
}

uint64_t sub_100216CC0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_1009106A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100221CCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12[0]) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_100096408(v3 + 24, (uint64_t)v13, &qword_1009106A8);
    sub_100096408((uint64_t)v13, (uint64_t)v12, &qword_1009106A8);
    char v11 = 3;
    sub_10021FD90();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12[0] = *(void *)(v3 + 56);
    char v11 = 4;
    sub_100094134(&qword_100910688);
    sub_100221D20(&qword_1009106B0, &qword_1009106B8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100216F2C()
{
  unint64_t result = 0x6465726168537369;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x70756F72477369;
      break;
    case 2:
      unint64_t result = 0x656C746974;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0x7265646E696D6572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100216FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100220680(a1, a2);
  *a3 = result;
  return result;
}

void sub_100217004(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_100217010(uint64_t a1)
{
  unint64_t v2 = sub_100221CCC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021704C(uint64_t a1)
{
  unint64_t v2 = sub_100221CCC();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100217088@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10022089C(a1, v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1002170CC(void *a1)
{
  return sub_100216CC0(a1);
}

BOOL sub_100217108(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = a1[3];
  _OWORD v7[2] = a1[2];
  _OWORD v7[3] = v3;
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  long long v5 = a2[3];
  _OWORD v8[2] = a2[2];
  v8[3] = v5;
  return sub_100219A6C((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

unint64_t sub_100217158(char a1)
{
  unint64_t result = 0x6E6F697461657263;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0x664F796144657564;
      break;
    case 4:
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x6C6153656C746974;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x65636E65746E6573;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0x656C746974;
      break;
    case 11:
      unint64_t result = 0x4479616C70736964;
      break;
    case 12:
      unint64_t result = 0x6974656C706D6F63;
      break;
    case 13:
      unint64_t result = 0x7461446D72616C61;
      break;
    case 14:
      unint64_t result = 0x656767616C467369;
      break;
    case 15:
      unint64_t result = 0x797469726F697270;
      break;
    case 16:
      unint64_t result = 0xD000000000000017;
      break;
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 18:
      unint64_t result = 0xD000000000000015;
      break;
    case 19:
      unint64_t result = 0x656D686361747461;
      break;
    case 20:
      unint64_t result = 0xD000000000000018;
      break;
    case 21:
      unint64_t result = 0x746E657261507369;
      break;
    case 22:
      unint64_t result = 0x7361746275537369;
      break;
    case 23:
      unint64_t result = 0x4172657355736168;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100217488(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_100910608);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10021FC20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for Date();
  sub_10021FBD8(&qword_10090C5A8, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
    LOBYTE(v14) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v10 = (long long *)(v3 + v9[10]);
    long long v11 = v10[1];
    long long v14 = *v10;
    long long v15 = v11;
    char v16 = 6;
    sub_10021FD90();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13[1] = v3 + v9[15];
    LOBYTE(v14) = 11;
    type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
    sub_10021FBD8(&qword_100910618, (void (*)(uint64_t))type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v9[17]);
    char v16 = 13;
    sub_100094134(&qword_1009105F8);
    sub_10021FDE4(&qword_100910620, &qword_100910618);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v14 = *(void *)(v3 + v9[23]);
    char v16 = 19;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    sub_100221C6C(&qword_100910628, (uint64_t *)&unk_10090AFB0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v14) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100217B7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v108 = a2;
  uint64_t v3 = sub_100094134(&qword_100910400);
  __chkstk_darwin(v3 - 8);
  uint64_t v116 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v113 = (uint64_t)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v127 = (char *)&v101 - v8;
  uint64_t v9 = sub_100094134(&qword_1009105D8);
  uint64_t v128 = *(void *)(v9 - 8);
  uint64_t v129 = v9;
  __chkstk_darwin(v9);
  id v133 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  char v12 = (int *)(v11 - 8);
  __chkstk_darwin(v11);
  long long v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  char v16 = *(void (**)(void))(*(void *)(v15 - 8) + 56);
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v16)(v14, 1, 1, v15);
  uint64_t v17 = &v14[v12[7]];
  *(void *)uint64_t v17 = 0;
  *(void *)&long long v125 = v17;
  v17[8] = 1;
  char v18 = &v14[v12[8]];
  *(void *)char v18 = 0;
  unint64_t v124 = (uint64_t *)v18;
  v18[8] = 1;
  uint64_t v19 = &v14[v12[9]];
  *(void *)uint64_t v19 = 0;
  uint64_t v123 = (uint64_t *)v19;
  v19[8] = 1;
  uint64_t v20 = &v14[v12[10]];
  *(void *)uint64_t v20 = 0;
  id v122 = (uint64_t *)v20;
  v20[8] = 1;
  uint64_t v21 = &v14[v12[11]];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0;
  uint64_t v121 = v21;
  uint64_t v22 = (uint64_t *)&v14[v12[12]];
  *(_OWORD *)uint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  uint64_t v120 = v22;
  uint64_t v23 = &v14[v12[13]];
  *(void *)uint64_t v23 = 0;
  *((void *)v23 + 1) = 0;
  uint64_t v119 = v23;
  uint64_t v24 = &v14[v12[14]];
  *(void *)uint64_t v24 = 0;
  *((void *)v24 + 1) = 0;
  uint64_t v118 = v24;
  unint64_t v25 = &v14[v12[15]];
  *(void *)unint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  uint64_t v117 = v25;
  uint64_t v26 = &v14[v12[16]];
  *(void *)uint64_t v26 = 0;
  *((void *)v26 + 1) = 0;
  uint64_t v114 = v26;
  uint64_t v27 = (uint64_t)&v14[v12[17]];
  uint64_t v28 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v112 = v27;
  uint64_t v115 = v28;
  v29(v27, 1, 1);
  uint64_t v111 = &v14[v12[18]];
  uint64_t v126 = v15;
  v16();
  unint64_t v30 = a1;
  uint64_t v110 = v12[19];
  *(void *)&v14[v110] = _swiftEmptyArrayStorage;
  uint64_t v109 = v12[20];
  v14[v109] = 2;
  uint64_t v31 = &v14[v12[21]];
  *(void *)uint64_t v31 = 0;
  v31[8] = 1;
  uint64_t v32 = &v14[v12[22]];
  *(void *)uint64_t v32 = 0;
  *((void *)v32 + 1) = 0;
  id v33 = &v14[v12[23]];
  *(void *)id v33 = 0;
  *((void *)v33 + 1) = 0;
  uint64_t v34 = &v14[v12[24]];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  uint64_t v106 = v12[25];
  *(void *)&v14[v106] = 0;
  uint64_t v107 = v12[26];
  v14[v107] = 2;
  uint64_t v105 = v12[27];
  v14[v105] = 2;
  uint64_t v35 = v12[28];
  v14[v35] = 2;
  uint64_t v36 = v12[29];
  uint64_t v131 = v30;
  id v132 = v14;
  v14[v36] = 2;
  sub_1000C0DE0(v30, v30[3]);
  sub_10021FC20();
  uint64_t v37 = v130;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v37)
  {
    uint64_t v98 = (uint64_t)v132;
  }
  else
  {
    uint64_t v38 = v125;
    uint64_t v130 = (uint64_t *)v31;
    uint64_t v104 = v32;
    uint64_t v102 = v33;
    uint64_t v103 = v34;
    uint64_t v39 = v128;
    LOBYTE(v134) = 0;
    uint64_t v40 = sub_10021FBD8(&qword_10090C610, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v41 = (uint64_t)v127;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000B1CB4(v41, (uint64_t)v132, (uint64_t *)&unk_100909A40);
    LOBYTE(v134) = 1;
    *(void *)uint64_t v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(unsigned char *)(v38 + 8) = v43 & 1;
    LOBYTE(v134) = 2;
    uint64_t v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v45 = v124;
    *unint64_t v124 = v44;
    *((unsigned char *)v45 + 8) = v46 & 1;
    LOBYTE(v134) = 3;
    uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    id v48 = v123;
    *uint64_t v123 = v47;
    *((unsigned char *)v48 + 8) = v49 & 1;
    LOBYTE(v134) = 4;
    uint64_t v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v127 = (char *)v40;
    NSString v51 = v122;
    *id v122 = v50;
    *((unsigned char *)v51 + 8) = v52 & 1;
    LOBYTE(v134) = 5;
    uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v55 = v54;
    uint64_t v56 = (uint64_t *)v121;
    swift_bridgeObjectRelease();
    uint64_t *v56 = v53;
    v56[1] = v55;
    char v137 = 6;
    sub_10021FCD4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    long long v125 = v134;
    uint64_t v58 = v135;
    uint64_t v57 = v136;
    uint64_t v59 = v120;
    sub_10021C120(*v120);
    *(_OWORD *)uint64_t v59 = v125;
    v59[2] = v58;
    v59[3] = v57;
    LOBYTE(v134) = 7;
    uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v62 = v61;
    uint64_t v63 = (uint64_t *)v119;
    swift_bridgeObjectRelease();
    uint64_t *v63 = v60;
    v63[1] = v62;
    LOBYTE(v134) = 8;
    uint64_t v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v66 = v65;
    uint64_t v67 = (uint64_t *)v118;
    swift_bridgeObjectRelease();
    *uint64_t v67 = v64;
    v67[1] = v66;
    LOBYTE(v134) = 9;
    uint64_t v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v70 = v69;
    uint64_t v71 = (uint64_t *)v117;
    swift_bridgeObjectRelease();
    *uint64_t v71 = v68;
    v71[1] = v70;
    LOBYTE(v134) = 10;
    uint64_t v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v74 = v73;
    uint64_t v75 = (uint64_t *)v114;
    swift_bridgeObjectRelease();
    uint64_t *v75 = v72;
    v75[1] = v74;
    LOBYTE(v134) = 11;
    sub_10021FBD8(&qword_1009105F0, (void (*)(uint64_t))type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000B1CB4(v116, v112, &qword_100910400);
    LOBYTE(v134) = 12;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000B1CB4(v113, (uint64_t)v111, (uint64_t *)&unk_100909A40);
    sub_100094134(&qword_1009105F8);
    char v137 = 13;
    sub_10021FDE4(&qword_100910600, &qword_1009105F0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v76 = v134;
    uint64_t v77 = (uint64_t)v132;
    uint64_t v78 = v110;
    swift_bridgeObjectRelease();
    *(void *)(v77 + v78) = v76;
    LOBYTE(v134) = 14;
    v132[v109] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v134) = 15;
    uint64_t v79 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v80 = v130;
    *uint64_t v130 = v79;
    *((unsigned char *)v80 + 8) = v81 & 1;
    LOBYTE(v134) = 16;
    uint64_t v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v84 = v83;
    uint64_t v85 = (uint64_t *)v104;
    swift_bridgeObjectRelease();
    *uint64_t v85 = v82;
    v85[1] = v84;
    LOBYTE(v134) = 17;
    uint64_t v86 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v88 = v87;
    uint64_t v89 = (uint64_t *)v102;
    swift_bridgeObjectRelease();
    *uint64_t v89 = v86;
    v89[1] = v88;
    LOBYTE(v134) = 18;
    uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v92 = v91;
    uint64_t v93 = (uint64_t *)v103;
    swift_bridgeObjectRelease();
    *uint64_t v93 = v90;
    v93[1] = v92;
    sub_100094134((uint64_t *)&unk_10090AFB0);
    char v137 = 19;
    sub_100221C6C(&qword_10090F8B0, (uint64_t *)&unk_10090AFB0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v94 = v134;
    uint64_t v95 = v106;
    uint64_t v96 = (uint64_t)v132;
    swift_bridgeObjectRelease();
    *(void *)(v96 + v95) = v94;
    LOBYTE(v134) = 20;
    v132[v107] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v134) = 21;
    v132[v105] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v134) = 22;
    char v97 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v98 = (uint64_t)v132;
    uint64_t v99 = v133;
    v132[v35] = v97;
    LOBYTE(v134) = 23;
    uint64_t v100 = v129;
    LOBYTE(v94) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v99, v100);
    *(unsigned char *)(v98 + v36) = v94;
    sub_10021FD28(v98, v108, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v131);
  return sub_10021FC74(v98, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
}

unint64_t sub_1002187A8()
{
  return sub_100217158(*v0);
}

uint64_t sub_1002187B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100220C9C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002187D8(unsigned char *a1@<X8>)
{
  *a1 = 24;
}

uint64_t sub_1002187E4(uint64_t a1)
{
  unint64_t v2 = sub_10021FC20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100218820(uint64_t a1)
{
  unint64_t v2 = sub_10021FC20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10021885C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100217B7C(a1, a2);
}

uint64_t sub_100218874(void *a1)
{
  return sub_100217488(a1);
}

uint64_t sub_100218890(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_1009105D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_10021FB84();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for Date();
  sub_10021FBD8(&qword_10090C5A8, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100218A48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v21 = (uint64_t)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100094134(&qword_1009105C0);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = (uint64_t *)&v11[*(int *)(v9 + 28)];
  *uint64_t v13 = 0;
  v13[1] = 0;
  sub_1000C0DE0(a1, a1[3]);
  sub_10021FB84();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v14 = v20;
    char v24 = 0;
    sub_10021FBD8(&qword_10090C610, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1000B1CB4(v21, (uint64_t)v11, (uint64_t *)&unk_100909A40);
    char v23 = 1;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v22);
    swift_bridgeObjectRelease();
    *uint64_t v13 = v16;
    v13[1] = v18;
    sub_10021FD28((uint64_t)v11, v19, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  return sub_10021FC74((uint64_t)v11, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
}

uint64_t sub_100218D90()
{
  if (*v0) {
    return 0x656E6F7A656D6974;
  }
  else {
    return 1702125924;
  }
}

uint64_t sub_100218DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002216C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100218DEC(uint64_t a1)
{
  unint64_t v2 = sub_10021FB84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100218E28(uint64_t a1)
{
  unint64_t v2 = sub_10021FB84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100218E64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100218A48(a1, a2);
}

uint64_t sub_100218E7C(void *a1)
{
  return sub_100218890(a1);
}

uint64_t sub_100218E98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[1] = a5;
  void v13[2] = a3;
  uint64_t v8 = sub_100094134(&qword_100910660);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100221B8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v17 = a2;
  char v16 = 0;
  sub_100094134(&qword_100910648);
  sub_100221BE0(&qword_100910668, &qword_100910670);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100219084()
{
  uint64_t v1 = 0x6E6F697369766572;
  if (*v0 != 1) {
    uint64_t v1 = 0x65676175676E616CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E69646465626D65;
  }
}

uint64_t sub_1002190E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002217A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021910C(uint64_t a1)
{
  unint64_t v2 = sub_100221B8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100219148(uint64_t a1)
{
  unint64_t v2 = sub_100221B8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100219184@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10022190C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002191B4(void *a1)
{
  return sub_100218E98(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1002191D4(uint64_t *a1, uint64_t *a2)
{
  return sub_100219510(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1002191F0()
{
  sub_10012227C(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned int *)(v0 + 64) | ((unint64_t)*(unsigned __int16 *)(v0 + 68) << 32));
  uint64_t v1 = v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_salt;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_timezone;
  uint64_t v4 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  sub_1000966BC(v0 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_embeddingsURL, (uint64_t *)&unk_100909E40);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100219330()
{
  return type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(0);
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100910328);
}

void sub_100219358()
{
  type metadata accessor for SymmetricKey();
  if (v0 <= 0x3F)
  {
    type metadata accessor for TimeZone();
    if (v1 <= 0x3F)
    {
      sub_10021CC70(319, (unint64_t *)&qword_10090D498, (void (*)(uint64_t))&type metadata accessor for URL);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

unint64_t sub_1002194A0()
{
  unint64_t result = qword_1009103E0;
  if (!qword_1009103E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009103E0);
  }
  return result;
}

void sub_1002194F4(void *a1@<X0>, void *a2@<X8>)
{
  sub_100212AA0(a1, v2, a2);
}

uint64_t sub_100219510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 != a6) {
    return 0;
  }
  if (a3 == a7 && a4 == a8 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v10 & 1) != 0))
  {
    uint64_t v12 = *(void *)(a1 + 16);
    if (v12 && (uint64_t v13 = *(void *)(a5 + 16)) != 0)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 1;
      while (1)
      {
        uint64_t v16 = 8 * v14;
        uint64_t v17 = *(void *)(a1 + 32 + 8 * v14);
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          uint64_t v19 = *(void *)(a5 + 32 + v16);
          uint64_t v20 = *(void *)(v19 + 16);
          if (v20)
          {
            if (vabdd_f64(*(double *)(v17 + 32), *(double *)(v19 + 32)) >= 2.22044605e-16) {
              return 0;
            }
            BOOL v21 = v18 == 1 || v20 == 1;
            if (!v21) {
              break;
            }
          }
        }
LABEL_16:
        uint64_t result = 1;
        if (v15 != v12)
        {
          uint64_t v14 = v15;
          BOOL v21 = v15++ == v13;
          if (!v21) {
            continue;
          }
        }
        return result;
      }
      uint64_t v22 = (double *)(v17 + 40);
      char v23 = (double *)(v19 + 40);
      uint64_t v24 = v20 - 2;
      uint64_t v25 = v18 - 2;
      while (vabdd_f64(*v22, *v23) < 2.22044605e-16)
      {
        if (v25)
        {
          uint64_t v26 = v24;
          ++v23;
          ++v22;
          --v24;
          --v25;
          if (v26) {
            continue;
          }
        }
        goto LABEL_16;
      }
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_100219658(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100094134((uint64_t *)&unk_10091C320);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7);
  char v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v31 - v15;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v33 = a1;
  sub_1000BF710(a1, (uint64_t)&v31 - v18, (uint64_t *)&unk_100909A40);
  uint64_t v34 = a2;
  sub_1000BF710(a2, (uint64_t)v16, (uint64_t *)&unk_100909A40);
  uint64_t v20 = (uint64_t)&v10[*(int *)(v8 + 56)];
  sub_1000BF710((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_100909A40);
  sub_1000BF710((uint64_t)v16, v20, (uint64_t *)&unk_100909A40);
  BOOL v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v10, 1, v4) != 1)
  {
    sub_1000BF710((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_100909A40);
    if (v21(v20, 1, v4) != 1)
    {
      uint64_t v22 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v32, v20, v4);
      sub_10021FBD8((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v5 + 8);
      v24(v22, v4);
      sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
      v24(v13, v4);
      sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
      if ((v23 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
    sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_10091C320);
    return 0;
  }
  sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
  if (v21(v20, 1, v4) != 1) {
    goto LABEL_6;
  }
  sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
LABEL_8:
  uint64_t v25 = *(int *)(type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0) + 20);
  uint64_t v26 = (void *)(v33 + v25);
  uint64_t v27 = *(void *)(v33 + v25 + 8);
  uint64_t v28 = (void *)(v34 + v25);
  uint64_t v29 = v28[1];
  if (v27)
  {
    if (v29 && (*v26 == *v28 && v27 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
      return 1;
    }
  }
  else if (!v29)
  {
    return 1;
  }
  return 0;
}

BOOL sub_100219A6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4 = *a1;
  int v5 = *a2;
  if (v4 == 2)
  {
    if (v5 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v6 = (v4 & 1) == 0;
    if (v5 == 2 || ((v6 ^ v5) & 1) == 0) {
      return 0;
    }
  }
  int v7 = a1[1];
  int v8 = a2[1];
  if (v7 == 2)
  {
    if (v8 != 2) {
      return 0;
    }
  }
  else
  {
    BOOL v9 = (v7 & 1) == 0;
    if (v8 == 2 || ((v9 ^ v8) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a2 + 2);
  if (v10)
  {
    if (!v11
      || (*((void *)a1 + 1) != *((void *)a2 + 1) || v10 != v11)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      return 0;
    }
  }
  else if (v11)
  {
    return 0;
  }
  uint64_t v12 = *((void *)a1 + 3);
  uint64_t v13 = *((void *)a2 + 3);
  if (v12)
  {
    if (v13)
    {
      if (sub_100219510(*((void *)a1 + 3), *((void *)a1 + 4), *((void *)a1 + 5), *((void *)a1 + 6), *((void *)a2 + 3), *((void *)a2 + 4), *((void *)a2 + 5), *((void *)a2 + 6)))goto LABEL_25; {
      return 0;
      }
    }
LABEL_23:
    sub_10021FE78(*((void *)a1 + 3));
    sub_10021FE78(v13);
    sub_10021C120(v12);
    sub_10021C120(v13);
    return 0;
  }
  if (v13) {
    goto LABEL_23;
  }
LABEL_25:
  uint64_t v15 = *((void *)a1 + 7);
  uint64_t v16 = *((void *)a2 + 7);

  return sub_100350034(v15, v16);
}

BOOL sub_100219C24(uint64_t a1, uint64_t a2)
{
  uint64_t v193 = a2;
  uint64_t v3 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v186 = *(void *)(v3 - 8);
  uint64_t v187 = v3;
  __chkstk_darwin(v3);
  uint64_t v179 = &v173[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v184 = sub_100094134(&qword_100910630);
  __chkstk_darwin(v184);
  id v188 = &v173[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_100094134(&qword_100910400);
  __chkstk_darwin(v6 - 8);
  unint64_t v185 = &v173[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  unint64_t v189 = &v173[-v9];
  __chkstk_darwin(v10);
  id v190 = &v173[-v11];
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v191 = &v173[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v15);
  unint64_t v183 = &v173[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  uint64_t v19 = &v173[-v18];
  uint64_t v20 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = &v173[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  id v181 = &v173[-v24];
  __chkstk_darwin(v25);
  uint64_t v182 = &v173[-v26];
  __chkstk_darwin(v27);
  uint64_t v29 = &v173[-v28];
  __chkstk_darwin(v30);
  uint64_t v32 = &v173[-v31];
  __chkstk_darwin(v33);
  uint64_t v35 = &v173[-v34];
  uint64_t v192 = a1;
  sub_1000BF710(a1, (uint64_t)&v173[-v34], (uint64_t *)&unk_100909A40);
  sub_1000BF710(v193, (uint64_t)v32, (uint64_t *)&unk_100909A40);
  uint64_t v180 = v15;
  uint64_t v36 = (uint64_t)&v19[*(int *)(v15 + 48)];
  sub_1000BF710((uint64_t)v35, (uint64_t)v19, (uint64_t *)&unk_100909A40);
  sub_1000BF710((uint64_t)v32, v36, (uint64_t *)&unk_100909A40);
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v37((uint64_t)v19, 1, v12) == 1)
  {
    sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v35, (uint64_t *)&unk_100909A40);
    if (v37(v36, 1, v12) == 1)
    {
      uint64_t v177 = v13 + 48;
      uint64_t v178 = v37;
      uint64_t v175 = v13;
      id v176 = v22;
      uint64_t v38 = v12;
      sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
      uint64_t v39 = v192;
      uint64_t v40 = v193;
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v41 = (uint64_t *)&unk_10091C320;
    uint64_t v42 = v19;
    goto LABEL_7;
  }
  sub_1000BF710((uint64_t)v19, (uint64_t)v29, (uint64_t *)&unk_100909A40);
  uint64_t v178 = v37;
  if (v37(v36, 1, v12) == 1)
  {
    sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
    sub_1000966BC((uint64_t)v35, (uint64_t *)&unk_100909A40);
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v29, v12);
    goto LABEL_6;
  }
  id v176 = v22;
  uint64_t v177 = v13 + 48;
  uint64_t v44 = v191;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 32))(v191, v36, v12);
  sub_10021FBD8((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
  int v174 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v175 = v13;
  uint64_t v45 = *(void (**)(unsigned char *, uint64_t))(v13 + 8);
  v45(v44, v12);
  sub_1000966BC((uint64_t)v32, (uint64_t *)&unk_100909A40);
  sub_1000966BC((uint64_t)v35, (uint64_t *)&unk_100909A40);
  uint64_t v38 = v12;
  v45(v29, v12);
  uint64_t v39 = v192;
  uint64_t v40 = v193;
  sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909A40);
  if ((v174 & 1) == 0) {
    return 0;
  }
LABEL_11:
  char v46 = (int *)type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  uint64_t v47 = v46;
  uint64_t v48 = v46[5];
  char v49 = (void *)(v39 + v48);
  char v50 = *(unsigned char *)(v39 + v48 + 8);
  NSString v51 = (void *)(v40 + v48);
  int v52 = *(unsigned __int8 *)(v40 + v48 + 8);
  if (v50)
  {
    if (!v52) {
      return 0;
    }
  }
  else
  {
    if (*v49 != *v51) {
      LOBYTE(v52) = 1;
    }
    if (v52) {
      return 0;
    }
  }
  uint64_t v53 = v46[6];
  uint64_t v54 = (void *)(v39 + v53);
  char v55 = *(unsigned char *)(v39 + v53 + 8);
  uint64_t v56 = (void *)(v40 + v53);
  int v57 = *(unsigned __int8 *)(v40 + v53 + 8);
  if (v55)
  {
    if (!v57) {
      return 0;
    }
  }
  else
  {
    if (*v54 != *v56) {
      LOBYTE(v57) = 1;
    }
    if (v57) {
      return 0;
    }
  }
  uint64_t v58 = v46[7];
  uint64_t v59 = (void *)(v39 + v58);
  char v60 = *(unsigned char *)(v39 + v58 + 8);
  uint64_t v61 = (void *)(v40 + v58);
  int v62 = *(unsigned __int8 *)(v40 + v58 + 8);
  if (v60)
  {
    if (!v62) {
      return 0;
    }
  }
  else
  {
    if (*v59 != *v61) {
      LOBYTE(v62) = 1;
    }
    if (v62) {
      return 0;
    }
  }
  uint64_t v63 = v46[8];
  uint64_t v64 = (void *)(v39 + v63);
  char v65 = *(unsigned char *)(v39 + v63 + 8);
  uint64_t v66 = (void *)(v40 + v63);
  int v67 = *(unsigned __int8 *)(v40 + v63 + 8);
  if (v65)
  {
    if (!v67) {
      return 0;
    }
  }
  else
  {
    if (*v64 != *v66) {
      LOBYTE(v67) = 1;
    }
    if (v67) {
      return 0;
    }
  }
  uint64_t v68 = v46[9];
  uint64_t v69 = (void *)(v39 + v68);
  uint64_t v70 = *(void *)(v39 + v68 + 8);
  uint64_t v71 = (void *)(v40 + v68);
  uint64_t v72 = v71[1];
  if (!v70)
  {
    if (v72) {
      return 0;
    }
    goto LABEL_42;
  }
  if (!v72) {
    return 0;
  }
  if (*v69 == *v71 && v70 == v72 || (v73 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0, (v73 & 1) != 0))
  {
LABEL_42:
    uint64_t v74 = v47[10];
    uint64_t v75 = *(void *)(v39 + v74);
    uint64_t v76 = *(void *)(v39 + v74 + 8);
    uint64_t v77 = *(void *)(v39 + v74 + 16);
    uint64_t v78 = *(void *)(v39 + v74 + 24);
    uint64_t v79 = (uint64_t *)(v40 + v74);
    uint64_t v80 = *v79;
    if (v75)
    {
      if (v80)
      {
        if ((sub_100219510(v75, v76, v77, v78, *v79, v79[1], v79[2], v79[3]) & 1) == 0) {
          return 0;
        }
LABEL_48:
        uint64_t v81 = v47[11];
        uint64_t v82 = (void *)(v39 + v81);
        uint64_t v83 = *(void *)(v39 + v81 + 8);
        uint64_t v84 = (void *)(v40 + v81);
        uint64_t v85 = v84[1];
        if (v83)
        {
          if (!v85) {
            return 0;
          }
          if (*v82 != *v84 || v83 != v85)
          {
            char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v86 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v85)
        {
          return 0;
        }
        uint64_t v87 = v47[12];
        uint64_t v88 = (void *)(v39 + v87);
        uint64_t v89 = *(void *)(v39 + v87 + 8);
        uint64_t v90 = (void *)(v40 + v87);
        uint64_t v91 = v90[1];
        if (v89)
        {
          if (!v91) {
            return 0;
          }
          uint64_t v92 = v40;
          if (*v88 != *v90 || v89 != v91)
          {
            char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v93 & 1) == 0) {
              return result;
            }
          }
        }
        else
        {
          uint64_t v92 = v40;
          if (v91) {
            return 0;
          }
        }
        uint64_t v94 = v47[13];
        uint64_t v95 = (void *)(v39 + v94);
        uint64_t v96 = *(void *)(v39 + v94 + 8);
        char v97 = (void *)(v92 + v94);
        uint64_t v98 = v97[1];
        if (v96)
        {
          if (!v98) {
            return 0;
          }
          if (*v95 != *v97 || v96 != v98)
          {
            char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v99 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v98)
        {
          return 0;
        }
        uint64_t v100 = v47[14];
        uint64_t v101 = (void *)(v39 + v100);
        uint64_t v102 = *(void *)(v39 + v100 + 8);
        uint64_t v103 = (void *)(v92 + v100);
        uint64_t v104 = v103[1];
        if (v102)
        {
          if (!v104) {
            return 0;
          }
          uint64_t v105 = v39;
          uint64_t v106 = v92;
          if (*v101 != *v103 || v102 != v104)
          {
            char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
            BOOL result = 0;
            if ((v107 & 1) == 0) {
              return result;
            }
          }
        }
        else
        {
          uint64_t v105 = v39;
          uint64_t v106 = v92;
          if (v104) {
            return 0;
          }
        }
        uint64_t v108 = v190;
        sub_1000BF710(v105 + v47[15], (uint64_t)v190, &qword_100910400);
        uint64_t v109 = v189;
        sub_1000BF710(v106 + v47[15], (uint64_t)v189, &qword_100910400);
        uint64_t v110 = v188;
        uint64_t v111 = (uint64_t)&v188[*(int *)(v184 + 48)];
        sub_1000BF710((uint64_t)v108, (uint64_t)v188, &qword_100910400);
        sub_1000BF710((uint64_t)v109, v111, &qword_100910400);
        uint64_t v112 = v187;
        uint64_t v113 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v186 + 48);
        if (v113((uint64_t)v110, 1, v187) == 1)
        {
          sub_1000966BC((uint64_t)v189, &qword_100910400);
          sub_1000966BC((uint64_t)v190, &qword_100910400);
          if (v113(v111, 1, v112) == 1)
          {
            sub_1000966BC((uint64_t)v110, &qword_100910400);
LABEL_83:
            uint64_t v117 = v182;
            sub_1000BF710(v105 + v47[16], (uint64_t)v182, (uint64_t *)&unk_100909A40);
            uint64_t v118 = v181;
            sub_1000BF710(v106 + v47[16], (uint64_t)v181, (uint64_t *)&unk_100909A40);
            uint64_t v119 = v183;
            uint64_t v120 = (uint64_t)&v183[*(int *)(v180 + 48)];
            sub_1000BF710((uint64_t)v117, (uint64_t)v183, (uint64_t *)&unk_100909A40);
            sub_1000BF710((uint64_t)v118, v120, (uint64_t *)&unk_100909A40);
            if (v178((uint64_t)v119, 1, v38) == 1)
            {
              sub_1000966BC((uint64_t)v181, (uint64_t *)&unk_100909A40);
              sub_1000966BC((uint64_t)v182, (uint64_t *)&unk_100909A40);
              if (v178(v120, 1, v38) == 1)
              {
                sub_1000966BC((uint64_t)v183, (uint64_t *)&unk_100909A40);
LABEL_90:
                if (sub_10034F69C(*(void *)(v105 + v47[17]), *(void *)(v106 + v47[17])))
                {
                  uint64_t v127 = v47[18];
                  int v128 = *(unsigned __int8 *)(v105 + v127);
                  int v129 = *(unsigned __int8 *)(v106 + v127);
                  if (v128 == 2)
                  {
                    if (v129 != 2) {
                      return 0;
                    }
                  }
                  else
                  {
                    BOOL result = 0;
                    BOOL v130 = (v128 & 1) == 0;
                    if (v129 == 2 || ((v130 ^ v129) & 1) == 0) {
                      return result;
                    }
                  }
                  uint64_t v131 = v47[19];
                  id v132 = (void *)(v105 + v131);
                  char v133 = *(unsigned char *)(v105 + v131 + 8);
                  long long v134 = (void *)(v106 + v131);
                  int v135 = *(unsigned __int8 *)(v106 + v131 + 8);
                  if (v133)
                  {
                    if (!v135) {
                      return 0;
                    }
                  }
                  else
                  {
                    if (*v132 != *v134) {
                      LOBYTE(v135) = 1;
                    }
                    if (v135) {
                      return 0;
                    }
                  }
                  uint64_t v136 = v47[20];
                  char v137 = (void *)(v105 + v136);
                  uint64_t v138 = *(void *)(v105 + v136 + 8);
                  id v139 = (void *)(v106 + v136);
                  uint64_t v140 = v139[1];
                  if (v138)
                  {
                    if (!v140) {
                      return 0;
                    }
                    if (*v137 != *v139 || v138 != v140)
                    {
                      char v141 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL result = 0;
                      if ((v141 & 1) == 0) {
                        return result;
                      }
                    }
                  }
                  else if (v140)
                  {
                    return 0;
                  }
                  uint64_t v142 = v47[21];
                  uint64_t v143 = (void *)(v105 + v142);
                  uint64_t v144 = *(void *)(v105 + v142 + 8);
                  id v145 = (void *)(v106 + v142);
                  uint64_t v146 = v145[1];
                  if (v144)
                  {
                    if (!v146) {
                      return 0;
                    }
                    if (*v143 != *v145 || v144 != v146)
                    {
                      char v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL result = 0;
                      if ((v147 & 1) == 0) {
                        return result;
                      }
                    }
                  }
                  else if (v146)
                  {
                    return 0;
                  }
                  uint64_t v148 = v47[22];
                  unsigned int v149 = (void *)(v105 + v148);
                  uint64_t v150 = *(void *)(v105 + v148 + 8);
                  id v151 = (void *)(v106 + v148);
                  uint64_t v152 = v151[1];
                  if (v150)
                  {
                    if (!v152) {
                      return 0;
                    }
                    if (*v149 != *v151 || v150 != v152)
                    {
                      char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      BOOL result = 0;
                      if ((v153 & 1) == 0) {
                        return result;
                      }
                    }
                  }
                  else if (v152)
                  {
                    return 0;
                  }
                  uint64_t v154 = v47[23];
                  id v155 = *(void **)(v105 + v154);
                  uint64_t v156 = *(void **)(v106 + v154);
                  if (v155)
                  {
                    if (!v156 || (sub_10034F5D4(v155, v156) & 1) == 0) {
                      return 0;
                    }
                  }
                  else if (v156)
                  {
                    return 0;
                  }
                  uint64_t v157 = v47[24];
                  int v158 = *(unsigned __int8 *)(v105 + v157);
                  int v159 = *(unsigned __int8 *)(v106 + v157);
                  if (v158 == 2)
                  {
                    if (v159 != 2) {
                      return 0;
                    }
                  }
                  else
                  {
                    BOOL result = 0;
                    BOOL v160 = (v158 & 1) == 0;
                    if (v159 == 2 || ((v160 ^ v159) & 1) == 0) {
                      return result;
                    }
                  }
                  uint64_t v161 = v47[25];
                  int v162 = *(unsigned __int8 *)(v105 + v161);
                  int v163 = *(unsigned __int8 *)(v106 + v161);
                  if (v162 == 2)
                  {
                    if (v163 != 2) {
                      return 0;
                    }
                  }
                  else
                  {
                    BOOL result = 0;
                    BOOL v164 = (v162 & 1) == 0;
                    if (v163 == 2 || ((v164 ^ v163) & 1) == 0) {
                      return result;
                    }
                  }
                  uint64_t v165 = v47[26];
                  int v166 = *(unsigned __int8 *)(v105 + v165);
                  int v167 = *(unsigned __int8 *)(v106 + v165);
                  if (v166 == 2)
                  {
                    if (v167 != 2) {
                      return 0;
                    }
                  }
                  else
                  {
                    BOOL result = 0;
                    BOOL v168 = (v166 & 1) == 0;
                    if (v167 == 2 || ((v168 ^ v167) & 1) == 0) {
                      return result;
                    }
                  }
                  uint64_t v169 = v47[27];
                  int v170 = *(unsigned __int8 *)(v105 + v169);
                  int v171 = *(unsigned __int8 *)(v106 + v169);
                  if (v170 != 2)
                  {
                    BOOL v172 = (v170 & 1) == 0;
                    return v171 != 2 && ((v172 ^ v171) & 1) != 0;
                  }
                  if (v171 == 2) {
                    return 1;
                  }
                }
                return 0;
              }
            }
            else
            {
              sub_1000BF710((uint64_t)v183, (uint64_t)v176, (uint64_t *)&unk_100909A40);
              if (v178(v120, 1, v38) != 1)
              {
                uint64_t v121 = v175;
                id v122 = v191;
                uint64_t v123 = v38;
                (*(void (**)(unsigned char *, uint64_t, uint64_t))(v175 + 32))(v191, v120, v38);
                sub_10021FBD8((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
                uint64_t v124 = (uint64_t)v176;
                char v125 = dispatch thunk of static Equatable.== infix(_:_:)();
                uint64_t v126 = *(void (**)(unsigned char *, uint64_t))(v121 + 8);
                v126(v122, v123);
                sub_1000966BC((uint64_t)v181, (uint64_t *)&unk_100909A40);
                sub_1000966BC((uint64_t)v182, (uint64_t *)&unk_100909A40);
                v126((unsigned char *)v124, v123);
                sub_1000966BC((uint64_t)v183, (uint64_t *)&unk_100909A40);
                if ((v125 & 1) == 0) {
                  return 0;
                }
                goto LABEL_90;
              }
              sub_1000966BC((uint64_t)v181, (uint64_t *)&unk_100909A40);
              sub_1000966BC((uint64_t)v182, (uint64_t *)&unk_100909A40);
              (*(void (**)(unsigned char *, uint64_t))(v175 + 8))(v176, v38);
            }
            uint64_t v41 = (uint64_t *)&unk_10091C320;
            uint64_t v42 = v183;
LABEL_7:
            sub_1000966BC((uint64_t)v42, v41);
            return 0;
          }
        }
        else
        {
          sub_1000BF710((uint64_t)v110, (uint64_t)v185, &qword_100910400);
          if (v113(v111, 1, v112) != 1)
          {
            uint64_t v114 = v179;
            sub_10021C1A0(v111, (uint64_t)v179, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            uint64_t v115 = v185;
            char v116 = sub_100219658((uint64_t)v185, (uint64_t)v114);
            sub_10021FC74((uint64_t)v114, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            sub_1000966BC((uint64_t)v189, &qword_100910400);
            sub_1000966BC((uint64_t)v190, &qword_100910400);
            sub_10021FC74((uint64_t)v115, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
            sub_1000966BC((uint64_t)v188, &qword_100910400);
            if ((v116 & 1) == 0) {
              return 0;
            }
            goto LABEL_83;
          }
          sub_1000966BC((uint64_t)v189, &qword_100910400);
          sub_1000966BC((uint64_t)v190, &qword_100910400);
          sub_10021FC74((uint64_t)v185, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
          uint64_t v110 = v188;
        }
        uint64_t v41 = &qword_100910630;
        uint64_t v42 = v110;
        goto LABEL_7;
      }
    }
    else if (!v80)
    {
      goto LABEL_48;
    }
    sub_10021FE78(v75);
    sub_10021FE78(v80);
    sub_10021C120(v75);
    sub_10021C120(v80);
    return 0;
  }
  return result;
}

uint64_t sub_10021ABE4(uint64_t a1, uint64_t a2)
{
  if ((sub_1003501C0(*(void *)a1, *(void *)a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v5) {
    return 0;
  }
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8) && v4 == v5
    || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
LABEL_9:
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    if (v8)
    {
      if (v9)
      {
        if (*(void *)(a1 + 24) != *(void *)(a2 + 24) || v8 != v9)
        {
          char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t result = 0;
          if ((v10 & 1) == 0) {
            return result;
          }
        }
LABEL_16:
        char v11 = *(unsigned char *)(a2 + 48);
        if (*(unsigned char *)(a1 + 48))
        {
          if ((*(unsigned char *)(a2 + 48) & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (*(void *)(a1 + 40) != *(void *)(a2 + 40)) {
            char v11 = 1;
          }
          if (v11) {
            return 0;
          }
        }
        return 1;
      }
    }
    else if (!v9)
    {
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

void *sub_10021ACD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a4;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v7 = (void *)(swift_bridgeObjectRetain() + 48);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v10 = *v7;
    long long v19 = *((_OWORD *)v7 - 1);
    uint64_t v20 = v10;
    id v11 = (id)v19;
    sub_10021616C((void **)&v19, a2, &v17);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return v8;
    }

    uint64_t v12 = v18;
    if (v18)
    {
      uint64_t v13 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100308F88(0, v8[2] + 1, 1, v8);
      }
      unint64_t v15 = v8[2];
      unint64_t v14 = v8[3];
      if (v15 >= v14 >> 1) {
        uint64_t v8 = sub_100308F88((void *)(v14 > 1), v15 + 1, 1, v8);
      }
      _OWORD v8[2] = v15 + 1;
      uint64_t v9 = &v8[2 * v15];
      void v9[4] = v13;
      v9[5] = v12;
    }
    v7 += 3;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_10021AE38(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = a1;
  unint64_t v38 = (unint64_t)NLEmbedding.vector(for:)(*(Swift::String *)&a1);
  if (!v38) {
    return 0;
  }
  uint64_t v8 = (void *)NLEmbedding.neighbors(for:maximumCount:distanceType:)();
  uint64_t v9 = (void *)v8[2];
  if ((uint64_t)v9 < a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_60;
  }
  while (1)
  {
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1) {
      uint64_t v8 = sub_10030AEEC((void *)(v10 > 1), v11 + 1, 1, v8);
    }
    _OWORD v8[2] = v11 + 1;
    uint64_t v12 = &v8[3 * v11 + 4];
    *uint64_t v12 = v7;
    v12[1] = (uint64_t)a2;
    v12[2] = 0;
    a2 = sub_1001D7A74((unint64_t)[a3 dimension], 0.0);
    uint64_t v7 = (uint64_t)sub_1001D7A74((unint64_t)[a3 dimension], 0.0);
    uint64_t v13 = v8[2];
    id v39 = a3;
    if (v13)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = sub_1001ECDE4(a2);
      }
      unint64_t v14 = 0;
      uint64_t v9 = a2 + 4;
      do
      {
        if (v14 >= v8[2]) {
          goto LABEL_59;
        }
        unint64_t v15 = &v8[3 * v14 + 4];
        uint64_t v16 = *v15;
        uint64_t v17 = (void *)v15[1];
        swift_bridgeObjectRetain();
        v18._uint64_t countAndFlagsBits = v16;
        v18._object = v17;
        a3 = (void *)NLEmbedding.vector(for:)(v18);
        swift_bridgeObjectRelease();
        if (a3)
        {
          uint64_t v19 = a3[2];
          if (v19)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v20 = a3[2];
              if (v20)
              {
LABEL_19:
                unint64_t v21 = 0;
                uint64_t v22 = *(void *)(v38 + 16);
                uint64_t v23 = 1;
                while (v22 != v21)
                {
                  if (v21 >= a2[2]) {
                    goto LABEL_54;
                  }
                  double v24 = *(double *)&a3[v21 + 4];
                  double v25 = *(double *)(v38 + 32 + 8 * v21) - v24;
                  if (*(double *)&v9[v21] < fabs(v25)) {
                    *(double *)&v9[v21] = v25;
                  }
                  if (v21 >= *(void *)(v7 + 16)) {
                    goto LABEL_55;
                  }
                  *(double *)(v7 + 8 * v21 + 32) = v24 + *(double *)(v7 + 8 * v21 + 32);
                  if (v23 == v19) {
                    goto LABEL_12;
                  }
                  ++v21;
                  if (v23++ == v20) {
                    goto LABEL_30;
                  }
                }
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
            }
            else
            {
              uint64_t v7 = (uint64_t)sub_1001ECDE4((void *)v7);
              uint64_t v20 = a3[2];
              if (v20) {
                goto LABEL_19;
              }
            }
LABEL_30:
            __break(1u);
            goto LABEL_33;
          }
LABEL_12:
          swift_bridgeObjectRelease();
        }
        ++v14;
      }
      while (v14 != v13);
      swift_bridgeObjectRelease();
    }
LABEL_33:
    swift_bridgeObjectRelease();
    int64_t v27 = *(void *)(v7 + 16);
    if (v27)
    {
      swift_bridgeObjectRetain();
      sub_1001DE4E0(0, v27, 0);
      uint64_t v28 = 0;
      a3 = _swiftEmptyArrayStorage;
      do
      {
        double v29 = *(double *)(v7 + 8 * v28 + 32);
        uint64_t v30 = v8[2];
        unint64_t v32 = _swiftEmptyArrayStorage[2];
        unint64_t v31 = _swiftEmptyArrayStorage[3];
        if (v32 >= v31 >> 1) {
          sub_1001DE4E0(v31 > 1, v32 + 1, 1);
        }
        ++v28;
        _swiftEmptyArrayStorage[2] = v32 + 1;
        *(double *)&_swiftEmptyArrayStorage[v32 + 4] = v29 / (double)v30;
      }
      while (v27 != v28);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      a3 = _swiftEmptyArrayStorage;
    }
    uint64_t v9 = sub_1001D7A74((unint64_t)[v39 dimension], 0.0);
    if (!a2[2]) {
      break;
    }
    uint64_t v7 = 0x1FFFFFFFFFF801;
    swift_bridgeObjectRetain();
    uint64_t v33 = (double *)(a2 + 4);
    double v34 = *((double *)a2 + 4);
    if (v34 >= 0.0) {
      double v35 = -v34;
    }
    else {
      double v35 = *v33;
    }
    if (v34 < 0.0) {
      double v36 = -v34;
    }
    else {
      double v36 = *v33;
    }
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_56;
    }
    if (v35 > v36)
    {
LABEL_57:
      __break(1u);
    }
    else if ((~COERCE__INT64(v36 - v35) & 0x7FF0000000000000) != 0)
    {
      while (1)
        swift_stdlib_random();
    }
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    uint64_t v8 = sub_10030AEEC(0, (int64_t)v9 + 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void *sub_10021B338(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (void **)(swift_bridgeObjectRetain() + 40);
  uint64_t v5 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v6 = (uint64_t)*(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_10021AE38(v6, v7, a2, 15);
    swift_bridgeObjectRelease();
    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = sub_10030AE70(0, v5[2] + 1, 1, v5);
      }
      unint64_t v10 = v5[2];
      unint64_t v9 = v5[3];
      if (v10 >= v9 >> 1) {
        uint64_t v5 = sub_10030AE70((void *)(v9 > 1), v10 + 1, 1, v5);
      }
      v5[2] = v10 + 1;
      v5[v10 + 4] = v8;
    }
    v4 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10021B45C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100911820);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_1000E4F40((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
  unint64_t v1 = Sequence.elements<A>(ofType:)();
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t result = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_4:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v4 = *(id *)(v2 + 32);
LABEL_7:
    uint64_t v5 = v4;
    swift_bridgeObjectRelease();
    sub_100363770(v5);
    uint64_t v7 = v6;
    id v8 = [v6 iCalendarDescription];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10021B5F0(void *a1)
{
  unint64_t v2 = self;
  id v3 = [v2 localizedStringForLabel:CNLabelHome];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v4 = String.lowercased()();
  swift_bridgeObjectRelease();
  id v5 = [v2 localizedStringForLabel:CNLabelWork];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v6 = String.lowercased()();
  swift_bridgeObjectRelease();
  id v7 = [v2 localizedStringForLabel:CNLabelSchool];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRelease();
  id v9 = [v2 localizedStringForLabel:CNLabelOther];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v10 = String.lowercased()();
  swift_bridgeObjectRelease();
  id v11 = [a1 title];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  sub_100215C4C(v13, v15, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_9;
  }
  id v20 = [a1 address];
  if (v20)
  {
    unint64_t v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v24 = 0;
  }
  sub_100215C4C(v22, v24, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
  uint64_t v17 = v25;
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  if (v27)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v29 = [a1 contactLabel];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;
    }
    else
    {
      uint64_t v31 = 0;
      uint64_t v33 = 0;
    }
    sub_100215C4C(v31, v33, v4._countAndFlagsBits, (uint64_t)v4._object, v6._countAndFlagsBits, (uint64_t)v6._object, v8._countAndFlagsBits, (uint64_t)v8._object, v10._countAndFlagsBits, (uint64_t)v10._object);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v37) {
      return v35;
    }
    else {
      return 0x6E776F6E6B6E753CLL;
    }
  }
  return v17;
}

void *sub_10021B960(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v32 = a3;
  uint64_t v6 = sub_100094134(&qword_1009103F8);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(0);
  uint64_t v25 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v30 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v24 = (uint64_t)&v24 - v11;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v29 = a1 & 0xC000000000000001;
    uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t v14 = 4;
    unint64_t v28 = a1;
    while (1)
    {
      id v16 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v14);
      uint64_t v17 = v16;
      a1 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      sub_1002133B4(v16, (uint64_t)v8);
      if (v4)
      {
        swift_errorRelease();
        uint64_t v4 = 0;
        uint64_t v18 = 1;
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v19 = v31;
      (*v27)(v8, v18, 1, v31);

      if ((*v26)(v8, 1, v19) == 1)
      {
        sub_1000966BC((uint64_t)v8, &qword_1009103F8);
      }
      else
      {
        uint64_t v20 = v24;
        sub_10021C1A0((uint64_t)v8, v24, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        sub_10021C1A0(v20, v30, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = (void *)sub_10030AE84(0, v13[2] + 1, 1, (unint64_t)v13);
        }
        unint64_t v22 = v13[2];
        unint64_t v21 = v13[3];
        if (v22 >= v21 >> 1) {
          uint64_t v13 = (void *)sub_10030AE84(v21 > 1, v22 + 1, 1, (unint64_t)v13);
        }
        void v13[2] = v22 + 1;
        sub_10021C1A0(v30, (uint64_t)v13+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
      }
      ++v14;
      BOOL v15 = a1 == v12;
      a1 = v28;
      if (v15)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_10021BCD8(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v22 = a1 & 0xC000000000000001;
    Swift::String v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = 4;
    uint64_t v20 = a3;
    while (1)
    {
      id v10 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v9);
      uint64_t v11 = v10;
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v9 - 4, 1)) {
        break;
      }
      sub_100212C0C(v10, a3, (uint64_t)v21);
      if (v4)
      {
        swift_errorRelease();

        uint64_t v4 = 0;
      }
      else
      {

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v8 = sub_10030AD60(0, v8[2] + 1, 1, v8);
        }
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1) {
          Swift::String v8 = sub_10030AD60((void *)(v13 > 1), v14 + 1, 1, v8);
        }
        _OWORD v8[2] = v14 + 1;
        BOOL v15 = &v8[8 * v14];
        long long v16 = v21[0];
        long long v17 = v21[1];
        long long v18 = v21[3];
        v15[4] = v21[2];
        uint64_t v15[5] = v18;
        void v15[2] = v16;
        v15[3] = v17;
        a3 = v20;
      }
      ++v9;
      if (v12 == v7) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  Swift::String v8 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_10021BE8C(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; uint64_t v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    id v28 = *(id *)(a2 + OBJC_IVAR____TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation_options);
    unint64_t v29 = v6 & 0xC000000000000001;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v8 = 4;
    uint64_t v27 = a3;
    uint64_t v24 = v7;
    unint64_t v25 = v6;
    while (1)
    {
      id v9 = v29 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v6 + 8 * v8);
      id v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      if ([v28 includeAccountType])
      {
        id v12 = [v10 accountTypeHost];
        id v13 = [v12 internalDescription];

        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        a3 = v27;
      }
      else
      {
        uint64_t v31 = 0;
        uint64_t v15 = 0;
      }
      uint64_t v16 = sub_1003ADEC8(a3);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_errorRelease();

        uint64_t v4 = 0;
      }
      else
      {
        unint64_t v17 = v16;
        swift_retain();
        long long v18 = a3;
        uint64_t v19 = sub_10021BCD8(v17, a2, v18);

        swift_bridgeObjectRelease();
        swift_release();

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = sub_10030AC38(0, v30[2] + 1, 1, v30);
        }
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        uint64_t v7 = v24;
        if (v21 >= v20 >> 1) {
          uint64_t v30 = sub_10030AC38((void *)(v20 > 1), v21 + 1, 1, v30);
        }
        _OWORD v30[2] = v21 + 1;
        unint64_t v22 = &v30[3 * v21];
        v22[4] = v31;
        v22[5] = v15;
        v22[6] = v19;
        unint64_t v6 = v25;
        a3 = v27;
      }
      ++v8;
      if (v11 == v7) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
  uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_22:
  swift_bridgeObjectRelease();
  return v30;
}

uint64_t sub_10021C120(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100910500);
}

uint64_t type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100910470);
}

uint64_t sub_10021C1A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_10021C208(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    id v12 = (uint64_t *)((char *)a1 + v11);
    id v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *id v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10021C38C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  }

  return swift_bridgeObjectRelease();
}

char *sub_10021C45C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10021C590(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  id v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)id v13 = *(void *)v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10021C73C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_10021C864(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  id v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)id v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10021CA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021CA14);
}

uint64_t sub_10021CA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10021CAE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021CAFC);
}

uint64_t sub_10021CAFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

void sub_10021CBC0()
{
  sub_10021CC70(319, (unint64_t *)&qword_100909F30, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10021CC70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_10021CCC4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v84 = v8;
    if (v9((char *)a2, 1, v7))
    {
      uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = a3[5];
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v12;
    uint64_t v15 = (char *)a2 + v12;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    uint64_t v16 = (char *)a1 + v13;
    unint64_t v17 = (char *)a2 + v13;
    *(void *)uint64_t v16 = *(void *)v17;
    v16[8] = v17[8];
    uint64_t v18 = a3[7];
    uint64_t v19 = a3[8];
    unint64_t v20 = (char *)a1 + v18;
    unint64_t v21 = (char *)a2 + v18;
    *(void *)unint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    unint64_t v22 = (char *)a1 + v19;
    uint64_t v23 = (char *)a2 + v19;
    *(void *)unint64_t v22 = *(void *)v23;
    v22[8] = v23[8];
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    unint64_t v29 = (char *)a1 + v25;
    uint64_t v30 = (char *)a2 + v25;
    uint64_t v31 = *(uint64_t *)((char *)a2 + v25);
    swift_bridgeObjectRetain();
    uint64_t v88 = v9;
    uint64_t v89 = v7;
    if (v31)
    {
      *(void *)unint64_t v29 = v31;
      *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
      *((void *)v29 + 3) = *((void *)v30 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v32 = *((_OWORD *)v30 + 1);
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
      *((_OWORD *)v29 + 1) = v32;
    }
    uint64_t v33 = a3[11];
    uint64_t v34 = a3[12];
    uint64_t v35 = (uint64_t *)((char *)a1 + v33);
    uint64_t v36 = (uint64_t *)((char *)a2 + v33);
    uint64_t v37 = v36[1];
    *uint64_t v35 = *v36;
    v35[1] = v37;
    unint64_t v38 = (uint64_t *)((char *)a1 + v34);
    id v39 = (uint64_t *)((char *)a2 + v34);
    uint64_t v40 = v39[1];
    *unint64_t v38 = *v39;
    v38[1] = v40;
    uint64_t v41 = a3[13];
    uint64_t v42 = a3[14];
    char v43 = (uint64_t *)((char *)a1 + v41);
    uint64_t v44 = (uint64_t *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *char v43 = *v44;
    v43[1] = v45;
    char v46 = (uint64_t *)((char *)a1 + v42);
    uint64_t v47 = (uint64_t *)((char *)a2 + v42);
    uint64_t v48 = v47[1];
    void *v46 = *v47;
    v46[1] = v48;
    uint64_t v49 = a3[15];
    char v86 = (char *)a2 + v49;
    __dst = (char *)a1 + v49;
    uint64_t v50 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v85(v86, 1, v50))
    {
      uint64_t v52 = sub_100094134(&qword_100910400);
      memcpy(__dst, v86, *(void *)(*(void *)(v52 - 8) + 64));
      uint64_t v54 = v88;
      uint64_t v53 = v89;
    }
    else
    {
      uint64_t v54 = v88;
      uint64_t v53 = v89;
      if (v88(v86, 1, v89))
      {
        uint64_t v55 = sub_100094134((uint64_t *)&unk_100909A40);
        memcpy(__dst, v86, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v84 + 16))(__dst, v86, v89);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(__dst, 0, 1, v89);
      }
      uint64_t v56 = *(int *)(v50 + 20);
      int v57 = &__dst[v56];
      uint64_t v58 = &v86[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)int v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      char v60 = *(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
      swift_bridgeObjectRetain();
      v60(__dst, 0, 1, v50);
    }
    uint64_t v61 = a3[16];
    int v62 = (char *)a1 + v61;
    uint64_t v63 = (char *)a2 + v61;
    if (v54((char *)a2 + v61, 1, v53))
    {
      uint64_t v64 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v62, v63, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v84 + 56))(v62, 0, 1, v53);
    }
    uint64_t v65 = a3[18];
    *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
    *((unsigned char *)a1 + v65) = *((unsigned char *)a2 + v65);
    uint64_t v66 = a3[19];
    uint64_t v67 = a3[20];
    uint64_t v68 = (char *)a1 + v66;
    uint64_t v69 = (char *)a2 + v66;
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    uint64_t v70 = (uint64_t *)((char *)a1 + v67);
    uint64_t v71 = (uint64_t *)((char *)a2 + v67);
    uint64_t v72 = v71[1];
    *uint64_t v70 = *v71;
    v70[1] = v72;
    uint64_t v73 = a3[21];
    uint64_t v74 = a3[22];
    uint64_t v75 = (uint64_t *)((char *)a1 + v73);
    uint64_t v76 = (uint64_t *)((char *)a2 + v73);
    uint64_t v77 = v76[1];
    void *v75 = *v76;
    v75[1] = v77;
    uint64_t v78 = (uint64_t *)((char *)a1 + v74);
    uint64_t v79 = (uint64_t *)((char *)a2 + v74);
    uint64_t v80 = v79[1];
    void *v78 = *v79;
    v78[1] = v80;
    uint64_t v81 = a3[24];
    *(uint64_t *)((char *)a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    *((unsigned char *)a1 + v81) = *((unsigned char *)a2 + v81);
    uint64_t v82 = a3[26];
    *((unsigned char *)a1 + a3[25]) = *((unsigned char *)a2 + a3[25]);
    *((unsigned char *)a1 + v82) = *((unsigned char *)a2 + v82);
    *((unsigned char *)a1 + a3[27]) = *((unsigned char *)a2 + a3[27]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10021D26C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[10]))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[15];
  uint64_t v8 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    if (!v6(v7, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + a2[16];
  if (!v6(v9, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_10021D4C4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v82 = v7;
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = &a1[v11];
  uint64_t v15 = &a2[v11];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  unint64_t v20 = &a1[v17];
  unint64_t v21 = &a2[v17];
  *(void *)unint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a3[10];
  uint64_t v24 = &a1[v22];
  uint64_t v25 = &a2[v22];
  uint64_t v26 = *((void *)v25 + 1);
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = v26;
  uint64_t v27 = &a1[v23];
  uint64_t v28 = &a2[v23];
  uint64_t v29 = *(void *)&a2[v23];
  swift_bridgeObjectRetain();
  char v86 = v8;
  uint64_t v87 = v6;
  if (v29)
  {
    *(void *)uint64_t v27 = v29;
    *(_OWORD *)(v27 + 8) = *(_OWORD *)(v28 + 8);
    *((void *)v27 + 3) = *((void *)v28 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *((_OWORD *)v28 + 1);
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    *((_OWORD *)v27 + 1) = v30;
  }
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v31];
  uint64_t v34 = &a2[v31];
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = *(void *)v34;
  *((void *)v33 + 1) = v35;
  uint64_t v36 = &a1[v32];
  uint64_t v37 = &a2[v32];
  uint64_t v38 = *((void *)v37 + 1);
  *(void *)uint64_t v36 = *(void *)v37;
  *((void *)v36 + 1) = v38;
  uint64_t v39 = a3[13];
  uint64_t v40 = a3[14];
  uint64_t v41 = &a1[v39];
  uint64_t v42 = &a2[v39];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = &a1[v40];
  uint64_t v45 = &a2[v40];
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = v46;
  uint64_t v47 = a3[15];
  uint64_t v84 = &a2[v47];
  __dst = &a1[v47];
  uint64_t v48 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v83(v84, 1, v48))
  {
    uint64_t v50 = sub_100094134(&qword_100910400);
    memcpy(__dst, v84, *(void *)(*(void *)(v50 - 8) + 64));
    uint64_t v52 = v86;
    uint64_t v51 = v87;
  }
  else
  {
    uint64_t v52 = v86;
    uint64_t v51 = v87;
    if (v86(v84, 1, v87))
    {
      uint64_t v53 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(__dst, v84, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v82 + 16))(__dst, v84, v87);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(__dst, 0, 1, v87);
    }
    uint64_t v54 = *(int *)(v48 + 20);
    uint64_t v55 = &__dst[v54];
    uint64_t v56 = &v84[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56);
    swift_bridgeObjectRetain();
    v58(__dst, 0, 1, v48);
  }
  uint64_t v59 = a3[16];
  char v60 = &a1[v59];
  uint64_t v61 = &a2[v59];
  if (v52(&a2[v59], 1, v51))
  {
    uint64_t v62 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v60, v61, v51);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v60, 0, 1, v51);
  }
  uint64_t v63 = a3[18];
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  a1[v63] = a2[v63];
  uint64_t v64 = a3[19];
  uint64_t v65 = a3[20];
  uint64_t v66 = &a1[v64];
  uint64_t v67 = &a2[v64];
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = &a1[v65];
  uint64_t v69 = &a2[v65];
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = v70;
  uint64_t v71 = a3[21];
  uint64_t v72 = a3[22];
  uint64_t v73 = &a1[v71];
  uint64_t v74 = &a2[v71];
  uint64_t v75 = *((void *)v74 + 1);
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = v75;
  uint64_t v76 = &a1[v72];
  uint64_t v77 = &a2[v72];
  uint64_t v78 = *((void *)v77 + 1);
  *(void *)uint64_t v76 = *(void *)v77;
  *((void *)v76 + 1) = v78;
  uint64_t v79 = a3[24];
  *(void *)&a1[a3[23]] = *(void *)&a2[a3[23]];
  a1[v79] = a2[v79];
  uint64_t v80 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  a1[v80] = a2[v80];
  a1[a3[27]] = a2[a3[27]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_10021DA1C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  uint64_t v92 = v8;
  int v10 = v8(a2, 1, v6);
  uint64_t v90 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(void *)v14;
  v13[8] = v14[8];
  *(void *)uint64_t v13 = v15;
  uint64_t v16 = a3[6];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = *(void *)v18;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = a3[7];
  unint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  v21[8] = v22[8];
  *(void *)unint64_t v21 = v23;
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  long long v30 = &a2[v28];
  *(void *)uint64_t v29 = *(void *)v30;
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &a2[v31];
  uint64_t v34 = *(void *)&a2[v31];
  uint64_t v91 = v6;
  if (*(void *)&a1[v31])
  {
    if (v34)
    {
      *(void *)uint64_t v32 = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v32 + 1) = *((void *)v33 + 1);
      *((void *)v32 + 2) = *((void *)v33 + 2);
      *((void *)v32 + 3) = *((void *)v33 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10021E2B0((uint64_t)&a1[v31]);
      long long v35 = *((_OWORD *)v33 + 1);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v35;
    }
  }
  else if (v34)
  {
    *(void *)uint64_t v32 = v34;
    *((void *)v32 + 1) = *((void *)v33 + 1);
    *((void *)v32 + 2) = *((void *)v33 + 2);
    *((void *)v32 + 3) = *((void *)v33 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v36 = *((_OWORD *)v33 + 1);
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v36;
  }
  uint64_t v37 = a3[11];
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[12];
  uint64_t v41 = &a1[v40];
  uint64_t v42 = &a2[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  uint64_t v47 = &a1[v46];
  uint64_t v48 = &a2[v46];
  *(void *)uint64_t v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[15];
  uint64_t v50 = &a1[v49];
  uint64_t v51 = &a2[v49];
  uint64_t v52 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v53 = *(void *)(v52 - 8);
  uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v55 = v54(v50, 1, v52);
  int v56 = v54(v51, 1, v52);
  if (!v55)
  {
    if (v56)
    {
      sub_10021FC74((uint64_t)v50, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
      goto LABEL_21;
    }
    uint64_t v57 = v91;
    int v60 = v92(v50, 1, v91);
    int v61 = v92(v51, 1, v91);
    if (v60)
    {
      if (!v61)
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v50, v51, v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v50, 0, 1, v91);
LABEL_30:
        uint64_t v67 = *(int *)(v52 + 20);
        uint64_t v68 = &v50[v67];
        uint64_t v69 = &v51[v67];
        *(void *)uint64_t v68 = *(void *)v69;
        *((void *)v68 + 1) = *((void *)v69 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
    else
    {
      if (!v61)
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 24))(v50, v51, v91);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v50, v91);
    }
    uint64_t v66 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v50, v51, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_30;
  }
  if (v56)
  {
LABEL_21:
    uint64_t v59 = sub_100094134(&qword_100910400);
    memcpy(v50, v51, *(void *)(*(void *)(v59 - 8) + 64));
    uint64_t v57 = v91;
    goto LABEL_31;
  }
  uint64_t v57 = v91;
  if (v92(v51, 1, v91))
  {
    uint64_t v58 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v50, v51, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v50, v51, v91);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v50, 0, 1, v91);
  }
  uint64_t v62 = *(int *)(v52 + 20);
  uint64_t v63 = &v50[v62];
  uint64_t v64 = &v51[v62];
  *(void *)uint64_t v63 = *(void *)v64;
  *((void *)v63 + 1) = *((void *)v64 + 1);
  uint64_t v65 = *(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56);
  swift_bridgeObjectRetain();
  v65(v50, 0, 1, v52);
LABEL_31:
  uint64_t v70 = a3[16];
  uint64_t v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  int v73 = v92(&a1[v70], 1, v57);
  int v74 = v92(v72, 1, v57);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(char *, char *, uint64_t))(v90 + 24))(v71, v72, v57);
      goto LABEL_37;
    }
    (*(void (**)(char *, uint64_t))(v90 + 8))(v71, v57);
    goto LABEL_36;
  }
  if (v74)
  {
LABEL_36:
    uint64_t v75 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v71, v72, v57);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v71, 0, 1, v57);
LABEL_37:
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[18]] = a2[a3[18]];
  uint64_t v76 = a3[19];
  uint64_t v77 = &a1[v76];
  uint64_t v78 = &a2[v76];
  char v79 = v78[8];
  *(void *)uint64_t v77 = *(void *)v78;
  v77[8] = v79;
  uint64_t v80 = a3[20];
  uint64_t v81 = &a1[v80];
  uint64_t v82 = &a2[v80];
  *(void *)uint64_t v81 = *(void *)v82;
  *((void *)v81 + 1) = *((void *)v82 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v83 = a3[21];
  uint64_t v84 = &a1[v83];
  uint64_t v85 = &a2[v83];
  *(void *)uint64_t v84 = *(void *)v85;
  *((void *)v84 + 1) = *((void *)v85 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v86 = a3[22];
  uint64_t v87 = &a1[v86];
  uint64_t v88 = &a2[v86];
  *(void *)uint64_t v87 = *(void *)v88;
  *((void *)v87 + 1) = *((void *)v88 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[23]] = *(void *)&a2[a3[23]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[24]] = a2[a3[24]];
  a1[a3[25]] = a2[a3[25]];
  a1[a3[26]] = a2[a3[26]];
  a1[a3[27]] = a2[a3[27]];
  return a1;
}

uint64_t sub_10021E2B0(uint64_t a1)
{
  return a1;
}

char *sub_10021E2E4(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v48 = v7;
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[5];
  uint64_t v11 = a3[6];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = &a1[v11];
  uint64_t v15 = &a2[v11];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = &a1[v16];
  uint64_t v19 = &a2[v16];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  uint64_t v20 = &a1[v17];
  unint64_t v21 = &a2[v17];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  uint64_t v26 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v26] = *(_OWORD *)&a2[v26];
  uint64_t v27 = a3[14];
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  uint64_t v28 = a3[15];
  uint64_t v29 = &a1[v28];
  long long v30 = &a2[v28];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  uint64_t v31 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = sub_100094134(&qword_100910400);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    if (v8(v30, 1, v6))
    {
      uint64_t v34 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v29, v30, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v29, 0, 1, v6);
    }
    *(_OWORD *)&v29[*(int *)(v31 + 20)] = *(_OWORD *)&v30[*(int *)(v31 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v35 = a3[16];
  long long v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  if (v8(&a2[v35], 1, v6))
  {
    uint64_t v38 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v36, v37, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v36, 0, 1, v6);
  }
  uint64_t v39 = a3[18];
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  a1[v39] = a2[v39];
  uint64_t v40 = a3[19];
  uint64_t v41 = a3[20];
  uint64_t v42 = &a1[v40];
  uint64_t v43 = &a2[v40];
  *(void *)uint64_t v42 = *(void *)v43;
  v42[8] = v43[8];
  *(_OWORD *)&a1[v41] = *(_OWORD *)&a2[v41];
  uint64_t v44 = a3[22];
  *(_OWORD *)&a1[a3[21]] = *(_OWORD *)&a2[a3[21]];
  *(_OWORD *)&a1[v44] = *(_OWORD *)&a2[v44];
  uint64_t v45 = a3[24];
  *(void *)&a1[a3[23]] = *(void *)&a2[a3[23]];
  a1[v45] = a2[v45];
  uint64_t v46 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  a1[v46] = a2[v46];
  a1[a3[27]] = a2[a3[27]];
  return a1;
}

char *sub_10021E748(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v100 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = &a1[v18];
  unint64_t v21 = &a2[v18];
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = &a1[v19];
  uint64_t v23 = &a2[v19];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  uint64_t v24 = a3[9];
  long long v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v28 = *(void *)v26;
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)long long v25 = v28;
  *((void *)v25 + 1) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[10];
  uint64_t v30 = (uint64_t)&a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v101 = v8;
  uint64_t v102 = v6;
  if (*(void *)&a1[v29])
  {
    if (*(void *)v31)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      swift_bridgeObjectRelease();
      *(_OWORD *)(v30 + 8) = *(_OWORD *)(v31 + 8);
      *(void *)(v30 + 24) = *((void *)v31 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_10021E2B0(v30);
  }
  long long v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(_OWORD *)(v30 + 16) = v32;
LABEL_12:
  uint64_t v33 = a3[11];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  *(void *)uint64_t v34 = v37;
  *((void *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[12];
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  uint64_t v42 = *(void *)v40;
  uint64_t v41 = *((void *)v40 + 1);
  *(void *)uint64_t v39 = v42;
  *((void *)v39 + 1) = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[13];
  uint64_t v44 = &a1[v43];
  uint64_t v45 = &a2[v43];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  *(void *)uint64_t v44 = v47;
  *((void *)v44 + 1) = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = a3[14];
  uint64_t v49 = &a1[v48];
  uint64_t v50 = &a2[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[15];
  uint64_t v54 = &a1[v53];
  int v55 = &a2[v53];
  uint64_t v56 = type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (v60)
    {
      sub_10021FC74((uint64_t)v54, type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
      goto LABEL_18;
    }
    uint64_t v62 = v101;
    uint64_t v61 = v102;
    int v65 = v101(v54, 1, v102);
    int v66 = v101(v55, 1, v102);
    if (v65)
    {
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v54, v55, v102);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v54, 0, 1, v102);
LABEL_28:
        uint64_t v68 = *(int *)(v56 + 20);
        uint64_t v69 = &v54[v68];
        uint64_t v70 = &v55[v68];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        *(void *)uint64_t v69 = v72;
        *((void *)v69 + 1) = v71;
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      if (!v66)
      {
        (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v54, v55, v102);
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v100 + 8))(v54, v102);
    }
    uint64_t v67 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v54, v55, *(void *)(*(void *)(v67 - 8) + 64));
    goto LABEL_28;
  }
  if (v60)
  {
LABEL_18:
    uint64_t v64 = sub_100094134(&qword_100910400);
    memcpy(v54, v55, *(void *)(*(void *)(v64 - 8) + 64));
    uint64_t v62 = v101;
    uint64_t v61 = v102;
    goto LABEL_29;
  }
  uint64_t v62 = v101;
  uint64_t v61 = v102;
  if (v101(v55, 1, v102))
  {
    uint64_t v63 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v54, v55, *(void *)(*(void *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v54, v55, v102);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v54, 0, 1, v102);
  }
  *(_OWORD *)&v54[*(int *)(v56 + 20)] = *(_OWORD *)&v55[*(int *)(v56 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_29:
  uint64_t v73 = a3[16];
  int v74 = &a1[v73];
  uint64_t v75 = &a2[v73];
  int v76 = v62(&a1[v73], 1, v61);
  int v77 = v62(v75, 1, v61);
  if (!v76)
  {
    if (!v77)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 40))(v74, v75, v61);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))(v74, v61);
    goto LABEL_34;
  }
  if (v77)
  {
LABEL_34:
    uint64_t v78 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v74, v75, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v74, v75, v61);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v74, 0, 1, v61);
LABEL_35:
  *(void *)&a1[a3[17]] = *(void *)&a2[a3[17]];
  swift_bridgeObjectRelease();
  uint64_t v79 = a3[19];
  a1[a3[18]] = a2[a3[18]];
  uint64_t v80 = &a1[v79];
  uint64_t v81 = &a2[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  v80[8] = v81[8];
  uint64_t v82 = a3[20];
  uint64_t v83 = &a1[v82];
  uint64_t v84 = &a2[v82];
  uint64_t v86 = *(void *)v84;
  uint64_t v85 = *((void *)v84 + 1);
  *(void *)uint64_t v83 = v86;
  *((void *)v83 + 1) = v85;
  swift_bridgeObjectRelease();
  uint64_t v87 = a3[21];
  uint64_t v88 = &a1[v87];
  uint64_t v89 = &a2[v87];
  uint64_t v91 = *(void *)v89;
  uint64_t v90 = *((void *)v89 + 1);
  *(void *)uint64_t v88 = v91;
  *((void *)v88 + 1) = v90;
  swift_bridgeObjectRelease();
  uint64_t v92 = a3[22];
  char v93 = &a1[v92];
  uint64_t v94 = &a2[v92];
  uint64_t v96 = *(void *)v94;
  uint64_t v95 = *((void *)v94 + 1);
  *(void *)char v93 = v96;
  *((void *)v93 + 1) = v95;
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[23]] = *(void *)&a2[a3[23]];
  swift_bridgeObjectRelease();
  uint64_t v97 = a3[25];
  a1[a3[24]] = a2[a3[24]];
  a1[v97] = a2[v97];
  uint64_t v98 = a3[27];
  a1[a3[26]] = a2[a3[26]];
  a1[v98] = a2[v98];
  return a1;
}

uint64_t sub_10021EEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021EED4);
}

uint64_t sub_10021EED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_100094134(&qword_100910400);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 60);
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 68));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_10021EFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021F004);
}

uint64_t sub_10021F004(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_100094134(&qword_100910400);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 68)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 60);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10021F11C()
{
  sub_10021CC70(319, (unint64_t *)&qword_100909F30, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_10021CC70(319, (unint64_t *)&unk_100910510, (void (*)(uint64_t))type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 24) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = v6[1];
    *(_OWORD *)(a1 + 24) = *v6;
    *(_OWORD *)(a1 + 40) = v7;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v5)
    {
      *(void *)(a1 + 24) = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_10021E2B0(a1 + 24);
      long long v7 = *(_OWORD *)(a2 + 40);
      *uint64_t v4 = *v6;
      *(_OWORD *)(a1 + 40) = v7;
    }
  }
  else if (v5)
  {
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    *uint64_t v4 = *v6;
    *(_OWORD *)(a1 + 40) = v8;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  if (!v5)
  {
    sub_10021E2B0(a1 + 24);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v6;
    goto LABEL_6;
  }
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.List()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.List;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter()
{
  return &type metadata for RDStoreControllerExporter;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.Account()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s7remindd25RDStoreControllerExporterO21DistributedEvaluationC7AccountVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.Account(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for RDStoreControllerExporter.DistributedEvaluation.Account(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Account()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account;
}

uint64_t destroy for RDStoreControllerExporter.DistributedEvaluation.ExportResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  return a1;
}

__n128 initializeWithTake for RDDARequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.ExportResult()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult;
}

unint64_t sub_10021FADC()
{
  unint64_t result = qword_1009105A0;
  if (!qword_1009105A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009105A0);
  }
  return result;
}

unint64_t sub_10021FB30()
{
  unint64_t result = qword_1009105B8;
  if (!qword_1009105B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009105B8);
  }
  return result;
}

unint64_t sub_10021FB84()
{
  unint64_t result = qword_1009105C8;
  if (!qword_1009105C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009105C8);
  }
  return result;
}

uint64_t sub_10021FBD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10021FC20()
{
  unint64_t result = qword_1009105E0;
  if (!qword_1009105E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009105E0);
  }
  return result;
}

uint64_t sub_10021FC74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10021FCD4()
{
  unint64_t result = qword_1009105E8;
  if (!qword_1009105E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009105E8);
  }
  return result;
}

uint64_t sub_10021FD28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10021FD90()
{
  unint64_t result = qword_100910610;
  if (!qword_100910610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910610);
  }
  return result;
}

uint64_t sub_10021FDE4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_1009105F8);
    sub_10021FBD8(a2, (void (*)(uint64_t))type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10021FE78(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10021FEB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746E756F636361 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x614C6D6574737973 && a2 == 0xEE0065676175676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001007CED30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007CED50)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022008C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_100910700);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_10021FADC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100094134(&qword_1009105A8);
    char v30 = 0;
    sub_100221EB0(&qword_100910708, &qword_1009105A8, (void (*)(void))sub_100221F1C);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v31;
    char v29 = 1;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v25 = v10;
    uint64_t v26 = a2;
    char v28 = 2;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v24 = v13;
    char v27 = 3;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v17 = v8;
    char v19 = v18;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    uint64_t v21 = v25;
    uint64_t v22 = v26;
    *uint64_t v26 = v9;
    v22[1] = v21;
    uint64_t v23 = v24;
    _OWORD v22[2] = v12;
    v22[3] = v23;
    v22[4] = v15;
    v22[5] = v16;
    *((unsigned char *)v22 + 48) = v19 & 1;
  }
  return result;
}

uint64_t sub_10022038C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737473696CLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100220468(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_1009106C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[4];
  sub_1000C0DE0(a1, a1[3]);
  sub_100221DB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9[31] = 0;
    uint64_t v7 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    sub_100094134(&qword_1009106D0);
    v9[30] = 1;
    sub_100221EB0(&qword_1009106D8, &qword_1009106D0, (void (*)(void))sub_100221E08);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_100220680(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6465726168537369 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x70756F72477369 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001007CEDD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7265646E696D6572 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10022089C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_100910678);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_100221CCC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10021C120(0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v28) = 0;
    int v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 1;
    int v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v28) = 2;
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v13 = v12;
    uint64_t v26 = v11;
    char v33 = 3;
    sub_10021FCD4();
    swift_bridgeObjectRetain();
    uint64_t v27 = v13;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v23 = v10;
    int v32 = v9;
    uint64_t v24 = a2;
    uint64_t v25 = v6;
    uint64_t v15 = v28;
    uint64_t v14 = v29;
    uint64_t v17 = v30;
    uint64_t v16 = v31;
    sub_100094134(&qword_100910688);
    char v33 = 4;
    sub_10021FE78(v15);
    sub_100221D20(&qword_100910690, &qword_100910698);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
    uint64_t v18 = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v19 = v27;
    swift_bridgeObjectRetain();
    sub_10021FE78(v15);
    sub_10021C120(v15);
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    sub_10021C120(v15);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = v24;
    *uint64_t v24 = v32;
    v21[1] = v23;
    *((void *)v21 + 1) = v26;
    *((void *)v21 + 2) = v19;
    *((void *)v21 + 3) = v15;
    *((void *)v21 + 4) = v14;
    *((void *)v21 + 5) = v17;
    *((void *)v21 + 6) = v16;
    *((void *)v21 + 7) = v18;
  }
  return result;
}

uint64_t sub_100220C9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007CED70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001007CED90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x664F796144657564 && a2 == 0xEC0000006B656557 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007CEDB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C6153656C746974 && a2 == 0xEF68736148646574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001007CEDD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65636E65746E6573 && a2 == 0xEC00000063655632 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007CEDF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001007CEE10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4479616C70736964 && a2 == 0xEB00000000657461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6974656C706D6F63 && a2 == 0xEE00657461446E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7461446D72616C61 && a2 == 0xEA00000000007365 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x656767616C467369 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001007CEE30 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001007CEE50 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001007CEE70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 18;
  }
  else if (a1 == 0x656D686361747461 && a2 == 0xEE0073495455746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 19;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001007CEE90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 20;
  }
  else if (a1 == 0x746E657261507369 && a2 == 0xEC0000006B736154 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 21;
  }
  else if (a1 == 0x7361746275537369 && a2 == 0xE90000000000006BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 22;
  }
  else if (a1 == 0x4172657355736168 && a2 == 0xEF79746976697463)
  {
    swift_bridgeObjectRelease();
    return 23;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 23;
    }
    else {
      return 24;
    }
  }
}

uint64_t sub_1002216C4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656E6F7A656D6974 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002217A8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E69646465626D65 && a2 == 0xEA00000000007367;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65676175676E616CLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10022190C(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_100910638);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_100221B8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100094134(&qword_100910648);
    v9[15] = 0;
    sub_100221BE0(&qword_100910650, &qword_100910658);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    v9[13] = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_100221B8C()
{
  unint64_t result = qword_100910640;
  if (!qword_100910640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910640);
  }
  return result;
}

uint64_t sub_100221BE0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_100910648);
    sub_100221C6C(a2, (uint64_t *)&unk_100914330);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100221C6C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100221CCC()
{
  unint64_t result = qword_100910680;
  if (!qword_100910680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910680);
  }
  return result;
}

uint64_t sub_100221D20(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(&qword_100910688);
    sub_10021FBD8(a2, (void (*)(uint64_t))type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100221DB4()
{
  unint64_t result = qword_1009106C8;
  if (!qword_1009106C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009106C8);
  }
  return result;
}

unint64_t sub_100221E08()
{
  unint64_t result = qword_1009106E0;
  if (!qword_1009106E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009106E0);
  }
  return result;
}

unint64_t sub_100221E5C()
{
  unint64_t result = qword_1009106F8;
  if (!qword_1009106F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009106F8);
  }
  return result;
}

uint64_t sub_100221EB0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100221F1C()
{
  unint64_t result = qword_100910710;
  if (!qword_100910710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910710);
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Account.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100222050);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.List.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100222154);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.FuzzedEmbeddings.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE9) {
    goto LABEL_17;
  }
  if (a2 + 23 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 23) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 23;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 23;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x18;
  int v8 = v6 - 24;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 23 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 23) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE8)
  {
    unsigned int v6 = ((a2 - 233) >> 8) + 1;
    *unint64_t result = a2 + 23;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002222E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 23;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.Reminder.CodingKeys;
}

unsigned char *_s7remindd25RDStoreControllerExporterO21DistributedEvaluationC7AccountV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002223ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.AlarmDate.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002224F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys()
{
  return &type metadata for RDStoreControllerExporter.DistributedEvaluation.ExportResult.CodingKeys;
}

unint64_t sub_10022252C()
{
  unint64_t result = qword_100910718;
  if (!qword_100910718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910718);
  }
  return result;
}

unint64_t sub_100222584()
{
  unint64_t result = qword_100910720;
  if (!qword_100910720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910720);
  }
  return result;
}

unint64_t sub_1002225DC()
{
  unint64_t result = qword_100910728;
  if (!qword_100910728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910728);
  }
  return result;
}

unint64_t sub_100222634()
{
  unint64_t result = qword_100910730;
  if (!qword_100910730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910730);
  }
  return result;
}

unint64_t sub_10022268C()
{
  unint64_t result = qword_100910738;
  if (!qword_100910738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910738);
  }
  return result;
}

unint64_t sub_1002226E4()
{
  unint64_t result = qword_100910740;
  if (!qword_100910740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910740);
  }
  return result;
}

unint64_t sub_10022273C()
{
  unint64_t result = qword_100910748;
  if (!qword_100910748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910748);
  }
  return result;
}

unint64_t sub_100222794()
{
  unint64_t result = qword_100910750;
  if (!qword_100910750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910750);
  }
  return result;
}

unint64_t sub_1002227EC()
{
  unint64_t result = qword_100910758;
  if (!qword_100910758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910758);
  }
  return result;
}

unint64_t sub_100222844()
{
  unint64_t result = qword_100910760;
  if (!qword_100910760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910760);
  }
  return result;
}

unint64_t sub_10022289C()
{
  unint64_t result = qword_100910768;
  if (!qword_100910768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910768);
  }
  return result;
}

unint64_t sub_1002228F4()
{
  unint64_t result = qword_100910770;
  if (!qword_100910770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910770);
  }
  return result;
}

unint64_t sub_10022294C()
{
  unint64_t result = qword_100910778;
  if (!qword_100910778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910778);
  }
  return result;
}

unint64_t sub_1002229A4()
{
  unint64_t result = qword_100910780;
  if (!qword_100910780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910780);
  }
  return result;
}

unint64_t sub_1002229FC()
{
  unint64_t result = qword_100910788;
  if (!qword_100910788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910788);
  }
  return result;
}

unint64_t sub_100222A54()
{
  unint64_t result = qword_100910790;
  if (!qword_100910790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910790);
  }
  return result;
}

unint64_t sub_100222AAC()
{
  unint64_t result = qword_100910798;
  if (!qword_100910798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100910798);
  }
  return result;
}

unint64_t sub_100222B04()
{
  unint64_t result = qword_1009107A0;
  if (!qword_1009107A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009107A0);
  }
  return result;
}

uint64_t sub_100222B5C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009107A8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009107A8);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t NSURL.rd_isExcludedFromBackup.getter()
{
  v12[3] = swift_getObjectType();
  uint64_t v0 = type metadata accessor for URLResourceValues();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  int v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  __chkstk_darwin(v6);
  int v8 = (char *)v12 - v7;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100094134(&qword_1009107C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100776E40;
  *(void *)(inited + 32) = NSURLIsExcludedFromBackupKey;
  uint64_t v10 = NSURLIsExcludedFromBackupKey;
  sub_1001276E0(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  URL.resourceValues(forKeys:)();
  swift_bridgeObjectRelease();
  LOBYTE(inited) = URLResourceValues.isExcludedFromBackup.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return inited & 1;
}

id NSURL.rd_isExcludedFromBackup.setter(char a1)
{
  uint64_t v2 = v1;
  int v3 = a1 & 1;
  swift_getObjectType();
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for URLResourceValues();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = __chkstk_darwin(v8).n128_u64[0];
  uint64_t v12 = &v14[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id result = [v2 rd_isExcludedFromBackup:v10];
  if (result != v3)
  {
    URLResourceValues.init()();
    URLResourceValues.isExcludedFromBackup.setter();
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    URL.setResourceValues(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
    return (id)(*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t sub_1002235E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009107C8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009107C8);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1002236AC(char *a1, char *a2)
{
  return sub_1002F3A4C(*a1, *a2);
}

Swift::Int sub_1002236B8()
{
  return sub_1005950F4();
}

uint64_t sub_1002236C0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100223734()
{
  return sub_1002F06D4();
}

uint64_t sub_10022373C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B6080, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10022379C(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000032;
  }
  else {
    unint64_t v2 = 0xD000000000000021;
  }
  unint64_t v3 = 0x80000001007C7190;
  if (*v1) {
    unint64_t v3 = 0x80000001007C71C0;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1002237E0(void *a1, char a2)
{
  uint64_t v3 = v2;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 36) = -1;
  char v5 = a2 & 1;
  *(unsigned char *)(v3 + 32) = a2 & 1;
  int out_token = -1;
  if (a2) {
    uint64_t v6 = 0xD000000000000032;
  }
  else {
    uint64_t v6 = 0xD000000000000021;
  }
  if (a2) {
    unint64_t v7 = 0x80000001007C71C0;
  }
  else {
    unint64_t v7 = 0x80000001007C7190;
  }
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(unsigned char *)(v9 + 24) = v5;
  aBlock[4] = (uint64_t)sub_10022484C;
  aBlock[5] = v9;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1004B79F0;
  aBlock[3] = (uint64_t)&unk_1008BEDF8;
  double v10 = _Block_copy(aBlock);
  uint64_t v11 = a1;
  swift_release();
  uint64_t v12 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint32_t v13 = notify_register_dispatch((const char *)(v12 + 32), &out_token, v11, v10);
  swift_release();
  _Block_release(v10);

  if (v13 || out_token == -1)
  {
    if (qword_100907160 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_1009107C8);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      sub_1000C51B8(v6, v7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to register for notifyd notification {notificationName: %s, status: %u}", (uint8_t *)v21, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_100907160 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009107C8);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      sub_1000C51B8(v6, v7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Registered notifyd notification {notificationName: %s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(_DWORD *)(v3 + 36) = out_token;
  }
  return v3;
}

void sub_100223C48(uint64_t a1, uint64_t a2, char a3)
{
  int v3 = a3 & 1;
  uint64_t v4 = type metadata accessor for REM_os_activity.Options();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = swift_allocObject();
    *(unsigned char *)(v10 + 16) = v3;
    *(void *)(v10 + 24) = v9;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_1002248A8;
    *(void *)(v11 + 24) = v10;
    aBlock[4] = (uint64_t)sub_10008F6F4;
    aBlock[5] = v11;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1003B3260;
    aBlock[3] = (uint64_t)&unk_1008BEE70;
    uint64_t v12 = _Block_copy(aBlock);
    sub_100094134((uint64_t *)&unk_10091DD40);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100776E40;
    swift_retain();
    static REM_os_activity.Options.ifNonePresent.getter();
    uint64_t v21 = v13;
    sub_1002248C4();
    sub_100094134((uint64_t *)&unk_10091DD50);
    sub_10022491C();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    static REM_os_activity.initiate(_:dso:options:execute:)();
    _Block_release(v12);
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100907160 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009107C8);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      if (v3) {
        uint64_t v18 = 0xD000000000000032;
      }
      else {
        uint64_t v18 = 0xD000000000000021;
      }
      if (v3) {
        unint64_t v19 = 0x80000001007C71C0;
      }
      else {
        unint64_t v19 = 0x80000001007C7190;
      }
      uint64_t v21 = sub_1000C51B8(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received notifyd notification after event stream was deallocated {name: %s}", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void sub_100224030(char a1)
{
  if (qword_100907160 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_1009107C8);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    if (a1) {
      uint64_t v6 = 0xD000000000000032;
    }
    else {
      uint64_t v6 = 0xD000000000000021;
    }
    if (a1) {
      unint64_t v7 = 0x80000001007C71C0;
    }
    else {
      unint64_t v7 = 0x80000001007C7190;
    }
    sub_1000C51B8(v6, v7, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received notifyd notification {name: %s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100224440();
}

uint64_t sub_1002241E8()
{
  uint64_t v1 = v0;
  if (qword_100907160 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_1009107C8);
  swift_retain_n();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    if (*(unsigned char *)(v1 + 32)) {
      uint64_t v6 = 0xD000000000000032;
    }
    else {
      uint64_t v6 = 0xD000000000000021;
    }
    if (*(unsigned char *)(v1 + 32)) {
      unint64_t v7 = 0x80000001007C71C0;
    }
    else {
      unint64_t v7 = 0x80000001007C7190;
    }
    sub_1000C51B8(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deallocating notifyd stream {notificationName: %s}", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  int v8 = *(_DWORD *)(v1 + 36);
  if (v8 != -1)
  {
    notify_cancel(v8);
    *(_DWORD *)(v1 + 36) = -1;
  }
  sub_100096314(*(void *)(v1 + 16));
  return v1;
}

uint64_t sub_1002243E8()
{
  sub_1002241E8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDNotifydEventStream()
{
  return self;
}

void sub_100224440()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 16);
  if (v2)
  {
    uint64_t v3 = swift_retain();
    v2(v3);
    sub_100096314((uint64_t)v2);
  }
  else
  {
    if (qword_100907160 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_1009107C8);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)unint64_t v7 = 136315138;
      if (*(unsigned char *)(v1 + 32)) {
        uint64_t v8 = 0xD000000000000032;
      }
      else {
        uint64_t v8 = 0xD000000000000021;
      }
      if (*(unsigned char *)(v1 + 32)) {
        unint64_t v9 = 0x80000001007C71C0;
      }
      else {
        unint64_t v9 = 0x80000001007C7190;
      }
      sub_1000C51B8(v8, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Dropped notification because we don't have an event handler {notificationName: %s}", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for RDNotifydEventStream.NotificationName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100224738);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDNotifydEventStream.NotificationName()
{
  return &type metadata for RDNotifydEventStream.NotificationName;
}

unint64_t sub_100224774()
{
  unint64_t result = qword_1009108C8;
  if (!qword_1009108C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009108C8);
  }
  return result;
}

uint64_t sub_1002247C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return sub_100096314(v3);
}

uint64_t sub_1002247DC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100224814()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10022484C(uint64_t a1)
{
  sub_100223C48(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_100224858(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100224868()
{
  return swift_release();
}

uint64_t sub_100224870()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1002248A8()
{
  sub_100224030(*(unsigned char *)(v0 + 16));
}

uint64_t sub_1002248B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1002248C4()
{
  unint64_t result = qword_1009108D0;
  if (!qword_1009108D0)
  {
    type metadata accessor for REM_os_activity.Options();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009108D0);
  }
  return result;
}

unint64_t sub_10022491C()
{
  unint64_t result = qword_1009108D8;
  if (!qword_1009108D8)
  {
    sub_100096058((uint64_t *)&unk_10091DD50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009108D8);
  }
  return result;
}

uint64_t sub_100224980(void (*a1)(id *, uint64_t *), uint64_t a2, unint64_t a3)
{
  return sub_100224C3C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsModel.Sublist, (unint64_t)sub_1001DE334);
}

uint64_t sub_1002249C0(void (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = sub_100094134(&qword_100914420);
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v9 = _swiftEmptyArrayStorage;
    if (!v8) {
      return (uint64_t)v9;
    }
    int v23 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1001DE370(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    uint64_t v11 = 0;
    unint64_t v9 = v23;
    v16[1] = v6 + 32;
    unint64_t v17 = a3 & 0xC000000000000001;
    while (v8 != v11)
    {
      if (v17) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(a3 + 8 * v11 + 32);
      }
      uint64_t v13 = v12;
      id v22 = v12;
      v19(&v22);
      if (v4)
      {
        swift_release();

        return (uint64_t)v9;
      }
      uint64_t v4 = 0;

      int v23 = v9;
      unint64_t v15 = v9[2];
      unint64_t v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001DE370(v14 > 1, v15 + 1, 1);
        unint64_t v9 = v23;
      }
      ++v11;
      v9[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v15, v21, v18);
      if (v8 == v11) {
        return (uint64_t)v9;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100224BFC(void (*a1)(id *, uint64_t *), uint64_t a2, unint64_t a3)
{
  return sub_100224C3C(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for REMRemindersListDataView.ListsSectionsModel.List, (unint64_t)sub_1001DE3A0);
}

uint64_t sub_100224C3C(void (*a1)(id *, uint64_t *), uint64_t a2, unint64_t a3, uint64_t (*a4)(void), unint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v25 = a4(0);
  uint64_t v9 = *(void *)(v25 - 8);
  __n128 v10 = __chkstk_darwin(v25);
  id v12 = (char *)&v20 - v11;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v14 = _swiftEmptyArrayStorage;
    if (!v13) {
      return (uint64_t)v14;
    }
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t result = ((uint64_t (*)(void, uint64_t, void, __n128))a5)(0, v13 & ~(v13 >> 63), 0, v10);
    if (v13 < 0) {
      break;
    }
    uint64_t v16 = 0;
    unint64_t v14 = v30;
    unint64_t v23 = a3;
    unint64_t v24 = a3 & 0xC000000000000001;
    uint64_t v21 = (void (*)(BOOL, unint64_t, uint64_t))a5;
    uint64_t v22 = v9 + 32;
    while (v13 != v16)
    {
      if (v24) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(a3 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      id v29 = v17;
      v26(&v29, &v28);
      if (v7)
      {
        swift_release();

        return (uint64_t)v14;
      }
      uint64_t v7 = 0;

      uint64_t v30 = v14;
      a5 = v14[2];
      unint64_t v19 = v14[3];
      if (a5 >= v19 >> 1)
      {
        v21(v19 > 1, a5 + 1, 1);
        unint64_t v14 = v30;
      }
      ++v16;
      _OWORD v14[2] = a5 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * a5, v12, v25);
      a3 = v23;
      if (v13 == v16) {
        return (uint64_t)v14;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *sub_100224E8C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v18 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  uint64_t v6 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a3 + 16);
  __n128 v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1001DE40C(0, v9, 0);
    __n128 v10 = v21;
    uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v17 = *(void *)(v11 + 72);
    v16[1] = v6 + 32;
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v10;
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001DE40C(v13 > 1, v14 + 1, 1);
        __n128 v10 = v21;
      }
      v10[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9) {
        return v10;
      }
    }
    swift_release();
  }
  return v10;
}

void *sub_100225098(void (*a1)(void *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v19 = _swiftEmptyArrayStorage;
    sub_1001DE058(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(a3 + 32);
    while (1)
    {
      uint64_t v9 = *v8++;
      uint64_t v17 = v9;
      a1(v18, &v17);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v18[0];
      uint64_t v10 = v18[1];
      unint64_t v19 = v6;
      unint64_t v13 = v6[2];
      unint64_t v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_1001DE058(v12 > 1, v13 + 1, 1);
        uint64_t v6 = v19;
      }
      _OWORD v6[2] = v13 + 1;
      unint64_t v14 = &v6[2 * v13];
      unsigned char v14[4] = v11;
      v14[5] = v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_1002251A4(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = type metadata accessor for RDTimelineEngineDueReminder(0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    sub_1001DE840(0, v10, 0);
    uint64_t v11 = v21;
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = a3 + v18;
    uint64_t v13 = *(void *)(v7 + 72);
    while (1)
    {
      v19(v12);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v21 = v11;
      unint64_t v15 = v11[2];
      unint64_t v14 = v11[3];
      if (v15 >= v14 >> 1)
      {
        sub_1001DE840(v14 > 1, v15 + 1, 1);
        uint64_t v11 = v21;
      }
      void v11[2] = v15 + 1;
      sub_100229074((uint64_t)v9, (uint64_t)v11 + v18 + v15 * v13);
      v12 += v13;
      if (!--v10) {
        return v11;
      }
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_100225338(void (*a1)(uint64_t *__return_ptr, uint64_t *))
{
  uint64_t v2 = v1;
  sub_100094134((uint64_t *)&unk_100910990);
  uint64_t v3 = sub_1000967F4(&qword_100916EF0, (uint64_t *)&unk_100910990);
  uint64_t v4 = dispatch thunk of Collection.count.getter();
  int64_t v5 = _swiftEmptyArrayStorage;
  if (!v4) {
    return (uint64_t)v5;
  }
  uint64_t v6 = v4;
  unint64_t v18 = _swiftEmptyArrayStorage;
  sub_1001DE8B8(0, v4 & ~(v4 >> 63), 0);
  int64_t v5 = _swiftEmptyArrayStorage;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if ((v6 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      uint64_t v8 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v15 = *v9;
      v8(v16, 0);
      a1(&v17, &v15);
      if (v2) {
        break;
      }
      uint64_t v10 = v3;
      uint64_t v11 = v17;
      unint64_t v18 = v5;
      unint64_t v13 = v5[2];
      unint64_t v12 = v5[3];
      if (v13 >= v12 >> 1)
      {
        sub_1001DE8B8(v12 > 1, v13 + 1, 1);
        int64_t v5 = v18;
      }
      v5[2] = v13 + 1;
      v5[v13 + 4] = v11;
      uint64_t v3 = v10;
      dispatch thunk of Collection.formIndex(after:)();
      --v6;
      uint64_t v2 = 0;
      if (!v6) {
        return (uint64_t)v5;
      }
    }
    swift_release();
    return (uint64_t)v5;
  }
  __break(1u);
  return result;
}

void *sub_100225504(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    int v32 = _swiftEmptyArrayStorage;
    sub_1001DE7B4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = *(void *)(sub_100094134((uint64_t *)&unk_100913A40) - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v24 = *(void *)(v8 + 72);
    while (1)
    {
      a1(&v26, v9);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v10 = v26;
      long long v11 = v27;
      uint64_t v12 = v28;
      char v13 = v29;
      char v14 = v30;
      char v15 = v31;
      int v32 = v6;
      unint64_t v17 = v6[2];
      unint64_t v16 = v6[3];
      if (v17 >= v16 >> 1)
      {
        long long v23 = v27;
        uint64_t v22 = v26;
        char v19 = v30;
        char v21 = v31;
        sub_1001DE7B4(v16 > 1, v17 + 1, 1);
        char v15 = v21;
        char v14 = v19;
        uint64_t v10 = v22;
        long long v11 = v23;
        uint64_t v6 = v32;
      }
      _OWORD v6[2] = v17 + 1;
      unint64_t v18 = &v6[5 * v17];
      v18[4] = v10;
      *(_OWORD *)(v18 + 5) = v11;
      v18[7] = v12;
      *((unsigned char *)v18 + 64) = v13;
      *((unsigned char *)v18 + 65) = v14;
      *((unsigned char *)v18 + 66) = v15;
      v9 += v24;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

void *sub_1002256B8(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  return sub_1002256D0(a1, a2, a3);
}

void *sub_1002256D0(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = _swiftEmptyArrayStorage;
  if (v5)
  {
    uint64_t v35 = _swiftEmptyArrayStorage;
    sub_1001DE7B4(0, v5, 0);
    uint64_t v6 = _swiftEmptyArrayStorage;
    uint64_t v8 = (void **)(a3 + 48);
    while (1)
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      v28[0] = *(v8 - 2);
      v28[1] = v9;
      v28[2] = v10;
      id v11 = v28[0];
      id v12 = v9;
      id v13 = v10;
      a1(&v29, v28);
      if (v4) {
        break;
      }

      uint64_t v14 = v29;
      long long v15 = v30;
      uint64_t v16 = v31;
      char v17 = v32;
      char v18 = v33;
      char v19 = v34;
      uint64_t v35 = v6;
      unint64_t v21 = v6[2];
      unint64_t v20 = v6[3];
      if (v21 >= v20 >> 1)
      {
        long long v26 = v30;
        char v25 = v33;
        char v23 = v34;
        sub_1001DE7B4(v20 > 1, v21 + 1, 1);
        char v19 = v23;
        char v18 = v25;
        long long v15 = v26;
        uint64_t v6 = v35;
      }
      _OWORD v6[2] = v21 + 1;
      uint64_t v22 = &v6[5 * v21];
      v22[4] = v14;
      *(_OWORD *)(v22 + 5) = v15;
      v22[7] = v16;
      *((unsigned char *)v22 + 64) = v17;
      *((unsigned char *)v22 + 65) = v18;
      *((unsigned char *)v22 + 66) = v19;
      v8 += 3;
      --v5;
      uint64_t v4 = 0;
      if (!v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_100225860()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009108E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009108E0);
  if (qword_1009077B0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942358);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100225928(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (qword_100907168 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)qword_1009108E0);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent", v6, 2u);
    swift_slowDealloc();
  }

  os_transaction_create();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDContactInteractionAlarmProducer received contact event", v9, 2u);
    swift_slowDealloc();
  }

  sub_100225B38(v2);
  osos_log_type_t log = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, "os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent", v11, 2u);
    swift_slowDealloc();
  }
  swift_unknownObjectRelease();
}

void sub_100225B38(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v71 = *(void **)(v2 - 8);
  uint64_t v72 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  __chkstk_darwin(v10);
  id v13 = (char *)v66 - v12;
  if (a1 >> 62)
  {
    uint64_t v70 = v11;
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v70;
    if (v56)
    {
LABEL_3:
      uint64_t v70 = v11;
      uint64_t v74 = v8;
      uint64_t v75 = v7;
      uint64_t v14 = Date.init()();
      __chkstk_darwin(v14);
      v66[-2] = v76;
      v66[-1] = v13;
      uint64_t v73 = v13;
      swift_bridgeObjectRetain();
      unint64_t v15 = (unint64_t)sub_100692140((uint64_t (*)(id *))sub_100228E3C, &v66[-4], a1);
      unint64_t v16 = v15;
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v61)
        {
LABEL_5:
          sub_1000C0DE0((Class *)((char *)&v76->isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource), *(uint64_t *)((char *)&v76[3].isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource));
          sub_1003CB940(a1);
          uint64_t v18 = v17;
          if (*(void *)(v17 + 16))
          {
            v66[1] = 0;
            if (qword_100907168 != -1) {
              swift_once();
            }
            uint64_t v19 = type metadata accessor for Logger();
            uint64_t v20 = sub_10008E2DC(v19, (uint64_t)qword_1009108E0);
            swift_bridgeObjectRetain();
            uint64_t v69 = v20;
            unint64_t v21 = Logger.logObject.getter();
            os_log_type_t v22 = static os_log_type_t.default.getter();
            BOOL v23 = os_log_type_enabled(v21, v22);
            uint64_t v68 = v18;
            if (v23)
            {
              uint64_t v24 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v24 = 134217984;
              v78[0] = *(void *)(v68 + 16);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v21, v22, "DataSource returned alarms for contact interaction. {count: %ld}", v24, 0xCu);
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease();
            }
            char v33 = Logger.logObject.getter();
            os_log_type_t v34 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v33, v34))
            {
              uint64_t v35 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v35 = 0;
              _os_log_impl((void *)&_mh_execute_header, v33, v34, "os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}", v35, 2u);
              swift_slowDealloc();
            }

            uint64_t v67 = os_transaction_create();
            uint64_t v36 = *(Class *)((char *)&v76->isa + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue);
            sub_1000963CC(0, (unint64_t *)&qword_10090F370);
            v66[0] = v36;
            static DispatchQoS.unspecified.getter();
            v78[0] = (uint64_t)_swiftEmptyArrayStorage;
            sub_100228E5C((unint64_t *)&qword_10090AAC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
            sub_100094134((uint64_t *)&unk_10090DDA0);
            sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
            dispatch thunk of SetAlgebra.init<A>(_:)();
            ((void (*)(char *, void, uint64_t))v71[13])(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v72);
            OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
            type metadata accessor for REMContactsProvider();
            swift_allocObject();
            uint64_t v72 = REMContactsProvider.init(contactStoreCreator:queue:backgroundQueue:)();
            uint64_t v37 = sub_100228CC8(v16);
            swift_bridgeObjectRetain_n();
            uint64_t v38 = Logger.logObject.getter();
            os_log_type_t v39 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v38, v39))
            {
              uint64_t v40 = swift_slowAlloc();
              uint64_t v71 = v37;
              uint64_t v41 = (uint8_t *)v40;
              v78[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v41 = 136315138;
              sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
              swift_bridgeObjectRetain();
              uint64_t v42 = Array.description.getter();
              unint64_t v44 = v43;
              swift_bridgeObjectRelease();
              uint64_t v77 = sub_1000C51B8(v42, v44, v78);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "Resolving contact names for newlySeenContactReps {newlySeenContactReps: %s}", v41, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              uint64_t v37 = v71;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_100094134(&qword_1009109A0);
            v78[0] = (uint64_t)v37;
            sub_100094134(&qword_1009109A8);
            sub_1000967F4(&qword_1009109B0, &qword_1009109A8);
            static Promise.all<A>(_:)();
            swift_bridgeObjectRelease();
            uint64_t v46 = v73;
            uint64_t v45 = v74;
            uint64_t v47 = v70;
            uint64_t v48 = v75;
            (*(void (**)(uint64_t, char *, uint64_t))(v74 + 16))(v70, v73, v75);
            unint64_t v49 = (*(unsigned __int8 *)(v45 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
            unint64_t v50 = (v9 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v51 = (char *)swift_allocObject();
            uint64_t v52 = v68;
            *((void *)v51 + 2) = v16;
            *((void *)v51 + 3) = v52;
            os_log_t v53 = v76;
            *((void *)v51 + 4) = v76;
            (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(&v51[v49], v47, v48);
            *(void *)&v51[v50] = v67;
            uint64_t v54 = v53;
            swift_unknownObjectRetain();
            int v55 = (void *)zalgo.getter();
            dispatch thunk of Promise.then<A>(on:closure:)();
            swift_release();
            swift_release();
            swift_release();

            swift_unknownObjectRelease();
            swift_release();
            (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v48);
            return;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (qword_100907168 != -1) {
            swift_once();
          }
          uint64_t v25 = type metadata accessor for Logger();
          sub_10008E2DC(v25, (uint64_t)qword_1009108E0);
          swift_bridgeObjectRetain_n();
          long long v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v28 = (uint8_t *)swift_slowAlloc();
            v78[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v28 = 136315138;
            sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
            swift_bridgeObjectRetain();
            uint64_t v29 = Array.description.getter();
            unint64_t v31 = v30;
            swift_bridgeObjectRelease();
            uint64_t v77 = sub_1000C51B8(v29, v31, v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            char v32 = "DataSource returned no alarms for contact interaction. Done {contacts: %s}";
LABEL_34:
            _os_log_impl((void *)&_mh_execute_header, v26, v27, v32, v28, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

LABEL_36:
            (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
            return;
          }
          goto LABEL_35;
        }
      }
      else if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_5;
      }
      swift_bridgeObjectRelease();
      if (qword_100907168 != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      sub_10008E2DC(v62, (uint64_t)qword_1009108E0);
      swift_bridgeObjectRetain_n();
      long long v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        v78[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315138;
        sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
        swift_bridgeObjectRetain();
        uint64_t v63 = Array.description.getter();
        unint64_t v65 = v64;
        swift_bridgeObjectRelease();
        uint64_t v77 = sub_1000C51B8(v63, v65, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        char v32 = "All contactReps interacted with are recently-checkedIn already. Not producing anything. {contactRepresentation: %s}";
        goto LABEL_34;
      }
LABEL_35:

      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  if (qword_100907168 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_10008E2DC(v57, (uint64_t)qword_1009108E0);
  os_log_t v76 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v58))
  {
    int v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v76, v58, "didInteract.contacts is empty. Skipping", v59, 2u);
    swift_slowDealloc();
  }
  os_log_t v60 = v76;
}

id sub_10022683C()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken;
  if (notify_is_valid_token(*(_DWORD *)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken]))
  {
    notify_cancel(*(_DWORD *)&v0[v2]);
    *(_DWORD *)&v0[v2] = -1;
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return [super dealloc];
}

BOOL sub_10022699C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  sub_1000C0DE0((void *)(a2 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager), *(void *)(a2 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager + 24));
  sub_100417BEC(v11, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000EACF4((uint64_t)v6);
    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    Date.timeIntervalSince(_:)();
    double v14 = v13;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return v14 >= 10800.0;
  }
}

id sub_100226B6C()
{
  id v0 = objc_allocWithZone((Class)CNContactStore);

  return [v0 init];
}

void sub_100226BA4(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *a1;
  _OWORD v22[2] = a2;
  v22[3] = v7;
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_1002256D0((void (*)(uint64_t *__return_ptr, id *))sub_10022904C, (uint64_t)v22, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100907168 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_1009108E0);
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v10, v11))
  {
LABEL_11:

    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v12 = swift_slowAlloc();
  *(_DWORD *)uint64_t v12 = 134218240;
  uint64_t v13 = v8[2];
  if (v13)
  {
    uint64_t v14 = 0;
    unint64_t v15 = (char *)v8 + 65;
    while ((*v15 & 1) != 0 || !__OFADD__(v14++, 1))
    {
      v15 += 40;
      if (!--v13) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = 0;
LABEL_13:
  uint64_t v23 = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v12 + 12) = 2048;
  uint64_t v23 = v8[2];
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producing alarms for contact interaction {activeCount: %ld, totalCount: %ld}", (uint8_t *)v12, 0x16u);
  swift_slowDealloc();

LABEL_14:
  uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
  id v18 = a4;
  sub_100227DBC(v18, (uint64_t)v8, Strong);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}", v21, 2u);
    swift_slowDealloc();
  }
}

void sub_100226E4C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  os_log_type_t v11 = *(void **)a1;
  id v12 = *(id *)(a1 + 8);
  if (!(a2 >> 62))
  {
    uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v14 = v12;
    id v15 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v40 = v12;
    if (v13) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_22:
  id v23 = v12;
  id v24 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v40 = v12;
  if (!v13) {
    goto LABEL_23;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v12 = a5;
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = a5;
    id v16 = *(id *)(a2 + 32);
LABEL_6:
    uint64_t v17 = v16;
    a5 = (void *)a3[2];
    if (a5)
    {
      uint64_t v36 = a4;
      uint64_t v37 = (uint64_t)v12;
      id v42 = v11;
      uint64_t v38 = a6;
      a4 = 0;
      a3 += 5;
      uint64_t v41 = v13 - 1;
      while (1)
      {
        os_log_type_t v11 = (void *)*(a3 - 1);
        uint64_t v19 = *a3;
        swift_bridgeObjectRetain();
        os_log_type_t v20 = [v42 contactHandles];
        if (v20)
        {
          a6 = v20;
          id v12 = [v20 matchesContactRepresentation:v17];

          if (v12) {
            break;
          }
        }
        swift_bridgeObjectRelease();

        if (v41 == a4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_19:
          a6 = v38;
          id v12 = v40;
          os_log_type_t v11 = v42;
          goto LABEL_24;
        }
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((unint64_t)(a4 + 1) >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_22;
          }
          id v18 = *(id *)(a2 + 8 * a4 + 40);
        }
        uint64_t v17 = v18;
        a3 += 2;
        if (a5 == (void *)++a4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000C0DE0((void *)(v36 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager), *(void *)(v36 + OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager + 24));
      id v21 = v40;
      sub_100417514(v17, v37);

      char v22 = 0;
      a6 = v38;
      *uint64_t v38 = v42;
      v38[1] = v40;
      void v38[2] = v11;
      void v38[3] = v19;
      goto LABEL_30;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    id v12 = v40;
LABEL_24:
    if (qword_100907168 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_1009108E0);
    id v26 = v11;
    swift_bridgeObjectRetain_n();
    id v27 = v26;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v39 = a6;
      uint64_t v30 = swift_slowAlloc();
      unint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 138412546;
      id v32 = [v27 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v31 = v32;

      *(_WORD *)(v30 + 12) = 2080;
      sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
      swift_bridgeObjectRetain();
      uint64_t v33 = Array.description.getter();
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v33, v35, &v43);
      id v12 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "dataSource returned alarms that don't match any input contactReps {reminderID: %@, newlySeenContactReps: %s}", (uint8_t *)v30, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v39;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *a6 = v27;
    a6[1] = v12;
    char v22 = 1;
    a6[2] = 0;
    a6[3] = 0;
LABEL_30:
    *((unsigned char *)a6 + 32) = 3;
    *((unsigned char *)a6 + 33) = v22;
    *((unsigned char *)a6 + 34) = 0;
    return;
  }
  __break(1u);
}

void sub_100227378(char a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople;
  if (v1[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] != (a1 & 1))
  {
    if (qword_100907168 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_1009108E0);
    uint64_t v4 = v1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 8) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "shouldNotifyOfInteractionWithPeople value changed. Updating state {previousValue: %{BOOL}d, value: %{BOOL}d}", (uint8_t *)v7, 0xEu);
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v8 = OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken;
    if (notify_is_valid_token(*(_DWORD *)&v4[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken]))
    {
      uint32_t v9 = notify_set_state(*(_DWORD *)&v4[v8], v1[v2]);
      if (!(v9 | notify_post(_REMStoreShouldNotifyOfInteractionWithPeopleNotificationName))) {
        return;
      }
      uint64_t v10 = v4;
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.fault.getter();
      if (!os_log_type_enabled(v11, v12))
      {

        os_log_type_t v11 = v10;
        goto LABEL_16;
      }
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109632;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 8) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 14) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to update or post update to _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {notifySetStateStatus: %u,  notifyPostStatus: %u, value: %{BOOL}d}", (uint8_t *)v13, 0x14u);
    }
    else
    {
      id v14 = v4;
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v11, v15))
      {

        os_log_type_t v11 = v14;
        goto LABEL_16;
      }
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 8) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v11, v15, "shouldNotifyOfInteractionWithPeopleNotifyToken is invalid. Failed to update state {token: %d, value: %{BOOL}d}", (uint8_t *)v16, 0xEu);
    }
    swift_slowDealloc();
LABEL_16:
  }
}

uint64_t type metadata accessor for RDContactInteractionAlarmProducer()
{
  return self;
}

void sub_100227740()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (uint64_t *)((char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    if (qword_100907168 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_1009108E0);
  uint32_t v9 = v0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v12 = 136315138;
    id v13 = [v9 description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    uint64_t v21 = sub_1000C51B8(v14, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting people interaction alarm producer {producer: %s}", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000C0DE0(&v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource], *(void *)&v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource + 24]);
  uint64_t v17 = swift_retain();
  uint64_t v18 = sub_1003CB7C4(v17);
  swift_release();
  uint64_t v19 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  char v20 = v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople];
  v9[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] = v19 != 0;
  sub_100227378(v20);
}

uint64_t sub_100227A4C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __n128 v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void *)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v6 = *(void **)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t, __n128))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1, v3);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    uint32_t v9 = &v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource];
    sub_1000C0DE0(&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource], *(void *)&v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource + 24]);
    uint64_t v10 = swift_retain();
    uint64_t v11 = sub_1003CB7C4(v10);
    swift_release();
    uint64_t v12 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    char v13 = v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople];
    v0[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople] = v12 != 0;
    sub_100227378(v13);
    sub_1000C0DE0(v9, v9[3]);
    uint64_t v14 = swift_retain();
    uint64_t v15 = sub_1003CB7C4(v14);
    swift_release();
    int64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      os_log_type_t v29 = v0;
      uint64_t v30 = _swiftEmptyArrayStorage;
      sub_1001DE7B4(0, v16, 0);
      uint64_t v17 = v30;
      v28[1] = v15;
      uint64_t v18 = (void **)(v15 + 40);
      do
      {
        uint64_t v19 = *(v18 - 1);
        char v20 = *v18;
        uint64_t v30 = v17;
        unint64_t v22 = v17[2];
        unint64_t v21 = v17[3];
        id v23 = v19;
        id v24 = v20;
        if (v22 >= v21 >> 1)
        {
          sub_1001DE7B4(v21 > 1, v22 + 1, 1);
          uint64_t v17 = v30;
        }
        _OWORD v17[2] = v22 + 1;
        uint64_t v25 = &v17[5 * v22];
        void v25[4] = v23;
        v25[5] = v20;
        v25[6] = 0;
        v25[7] = 0;
        *((_WORD *)v25 + 32) = 259;
        *((unsigned char *)v25 + 66) = 0;
        v18 += 3;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      id v0 = v29;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
    }
    uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
    id v27 = v0;
    sub_100227DBC(v27, (uint64_t)v17, Strong);

    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100227D00()
{
  return 0xD000000000000021;
}

void sub_100227D1C()
{
}

uint64_t sub_100227D40()
{
  return sub_100227A4C();
}

uint64_t sub_100227D64(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100228E5C(&qword_100910950, a2, (void (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100227DBC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27[3] = type metadata accessor for RDContactInteractionAlarmProducer();
  v27[4] = sub_100228E5C(&qword_100910958, v6, (void (*)(uint64_t))type metadata accessor for RDContactInteractionAlarmProducer);
  v27[0] = a1;
  uint64_t v7 = qword_100907B60;
  id v8 = a1;
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_100921460);
  sub_100096838((uint64_t)v27, (uint64_t)v24);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    id v13 = [[(id)*sub_1000C0DE0(v24, v25) description];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_1000C51B8(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
    *(_WORD *)(v12 + 12) = 2048;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);

    swift_bridgeObjectRelease();
  }
  uint64_t v17 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v17 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v19, (uint64_t)v24);
      uint64_t v20 = v25;
      uint64_t v21 = v26;
      sub_1000C0DE0(v24, v25);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v21 + 8))(a2, v27, v20, v21);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
      v19 += 40;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v27);
}

uint64_t sub_1002280B8(void *a1, uint64_t a2, uint64_t a3)
{
  v26[3] = type metadata accessor for RDTimeAlarmProducer();
  v26[4] = sub_100228E5C((unint64_t *)&unk_100910960, 255, (void (*)(uint64_t))type metadata accessor for RDTimeAlarmProducer);
  v26[0] = a1;
  uint64_t v6 = qword_100907B60;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100921460);
  sub_100096838((uint64_t)v26, (uint64_t)v23);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [[*sub_1000C0DE0(v23, v24) description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_1000C51B8(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
    *(_WORD *)(v11 + 12) = 2048;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);

    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = v16 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v18, (uint64_t)v23);
      uint64_t v19 = v24;
      uint64_t v20 = v25;
      sub_1000C0DE0(v23, v24);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v20 + 8))(a2, v26, v19, v20);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
      v18 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
}

uint64_t sub_1002283BC(void *a1, uint64_t a2, uint64_t a3)
{
  v26[3] = type metadata accessor for RDDueDateDeltaAlarmProducer();
  v26[4] = sub_100228E5C(&qword_100910970, 255, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlarmProducer);
  v26[0] = a1;
  uint64_t v6 = qword_100907B60;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100921460);
  sub_100096838((uint64_t)v26, (uint64_t)v23);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [[*sub_1000C0DE0(v23, v24) description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_1000C51B8(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
    *(_WORD *)(v11 + 12) = 2048;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);

    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = v16 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v18, (uint64_t)v23);
      uint64_t v19 = v24;
      uint64_t v20 = v25;
      sub_1000C0DE0(v23, v24);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v20 + 8))(a2, v26, v19, v20);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
      v18 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
}

uint64_t sub_1002286C0(void *a1, uint64_t a2, uint64_t a3)
{
  v26[3] = type metadata accessor for RDVehicleAlarmProducer();
  v26[4] = sub_100228E5C(&qword_100910978, 255, (void (*)(uint64_t))type metadata accessor for RDVehicleAlarmProducer);
  v26[0] = a1;
  uint64_t v6 = qword_100907B60;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100921460);
  sub_100096838((uint64_t)v26, (uint64_t)v23);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [[*sub_1000C0DE0(v23, v24) description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_1000C51B8(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
    *(_WORD *)(v11 + 12) = 2048;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);

    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = v16 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v18, (uint64_t)v23);
      uint64_t v19 = v24;
      uint64_t v20 = v25;
      sub_1000C0DE0(v23, v24);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v20 + 8))(a2, v26, v19, v20);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
      v18 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
}

uint64_t sub_1002289C4(void *a1, uint64_t a2, uint64_t a3)
{
  v26[3] = type metadata accessor for RDLocationAlarmProducer();
  v26[4] = sub_100228E5C((unint64_t *)&unk_100910980, 255, (void (*)(uint64_t))type metadata accessor for RDLocationAlarmProducer);
  v26[0] = a1;
  uint64_t v6 = qword_100907B60;
  id v7 = a1;
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E2DC(v8, (uint64_t)qword_100921460);
  sub_100096838((uint64_t)v26, (uint64_t)v23);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    id v12 = [[*sub_1000C0DE0(v23, v24) description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_1000C51B8(v13, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
    *(_WORD *)(v11 + 12) = 2048;
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Producer did produce alarms {producer: %s, alarms.count: %ld}", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);

    swift_bridgeObjectRelease();
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 + 16);
  if (v17)
  {
    uint64_t v18 = v16 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_100096838(v18, (uint64_t)v23);
      uint64_t v19 = v24;
      uint64_t v20 = v25;
      sub_1000C0DE0(v23, v24);
      (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v20 + 8))(a2, v26, v19, v20);
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
      v18 += 40;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v26);
}

void *sub_100228CC8(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      REMContactsProvider.name(for:)();
      Promise.errorAsNil()();

      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100228E14(uint64_t a1)
{
  return a1;
}

BOOL sub_100228E3C(uint64_t *a1)
{
  return sub_10022699C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100228E5C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100228EA4()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100228F9C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  sub_100226BA4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

void sub_10022904C(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_100226E4C(a1, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_100229074(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDTimelineEngineDueReminder(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002290D8()
{
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10077A530;
  *(void *)(v0 + 32) = swift_getKeyPath();
  uint64_t result = specialized Array._endMutation()();
  qword_1009420C0 = v0;
  return result;
}

unint64_t sub_10022914C(void *a1, void *a2)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t KeyPath = swift_getKeyPath();
  id v10 = a1;
  id v11 = [v10 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_10032E284(KeyPath, (uint64_t)v8);
  swift_release();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (v26[2] >= v26[3] >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  uint64_t v13 = (void *)sub_1002F52FC(v26);
  id v14 = [a2 persistentStoreOfAccountWithAccountID:v10];
  if (v14)
  {
    id v15 = v14;
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_10077A530;
    *(void *)(v16 + 32) = v15;
    uint64_t v26 = (void *)v16;
    specialized Array._endMutation()();
    uint64_t v17 = (uint64_t)v26;
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (qword_100907170 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_1009420C0;
  if ((unint64_t)qword_1009420C0 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_100094134(&qword_100916E60);
    unint64_t v19 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    unint64_t v19 = v18;
  }
  uint64_t v20 = (void *)sub_1003BD14C(v19, 0, v17, (uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for REMCDAccountListData();
  unint64_t result = NSManagedObjectContext.fetch<A>(_:)();
  if (v2) {
    goto LABEL_11;
  }
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_14;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    [self noSuchObjectErrorWithObjectID:v10];
    swift_willThrow();
LABEL_11:

    return v3;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v24) {
    goto LABEL_21;
  }
LABEL_14:
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_17;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v22 = *(id *)(v3 + 32);
LABEL_17:
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    unint64_t v3 = (unint64_t)[v23 orderedIdentifierMap];

    return v3;
  }
  __break(1u);
  return result;
}

const char *sub_100229508()
{
  return "accountID";
}

const char *sub_10022951C()
{
  return "orderedIdentifierMap";
}

id sub_100229528@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 orderedIdentifierMap];
  *a2 = result;
  return result;
}

id sub_100229564(void *a1, id *a2)
{
  return [*a2 setOrderedIdentifierMap:*a1];
}

uint64_t sub_100229578(uint64_t a1)
{
  uint64_t result = sub_100229D30(&qword_1009109D8, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.DEBUG_PhantomRemindersInvocation);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002295D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v41 = a3;
  uint64_t v37 = a4;
  uint64_t v5 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMRemindersListDataView.FlatModel();
  uint64_t v36 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = type metadata accessor for REMRemindersListDataView.Diff();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v30 - v19;
  uint64_t v40 = a1;
  uint64_t v21 = v42;
  uint64_t result = sub_100229984(a1);
  if (!v21)
  {
    uint64_t v42 = result;
    unint64_t v31 = v17;
    id v32 = v10;
    uint64_t v33 = v15;
    uint64_t v34 = v8;
    unint64_t v35 = v13;
    uint64_t v41 = v14;
    id v23 = [v38 fetchResultTokenToDiffAgainst];
    uint64_t v24 = v20;
    sub_10051F2BC(v23, v40, (uint64_t)v20);

    uint64_t v25 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v7, 1, 1, v25);
    uint64_t v26 = v35;
    REMRemindersListDataView.FlatModel.init(reminders:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    uint64_t v27 = v36;
    uint64_t v28 = v34;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v32, v26, v34);
    uint64_t v29 = v33;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v31, v24, v41);
    sub_100229D30(&qword_10090BC38, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    sub_100229D30((unint64_t *)&unk_10090BC40, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.FlatModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v28);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v24, v41);
  }
  return result;
}

uint64_t sub_100229984(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t Subtasks = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  uint64_t v23 = *(void *)(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  unint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = _s9UtilitiesO12SortingStyleOMa();
  __chkstk_darwin(v8);
  id v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s10PredicatesOMa(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = (void *)sub_10038F1F0();
  sub_10012607C((uint64_t)v13, _s10PredicatesOMa);
  uint64_t v15 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
  uint64_t v16 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 104))(v10, v15, v16);
  uint64_t v17 = v23;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v26 = v4;
  v18(v7, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v4);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v3, enum case for REMRemindersListDataView.FetchSubtasks.off(_:), Subtasks);
  uint64_t v19 = v25;
  uint64_t v20 = sub_100522260(v24, (uint64_t)v14, (uint64_t)v10, 0, 0, (uint64_t)v7, v3, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, 0, 0);
  if (!v19)
  {
    uint64_t v4 = (uint64_t)v20;
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, Subtasks);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v26);
  sub_10012607C((uint64_t)v10, (uint64_t (*)(void))_s9UtilitiesO12SortingStyleOMa);
  return v4;
}

uint64_t sub_100229D30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100229D78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009109E0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009109E0);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_100229E40(uint64_t a1, unsigned __int8 *a2, void *a3, uint64_t a4, void (*a5)(uint64_t))
{
  int v8 = *a2;
  if (qword_100907178 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_1009109E0);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 67109120;
    LODWORD(v25) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "RDFirstUnlockManager: Received hasUnlockedSinceBoot published value {hasUnlockedSinceBoot: %{BOOL}d}", v12, 8u);
    swift_slowDealloc();
  }

  id v13 = *(id *)(*sub_1000C0DE0(a3, a3[3]) + 56);
  OS_dispatch_queue.sync<A>(execute:)();

  int v14 = v25;
  if (v8 != v25)
  {
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 67109376;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 8) = 1024;
      LODWORD(v25) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_slowDealloc();
    }
  }
  if (v14)
  {
    if (*(void *)(a1 + 24))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    *(void *)(a1 + 24) = 0;
    swift_release();
    if (!*(void *)(a4 + 24))
    {
      if (qword_100907360 != -1) {
        swift_once();
      }
      long long v25 = xmmword_1007821E0;
      uint64_t v27 = 0;
      v28[0] = 0;
      uint64_t v26 = 0;
      *(void *)((char *)v28 + 6) = 0;
      sub_10036ED54((uint64_t)&v25, 0x6E755F7473726966, 0xEC0000006B636F6CLL);
    }
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDFirstUnlockManager: Received first unlock event. Executing unlockHandler.", v23, 2u);
      swift_slowDealloc();
    }

    a5(1);
  }
  else
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10022A238()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDFirstUnlockManager()
{
  return self;
}

uint64_t sub_10022A29C()
{
  uint64_t v1 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v1);
  type metadata accessor for RDTransactionRegistrar();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = 0;
  v2[5] = 0;
  v2[2] = 0xD000000000000058;
  v2[3] = 0x80000001007CF1B0;
  sub_10022B32C((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  v2[6] = UnfairLock.init(options:)();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_10022A424(uint64_t a1, char *a2, void (*a3)(uint64_t, char *))
{
  char v4 = *a2;
  a3(a1, &v4);
  type metadata accessor for UnfairLock();
  swift_retain();
  Lock.sync<A>(_:)();
  return swift_release();
}

uint64_t sub_10022A4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v65 = a3;
  uint64_t v66 = a1;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v12 - 8);
  os_log_t v60 = (char *)v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100094134(&qword_100910AD8);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  uint64_t v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134(&qword_100910AE0);
  uint64_t v63 = *(void *)(v16 - 8);
  uint64_t v64 = v16;
  __chkstk_darwin(v16);
  uint64_t v62 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v57 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  os_log_type_t v22 = (char *)v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (void *)swift_allocObject();
  v54[0] = a4;
  v23[2] = a4;
  void v23[3] = a5;
  v23[4] = a6;
  v23[5] = a7;
  type metadata accessor for RDKeybagStateProviderFactory();
  swift_unknownObjectRetain();
  v54[1] = a5;
  swift_retain();
  swift_retain();
  uint64_t v61 = a2;
  sub_1002DE4C8(a2, v73);
  id v24 = *(id *)(*sub_1000C0DE0(v73, v74) + 56);
  OS_dispatch_queue.sync<A>(execute:)();

  if (aBlock == 1)
  {
    if (qword_100907178 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E2DC(v25, (uint64_t)qword_1009109E0);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDFirstUnlockManager: Device is in after first unlock state in the 1st check. Executing unlockHandler.", v28, 2u);
      swift_slowDealloc();
    }

    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = sub_10022B074;
    *(void *)(v29 + 24) = v23;
    uint64_t v70 = sub_10022B2E8;
    uint64_t v71 = v29;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v68 = sub_100236C78;
    uint64_t v69 = &unk_1008BEFD8;
    uint64_t v30 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v72[0] = _swiftEmptyArrayStorage;
    sub_10022B32C((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v22, v56);
    swift_release();
LABEL_18:
    uint64_t v51 = 2;
    goto LABEL_19;
  }
  if (qword_100907178 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  uint64_t v57 = sub_10008E2DC(v31, (uint64_t)qword_1009109E0);
  id v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = v65;
  if (v34)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDFirstUnlockManager: Device is in before first unlock state in the 1st check. Registering with RDKeybagStateProvider.hasUnlockedSinceBootPublisher.", v36, 2u);
    swift_slowDealloc();
  }

  uint64_t v37 = *(void *)(v35 + 16);
  *(void *)&long long aBlock = *(void *)(*sub_1000C0DE0(v73, v74) + 88);
  sub_100094134(&qword_100910AE8);
  sub_1000967F4(&qword_100910AF0, &qword_100910AE8);
  *(void *)&long long aBlock = Publisher.eraseToAnyPublisher()();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v37;
  *(void *)(v38 + 24) = 1;
  swift_retain();
  sub_100094134(&qword_100910AF8);
  sub_1000967F4((unint64_t *)&unk_100910B00, &qword_100910AF8);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)();
  swift_release();
  swift_release();
  *(void *)&long long aBlock = v66;
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v40 = (uint64_t)v60;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v60, 1, 1, v39);
  sub_1000D0FD4();
  sub_1000967F4(&qword_100910B10, &qword_100910AD8);
  sub_10022B32C((unint64_t *)&qword_10090D990, (void (*)(uint64_t))sub_1000D0FD4);
  uint64_t v41 = v62;
  uint64_t v42 = v59;
  Publisher.receive<A>(on:options:)();
  sub_10022B0D4(v40);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v42);
  sub_100096838((uint64_t)v73, (uint64_t)&aBlock);
  sub_10022B134(v61, (uint64_t)v72);
  uint64_t v43 = swift_allocObject();
  sub_1000967D4(&aBlock, v43 + 16);
  sub_10022B1EC((uint64_t)v72, v43 + 56);
  *(void *)(v43 + 96) = sub_10022B074;
  *(void *)(v43 + 104) = v23;
  unint64_t v44 = (void *)swift_allocObject();
  v44[2] = sub_10022B254;
  v44[3] = v43;
  v44[4] = v37;
  type metadata accessor for RDFirstUnlockManager();
  sub_1000967F4(&qword_100910B18, &qword_100910AE0);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v45 = v64;
  uint64_t v46 = Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v45);
  *(void *)(v35 + 24) = v46;
  swift_release();
  sub_1000C0DE0(v73, v74);
  sub_1002DFAA0();
  id v47 = *(id *)(*sub_1000C0DE0(v73, v74) + 56);
  OS_dispatch_queue.sync<A>(execute:)();

  if (aBlock == 1)
  {
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "RDFirstUnlockManager: Device has transitioned to after first unlock state in the 2nd check. Executing unlockHandler and ignoring notifications.", v50, 2u);
      swift_slowDealloc();
    }

    if (*(void *)(v35 + 24))
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
    uint64_t v52 = (void (*)(uint64_t))v54[0];
    *(void *)(v35 + 24) = 0;
    swift_release();
    sub_100093F44(1, v52);
    goto LABEL_18;
  }
  uint64_t v51 = 0;
LABEL_19:
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v73);
  swift_release();
  return v51;
}

uint64_t sub_10022B02C()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10022B074(uint64_t a1)
{
  return sub_10008ACFC(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10022B080@<X0>(unsigned char *a1@<X8>)
{
  return sub_1002DEA94(v1, a1);
}

uint64_t sub_10022B09C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022B0D4(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_1009081C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10022B134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100908140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10022B19C()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 16);
  if (*(void *)(v0 + 80)) {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 56);
  }
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10022B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100908140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10022B254(uint64_t a1, unsigned __int8 *a2)
{
  sub_100229E40(a1, a2, (void *)(v2 + 16), v2 + 56, *(void (**)(uint64_t))(v2 + 96));
}

uint64_t sub_10022B264()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10022B2A4(uint64_t a1, char *a2)
{
  return sub_10022A424(a1, a2, *(void (**)(uint64_t, char *))(v2 + 16));
}

uint64_t sub_10022B2B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10022B2E8()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(2);
}

uint64_t sub_10022B314(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10022B324()
{
  return swift_release();
}

uint64_t sub_10022B32C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10022B374()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100910B20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100910B20);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_10022B43C(void *a1)
{
  uint64_t v61 = *v1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v57 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  int v8 = (char *)&v54 - v7;
  __chkstk_darwin(v9);
  os_log_type_t v11 = (char *)&v54 - v10;
  if (qword_100907180 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v58 = sub_10008E2DC(v12, (uint64_t)qword_100910B20);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v59 = v8;
  unint64_t v62 = (unint64_t)a1;
  if (v15)
  {
    os_log_t v60 = v11;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    id v67 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)&long long v65 = v61;
    swift_getMetatypeMetadata();
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)&long long v65 = sub_1000C51B8(v17, v18, (uint64_t *)&v67);
    a1 = (void *)v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_type_t v11 = v60;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: Start execution", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  Date.init()();
  type metadata accessor for REMCDPublicTemplate();
  id v19 = [(id)swift_getObjCClassFromMetadata() fetchRequest];
  id v20 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v19];
  [v20 setResultType:1];
  id v64 = 0;
  id v21 = [a1 executeRequest:v20 error:&v64];
  id v22 = v64;
  if (v21)
  {
    id v23 = v21;
    *((void *)&v66 + 1) = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
    *(void *)&long long v65 = v23;
    sub_1000963CC(0, (unint64_t *)&unk_10090B030);
    id v24 = v22;
    id v25 = v63;
    throwingCast<A>(_:as:failureMessage:)();
    if (v25)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);

      return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v65);
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&v65);
      id v28 = v67;
      if ([v67 result])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v65 = 0u;
        long long v66 = 0u;
      }
      uint64_t v29 = sub_100094134(&qword_100908270);
      throwingCast<A>(_:as:failureMessage:)();
      id v63 = v28;
      sub_1000F5B8C((uint64_t)&v65);
      unint64_t v30 = (unint64_t)v67;
      uint64_t v56 = self;
      sub_100094134(&qword_10090AF50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100776E40;
      os_log_t v60 = v11;
      *(void *)&long long v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v65 + 1) = v32;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = v29;
      unint64_t v33 = v30;
      *(void *)(inited + 72) = v30;
      swift_bridgeObjectRetain();
      sub_1002EE418(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_10077A530;
      uint64_t v35 = (void *)v62;
      *(void *)(v34 + 32) = v62;
      *(void *)&long long v65 = v34;
      specialized Array._endMutation()();
      sub_1000963CC(0, (unint64_t *)&unk_100916F50);
      id v36 = v35;
      Class v37 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      Class v38 = isa;
      [v56 mergeChangesFromRemoteContextSave:isa intoContexts:v37];

      uint64_t v39 = v59;
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v59, v60, v3);
      unint64_t v62 = v33;
      swift_bridgeObjectRetain();
      uint64_t v40 = Logger.logObject.getter();
      int v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, (os_log_type_t)v41))
      {
        LODWORD(isa) = v41;
        uint64_t v56 = v40;
        uint64_t v58 = v4;
        uint64_t v42 = swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        id v67 = v54;
        *(_DWORD *)uint64_t v42 = 136315650;
        *(void *)&long long v65 = v61;
        swift_getMetatypeMetadata();
        uint64_t v43 = String.init<A>(describing:)();
        *(void *)&long long v65 = sub_1000C51B8(v43, v44, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2048;
        if (v62 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v45 = *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v65 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 22) = 2048;
        unint64_t v62 = v42 + 24;
        uint64_t v46 = v57;
        Date.init()();
        id v47 = v59;
        Date.timeIntervalSince(_:)();
        uint64_t v49 = v48;
        unint64_t v50 = v46;
        uint64_t v51 = *(void (**)(char *, uint64_t))(v58 + 8);
        v51(v50, v3);
        *(void *)&long long v65 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v51(v47, v3);
        uint64_t v52 = v56;
        _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)isa, "%s: Finished execution {deletionCount: %ld, elapsedSeconds: %f}", (uint8_t *)v42, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return ((uint64_t (*)(char *, uint64_t))v51)(v60, v3);
      }
      else
      {

        swift_bridgeObjectRelease();
        os_log_t v53 = *(void (**)(char *, uint64_t))(v4 + 8);
        v53(v39, v3);

        swift_bridgeObjectRelease();
        return ((uint64_t (*)(char *, uint64_t))v53)(v60, v3);
      }
    }
  }
  else
  {
    id v27 = v64;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  }
}

uint64_t sub_10022BDD4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationBatchDeleteCachedPublicTemplates()
{
  return self;
}

uint64_t sub_10022BE30(void *a1)
{
  return sub_10022B43C(a1);
}

int64_t sub_10022BE58(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10022BE9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100910BE0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100910BE0);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

__CFString *sub_10022BF64()
{
  qword_1009420C8 = @"RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification";
  return @"RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification";
}

uint64_t sub_10022BF7C()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 152))
  {
    *(void *)(v0 + 152) = 0;
    swift_release();
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100910BE0);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "RDICCloudExtraneousAlarmsCollector: stopped.", v5, 2u);
      swift_slowDealloc();
    }
  }
  sub_1000F3DB4(v1 + 32);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1 + 48);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1 + 88);

  sub_1000F3DB4(v1 + 136);
  swift_release();
  swift_unknownObjectRelease();
  sub_10012227C(*(void *)(v1 + 168), *(void *)(v1 + 176), *(void *)(v1 + 184), *(void *)(v1 + 192), *(void *)(v1 + 200), *(unsigned int *)(v1 + 208) | ((unint64_t)*(unsigned __int16 *)(v1 + 212) << 32));
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v1 + 232);
  sub_1000966BC(v1 + 272, (uint64_t *)&unk_100910DC0);
  return v1;
}

uint64_t sub_10022C0F0()
{
  sub_10022BF7C();

  return swift_deallocClassInstance();
}

void sub_10022C124()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v83 = *(void *)(v0 - 8);
  uint64_t v84 = v0;
  __chkstk_darwin(v0);
  uint64_t v82 = (char *)v66 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v2 - 8);
  uint64_t v87 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = (void *)type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v79 = *(v86 - 1);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v80 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_100910E20);
  uint64_t v81 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100910E28);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v14 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  unint64_t v18 = (char *)v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v20 = __chkstk_darwin(v19);
  if (!v88[19])
  {
    id v67 = (char *)v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v68 = v22;
    uint64_t v69 = v18;
    uint64_t v70 = v20;
    uint64_t v71 = v16;
    uint64_t v73 = v5;
    uint64_t v74 = v10;
    uint64_t v75 = v8;
    os_log_t v76 = v14;
    uint64_t v77 = v12;
    uint64_t v78 = v11;
    id v23 = (id *)v88;
    id v24 = v88 + 11;
    swift_beginAccess();
    uint64_t v25 = (uint64_t)v23[14];
    uint64_t v26 = (uint64_t (**)(uint64_t, id))v23[15];
    sub_1000C0DE0(v24, v25);
    LOBYTE(v24) = v26[1](v25, v26);
    swift_endAccess();
    uint64_t v72 = v7;
    id v28 = v85;
    id v27 = v86;
    uint64_t v29 = (uint64_t)v87;
    if ((v24 & 1) == 0)
    {
      if (qword_100907188 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10008E2DC(v30, (uint64_t)qword_100910BE0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      BOOL v33 = os_log_type_enabled(v31, v32);
      uint64_t v34 = v71;
      if (v33)
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}", v35, 2u);
        swift_slowDealloc();
      }

      uint64_t v36 = os_transaction_create();
      v66[0] = v23[3];
      uint64_t v37 = swift_allocObject();
      swift_weakInit();
      Class v38 = (void *)swift_allocObject();
      void v38[2] = v37;
      void v38[3] = v36;
      aBlock[4] = sub_100233F9C;
      aBlock[5] = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = (id)1107296256;
      aBlock[2] = sub_100236C78;
      aBlock[3] = &unk_1008BF190;
      uint64_t v39 = _Block_copy(aBlock);
      swift_retain();
      v66[1] = v36;
      swift_unknownObjectRetain();
      uint64_t v40 = v67;
      static DispatchQoS.unspecified.getter();
      uint64_t v89 = _swiftEmptyArrayStorage;
      sub_100233FA4((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100094134((uint64_t *)&unk_10090AFD0);
      sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      int v41 = v69;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v39);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v15);
      (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v70);
      swift_release();
      swift_release();
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v42 = (void (**)(uint64_t, id))v23[18];
        uint64_t ObjectType = swift_getObjectType();
        v42[2](ObjectType, v42);
        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
      id v27 = v86;
      uint64_t v29 = (uint64_t)v87;
      id v28 = v85;
    }
    sub_10022D4BC();
    if (qword_100907190 != -1) {
      swift_once();
    }
    NSNotificationCenter.publisher(for:object:)();
    aBlock[0] = v23[3];
    id v44 = aBlock[0];
    uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v46 = *(void *)(v45 - 8);
    uint64_t v86 = *(void **)(v46 + 56);
    uint64_t v87 = (char *)(v46 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v29, 1, 1, v45);
    uint64_t v85 = (char *)sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    sub_100233FA4((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
    sub_100096654();
    id v47 = v44;
    uint64_t v48 = v72;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC(v29, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, void *))(v79 + 8))(v28, v27);
    swift_allocObject();
    swift_weakInit();
    sub_1000967F4((unint64_t *)&qword_10090ABA0, (uint64_t *)&unk_10091A450);
    uint64_t v49 = v74;
    uint64_t v50 = v73;
    Publisher.filter(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v80 + 8))(v48, v50);
    uint64_t v51 = v82;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
    aBlock[0] = v47;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v86)(v29, 1, 1, v45);
    sub_1000967F4(&qword_100910E30, &qword_100910E20);
    id v52 = v47;
    os_log_t v53 = v76;
    uint64_t v54 = v75;
    Publisher.debounce<A>(for:scheduler:options:)();
    sub_1000966BC(v29, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v83 + 8))(v51, v84);
    uint64_t v55 = v88;
    (*(void (**)(char *, uint64_t))(v81 + 8))(v49, v54);
    swift_allocObject();
    swift_weakInit();
    sub_1000967F4(&qword_100910E38, &qword_100910E28);
    uint64_t v56 = v78;
    uint64_t v57 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v77 + 8))(v53, v56);
    v55[19] = v57;
    swift_release();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v58 = v55[18];
      uint64_t v59 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v59, v58);
      swift_unknownObjectRelease();
    }
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_10008E2DC(v60, (uint64_t)qword_100910BE0);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      id v63 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v63 = 136315138;
      uint64_t v64 = Double.description.getter();
      uint64_t v89 = (void *)sub_1000C51B8(v64, v65, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "RDICCloudExtraneousAlarmsCollector: started, subscribed to DidMarkExtraneousAlarmsPendingToSyncUpDelete {debounceInterval(randomized): %s}", v63, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

void sub_10022CE08()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10022CF1C();
    swift_release();
  }
  if (qword_100907188 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_100910BE0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}", v3, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10022CF1C()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v22 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v1 + 24);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    void v23[3] = v2;
    v23[4] = (uint64_t)&off_1008BF0B8;
    v23[0] = v1;
    swift_retain();
    sub_10062BB2C(v23);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
  }
  else
  {
    __break(1u);
    swift_once();
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_100910BE0);
    sub_1000BF710((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_100909A40);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      v23[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 136446210;
      v22[0] = v18 + 4;
      uint64_t v19 = Optional.descriptionOrNil.getter();
      v22[1] = sub_1000C51B8(v19, v20, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "RDICCloudExtraneousAlarmsCollector THROTTLED, skipping {lastExecuted: %{public}s}", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_1000966BC((uint64_t)v6, (uint64_t *)&unk_100909A40);
    }
    swift_errorRelease();
    return sub_1000966BC((uint64_t)v8, (uint64_t *)&unk_100909A40);
  }
}

double sub_10022D4BC()
{
  double v1 = (double)sub_100232E18(0x20000000000001uLL) * 1.11022302e-16 + 0.5;
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  sub_1000C0DE0(v0 + 6, v2);
  return v1 * (*(double (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
}

uint64_t sub_10022D540()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v1 + 16) && (unint64_t v2 = sub_100307418((uint64_t)v11), (v3 & 1) != 0))
    {
      sub_10009A1B0(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v12);
    }
    else
    {
      long long v12 = 0u;
      long long v13 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_100233FFC((uint64_t)v11);
    if (*((void *)&v13 + 1))
    {
      if (swift_dynamicCast())
      {
        v4._object = (void *)0x8000000100782340;
        v4._uint64_t countAndFlagsBits = 0xD000000000000022;
        Swift::Bool v5 = String.hasPrefix(_:)(v4);
        swift_bridgeObjectRelease();
        if (v5)
        {
          if (qword_100907188 != -1) {
            swift_once();
          }
          uint64_t v6 = type metadata accessor for Logger();
          sub_10008E2DC(v6, (uint64_t)qword_100910BE0);
          uint64_t v7 = Logger.logObject.getter();
          os_log_type_t v8 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v7, v8))
          {
            uint64_t v9 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDICCloudExtraneousAlarmsCollector: Should not be producing DidMarkExtraneousAlarmsPendingToSyncUpDelete notification from transactions of RDICCloudExtraneousAlarmsCollector", v9, 2u);
            swift_slowDealloc();
          }

          return 0;
        }
      }
    }
    else
    {
      sub_1000966BC((uint64_t)&v12, &qword_100908190);
    }
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10022D78C(0);
    swift_release();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10022D8F8();
    swift_release();
  }
  return 1;
}

void sub_10022D78C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = *(void *)(v1 + 120);
  sub_100096204(v1 + 88, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  swift_endAccess();
  if (qword_100907188 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100910BE0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v8 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_slowDealloc();
  }
}

uint64_t sub_10022D8F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[3];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  swift_beginAccess();
  uint64_t v8 = v1[14];
  uint64_t v9 = v1[15];
  sub_1000C0DE0(v1 + 11, v8);
  char v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
  uint64_t result = swift_endAccess();
  if ((v10 & 1) != 0 || v1[20]) {
    return result;
  }
  if (qword_100907188 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E2DC(v12, (uint64_t)qword_100910BE0);
  long long v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}", v15, 2u);
    swift_slowDealloc();
  }

  v1[20] = os_transaction_create();
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v16 = v1[18];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v16 + 24))(ObjectType, v16);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10022DB70()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10022CF1C();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10022DBF8();
    return swift_release();
  }
  return result;
}

uint64_t sub_10022DBF8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[3];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  uint64_t result = v1[20];
  if (!result) {
    return result;
  }
  v1[20] = 0;
  swift_unknownObjectRelease();
  if (qword_100907188 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_100910BE0);
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v13 = v1[18];
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v13 + 32))(ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10022DE00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = (void *)v1[3];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t, __n128))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2, v4);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_beginAccess();
    uint64_t v10 = v1[14];
    uint64_t v11 = v1[15];
    sub_1000C0DE0(v1 + 11, v10);
    char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    uint64_t result = swift_endAccess();
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = sub_10022E07C();
      if (*(void *)(v13 + 16))
      {
        sub_10022E3B4();
        type metadata accessor for Analytics();
        if (static Analytics.isEventUsed(_:)())
        {
          sub_100094134((uint64_t *)&unk_10090A420);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100776E40;
          *(void *)(inited + 32) = 0x746E756F63;
          *(void *)(inited + 40) = 0xE500000000000000;
          *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
          sub_1002ED104(inited);
          static Analytics.postEvent(_:payload:duration:)();
          swift_bridgeObjectRelease();
        }
      }
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v15 = v1[18];
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40))(v13, ObjectType, v15);
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10022E07C()
{
  uint64_t v1 = v0;
  char v12 = 0;
  uint64_t v2 = *(void **)(v0 + 16);
  id v3 = (id)cloudKitAccountTypes();
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = sub_100127548(v4);
  swift_bridgeObjectRelease();
  sub_100333E64(v5);
  swift_bridgeObjectRelease();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v7 = [v2 storesForAccountTypes:isa];

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10010B4E8(v1 + 168, (uint64_t)v13);
  void v11[2] = v1;
  v11[3] = v8;
  void v11[4] = &v12;
  uint64_t v9 = sub_1003B7B34((uint64_t)v13, (uint64_t)sub_100232F8C, (uint64_t)v11);
  swift_bridgeObjectRelease();
  if (v12 == 1) {
    sub_10022D78C(1);
  }
  return v9;
}

void sub_10022E3B4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  id v3 = *(NSObject **)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v27 = v7;
    uint64_t v28 = v6;
    os_log_t v29 = v3;
    uint64_t v12 = v1[5];
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E2DC(v13, (uint64_t)qword_100910BE0);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}", v16, 2u);
      swift_slowDealloc();
    }

    uint64_t v17 = os_transaction_create();
    v26[1] = v1[3];
    uint64_t v18 = (void *)swift_allocObject();
    void v18[2] = v11;
    v18[3] = v12;
    v18[4] = v17;
    aBlock[4] = sub_100232DF4;
    aBlock[5] = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    aBlock[3] = &unk_1008BF118;
    uint64_t v19 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    static DispatchQoS.unspecified.getter();
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_100233FA4((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    ((void (*)(char *, uint64_t))v29[1].isa)(v5, v2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
    swift_release();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v20 = v1[18];
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v20 + 48))(ObjectType, v20);
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100910BE0);
    os_log_t v29 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v23, "RDICCloudExtraneousAlarmsCollector: Unexpected nil RDICCloudExtraneousAlarmsSyncPerformer (ICCloudContext), bailing out from syncUp()", v24, 2u);
      swift_slowDealloc();
    }
    os_log_t v25 = v29;
  }
}

void sub_10022E888(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, void ***a4@<X8>)
{
  uint64_t v9 = a2[9];
  uint64_t v10 = a2[10];
  sub_1000C0DE0(a2 + 6, v9);
  uint64_t v11 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  if (__OFADD__(v11, 1)) {
    goto LABEL_34;
  }
  unint64_t v12 = sub_100233284((uint64_t)(v11 + 1));
  if (!v4)
  {
    unint64_t v5 = v12;
    uint64_t v9 = v12 >> 62;
    if (v12 >> 62) {
      goto LABEL_35;
    }
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      while (1)
      {
        uint64_t v48 = (unsigned char *)a3;
        uint64_t v45 = a4;
        if (qword_100907188 != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        sub_10008E2DC(v13, (uint64_t)qword_100910BE0);
        swift_bridgeObjectRetain_n();
        os_log_type_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        uint64_t v47 = v9;
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 134218240;
          if (v9)
          {
            swift_bridgeObjectRetain();
            uint64_t v17 = (void *)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v17 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          v50[0] = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v16 + 12) = 2048;
          v50[0] = v11;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDICCloudExtraneousAlarmsCollector: fetched extraneous alarm triggers {triggers.count: %ld, deleteLimit: %ld}", (uint8_t *)v16, 0x16u);
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v49 = (void **)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        uint64_t v46 = v11;
        sub_1002330E0((uint64_t)v11, v5);
        a4 = v18;
        a3 = (uint64_t)v19;
        unint64_t v21 = v20;
        swift_bridgeObjectRelease();
        uint64_t v9 = v21 >> 1;
        if (a3 == v9) {
          break;
        }
        while (a3 < v9)
        {
          v50[0] = a4[a3];
          sub_10022EF50(v50, (unint64_t *)&v49);
          uint64_t v11 = (unsigned char *)++a3;
          if (v9 == a3) {
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v40) {
          goto LABEL_36;
        }
      }
LABEL_16:
      swift_unknownObjectRelease();
      if (v49[2])
      {
        v50[0] = 0;
        uint64_t v22 = v47;
        os_log_type_t v23 = v48;
        if (![a1 save:v50])
        {
          uint64_t v39 = v50[0];
          swift_bridgeObjectRelease();
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          return;
        }
        id v24 = v50[0];
        os_log_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v25, v26)) {
          goto LABEL_23;
        }
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 134217984;
        swift_beginAccess();
        v50[0] = v49[2];
        os_log_type_t v23 = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v28 = "RDICCloudExtraneousAlarmsCollector: applied and saved REMCDObjectDirtyFlagsNeedDelete dirty flags to %ld a"
              "larm and triggers.";
        os_log_t v29 = v25;
        os_log_type_t v30 = v26;
        uint64_t v31 = v27;
        uint32_t v32 = 12;
      }
      else
      {
        os_log_t v25 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        uint64_t v22 = v47;
        os_log_type_t v23 = v48;
        if (!os_log_type_enabled(v25, v33))
        {
LABEL_23:

          if (v22)
          {
            swift_bridgeObjectRetain();
            uint64_t v35 = (void *)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v35 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if ((uint64_t)v46 >= (uint64_t)v35)
          {
            swift_bridgeObjectRelease();
            *os_log_type_t v23 = 1;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v36, v37))
            {
              uint64_t v38 = swift_slowAlloc();
              *(_DWORD *)uint64_t v38 = 134218240;
              swift_bridgeObjectRelease();
              v50[0] = v35;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              *(_WORD *)(v38 + 12) = 2048;
              v50[0] = v46;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "RDICCloudExtraneousAlarmsCollector: leaving noOutstandingExtraneousItems=false because fetched triggers.count=%ld > deleteLimit=%ld", (uint8_t *)v38, 0x16u);
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
          }
          swift_beginAccess();
          *uint64_t v45 = v49;
          return;
        }
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        uint64_t v28 = "RDICCloudExtraneousAlarmsCollector: none of the fetched alarm triggers should apply REMCDObjectDirtyFlagsNeedDelete.";
        os_log_t v29 = v25;
        os_log_type_t v30 = v33;
        uint64_t v31 = v34;
        uint32_t v32 = 2;
      }
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, v31, v32);
      swift_slowDealloc();
      goto LABEL_23;
    }
LABEL_36:
    swift_bridgeObjectRelease();
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E2DC(v41, (uint64_t)qword_100910BE0);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDICCloudExtraneousAlarmsCollector: fetched 0 extraneous alarm triggers.", v44, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)a3 = 1;
    *a4 = (void **)_swiftEmptyArrayStorage;
  }
}

void sub_10022EF50(void **a1, unint64_t *a2)
{
  uint64_t v98 = a2;
  uint64_t v102 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v102);
  uint64_t v101 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v100 = (char *)&v88 - v6;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v88 - v8;
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v88 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  os_log_type_t v14 = *(void **)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v97 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v88 - v17;
  __chkstk_darwin(v19);
  os_log_t v99 = (os_log_t)((char *)&v88 - v20);
  __chkstk_darwin(v21);
  os_log_type_t v23 = (char *)&v88 - v22;
  *(void *)&double v25 = __chkstk_darwin(v24).n128_u64[0];
  uint64_t v27 = (char *)&v88 - v26;
  uint64_t v28 = *a1;
  if (!objc_msgSend(v28, "isTemporal", v25)) {
    return;
  }
  id v29 = [v28 alarm];
  if (!v29)
  {
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E2DC(v32, (uint64_t)qword_100910BE0);
    id v33 = v28;
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35))
    {

      return;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v104 = (char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 136315138;
    id v37 = [v33 remObjectID];
    if (v37)
    {
      uint64_t v38 = v37;
      id v39 = [v37 description];

      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;
    }
    else
    {
      unint64_t v42 = 0xE300000000000000;
      uint64_t v40 = 7104878;
    }
    uint64_t v103 = sub_1000C51B8(v40, v42, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger without an alarm, skipping {triggerID: %s}", v36, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_39;
  }
  id v95 = v29;
  uint64_t v96 = v2;
  id v30 = [v28 identifier];
  uint64_t v93 = v13;
  if (!v30)
  {
    uint64_t v94 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v14[7];
    v94(v12, 1, 1, v13);
    uint64_t v9 = v12;
    goto LABEL_26;
  }
  uint64_t v31 = v30;
  uint64_t v91 = v27;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v90 = (void (*)(char *, char *, uint64_t))v14[4];
  v90(v12, v23, v13);
  uint64_t v94 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v14[7];
  v94(v12, 0, 1, v13);
  uint64_t v92 = v14;
  uint64_t v89 = (unsigned int (*)(char *, uint64_t, uint64_t))v14[6];
  if (v89(v12, 1, v13) == 1)
  {
    uint64_t v9 = v12;
    os_log_type_t v14 = v92;
LABEL_26:
    sub_1000966BC((uint64_t)v9, (uint64_t *)&unk_100909E50);
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_10008E2DC(v66, (uint64_t)qword_100910BE0);
    id v67 = v28;
    id v68 = v95;
    id v69 = v67;
    uint64_t v34 = v68;
    uint64_t v70 = Logger.logObject.getter();
    int v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, (os_log_type_t)v71))
    {
      LODWORD(v98) = v71;
      os_log_t v99 = v70;
      uint64_t v72 = swift_slowAlloc();
      uint64_t v97 = (char *)swift_slowAlloc();
      uint64_t v104 = v97;
      *(_DWORD *)uint64_t v72 = 136315394;
      id v73 = [v69 identifier];
      if (v73)
      {
        uint64_t v74 = v73;
        uint64_t v75 = (uint64_t)v100;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v76 = 0;
      }
      else
      {
        uint64_t v76 = 1;
        uint64_t v75 = (uint64_t)v100;
      }
      uint64_t v77 = 1;
      uint64_t v100 = (char *)(v14 + 7);
      v94((char *)v75, v76, 1, v93);
      uint64_t v78 = Optional.descriptionOrNil.getter();
      unint64_t v80 = v79;
      sub_1000966BC(v75, (uint64_t *)&unk_100909E50);
      uint64_t v103 = sub_1000C51B8(v78, v80, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v72 + 12) = 2080;
      id v81 = [v34 identifier];
      if (v81)
      {
        uint64_t v82 = v81;
        uint64_t v83 = (uint64_t)v101;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v77 = 0;
      }
      else
      {
        uint64_t v83 = (uint64_t)v101;
      }
      v94((char *)v83, v77, 1, v93);
      uint64_t v84 = Optional.descriptionOrNil.getter();
      unint64_t v86 = v85;
      sub_1000966BC(v83, (uint64_t *)&unk_100909E50);
      uint64_t v103 = sub_1000C51B8(v84, v86, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v87 = v99;
      _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v98, "RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger/alarm without identifier, skipping {triggerID: %s, alarmID: %s}", (uint8_t *)v72, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_39:
    return;
  }
  v90(v91, v12, v13);
  id v43 = [v95 identifier];
  if (!v43)
  {
    v94(v9, 1, 1, v13);
    goto LABEL_25;
  }
  id v44 = v43;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v45 = v23;
  uint64_t v46 = (void (*)(os_log_t, char *, uint64_t))v90;
  v90(v9, v45, v13);
  v94(v9, 0, 1, v13);
  if (v89(v9, 1, v13) == 1)
  {
LABEL_25:
    os_log_type_t v14 = v92;
    ((void (*)(char *, uint64_t))v92[1])(v91, v13);
    goto LABEL_26;
  }
  uint64_t v102 = (uint64_t)(v14 + 4);
  v46(v99, v9, v13);
  [v28 setShouldSyncUpDeleteIfNeeded];
  uint64_t v47 = v92;
  uint64_t v48 = (void (*)(char *, char *, uint64_t))v92[2];
  v48(v18, v91, v13);
  uint64_t v49 = v98;
  unint64_t v50 = *v98;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v49 = v50;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v50 = sub_100309EC8(0, *(void *)(v50 + 16) + 1, 1, v50);
    *uint64_t v98 = v50;
  }
  unint64_t v53 = *(void *)(v50 + 16);
  unint64_t v52 = *(void *)(v50 + 24);
  if (v53 >= v52 >> 1)
  {
    unint64_t v50 = sub_100309EC8(v52 > 1, v53 + 1, 1, v50);
    *uint64_t v98 = v50;
  }
  *(void *)(v50 + 16) = v53 + 1;
  unint64_t v54 = (*((unsigned __int8 *)v47 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v47 + 80);
  uint64_t v55 = v47[9];
  unint64_t v56 = v50 + v54 + v55 * v53;
  uint64_t v57 = v93;
  v90((char *)v56, v18, v93);
  [v95 setShouldSyncUpDeleteIfNeeded];
  uint64_t v58 = v97;
  v48(v97, (char *)v99, v57);
  uint64_t v59 = v98;
  unint64_t v60 = *v98;
  char v61 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v59 = v60;
  uint64_t v62 = v57;
  if ((v61 & 1) == 0)
  {
    unint64_t v60 = sub_100309EC8(0, *(void *)(v60 + 16) + 1, 1, v60);
    *uint64_t v98 = v60;
  }
  unint64_t v64 = *(void *)(v60 + 16);
  unint64_t v63 = *(void *)(v60 + 24);
  if (v64 >= v63 >> 1)
  {
    unint64_t v60 = sub_100309EC8(v63 > 1, v64 + 1, 1, v60);
    *uint64_t v98 = v60;
  }
  *(void *)(v60 + 16) = v64 + 1;
  v90((char *)(v60 + v54 + v64 * v55), v58, v62);

  unint64_t v65 = (void (*)(os_log_t, uint64_t))v92[1];
  v65(v99, v62);
  v65((os_log_t)v91, v62);
}

void sub_10022FA3C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, const __CFString *, void, void, uint64_t, uint64_t))(a2 + 8))(1, @"ExtraneousAlarmsCollector", 0, 0, ObjectType, a2);
  if (qword_100907188 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100910BE0);
  osos_log_type_t log = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}", v6, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10022FB64@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [*a1 identifier];
  if (v3)
  {
    uint64_t v4 = v3;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a2;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10022FC2C(uint64_t a1, void **a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v6, (uint64_t *)&unk_100909E50);
  uint64_t v7 = *a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  [v7 setIdentifier:isa];
}

uint64_t sub_10022FD60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)(v1 + 34);
  swift_beginAccess();
  sub_1000BF710((uint64_t)(v1 + 34), (uint64_t)&v13, (uint64_t *)&unk_100910DC0);
  if (!v14)
  {
    sub_1000966BC((uint64_t)&v13, (uint64_t *)&unk_100910DC0);
    uint64_t v5 = v1[9];
    uint64_t v6 = v1[10];
    sub_1000C0DE0(v1 + 6, v5);
    uint64_t v7 = *(double (**)(uint64_t, uint64_t))(v6 + 24);
    swift_retain();
    double v8 = v7(v5, v6);
    uint64_t v14 = v3;
    uint64_t v15 = &off_1008BF098;
    *(void *)&long long v13 = v1;
    uint64_t v9 = type metadata accessor for RDExecutionIntervalThrottlingPolicy();
    uint64_t v10 = swift_allocObject();
    sub_1000967D4(&v13, v10 + 16);
    *(double *)(v10 + 56) = v8;
    uint64_t v14 = v9;
    uint64_t v15 = &off_1008C8B10;
    *(void *)&long long v13 = v10;
    sub_100096838((uint64_t)&v13, (uint64_t)v12);
    swift_beginAccess();
    sub_100230848((uint64_t)v12, v4);
    swift_endAccess();
  }
  return sub_1000967D4(&v13, a1);
}

uint64_t sub_10022FEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096838(a1, (uint64_t)v20);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDICCloudExtraneousAlarmsCollector();
  if (swift_dynamicCast())
  {
    swift_release();
    swift_beginAccess();
    sub_100096838(v2 + 16, (uint64_t)v16);
    uint64_t v5 = v17;
    uint64_t v6 = v18;
    sub_1000C0DE0(v16, v17);
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6);
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  }
  else
  {
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100910BE0);
    sub_100096838(a1, (uint64_t)v16);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      sub_100096838((uint64_t)v16, (uint64_t)v15);
      uint64_t v12 = String.init<A>(describing:)();
      v15[0] = sub_1000C51B8(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDICCloudExtraneousAlarmsCollectorExecutionDateStorage.lastExecutedDate(for:) must work with RDICCloudExtraneousAlarmsCollector only {executable: %{public}s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v16);
    }

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
    uint64_t v14 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
}

uint64_t sub_100230194(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100096838(a1, (uint64_t)v22);
  sub_100094134((uint64_t *)&unk_10090E4E0);
  type metadata accessor for RDICCloudExtraneousAlarmsCollector();
  if (swift_dynamicCast())
  {
    swift_release();
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 40);
    uint64_t v11 = *(void *)(v2 + 48);
    sub_100096204(v2 + 16, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 40))(v7, v10, v11);
    swift_endAccess();
  }
  else
  {
    if (qword_100907188 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E2DC(v12, (uint64_t)qword_100910BE0);
    sub_100096838(a1, (uint64_t)v21);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_100096838((uint64_t)v21, (uint64_t)v19);
      uint64_t v16 = String.init<A>(describing:)();
      v19[0] = sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "RDICCloudExtraneousAlarmsCollectorExecutionDateStorage.updateLastExecutedDate(for:) must work with RDICCloudExtraneousAlarmsCollector only {executable: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
    }
  }
  return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v22);
}

uint64_t sub_1002304BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FEE8(a1, a2);
}

uint64_t sub_1002304E0(uint64_t a1, uint64_t a2)
{
  return sub_100230194(a1, a2);
}

uint64_t sub_100230504@<X0>(uint64_t a1@<X8>)
{
  return sub_10022FD60(a1);
}

uint64_t sub_100230528()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10023055C@<X0>(uint64_t a1@<X8>)
{
  return sub_100096838(*v1 + 232, a1);
}

uint64_t sub_100230580()
{
  return sub_10022DE00();
}

unint64_t sub_1002305AC()
{
  unint64_t result = (unint64_t)[*v0 extraneousAlarmsDeleteCountLimit];
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  return result;
}

id sub_1002305D8()
{
  return [*v0 extraneousAlarmsCollectorDebounceInterval];
}

id sub_1002305E8()
{
  return [*v0 extraneousAlarmsCollectorThrottleInterval];
}

id sub_1002305F8()
{
  return [*v0 extraneousAlarmsCollectorContainerDeemedClean];
}

id sub_10023061C(char a1)
{
  return [*v1 setExtraneousAlarmsCollectorContainerDeemedClean:a1 & 1];
}

uint64_t sub_100230634@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 lastExtraneousAlarmsCollectorExecutionDate];
  if (v3)
  {
    uint64_t v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_1002306FC(uint64_t a1)
{
  id v3 = *v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  Class v7 = 0;
  if (v6 != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
    Class v7 = isa;
  }
  Class v9 = v7;
  [v3 setLastExtraneousAlarmsCollectorExecutionDate:];
}

uint64_t type metadata accessor for RDICCloudExtraneousAlarmsCollector()
{
  return self;
}

uint64_t type metadata accessor for RDICCloudExtraneousAlarmsCollector.RDICCloudExtraneousAlarmsCollectorExecutionDateStorage()
{
  return self;
}

uint64_t sub_100230848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100910DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_1002308B4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = 46;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._object = (void *)0x8000000100782A30;
  v5._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 0xD000000000000023;
  v7._object = (void *)0x80000001007CE560;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1;
  uint64_t v9 = a2;
  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100776E60;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  *(void *)(v10 + 88) = &type metadata for String;
  *(void *)(v10 + 56) = &type metadata for String;
  *(void *)(v10 + 64) = v8;
  *(void *)(v10 + 72) = v9;
  uint64_t v11 = rem_currentRuntimeVersion();
  *(void *)(v10 + 120) = &type metadata for Int;
  *(void *)(v10 + 96) = v11;
  NSString v12 = String._bridgeToObjectiveC()();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v14 = [self predicateWithFormat:v12 argumentArray:isa];

  return v14;
}

uint64_t sub_100230A90(char a1)
{
  sub_100094134(&qword_100910E18);
  if (a1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    __chkstk_darwin(inited);
    sub_1000963CC(0, &qword_100910E10);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v12 = sub_10039F424(KeyPath);
    uint64_t v13 = swift_release();
    *(void *)(inited + 32) = v12;
    __chkstk_darwin(v13);
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_10039F424(v14);
    swift_release();
    *(void *)(inited + 40) = v15;
    specialized Array._endMutation()();
    return sub_1002F52FC(inited);
  }
  else
  {
    uint64_t v2 = swift_initStackObject();
    *(_OWORD *)(v2 + 16) = xmmword_100776E80;
    __chkstk_darwin(v2);
    sub_1000963CC(0, &qword_100910E10);
    uint64_t v3 = swift_getKeyPath();
    uint64_t v4 = sub_10039F3F4(v3);
    swift_release();
    *(void *)(v2 + 32) = v4;
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100776E40;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD000000000000017;
    *(void *)(v5 + 40) = 0x8000000100782B00;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    *(void *)(v2 + 40) = v8;
    specialized Array._endMutation()();
    return sub_100397E58(v2);
  }
}

uint64_t sub_100230D28(char a1)
{
  sub_100094134((uint64_t *)&unk_100910DF0);
  if (a1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    __chkstk_darwin(inited);
    sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v12 = sub_1003A0024(KeyPath);
    uint64_t v13 = swift_release();
    *(void *)(inited + 32) = v12;
    __chkstk_darwin(v13);
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_1003A0024(v14);
    swift_release();
    *(void *)(inited + 40) = v15;
    specialized Array._endMutation()();
    return sub_1002F52FC(inited);
  }
  else
  {
    uint64_t v2 = swift_initStackObject();
    *(_OWORD *)(v2 + 16) = xmmword_100776E80;
    __chkstk_darwin(v2);
    sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
    uint64_t v3 = swift_getKeyPath();
    uint64_t v4 = sub_10039FFF4(v3);
    swift_release();
    *(void *)(v2 + 32) = v4;
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100776E40;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD000000000000017;
    *(void *)(v5 + 40) = 0x8000000100782B00;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    *(void *)(v2 + 40) = v8;
    specialized Array._endMutation()();
    return sub_100397E58(v2);
  }
}

uint64_t sub_100230FC0(char a1)
{
  sub_100094134(&qword_100910E08);
  if (a1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    __chkstk_darwin(inited);
    sub_1000963CC(0, &qword_100910E00);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v12 = sub_10039F4D4(KeyPath);
    uint64_t v13 = swift_release();
    *(void *)(inited + 32) = v12;
    __chkstk_darwin(v13);
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_10039F4D4(v14);
    swift_release();
    *(void *)(inited + 40) = v15;
    specialized Array._endMutation()();
    return sub_1002F52FC(inited);
  }
  else
  {
    uint64_t v2 = swift_initStackObject();
    *(_OWORD *)(v2 + 16) = xmmword_100776E80;
    __chkstk_darwin(v2);
    sub_1000963CC(0, &qword_100910E00);
    uint64_t v3 = swift_getKeyPath();
    uint64_t v4 = sub_10039F4A4(v3);
    swift_release();
    *(void *)(v2 + 32) = v4;
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100776E40;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD000000000000017;
    *(void *)(v5 + 40) = 0x8000000100782B00;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    *(void *)(v2 + 40) = v8;
    specialized Array._endMutation()();
    return sub_100397E58(v2);
  }
}

uint64_t sub_100231258(char a1)
{
  sub_100094134(&qword_100910E48);
  if (a1)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100776E80;
    __chkstk_darwin(inited);
    sub_1000963CC(0, (unint64_t *)&qword_100910E40);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v12 = sub_1003A054C(KeyPath);
    uint64_t v13 = swift_release();
    *(void *)(inited + 32) = v12;
    __chkstk_darwin(v13);
    uint64_t v14 = swift_getKeyPath();
    uint64_t v15 = sub_1003A054C(v14);
    swift_release();
    *(void *)(inited + 40) = v15;
    specialized Array._endMutation()();
    return sub_1002F52FC(inited);
  }
  else
  {
    uint64_t v2 = swift_initStackObject();
    *(_OWORD *)(v2 + 16) = xmmword_100776E80;
    __chkstk_darwin(v2);
    sub_1000963CC(0, (unint64_t *)&qword_100910E40);
    uint64_t v3 = swift_getKeyPath();
    uint64_t v4 = sub_1003A07E4(v3);
    swift_release();
    *(void *)(v2 + 32) = v4;
    sub_100094134((uint64_t *)&unk_10090A050);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_100776E40;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 32) = 0xD000000000000017;
    *(void *)(v5 + 40) = 0x8000000100782B00;
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v8 = [self predicateWithFormat:v6 argumentArray:isa];

    *(void *)(v2 + 40) = v8;
    specialized Array._endMutation()();
    return sub_100397E58(v2);
  }
}

id sub_1002314F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 alarm];
  *a2 = result;
  return result;
}

id sub_10023152C(void *a1, id *a2)
{
  return [*a2 setAlarm:*a1];
}

id sub_100231540@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100231574(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

uint64_t sub_100231588(void *a1, unsigned __int8 a2)
{
  return sub_1002317C8(a1, a2, &qword_100910E10, (uint64_t)off_1008AA3F0, (uint64_t (*)(uint64_t, void *))sub_10039F3BC, (uint64_t (*)(void))sub_10039F3D0, (uint64_t (*)(void))sub_10032ED60, (uint64_t (*)(uint64_t, char *))sub_10032ED6C, (uint64_t (*)(void *))sub_100230A90, (uint64_t (*)(void))sub_10039F3F4, (uint64_t (*)(void))sub_10039F400, sub_1002F51CC, sub_10039F424, (uint64_t (*)(uint64_t, char *))sub_10039F444, (uint64_t (*)(void))sub_10039F424, (uint64_t (*)(void *))sub_1002F52FC);
}

uint64_t sub_1002316A8(void *a1, unsigned __int8 a2)
{
  return sub_1002317C8(a1, a2, (unint64_t *)&unk_100910DD0, (uint64_t)off_1008AA400, (uint64_t (*)(uint64_t, void *))sub_10039FFBC, (uint64_t (*)(void))sub_10039FFD0, (uint64_t (*)(void))sub_10032F5B4, (uint64_t (*)(uint64_t, char *))sub_10032F5C0, (uint64_t (*)(void *))sub_100230D28, (uint64_t (*)(void))sub_10039FFF4, (uint64_t (*)(void))sub_1003A0000, sub_1002F51CC, sub_1003A0024, (uint64_t (*)(uint64_t, char *))sub_1003A0044, (uint64_t (*)(void))sub_1003A0024, (uint64_t (*)(void *))sub_1002F52FC);
}

uint64_t sub_1002317C8(void *a1, unsigned __int8 a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, void *), uint64_t (*a6)(void), uint64_t (*a7)(void), uint64_t (*a8)(uint64_t, char *), uint64_t (*a9)(void *), uint64_t (*a10)(void), uint64_t (*a11)(void), uint64_t (*a12)(void), void *a13, uint64_t (*a14)(uint64_t, char *), uint64_t (*a15)(void), uint64_t (*a16)(void *))
{
  uint64_t v121 = a3;
  uint64_t v122 = a4;
  char v116 = a14;
  uint64_t v117 = a15;
  id v22 = a12;
  uint64_t v119 = a16;
  uint64_t v120 = a13;
  uint64_t v23 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v118 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = _swiftEmptyArrayStorage;
  switch(a2 >> 5)
  {
    case 1:
    case 2:
      __chkstk_darwin(v24);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))sub_1000963CC(0, v121);
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v27 = sub_1001FF8A4((uint64_t)a1);
      uint64_t v28 = (void *)a5(KeyPath, v27);
      swift_release();
      id v29 = v28;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      a7 = (uint64_t (*)(void))v123[2];
      if ((unint64_t)a7 >= v123[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      int v30 = 0;
      goto LABEL_27;
    case 3:
      id v44 = (void *)(a2 & 1);
      __chkstk_darwin(v24);
      uint64_t v45 = sub_1000963CC(0, v121);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
      uint64_t v46 = swift_getKeyPath();
      id v47 = [a1 uuid];
      uint64_t v48 = v118;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v49 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v48, 0, 1, v49);
      id v50 = (id)a8(v46, v48);
      swift_release();
      uint64_t v51 = a9(v44);
      unint64_t v52 = v123;
      uint64_t v53 = v123[2];
      if (__OFADD__(v53, 2))
      {
        __break(1u);
      }
      else
      {
        id v44 = (void *)v51;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v123 = v52;
        if (!isUniquelyReferenced_nonNull_native || v53 + 2 > v52[3] >> 1) {
          uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._endMutation()();
        id v50 = v50;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v123[2] < v123[3] >> 1)
        {
LABEL_20:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v55 = v44;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          sub_100233A24(a1, a2);
          int v30 = 0;
          int v57 = 1;
          id v22 = v120;
          goto LABEL_45;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_20;
    case 4:
      __chkstk_darwin(v24);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))sub_1000963CC(0, v121);
      uint64_t v58 = swift_getKeyPath();
      id v59 = [a1 uuid];
      unint64_t v60 = v118;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v61 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v60, 0, 1, v61);
      uint64_t v62 = (void *)a8(v58, v60);
      swift_release();
      id v63 = v62;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      a7 = (uint64_t (*)(void))v123[2];
      if ((unint64_t)a7 >= v123[3] >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      sub_100233A24(a1, a2);
      int v30 = 1;
      goto LABEL_27;
    case 5:
      int v30 = 1;
      int v57 = 0;
      switch((unint64_t)a1)
      {
        case 1uLL:
        case 2uLL:
        case 4uLL:
          goto LABEL_27;
        case 3uLL:
          goto LABEL_28;
        default:
          __chkstk_darwin(v24);
          uint64_t v45 = sub_1000963CC(0, v121);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          uint64_t v93 = (void *)a10();
          uint64_t v94 = swift_release();
          __chkstk_darwin(v94);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          id v95 = (void *)a10();
          uint64_t v96 = swift_release();
          __chkstk_darwin(v96);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          uint64_t v97 = (void *)a11();
          uint64_t v98 = swift_release();
          __chkstk_darwin(v98);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          os_log_t v99 = (void *)a11();
          swift_release();
          uint64_t v100 = v123;
          id v101 = (id)v123[2];
          if (__OFADD__(v101, 4))
          {
            __break(1u);
LABEL_86:
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            goto LABEL_61;
          }
          int v102 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v123 = v100;
          if (!v102 || (uint64_t)v101 + 4 > v100[3] >> 1) {
            uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._endMutation()();
          id v101 = v93;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            goto LABEL_86;
          }
LABEL_61:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v103 = v95;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v22 = v97;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v104 = v99;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          __chkstk_darwin(v105);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          id v106 = (id)a6();
          uint64_t v107 = swift_release();
          __chkstk_darwin(v107);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          uint64_t v108 = (void *)a7();
          uint64_t v109 = swift_release();
          __chkstk_darwin(v109);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          uint64_t v110 = (void *)a7();
          swift_release();
          uint64_t v111 = v123;
          uint64_t v112 = v123[2];
          if (__OFADD__(v112, 3))
          {
            __break(1u);
          }
          else
          {
            int v113 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v123 = v111;
            id v22 = v120;
            if (!v113 || v112 + 3 > v111[3] >> 1) {
              uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._endMutation()();
            id v106 = v106;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (v123[2] < v123[3] >> 1) {
              goto LABEL_72;
            }
          }
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_72:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v114 = v108;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v115 = v110;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          int v30 = 0;
          int v57 = 1;
LABEL_45:
          __chkstk_darwin(v56);
          sub_1000963CC(0, v121);
          *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
          swift_getKeyPath();
          unint64_t v80 = (void *)((uint64_t (*)(void))v22)();
          swift_release();
          id v81 = v80;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          if (v57)
          {
            __chkstk_darwin(v82);
            *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
            uint64_t v83 = swift_getKeyPath();
            id v84 = [self localInternalAccountID];
            id v85 = [v84 uuid];

            unint64_t v86 = v118;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v87 = type metadata accessor for UUID();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v86, 0, 1, v87);
            uint64_t v88 = (void *)v116(v83, v86);
            swift_release();
            id v89 = v88;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (v123[2] >= v123[3] >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          if (v30)
          {
            __chkstk_darwin(v82);
            *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
            swift_getKeyPath();
            uint64_t v90 = (void *)v117();
            swift_release();
            id v91 = v90;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (v123[2] >= v123[3] >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          return v119(v123);
      }
    default:
      __chkstk_darwin(v24);
      uint64_t v31 = sub_1000963CC(0, v121);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v31;
      uint64_t v32 = swift_getKeyPath();
      id v33 = sub_1001FF8A4((uint64_t)a1);
      uint64_t v34 = (void *)a5(v32, v33);
      uint64_t v35 = swift_release();
      __chkstk_darwin(v35);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v31;
      swift_getKeyPath();
      uint64_t v36 = (void *)a6();
      uint64_t v37 = swift_release();
      __chkstk_darwin(v37);
      *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v31;
      swift_getKeyPath();
      uint64_t v38 = (void *)a7();
      swift_release();
      id v39 = v123;
      uint64_t v40 = v123[2];
      if (__OFADD__(v40, 3))
      {
        __break(1u);
      }
      else
      {
        int v41 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v123 = v39;
        if (!v41 || v40 + 3 > v39[3] >> 1) {
          uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._endMutation()();
        a7 = v34;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (v123[2] < v123[3] >> 1)
        {
LABEL_10:
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v42 = v36;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          id v43 = v38;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (v123[2] >= v123[3] >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          int v30 = 0;
LABEL_27:
          int v57 = 1;
LABEL_28:
          id v64 = (id)a12(0);
          id v65 = sub_1002308B4(0x6D72616C61, 0xE500000000000000);
          uint64_t v66 = (uint64_t (*)(void))sub_1002308B4(0x65722E6D72616C61, 0xEE007265646E696DLL);
          id v67 = v123;
          uint64_t v68 = v123[2];
          if (__OFADD__(v68, 3))
          {
            __break(1u);
          }
          else
          {
            a7 = v66;
            int v69 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v123 = v67;
            if (!v69 || v68 + 3 > v67[3] >> 1) {
              uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._endMutation()();
            id v64 = v64;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            id v22 = v120;
            if (v123[2] < v123[3] >> 1)
            {
LABEL_33:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              id v70 = v65;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v123[2] >= v123[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              int v71 = a7;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v123[2] >= v123[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              __chkstk_darwin(v72);
              uint64_t v45 = sub_1000963CC(0, v121);
              *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
              swift_getKeyPath();
              id v73 = (id)((uint64_t (*)(void))v22)();
              uint64_t v74 = swift_release();
              __chkstk_darwin(v74);
              *(&v116 - 2) = (uint64_t (*)(uint64_t, char *))v45;
              swift_getKeyPath();
              uint64_t v75 = (void *)((uint64_t (*)(void))v22)();
              swift_release();
              uint64_t v76 = v123;
              uint64_t v77 = v123[2];
              if (__OFADD__(v77, 2))
              {
                __break(1u);
              }
              else
              {
                int v78 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v123 = v76;
                if (!v78 || v77 + 2 > v76[3] >> 1) {
                  uint64_t v123 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                }
                specialized Array._endMutation()();
                id v73 = v73;
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (v123[2] < v123[3] >> 1) {
                  goto LABEL_42;
                }
              }
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_42:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              id v79 = v75;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (v123[2] >= v123[3] >> 1) {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              }
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              goto LABEL_45;
            }
          }
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          goto LABEL_33;
        }
      }
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_10;
  }
}

uint64_t sub_1002329F4(void *a1, unsigned __int8 a2)
{
  return sub_1002317C8(a1, a2, &qword_100910E00, (uint64_t)off_1008AA408, (uint64_t (*)(uint64_t, void *))sub_10039F46C, (uint64_t (*)(void))sub_10039F480, (uint64_t (*)(void))sub_10032ED80, (uint64_t (*)(uint64_t, char *))sub_10032ED8C, (uint64_t (*)(void *))sub_100230FC0, (uint64_t (*)(void))sub_10039F4A4, (uint64_t (*)(void))sub_10039F4B0, sub_1002F51CC, sub_10039F4D4, (uint64_t (*)(uint64_t, char *))sub_10039F4F4, (uint64_t (*)(void))sub_10039F4D4, (uint64_t (*)(void *))sub_1002F52FC);
}

uint64_t sub_100232B14(void *a1, unsigned __int8 a2)
{
  return sub_1002317C8(a1, a2, (unint64_t *)&qword_100910E40, (uint64_t)off_1008AA3E8, (uint64_t (*)(uint64_t, void *))sub_1003A0344, (uint64_t (*)(void))sub_1003A0578, (uint64_t (*)(void))sub_10032FA20, (uint64_t (*)(uint64_t, char *))sub_10032FBD4, (uint64_t (*)(void *))sub_100231258, (uint64_t (*)(void))sub_1003A07E4, (uint64_t (*)(void))sub_1003A11B0, sub_1002F51CC, sub_1003A054C, (uint64_t (*)(uint64_t, char *))sub_1003A05E4, (uint64_t (*)(void))sub_1003A054C, (uint64_t (*)(void *))sub_1002F52FC);
}

id sub_100232C34@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_100232C70(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

void sub_100232C8C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = [*a1 originalAlarmUID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_100232CF4(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v3 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v3 = 0;
  }
  id v4 = v3;
  [v2 setOriginalAlarmUID:];
}

id sub_100232D64@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 list];
  *a2 = result;
  return result;
}

id sub_100232DA0(void *a1, id *a2)
{
  return [*a2 setList:*a1];
}

uint64_t sub_100232DB4()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100232DF4()
{
  sub_10022FA3C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100232E00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100232E10()
{
  return swift_release();
}

unint64_t sub_100232E18(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    id result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100232EA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_1002C8B80(a2);
  if (v8) {
    goto LABEL_19;
  }
  int v9 = *(_DWORD *)(a2 + 36);
  if (v9 != v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v10 = 1 << *(unsigned char *)(a2 + 32);
  if (v10 < result)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(unsigned char *)(a1 + 16))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (v9 != v11) {
    goto LABEL_15;
  }
  if (*(void *)a1 < result)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(unsigned char *)(a1 + 40))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  if (v9 != v12) {
    goto LABEL_17;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v10 < v13)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(void *)a3 = *(void *)a1;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = v12;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = a2;

  return swift_bridgeObjectRetain();
}

void sub_100232F8C(void *a1@<X0>, void ***a2@<X8>)
{
  sub_10022E888(a1, *(void **)(v2 + 16), *(void *)(v2 + 32), a2);
}

uint64_t sub_100232FAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (result < 0)
  {
LABEL_16:
    __break(1u);
  }
  else
  {
    uint64_t v4 = result;
    uint64_t result = sub_1002C8B80(a2);
    uint64_t v6 = result;
    uint64_t v8 = v7;
    char v10 = v9 & 1;
    if (v4)
    {
      uint64_t v11 = *(unsigned int *)(a2 + 36);
      uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
      while ((v10 & 1) == 0)
      {
        if (v11 != v8)
        {
          __break(1u);
          goto LABEL_16;
        }
        if (v6 == v12)
        {
          char v10 = 0;
          uint64_t v6 = v12;
          uint64_t v8 = v11;
          goto LABEL_10;
        }
        uint64_t result = sub_1003C9E34(v6, v8, 0, a2);
        uint64_t v6 = result;
        uint64_t v8 = v13;
        char v10 = v14 & 1;
        if (!--v4) {
          goto LABEL_10;
        }
      }
      goto LABEL_19;
    }
LABEL_10:
    uint64_t result = sub_1002C8B80(a2);
    if (v10 & 1) != 0 || (v16) {
      goto LABEL_20;
    }
    if (v8 == v15)
    {
      if (v6 >= result)
      {
        v20[0] = result;
        v20[1] = v15;
        char v21 = 0;
        uint64_t v22 = v6;
        uint64_t v23 = v8;
        char v24 = 0;
        uint64_t result = sub_100232EA4((uint64_t)v20, a2, (uint64_t)v18);
        long long v17 = v18[1];
        *(_OWORD *)a3 = v18[0];
        *(_OWORD *)(a3 + 16) = v17;
        *(_OWORD *)(a3 + 32) = v18[2];
        *(void *)(a3 + 48) = v19;
        return result;
      }
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1002330E0(uint64_t result, unint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = result;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_4:
  if (v5 >= v3) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 < 0) {
    uint64_t v6 = v3;
  }
  if (v3) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 < v7)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v2 & 0xC000000000000001) != 0 && v7)
  {
    sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
    Swift::Int v10 = 0;
    do
    {
      Swift::Int v11 = v10 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v10);
      Swift::Int v10 = v11;
    }
    while (v7 != v11);
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v12;
}

uint64_t sub_100233284(uint64_t a1)
{
  unint64_t v2 = (void *)sub_1002317C8(0, 0xA0u, (unint64_t *)&unk_100910DD0, (uint64_t)off_1008AA400, (uint64_t (*)(uint64_t, void *))sub_10039FFBC, (uint64_t (*)(void))sub_10039FFD0, (uint64_t (*)(void))sub_10032F5B4, (uint64_t (*)(uint64_t, char *))sub_10032F5C0, (uint64_t (*)(void *))sub_100230D28, (uint64_t (*)(void))sub_10039FFF4, (uint64_t (*)(void))sub_1003A0000, sub_1002F51CC, sub_1003A0024, (uint64_t (*)(uint64_t, char *))sub_1003A0044, (uint64_t (*)(void))sub_1003A0024, (uint64_t (*)(void *))sub_1002F52FC);
  sub_1000963CC(0, (unint64_t *)&unk_100910DD0);
  id v3 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v4 = [(id)swift_getObjCClassFromMetadata() entity];
  [v3 setEntity:v4];

  [v3 setAffectedStores:0];
  [v3 setPredicate:v2];

  sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v3 setAffectedStores:isa];

  [v3 setFetchLimit:a1];
  sub_100094134((uint64_t *)&unk_10090AF20);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10077A530;
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  *(void *)(v6 + 32) = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  specialized Array._endMutation()();
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v3 setSortDescriptors:v7];

  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10077A530;
  *(void *)(inited + 32) = swift_getKeyPath();
  *(void *)&long long v32 = inited;
  specialized Array._endMutation()();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1001DE1C4(0, 1, 0);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if ((inited & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v10 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v11)
  {
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v30._object = (void *)0x80000001007CAF70;
    v30._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v30);
LABEL_16:
    sub_100094134(&qword_1009143E0);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  id v33 = &type metadata for String;
  swift_release();
  *(void *)&long long v32 = v12;
  *((void *)&v32 + 1) = v13;
  unint64_t v15 = _swiftEmptyArrayStorage[2];
  unint64_t v14 = _swiftEmptyArrayStorage[3];
  if (v15 >= v14 >> 1)
  {
    sub_1001DE1C4(v14 > 1, v15 + 1, 1);
    uint64_t v9 = v34;
  }
  v9[2] = v15 + 1;
  sub_10009A1A0(&v32, &v9[4 * v15 + 4]);
  swift_bridgeObjectRelease();
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v3 setPropertiesToFetch:v16];

  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_10077A530;
  *(void *)(v17 + 32) = swift_getKeyPath();
  *(void *)&long long v32 = v17;
  specialized Array._endMutation()();
  uint64_t v18 = v32;
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, 1, 0);
  uint64_t v19 = v34;
  if ((v18 & 0xC000000000000001) != 0) {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    swift_retain();
  }
  uint64_t v20 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (!v21)
  {
    *(void *)&long long v32 = 0;
    *((void *)&v32 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v31._object = (void *)0x80000001007CAF70;
    v31._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v31);
    goto LABEL_16;
  }
  uint64_t v22 = v20;
  uint64_t v23 = v21;
  swift_release();
  unint64_t v25 = v19[2];
  unint64_t v24 = v19[3];
  if (v25 >= v24 >> 1)
  {
    sub_1001DE058(v24 > 1, v25 + 1, 1);
    uint64_t v19 = v34;
  }
  uint64_t v19[2] = v25 + 1;
  uint64_t v26 = &v19[2 * v25];
  v26[4] = v22;
  void v26[5] = v23;
  swift_bridgeObjectRelease();
  Class v27 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  [v3 setRelationshipKeyPathsForPrefetching:v27];

  uint64_t v28 = NSManagedObjectContext.fetch<A>(_:)();
  return v28;
}

const char *sub_1002338C8()
{
  return "alarm";
}

id sub_1002338D4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 alarm];
  *a2 = result;
  return result;
}

id sub_100233910(void *a1, id *a2)
{
  return [*a2 setAlarm:*a1];
}

const char *sub_100233924()
{
  return "dueDateResolutionTokenAsNonce";
}

id sub_100233930@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 dueDateResolutionTokenAsNonce];
  *a2 = v4;
  return result;
}

id sub_100233964(double *a1, id *a2)
{
  return [*a2 setDueDateResolutionTokenAsNonce:*a1];
}

id sub_100233980@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2 = result;
  return result;
}

id sub_1002339BC(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

uint64_t sub_1002339D0()
{
  return 8;
}

void *sub_1002339DC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1002339E8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10022FB64(a1, a2);
}

void sub_100233A00(uint64_t a1, void **a2)
{
}

uint64_t sub_100233A18()
{
  return 8;
}

void sub_100233A24(void *a1, unsigned __int8 a2)
{
  switch(a2 >> 5)
  {
    case 0:
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
    case 4:

      break;
    default:
      return;
  }
}

id sub_100233A70@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 alarm];
  *a2 = result;
  return result;
}

id sub_100233AAC(void *a1, id *a2)
{
  return [*a2 setAlarm:*a1];
}

uint64_t sub_100233AC0()
{
  return 8;
}

id sub_100233ACC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 reminder];
  *a2 = result;
  return result;
}

id sub_100233B08(void *a1, id *a2)
{
  return [*a2 setReminder:*a1];
}

uint64_t sub_100233B1C()
{
  return 8;
}

id sub_100233B28@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 list];
  *a2 = result;
  return result;
}

id sub_100233B64(void *a1, id *a2)
{
  return [*a2 setList:*a1];
}

uint64_t sub_100233B78()
{
  return 8;
}

const char *sub_100233B84()
{
  return "daIsEventOnlyContainer";
}

id sub_100233B90@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsEventOnlyContainer];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233BC4(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsEventOnlyContainer:*a1];
}

uint64_t sub_100233BD8()
{
  return 8;
}

uint64_t sub_100233BE4()
{
  return 8;
}

uint64_t sub_100233BF0()
{
  return 8;
}

uint64_t sub_100233BFC()
{
  return 8;
}

const char *sub_100233C08()
{
  return "daIsNotificationsCollection";
}

id sub_100233C14@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 daIsNotificationsCollection];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233C48(unsigned __int8 *a1, id *a2)
{
  return [*a2 setDaIsNotificationsCollection:*a1];
}

uint64_t sub_100233C5C()
{
  return 8;
}

uint64_t sub_100233C68()
{
  return 8;
}

id sub_100233C74@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 inactive];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233CA8(unsigned __int8 *a1, id *a2)
{
  return [*a2 setInactive:*a1];
}

uint64_t sub_100233CBC()
{
  return 8;
}

uint64_t sub_100233CC8()
{
  return 8;
}

uint64_t sub_100233CD4()
{
  return 8;
}

id sub_100233CE0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 completed];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233D14(unsigned __int8 *a1, id *a2)
{
  return [*a2 setCompleted:*a1];
}

uint64_t sub_100233D28()
{
  return 8;
}

uint64_t sub_100233D34()
{
  return 8;
}

uint64_t sub_100233D40()
{
  return 8;
}

uint64_t sub_100233D54()
{
  return 8;
}

const char *sub_100233D60()
{
  return "isExtraneous";
}

id sub_100233D6C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 isExtraneous];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233DA0(unsigned __int8 *a1, id *a2)
{
  return [*a2 setIsExtraneous:*a1];
}

uint64_t sub_100233DB4()
{
  return 8;
}

uint64_t sub_100233DC0()
{
  return 8;
}

uint64_t sub_100233DCC()
{
  return 8;
}

uint64_t sub_100233DD8()
{
  return 8;
}

uint64_t sub_100233DE4()
{
  return 8;
}

id sub_100233DF0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 markedForDeletion];
  *a2 = (_BYTE)result;
  return result;
}

id sub_100233E24(unsigned __int8 *a1, id *a2)
{
  return [*a2 setMarkedForDeletion:*a1];
}

uint64_t sub_100233E38()
{
  return 8;
}

uint64_t sub_100233E44()
{
  return 8;
}

const char *sub_100233E50()
{
  return "originalAlarmUID";
}

uint64_t sub_100233E64()
{
  return 8;
}

const char *sub_100233E70()
{
  return "ckDirtyFlags";
}

id sub_100233E7C@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 ckDirtyFlags];
  *a2 = (_WORD)result;
  return result;
}

id sub_100233EB0(__int16 *a1, id *a2)
{
  return [*a2 setCkDirtyFlags:*a1];
}

uint64_t sub_100233EC4()
{
  return 8;
}

uint64_t sub_100233ED0()
{
  return 8;
}

uint64_t sub_100233EDC()
{
  return 8;
}

uint64_t sub_100233EE8()
{
  return 8;
}

uint64_t sub_100233EF4()
{
  return 8;
}

uint64_t sub_100233F00()
{
  return 8;
}

uint64_t sub_100233F0C()
{
  return 8;
}

uint64_t sub_100233F18()
{
  return 8;
}

uint64_t sub_100233F24()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100233F5C()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100233F9C()
{
}

uint64_t sub_100233FA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100233FEC()
{
  return sub_10022D540();
}

uint64_t sub_100233FF4()
{
  return sub_10022DB70();
}

uint64_t sub_100233FFC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1002340FC()
{
  unsigned int v1 = [v0 activityTypeRawValue];
  if (v1 >= 6) {
    return 6;
  }
  else {
    return (0x20504030100uLL >> (8 * v1));
  }
}

uint64_t sub_100234144()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100910E50);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100910E50);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_10023420C(char a1)
{
  unint64_t result = 0x6E776F6E6B6E75;
  switch(a1)
  {
    case 1:
      unint64_t result = 6579297;
      break;
    case 2:
      unint64_t result = 0x6574656C706D6F63;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_1002342D0(char *a1, char *a2)
{
  return word_100783098[*a1] == word_100783098[*a2];
}