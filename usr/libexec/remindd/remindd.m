void sub_100003898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000038C0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000038D0(uint64_t a1)
{
}

void sub_1000038D8(void *a1)
{
  v2 = +[REMCDList fetchRequest];
  [v2 setPropertiesToFetch:&off_1008D7808];
  uint64_t v18 = a1[4];
  v3 = +[NSArray arrayWithObjects:&v18 count:1];
  [v2 setAffectedStores:v3];

  [v2 setFetchBatchSize:50];
  v4 = +[NSPredicate predicateWithFormat:@"account == NULL"];
  [v2 setPredicate:v4];

  id v5 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  uint64_t v17 = a1[4];
  v6 = +[NSArray arrayWithObjects:&v17 count:1];
  [v5 setAffectedStores:v6];

  [v5 setResultType:2];
  v7 = (void *)a1[5];
  id v16 = 0;
  uint64_t v8 = [v7 executeRequest:v5 error:&v16];
  id v9 = v16;
  uint64_t v10 = *(void *)(a1[6] + 8);
  v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v8;

  v12 = (void *)a1[5];
  id v15 = v9;
  LOBYTE(v8) = [v12 save:&v15];
  id v13 = v15;

  if ((v8 & 1) == 0)
  {
    v14 = +[REMLogStore container];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
      sub_100748F0C((uint64_t)v13, v14);
    }
  }
}

void sub_100003C28(void *a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  objc_opt_class();
  v6 = REMDynamicCast();
  v7 = v6;
  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  if (v6)
  {
    uint64_t v10 = [v6 ic_prettyDescriptionWithTabLevel:a1[6] + 1];
    [v8 appendFormat:@"%@%@ = %@\n", v9, v11, v10];
  }
  else
  {
    [v8 appendFormat:@"%@%@ = %@\n", v9, v11, v5];
  }
}

void sub_100003D7C(id a1)
{
  v1 = +[NSFileManager defaultManager];
  v2 = [v1 URLsForDirectory:5 inDomains:8];

  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v11 + 1) + 8 * i) URLByAppendingPathComponent:@"LocationBundles" stringByAppendingPathComponent:v11];
        uint64_t v9 = [v8 URLByAppendingPathComponent:@"RemindersAlerts.bundle"];

        if ([v9 checkResourceIsReachableAndReturnError:0])
        {
          uint64_t v10 = (void *)qword_100922828;
          qword_100922828 = (uint64_t)v9;

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_100003F94(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("RDPathsCreateApplicationDocumentsURL", v3);
  v2 = (void *)qword_100922820;
  qword_100922820 = (uint64_t)v1;
}

void sub_100003FF8(id a1)
{
  if (!qword_100922840)
  {
    uint64_t v1 = +[REMPaths URLForGroupContainerWithIdentifier:REMAppGroupBundleIdentifier];
    v2 = (void *)qword_100922840;
    qword_100922840 = v1;

    if (!qword_100922840)
    {
      qword_100922840 = +[REMPaths legacy_applicationDocumentsURL];
      _objc_release_x1();
    }
  }
}

void sub_1000042A4(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("RDPathsCreateApplicationDocumentsURL", v3);
  v2 = (void *)qword_100922820;
  qword_100922820 = (uint64_t)v1;
}

void sub_100004308(uint64_t a1)
{
}

void sub_1000045C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_sync_exit(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000045EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000045FC(uint64_t a1)
{
}

void sub_100004604(id a1)
{
  qword_100922848 = (uint64_t)objc_alloc_init((Class)NSMutableDictionary);

  _objc_release_x1();
}

void sub_100004640(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = [*(id *)(a1 + 32) _applicationDocumentsURLForPersonaIdentifier:a2 accountIdentifier:*(void *)(a1 + 40)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  if (*(void *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    v7 = (void *)qword_100922848;
    [v7 setObject:v6 forKeyedSubscript:];
  }
}

id sub_100004A74(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelFireRequests];
}

void sub_100004B04(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) waitToFireUntilRequestsStop];
  uint64_t v3 = [*(id *)(a1 + 32) fireBlock];
  uint64_t v4 = v3;
  if (v2)
  {

    if (v4) {
      [*(id *)(a1 + 32) _cancelFireRequests];
    }
  }
  else
  {

    if (v4) {
      return;
    }
  }
  objc_initWeak(&location, *(id *)(a1 + 32));
  long long v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3221225472;
  long long v13 = sub_100004C9C;
  long long v14 = &unk_1008ADAF0;
  objc_copyWeak(&v15, &location);
  dispatch_block_t v5 = dispatch_block_create((dispatch_block_flags_t)0, &v11);
  [*(id *)(a1 + 32) setFireBlock:v5, v11, v12, v13, v14];

  if ([*(id *)(a1 + 32) callOnMainThread])
  {
    uint64_t v6 = &_dispatch_main_q;
    id v7 = &_dispatch_main_q;
  }
  else
  {
    uint64_t v6 = dispatch_get_global_queue(0, 0);
  }
  [*(id *)(a1 + 32) delay];
  dispatch_time_t v9 = dispatch_time(0, (uint64_t)(v8 * 1000000000.0));
  uint64_t v10 = [*(id *)(a1 + 32) fireBlock];
  dispatch_after(v9, v6, v10);

  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);
}

void sub_100004C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100004C9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained requestQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100004D5C;
    block[3] = &unk_1008ADA80;
    id v4 = v2;
    id v6 = v4;
    dispatch_sync(v3, block);

    [v4 callTargetSelector];
  }
}

id sub_100004D5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setFireBlock:0];
}

id sub_100004E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelFireRequests];
}

id sub_100004E78(uint64_t a1)
{
  return [*(id *)(a1 + 32) callTargetSelector];
}

void sub_10000501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100005034(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) fireBlock];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;
}

id sub_10000510C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelFireRequests];
}

void sub_100005C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100005C64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100005C74(uint64_t a1)
{
}

void sub_100005C7C(void *a1)
{
  unsigned int v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v29 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v29];
  id v5 = v29;
  if (v4)
  {
    if ([v4 count] == (id)1)
    {
      id v6 = [v4 firstObject];
      uint64_t v7 = [v6 identifier];
      uint64_t v8 = *(void *)(a1[7] + 8);
      dispatch_time_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      if (!*(void *)(*(void *)(a1[7] + 8) + 40))
      {
        uint64_t v10 = +[REMLogStore container];
        if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
          sub_10074924C((uint64_t)v6, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
    else
    {
      id v6 = +[REMLogStore container];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        sub_1007492B8((uint64_t)a1, v6, v23, v24, v25, v26, v27, v28);
      }
    }
  }
  else
  {
    id v6 = +[REMLogStore container];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_1007491E0((uint64_t)v5, v6, v17, v18, v19, v20, v21, v22);
    }
  }
}

void sub_100005DC8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

id sub_100005F30(uint64_t a1)
{
  return _[*(id *)(a1 + 32) resetPolicy];
}

id sub_100005FEC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) policyResetTimer];
  [v2 invalidate];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 setPolicyResetTimer:0];
}

id sub_100006260(uint64_t a1)
{
  return _[*(id *)(a1 + 32) savePolicyState];
}

id sub_100006718(uint64_t a1)
{
  return _[*(id *)(a1 + 32) savePolicyState];
}

void sub_100006794(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) policyResetTimer];
  unsigned int v3 = [v2 isValid];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) policyResetTimer];
    [v4 invalidate];

    [*(id *)(a1 + 32) setPolicyResetTimer:0];
  }
  id v5 = [*(id *)(a1 + 32) policyStartDate];
  [*(id *)(a1 + 32) resetInterval];
  [v5 dateByAddingTimeInterval:];
  id v7 = (id)objc_claimAutoreleasedReturnValue();

  [v7 timeIntervalSinceNow];
  id v6 = +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(void *)(a1 + 32), "resetPolicy", 0, 0);
  [*(id *)(a1 + 32) setPolicyResetTimer:v6];
}

void sub_100007850(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 160));
  _Unwind_Resume(a1);
}

void sub_1000078C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC: Done waiting DADSystemAvailabilityChecker upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.", buf, 2u);
    }

    [WeakRetained setIsSystemAvailableForSyncing:1];
    [WeakRetained bootstrapSyncingOnLaunchIfSystemReady];
    uint64_t v3 = +[REMLog cloudkit];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}", v5, 2u);
    }

    id v4 = self;
  }
}

void sub_1000079C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.", buf, 2u);
    }

    [WeakRetained setPendingAccountInitializerCompleteOnLaunch:0];
    [WeakRetained bootstrapSyncingOnLaunchIfSystemReady];
    uint64_t v3 = [WeakRetained accountInitializerDidCompleteOnLaunchObserver];
    [v3 unobserve];

    [WeakRetained setAccountInitializerDidCompleteOnLaunchObserver:0];
    id v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}", v6, 2u);
    }

    id v5 = self;
  }
}

id sub_100007AE4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) updateConfiguration];
}

void sub_100007C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100007C9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC: Actually running bootstrapSyncingOnLaunchIfSystemReady to bootstrap CloudKit syncing.", v3, 2u);
  }

  [WeakRetained loadSubscribedSubscriptionIDs];
  [WeakRetained setupAPSConnection];
  [WeakRetained adjustAPSNotificationDebouncerInterval];
  [WeakRetained observePrimaryCloudKitAccountPersonIDSaltChanges];
  [WeakRetained retryProcessingCloudObjects];
  [WeakRetained updateCloudContextStateWithReason:@"InitWithStoreController"];
}

void sub_100007F08(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_100007F28(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCC received buddy finished notification.", v4, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setHasPassedBuddy:1];
  [WeakRetained pq_unregisterForBuddy];
}

void sub_100007FBC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) buddyStateObserver];
  [v1 start];
}

void sub_1000084F8(uint64_t a1)
{
  +[REMCDAccount allCloudKitAccountsInContext:*(void *)(a1 + 32)];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v1 = v24 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v22;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v22 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v7 = [v6 personID];
        uint64_t v8 = [v6 personID];
        uint64_t v9 = [v6 accountTypeHost];
        unsigned __int8 v10 = [v9 isPrimaryCloudKit];

        CFStringRef v11 = @"PRIMARY-CLOUDKIT";
        if ((v10 & 1) == 0)
        {
          uint64_t v12 = [v6 accountTypeHost];
          unsigned int v13 = [v12 isNonPrimaryCloudKit];

          if (!v13) {
            goto LABEL_10;
          }
          [*(id *)(a1 + 40) unsafeUntilSystemReady_hashedAccountPersonIDForAccount:v6 usingSalt:*(void *)(a1 + 48)];
          CFStringRef v11 = (const __CFString *)objc_claimAutoreleasedReturnValue();
        }

        uint64_t v8 = (void *)v11;
LABEL_10:
        if (([v7 isEqual:v8] & 1) == 0)
        {
          [v6 setPersonID:v8];
          uint64_t v14 = +[REMLog cloudkit];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = [v6 identifier];
            uint64_t v16 = [v15 UUIDString];
            *(_DWORD *)buf = 138543874;
            id v26 = v16;
            __int16 v27 = 2114;
            uint64_t v28 = v7;
            __int16 v29 = 2114;
            v30 = v8;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Updating CK account personID due to primary CK account salt set {account.identifier: %{public}@, oldPersonID: %{public}@, newPersonID: %{public}@}", buf, 0x20u);
          }
        }
      }
      id v3 = [v1 countByEnumeratingWithState:&v21 objects:v31 count:16];
    }
    while (v3);
  }
  if ([*(id *)(a1 + 32) hasChanges])
  {
    [*(id *)(a1 + 32) ic_saveWithLogDescription:@"Saved personID changes on CK accounts upon primary CK account salt set (salt: %@)", *(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v17 = +[REMLog cloudkit];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [v1 count];
      uint64_t v19 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 134218242;
      id v26 = v18;
      __int16 v27 = 2112;
      uint64_t v28 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "No personID update made upon primary CK account salt set {ckAccounts.count: %ld, salt: %@}", buf, 0x16u);
    }
  }
}

void sub_1000088BC(uint64_t a1)
{
  id v1 = +[REMCDAccount allCloudKitAccountsInContext:*(void *)(a1 + 32)];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = [v1 countByEnumeratingWithState:&v17 objects:v27 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v18;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v18 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        id v7 = [v6 personID];
        uint64_t v8 = [v6 personIDSalt];
        uint64_t v9 = [v8 base64EncodedStringWithOptions:0];

        if (v7)
        {
          [v6 setPersonID:0];
          unsigned __int8 v10 = +[REMLog cloudkit];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v11 = [v6 identifier];
            uint64_t v12 = [v11 UUIDString];
            *(_DWORD *)buf = 138543874;
            id v22 = v12;
            __int16 v23 = 2114;
            long long v24 = v7;
            __int16 v25 = 2112;
            id v26 = v9;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Unsetting CK account personID due to primary CK account salt error {account.identifier: %{public}@, origPersonID: %{public}@, origPersonIDSalt: %@}", buf, 0x20u);
          }
        }
      }
      id v3 = [v1 countByEnumeratingWithState:&v17 objects:v27 count:16];
    }
    while (v3);
  }
  if ([*(id *)(a1 + 32) hasChanges])
  {
    [*(id *)(a1 + 32) ic_saveWithLogDescription:@"Saved personID changes on CK accounts upon salt update error (error: %@)" , *(void *)(a1 + 40)];
  }
  else
  {
    unsigned int v13 = +[REMLog cloudkit];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = [v1 count];
      uint64_t v15 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 134218242;
      id v22 = v14;
      __int16 v23 = 2114;
      long long v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No personID update made upon primary CK account salt update error {ckAccounts.count: %ld, error: %{public}@}", buf, 0x16u);
    }
  }
}

void sub_100008D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100008DB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = +[REMLog cloudkit];
  id v6 = v5;
  if (WeakRetained)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v7 = [WeakRetained accountPersonIDSaltObserver];
      uint64_t v8 = [v7 uuid];
      int v9 = 138543362;
      unsigned __int8 v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ICCC received a primary CK account personIDSalt change or initial value {observer: %{public}@}", (uint8_t *)&v9, 0xCu);
    }
    [WeakRetained primaryCloudKitAccountPersonIDSaltDidSetWithSalt:v3];
    id v6 = [*(id *)(a1 + 32) unitTest_notificationCenter];
    [v6 postNotificationName:@"unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidSetNotification" object:WeakRetained];
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    sub_100749668();
  }
}

void sub_100008F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!WeakRetained)
  {
    unsigned __int8 v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10074969C();
    }
    goto LABEL_8;
  }
  id v5 = +[RDAccountPersonIDSaltObserver InitiallyNilError];
  unsigned __int8 v6 = [v3 isEqual:v5];

  if ((v6 & 1) == 0)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [WeakRetained accountPersonIDSaltObserver];
      int v9 = [v8 uuid];
      int v11 = 138543618;
      uint64_t v12 = v9;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "ICCC received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}", (uint8_t *)&v11, 0x16u);
    }
    [WeakRetained primaryCloudKitAccountPersonIDSaltDidFailToSetWithError:v3];
    unsigned __int8 v10 = [*(id *)(a1 + 32) unitTest_notificationCenter];
    [v10 postNotificationName:@"unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidFailToSetNotification" object:WeakRetained];
LABEL_8:
  }
}

void sub_100009228(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 160))
  {
    id v2 = objc_opt_new();
    id v3 = [*(id *)(a1 + 32) context];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10000931C;
    v9[3] = &unk_1008ADD00;
    v9[4] = *(void *)(a1 + 32);
    id v10 = v3;
    id v11 = v2;
    id v4 = v2;
    id v5 = v3;
    [v5 performBlockAndWait:v9];
    id v6 = [v4 copy];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 160);
    *(void *)(v7 + 160) = v6;
  }
}

void sub_10000931C(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [[*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v6) identifier];
        uint64_t v8 = [v7 UUIDString];

        if ([v8 length])
        {
          id v9 = +[REMCloudContainer newCloudContainerForAccountID:v8];
          [*(id *)(a1 + 48) setObject:v9 forKeyedSubscript:v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100009550(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 160);
  *(void *)(v1 + 160) = 0;
}

void sub_100009834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000984C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000985C(uint64_t a1)
{
}

void sub_100009864(void *a1)
{
  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    id v2 = +[REMCloudContainer newCloudContainerForAccountID:a1[4]];
    uint64_t v3 = *(void *)(a1[6] + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = [*(id *)(a1[5] + 160) mutableCopy];
    [v5 setObject:*(void *)(*(void *)(a1[6] + 8) + 40) forKeyedSubscript:a1[4]];
    uint64_t v6 = a1[5];
    uint64_t v7 = *(void **)(v6 + 160);
    *(void *)(v6 + 160) = v5;
  }
}

id sub_100009B7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) pq_unregisterForBuddy];
}

uint64_t sub_100009DD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10000A4AC(id a1)
{
  long long v13 = +[REMCDAccountListData cdEntityName];
  uint64_t v1 = +[REMCDAuxiliaryReminderChangeDeleteInfo cdEntityName];
  id v2 = +[REMCDAuxiliaryReminderChangeMoveInfo cdEntityName];
  uint64_t v3 = +[REMCDCalDAVNotification cdEntityName];
  id v4 = +[REMCDHashtagLabel cdEntityName];
  id v5 = +[REMCDChangeTrackingState cdEntityName];
  uint64_t v6 = +[REMCDReplicaManager cdEntityName];
  uint64_t v7 = +[REMCKServerChangeToken cdEntityName];
  uint64_t v8 = +[REMCKSharedEntitySyncActivity cdEntityName];
  id v9 = +[REMCKSharedObjectOwnerName cdEntityName];
  long long v10 = +[REMCDDueDateDeltaAlert cdEntityName];
  uint64_t v11 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v13, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, 0);
  long long v12 = (void *)qword_100922858;
  qword_100922858 = v11;
}

void sub_10000A728(id a1)
{
  qword_100922868 = +[NSSet setWithObjects:RDStoreControllerICCloudContextServerChangeTokenAuthor, @"com.apple.remindd.ICCloudContext.setPersonID", RDHashtagLabelUpdaterAuthor, RDStalePinnedListsEventHandlerAuthor, RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerAuthor, RDSyncActivityNotificationEngineAuthor, REMNSPersistentHistoryTrackingAuthor, RDStagedLightweightMigrationAuthor, RDStoreControllerIsPinnedByCurrentUserMigrationAuthor, RDStoreControllerMostRecentTargetTemplateIdentifierByCurrentUserMigrationAuthor, RDStoreControllerDeduplicationActivityAuthor, RDStoreControllerSuggestConversionToGroceryListActivityAuthor, RDStoreControllerBatchDeleteExpiredRemindersActivityAuthor, 0];

  _objc_release_x1();
}

void sub_10000A8F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 debugSyncDisabled] & 1) == 0) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

void sub_10000AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000AD8C(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 intValue];
  if (result <= 1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10000AEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10000AED8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isCloudKitAccountAvailableWithManagedObjectContext:*(void *)(a1 + 40) requireActive:*(unsigned __int8 *)(a1 + 56)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10000B40C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000B4C0(id a1)
{
  qword_100922880 = +[REMSystemUtilities systemBuildVersion];

  _objc_release_x1();
}

void sub_10000B554(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  id v2 = (void *)qword_100922890;
  qword_100922890 = v1;

  v24[0] = objc_opt_class();
  v24[1] = objc_opt_class();
  v24[2] = objc_opt_class();
  v24[3] = objc_opt_class();
  v24[4] = objc_opt_class();
  v24[5] = objc_opt_class();
  v24[6] = objc_opt_class();
  v24[7] = objc_opt_class();
  v24[8] = objc_opt_class();
  v24[9] = objc_opt_class();
  v24[10] = objc_opt_class();
  v24[11] = objc_opt_class();
  v24[12] = objc_opt_class();
  v24[13] = objc_opt_class();
  v24[14] = objc_opt_class();
  v24[15] = objc_opt_class();
  v24[16] = objc_opt_class();
  +[NSArray arrayWithObjects:v24 count:17];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue();
  id v3 = [obj countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v19;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v19 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v8 = [v7 performSelector:"recordTypes"];
        long long v14 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        id v9 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v15;
          do
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(void *)v15 != v11) {
                objc_enumerationMutation(v8);
              }
              [(id)qword_100922890 setObject:v7 forKeyedSubscript:*(void *)(*((void *)&v14 + 1) + 8 * (void)j)];
            }
            id v10 = [v8 countByEnumeratingWithState:&v14 objects:v22 count:16];
          }
          while (v10);
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v18 objects:v23 count:16];
    }
    while (v4);
  }
}

void sub_10000B8B8(id a1)
{
  uint64_t v1 = +[NSMutableArray array];
  id v2 = (void *)qword_1009228A0;
  qword_1009228A0 = v1;

  v14[0] = objc_opt_class();
  v14[1] = objc_opt_class();
  v14[2] = objc_opt_class();
  +[NSArray arrayWithObjects:v14 count:3];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v9 + 1) + 8 * i) performSelector: @"recordTypes" withObject: v9];
        [(id)qword_1009228A0 addObjectsFromArray:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_10000BA94(id a1)
{
  qword_1009228A8 = (uint64_t)[objc_alloc((Class)CKRecordZoneID) initWithZoneName:@"Reminders" ownerName:CKCurrentUserDefaultName databaseScope:2];

  _objc_release_x1();
}

void sub_10000BB40(id a1)
{
  qword_1009228B8 = (uint64_t)[objc_alloc((Class)CKRecordZoneID) initWithZoneName:@"RemindersMigration" ownerName:CKCurrentUserDefaultName databaseScope:2];

  _objc_release_x1();
}

void sub_10000BBEC(id a1)
{
  qword_1009228C8 = (uint64_t)[objc_alloc((Class)CKRecordZoneID) initWithZoneName:@"Metadata" ownerName:CKCurrentUserDefaultName databaseScope:2];

  _objc_release_x1();
}

void sub_10000BE74(id a1, BOOL a2, NSError *a3)
{
  id v3 = a3;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Reachability sync finished {error: %{public}@}", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10000BFB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountChangedNotificationHandlingDebouncer];
  id v3 = +[NSSet setWithObject:&off_1008D7150];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10000C070;
  v4[3] = &unk_1008ADF58;
  v4[4] = *(void *)(a1 + 32);
  [v2 fire:v3 completion:v4];
}

void sub_10000C070(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = +[REMLog cloudkit];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CloudKit account status may have changed", buf, 2u);
    }

    id v4 = [*(id *)(a1 + 32) accountStatusNumberByAccountID];
    id v5 = [v4 copy];

    uint64_t v6 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10000C17C;
    v8[3] = &unk_1008ADF30;
    id v9 = v5;
    long long v10 = v6;
    id v7 = v5;
    [v6 updateAccountStatusWithCompletionHandler:v8];
  }
}

uint64_t sub_10000C17C(uint64_t a1, id a2)
{
  uint64_t v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:];
  if (!v7 || (v4 = [*(id *)(a1 + 40) accountStatusFromAccountStatusNumber:v7], uint64_t v5 = v7, v4 != a2))
  {
    id v4 = [*(id *)(a1 + 40) updateCloudContextStateWithReason:@"CloudKitAccountChanged"];
    uint64_t v5 = v7;
  }

  return _objc_release_x1(v4, v5);
}

_DWORD *sub_10000C5A0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) != 3) {
    return 0;
  }
  id v3 = +[REMLog cloudkit];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 136446210;
    uint64_t v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Processing os_state handler: %{public}s", buf, 0xCu);
  }

  uint64_t v5 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v13 = 0;
  uint64_t v6 = +[NSPropertyListSerialization dataWithPropertyList:v5 format:200 options:0 error:&v13];
  id v7 = v13;
  if (v7)
  {
    uint64_t v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
      sub_100749B58();
    }
  }
  if ((unint64_t)[v6 length] >> 32)
  {
    long long v11 = +[REMLog cloudkit];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_100749AEC();
    }

    long long v10 = 0;
  }
  else
  {
    unsigned int v9 = [v6 length];
    long long v10 = malloc_type_calloc(1uLL, v9 + 200, 0x17ECDB5CuLL);
    *long long v10 = 1;
    v10[1] = v9;
    __strlcpy_chk();
    memcpy(v10 + 50, [v6 bytes], v9);
  }

  return v10;
}

void sub_10000C864(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_10000C880(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v16 = +[NSMutableDictionary dictionary];
  uint64_t v2 = +[NSMutableDictionary dictionary];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v3 = [WeakRetained operationQueue];
  uint64_t v4 = [v3 operations];

  id obj = v4;
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v19;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v19 != v7) {
          objc_enumerationMutation(obj);
        }
        unsigned int v9 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        long long v10 = (objc_class *)objc_opt_class();
        long long v11 = NSStringFromClass(v10);
        long long v12 = [v9 ic_loggingIdentifier];
        id v13 = +[NSString stringWithFormat:@"%@ %@", v11, v12];

        long long v14 = [v9 ic_loggingValues];
        [v2 setObject:v14 forKeyedSubscript:v13];
      }
      id v6 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v6);
  }

  [v16 setObject:v2 forKeyedSubscript:@"operations"];

  return v16;
}

void sub_10000DA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000DAB8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) primaryCloudKitAccountInContext:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 generateAndSavePersonIDSaltIfNeededWithContext:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100749CFC();
    }
  }
}

void sub_10000DFA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  id v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138543362;
    uint64_t v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: %{public}@}", (uint8_t *)&v8, 0xCu);
  }

  id v7 = self;
}

void sub_10000E094(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  id v3 = [[ICCloudContextSyncMetrics alloc] initWithSyncReason:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setLastSyncMetrics:v3];

  uint64_t v4 = [*(id *)(a1 + 32) _existingCloudDirtyToken];
  unsigned int v5 = [*(id *)(a1 + 32) isFetchingEnabled];
  unsigned int v6 = v5;
  if (*(unsigned char *)(a1 + 80))
  {
    if (v4) {
      char v7 = v5;
    }
    else {
      char v7 = 0;
    }
    if (v7) {
      goto LABEL_6;
    }
LABEL_15:
    long long v19 = +[REMLog cloudkit];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)v44 = v6;
      *(_WORD *)&v44[4] = 1024;
      *(_DWORD *)&v44[6] = v20;
      *(_WORD *)v45 = 2114;
      *(void *)&v45[2] = v4;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] CONTINUE - Trying to sync with fetching disabled, so only pushing. {isFetchingEnabled: %d, discretionary: %d, cloudDirtyToken: %{public}@}", buf, 0x18u);
    }

    long long v21 = *(void **)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 40);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_10000E4F4;
    v36[3] = &unk_1008AE048;
    v36[4] = v21;
    id v37 = *(id *)(a1 + 48);
    id v23 = *(id *)(a1 + 56);
    __int16 v25 = *(void **)(a1 + 64);
    uint64_t v24 = *(void *)(a1 + 72);
    id v38 = v23;
    uint64_t v40 = v24;
    id v39 = v25;
    [v21 processAllDirtyCloudObjectsWithSyncReason:v22 completionHandler:v36];

    goto LABEL_18;
  }
  if ((v5 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_6:
  int v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 138543874;
    *(void *)v44 = v9;
    *(_WORD *)&v44[8] = 1024;
    *(_DWORD *)v45 = v10;
    *(_WORD *)&v45[4] = 2114;
    *(void *)&v45[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] CONTINUE - Performing full sync {syncReason: %{public}@, discretionary: %d, cloudDirtyToken: %{public}@}", buf, 0x1Cu);
  }

  long long v11 = +[DABabysitter sharedBabysitter];
  long long v12 = [v11 tokenByRegisteringAccount:*(void *)(a1 + 32) forOperationWithName:@"SYNC[FULL]"];

  if (v12) {
    goto LABEL_13;
  }
  if (isCloudContextSyncReasonUserInitiated(*v2))
  {
    id v13 = +[REMLog cloudkit];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100749E58(a1 + 40, a1 + 32);
    }

LABEL_13:
    long long v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10000E768;
    v29[3] = &unk_1008AE070;
    v29[4] = v14;
    v29[5] = v15;
    id v30 = *(id *)(a1 + 48);
    id v31 = v4;
    id v16 = *(id *)(a1 + 56);
    long long v17 = *(void **)(a1 + 64);
    uint64_t v35 = *(void *)(a1 + 72);
    id v32 = v16;
    id v33 = v12;
    id v34 = v17;
    id v18 = v12;
    [v14 _syncWithReason:v15 completionHandler:v29];

    goto LABEL_18;
  }
  id v26 = +[REMError babySatErrorWithOperationName:@"SYNC[FULL]"];
  CFStringRef v41 = @"identifier";
  CFStringRef v42 = @"SYNC[FULL]";
  __int16 v27 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
  +[Analytics postEventWithName:@"com.apple.remindd.cloudkit.sync.crashDetected" payload:v27 error:v26 performAutoBugCaptureOnError:1];

  uint64_t v28 = +[REMLog cloudkit];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT)) {
    sub_100749EE4(a1 + 40, a1 + 32);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
LABEL_18:
}

void sub_10000E4F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [(id)objc_opt_class() errorFromErrors:v3];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000E5F8;
  block[3] = &unk_1008AE020;
  id v10 = v4;
  id v11 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  char v7 = *(void **)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v12 = v5;
  uint64_t v14 = v6;
  id v13 = v7;
  id v8 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

uint64_t sub_10000E5F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[REMLog cloudkit];
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100749F70();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = +[NSDate date];
    [v5 timeIntervalSinceDate:*(void *)(a1 + 40)];
    int v11 = 134217984;
    uint64_t v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] {duration: %.4f}", (uint8_t *)&v11, 0xCu);
  }
  char v7 = *(id *)(a1 + 48);
  id v8 = v7;
  os_signpost_id_t v9 = *(void *)(a1 + 64);
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    LOWORD(v11) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_INTERVAL_END, v9, "cloudkit.full", "", (uint8_t *)&v11, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_10000E768(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) lastSyncMetrics];
  id v5 = v4;
  if (v3)
  {
    [v4 finishWithSuccess:0];

    uint64_t v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100749FD8();
    }
  }
  else
  {
    [v4 finishWithSuccess:1];

    uint64_t v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      char v7 = +[NSDate date];
      [v7 timeIntervalSinceDate:*(void *)(a1 + 48)];
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218242;
      uint64_t v23 = v9;
      __int16 v24 = 2114;
      uint64_t v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] END {duration: %.4f, syncReason: %{public}@}", buf, 0x16u);
    }
  }

  id v10 = [*(id *)(a1 + 32) processingQueue];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10000E9D0;
  v18[3] = &unk_1008ADC60;
  id v11 = v3;
  id v19 = v11;
  long long v20 = *(_OWORD *)(a1 + 32);
  id v21 = *(id *)(a1 + 56);
  dispatch_async(v10, v18);

  uint64_t v12 = *(id *)(a1 + 64);
  id v13 = v12;
  os_signpost_id_t v14 = *(void *)(a1 + 88);
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_END, v14, "cloudkit.full", "", buf, 2u);
  }

  id v15 = self;
  (*(void (**)(void, id, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), v11, v16, v17);
}

id sub_10000E9D0(uint64_t a1)
{
  if (!*(void *)(a1 + 32)
    && [*(id *)(a1 + 40) _generateAndSavePersonIDSaltIfNeeded:*(void *)(a1 + 48)])
  {
    uint64_t v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SYNC[FULL] - PersonIDSalt generated for primary CK account.", v4, 2u);
    }
  }
  return [*(id *)(a1 + 40) _clearCloudDirtyForToken:*(void *)(a1 + 56)];
}

void sub_10000EC74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074A04C();
    }

    [*(id *)(a1 + 32) addObject:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_syncWithReason: Fetched database changes for full sync", buf, 2u);
    }
  }
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10000EDE4;
  v9[3] = &unk_1008AE0E8;
  id v10 = *(id *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 40);
  id v13 = *(id *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  id v12 = *(id *)(a1 + 56);
  [v6 fetchRecordZoneChangesWithReason:v7 cloudSchemaCatchUpSyncContextMap:v8 completionHandler:v9];
}

void sub_10000EDE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074A0B4();
    }

    [*(id *)(a1 + 32) addObject:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_syncWithReason: Fetched record zone changes for full sync", buf, 2u);
    }
  }
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10000EF48;
  v12[3] = &unk_1008AE0C0;
  id v13 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 40);
  id v17 = v8;
  uint64_t v14 = v9;
  char v18 = *(unsigned char *)(a1 + 72);
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  id v15 = v10;
  uint64_t v16 = v11;
  [v6 processAllDirtyCloudObjectsWithSyncReason:v7 completionHandler:v12];
}

void sub_10000EF48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074A11C(v3, v5);
    }

    [*(id *)(a1 + 32) addObjectsFromArray:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "_syncWithReason: Processed everything for full sync", buf, 2u);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v6 = [(id)objc_opt_class() errorFromErrors:*(void *)(a1 + 32)];
    if (*(unsigned char *)(a1 + 72))
    {
      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      uint64_t v9 = +[NSString stringWithFormat:@"syncReason=%@", *(void *)(a1 + 56)];
      [v7 didCompleteCloudSchemaCatchUpSyncWithContextMap:v8 error:v6 syncTypeLabel:@"FULL" debugLogLabel:v9];
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000F0F8;
    block[3] = &unk_1008ADD50;
    id v10 = *(id *)(a1 + 64);
    id v13 = v6;
    id v14 = v10;
    id v11 = v6;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

uint64_t sub_10000F0F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10000F1C4(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s **)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  v33[2] = sub_10000F5B0;
  v33[3] = &unk_1008ADA80;
  v33[4] = *v2;
  sub_10000F5B0((uint64_t)v33);
  os_unfair_lock_unlock(*v2 + 8);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v3 = [(os_unfair_lock_s *)*v2 operationQueue];
  uint64_t v4 = [v3 operations];
  id v5 = [v4 copy];

  id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v30;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v29 + 1) + 8 * (void)v8);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v9 ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock];
        }
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v29 objects:v34 count:16];
    }
    while (v6);
  }

  [*(id *)(a1 + 32) setDisabledInternal:1];
  [*(id *)(a1 + 32) clearPendingActivity];
  id v10 = [*(id *)(a1 + 32) operationQueue];
  [v10 cancelAllOperations];

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  v27[2] = sub_10000F624;
  v27[3] = &unk_1008AE160;
  v27[4] = *(void *)(a1 + 32);
  id v28 = *(id *)(a1 + 40);
  id v11 = objc_retainBlock(v27);
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x3032000000;
  v25[3] = sub_10000984C;
  v25[4] = sub_10000985C;
  id v26 = &__kCFBooleanFalse;
  dispatch_time_t v12 = dispatch_time(0, 5000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000F72C;
  block[3] = &unk_1008AE188;
  __int16 v24 = v25;
  id v13 = v11;
  id v23 = v13;
  dispatch_after(v12, (dispatch_queue_t)&_dispatch_main_q, block);
  id v14 = (const char *)[@"com.apple.reminders.cloud.waiting" UTF8String];
  id v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v16 = dispatch_queue_create(v14, v15);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10000F7BC;
  v19[3] = &unk_1008AE1B0;
  uint64_t v17 = *(void *)(a1 + 32);
  id v20 = v13;
  id v21 = v25;
  v19[4] = v17;
  char v18 = v13;
  dispatch_async(v16, v19);

  _Block_object_dispose(v25, 8);
}

void sub_10000F590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F5B0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) accountInitializerDidCompleteOnAccountsDidChangeObserver];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) accountInitializerDidCompleteOnAccountsDidChangeObserver];
    [v3 unobserve];

    uint64_t v4 = *(void **)(a1 + 32);
    [v4 setAccountInitializerDidCompleteOnAccountsDidChangeObserver:0];
  }
}

void sub_10000F624(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "cancelEverything: Performing cleanup in ICCC.", buf, 2u);
  }

  [*(id *)(a1 + 32) clearPendingActivity];
  [*(id *)(a1 + 32) setDisabledInternal:0];
  if (*(void *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10000F71C;
    block[3] = &unk_1008AE138;
    id v4 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

uint64_t sub_10000F71C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000F72C(uint64_t a1)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) BOOLValue] & 1) == 0)
  {
    uint64_t v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10074A1A8();
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = &__kCFBooleanTrue;
  }
}

void sub_10000F7BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) operationQueue];
  [v2 waitUntilAllOperationsAreFinished];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000F870;
  block[3] = &unk_1008AE188;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_10000F870(uint64_t a1)
{
  if (([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) BOOLValue] & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
    id v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = &__kCFBooleanTrue;
  }
}

void sub_10000F9E0(uint64_t a1)
{
  uint64_t v2 = +[NSMutableSet set];
  [*(id *)(a1 + 32) setObjectIDsToProcess:v2];

  id v3 = +[NSMutableSet set];
  [*(id *)(a1 + 32) setObjectIDsToRetry:v3];

  long long v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) accountZoneIDsFetchingChanges];
    long long v6 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
    *(_DWORD *)buf = 138543618;
    id v11 = v5;
    __int16 v12 = 2114;
    id v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Zone IDs that need to resume fetching: fetching=%{public}@; needingFetch=%{public}@",
      buf,
      0x16u);
  }
  uint64_t v7 = [*(id *)(a1 + 32) accountZoneIDsFetchingChanges];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10000FB94;
  v9[3] = &unk_1008AE1D8;
  void v9[4] = *(void *)(a1 + 32);
  [v7 enumerateKeysAndObjectsUsingBlock:v9];

  uint64_t v8 = objc_opt_new();
  [*(id *)(a1 + 32) setAccountZoneIDsFetchingChanges:v8];
}

void sub_10000FB94(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  uint64_t v7 = [v5 accountZoneIDsNeedingFetchChanges];
  uint64_t v8 = [v7 objectForKeyedSubscript:v11];

  if (v8)
  {
    [v8 unionSet:v6];
  }
  else
  {
    id v9 = [v6 mutableCopy];

    id v10 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
    [v10 setObject:v9 forKeyedSubscript:v11];

    id v6 = v9;
  }
}

id sub_10000FC64(uint64_t a1)
{
  return +[NSObject cancelPreviousPerformRequestsWithTarget:*(void *)(a1 + 32)];
}

void sub_100010010(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = +[REMLog cloudkit];
  id v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10074A210();
    }
  }
  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543618;
    uint64_t v34 = v12;
    __int16 v35 = 2114;
    id v36 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Deleted record zones in account ID %{public}@: {deletedRecordZoneIDs: %{public}@}", buf, 0x16u);
  }

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v13 = v8;
  id v14 = [v13 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v29;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v29 != v16) {
          objc_enumerationMutation(v13);
        }
        [*(id *)(a1 + 40) deleteServerChangeTokenForRecordZoneID:*(void *)(*((void *)&v28 + 1) + 8 * (void)v17) databaseScope:[*(id *)(a1 + 48) databaseScope] accountID:*(void *)(a1 + 32)];
        uint64_t v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v15 = [v13 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v15);
  }

  [*(id *)(a1 + 40) updateCloudContextStateWithReason:@"DeleteRecordZonesWithZoneIDs"];
  char v18 = [*(id *)(a1 + 40) contextForAccountID:*(void *)(a1 + 32) withBatchFetchHelper:0];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_1000102A4;
  v23[3] = &unk_1008AE200;
  id v19 = *(void **)(a1 + 32);
  v23[4] = *(void *)(a1 + 40);
  id v24 = v18;
  id v25 = v19;
  id v20 = *(id *)(a1 + 56);
  id v26 = v9;
  id v27 = v20;
  id v21 = v9;
  id v22 = v18;
  [v22 performBlockAndWait:v23];
}

uint64_t sub_1000102A4(uint64_t a1)
{
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = [(id)objc_opt_class() allCloudObjectIDsOfClassesPassingTest:0 inContext:*(void *)(a1 + 40)];
  id v2 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (!v2) {
    goto LABEL_12;
  }
  id v3 = v2;
  uint64_t v4 = *(void *)v19;
  uint64_t v15 = *(void *)v19;
  do
  {
    for (i = 0; i != v3; i = (char *)i + 1)
    {
      if (*(void *)v19 != v4) {
        objc_enumerationMutation(obj);
      }
      id v6 = [*(id *)(a1 + 40) objectWithID:*(void *)(*((void *)&v18 + 1) + 8 * i)];
      objc_opt_class();
      id v7 = REMDynamicCast();
      id v8 = [v7 account];
      id v9 = [v8 identifier];
      id v10 = [v9 UUIDString];
      if ([v10 isEqualToString:*(void *)(a1 + 48)])
      {
      }
      else
      {
        id v11 = [v7 identifier];
        [v11 UUIDString];
        id v13 = v12 = v3;
        unsigned int v17 = [v13 isEqualToString:*(void *)(a1 + 48)];

        id v3 = v12;
        uint64_t v4 = v15;

        if (!v17) {
          goto LABEL_10;
        }
      }
      [v7 clearServerRecord];
LABEL_10:
    }
    id v3 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
  }
  while (v3);
LABEL_12:

  [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(a1 + 40) shouldTakeServerAsTruth:1 logDescription:@"deleting record zones"];
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 56));
  }
  return result;
}

void sub_100010B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100010B94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = [a3 userInfo];
  id v8 = [v4 objectForKeyedSubscript:CKErrorRetryAfterKey];

  id v5 = v8;
  if (v8)
  {
    [v8 doubleValue];
    id v5 = v8;
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    if (v6 > *(double *)(v7 + 24)) {
      *(double *)(v7 + 24) = v6;
    }
  }
}

void sub_100010F48(id *a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    id v3 = [a1[4] ic_loggingDescription];
    *(_DWORD *)buf = 138543362;
    v46 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finishing operations for record ID %{public}@", buf, 0xCu);
  }
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_1000113C4;
  v42[3] = &unk_1008AE160;
  id v43 = a1[4];
  id v44 = a1[6];
  uint64_t v4 = +[ICNSBlockOperation blockOperationWithBlock:v42];
  [v4 setName:ICNSBlockOperationNameFinishOperations];
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  id v5 = [a1[5] operationQueue];
  double v6 = [v5 operations];

  uint64_t v7 = v4;
  id obj = v6;
  id v8 = INDateRelevanceProvider_ptr;
  id v33 = [v6 countByEnumeratingWithState:&v38 objects:v50 count:16];
  if (v33)
  {
    uint64_t v9 = *(void *)v39;
    long long v30 = v7;
    uint64_t v31 = *(void *)v39;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v39 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v10);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_27;
          }
          id v22 = v11;
          id v23 = [v22 recordIDs];
          unsigned __int8 v24 = [v23 containsObject:a1[4]];

          if ((v24 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_24;
        }
        id v12 = v11;
        id v13 = [v12 recordIDsToDelete];
        unsigned __int8 v14 = [v13 containsObject:a1[4]];

        if (v14)
        {
LABEL_23:

          uint64_t v9 = v31;
LABEL_24:
          id v25 = [v8[201] cloudkit];
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            id v26 = [v11 ic_loggingDescription];
            id v27 = [a1[4] ic_loggingDescription];
            *(_DWORD *)buf = 138543618;
            v46 = v26;
            __int16 v47 = 2114;
            v48 = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Waiting on operation %{public}@ for record ID %{public}@", buf, 0x16u);
          }
          [v7 addDependency:v11];
          goto LABEL_27;
        }
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        uint64_t v15 = [v12 recordsToSave];
        id v16 = [v15 countByEnumeratingWithState:&v34 objects:v49 count:16];
        if (v16)
        {
          id v17 = v16;
          uint64_t v18 = *(void *)v35;
          while (2)
          {
            for (i = 0; i != v17; i = (char *)i + 1)
            {
              if (*(void *)v35 != v18) {
                objc_enumerationMutation(v15);
              }
              long long v20 = [*(id *)(*((void *)&v34 + 1) + 8 * i) recordID];
              unsigned int v21 = [v20 isEqual:a1[4]];

              if (v21)
              {

                id v8 = INDateRelevanceProvider_ptr;
                uint64_t v7 = v30;
                goto LABEL_23;
              }
            }
            id v17 = [v15 countByEnumeratingWithState:&v34 objects:v49 count:16];
            if (v17) {
              continue;
            }
            break;
          }

          id v8 = INDateRelevanceProvider_ptr;
          uint64_t v7 = v30;
        }
        else
        {
        }
        uint64_t v9 = v31;
LABEL_27:
        id v10 = (char *)v10 + 1;
      }
      while (v10 != v33);
      id v28 = [obj countByEnumeratingWithState:&v38 objects:v50 count:16];
      id v33 = v28;
    }
    while (v28);
  }

  long long v29 = [a1[5] operationQueue];
  [v29 addOperation:v7];

  [a1[5] errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
}

uint64_t sub_1000113C4(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    id v3 = [[*(id *)(a1 + 32) ic_loggingDescription];
    int v5 = 138543362;
    double v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "All operations finished for record ID %{public}@", (uint8_t *)&v5, 0xCu);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100011750(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating CloudKit account status", buf, 2u);
  }

  [*(id *)(a1 + 32) removeStaleAccountStatus];
  id v3 = [*(id *)(a1 + 32) containersByAccountID];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100011848;
  v5[3] = &unk_1008AE2C8;
  uint64_t v4 = *(void **)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100011848(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[REMLog cloudkit];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10074A284();
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100011944;
  v10[3] = &unk_1008AE2A0;
  id v8 = *(void **)(a1 + 40);
  v10[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v8;
  id v9 = v5;
  [v6 accountStatusWithCompletionHandler:v10];
}

void sub_100011944(id *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [a1[4] processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100011A2C;
  block[3] = &unk_1008AE020;
  id v11 = v5;
  id v7 = a1[5];
  id v8 = a1[4];
  id v12 = v7;
  id v13 = v8;
  uint64_t v15 = a2;
  id v14 = a1[6];
  id v9 = v5;
  dispatch_async(v6, block);
}

uint64_t sub_100011A2C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10074A2F0();
    }
  }
  else
  {
    id v3 = [*(id *)(a1 + 48) accountStatusNumberByAccountID];
    id v2 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v2 && [*(id *)(a1 + 48) accountStatusFromAccountStatusNumber:v2] == *(id *)(a1 + 64))
    {
      uint64_t v4 = +[REMLog cloudkit];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        id v5 = CKStringFromAccountStatus();
        uint64_t v6 = *(void *)(a1 + 40);
        int v11 = 138543618;
        id v12 = v5;
        __int16 v13 = 2114;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "No change in CloudKit status %{public}@ for account: %{public}@", (uint8_t *)&v11, 0x16u);
      }
    }
    else
    {
      id v7 = +[REMLog cloudkit];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = CKStringFromAccountStatus();
        uint64_t v9 = *(void *)(a1 + 40);
        int v11 = 138543618;
        id v12 = v8;
        __int16 v13 = 2114;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CloudKit account status changed to %{public}@ for account: %{public}@", (uint8_t *)&v11, 0x16u);
      }
      [*(id *)(a1 + 48) setAccountStatus:*(void *)(a1 + 64) forAccountID:*(void *)(a1 + 40)];
      [*(id *)(a1 + 48) setNeedsToUpdateSubscriptions:1];
      [*(id *)(a1 + 48) clearSubscribedSubscriptionIDs];
      [*(id *)(a1 + 48) clearZoneFetchState];
    }
  }

  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, *(void *)(a1 + 64), *(void *)(a1 + 40), *(void *)(a1 + 32));
  }
  return result;
}

void sub_100011CD4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountStatusNumberByAccountID];
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) containersByAccountID];
    id v5 = [v4 allKeys];
    uint64_t v6 = +[NSSet setWithArray:v5];

    id v7 = [*(id *)(a1 + 32) accountStatusNumberByAccountID];
    id v8 = [v7 allKeys];
    uint64_t v9 = +[NSMutableSet setWithArray:v8];

    [v9 minusSet:v6];
    if ([v9 count])
    {
      id v10 = +[REMLog cloudkit];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Remove stale account status for accountIDs: %{public}@", buf, 0xCu);
      }

      int v11 = [*(id *)(a1 + 32) accountStatusNumberByAccountID];
      id v12 = [v11 mutableCopy];

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100011EF0;
      v15[3] = &unk_1008AE2F0;
      id v16 = v12;
      id v13 = v12;
      [v9 enumerateObjectsUsingBlock:v15];
      id v14 = [v13 copy];
      [*(id *)(a1 + 32) setAccountStatusNumberByAccountID:v14];
    }
  }
}

id sub_100011EF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeObjectForKey:a2];
}

void sub_100011F84(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) containersByAccountID];
    id v5 = [v4 allKeys];
    uint64_t v6 = +[NSSet setWithArray:v5];

    id v7 = [*(id *)(a1 + 32) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
    id v8 = [v7 allKeys];
    uint64_t v9 = +[NSMutableSet setWithArray:v8];

    [v9 minusSet:v6];
    if ([v9 count])
    {
      id v10 = +[REMLog cloudkit];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543362;
        id v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Remove stale database scope string needing retry fetch changes for accountIDs: %{public}@", buf, 0xCu);
      }

      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100012158;
      v11[3] = &unk_1008AE2F0;
      v11[4] = *(void *)(a1 + 32);
      [v9 enumerateObjectsUsingBlock:v11];
    }
  }
}

void sub_100012158(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
  id v5 = [v4 objectForKeyedSubscript:v3];

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v14;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v6);
        }
        int v11 = [*(id *)(a1 + 32) retryCountFetchDatabaseChangesOperationTypeForAccountID:v3 dataScopeString:*(void *)(*((void *)&v13 + 1) + 8 * (void)v10) (void)v13];
        [*(id *)(a1 + 32) clearRetryCountForOperationType:v11];

        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v8);
  }

  id v12 = [*(id *)(a1 + 32) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
  [v12 removeObjectForKey:v3];
}

void sub_1000123EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100012404(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    id v7 = &stru_1008D0E58;
  }
  else {
    id v7 = @",";
  }
  id v8 = v7;
  id v9 = a2;
  [a3 intValue];
  id v10 = CKStringFromAccountStatus();
  [v6 appendFormat:@"%@ (%@, %@)", v8, v9, v10];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
}

void sub_1000127F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,char a23)
{
  objc_destroyWeak(v23);
  _Block_object_dispose(&a23, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100012840(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v7)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      int v11 = 138477827;
      uint64_t v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fetched user record in cloud context {userRecord: %{private}@}", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_10074A374();
    }
  }
}

void sub_10001296C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    int v9 = 138543362;
    id v10 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetch user record operation completed: %{public}@", (uint8_t *)&v9, 0xCu);
  }
  if (v4)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074A3DC();
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, void, id))(v8 + 16))(v8, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v4);
  }
}

void sub_100012E5C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void (**)(uint64_t, id))(v3 + 16);
  id v5 = a2;
  v4(v3, v5);
  id v6 = objc_alloc((Class)CKModifyRecordsOperation);
  id v14 = v5;
  id v7 = +[NSArray arrayWithObjects:&v14 count:1];
  id v8 = [v6 initWithRecordsToSave:v7 recordIDsToDelete:0];

  [*(id *)(a1 + 32) configureOperation:v8];
  int v9 = [*(id *)(a1 + 32) containerForAccountID:*(void *)(a1 + 40)];
  id v10 = [v9 privateCloudDatabase];
  [v8 setDatabase:v10];

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100012FEC;
  v12[3] = &unk_1008AE390;
  id v13 = *(id *)(a1 + 56);
  [v8 setModifyRecordsCompletionBlock:v12];
  int v11 = [v8 database];
  [v11 addOperation:v8];
}

uint64_t sub_100012FEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100013164(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v5 recordName];
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (!v5 || v6)
  {
    id v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10074A4AC();
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_1000137AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addFetchOperationsForRecordIDs:*(void *)(a1 + 40) accountID:*(void *)(a1 + 48) operationGroupName:*(void *)(a1 + 56) runExclusively:*(unsigned __int8 *)(a1 + 72) completionHandler:*(void *)(a1 + 64)];
}

void sub_100013AB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100013B68;
  block[3] = &unk_1008AE430;
  uint64_t v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

void sub_100013B68(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() errorFromOperations:*(void *)(a1 + 40)];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100013C24;
  v5[3] = &unk_1008ADD50;
  id v3 = *(id *)(a1 + 48);
  id v6 = v2;
  id v7 = v3;
  id v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);
}

uint64_t sub_100013C24(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100013FDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100014014(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  [*(id *)(a1 + 32) databaseWithDatabaseScope:[a2 integerValue]];
  id v8 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [*(id *)(a1 + 40) operationsToFetchRecordIDs:v5 database:v8];
  [*(id *)(a1 + 48) addObjectsFromArray:v6];
  id v7 = [v5 count];

  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) += 10240 * (void)v7;
}

void sub_1000146CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id location)
{
}

void sub_100014738(uint64_t a1, void *a2, double a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = (id *)(a1 + 40);
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  [v4 fetchOperation:WeakRetained progressChangedWithRecordID:v6 progress:a3];
}

void sub_1000147B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v10 setFetchedRecordCount:[v10 fetchedRecordCount] + 1];

  if (v8)
  {
    int v11 = *(void **)(a1 + 32);
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [v11 fetchOperation:WeakRetained recordWasFetchedWithRecordID:v8 record:v7 error:v9];
  }
  else
  {
    id WeakRetained = +[REMLog cloudkit];
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_FAULT)) {
      sub_10074A68C();
    }
  }
}

void sub_100014898(uint64_t a1, void *a2, void *a3)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = (id *)(a1 + 40);
  id v6 = a3;
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(v5);
  [v4 fetchOperation:WeakRetained didCompleteWithRecordsByRecordID:v7 error:v6];
}

void sub_100014B80(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) database];
  id v4 = [v2 accountIDForDatabase:v3];

  if (![v4 length])
  {
    id v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10074A6C0();
    }
  }
  id v6 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100014CE4;
  v10[3] = &unk_1008AE4F8;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v7;
  uint64_t v12 = v8;
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v15 = v4;
  id v16 = *(id *)(a1 + 40);
  id v9 = v4;
  [v6 performAndWaitContextWithBatchFetchHelperForAccountID:v9 block:v10];
}

void sub_100014CE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = [*(id *)(a1 + 56) recordType];
    id v7 = [v4 existingCloudObjectForRecordID:v5 recordType:v6 accountID:*(void *)(a1 + 64) context:v3];

    if ([*(id *)(a1 + 32) code] == (id)26 || objc_msgSend(*(id *)(a1 + 32), "code") == (id)11)
    {
      uint64_t v8 = +[REMLog cloudkit];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 64);
        unsigned int v21 = [*(id *)(a1 + 48) ic_loggingDescription];
        id v22 = [*(id *)(a1 + 72) ic_loggingDescription];
        *(_DWORD *)buf = 138543874;
        uint64_t v28 = v20;
        __int16 v29 = 2114;
        long long v30 = v21;
        __int16 v31 = 2114;
        long long v32 = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Tried to fetch record that doesn't exist in account ID %{public}@: %{public}@ %{public}@", buf, 0x20u);
      }
      [v7 objectWasFetchedButDoesNotExistInCloud];
      if ([*(id *)(a1 + 32) code] != (id)26) {
        goto LABEL_19;
      }
      id v9 = *(void **)(a1 + 40);
      id v10 = [*(id *)(a1 + 48) zoneID];
      [v9 receivedZoneNotFound:v10 operation:*(void *)(a1 + 72)];
    }
    else
    {
      id v10 = +[REMLog cloudkit];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = *(void *)(a1 + 64);
        unsigned __int8 v24 = [*(id *)(a1 + 48) ic_loggingDescription];
        id v25 = [[*(id *)(a1 + 72) ic_loggingDescription];
        uint64_t v26 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138544130;
        uint64_t v28 = v23;
        __int16 v29 = 2114;
        long long v30 = v24;
        __int16 v31 = 2114;
        long long v32 = v25;
        __int16 v33 = 2114;
        uint64_t v34 = v26;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to fetch in account ID %{public}@: %{public}@ %{public}@: %{public}@", buf, 0x2Au);
      }
    }

LABEL_19:
    if (!v7)
    {
LABEL_23:

      goto LABEL_24;
    }
    id v16 = [*(id *)(a1 + 40) objectIDsToRetry];
    id v17 = [v7 objectID];
    [v16 addObject:v17];
    goto LABEL_21;
  }
  id v11 = +[REMLog cloudkit];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
    sub_10074A74C();
  }

  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  id v13 = *(void **)(a1 + 40);
  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = [*(id *)(a1 + 56) recordType];
    id v7 = [v13 existingCloudObjectForRecordID:v14 recordType:v15 accountID:*(void *)(a1 + 64) context:v3];

    if (!v7)
    {
      id v16 = [*(id *)(a1 + 40) newCloudObjectForRecord:*(void *)(a1 + 56) accountID:*(void *)(a1 + 64) context:v3];
      goto LABEL_22;
    }
    if (*(void *)(a1 + 64)) {
      [v7 objectWasFetchedFromCloudWithRecord:*(void *)(a1 + 56)];
    }
    id v16 = [*(id *)(a1 + 40) objectIDsToRetry];
    id v17 = [v7 objectID];
    [v16 removeObject:v17];
LABEL_21:

LABEL_22:
    goto LABEL_23;
  }
  [*(id *)(a1 + 40) didFetchShare:*(void *)(a1 + 56) accountID:*(void *)(a1 + 64) context:v3];
LABEL_24:
  uint64_t v18 = [*(id *)(a1 + 72) operationID];
  long long v19 = +[NSString stringWithFormat:@"fetch records operation %@", v18];

  [(id)objc_opt_class() saveAndFaultIfFailWithContext:v3 shouldTakeServerAsTruth:1 logDescription:v19];
}

void sub_1000151A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[REMLog cloudkit];
  id v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074A80C();
    }

    [*(id *)(a1 + 48) startRetryTimerIfNecessaryWithError:*(void *)(a1 + 32)];
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 40) ic_loggingDescription];
      int v6 = 138543362;
      id v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Finished {operatin: %{public}@}", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1000159B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000159D8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100015ABC;
  v11[3] = &unk_1008AE548;
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v15 = v6;
  id v7 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 64);
  id v13 = v8;
  uint64_t v16 = v9;
  id v14 = *(id *)(a1 + 48);
  id v10 = v5;
  [v7 deleteSharesForObjects:a3 accountID:v10 completionHandler:v11];
}

void sub_100015ABC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10074AA7C();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
  }
  id v6 = *(id *)(a1 + 40);
  objc_sync_enter(v6);
  ++*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  objc_sync_exit(v6);

  unint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
  if (v7 >= (unint64_t)[*(id *)(a1 + 40) count])
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (v8) {
      (*(void (**)(uint64_t, void))(v8 + 16))(v8, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
    }
  }
}

void sub_100015EC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v3 shortLoggingDescription];
    int v7 = 138543618;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Will delete share in account ID %{public}@ for %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_100016358(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[SyncAfterDeleteShare] START}", buf, 2u);
  }

  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = [*(id *)(a1 + 40) allObjects];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000164A4;
  v9[3] = &unk_1008AE600;
  void v9[4] = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v11 = v3;
  id v12 = *(id *)(a1 + 64);
  id v8 = v3;
  [v5 fetchRecordZoneChangesForZoneIDs:v6 accountID:v7 reason:@"SyncAfterDeleteShare" completionHandler:v9];
}

void sub_1000164A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SYNC[SyncAfterDeleteShare] END", buf, 2u);
  }

  id v5 = [*(id *)(a1 + 32) newBackgroundContext];
  *(void *)buf = 0;
  id v17 = buf;
  uint64_t v18 = 0x2020000000;
  char v19 = 0;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10001667C;
  v12[3] = &unk_1008ADFD0;
  id v13 = *(id *)(a1 + 40);
  id v6 = v5;
  id v14 = v6;
  uint64_t v15 = buf;
  [v6 performBlockAndWait:v12];
  if (v17[24]
    && (+[NSError errorWithDomain:@"com.apple.reminders" code:213 userInfo:0], (uint64_t v7 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v8 = v7;
    __int16 v9 = v8;
  }
  else
  {
    if (v3) {
      id v10 = v3;
    }
    else {
      id v10 = *(id *)(a1 + 48);
    }
    __int16 v9 = v10;
    id v8 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v9);
  }

  _Block_object_dispose(buf, 8);
}

void sub_10001665C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001667C(void *a1)
{
  id v2 = +[REMCDObject ic_objectsFromObjectIDs:a1[4] context:a1[5]];
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = [v2 ic_containsObjectPassingTest:&stru_1008AE5D8];
}

BOOL sub_1000166E8(id a1, REMCDObject *a2, unint64_t a3, BOOL *a4)
{
  id v4 = [(REMCDObject *)a2 ckServerShare];
  BOOL v5 = v4 != 0;

  return v5;
}

void sub_100016720(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000167D8;
  block[3] = &unk_1008AE430;
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

void sub_1000167D8(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() errorFromOperations:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10001743C(_Unwind_Exception *a1)
{
}

void sub_100017478(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  [v5 addObject:a2];
  [*(id *)(a1 + 40) addObject:v6];
}

void sub_1000174E4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  objc_opt_class();
  uint64_t v20 = v4;
  id v5 = REMDynamicCast();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v6 = [v5 recordsToSave];
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v23;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v12 = *(void **)(a1 + 32);
        id v13 = [v11 recordID:v20];
        id v14 = [v12 objectForKeyedSubscript:v13];

        [v14 objectWillBePushedToCloudWithOperation:v5];
        unint64_t v15 = (unint64_t)[v11 size];
        if (v15 > 0x100000)
        {
          uint64_t v16 = +[REMLog cloudkit];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            id v17 = [v11 ic_loggingDescription];
            *(_DWORD *)buf = 134218242;
            unint64_t v27 = v15;
            __int16 v28 = 2114;
            __int16 v29 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Record size (%lu bytes) exceeds CloudKit limit for record: %{public}@", buf, 0x16u);
          }
          [(id)objc_opt_class() faultAndPromptToFileRadarWithICTap2RadarType:1 logMessage:@"Oversized CloudKit Record"];
        }
        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) += v15;
      }
      id v8 = [v6 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v8);
  }

  if (*(unsigned char *)(a1 + 72)) {
    [*(id *)(a1 + 40) addDependenciesForModifyRecordsOperation:v5];
  }
  if (*(void *)(a1 + 48)) {
    [v5 addDependency:];
  }
  if (a3)
  {
    uint64_t v18 = 0;
    do
    {
      char v19 = [*(id *)(a1 + 56) objectAtIndexedSubscript:v18];
      [v5 addDependency:v19];

      ++v18;
    }
    while (a3 != v18);
  }
}

id sub_100018034(id a1, CKRecord *a2)
{
  return [(CKRecord *)a2 ic_loggingDescription];
}

id sub_10001803C(id a1, CKRecord *a2)
{
  return [(CKRecord *)a2 ic_loggingDescription];
}

id sub_100018044(id a1, CKRecord *a2)
{
  return [(CKRecord *)a2 ic_loggingDescription];
}

void sub_100018258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = [*(id *)(a1 + 32) operationToModifyRecordsToSave:a3 delete:a4 rootRecordIDsByShareID:*(void *)(a1 + 40) database:*(void *)(a1 + 48)];
  [*(id *)(a1 + 56) addObject:v5];
}

void sub_1000188E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 88));
  _Unwind_Resume(a1);
}

void sub_100018920(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = (id *)(a1 + 40);
  id v8 = a4;
  id v9 = a3;
  id v10 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  [v6 modifyRecordsOperation:WeakRetained recordWasSavedWithRecordID:v10 record:v9 context:0 onProcessingQueue:0 error:v8];
}

void sub_1000189C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = (id *)(a1 + 48);
  id v7 = a3;
  id v8 = a2;
  id WeakRetained = objc_loadWeakRetained(v6);
  [v5 modifyRecordsOperation:WeakRetained recordWasDeletedWithRecordID:v8 rootRecordIDsByShareID:*(void *)(a1 + 40) onProcessingQueue:0 error:v7];
}

void sub_100018A60(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id v6 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v6 setModifiedRecordCount:[v6 modifiedRecordCount] + 1];

  if (((int)(a3 * 100.0) - 1) <= 0x61)
  {
    id v7 = *(void **)(a1 + 40);
    id v8 = [v5 recordID];
    id v9 = [v7 objectForKeyedSubscript:v8];

    if (!v9 || ([v9 timeIntervalSinceNow], v10 < -0.7))
    {
      uint64_t v11 = +[REMLog cloudkit];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
        sub_10074AD50(v5, (int)(a3 * 100.0), v11);
      }

      id v12 = +[NSDate date];
      id v13 = *(void **)(a1 + 40);
      id v14 = [v5 recordID];
      [v13 setObject:v12 forKeyedSubscript:v14];
    }
  }
}

void sub_100018BAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (id *)(a1 + 40);
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained(v5);
  [v4 modifyRecordsOperation:WeakRetained didCompleteWithError:v6];
}

void sub_100018FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_100018FDC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100019254;
    v20[3] = &unk_1008AE7E8;
    id v3 = *(void **)(a1 + 48);
    v20[4] = *(void *)(a1 + 40);
    uint64_t v4 = &v21;
    id v21 = v3;
    id v5 = &v22;
    id v6 = *(id *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 80);
    id v22 = v6;
    uint64_t v25 = v7;
    id v8 = &v23;
    id v23 = *(id *)(a1 + 64);
    id v24 = *(id *)(a1 + 32);
    [v2 performBlockAndWait:v20];
  }
  else
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 56);
      uint64_t v11 = [[*(id *)(a1 + 72) ic_loggingDescription];
      id v12 = [*(id *)(a1 + 64) ic_loggingDescription];
      *(_DWORD *)buf = 138543874;
      uint64_t v27 = v10;
      __int16 v28 = 2112;
      __int16 v29 = v11;
      __int16 v30 = 2114;
      __int16 v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Pushed account ID %{public}@: %@ %{public}@", buf, 0x20u);
    }
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100019344;
    v16[3] = &unk_1008AE810;
    v16[4] = *(void *)(a1 + 40);
    uint64_t v4 = &v17;
    id v17 = *(id *)(a1 + 72);
    id v5 = &v18;
    id v14 = *(id *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 80);
    id v18 = v14;
    v19[1] = v15;
    id v8 = (id *)v19;
    v19[0] = *(id *)(a1 + 64);
    [v13 performBlockAndWait:v16];
  }
}

void sub_100019254(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) existingCloudObjectForRecordID:*(void *)(a1 + 40) recordType:0 accountID:*(void *)(a1 + 48) context:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  [v7 objectFailedToBePushedToCloudWithOperation:*(void *)(a1 + 56) recordID:*(void *)(a1 + 40) error:*(void *)(a1 + 64)];
  id v2 = [v7 objectID];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) objectIDsToRetry];
    uint64_t v4 = [v7 objectID];
    [v3 addObject:v4];
  }
  unint64_t v5 = (unint64_t)[*(id *)(a1 + 64) code];
  if (v5 <= 0x1F && ((1 << v5) & 0x80081000) != 0) {
    [v7 incrementFailureCounts];
  }
}

uint64_t sub_100019344(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) existingCloudObjectForRecord:*(void *)(a1 + 40) accountID:*(void *)(a1 + 48) context:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  id v3 = v2;
  if (v2)
  {
    id v7 = v2;
    [v2 objectWasPushedToCloudWithOperation:*(void *)(a1 + 56) serverRecord:*(void *)(a1 + 40)];
    uint64_t v4 = [*(id *)(a1 + 32) objectIDsToRetry];
    unint64_t v5 = [v7 objectID];
    [v4 removeObject:v5];

    id v2 = [v7 shouldBeIgnoredForSync];
    id v3 = v7;
    if (v2)
    {
      id v2 = [v7 decrementFailureCounts];
      id v3 = v7;
    }
  }

  return _objc_release_x1(v2, v3);
}

void sub_100019404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) recordName];
  id v4 = +[NSString stringWithFormat:@"pushing record for account ID %@: %@", v2, v3];

  [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) shouldTakeServerAsTruth:*(void *)(a1 + 48) != 0 logDescription:v4];
}

void sub_100019824(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100019924;
  v4[3] = &unk_1008AE888;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  v4[4] = *(void *)(a1 + 40);
  id v5 = v3;
  id v6 = *(id *)(a1 + 56);
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 72);
  char v11 = *(unsigned char *)(a1 + 88);
  id v10 = *(id *)(a1 + 80);
  [v2 performBlockAndWait:v4];
}

void sub_100019924(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) existingCloudObjectForRecordID:*(void *)(a1 + 40) recordType:0 accountID:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
  if (!v3)
  {
    id v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = [[*(id *)(a1 + 40) ic_loggingDescription];
      id v7 = [[*(id *)(a1 + 64) ic_loggingDescription];
      int v51 = 138543874;
      uint64_t v52 = v5;
      __int16 v53 = 2114;
      v54 = v6;
      __int16 v55 = 2114;
      v56 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Record was deleted but the cloud object no longer exists in our database for modifyRecordsOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}", (uint8_t *)&v51, 0x20u);
    }
  }
  id v8 = *(void **)(a1 + 72);
  int v9 = *(unsigned __int8 *)(a1 + 88);
  if (v8)
  {
    id v10 = [v8 code];
    if (v9)
    {
      if (v10 == (id)26)
      {
        uint64_t v27 = +[REMLog cloudkit];
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = *(void *)(a1 + 48);
          long long v39 = [[*(id *)(a1 + 80) ic_loggingDescription];
          long long v40 = [v3 shortLoggingDescription];
          long long v41 = [[*(id *)(a1 + 64) ic_loggingDescription];
          int v51 = 138544130;
          uint64_t v52 = v38;
          __int16 v53 = 2114;
          v54 = v39;
          __int16 v55 = 2112;
          v56 = v40;
          __int16 v57 = 2114;
          v58 = v41;
          _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Zone not found deleting share in account ID %{public}@: %{public}@ for %@ %{public}@", (uint8_t *)&v51, 0x2Au);
        }
        [v3 setCkServerShare:0];
        __int16 v28 = *(void **)(a1 + 32);
        __int16 v29 = [*(id *)(a1 + 80) zoneID];
        [v28 receivedZoneNotFound:v29 operation:*(void *)(a1 + 64)];
      }
      else if (v10 == (id)11)
      {
        char v11 = +[REMLog cloudkit];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)(a1 + 48);
          long long v35 = [[*(id *)(a1 + 80) ic_loggingDescription];
          long long v36 = [v3 shortLoggingDescription];
          long long v37 = [[*(id *)(a1 + 64) ic_loggingDescription];
          int v51 = 138544130;
          uint64_t v52 = v34;
          __int16 v53 = 2114;
          v54 = v35;
          __int16 v55 = 2112;
          v56 = v36;
          __int16 v57 = 2114;
          v58 = v37;
          _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unknown item deleting share in account ID %{public}@: %{public}@ for %@ %{public}@", (uint8_t *)&v51, 0x2Au);
        }
        [v3 setCkServerShare:0];
      }
      else
      {
        __int16 v30 = +[REMLog cloudkit];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v42 = *(void *)(a1 + 48);
          id v43 = [*(id *)(a1 + 80) ic_loggingDescription];
          id v44 = [v3 shortLoggingDescription];
          v45 = [*(id *)(a1 + 64) ic_loggingDescription];
          uint64_t v46 = *(void *)(a1 + 72);
          int v51 = 138544386;
          uint64_t v52 = v42;
          __int16 v53 = 2114;
          v54 = v43;
          __int16 v55 = 2112;
          v56 = v44;
          __int16 v57 = 2114;
          v58 = v45;
          __int16 v59 = 2114;
          uint64_t v60 = v46;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Error deleting share in account ID %{public}@: %{public}@ for %@ %{public}@: %{public}@", (uint8_t *)&v51, 0x34u);
        }
      }
      goto LABEL_55;
    }
    if (v10 == (id)31)
    {
      __int16 v31 = +[REMLog cloudkit];
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
        sub_10074AFB8();
      }

      [v3 fixBrokenReferences];
      [v3 incrementFailureCounts];
      if (v3) {
        goto LABEL_53;
      }
    }
    else if (v10 == (id)22)
    {
      long long v32 = +[REMLog cloudkit];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)) {
        sub_10074B058();
      }

      if (v3) {
        goto LABEL_53;
      }
    }
    else
    {
      if (v10 == (id)11)
      {
        id v17 = +[REMLog cloudkit];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_10074AF18();
        }

        [v3 objectWasDeletedFromCloud];
        if (!v3) {
          goto LABEL_55;
        }
        goto LABEL_53;
      }
      __int16 v33 = +[REMLog cloudkit];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v47 = *(void *)(a1 + 48);
        v48 = [*(id *)(a1 + 80) ic_loggingDescription];
        v49 = [*(id *)(a1 + 64) ic_loggingDescription];
        v50 = *(void **)(a1 + 72);
        int v51 = 138544130;
        uint64_t v52 = v47;
        __int16 v53 = 2114;
        v54 = v48;
        __int16 v55 = 2114;
        v56 = v49;
        __int16 v57 = 2114;
        v58 = v50;
        _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error deleting record in account ID %{public}@: %{public}@ %{public}@: %{public}@", (uint8_t *)&v51, 0x2Au);
      }
      if (v3)
      {
LABEL_53:
        uint64_t v25 = [*(id *)(a1 + 32) objectIDsToRetry];
        uint64_t v26 = [v3 objectID];
        [v25 addObject:v26];
        goto LABEL_54;
      }
    }
  }
  else
  {
    id v12 = +[REMLog cloudkit];
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v13)
      {
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v15 = [[*(id *)(a1 + 80) ic_loggingDescription];
        uint64_t v16 = [*(id *)(a1 + 64) ic_loggingDescription];
        int v51 = 138543874;
        uint64_t v52 = v14;
        __int16 v53 = 2114;
        v54 = v15;
        __int16 v55 = 2114;
        v56 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleted share in account ID %{public}@: %{public}@ %{public}@", (uint8_t *)&v51, 0x20u);
      }
      [v3 setCkServerShare:0];
      if (([v3 isOwnedByCurrentUser] & 1) == 0
        && [v3 markedForDeletion])
      {
        [v3 deleteFromLocalDatabase];
      }
    }
    else
    {
      if (v13)
      {
        uint64_t v18 = *(void *)(a1 + 48);
        char v19 = [*(id *)(a1 + 80) ic_loggingDescription];
        uint64_t v20 = [[*(id *)(a1 + 64) ic_loggingDescription];
        int v51 = 138543874;
        uint64_t v52 = v18;
        __int16 v53 = 2114;
        v54 = v19;
        __int16 v55 = 2114;
        v56 = v20;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Deleted record in account ID %{public}@: %{public}@ %{public}@", (uint8_t *)&v51, 0x20u);
      }
      [v3 objectWasDeletedFromCloud];
      if ([v3 markedForDeletion]
        && ([v3 supportsDeletionByTTL] & 1) == 0)
      {
        id v21 = +[REMLog cloudkit];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = *v2;
          id v23 = [v3 shortLoggingDescription];
          int v51 = 138543618;
          uint64_t v52 = v22;
          __int16 v53 = 2114;
          v54 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Actually deleting object in account ID %{public}@: %{public}@ with supportsDeletionByTTL = false from local DB upon completion of CKModifyRecordsOperation.", (uint8_t *)&v51, 0x16u);
        }
        [v3 deleteFromLocalDatabase];
      }
      if ([v3 shouldBeIgnoredForSync]) {
        [v3 decrementFailureCounts];
      }
      id v24 = [v3 objectID];

      if (v24)
      {
        uint64_t v25 = [*(id *)(a1 + 32) objectIDsToRetry];
        uint64_t v26 = [v3 objectID];
        [v25 removeObject:v26];
LABEL_54:
      }
    }
  }
LABEL_55:
}

void sub_10001A0F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) recordName];
  id v4 = +[NSString stringWithFormat:@"pushing record for account ID %@: %@", v2, v3];

  [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(a1 + 64) shouldTakeServerAsTruth:*(void *)(a1 + 48) != 0 logDescription:v4];
}

void sub_10001A26C(id *a1)
{
  id v2 = a1[4];
  id v3 = a1 + 5;
  id v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  [v2 incrementOrClearRetryCountForOperationType:v5 error:a1[6]];

  if (!a1[6]) {
    goto LABEL_29;
  }
  id v6 = +[REMLog cloudkit];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
    sub_10074B29C((uint64_t)v3, v6);
  }

  id v7 = [a1[4] operationQueue];
  id v8 = [v7 iterativelyCancelDependentOperations:a1[5]];

  int v9 = (char *)[a1[6] code];
  if ((unint64_t)(v9 - 3) < 2) {
    goto LABEL_7;
  }
  if (v9 == (char *)2)
  {
    char v11 = +[REMLog cloudkit];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10074B210();
    }

    [a1[4] handleGenericPartialFailuresForError:a1[6] operation:a1[5]];
    goto LABEL_15;
  }
  if (v9 == (char *)20)
  {
LABEL_7:
    id v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
  }
  else
  {
    id v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
LABEL_13:
    }
      sub_10074B184();
  }

LABEL_15:
  if ([a1[6] code] != (id)2)
  {
    id v12 = a1[4];
    BOOL v13 = [a1[5] database];
    uint64_t v14 = [v12 accountIDForDatabase:v13];

    if (![v14 length])
    {
      uint64_t v15 = +[REMLog cloudkit];
      if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
        sub_10074B0F8();
      }
    }
    __int16 v29 = v14;
    uint64_t v16 = [a1[4] contextForAccountID:v14 withBatchFetchHelper:1];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id v17 = [a1[5] recordsToSave];
    id v18 = [v17 countByEnumeratingWithState:&v32 objects:v38 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v33;
      do
      {
        for (i = 0; i != v19; i = (char *)i + 1)
        {
          if (*(void *)v33 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = a1[4];
          id v23 = a1[5];
          id v24 = [*(id *)(*((void *)&v32 + 1) + 8 * i) recordID];
          [v22 modifyRecordsOperation:v23 recordWasSavedWithRecordID:v24 record:0 context:v16 onProcessingQueue:1 error:a1[6]];
        }
        id v19 = [v17 countByEnumeratingWithState:&v32 objects:v38 count:16];
      }
      while (v19);
    }

    uint64_t v25 = [v16 batchFetchHelper];
    [v25 flushOnCurrentQueue:1];
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_10001A698;
    v30[3] = &unk_1008ADC88;
    v30[4] = a1[4];
    id v31 = v16;
    id v26 = v16;
    [v26 performBlockAndWait:v30];
  }
  [a1[4] startRetryTimerIfNecessaryWithError:a1[6]];
LABEL_29:
  uint64_t v27 = +[REMLog cloudkit];
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v28 = [*v3 ic_loggingDescription];
    *(_DWORD *)buf = 138543362;
    long long v37 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Finished modify operation %{public}@", buf, 0xCu);
  }
}

id sub_10001A698(uint64_t a1)
{
  id v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 saveAndFaultIfFailWithContext:v3 shouldTakeServerAsTruth:1 logDescription:@"finished modify (save) operation with error(s)"];
}

void sub_10001AB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_10001ABA0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = v5;
LABEL_5:
    id v8 = v7;
    goto LABEL_7;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v7 = [v5 zoneID];
    goto LABEL_5;
  }
  id v8 = 0;
LABEL_7:
  id v9 = [v6 code];
  if (v9 == (id)28)
  {
    if (v8)
    {
      id v10 = (void *)a1[5];
LABEL_15:
      [v10 addObject:v8];
      goto LABEL_21;
    }
    char v11 = +[REMLog cloudkit];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v9 == (id)26)
  {
    if (v8)
    {
      id v10 = (void *)a1[4];
      goto LABEL_15;
    }
    char v11 = +[REMLog cloudkit];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
LABEL_19:
    }
      sub_10074B420();
LABEL_20:

    goto LABEL_21;
  }
  if (v9 == (id)25) {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
  }
LABEL_21:
}

void sub_10001B4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B4F4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) accountCKIdentifier];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_10001B540()
{
  v0 = +[REMLog cloudkit];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
    sub_10074B4F0();
  }
}

uint64_t sub_10001B940(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001BC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001BC58(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id result = [a3 count];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10001C14C(uint64_t a1)
{
  dispatch_group_t v2 = dispatch_group_create();
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v15 = a1;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v23;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        id v8 = [v7 completionBlock];
        id v9 = v8;
        if (v8)
        {
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          void v19[2] = sub_10001C47C;
          v19[3] = &unk_1008ADD50;
          id v21 = v8;
          uint64_t v20 = v2;
          [v7 setCompletionBlock:v19];

          id v10 = &v21;
        }
        else
        {
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_10001C4C0;
          v17[3] = &unk_1008ADA80;
          id v18 = v2;
          [v7 setCompletionBlock:v17];
          id v10 = (id *)&v18;
        }

        dispatch_group_enter(v2);
        char v11 = +[REMLog cloudkit];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = [v7 ic_loggingDescription];
          *(_DWORD *)buf = 138543362;
          uint64_t v27 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Run exclusively operation start: {%{public}@}", buf, 0xCu);
        }
        [v7 start];
      }
      id v4 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v4);
  }

  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  BOOL v13 = +[REMLog cloudkit];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = [*(id *)(v15 + 32) ic_map:&stru_1008AE940];
    *(_DWORD *)buf = 138543362;
    uint64_t v27 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Run exclusively operations end: {%{public}@}", buf, 0xCu);
  }
}

void sub_10001C47C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  dispatch_group_t v2 = *(NSObject **)(a1 + 32);

  dispatch_group_leave(v2);
}

void sub_10001C4C0(uint64_t a1)
{
}

id sub_10001C4C8(id a1, NSOperation *a2)
{
  return [(NSOperation *)a2 ic_loggingDescription];
}

void sub_10001CB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001CB70(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  BOOL v3 = *(void *)(a1 + 40) != qword_1009228E0 || Current - *(double *)&qword_1009061C8 > *(double *)(a1 + 48);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1009228E0 = *(void *)(a1 + 40);
    qword_1009061C8 = *(void *)&Current;
  }
}

void sub_10001D5F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id location)
{
  objc_destroyWeak(v34);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001D63C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v9 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001D750;
  block[3] = &unk_1008AE520;
  id v16 = v7;
  id v17 = WeakRetained;
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(void **)(a1 + 40);
  id v18 = v6;
  uint64_t v19 = v10;
  id v20 = v11;
  id v12 = v6;
  id v13 = WeakRetained;
  id v14 = v7;
  dispatch_async(v9, block);
}

void sub_10001D750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = INDateRelevanceProvider_ptr;
  id v4 = +[REMLog cloudkit];
  uint64_t v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074B7C8();
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 40) ic_loggingDescription];
    *(_DWORD *)buf = 138543362;
    uint64_t v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Saved record zones %{public}@", buf, 0xCu);
  }
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = *(id *)(a1 + 48);
  id v7 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v23;
    *(void *)&long long v8 = 138543618;
    long long v20 = v8;
    do
    {
      char v11 = 0;
      do
      {
        if (*(void *)v23 != v10) {
          objc_enumerationMutation(obj);
        }
        id v12 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v11);
        id v13 = [v3[201] cloudkit:v20];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          [v12 zoneID];
          uint64_t v15 = v14 = v3;
          id v16 = [v15 ic_loggingDescription];
          id v17 = [*(id *)(a1 + 40) ic_loggingDescription];
          *(_DWORD *)buf = v20;
          uint64_t v27 = v16;
          __int16 v28 = 2114;
          __int16 v29 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Saved record zone %{public}@ %{public}@", buf, 0x16u);

          BOOL v3 = v14;
        }

        id v18 = [*(id *)(a1 + 56) accountZoneIDsNeedingToBeSaved];
        uint64_t v19 = [v12 zoneID];
        [v18 ic_removeZoneID:v19 forAccountID:*(void *)(a1 + 64)];

        char v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [obj countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v9);
  }
}

void sub_10001DE0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_10001DE38(uint64_t a1)
{
  uint64_t v2 = cloudKitAccountTypes();
  BOOL v3 = +[NSSet setWithArray:v2];

  id v4 = [*(id *)(a1 + 32) storeController];
  uint64_t v5 = [v4 storesForAccountTypes:v3];
  id v6 = [v5 valueForKey:@"identifier"];

  id v7 = [(id)objc_opt_class() filterNonUploadableChangedManagedObjectIDs:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) cloudKitStoreIdentifiers:v6];
  id v8 = [v7 mutableCopy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  char v11 = *(void **)(a1 + 40);
  if (v11 && [v11 count])
  {
    id v12 = +[NSSet setWithSet:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) minusSet:v12];
    id v13 = [*(id *)(a1 + 32) objectIDsToProcess];
    [v13 minusSet:v12];

    id v14 = [*(id *)(a1 + 32) objectIDsToRetry];
    [v14 minusSet:v12];
  }
  if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count])
  {
    uint64_t v15 = [*(id *)(a1 + 32) objectIDsToProcess];
    id v16 = [v15 count];

    id v17 = [*(id *)(a1 + 32) objectIDsToProcess];
    [v17 unionSet:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

    id v18 = [*(id *)(a1 + 32) objectIDsToProcess];
    uint64_t v19 = (unsigned char *)[v18 count] - v16;

    if (v19 >= 1)
    {
      long long v20 = +[REMLog cloudkit];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        int v31 = 134217984;
        uint64_t v32 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Enqueued %ld object IDs because of coredata changes", (uint8_t *)&v31, 0xCu);
      }
    }
    if (![*(id *)(a1 + 32) hasRetryTimer]) {
      goto LABEL_12;
    }
    uint64_t v21 = [*(id *)(a1 + 32) retryTimer];
    if (v21)
    {
      long long v22 = (void *)v21;
      long long v23 = [*(id *)(a1 + 32) retryTimer];
      long long v24 = [v23 fireDate];
      long long v25 = +[NSDate date];
      unsigned int v26 = [v24 ic_isEarlierThanDate:v25];

      if (v26)
      {
LABEL_12:
        uint64_t v27 = [*(id *)(a1 + 32) processingSelectorDelayer];

        if (v27)
        {
          __int16 v28 = +[REMLog cloudkit];
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            uint64_t v29 = *(void *)(a1 + 48);
            int v31 = 138543362;
            uint64_t v32 = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "contextDidSave processingSelectorDelayer.requestFire for author: %{public}@", (uint8_t *)&v31, 0xCu);
          }

          __int16 v30 = [*(id *)(a1 + 32) processingSelectorDelayer];
          [v30 requestFire];
        }
        else
        {
          [*(id *)(a1 + 32) processPendingCloudObjects];
        }
      }
    }
  }
}

void sub_10001E280(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(ICNSBlockOperation);
  [(ICNSBlockOperation *)v2 setName:*(void *)(a1 + 32)];
  objc_opt_class();
  BOOL v3 = [*(id *)(a1 + 40) operationQueue];
  id v4 = [v3 operations];
  uint64_t v5 = [v4 lastObject];
  id v6 = REMDynamicCast();

  if ([v6 isProcessObjectsForContextDidSaveOperation]
    && [v6 canCoalesceWithOperation:v2])
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [v6 name];
      *(_DWORD *)buf = 138543362;
      long long v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Coalescing ICNSBlockOperation name=%{public}@", buf, 0xCu);
    }
  }
  else
  {
    objc_initWeak(&location, v2);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_10001E6B0;
    v28[3] = &unk_1008AE9E0;
    objc_copyWeak(&v30, &location);
    uint64_t v9 = *(void **)(a1 + 48);
    v28[4] = *(void *)(a1 + 40);
    id v29 = v9;
    [(ICNSBlockOperation *)v2 addExecutionBlock:v28];
    uint64_t v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      unsigned int v11 = [*(id *)(a1 + 40) needsToProcessAllDirtyObjects];
      *(_DWORD *)buf = 134349312;
      long long v33 = v2;
      __int16 v34 = 1024;
      LODWORD(v35) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Adding process objects operation %{public}p. allDirtyObjects=%d", buf, 0x12u);
    }

    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v12 = [*(id *)(a1 + 40) operationQueue];
    id v13 = [v12 operations];
    id v14 = [v13 copy];

    id v15 = [v14 countByEnumeratingWithState:&v24 objects:v36 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v25;
      do
      {
        id v17 = 0;
        do
        {
          if (*(void *)v25 != v16) {
            objc_enumerationMutation(v14);
          }
          [(ICNSBlockOperation *)v2 addDependency:*(void *)(*((void *)&v24 + 1) + 8 * (void)v17)];
          id v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v14 countByEnumeratingWithState:&v24 objects:v36 count:16];
      }
      while (v15);
    }

    id v18 = [(ICNSBlockOperation *)v2 dependencies];
    BOOL v19 = [v18 count] == 0;

    if (!v19)
    {
      long long v20 = +[REMLog cloudkit];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = [(ICNSBlockOperation *)v2 dependencies];
        id v22 = [v21 count];
        *(_DWORD *)buf = 134349312;
        long long v33 = v2;
        __int16 v34 = 2048;
        id v35 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Process operation %{public}p waiting on %ld other operations", buf, 0x16u);
      }
    }
    long long v23 = [*(id *)(a1 + 40) operationQueue];
    [v23 addOperation:v2];

    [*(id *)(a1 + 40) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
    objc_destroyWeak(&v30);
    objc_destroyWeak(&location);
  }
}

void sub_10001E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001E6B0(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG)) {
    sub_10074B854(a1, v2);
  }

  BOOL v3 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001E784;
  block[3] = &unk_1008AE138;
  id v5 = *(id *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_10001E784(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001E8A0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10001E8BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([WeakRetained needsToProcessAllDirtyObjects])
  {
    [WeakRetained setNeedsToProcessAllDirtyObjects:0];
    BOOL v3 = +[REMLog cloudkit];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Running process all dirty objects operation.", buf, 2u);
    }

    [WeakRetained context];
    id v5 = _NSConcreteStackBlock;
    uint64_t v6 = 3221225472;
    id v7 = sub_10001E9DC;
    id v8 = &unk_1008ADC88;
    id v9 = WeakRetained;
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    id v4 = v10;
    [v4 performBlockAndWait:&v5];
  }
  [WeakRetained processPendingCloudObjectsWithOperationName:*(void *)(a1 + 32) syncReason:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_10001E9DC(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) allDirtyCloudObjectIDsInContext:*(void *)(a1 + 40)];
  uint64_t v2 = [*(id *)(a1 + 32) objectIDsToRetry];
  [v2 unionSet:v3];
}

id sub_10001EBA4(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.processPendingCloudObjects[%@]}", (uint8_t *)&v5, 0xCu);
  }

  return self;
}

void sub_10001F394(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  int v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.coredata}", v7, 2u);
  }

  id v6 = self;
}

void sub_10001F444(uint64_t a1)
{
  uint64_t v57 = 0;
  v58 = &v57;
  uint64_t v59 = 0x3032000000;
  uint64_t v60 = sub_10000984C;
  v61 = sub_10000985C;
  id v62 = +[NSMutableArray array];
  uint64_t v2 = [*(id *)(a1 + 32) context];
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_10001F9CC;
  v52[3] = &unk_1008AE860;
  v52[4] = *(void *)(a1 + 32);
  id v3 = v2;
  id v53 = v3;
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v54 = v4;
  uint64_t v55 = v5;
  v56 = &v57;
  [v3 performBlockAndWait:v52];
  id v6 = [(id)v58[5] count];
  id v7 = *(void **)(a1 + 32);
  if (v6)
  {
    id v8 = [v7 objectIDsToProcess];
    id v9 = [v8 count];

    id v10 = [*(id *)(a1 + 32) objectIDsToRetry];
    unsigned int v11 = [*(id *)(a1 + 32) objectIDsToProcess];
    [v10 unionSet:v11];

    id v12 = +[NSMutableSet set];
    [*(id *)(a1 + 32) setObjectIDsToProcess:v12];

    id v13 = +[REMLog cloudkit];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v16 = +[NSDate date];
      [v16 timeIntervalSinceDate:*(void *)(a1 + 56)];
      uint64_t v17 = v58[5];
      *(_DWORD *)buf = 138544386;
      uint64_t v64 = v15;
      __int16 v65 = 2114;
      uint64_t v66 = v14;
      __int16 v67 = 2048;
      id v68 = v18;
      __int16 v69 = 2048;
      id v70 = v9;
      __int16 v71 = 2114;
      uint64_t v72 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] END(DEFERRED due to MERGE.LOCAL needs to happen before we can processObjectIDs) {operationName: %{public}@, syncReason: %{public}@, duration: %.4f, numIDsToProcessAddingToRetry: %ld, pendingAccountIdentifiers: %{public}@}", buf, 0x34u);
    }
    BOOL v19 = *(id *)(a1 + 64);
    long long v20 = v19;
    os_signpost_id_t v21 = *(void *)(a1 + 88);
    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, v21, "cloudkit.coredata", "", buf, 2u);
    }

    id v22 = self;
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
  }
  else
  {
    long long v23 = [v7 objectIDsToRetry];
    id v24 = [v23 count];

    long long v25 = [*(id *)(a1 + 32) objectIDsToProcess];
    long long v26 = [*(id *)(a1 + 32) objectIDsToRetry];
    [v25 unionSet:v26];

    long long v27 = +[NSMutableSet set];
    [*(id *)(a1 + 32) setObjectIDsToRetry:v27];

    __int16 v28 = +[REMLog cloudkit];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v29 = *(void *)(a1 + 48);
      int v31 = [*(id *)(a1 + 32) objectIDsToProcess];
      id v32 = [v31 count];
      *(_DWORD *)buf = 138544130;
      uint64_t v64 = v30;
      __int16 v65 = 2114;
      uint64_t v66 = v29;
      __int16 v67 = 2048;
      id v68 = v32;
      __int16 v69 = 2048;
      id v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] CONTINUE {operationName: %{public}@, syncReason: %{public}@, objectIDsToProcess.count: %ld, retryIDsCount: %ld}", buf, 0x2Au);
    }
    long long v33 = *(void **)(a1 + 32);
    __int16 v34 = [v33 objectIDsToProcess];
    id v35 = [*(id *)(a1 + 32) operationQueue];
    long long v41 = _NSConcreteStackBlock;
    uint64_t v42 = 3221225472;
    id v43 = sub_10001FB40;
    id v44 = &unk_1008AEAA8;
    id v45 = *(id *)(a1 + 56);
    id v36 = *(id *)(a1 + 40);
    uint64_t v37 = *(void *)(a1 + 48);
    id v46 = v36;
    uint64_t v47 = v37;
    id v38 = *(id *)(a1 + 64);
    uint64_t v39 = *(void *)(a1 + 88);
    id v48 = v38;
    uint64_t v51 = v39;
    id v49 = *(id *)(a1 + 72);
    id v50 = *(id *)(a1 + 80);
    [v33 processObjectIDs:v34 operationQueue:v35 completionHandler:&v41];

    long long v40 = +[NSMutableSet set];
    [*(id *)(a1 + 32) setObjectIDsToProcess:v40];
  }
  _Block_object_dispose(&v57, 8);
}

void sub_10001F994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_10001F9CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10001FA78;
  v3[3] = &unk_1008AEA80;
  id v4 = *(id *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 56);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_10001FA78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 daWasMigrated] && (objc_msgSend(v3, "inactive") & 1) == 0)
  {
    id v4 = [v3 identifier];
    long long v5 = [v4 UUIDString];

    if ([v5 length])
    {
      [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v5];
    }
    else
    {
      id v6 = +[REMLog cloudkit];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_10074BB38();
      }
    }
  }
}

void sub_10001FB40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 count];
  long long v5 = +[REMLog cloudkit];
  id v6 = v5;
  if (v4)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10074BBAC();
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = +[NSDate date];
    [v9 timeIntervalSinceDate:*(void *)(a1 + 32)];
    int v15 = 138543874;
    uint64_t v16 = v7;
    __int16 v17 = 2114;
    uint64_t v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SYNC[COREDATA] END {operationName: %{public}@, syncReason: %{public}@, duration: %.4f}", (uint8_t *)&v15, 0x20u);
  }
  unsigned int v11 = *(id *)(a1 + 56);
  id v12 = v11;
  os_signpost_id_t v13 = *(void *)(a1 + 80);
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    LOWORD(v15) = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_INTERVAL_END, v13, "cloudkit.coredata", "", (uint8_t *)&v15, 2u);
  }

  id v14 = self;
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

void sub_10001FDD0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10001FDEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained processingQueue];
  dispatch_assert_queue_V2(v3);

  if ([WeakRetained hasPassedBuddy]
    && ([WeakRetained isSystemAvailableForSyncing] & 1) != 0)
  {
    id v4 = [WeakRetained appleAccountUtilities];
    long long v5 = [v4 unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts];

    +[NSMutableArray arrayWithCapacity:[v5 count]];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_100020374;
    v35[3] = &unk_1008AEAF8;
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v36 = v6;
    [v5 enumerateObjectsUsingBlock:v35];
    uint64_t v31 = 0;
    id v32 = &v31;
    uint64_t v33 = 0x2020000000;
    char v34 = 0;
    uint64_t v27 = 0;
    __int16 v28 = &v27;
    uint64_t v29 = 0x2020000000;
    char v30 = 0;
    uint64_t v21 = 0;
    id v22 = &v21;
    uint64_t v23 = 0x3032000000;
    id v24 = sub_10000984C;
    long long v25 = sub_10000985C;
    +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v6 count]);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v7 = +[NSDate now];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000203F0;
    v20[3] = &unk_1008AEB48;
    v20[4] = WeakRetained;
    void v20[5] = &v21;
    v20[6] = &v31;
    v20[7] = &v27;
    [v6 enumerateObjectsUsingBlock:v20];
    uint64_t v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = +[NSDate date];
      [v9 timeIntervalSinceDate:v7];
      *(_DWORD *)buf = 134218242;
      *(double *)&uint8_t buf[4] = v10 * 1000.0;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: (MergeLocalObjectsContext) Populated merge contexts {elapsed: %.4f ms, accountIdentifiers: %{public}@}", buf, 0x16u);
    }
    [WeakRetained setNeedsToMergeLocalObjects:*((unsigned __int8 *)v32 + 24)];
    uint64_t v16 = 0;
    __int16 v17 = &v16;
    uint64_t v18 = 0x2020000000;
    uint64_t v19 = 0;
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    long long v40 = sub_10000984C;
    long long v41 = sub_10000985C;
    id v42 = +[NSMutableDictionary dictionary];
    unsigned int v11 = (void *)v22[5];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100020734;
    v15[3] = &unk_1008AEB70;
    void v15[4] = &v16;
    v15[5] = buf;
    [v11 enumerateKeysAndObjectsUsingBlock:v15];
    if (v17[3])
    {
      uint64_t v12 = *(void *)(*(void *)&buf[8] + 40);
      os_signpost_id_t v13 = [WeakRetained operationQueue];
      [WeakRetained processLocalObjectMergeEligibleObjectIDs:v12 operationQueue:v13 completionHandler:*(void *)(a1 + 32)];
    }
    else
    {
      if (*((unsigned char *)v28 + 24)) {
        goto LABEL_11;
      }
      os_signpost_id_t v13 = +[REMLog cloudkit];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        int v14 = *((unsigned __int8 *)v32 + 24);
        *(_DWORD *)uint64_t v37 = 67109120;
        int v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "MERGE.LOCAL: No need to merge local objects or no objectIDsInCloud (someAccountsNeedToMergeLocalObjects: %d)", v37, 8u);
      }
    }

    [WeakRetained setNeedsToMergeLocalObjects:0];
    [WeakRetained clearRetryCountForOperationType:@"Merge.Local"];
LABEL_11:
    if (*((unsigned char *)v28 + 24))
    {
      [(id)v22[5] enumerateKeysAndObjectsUsingBlock:&stru_1008AEBB0];
      [WeakRetained _scheduleRetryMergeLocalObjects];
    }
    _Block_object_dispose(buf, 8);

    _Block_object_dispose(&v16, 8);
    _Block_object_dispose(&v21, 8);

    _Block_object_dispose(&v27, 8);
    _Block_object_dispose(&v31, 8);

    goto LABEL_14;
  }
  long long v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
    sub_10074BC8C();
  }
LABEL_14:
}

void sub_100020300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _Block_object_dispose((const void *)(v38 - 176), 8);
  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_100020374(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 identifier];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    long long v5 = [v6 identifier];
    [v4 addObject:v5];
  }
}

void sub_1000203F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v5 = [*(id *)(a1 + 32) mergeLocalObjectsFetchContextAffectingStoreOf:v3];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000204D4;
  v8[3] = &unk_1008AEB20;
  id v6 = v3;
  id v9 = v6;
  id v10 = v5;
  long long v11 = *(_OWORD *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  id v7 = v5;
  [v7 performBlockAndWait:v8];
}

void sub_1000204D4(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  id v3 = +[REMCDAccount cloudKitAccountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  if (v3)
  {
    id v4 = [[ICREMCDAccountMergeLocalObjectsContext alloc] initWithAccountIdentifier:*(void *)(a1 + 32)];
    [(ICREMCDAccountMergeLocalObjectsContext *)v4 validateWithAccount:v3];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setObject:v4 forKey:*(void *)(a1 + 32)];
    if ([(ICREMCDAccountMergeLocalObjectsContext *)v4 needsToMergeLocalObjects])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      long long v5 = +[REMLog cloudkit];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *v2;
        *(_DWORD *)os_signpost_id_t v13 = 138543362;
        *(void *)&v13[4] = v6;
        id v7 = "MERGE.LOCAL: (MergeLocalObjectsContext) Account needs to merge local objects {accountIdentifier: %{public}@}";
        uint64_t v8 = v5;
        uint32_t v9 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, v13, v9);
      }
    }
    else
    {
      long long v5 = +[REMLog cloudkit];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *v2;
        *(_DWORD *)os_signpost_id_t v13 = 138543618;
        *(void *)&v13[4] = v10;
        *(_WORD *)&v13[12] = 1024;
        *(_DWORD *)&v13[14] = [v3 inactive];
        id v7 = "MERGE.LOCAL: (MergeLocalObjectsContext) Account does not need to merge local objects {accountIdentifier: %{"
             "public}@, isInactive: %d}";
        uint64_t v8 = v5;
        uint32_t v9 = 18;
        goto LABEL_9;
      }
    }

    if ([(ICREMCDAccountMergeLocalObjectsContext *)v4 shouldRetryMergeLocalObjects])
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
      long long v11 = +[REMLog cloudkit];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = [(ICREMCDAccountMergeLocalObjectsContext *)v4 loggableDescription];
        *(_DWORD *)os_signpost_id_t v13 = 138543362;
        *(void *)&v13[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: (MergeLocalObjectsContext) Account is not ready to merge local objects {mergeContext: %{public}@}", v13, 0xCu);
      }
    }
    [*(id *)(a1 + 40) reset:v13[0] v13[16]];
    goto LABEL_15;
  }
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(&v4->super, OS_LOG_TYPE_ERROR)) {
    sub_10074BD28();
  }
LABEL_15:
}

void sub_100020734(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  long long v5 = [a3 objectIDsOfClassesEligibleForLocalObjectMerge];
  if ([v5 count])
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v5 count];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v5 forKey:v6];
  }
}

void sub_1000207CC(id a1, NSString *a2, ICREMCDAccountMergeLocalObjectsContext *a3, BOOL *a4)
{
  id v4 = a3;
  if ([(ICREMCDAccountMergeLocalObjectsContext *)v4 shouldRetryMergeLocalObjects])
  {
    long long v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [(ICREMCDAccountMergeLocalObjectsContext *)v4 loggableDescription];
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: This account cannot merge local objects at this time, will schedule retry if needed (mergeContext: %{public}@)", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100020E6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  long long v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.merge.local.coredata}", v7, 2u);
  }

  id v6 = self;
}

void sub_100020F1C(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134217984;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] CONTINUE {keys.count: %ld}", buf, 0xCu);
  }

  id v4 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472;
  uint64_t v12 = sub_1000210E0;
  os_signpost_id_t v13 = &unk_1008AEC00;
  long long v5 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v6 = v4;
  id v15 = v6;
  [v5 enumerateKeysAndObjectsUsingBlock:&v10];
  int v7 = +[REMLog cloudkit];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = +[NSDate date];
    [v8 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)buf = 134217984;
    id v17 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] END {duration: %.4f}", buf, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000210E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = +[REMLog cloudkit];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543618;
    id v17 = v5;
    __int16 v18 = 2114;
    id v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "MERGE.LOCAL: Here's the objectIDs to fetch and process (accountID: %{public}@, eligibleObjectIDs: %{public}@).", buf, 0x16u);
  }

  [*(id *)(a1 + 32) mergeLocalObjectsWriteContextAffectingStoreOf:v5];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100021270;
  v11[3] = &unk_1008ADC60;
  id v12 = v5;
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  id v14 = v6;
  id v15 = *(id *)(a1 + 40);
  id v8 = v6;
  id v9 = v13;
  id v10 = v5;
  [v9 performBlockAndWait:v11];
}

void sub_100021270(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  id v3 = +[REMCDAccount cloudKitAccountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  id v4 = v3;
  if (!v3)
  {
    id v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10074BDC4();
    }
    goto LABEL_13;
  }
  if ([v3 daWasMigrated])
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v12 = 0;
    unsigned __int8 v7 = +[ICCloudContext _performLocalObjectMergeWithEligibleObjectIDs:v5 cloudKitAccount:v4 managedObjectContext:v6 error:&v12];
    id v8 = v12;
    if (v8) {
      [*(id *)(a1 + 56) addObject:v8];
    }
    id v9 = +[REMLog cloudkit];
    id v10 = v9;
    if (v7)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *v2;
        *(_DWORD *)buf = 138543362;
        uint64_t v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL[COREDATA] MERGE LOCAL SAVED for accountID %{public}@.", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_10074BE2C();
    }

LABEL_13:
  }
}

id sub_100021950(uint64_t a1)
{
  [*(id *)(a1 + 32) addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler:&stru_1008AEC68];
  [*(id *)(a1 + 32) setNeedsToProcessAllDirtyObjects:1];
  uint64_t v2 = ICNSBlockOperationNameProcessDirtyObjects;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);

  return [v3 addOperationToProcessObjectsWithOperationName:v2 syncReason:v4 completionHandler:v5];
}

void sub_1000219B0(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = [(NSArray *)v2 countByEnumeratingWithState:&v11 objects:v17 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v12;
    *(void *)&long long v4 = 138543362;
    long long v10 = v4;
    do
    {
      unsigned __int8 v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * (void)v7);
        id v9 = +[REMLog cloudkit];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = v10;
          uint64_t v16 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "MERGE.LOCAL: Collected error upon merge local objects completion: {error: %{public}@}.", buf, 0xCu);
        }

        unsigned __int8 v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [(NSArray *)v2 countByEnumeratingWithState:&v11 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_100021D64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  [a3 reset];
  [*(id *)(a1 + 32) _processCloudObjectIDs:v5 operationQueue:*(void *)(a1 + 40) completionHandler:*(void *)(a1 + 48)];
}

void sub_100021F64(uint64_t a1)
{
  uint64_t v51 = objc_opt_new();
  id v54 = objc_opt_new();
  uint64_t v2 = +[NSMutableArray array];
  uint64_t v59 = +[NSMutableArray array];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  uint64_t v53 = a1;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v74 objects:v87 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v75;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v75 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v74 + 1) + 8 * i);
        id v9 = [v8 entity];
        long long v10 = [v9 name];
        unsigned int v11 = [v10 isEqual:@"REMCKCloudState"];

        if (v11) {
          long long v12 = v59;
        }
        else {
          long long v12 = v2;
        }
        [v12 addObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v74 objects:v87 count:16];
    }
    while (v5);
  }

  v56 = +[NSMutableDictionary dictionary];
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id obj = v2;
  id v13 = [obj countByEnumeratingWithState:&v70 objects:v86 count:16];
  long long v14 = v54;
  if (v13)
  {
    id v15 = v13;
    uint64_t v16 = *(void *)v71;
    do
    {
      id v17 = 0;
      do
      {
        if (*(void *)v71 != v16) {
          objc_enumerationMutation(obj);
        }
        __int16 v18 = *(void **)(*((void *)&v70 + 1) + 8 * (void)v17);
        id v19 = [v18 persistentStore];
        uint64_t v20 = v19;
        if (v19)
        {
          uint64_t v21 = [v19 identifier];
          if ([v21 length])
          {
            id v22 = [v56 objectForKey:v21];
            if ([v22 length])
            {
              uint64_t v23 = v22;
              goto LABEL_26;
            }
            id v24 = [*(id *)(v53 + 40) storeController];
            uint64_t v23 = [v24 accountIdentifierForStoreID:v21];

            if ([v23 length])
            {
              [v56 setObject:v23 forKey:v21];
              long long v14 = v54;
LABEL_26:
              long long v25 = [v14 objectForKeyedSubscript:v23];
              if (!v25)
              {
                long long v25 = +[NSMutableArray array];
                [v14 setObject:v25 forKeyedSubscript:v23];
              }
              [v25 addObject:v18];
            }
            else
            {
              long long v25 = +[REMLog cloudkit];
              long long v14 = v54;
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138543874;
                v81 = v18;
                __int16 v82 = 2114;
                v83 = v21;
                __int16 v84 = 2114;
                uint64_t v85 = (uint64_t)v23;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil or empty accountID for managedObjectID %{public}@, storeID %{public}@, accountID: %{public}@", buf, 0x20u);
              }
            }
          }
          else
          {
            uint64_t v23 = +[REMLog cloudkit];
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              v81 = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil or empty storeID for managedObjectID %{public}@", buf, 0xCu);
            }
          }

          goto LABEL_31;
        }
        uint64_t v21 = +[REMLog cloudkit];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543362;
          v81 = v18;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "_processFetchedCloudObjectsWithObjectIDs with nil store for managedObjectID %{public}@", buf, 0xCu);
        }
LABEL_31:

        id v17 = (char *)v17 + 1;
      }
      while (v15 != v17);
      id v26 = [obj countByEnumeratingWithState:&v70 objects:v86 count:16];
      id v15 = v26;
    }
    while (v26);
  }

  v68[0] = _NSConcreteStackBlock;
  v68[1] = 3221225472;
  v68[2] = sub_1000227BC;
  v68[3] = &unk_1008AECB8;
  id v55 = v51;
  id v69 = v55;
  [v14 enumerateKeysAndObjectsUsingBlock:v68];
  uint64_t v27 = +[REMCKCloudState defaultRelationshipKeyPathsForPrefetching];
  __int16 v28 = +[REMCKCloudState ic_objectsFromObjectIDs:v59 propertiesToFetch:0 relationshipKeyPathsForPrefetching:v27 context:*(void *)(v53 + 48)];

  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v57 = v28;
  uint64_t v29 = (char *)[v57 countByEnumeratingWithState:&v64 objects:v79 count:16];
  if (!v29) {
    goto LABEL_53;
  }
  char v30 = v29;
  uint64_t v31 = *(void *)v65;
  do
  {
    for (j = 0; j != v30; ++j)
    {
      if (*(void *)v65 != v31) {
        objc_enumerationMutation(v57);
      }
      objc_opt_class();
      uint64_t v33 = REMCheckedDynamicCast();
      objc_opt_class();
      char v34 = [v33 cloudObject];
      id v35 = REMCheckedDynamicCast();

      id v36 = [v35 accountCKIdentifier];
      if (![v36 length])
      {
        uint64_t v37 = +[REMLog cloudkit];
        if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
        {
          uint64_t v52 = [v33 ic_loggingDescription];
          uint64_t v39 = [v35 ic_loggingDescription];
          *(_DWORD *)buf = 138543874;
          v81 = v36;
          __int16 v82 = 2114;
          v83 = v52;
          __int16 v84 = 2112;
          uint64_t v85 = v39;
          long long v40 = (void *)v39;
          _os_log_fault_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "fetched REMCKCloudState with cloudObject.accountID is nil or empty: %{public}@, cloudState: %{public}@, cloudObject: %@", buf, 0x20u);
        }
        goto LABEL_50;
      }
      if (v35
        && (([v35 isInICloudAccount] & 1) != 0
         || [v35 needsToBeDeletedFromCloud]))
      {
        uint64_t v37 = [v55 objectForKeyedSubscript:v36];
        if (!v37)
        {
          uint64_t v37 = +[NSMutableOrderedSet orderedSet];
          [v55 setObject:v37 forKeyedSubscript:v36];
        }
        uint64_t v38 = [v35 objectID];
        [v37 addObject:v38];

LABEL_50:
      }
    }
    char v30 = (char *)[v57 countByEnumeratingWithState:&v64 objects:v79 count:16];
  }
  while (v30);
LABEL_53:

  long long v41 = objc_opt_new();
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v42 = v55;
  id v43 = [v42 countByEnumeratingWithState:&v60 objects:v78 count:16];
  if (v43)
  {
    id v44 = v43;
    uint64_t v45 = *(void *)v61;
    do
    {
      for (k = 0; k != v44; k = (char *)k + 1)
      {
        if (*(void *)v61 != v45) {
          objc_enumerationMutation(v42);
        }
        uint64_t v47 = *(void *)(*((void *)&v60 + 1) + 8 * (void)k);
        id v48 = [v42 objectForKeyedSubscript:v47];
        id v49 = [v48 array];
        [v41 setObject:v49 forKeyedSubscript:v47];
      }
      id v44 = [v42 countByEnumeratingWithState:&v60 objects:v78 count:16];
    }
    while (v44);
  }

  (*(void (**)(void))(*(void *)(v53 + 56) + 16))();
}

void sub_1000227BC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = +[NSMutableOrderedSet orderedSetWithArray:a3];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

uint64_t sub_100022BE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100022BF4(uint64_t a1)
{
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100022EF8;
  v26[3] = &unk_1008AECE0;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(a1 + 56);
  id v27 = v3;
  uint64_t v28 = v4;
  id v29 = v5;
  id v30 = *(id *)(a1 + 64);
  [v2 enumerateKeysAndObjectsUsingBlock:v26];
  [*(id *)(a1 + 40) reset];
  if ([*(id *)(a1 + 56) count])
  {
    id v6 = +[ICCloudConfiguration sharedConfiguration];
    unsigned __int8 v7 = [v6 throttlingPolicy];
    [v7 incrementBatchCount];

    uint64_t v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138543362;
      uint64_t v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "_processCloudObjects adding fetch&/modify cloud objects operation to operation queue: %{public}@", buf, 0xCu);
    }

    [*(id *)(a1 + 64) addOperations:*(void *)(a1 + 56) waitUntilFinished:0];
    [(id)objc_opt_class() errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:*(void *)(a1 + 64)];
  }
  if (*(void *)(a1 + 72))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1000235F8;
    v22[3] = &unk_1008AE430;
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 48);
    id v23 = v10;
    uint64_t v24 = v11;
    id v25 = *(id *)(a1 + 72);
    long long v12 = +[ICNSBlockOperation blockOperationWithBlock:v22];
    [v12 setName:ICNSBlockOperationNameProcessCompletionForOperations];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v13 = *(id *)(a1 + 56);
    id v14 = [v13 countByEnumeratingWithState:&v18 objects:v31 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v19;
      do
      {
        id v17 = 0;
        do
        {
          if (*(void *)v19 != v16) {
            objc_enumerationMutation(v13);
          }
          [v12 addDependency:*(void *)(*((void *)&v18 + 1) + 8 * (void)v17) (void)v18];
          id v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v18 objects:v31 count:16];
      }
      while (v15);
    }

    [*(id *)(a1 + 64) addOperation:v12];
    [(id)objc_opt_class() errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:*(void *)(a1 + 64)];
  }
}

void sub_100022EF8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = INDateRelevanceProvider_ptr;
  uint64_t v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    id v60 = [v6 count];
    __int16 v61 = 2114;
    id v62 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Processing %lu cloud objects for accountID %{public}@", buf, 0x16u);
  }
  id v43 = v5;

  id v44 = +[NSMutableSet set];
  uint64_t v47 = +[NSMutableArray array];
  id v48 = +[NSMutableArray array];
  uint64_t v45 = +[NSMutableArray array];
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  id v9 = v6;
  id v10 = [v9 countByEnumeratingWithState:&v52 objects:v58 count:16];
  id v46 = v9;
  if (v10)
  {
    id v11 = v10;
    uint64_t v50 = *(void *)v53;
    id v42 = &v57;
    do
    {
      long long v12 = 0;
      do
      {
        if (*(void *)v53 != v50) {
          objc_enumerationMutation(v9);
        }
        id v13 = *(void **)(*((void *)&v52 + 1) + 8 * (void)v12);
        id v15 = a1[4];
        id v51 = 0;
        uint64_t v16 = [v15 existingObjectWithID:v13 error:&v51];
        id v17 = v51;
        if (!v16)
        {
          long long v18 = [v7[201] cloudkit];
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138543618;
            id v60 = v17;
            __int16 v61 = 2114;
            id v62 = v13;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Cannot fault-in object while processing cloudObjectIDs {error: %{public}@, cloudObjectID: %{public}@}", buf, 0x16u);
          }
          goto LABEL_45;
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v18 = v16;
          if ([a1[5] _isRecognizedCloudObjectClass:v18])
          {
            if ([v18 isInICloudAccount])
            {
              if ([v18 ckNeedsToBeFetchedFromCloud])
              {
                long long v19 = [v18 recordID];
                if (v19) {
                  [v44 addObject:v19];
                }
              }
              if ([v18 canBeRootShareObject])
              {
                long long v20 = [v18 ckServerRecord];
                long long v21 = [v20 share];
                id v22 = [v21 recordID];

                if (v22)
                {
                  id v23 = [v18 ckServerShare];

                  if (!v23) {
                    [v44 addObject:v22];
                  }
                }

                id v9 = v46;
                unsigned __int8 v7 = INDateRelevanceProvider_ptr;
              }
              if (![v18 needsToBePushedToCloud]
                || ([v18 shouldBeIgnoredForSync] & 1) != 0)
              {
LABEL_27:
                unsigned int v27 = [v18 needsToBeDeletedFromCloud];
                id v25 = v48;
                if (v27) {
                  goto LABEL_28;
                }
              }
              else
              {
                unsigned __int8 v24 = [v18 hasAllMandatoryFields];
                id v25 = v47;
                if ((v24 & 1) == 0)
                {
                  id v26 = [v7[201] cloudkit];
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
                    sub_10074BE94((uint64_t)v56, (uint64_t)v18);
                  }

                  goto LABEL_27;
                }
LABEL_28:
                [v25 addObject:v18];
              }
              if ([v18 needsToDeleteShare])
              {
                [v45 addObject:v18];
                [v47 removeObject:v18];
              }
            }
            [a1[4] refreshObject:v18 mergeChanges:0];
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_respondsToSelector() & 1) != 0
              && (v29 = (uint64_t (*)(uint64_t, const char *))[(id)objc_opt_class() methodForSelector:"shouldSyncToCloud"], v30 = objc_opt_class(), v31 = v29(v30, "shouldSyncToCloud"), unsigned __int8 v7 = INDateRelevanceProvider_ptr, !v31))
            {
              uint64_t v33 = +[REMLog cloudkit];
              if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
              {
                char v34 = (objc_class *)objc_opt_class();
                id v35 = NSStringFromClass(v34);
                *(_DWORD *)buf = 138543362;
                id v60 = v35;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "This REMCDObject subclass has shouldSyncToCloud=NO. Not saving this object to the cloud {class: %{public}@}", buf, 0xCu);

                unsigned __int8 v7 = INDateRelevanceProvider_ptr;
              }
            }
            else
            {
              id v32 = [v7[201] cloudkit:v42];
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
              {
                id v36 = (objc_class *)objc_opt_class();
                id v49 = NSStringFromClass(v36);
                *(_DWORD *)buf = 138543618;
                id v60 = v49;
                __int16 v61 = 2114;
                id v62 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "BOGUS: Unrecognized subclass of REMCDObject but shouldSyncToCloud=YES. Not saving this object to the cloud {class: %{public}@, objectID: %{public}@}", buf, 0x16u);
              }
              unsigned __int8 v7 = INDateRelevanceProvider_ptr;
            }
          }
LABEL_45:

          goto LABEL_46;
        }
        uint64_t v28 = [v7[201] cloudkit];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138543362;
          id v60 = v13;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Found non-REMCDObject to process. Skipping {objectID: %{public}@}", buf, 0xCu);
        }

        [a1[4] refreshObject:v16 mergeChanges:0];
LABEL_46:

        long long v12 = (char *)v12 + 1;
      }
      while (v11 != v12);
      id v11 = [v9 countByEnumeratingWithState:&v52 objects:v58 count:16];
    }
    while (v11);
  }

  id v37 = a1[5];
  uint64_t v38 = [v44 allObjects];
  uint64_t v39 = [v37 operationsToFetchRecordIDs:v38 operationGroupName:0 accountID:v43];

  [a1[6] addObjectsFromArray:v39];
  long long v40 = [a1[5] operationsToModifyRecordsForCloudObjectsToSave:v47 delete:v48 deleteShares:v45 operationGroupName:@"SaveChangedObjects" addDependencies:1 accountID:v43];
  [a1[6] addObjectsFromArray:v40];
  if ([v45 count])
  {
    long long v41 = [a1[5] fetchAndCompletionOperationWithDeleteShareObjects:v45 accountID:v43 dependencyOperations:a1[6] completionHandler:0];
    [a1[7] addOperation:v41];
    [(id)objc_opt_class() errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:a1[7]];
  }
}

void sub_1000235F8(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v9 = [v8 error:v14];

        if (v9)
        {
          id v10 = [v8 error];
          [v2 addObject:v10];

          id v11 = *(void **)(a1 + 40);
          long long v12 = [v8 error];
          [v11 startRetryTimerIfNecessaryWithError:v12];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  if ([v2 count]) {
    id v13 = v2;
  }
  else {
    id v13 = 0;
  }
  (*(void (**)(void, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v13);
}

void sub_100023C10(id *a1, int a2, void *a3)
{
  id v17 = a3;
  id v5 = [a1[4] processingQueue];
  dispatch_assert_queue_V2(v5);

  uint64_t v6 = +[REMLog cloudkit];
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (a2)
  {
    if (v7)
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = [v17 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "SYNC[APS] CONTINUE - coalesced databaseNotificationSet.count: %lu", (uint8_t *)&buf, 0xCu);
    }

    v27[0] = 0;
    v27[1] = v27;
    v27[2] = 0x2020000000;
    v27[3] = 0;
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v30 = 0x3032000000;
    int v31 = sub_10000984C;
    id v32 = sub_10000985C;
    +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v17 count]);
    id v33 = (id)objc_claimAutoreleasedReturnValue();
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v8 = v17;
    id v9 = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v24;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v24 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void *)(*((void *)&v23 + 1) + 8 * i);
          id v13 = a1[4];
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472;
          v18[2] = sub_100023F74;
          v18[3] = &unk_1008AED30;
          long long v21 = v27;
          p_long long buf = &buf;
          id v14 = v8;
          id v19 = v14;
          id v20 = a1[6];
          [v13 handleDatabaseNotification:v12 completionHandler:v18];
        }
        id v9 = [v14 countByEnumeratingWithState:&v23 objects:v28 count:16];
      }
      while (v9);
    }

    _Block_object_dispose(&buf, 8);
    _Block_object_dispose(v27, 8);
  }
  else
  {
    if (v7)
    {
      long long v15 = [a1[5] debugDescription];
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "SYNC[APS] SKIP - Notification debounced and coalesced {notificationID: %{public}@}", (uint8_t *)&buf, 0xCu);
    }
    long long v16 = (void (**)(id, void))a1[6];
    if (v16) {
      v16[2](v16, 0);
    }
  }
}

void sub_100023F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v27 - 176), 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_100023F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  id v6 = v3;
  if (v3) {
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
  }
  id v4 = *(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v4 == [*(id *)(a1 + 32) count])
  {
    if ([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count])
    {
      id v5 = +[REMError errorFromErrors:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    }
    else
    {
      id v5 = 0;
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1000241F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000242F4;
  v11[3] = &unk_1008AEDA8;
  BOOL v7 = *(void **)(a1 + 40);
  void v11[4] = *(void *)(a1 + 32);
  id v8 = v7;
  uint64_t v17 = *(void *)(a1 + 64);
  id v12 = v8;
  id v13 = v6;
  id v14 = *(id *)(a1 + 48);
  id v15 = v5;
  id v16 = *(id *)(a1 + 56);
  id v9 = v5;
  id v10 = v6;
  [v10 fetchUserRecordIDWithCompletionHandler:v11];
}

void sub_1000242F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) processingQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100024418;
  v10[3] = &unk_1008AEAD0;
  id v11 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 80);
  id v12 = v5;
  uint64_t v18 = v6;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  id v9 = v3;
  dispatch_async(v4, v10);
}

void sub_100024418(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) recordName];
  if ([*(id *)(a1 + 40) isEqualToString:v2])
  {
    id v3 = +[REMLog cloudkit];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = CKDatabaseScopeString();
      *(_DWORD *)long long buf = 138543618;
      id v13 = v4;
      __int16 v14 = 2114;
      id v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SYNC[APS] CONTINUE - Found a container with subscription owner user recordID for the CKDatabaseNotification {scope: %{public}@, userRecordName: %{public}@}", buf, 0x16u);
    }
    id v5 = [*(id *)(a1 + 48) databaseWithDatabaseScope:*(void *)(a1 + 88)];
    if (!v5)
    {
      id v9 = +[REMLog cloudkit];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
        sub_10074C0C0();
      }
    }
    uint64_t v6 = *(void **)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000245DC;
    v10[3] = &unk_1008AED80;
    void v10[4] = v6;
    uint64_t v8 = *(void *)(a1 + 72);
    id v11 = *(id *)(a1 + 80);
    [v6 _handleDatabaseNotification:v7 database:v5 accountID:v8 completionHandler:v10];
  }
}

void sub_1000245DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) processingQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000246A0;
  v7[3] = &unk_1008ADD50;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1000246A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100024988(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074C128(v3, v5);
    }

    [*(id *)(a1 + 32) addObject:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "...SYNC[APS] Fetched database changes for aps notification sync", buf, 2u);
    }
  }
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100024B0C;
  v9[3] = &unk_1008AEE20;
  id v10 = *(id *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 40);
  id v12 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  char v15 = *(unsigned char *)(a1 + 80);
  id v13 = *(id *)(a1 + 56);
  [v6 fetchRecordZoneChangesWithReason:v7 cloudSchemaCatchUpSyncContextMap:v8 completionHandler:v9];
}

void sub_100024B0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074C1B4(v3, v5);
    }

    [*(id *)(a1 + 32) addObject:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "...SYNC[APS] Fetched record zone changes for aps notification zone", buf, 2u);
    }
  }
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100024C80;
  v10[3] = &unk_1008AEDF8;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 40);
  id v15 = v8;
  uint64_t v13 = v9;
  char v16 = *(unsigned char *)(a1 + 80);
  id v14 = *(id *)(a1 + 64);
  [v6 processAllDirtyCloudObjectsWithSyncReason:v7 completionHandler:v10];
}

void sub_100024C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074C240(v3, v5);
    }

    [*(id *)(a1 + 32) addObjectsFromArray:v3];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "...SYNC[APS] Handled CloudKit database notification {databaseNotification: %{public}@}", buf, 0xCu);
    }
  }
  if (*(void *)(a1 + 64))
  {
    uint64_t v7 = [(id)objc_opt_class() errorFromErrors:*(void *)(a1 + 32)];
    if (*(unsigned char *)(a1 + 72))
    {
      id v8 = +[NSString stringWithFormat:@"%@", *(void *)(a1 + 40)];
      [*(id *)(a1 + 48) didCompleteCloudSchemaCatchUpSyncWithContextMap:*(void *)(a1 + 56) error:v7 syncTypeLabel:@"APS" debugLogLabel:v8];
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100024F14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138543362;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Filtering out account ID %{public}@ from needing fetch changes since there is no corresponding container.", (uint8_t *)&v6, 0xCu);
  }

  id v5 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
  [v5 setObject:0 forKeyedSubscript:v3];
}

void sub_1000250E4(uint64_t a1)
{
  [*(id *)(a1 + 32) validateAccountZoneIDsNeedingFetchChanges];
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [v2 accountZoneIDsNeedingFetchChanges];
  [v2 fetchRecordZoneChangesForAccountZoneIDs:v3 reason:*(void *)(a1 + 40) cloudSchemaCatchUpSyncContextMap:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
}

void sub_100025388(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSMutableString) initWithString:@"Asking to fetch changes for:"];
  id v3 = *(void **)(a1 + 32);
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100025828;
  v39[3] = &unk_1008AEE70;
  id v4 = v2;
  id v40 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v39];
  id v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    id v42 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
  }
  long long v26 = v4;

  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472;
  v34[2] = sub_1000259A0;
  v34[3] = &unk_1008AEE98;
  int8x16_t v28 = *(int8x16_t *)(a1 + 32);
  id v6 = (id)v28.i64[0];
  int8x16_t v35 = vextq_s8(v28, v28, 8uLL);
  id v7 = *(void **)(a1 + 56);
  uint64_t v36 = *(void *)(a1 + 48);
  id v37 = v7;
  id v38 = *(id *)(a1 + 64);
  id v29 = +[ICNSBlockOperation blockOperationWithBlock:v34];
  [v29 setName:ICNSBlockOperationNameCreateFetchZoneChanges];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v8 = [*(id *)(a1 + 40) operationQueue];
  uint64_t v9 = [v8 operations];

  id v10 = [v9 countByEnumeratingWithState:&v30 objects:v45 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v31;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v31 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v13);
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v15 = v14;
          char v16 = *(void **)(a1 + 40);
          id v17 = [v15 database];
          uint64_t v18 = [v16 accountIDForDatabase:v17];

          if ([v18 length])
          {
            if (!v18) {
              goto LABEL_16;
            }
LABEL_15:
            id v20 = [*(id *)(a1 + 32) objectForKeyedSubscript:v18];
            unsigned int v21 = [v15 ic_intersectsRecordZoneIDSet:v20];

            if (v21) {
              goto LABEL_16;
            }
          }
          else
          {
            id v19 = +[REMLog cloudkit];
            if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
            {
              uint64_t v27 = [v15 database];
              long long v24 = [v27 ic_loggingDescription];
              *(_DWORD *)long long buf = 138543618;
              id v42 = v24;
              __int16 v43 = 2114;
              id v44 = v18;
              _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "accountID is nil or empty in fetchRecordZoneChangesForAccountZoneIDs %{public}@, accountID: %{public}@", buf, 0x16u);
            }
            if (v18) {
              goto LABEL_15;
            }
LABEL_16:
            id v22 = +[REMLog cloudkit];
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              long long v23 = [v15 ic_loggingDescription];
              *(_DWORD *)long long buf = 138543362;
              id v42 = v23;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Waiting for previous fetch zone changes operation to finish %{public}@", buf, 0xCu);
            }
            [v29 addDependency:v15];
          }
        }
        uint64_t v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v30 objects:v45 count:16];
    }
    while (v11);
  }

  long long v25 = [*(id *)(a1 + 40) operationQueue];
  [v25 addOperation:v29];

  [*(id *)(a1 + 40) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
}

void sub_100025828(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSMutableArray array];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v8 = v6;
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) ic_loggingDescription];
        [v7 addObject:v13];

        uint64_t v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v10);
  }

  id v14 = [v7 componentsJoinedByString:@" "];
  [*(id *)(a1 + 32) appendFormat:@" account ID: %@, zone IDs: %@.", v5, v14, (void)v15];
}

id sub_1000259A0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) addOperationsToFetchRecordZoneChangesForAccountZoneIDs:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) cloudSchemaCatchUpSyncContextMap:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

void sub_100025AC8(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  id v3 = *(void **)(a1 + 32);
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_1000260CC;
  v60[3] = &unk_1008AEEC0;
  id v4 = v2;
  id v61 = v4;
  long long v62 = *(_OWORD *)(a1 + 40);
  id v63 = *(id *)(a1 + 56);
  [v3 enumerateKeysAndObjectsUsingBlock:v60];
  id v5 = [*(id *)(a1 + 40) operationQueue];
  [v5 setSuspended:1];

  __int16 v43 = +[NSMutableArray array];
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v6 = v4;
  id v42 = v6;
  id v44 = [v6 countByEnumeratingWithState:&v56 objects:v72 count:16];
  if (v44)
  {
    uint64_t v7 = *(void *)v57;
    id v8 = INDateRelevanceProvider_ptr;
    uint64_t v40 = *(void *)v57;
    uint64_t v41 = a1;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v57 != v7) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v56 + 1) + 8 * (void)v9);
        if ((objc_msgSend(v10, "isFinished", v40, v41) & 1) != 0
          || ([v10 isExecuting] & 1) != 0
          || ([v10 isCancelled] & 1) != 0
          || ([*(id *)(a1 + 40) operationQueue],
              uint64_t v11 = objc_claimAutoreleasedReturnValue(),
              [v11 operations],
              uint64_t v12 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v13 = [v12 containsObject:v10],
              v12,
              v11,
              (v13 & 1) != 0))
        {
          id v14 = [v8[201] cloudkit];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v15 = [v10 isFinished];
            unsigned int v16 = [v10 isExecuting];
            unsigned int v17 = [v10 isCancelled];
            long long v18 = [v10 ic_loggingDescription];
            *(_DWORD *)long long buf = 67109890;
            *(_DWORD *)long long v66 = v15;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = v16;
            id v8 = INDateRelevanceProvider_ptr;
            __int16 v67 = 1024;
            unsigned int v68 = v17;
            __int16 v69 = 2114;
            long long v70 = v18;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not adding operation to queue. isFinished=%d isExecuting=%d isCancelled=%d %{public}@", buf, 0x1Eu);
          }
        }
        else
        {
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          id v19 = [*(id *)(a1 + 40) operationQueue];
          id v20 = [v19 operations];

          id v21 = [v20 countByEnumeratingWithState:&v52 objects:v71 count:16];
          if (v21)
          {
            id v22 = v21;
            uint64_t v23 = *(void *)v53;
            do
            {
              for (i = 0; i != v22; i = (char *)i + 1)
              {
                if (*(void *)v53 != v23) {
                  objc_enumerationMutation(v20);
                }
                long long v25 = *(void **)(*((void *)&v52 + 1) + 8 * i);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  id v26 = v25;
                  if (objc_msgSend(v10, "ic_shouldDependOnCKFetchRecordZoneChangesOperation:", v26))
                  {
                    uint64_t v27 = [v8[201] cloudkit];
                    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
                    {
                      int8x16_t v28 = [v26 ic_loggingDescription];
                      *(_DWORD *)long long buf = 138543362;
                      *(void *)long long v66 = v28;
                      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "fetch record zone changes operation waiting for previous fetch zone changes operation to finish %{public}@", buf, 0xCu);

                      id v8 = INDateRelevanceProvider_ptr;
                    }

                    [v10 addDependency:v26];
                  }
                }
              }
              id v22 = [v20 countByEnumeratingWithState:&v52 objects:v71 count:16];
            }
            while (v22);
          }

          [v43 addObject:v10];
          a1 = v41;
          id v6 = v42;
          uint64_t v7 = v40;
        }
        id v9 = (char *)v9 + 1;
      }
      while (v9 != v44);
      id v29 = [v6 countByEnumeratingWithState:&v56 objects:v72 count:16];
      id v44 = v29;
    }
    while (v29);
  }

  long long v30 = [*(id *)(a1 + 40) operationQueue];
  [v30 addOperations:v43 waitUntilFinished:0];

  [*(id *)(a1 + 40) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
  long long v31 = [*(id *)(a1 + 40) operationQueue];
  [v31 setSuspended:0];

  if (*(void *)(a1 + 64))
  {
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_100026168;
    v49[3] = &unk_1008AE430;
    v49[4] = *(void *)(a1 + 40);
    id v32 = v6;
    id v50 = v32;
    id v51 = *(id *)(a1 + 64);
    long long v33 = +[ICNSBlockOperation blockOperationWithBlock:v49];
    [v33 setName:ICNSBlockOperationNameFetchZoneChangesCompletion];
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v34 = v32;
    id v35 = [v34 countByEnumeratingWithState:&v45 objects:v64 count:16];
    if (v35)
    {
      id v36 = v35;
      uint64_t v37 = *(void *)v46;
      do
      {
        for (j = 0; j != v36; j = (char *)j + 1)
        {
          if (*(void *)v46 != v37) {
            objc_enumerationMutation(v34);
          }
          [v33 addDependency:*(void *)(*((void *)&v45 + 1) + 8 * (void)j)];
        }
        id v36 = [v34 countByEnumeratingWithState:&v45 objects:v64 count:16];
      }
      while (v36);
    }

    uint64_t v39 = [*(id *)(a1 + 40) operationQueue];
    [v39 addOperation:v33];

    [*(id *)(a1 + 40) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
    id v6 = v42;
  }
}

void sub_1000260CC(void *a1, void *a2, void *a3)
{
  id v5 = (void *)a1[4];
  id v6 = (void *)a1[5];
  id v7 = a2;
  id v9 = [a3 allObjects];
  id v8 = [v6 operationsToFetchRecordZoneChangesForZoneIDs:v9 accountID:v7 reason:a1[6] cloudSchemaCatchUpSyncContextMap:a1[7]];

  [v5 addObjectsFromArray:v8];
}

void sub_100026168(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100026220;
  block[3] = &unk_1008AE430;
  id v3 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v5 = v3;
  id v6 = *(id *)(a1 + 48);
  dispatch_async(v2, block);
}

void sub_100026220(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() errorFromOperations:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000266E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100026710(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = [*(id *)(*((void *)&v8 + 1) + 8 * (void)v6) ckUserRecordName];
        if (v7) {
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v7];
        }

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_100026834(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 integerValue];
  uint64_t v27 = [*(id *)(a1 + 32) databaseWithDatabaseScope:v6];
  id v7 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v5 count]];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v30;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v30 != v11) {
          objc_enumerationMutation(v8);
        }
        unsigned __int8 v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        id v14 = [*(id *)(a1 + 40) accountZoneIDsNeedingFetchChanges];
        [v14 ic_removeZoneID:v13 forAccountID:*(void *)(a1 + 48)];

        if (v6 == (id)2)
        {
          id v20 = [(id)objc_opt_class() migrationZoneID];
          unsigned int v21 = [v20 isEqual:v13];

          if (v21)
          {
            unsigned int v17 = +[REMLog cloudkit];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              long long v18 = v17;
              id v19 = "Filtered the current users RemindersMigration zone from being fetched from the private db.";
LABEL_14:
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, v19, buf, 2u);
            }
LABEL_15:

            continue;
          }
        }
        else if (v6 == (id)3)
        {
          unsigned int v15 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
          unsigned int v16 = [v13 ownerName];
          LODWORD(v15) = [v15 containsObject:v16];

          if (v15)
          {
            unsigned int v17 = +[REMLog cloudkit];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              long long v18 = v17;
              id v19 = "Filtered the current users zone from being fetched from the shared db.";
              goto LABEL_14;
            }
            goto LABEL_15;
          }
        }
        id v22 = [*(id *)(a1 + 40) accountZoneIDsFetchingChanges];
        [v22 ic_addZoneID:v13 forAccountID:*(void *)(a1 + 48)];

        [v7 addObject:v13];
      }
      id v10 = [v8 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }
    while (v10);
  }

  uint64_t v23 = *(void **)(a1 + 40);
  id v24 = [v7 copy];
  long long v25 = [v23 operationToFetchRecordZoneChangesForZoneIDs:v24 database:v27 reason:*(void *)(a1 + 56) ignoreServerChangeTokens:*(unsigned __int8 *)(a1 + 88)];

  id v26 = [v25 group];

  if (!v26)
  {
    [v25 setGroup:*(void *)(a1 + 64)];
    [*(id *)(a1 + 64) setQuantity:[*(id *)(a1 + 64) quantity] + 1];
  }
  [*(id *)(a1 + 72) addObject:v25];
}

void sub_100027ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  objc_destroyWeak(v59);
  objc_destroyWeak(v58);
  objc_destroyWeak(v61);
  objc_destroyWeak(v60);
  objc_destroyWeak(location);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose((const void *)(v62 - 160), 8);
  objc_destroyWeak((id *)(v62 - 200));
  _Unwind_Resume(a1);
}

void sub_100027B5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 batchFetchHelper];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100027C38;
  v9[3] = &unk_1008AEF10;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v5;
  long long v8 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v8;
  long long v12 = v8;
  id v7 = v3;
  [v4 addDispatchBlock:v9];
}

void sub_100027C38(uint64_t a1)
{
  if (!(++*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) % *(void *)(a1 + 64)))
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100027D1C;
    v6[3] = &unk_1008ADB40;
    int8x16_t v5 = *(int8x16_t *)(a1 + 32);
    id v2 = (id)v5.i64[0];
    int8x16_t v7 = vextq_s8(v5, v5, 8uLL);
    id v3 = *(id *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    id v8 = v3;
    uint64_t v9 = v4;
    [v2 performBlockAndWait:v6];
  }
}

void sub_100027D1C(uint64_t a1)
{
  [*(id *)(a1 + 32) _performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:*(void *)(a1 + 40) fetchHasFullyCompleted:0 accountID:*(void *)(a1 + 48)];
  [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(a1 + 40) shouldTakeServerAsTruth:1 logDescription:@"record changed"];
  [*(id *)(a1 + 40) reset];
  id v2 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v2 setSaveCount:[v2 saveCount] + 1];

  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  id v4 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v4 setProcessedRecordCount:v3];
}

void sub_100027DD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if (*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == -1.0) {
    *(CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  }
  uint64_t v9 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v9 setFetchedRecordCount:[v9 fetchedRecordCount] + 1];

  id v10 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  [v10 fetchRecordZoneChangesOperation:WeakRetained recordWasChangedWithRecordID:v12 record:v7 error:v8 context:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100027ED4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == -1.0) {
    *(CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  }
  id v6 = [*(id *)(a1 + 32) lastSyncMetrics];
  [v6 setDeletedRecordsCount:[v6 deletedRecordsCount] + 1];

  id v7 = *(void **)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  [v7 fetchRecordZoneChangesOperation:WeakRetained recordWasDeletedWithRecordID:v9 recordType:v5 context:*(void *)(a1 + 40)];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100027FB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) == -1.0) {
    *(CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  }
  id v7 = [*(id *)(a1 + 32) batchFetchHelper];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000280F0;
  v13[3] = &unk_1008ADD00;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(void **)(a1 + 48);
  id v14 = v8;
  uint64_t v15 = v9;
  id v16 = v10;
  [v7 addDispatchBlock:v13];
  uint64_t v11 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  [v11 fetchRecordZoneChangesOperation:WeakRetained zoneID:v5 accountID:*(void *)(a1 + 48) changeTokenUpdated:v6 batchFetchHelper:v7];
}

void sub_1000280F0(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000281A4;
  v4[3] = &unk_1008ADD00;
  int8x16_t v3 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v3.i64[0];
  int8x16_t v5 = vextq_s8(v3, v3, 8uLL);
  id v6 = *(id *)(a1 + 48);
  [v2 performBlockAndWait:v4];
}

id sub_1000281A4(uint64_t a1)
{
  [*(id *)(a1 + 32) _performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:*(void *)(a1 + 40) fetchHasFullyCompleted:0 accountID:*(void *)(a1 + 48)];
  id v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 saveAndFaultIfFailWithContext:v3 shouldTakeServerAsTruth:1 logDescription:@"zone change token updated"];
}

void sub_1000281FC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a6;
  if (*(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == -1.0) {
    *(CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  }
  id v12 = [*(id *)(a1 + 32) batchFetchHelper];
  [v12 flush];
  unsigned int v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472;
  id v19 = sub_100028338;
  id v20 = &unk_1008ADC88;
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v21 = v13;
  uint64_t v22 = v14;
  [v12 addDispatchBlock:&v17];
  uint64_t v15 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  [v15 fetchRecordZoneChangesOperation:WeakRetained v9 v10 v12 v11 v17 v18 v19 v20];
}

void sub_100028338(int8x16_t *a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000283C4;
  v2[3] = &unk_1008ADC88;
  int8x16_t v1 = a1[2];
  int8x16_t v3 = vextq_s8(v1, v1, 8uLL);
  [(id)v1.i64[0] performBlockAndWait:v2];
}

id sub_1000283C4(uint64_t a1)
{
  id v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 saveAndFaultIfFailWithContext:v3 shouldTakeServerAsTruth:1 logDescription:@"record zone fetch completion"];
}

void sub_10002840C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) == -1.0) {
    *(CFAbsoluteTime *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = CFAbsoluteTimeGetCurrent();
  }
  id v4 = [*(id *)(a1 + 32) batchFetchHelper];
  [v4 flush];
  int8x16_t v5 = [*(id *)(a1 + 40) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100028634;
  block[3] = &unk_1008ADD00;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = *(void **)(a1 + 48);
  id v19 = v6;
  uint64_t v20 = v7;
  id v21 = v8;
  dispatch_async(v5, block);

  id v9 = *(void **)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  [v9 fetchRecordZoneChangesOperationDidComplete:WeakRetained error:v3];

  double Current = CFAbsoluteTimeGetCurrent();
  id v12 = +[REMLog cloudkit];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    id v13 = objc_loadWeakRetained((id *)(a1 + 72));
    uint64_t v14 = [v13 ic_loggingDescription];
    uint64_t v15 = *(void *)(a1 + 56);
    double v16 = Current - *(double *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    uint64_t v17 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138544386;
    uint64_t v23 = v14;
    __int16 v24 = 2114;
    long long v25 = v4;
    __int16 v26 = 2048;
    double v27 = v16;
    __int16 v28 = 2114;
    uint64_t v29 = v17;
    __int16 v30 = 2114;
    uint64_t v31 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Fetch changes operation %{public}@ with %{public}@ took %f s {accountID: %{public}@, syncReason: %{public}@}", buf, 0x34u);
  }
}

void sub_100028634(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000286E8;
  v4[3] = &unk_1008ADD00;
  int8x16_t v3 = *(int8x16_t *)(a1 + 32);
  id v2 = (id)v3.i64[0];
  int8x16_t v5 = vextq_s8(v3, v3, 8uLL);
  id v6 = *(id *)(a1 + 48);
  [v2 performBlockAndWait:v4];
}

id sub_1000286E8(uint64_t a1)
{
  [*(id *)(a1 + 32) _performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:*(void *)(a1 + 40) fetchHasFullyCompleted:1 accountID:*(void *)(a1 + 48)];
  id v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 saveAndFaultIfFailWithContext:v3 shouldTakeServerAsTruth:1 logDescription:@"fetch record zone changes completion"];
}

void sub_10002886C(uint64_t a1)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = (objc_class *)objc_opt_class();
  int8x16_t v5 = NSStringFromClass(v4);
  [v3 incrementOrClearRetryCountForOperationType:v5 error:*(void *)(v2 + 8)];

  id v6 = *(void **)(v2 - 8);
  uint64_t v7 = [*(id *)v2 database];
  id v8 = [v6 accountIDForDatabase:v7];

  if (![v8 length])
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_FAULT)) {
      sub_10074C38C();
    }
  }
  id v10 = *(void **)(a1 + 48);
  if (v10)
  {
    id v11 = [v10 code];
    switch((unint64_t)v11)
    {
      case 0x14uLL:
        goto LABEL_13;
      case 0x15uLL:
        id v12 = +[REMLog cloudkit];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v41 = [*(id *)(a1 + 56) ic_loggingDescription];
          id v42 = [[*(id *)(a1 + 40) ic_loggingDescription];
          *(_DWORD *)long long buf = 138543874;
          long long v48 = v41;
          __int16 v49 = 2114;
          id v50 = v42;
          __int16 v51 = 2114;
          long long v52 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Server change token expired for zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);
        }
        uint64_t v13 = *(void *)(a1 + 56);
        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v15 = [*(id *)(a1 + 40) database];
        [v14 deleteServerChangeTokenForRecordZoneID:v13 databaseScope:[v15 databaseScope] accountID:v8];

        goto LABEL_19;
      case 0x16uLL:
      case 0x17uLL:
      case 0x18uLL:
      case 0x19uLL:
      case 0x1BuLL:
        goto LABEL_16;
      case 0x1AuLL:
        [*(id *)(a1 + 32) receivedZoneNotFound:*(void *)(a1 + 56) operation:*(void *)(a1 + 40)];
        goto LABEL_25;
      case 0x1CuLL:
        __int16 v26 = +[REMLog cloudkit];
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          __int16 v43 = [[*(id *)(a1 + 56) ic_loggingDescription];
          id v44 = [[*(id *)(a1 + 40) ic_loggingDescription];
          *(_DWORD *)long long buf = 138543874;
          long long v48 = v43;
          __int16 v49 = 2114;
          id v50 = v44;
          __int16 v51 = 2114;
          long long v52 = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "User deleted zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);
        }
        uint64_t v27 = *(void *)(a1 + 56);
        __int16 v28 = *(void **)(a1 + 32);
        uint64_t v29 = [*(id *)(a1 + 40) database];
        [v28 deleteServerChangeTokenForRecordZoneID:v27 databaseScope:[v29 databaseScope] accountID:v8];

        double v16 = [*(id *)(a1 + 32) cloudContextDelegate];
        [v16 cloudContext:*(void *)(a1 + 32) userDidDeleteRecordZoneWithID:*(void *)(a1 + 56) accountID:v8];
        goto LABEL_24;
      default:
        if (v11 == (id)3)
        {
LABEL_13:
          id v19 = +[REMLog cloudkit];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = [[*(id *)(a1 + 56) ic_loggingDescription];
            id v21 = [[*(id *)(a1 + 40) ic_loggingDescription];
            uint64_t v22 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138544130;
            long long v48 = v20;
            __int16 v49 = 2114;
            id v50 = v21;
            __int16 v51 = 2114;
            long long v52 = v8;
            __int16 v53 = 2114;
            uint64_t v54 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Non-fatal error fetching zone changes for zone %{public}@ %{public}@ in account ID %{public}@: %{public}@", buf, 0x2Au);
          }
          int v23 = 0;
          char v24 = 1;
        }
        else
        {
LABEL_16:
          long long v25 = +[REMLog cloudkit];
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            id v38 = [*(id *)(a1 + 56) ic_loggingDescription];
            uint64_t v39 = [[*(id *)(a1 + 40) ic_loggingDescription];
            uint64_t v40 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138544130;
            long long v48 = v38;
            __int16 v49 = 2114;
            id v50 = v39;
            __int16 v51 = 2114;
            long long v52 = v8;
            __int16 v53 = 2114;
            uint64_t v54 = v40;
            _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Error fetching zone changes %{public}@ %{public}@ in account ID %{public}@: %{public}@", buf, 0x2Au);
          }
LABEL_19:
          char v24 = 0;
          int v23 = 1;
        }
        break;
    }
  }
  else
  {
    double v16 = +[REMLog cloudkit];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = [[*(id *)(a1 + 56) ic_loggingDescription];
      uint64_t v18 = [[*(id *)(a1 + 40) ic_loggingDescription];
      *(_DWORD *)long long buf = 138543874;
      long long v48 = v17;
      __int16 v49 = 2114;
      id v50 = v18;
      __int16 v51 = 2114;
      long long v52 = v8;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Fetched changes for record zone %{public}@ %{public}@ in account ID %{public}@", buf, 0x20u);
    }
LABEL_24:

LABEL_25:
    char v24 = 0;
    int v23 = 0;
  }
  __int16 v30 = [*(id *)(a1 + 32) accountZoneIDsFetchingChanges];
  [v30 ic_removeZoneID:*(void *)(a1 + 56) forAccountID:v8];

  if ((v24 & 1) != 0 || v23)
  {
    uint64_t v31 = [*(id *)(a1 + 56) zoneName];
    unsigned __int8 v32 = [v31 isEqualToString:CKRecordZoneDefaultName];

    if ((v32 & 1) == 0)
    {
      long long v33 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
      [v33 ic_addZoneID:*(void *)(a1 + 56) forAccountID:v8];

      if (v23) {
        [*(id *)(a1 + 32) startRetryTimerIfNecessaryWithError:*(void *)(a1 + 48)];
      }
    }
  }
  [*(id *)(a1 + 32) saveZoneFetchState];
  uint64_t v34 = *(void *)(a1 + 64);
  if (v34)
  {
    uint64_t v35 = *(void *)(a1 + 56);
    id v36 = *(void **)(a1 + 32);
    uint64_t v37 = [*(id *)(a1 + 40) database];
    [v36 saveServerChangeToken:v34 recordZoneID:v35 databaseScope:[v37 databaseScope] accountID:v8];
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100028EC4;
  block[3] = &unk_1008ADA80;
  id v46 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_100028EC4(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"ICCloudContextFetchRecordChangeOperationDidFinishNotification" object:*(void *)(a1 + 32)];
}

void sub_100028FFC(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 40) database];
  int8x16_t v5 = [v3 accountIDForDatabase:v4];

  if (![v5 length])
  {
    id v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_10074C418();
    }
  }
  uint64_t v7 = *(void **)(a1 + 48);
  if (!v7)
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*v2 ic_loggingDescription];
      *(_DWORD *)long long buf = 138543618;
      unsigned __int8 v32 = v5;
      __int16 v33 = 2114;
      uint64_t v34 = v10;
      id v11 = "Fetched zone changes in account ID %{public}@: %{public}@";
      goto LABEL_13;
    }
LABEL_17:
    int v15 = 0;
    goto LABEL_18;
  }
  id v8 = [v7 code];
  if (v8 == (id)20 || v8 == (id)3)
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 40) ic_loggingDescription];
      uint64_t v14 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 138543874;
      unsigned __int8 v32 = v5;
      __int16 v33 = 2114;
      uint64_t v34 = v10;
      __int16 v35 = 2114;
      uint64_t v36 = v14;
      id v11 = "Non-fatal error fetching zone changes in account ID %{public}@: %{public}@: %{public}@";
      id v12 = v9;
      uint32_t v13 = 32;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  if (v8 == (id)2)
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*v2 ic_loggingDescription];
      *(_DWORD *)long long buf = 138543618;
      unsigned __int8 v32 = v5;
      __int16 v33 = 2114;
      uint64_t v34 = v10;
      id v11 = "Fetch changes operation had partial failure in account ID %{public}@: %{public}@";
LABEL_13:
      id v12 = v9;
      uint32_t v13 = 22;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);

      goto LABEL_17;
    }
    goto LABEL_17;
  }
  id v9 = +[REMLog cloudkit];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    char v24 = [[*(id *)(a1 + 40) ic_loggingDescription];
    uint64_t v25 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    unsigned __int8 v32 = v5;
    __int16 v33 = 2114;
    uint64_t v34 = v24;
    __int16 v35 = 2114;
    uint64_t v36 = v25;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Error fetching zone changes in account ID %{public}@: %{public}@: %{public}@", buf, 0x20u);
  }
  int v15 = 1;
LABEL_18:

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  double v16 = [*v2 recordZoneIDs];
  id v17 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v27;
    do
    {
      for (i = 0; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v27 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        uint64_t v22 = [*(id *)(a1 + 32) accountZoneIDsFetchingChanges];
        [v22 ic_removeZoneID:v21 forAccountID:v5];

        if (v15)
        {
          int v23 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
          [v23 ic_addZoneID:v21 forAccountID:v5];
        }
      }
      id v18 = [v16 countByEnumeratingWithState:&v26 objects:v30 count:16];
    }
    while (v18);
  }

  [*(id *)(a1 + 32) saveZoneFetchState];
  if (v15) {
    [*(id *)(a1 + 32) startRetryTimerIfNecessaryWithError:*(void *)(a1 + 48)];
  }
}

void sub_100029814(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000298E0;
  v5[3] = &unk_1008AE520;
  id v2 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  id v8 = v3;
  uint64_t v9 = v4;
  id v10 = *(id *)(a1 + 32);
  [v2 performBlockAndWait:v5];
}

void sub_1000298E0(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [*(id *)(a1 + 40) ic_loggingDescription];
    int8x16_t v5 = [*(id *)(a1 + 48) ic_shortLoggingDescription];
    int v9 = 138543874;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    id v12 = v4;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Record changed {accountID: %{public}@, record: %@, operation: %{public}@}", (uint8_t *)&v9, 0x20u);
  }
  if (([*(id *)(a1 + 56) _isCloudKitAccountAvailableWithManagedObjectContext:*(void *)(a1 + 64) requireActive:0] & 1) == 0)
  {
    id v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10074C530(a1);
    }
    goto LABEL_8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [*(id *)(a1 + 56) didFetchShare:*(void *)(a1 + 40) accountID:*(void *)(a1 + 32) context:*(void *)(a1 + 64)];
    return;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    id v8 = [*(id *)(a1 + 56) existingCloudObjectForRecord:*(void *)(a1 + 40) accountID:v7 context:*(void *)(a1 + 64)];
    id v6 = v8;
    if (v8) {
      [v8 objectWasFetchedFromCloudWithRecord:*(void *)(a1 + 40) accountID:*(void *)(a1 + 32)];
    }
    else {

    }
LABEL_8:
  }
}

void sub_100029D84(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100029E38;
  v3[3] = &unk_1008ADD00;
  id v2 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  [v2 performBlockAndWait:v3];
}

void sub_100029E38(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [[*(id *)(a1 + 40) ic_loggingDescription];
    id v5 = [*(id *)(a1 + 48) ic_shortLoggingDescription];
    int v6 = 138543874;
    uint64_t v7 = v3;
    __int16 v8 = 2114;
    int v9 = v4;
    __int16 v10 = 2114;
    __int16 v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Share was deleted in accountID %{public}@: %{public}@ %{public}@", (uint8_t *)&v6, 0x20u);
  }
}

void sub_100029F28(uint64_t a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002A004;
  v6[3] = &unk_1008AF028;
  id v2 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  id v5 = *(void **)(a1 + 72);
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v12 = *(id *)(a1 + 32);
  [v2 performBlockAndWait:v6];
}

void sub_10002A004(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = [[*(id *)(a1 + 40) ic_loggingDescription];
    id v5 = [*(id *)(a1 + 48) ic_shortLoggingDescription];
    int v15 = 138543874;
    uint64_t v16 = v3;
    __int16 v17 = 2114;
    id v18 = v4;
    __int16 v19 = 2114;
    uint64_t v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Record was deleted in accountID %{public}@: %{public}@ %{public}@", (uint8_t *)&v15, 0x20u);
  }
  int v6 = [*(id *)(a1 + 56) existingCloudObjectForRecordID:*(void *)(a1 + 40) recordType:*(void *)(a1 + 64) accountID:*(void *)(a1 + 32) context:*(void *)(a1 + 72)];
  if (!v6)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = [[*(id *)(a1 + 40) ic_loggingDescription];
      uint64_t v10 = [*(id *)(a1 + 48) ic_shortLoggingDescription];
      int v15 = 138543874;
      uint64_t v16 = v8;
      __int16 v17 = 2114;
      id v18 = v9;
      __int16 v19 = 2114;
      uint64_t v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Record was deleted but the cloud object no longer exists in our database for fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}", (uint8_t *)&v15, 0x20u);
    }
  }
  id v11 = [v6 ckZoneOwnerName];
  if (!v11) {
    id v11 = CKCurrentUserDefaultName;
  }
  id v12 = [*(id *)(a1 + 40) zoneID];
  __int16 v13 = [v12 ownerName];
  unsigned int v14 = [(NSString *)v11 isEqualToString:v13];

  if (v14) {
    [v6 objectWasDeletedFromCloudByAnotherDevice];
  }
}

void sub_10002A32C(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = [[*(id *)(a1 + 32) ic_loggingDescription];
    uint64_t v4 = [[*(id *)(a1 + 40) ic_loggingDescription];
    id v5 = [*(id *)(a1 + 48) ic_loggingDescription];
    int v10 = 138543874;
    id v11 = v3;
    __int16 v12 = 2114;
    __int16 v13 = v4;
    __int16 v14 = 2114;
    int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Zone change token updated %{public}@ %{public}@ %{public}@", (uint8_t *)&v10, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(a1 + 56);
  id v9 = [*(id *)(a1 + 48) database];
  [v8 saveServerChangeToken:v6 forRecordZoneID:v7 databaseScope:[v9 databaseScope] accountID:*(void *)(a1 + 64)];
}

id sub_10002A8A8(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Polling timer fired", v4, 2u);
  }

  return [*(id *)(a1 + 32) syncWithReason:@"Poll" discretionary:1 completionHandler:0];
}

void sub_10002AAD4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[REMLog cloudkit];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_10074C6B8();
  }

  uint64_t v8 = [v6 privateCloudDatabase];

  if (v8)
  {
    id v9 = *(void **)(a1 + 32);
    int v10 = [v6 privateCloudDatabase];
    [v9 addObject:v10];
  }
  id v11 = [v6 sharedCloudDatabase];

  if (v11)
  {
    __int16 v12 = *(void **)(a1 + 32);
    __int16 v13 = [v6 sharedCloudDatabase];
    [v12 addObject:v13];
  }
}

id sub_10002ABCC(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchDatabaseChangesForDatabases:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) cloudSchemaCatchUpSyncContextMap:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
}

void sub_10002B0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_10002B0EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) processingQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10002B1A8;
    v5[3] = &unk_1008ADB18;
    uint64_t v7 = *(void *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

id sub_10002B1A8(uint64_t a1)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:*(void *)(a1 + 32)];
}

void sub_10002B1B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10002B26C;
  block[3] = &unk_1008AE1B0;
  void block[4] = *(void *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  dispatch_async(v2, block);
}

void sub_10002B26C(uint64_t a1)
{
  id v2 = [(id)objc_opt_class() errorFromErrors:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10002B91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *a11, id *a12, id *a13, id *location, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,id a58)
{
}

void sub_10002B98C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  long long v4 = (id *)(a1 + 48);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [v3 fetchDatabaseChangesOperation:WeakRetained recordZoneWithIDChanged:v5 accountID:*(void *)(a1 + 40)];
}

void sub_10002BA04(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  long long v4 = (id *)(a1 + 48);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [v3 fetchDatabaseChangesOperation:WeakRetained recordZoneWithIDWasDeleted:v5 accountID:*(void *)(a1 + 40)];
}

void sub_10002BA7C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  long long v4 = (id *)(a1 + 48);
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained(v4);
  [v3 fetchDatabaseChangesOperation:WeakRetained changeTokenUpdated:v5 accountID:*(void *)(a1 + 40)];
}

void sub_10002BAF4(void *a1, void *a2, uint64_t a3, void *a4)
{
  long long v6 = (void *)a1[4];
  uint64_t v7 = (id *)(a1 + 7);
  id v8 = a4;
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained(v7);
  [v6 fetchDatabaseChangesOperation:WeakRetained finishedWithServerChangeToken:v9 accountID:a1[5] error:v8 completionHandler:a1[6]];
}

void sub_10002BC88(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    long long v4 = [[*(id *)(a1 + 40) ic_loggingDescription];
    id v5 = [*(id *)(a1 + 48) ic_loggingDescription];
    int v9 = 138543874;
    uint64_t v10 = v3;
    __int16 v11 = 2114;
    __int16 v12 = v4;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Zone changed for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v9, 0x20u);
  }
  long long v6 = [*(id *)(a1 + 40) zoneName];
  unsigned __int8 v7 = [v6 isEqualToString:CKRecordZoneDefaultName];

  if ((v7 & 1) == 0)
  {
    id v8 = [*(id *)(a1 + 56) accountZoneIDsNeedingFetchChanges];
    [v8 ic_addZoneID:*(void *)(a1 + 40) forAccountID:*(void *)(a1 + 32)];

    [*(id *)(a1 + 56) saveZoneFetchState];
  }
}

void sub_10002BF44(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) ownerName];
  uint64_t v5 = +[NSPredicate predicateWithFormat:@"ckZoneOwnerName == %@", v4];

  __int16 v30 = (void *)v5;
  uint64_t v31 = v3;
  long long v6 = +[REMCDObject ic_objectsMatchingPredicate:v5 context:v3];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v33 objects:v45 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v34;
    uint64_t v10 = INDateRelevanceProvider_ptr;
    do
    {
      __int16 v11 = 0;
      id v32 = v8;
      do
      {
        if (*(void *)v34 != v9) {
          objc_enumerationMutation(v6);
        }
        __int16 v12 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v11);
        __int16 v13 = [v12 recordID];
        __int16 v14 = [v13 zoneID];
        unsigned int v15 = [v14 isEqual:*(void *)(a1 + 32)];

        uint64_t v16 = [v10[201] cloudkit];
        BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        if (v15)
        {
          if (v17)
          {
            id v18 = [v12 shortLoggingDescription];
            __int16 v19 = *(void **)(a1 + 32);
            uint64_t v20 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138412802;
            id v38 = v18;
            __int16 v39 = 2114;
            uint64_t v40 = v19;
            __int16 v41 = 2114;
            uint64_t v42 = v20;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Deleting shared %@ for zoneID %{public}@, accountID %{public}@", buf, 0x20u);
          }
          [v12 objectWasDeletedFromCloudByAnotherDevice];
        }
        else
        {
          if (v17)
          {
            uint64_t v21 = [v12 shortLoggingDescription];
            uint64_t v22 = [v12 recordID];
            int v23 = [v22 zoneID];
            [v23 ic_loggingDescription];
            uint64_t v24 = v9;
            uint64_t v25 = v10;
            v27 = long long v26 = v6;
            uint64_t v28 = *(void *)(a1 + 32);
            uint64_t v29 = *(void *)(a1 + 40);
            *(_DWORD *)long long buf = 138413058;
            id v38 = v21;
            __int16 v39 = 2114;
            uint64_t v40 = v27;
            __int16 v41 = 2114;
            uint64_t v42 = v28;
            __int16 v43 = 2114;
            uint64_t v44 = v29;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Not deleting shared %@ in wrong zone %{public}@ for zone ID %{public}@, accountID %{public}@", buf, 0x2Au);

            long long v6 = v26;
            uint64_t v10 = v25;
            uint64_t v9 = v24;
            id v8 = v32;
          }
        }
        __int16 v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      id v8 = [v6 countByEnumeratingWithState:&v33 objects:v45 count:16];
    }
    while (v8);
  }
  [(id)objc_opt_class() saveAndFaultIfFailWithContext:v31 shouldTakeServerAsTruth:1 logDescription:@"deleting shared zone"];
}

void sub_10002C358(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    long long v4 = [[*(id *)(a1 + 40) ic_loggingDescription];
    uint64_t v5 = [*(id *)(a1 + 48) ic_loggingDescription];
    int v20 = 138543874;
    uint64_t v21 = v3;
    __int16 v22 = 2114;
    int v23 = v4;
    __int16 v24 = 2114;
    uint64_t v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Zone was deleted for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v20, 0x20u);
  }
  long long v6 = [*(id *)(a1 + 48) database];
  if ([v6 databaseScope] == (id)3)
  {
    id v7 = [*(id *)(a1 + 40) ownerName];
    unsigned int v8 = [v7 isEqualToString:CKCurrentUserDefaultName];

    if (v8)
    {
      uint64_t v9 = +[REMLog cloudkit];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = [[*(id *)(a1 + 40) ic_loggingDescription];
        __int16 v11 = [[*(id *)(a1 + 48) ic_loggingDescription];
        int v20 = 138543618;
        uint64_t v21 = v10;
        __int16 v22 = 2114;
        int v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Callback for operation in shared database says private zone was deleted %{public}@: %{public}@", (uint8_t *)&v20, 0x16u);
      }
      return;
    }
  }
  else
  {
  }
  if (objc_msgSend(*(id *)(a1 + 40), "ic_isOwnedByCurrentUser"))
  {
    __int16 v12 = [*(id *)(a1 + 40) zoneName];
    unsigned __int8 v13 = [v12 isEqualToString:CKRecordZoneDefaultName];

    if ((v13 & 1) == 0)
    {
      __int16 v14 = [*(id *)(a1 + 56) accountZoneIDsNeedingFetchChanges];
      [v14 ic_addZoneID:*(void *)(a1 + 40) forAccountID:*(void *)(a1 + 32)];

      [*(id *)(a1 + 56) saveZoneFetchState];
    }
  }
  else
  {
    unsigned int v15 = [*(id *)(a1 + 56) cloudContextDelegate];
    [v15 cloudContext:*(void *)(a1 + 56) sharedZoneWasDeleted:*(void *)(a1 + 40) accountID:*(void *)(a1 + 32)];

    [*(id *)(a1 + 56) sharedZoneWasDeleted:*(void *)(a1 + 40) accountID:*(void *)(a1 + 32)];
    uint64_t v16 = [*(id *)(a1 + 56) accountZoneIDsNeedingFetchChanges];
    [v16 ic_removeZoneID:*(void *)(a1 + 40) forAccountID:*(void *)(a1 + 32)];

    [*(id *)(a1 + 56) saveZoneFetchState];
    BOOL v17 = *(void **)(a1 + 56);
    uint64_t v18 = *(void *)(a1 + 40);
    __int16 v19 = [*(id *)(a1 + 48) database];
    [v17 deleteServerChangeTokenForRecordZoneID:v18 databaseScope:[v19 databaseScope] accountID:*(void *)(a1 + 32)];
  }
}

void sub_10002C70C(uint64_t a1)
{
  id v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    long long v4 = [*(id *)(a1 + 40) ic_loggingDescription];
    uint64_t v5 = [*(id *)(a1 + 48) ic_loggingDescription];
    int v9 = 138543874;
    uint64_t v10 = v3;
    __int16 v11 = 2114;
    __int16 v12 = v4;
    __int16 v13 = 2114;
    __int16 v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Database change token updated for account %{public}@, %{public}@ %{public}@", (uint8_t *)&v9, 0x20u);
  }
  long long v6 = *(void **)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned int v8 = [*(id *)(a1 + 48) database];
  [v6 saveServerChangeToken:v7 forRecordZoneID:0 databaseScope:[v8 databaseScope] accountID:*(void *)(a1 + 32)];
}

void sub_10002C984(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void **)(a1 + 56);
    if (v3)
    {
      if ([v3 code] == (id)21)
      {
        long long v4 = +[REMLog cloudkit];
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          sub_10074C95C(v2, a1);
        }

        uint64_t v5 = *(void **)(a1 + 64);
        long long v6 = [*(id *)(a1 + 48) database];
        [v5 deleteServerChangeTokenForChangedZonesInDatabase:v6 accountID:*(void *)(a1 + 32)];
LABEL_7:
        int v7 = 1;
LABEL_23:

LABEL_24:
        BOOL v17 = [*(id *)(a1 + 48) database];
        [v17 databaseScope];
        uint64_t v18 = CKDatabaseScopeString();

        __int16 v19 = [*(id *)(a1 + 64) retryCountFetchDatabaseChangesOperationTypeForAccountID:*(void *)(a1 + 32) dataScopeString:v18];
        int v20 = [*(id *)(a1 + 64) retryCountsByOperationType];
        uint64_t v21 = [v20 objectForKeyedSubscript:v19];
        __int16 v22 = (void *)v21;
        int v23 = &off_1008D7198;
        if (v21) {
          int v23 = (_UNKNOWN **)v21;
        }
        __int16 v24 = v23;

        uint64_t v25 = +[ICCloudConfiguration sharedConfiguration];
        id v26 = [v25 fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount];
        signed int v27 = [v24 intValue];

        if ((unint64_t)v26 <= v27)
        {
          uint64_t v28 = +[REMLog cloudkit];
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
            sub_10074C8E0();
          }

          int v7 = 0;
        }
        uint64_t v29 = [*(id *)(a1 + 64) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
        id v30 = [v29 objectForKeyedSubscript:*(void *)(a1 + 32)];

        if (v7)
        {
          if (!v30)
          {
            id v30 = [objc_alloc((Class)NSMutableSet) initWithCapacity:3];
            uint64_t v31 = [*(id *)(a1 + 64) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
            [v31 setObject:v30 forKeyedSubscript:*(void *)(a1 + 32)];
          }
          [v30 addObject:v18];
          [*(id *)(a1 + 64) incrementRetryCountForOperationType:v19];
          [*(id *)(a1 + 64) startRetryTimerIfNecessaryWithError:*(void *)(a1 + 56)];
        }
        else
        {
          [v30 removeObject:v18];
          if (![v30 count])
          {
            id v32 = [*(id *)(a1 + 64) databaseScopeStringsNeedingRetryFetchChangesByAccountID];
            [v32 removeObjectForKey:*(void *)(a1 + 32)];
          }
          [*(id *)(a1 + 64) clearRetryCountForOperationType:v19];
        }
        if (*(void *)(a1 + 56))
        {
          long long v33 = +[REMLog cloudkit];
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
            sub_10074C854(a1 + 48, v33);
          }

          long long v34 = [*(id *)(a1 + 64) operationQueue];
          id v35 = [v34 iterativelyCancelDependentOperations:*(void *)(a1 + 48)];
        }
        uint64_t v36 = *(void *)(a1 + 72);
        if (v36) {
          (*(void (**)(uint64_t, void))(v36 + 16))(v36, *(void *)(a1 + 56));
        }

        return;
      }
      if ([*(id *)(a1 + 56) code] == (id)20)
      {
        long long v6 = +[REMLog cloudkit];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          sub_10074C9E8(v2, a1);
        }
      }
      else
      {
        id v15 = [*(id *)(a1 + 56) code];
        long long v6 = +[REMLog cloudkit];
        BOOL v16 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
        if (v15 != (id)3)
        {
          if (v16)
          {
            uint64_t v37 = *(void *)(a1 + 32);
            id v38 = [[*(id *)(a1 + 48) ic_loggingDescription];
            uint64_t v39 = *(void *)(a1 + 56);
            int v40 = 138543874;
            uint64_t v41 = v37;
            __int16 v42 = 2114;
            __int16 v43 = v38;
            __int16 v44 = 2112;
            uint64_t v45 = v39;
            _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error fetching database changes for account %{public}@, %{public}@: %@", (uint8_t *)&v40, 0x20u);
          }
          goto LABEL_7;
        }
        if (v16) {
          sub_10074CA74(v2, a1);
        }
      }
    }
    else
    {
      uint64_t v10 = +[REMLog cloudkit];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        __int16 v12 = [[*(id *)(a1 + 48) ic_loggingDescription];
        int v40 = 138543618;
        uint64_t v41 = v11;
        __int16 v42 = 2114;
        __int16 v43 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetched database changes for account %{public}@, %{public}@", (uint8_t *)&v40, 0x16u);
      }
      uint64_t v13 = *(void *)(a1 + 40);
      if (!v13)
      {
        int v7 = 0;
        goto LABEL_24;
      }
      __int16 v14 = *(void **)(a1 + 64);
      long long v6 = [*(id *)(a1 + 48) database];
      [v14 saveServerChangeToken:v13 forChangedZonesInDatabase:v6 accountID:*(void *)(a1 + 32)];
    }
    int v7 = 0;
    goto LABEL_23;
  }
  unsigned int v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
    sub_10074C7B4();
  }

  uint64_t v9 = *(void *)(a1 + 72);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 56));
  }
}

void sub_10002D0AC(id a1)
{
  id v1 = +[NSUserDefaults standardUserDefaults];
  [v1 removeObjectForKey:@"CloudKitZonesNeedingFetchChanges"];
}

void sub_10002D0FC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  long long v6 = [(id)objc_opt_class() zoneIDsFromZoneInfos:v5];

  id v7 = [v6 mutableCopy];
  if ([v7 count])
  {
    unsigned int v8 = [*(id *)(a1 + 32) accountZoneIDsNeedingFetchChanges];
    [v8 setObject:v7 forKeyedSubscript:v9];
  }
}

void sub_10002D3AC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  long long v6 = [(id)objc_opt_class() zoneInfosFromZoneIDs:v5];

  if ([v6 count]) {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_10002D444(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  long long v6 = [(id)objc_opt_class() zoneInfosFromZoneIDs:v5];

  if ([v6 count])
  {
    id v7 = [*(id *)(a1 + 40) objectForKeyedSubscript:v10];
    unsigned int v8 = v7;
    if (v7)
    {
      id v9 = [v7 arrayByAddingObjectsFromArray:v6];
      [*(id *)(a1 + 40) setObject:v9 forKeyedSubscript:v10];
    }
    else
    {
      [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v10];
    }
  }
}

id sub_10002D5AC(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing zone fetch state", v6, 2u);
  }

  uint64_t v3 = +[NSMutableDictionary dictionary];
  [*(id *)(a1 + 32) setAccountZoneIDsNeedingFetchChanges:v3];

  long long v4 = +[NSMutableDictionary dictionary];
  [*(id *)(a1 + 32) setAccountZoneIDsFetchingChanges:v4];

  return [*(id *)(a1 + 32) saveZoneFetchState];
}

void sub_10002DD84(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating subscriptions", buf, 2u);
  }

  [*(id *)(a1 + 32) setNeedsToUpdateSubscriptions:0];
  uint64_t v3 = +[NSMutableSet set];
  *(void *)long long buf = 0;
  long long v48 = buf;
  uint64_t v49 = 0x2020000000;
  char v50 = 0;
  if ([*(id *)(a1 + 32) hasPassedBuddy]
    && ([*(id *)(a1 + 32) isSystemAvailableForSyncing] & 1) != 0)
  {
    long long v4 = [*(id *)(a1 + 32) appleAccountUtilities];
    id v5 = [v4 unsafeUntilSystemReady_allICloudACAccounts];

    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_10002E44C;
    v46[3] = &unk_1008AF1D8;
    v46[4] = buf;
    [v5 enumerateObjectsUsingBlock:v46];
  }
  else
  {
    id v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10074CB00((char)[*(id *)(a1 + 32) hasPassedBuddy], (char)[*(id *)(a1 + 32) isSystemAvailableForSyncing], v56, v5);
    }
  }

  long long v6 = [*(id *)(a1 + 32) containersByAccountID];
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_10002E490;
  v44[3] = &unk_1008AF050;
  id v7 = v3;
  id v45 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v44];

  unsigned int v8 = +[NSMutableArray array];
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_10002E520;
  v40[3] = &unk_1008AF200;
  v40[4] = *(void *)(a1 + 32);
  id v30 = v7;
  id v41 = v30;
  id v29 = v8;
  id v42 = v29;
  id v43 = *(id *)(a1 + 40);
  id v9 = objc_retainBlock(v40);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v10 = [v30 copy];
  id v11 = [v10 countByEnumeratingWithState:&v36 objects:v55 count:16];
  if (v11)
  {
    uint64_t v32 = *(void *)v37;
    id obj = v10;
    do
    {
      id v33 = v11;
      for (i = 0; i != v33; i = (char *)i + 1)
      {
        if (*(void *)v37 != v32) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        __int16 v14 = [[*(id *)(a1 + 32) subscriptionForDatabase:v13, v29];
        id v15 = [*(id *)(a1 + 32) accountIDForDatabase:v13];
        if (![v15 length])
        {
          BOOL v16 = +[REMLog cloudkit];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT))
          {
            uint64_t v28 = [v13 ic_loggingDescription];
            *(_DWORD *)__int16 v51 = 138543618;
            id v52 = v28;
            __int16 v53 = 2114;
            uint64_t v54 = v15;
            _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "accountID is nil or empty in updateSubscriptionsWithCompletionHandler: database %{public}@, accountID: %{public}@", v51, 0x16u);
          }
        }
        if (![v15 length]) {
          goto LABEL_22;
        }
        BOOL v17 = [*(id *)(a1 + 32) subscribedSubscriptionIDsByAccountID];
        uint64_t v18 = [v17 objectForKeyedSubscript:v15];
        __int16 v19 = [v14 subscriptionID];
        unsigned int v20 = [v18 containsObject:v19];

        if (v20)
        {
          uint64_t v21 = +[REMLog cloudkit];
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            [v13 databaseScope];
            CKDatabaseScopeString();
            id v22 = (id)objc_claimAutoreleasedReturnValue();
            int v23 = [v14 subscriptionID];
            *(_DWORD *)__int16 v51 = 138543618;
            id v52 = v22;
            __int16 v53 = 2114;
            uint64_t v54 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Not fetching subscriptions for %{public}@, already subscribed to %{public}@", v51, 0x16u);
          }
          ((void (*)(void *, void *, void))v9[2])(v9, v13, 0);
        }
        else
        {
LABEL_22:
          __int16 v24 = +[REMLog cloudkit];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v25 = [v14 subscriptionID];
            *(_DWORD *)__int16 v51 = 138543362;
            id v52 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Not sure if subscribed to %{public}@", v51, 0xCu);
          }
          id v26 = *(void **)(a1 + 32);
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 3221225472;
          v34[2] = sub_10002E6F8;
          v34[3] = &unk_1008AF228;
          signed int v27 = v9;
          void v34[4] = v13;
          id v35 = v27;
          [v26 saveSubscriptionsForDatabase:v13 completionHandler:v34];
        }
      }
      id v10 = obj;
      id v11 = [obj countByEnumeratingWithState:&v36 objects:v55 count:16];
    }
    while (v11);
  }

  _Block_object_dispose(buf, 8);
}

void sub_10002E3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

id sub_10002E44C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id result = [a2 rem_isEligibleForCloudKitReminders];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10002E490(uint64_t a1, uint64_t a2, void *a3)
{
  long long v4 = *(void **)(a1 + 32);
  id v5 = a3;
  long long v6 = [v5 privateCloudDatabase];
  [v4 addObject:v6];

  id v7 = *(void **)(a1 + 32);
  id v8 = [v5 sharedCloudDatabase];

  [v7 addObject:v8];
}

void sub_10002E520(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] processingQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002E634;
  v12[3] = &unk_1008AED08;
  id v13 = a1[5];
  id v14 = v5;
  id v15 = v6;
  id v8 = a1[6];
  id v9 = a1[4];
  id v16 = v8;
  id v17 = v9;
  id v18 = a1[7];
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v7, v12);
}

void sub_10002E634(uint64_t a1)
{
  [*(id *)(a1 + 32) removeObject:*(void *)(a1 + 40)];
  if (*(void *)(a1 + 48)) {
    [*(id *)(a1 + 56) addObject:];
  }
  if (![*(id *)(a1 + 32) count])
  {
    id v3 = [(id)objc_opt_class() errorFromErrors:*(void *)(a1 + 56)];
    [*(id *)(a1 + 64) setNeedsToUpdateSubscriptions:v3 != 0];
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2) {
      (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
    }
    if (*(void *)(a1 + 48)) {
      [*(id *)(a1 + 64) startRetryTimerIfNecessaryWithError:];
    }
  }
}

uint64_t sub_10002E6F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), a2);
}

void sub_10002E7E8(uint64_t a1)
{
  uint64_t v2 = +[CKFetchSubscriptionsOperation fetchAllSubscriptionsOperation];
  [*(id *)(a1 + 32) configureOperation:v2];
  [v2 setDatabase:*(void *)(a1 + 40)];
  objc_initWeak(&location, v2);
  id v3 = +[REMLog cloudkit];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    long long v4 = [v2 ic_loggingDescription];
    *(_DWORD *)long long buf = 138543362;
    id v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fetching subscriptions %{public}@", buf, 0xCu);
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002E9EC;
  v7[3] = &unk_1008AF250;
  objc_copyWeak(&v10, &location);
  id v5 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v5;
  id v9 = *(id *)(a1 + 48);
  [v2 setFetchSubscriptionCompletionBlock:v7];
  id v6 = [*(id *)(a1 + 32) operationQueue];
  [v6 addOperation:v2];

  [*(id *)(a1 + 32) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
  objc_destroyWeak(&v10);
  objc_destroyWeak(&location);
}

void sub_10002E9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

void sub_10002E9EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = [*(id *)(a1 + 32) processingQueue];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10002EB14;
  v13[3] = &unk_1008AED08;
  id v14 = v5;
  id v15 = WeakRetained;
  id v9 = *(void **)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 32);
  id v17 = v9;
  id v18 = v6;
  id v19 = *(id *)(a1 + 48);
  id v10 = v6;
  id v11 = WeakRetained;
  id v12 = v5;
  dispatch_async(v8, v13);
}

uint64_t sub_10002EB14(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) allValues];
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v23;
    *(void *)&long long v4 = 138543618;
    long long v21 = v4;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v23 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v7);
        id v9 = +[REMLog cloudkit];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [v8 subscriptionID];
          id v11 = [[*(id *)(a1 + 40) ic_loggingDescription];
          *(_DWORD *)long long buf = v21;
          signed int v27 = v10;
          __int16 v28 = 2114;
          id v29 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Fetched subscription %{public}@ %{public}@", buf, 0x16u);
        }
        id v12 = [*(id *)(a1 + 48) accountIDForDatabase:*(void *)(a1 + 56)];
        if ([v12 length])
        {
          id v13 = *(void **)(a1 + 48);
          id v14 = [v8 subscriptionID];
          [v13 addSubscribedSubscriptionIDs:v14 accountID:v12];
        }
        else
        {
          id v14 = +[REMLog cloudkit];
          if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
          {
            id v15 = [*(id *)(a1 + 56) ic_loggingDescription];
            *(_DWORD *)long long buf = v21;
            signed int v27 = v15;
            __int16 v28 = 2114;
            id v29 = v12;
            _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "accountID is nil or empty in fetchSubscriptionsForDatabase: %{public}@, accountID: %{public}@", buf, 0x16u);
          }
        }

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }
    while (v5);
  }

  uint64_t v16 = *(void *)(a1 + 64);
  id v17 = +[REMLog cloudkit];
  id v18 = v17;
  if (v16)
  {
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      sub_10074CB60();
    }
  }
  else if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    id v19 = [*(id *)(a1 + 40) ic_loggingDescription];
    *(_DWORD *)long long buf = 138543362;
    signed int v27 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Fetched subscriptions %{public}@", buf, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 64));
  }
  return result;
}

void sub_10002EEE8(id *a1)
{
  uint64_t v2 = a1 + 4;
  id v3 = a1 + 5;
  long long v4 = [a1[4] subscriptionForDatabase:a1[5]];
  id v5 = [*v2 accountIDForDatabase:*v3];
  if (![v5 length])
  {
    uint64_t v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_10074CBEC();
    }
  }
  if (![v5 length]) {
    goto LABEL_11;
  }
  id v7 = [a1[4] subscribedSubscriptionIDsByAccountID];
  id v8 = [v7 objectForKeyedSubscript:v5];
  id v9 = [v4 subscriptionID];
  unsigned int v10 = [v8 containsObject:v9];

  if (v10)
  {
    id v11 = +[REMLog cloudkit];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      [*v3 databaseScope];
      id v12 = CKDatabaseScopeString();
      id v13 = [v4 subscriptionID];
      *(_DWORD *)long long buf = 138543618;
      long long v36 = v12;
      __int16 v37 = 2114;
      long long v38 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Not saving subscriptions for %{public}@, already subscribed to %{public}@", buf, 0x16u);
    }
    id v14 = (void (**)(id, void))a1[6];
    if (v14) {
      v14[2](v14, 0);
    }
  }
  else
  {
LABEL_11:
    id v15 = objc_alloc((Class)CKModifySubscriptionsOperation);
    long long v34 = v4;
    uint64_t v16 = +[NSArray arrayWithObjects:&v34 count:1];
    id v17 = [v15 initWithSubscriptionsToSave:v16 subscriptionIDsToDelete:0];

    [a1[4] configureOperation:v17];
    [v17 setDatabase:a1[5]];
    objc_initWeak(&location, v17);
    id v18 = objc_alloc_init((Class)CKOperationGroup);
    [v18 setName:@"SaveSubscriptions"];
    id v19 = [v17 subscriptionsToSave];
    [v18 setQuantity:[v19 count]];

    [v18 setExpectedSendSize:1];
    [v18 setExpectedReceiveSize:1];
    [v17 setGroup:v18];
    unsigned int v20 = +[REMLog cloudkit];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      long long v21 = [v4 subscriptionID];
      long long v22 = [v17 ic_loggingDescription];
      *(_DWORD *)long long buf = 138543618;
      long long v36 = v21;
      __int16 v37 = 2114;
      long long v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Saving subscription %{public}@ %{public}@", buf, 0x16u);
    }
    long long v25 = _NSConcreteStackBlock;
    uint64_t v26 = 3221225472;
    signed int v27 = sub_10002F338;
    __int16 v28 = &unk_1008AF278;
    objc_copyWeak(&v32, &location);
    id v23 = a1[5];
    id v29 = a1[4];
    id v30 = v23;
    id v31 = a1[6];
    [v17 setModifySubscriptionsCompletionBlock:&v25];
    long long v24 = [a1[4] operationQueue:v25, v26, v27, v28, v29];
    [v24 addOperation:v17];

    [a1[4] errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
    objc_destroyWeak(&v32);

    objc_destroyWeak(&location);
  }
}

void sub_10002F2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002F338(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v9 = [*(id *)(a1 + 32) processingQueue];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10002F460;
  v15[3] = &unk_1008AED08;
  id v16 = v7;
  id v17 = WeakRetained;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v18 = v6;
  uint64_t v19 = v10;
  id v20 = v11;
  id v21 = *(id *)(a1 + 48);
  id v12 = v6;
  id v13 = WeakRetained;
  id v14 = v7;
  dispatch_async(v9, v15);
}

uint64_t sub_10002F460(uint64_t a1)
{
  id v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v4 = +[REMLog cloudkit];
  id v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074CC7C();
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 40) ic_loggingDescription];
      *(_DWORD *)long long buf = 138543362;
      uint64_t v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Saved subscriptions %{public}@", buf, 0xCu);
    }
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v5 = *(id *)(a1 + 48);
    id v7 = [v5 countByEnumeratingWithState:&v21 objects:v29 count:16];
    if (v7)
    {
      id v8 = v7;
      id v20 = v3;
      uint64_t v9 = *(void *)v22;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v22 != v9) {
            objc_enumerationMutation(v5);
          }
          id v11 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          id v12 = +[REMLog cloudkit];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v13 = [v11 subscriptionID];
            id v14 = [[*(id *)(a1 + 40) ic_loggingDescription];
            *(_DWORD *)long long buf = 138543618;
            uint64_t v26 = v13;
            __int16 v27 = 2114;
            __int16 v28 = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Saved subscription %{public}@ %{public}@", buf, 0x16u);
          }
          id v15 = [*(id *)(a1 + 56) accountIDForDatabase:*(void *)(a1 + 64)];
          if ([v15 length])
          {
            id v16 = *(void **)(a1 + 56);
            id v17 = [v11 subscriptionID];
            [v16 addSubscribedSubscriptionIDs:v17 accountID:v15];
          }
          else
          {
            id v17 = +[REMLog cloudkit];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
            {
              id v18 = [[*(id *)(a1 + 64) ic_loggingDescription];
              *(_DWORD *)long long buf = 138543618;
              uint64_t v26 = v18;
              __int16 v27 = 2114;
              __int16 v28 = v15;
              _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "accountID is nil or empty in saveSubscriptionsForDatabase modifySubscriptionsCompletionBlock %{public}@, accountID: %{public}@", buf, 0x16u);
            }
          }
        }
        id v8 = [v5 countByEnumeratingWithState:&v21 objects:v29 count:16];
      }
      while (v8);
      id v3 = v20;
    }
  }

  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *v3);
  }
  return result;
}

void sub_10002FA84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = [objc_alloc((Class)NSSet) initWithArray:v5];

  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
}

void sub_10002FDE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 allObjects];
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_1000300D0(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  if (!*(void *)(a1 + 32))
  {
    __int16 v27 = +[REMLog cloudkit];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT)) {
      sub_10074CE20();
    }
  }
  id v3 = (id *)(a1 + 40);
  if (([*(id *)(a1 + 40) isDisabled] & 1) == 0
    && ([*v3 isDisabledInternal] & 1) == 0
    && [*v3 supportsCloudKitSyncing]
    && ([*v3 hasPassedBuddy] & 1) != 0)
  {
    long long v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if ([*(id *)(a1 + 40) isInForeground]) {
        CFStringRef v5 = @"Foreground";
      }
      else {
        CFStringRef v5 = @"Background";
      }
      if ([*(id *)(a1 + 40) isInternetReachable]) {
        CFStringRef v6 = @"reachable";
      }
      else {
        CFStringRef v6 = @"not reachable";
      }
      uint64_t v7 = *(void *)(a1 + 32);
      id v8 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
      *(_DWORD *)long long buf = 138544130;
      CFStringRef v40 = v5;
      __int16 v41 = 2114;
      CFStringRef v42 = v6;
      __int16 v43 = 2114;
      uint64_t v44 = v7;
      __int16 v45 = 2114;
      id v46 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating cloud context state. %{public}@ and internet %{public}@. {syncReason: %{public}@, option: %{public}@}", buf, 0x2Au);
    }
    uint64_t v9 = +[DABabysitter sharedBabysitter];
    uint64_t v10 = [v9 tokenByRegisteringAccount:*v3 forOperationWithName:@"CloudKitUpdateCloudContextState"];

    if (!v10)
    {
      if (!isCloudContextSyncReasonUserInitiated(*v2))
      {
        id v16 = +[REMError babySatErrorWithOperationName:@"CloudKitUpdateCloudContextState"];
        CFStringRef v37 = @"identifier";
        CFStringRef v38 = @"CloudKitUpdateCloudContextState";
        long long v22 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
        +[Analytics postEventWithName:@"com.apple.remindd.cloudkit.sync.crashDetected" payload:v22 error:v16 performAutoBugCaptureOnError:1];

        long long v23 = +[REMLog cloudkit];
        if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
          sub_10074CD94((uint64_t)v2, a1 + 40);
        }

        uint64_t v24 = *(void *)(a1 + 56);
        if (v24) {
          (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v16);
        }
        long long v25 = +[REMLog cloudkit];
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", buf, 2u);
        }

        id v26 = self;
        goto LABEL_20;
      }
      id v11 = +[REMLog cloudkit];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_10074CD08((uint64_t)v2, a1 + 40);
      }
    }
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_100030600;
    v33[3] = &unk_1008AF2A0;
    id v36 = *(id *)(a1 + 56);
    id v34 = v10;
    id v35 = *(id *)(a1 + 48);
    id v12 = objc_retainBlock(v33);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    v28[2] = sub_1000306C8;
    v28[3] = &unk_1008AF390;
    uint64_t v13 = *(void *)(a1 + 32);
    id v29 = *(id *)(a1 + 40);
    uint64_t v30 = v13;
    uint64_t v14 = *(void *)(a1 + 64);
    id v31 = v12;
    uint64_t v32 = v14;
    id v15 = v12;
    [v29 updateAccountStatusWithCompletionHandler:v28];

    id v16 = v36;
LABEL_20:

    return;
  }
  id v17 = +[REMLog cloudkit];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = [*v3 readinessLoggingDescription];
    *(_DWORD *)long long buf = 138543362;
    CFStringRef v40 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Not updating cloud context state because it's disabled {%{public}@}", buf, 0xCu);
  }
  uint64_t v19 = *(void *)(a1 + 56);
  if (v19) {
    (*(void (**)(uint64_t, void, void))(v19 + 16))(v19, 0, 0);
  }
  id v20 = +[REMLog cloudkit];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", buf, 2u);
  }

  id v21 = self;
}

void sub_100030600(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v5);
  }
  id v7 = self;
  id v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}", v10, 2u);
  }

  id v9 = self;
}

void sub_1000306C8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) processingQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100030774;
  v4[3] = &unk_1008AF368;
  long long v5 = *(_OWORD *)(a1 + 32);
  id v3 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v2, v4);
}

void sub_100030774(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if (([*(id *)(a1 + 32) isInForeground] & 1) == 0)
  {
    long long v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10074CF18();
    }
    goto LABEL_18;
  }
  if (([*v2 isInternetReachable] & 1) == 0)
  {
    long long v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_10074CEE4();
    }
    goto LABEL_18;
  }
  unsigned __int8 v3 = [*v2 isReadyToSync];
  long long v4 = +[REMLog cloudkit];
  long long v5 = v4;
  if ((v3 & 1) == 0)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074CE54((uint64_t)v2, v5);
    }
LABEL_18:

    id v15 = [*(id *)(a1 + 32) processingSelectorDelayer];
    [v15 cancelPreviousFireRequests];

    id v16 = [*(id *)(a1 + 32) pollingSelectorDelayer];
    [v16 cancelPreviousFireRequests];

    id v17 = +[NSMutableSet set];
    [*(id *)(a1 + 32) setObjectIDsToProcess:v17];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    return;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Syncing enabled after updating account status", buf, 2u);
  }

  if (([*v2 didCheckForLongLivedOperations] & 1) == 0)
  {
    [*v2 setDidCheckForLongLivedOperations:1];
    [*v2 checkForLongLivedOperations];
  }
  if ([*v2 needsToUpdateSubscriptions]) {
    [*v2 updateSubscriptionsWithCompletionHandler:0];
  }
  *(void *)long long buf = 0;
  id v35 = buf;
  uint64_t v36 = 0x2020000000;
  char v37 = 0;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2020000000;
  char v33 = 0;
  id v6 = [*v2 context];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_100030B48;
  v26[3] = &unk_1008AF2C8;
  void v26[4] = *(void *)(a1 + 32);
  id v7 = v6;
  uint64_t v8 = *(void *)(a1 + 40);
  id v27 = v7;
  uint64_t v28 = v8;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v30 = v32;
  uint64_t v31 = v9;
  id v29 = buf;
  [v7 performBlockAndWait:v26];
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_100030F88;
  v21[3] = &unk_1008AF2F0;
  id v11 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v24 = v32;
  uint64_t v25 = v10;
  int8x16_t v22 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  id v23 = v11;
  id v12 = objc_retainBlock(v21);
  uint64_t v13 = v12;
  if (v35[24])
  {
    uint64_t v14 = [*v2 containersByAccountID];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100031224;
    v18[3] = &unk_1008AF340;
    int8x16_t v19 = vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL);
    id v20 = v13;
    [v14 enumerateKeysAndObjectsUsingBlock:v18];
  }
  else
  {
    ((void (*)(void *))v12[2])(v12);
  }

  _Block_object_dispose(v32, 8);
  _Block_object_dispose(buf, 8);
}

void sub_100030B20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100030B48(uint64_t a1)
{
  [*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [v1 countByEnumeratingWithState:&v35 objects:v44 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v36;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v36 != v4) {
          objc_enumerationMutation(v1);
        }
        id v6 = *(void **)(*((void *)&v35 + 1) + 8 * i);
        if ([v6 inactive])
        {
          v43[0] = @"InitWithStoreController";
          v43[1] = @"AccountsDidChange";
          v43[2] = @"CloudKitAccountChanged";
          id v7 = +[NSArray arrayWithObjects:v43 count:3];
          if ([v6 didChooseToMigrate]
            && ([v6 didFinishMigration] & 1) == 0
            && [v7 containsObject:*(void *)(a1 + 48)])
          {
            uint64_t v25 = +[REMLog cloudkit];
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
              sub_10074CF4C(v6, v25);
            }

            *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
            goto LABEL_17;
          }
        }
        else if (![v6 didFinishMigration] {
               || ([v6 ckUserRecordName],
        }
                   uint64_t v8 = objc_claimAutoreleasedReturnValue(),
                   v8,
                   !v8))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
          goto LABEL_17;
        }
      }
      id v3 = [v1 countByEnumeratingWithState:&v35 objects:v44 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_17:

  uint64_t v9 = *(void *)(a1 + 72);
  if (v9 == 1)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v18 = v1;
    id v19 = [v18 countByEnumeratingWithState:&v27 objects:v41 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v28;
      while (2)
      {
        for (j = 0; j != v20; j = (char *)j + 1)
        {
          if (*(void *)v28 != v21) {
            objc_enumerationMutation(v18);
          }
          if (([*(id *)(*((void *)&v27 + 1) + 8 * (void)j) inactive] & 1) == 0)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
            goto LABEL_39;
          }
        }
        id v20 = [v18 countByEnumeratingWithState:&v27 objects:v41 count:16];
        if (v20) {
          continue;
        }
        break;
      }
    }
LABEL_39:

    id v23 = +[REMLog cloudkit];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
      *(_DWORD *)long long buf = 67109120;
      int v40 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: UpdateCloudContextStateSyncOptionForced, shouldSync = %d", buf, 8u);
    }

    if ([*(id *)(a1 + 48) isEqualToString:@"SyncInterface(RemindtoolCloudKitRestart)"])*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1; {
  }
    }
  else if (!v9)
  {
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    id v10 = v1;
    id v11 = [v10 countByEnumeratingWithState:&v31 objects:v42 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v32;
      while (2)
      {
        for (k = 0; k != v12; k = (char *)k + 1)
        {
          if (*(void *)v32 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v31 + 1) + 8 * (void)k);
          if (([v15 inactive] & 1) == 0)
          {
            id v16 = [v15 ckServerChangeTokens];
            id v17 = [v16 count];

            if (!v17)
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
              goto LABEL_44;
            }
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v31 objects:v42 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }
LABEL_44:
  }
}

void sub_100030F88(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    id v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v11 = v3;
      __int16 v12 = 2114;
      uint64_t v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Triggering a sync {syncReason: %{public}@, syncOption: %{public}@}", buf, 0x16u);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    long long v5 = *(void **)(a1 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10003113C;
    v8[3] = &unk_1008AED80;
    void v8[4] = v6;
    id v9 = *(id *)(a1 + 48);
    [v5 syncWithReason:v6 discretionary:0 completionHandler:v8];
  }
  else
  {
    id v7 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v7();
  }
}

void sub_10003113C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543618;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Sync completed {syncReason: %{public}@, error: %@}", (uint8_t *)&v6, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100031224(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    id v12 = v3;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateCloudContextState: Going to fetch user record with accountIdentifier: %{public}@ before sync {syncReason: %{public}@}", buf, 0x16u);
  }

  int v6 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100031374;
  v8[3] = &unk_1008AF318;
  void v8[4] = v6;
  id v9 = v3;
  id v10 = *(id *)(a1 + 48);
  id v7 = v3;
  [v6 operationQueueFetchUserRecordWithAccountID:v7 completionHandler:v8];
}

void sub_100031374(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] processingQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100031478;
  block[3] = &unk_1008AEE98;
  id v11 = v6;
  id v12 = a1[5];
  id v13 = v5;
  id v14 = a1[4];
  id v15 = a1[6];
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_100031478(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[REMLog cloudkit];
  uint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074CFD8();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) ic_loggingDescription];
    int v9 = 138543619;
    uint64_t v10 = v5;
    __int16 v11 = 2113;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "UpdateCloudContextState: Fetched user record with accountIdentifier: %{public}@: %{private}@", (uint8_t *)&v9, 0x16u);
  }
  if (*(void *)(a1 + 48))
  {
    id v7 = [*(id *)(a1 + 56) cloudContextDelegate];
    [v7 cloudContext:*(void *)(a1 + 56) didFetchUserRecord:*(void *)(a1 + 48) accountID:*(void *)(a1 + 40)];
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100031648(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003170C;
  v7[3] = &unk_1008AF408;
  id v8 = a2;
  id v9 = a3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v5 = v9;
  id v6 = v8;
  [v5 fetchAllLongLivedOperationIDsWithCompletionHandler:v7];
}

void sub_10003170C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074D050();
    }
  }
  id v18 = v6;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v12);
        id v14 = (void *)a1[4];
        id v15 = (void *)a1[5];
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        void v19[2] = sub_1000318DC;
        v19[3] = &unk_1008AF3E0;
        void v19[4] = v13;
        id v16 = v14;
        uint64_t v17 = a1[6];
        id v20 = v16;
        uint64_t v21 = v17;
        [v15 fetchLongLivedOperationWithID:v13 completionHandler:v19];

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }
}

void sub_1000318DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074D0C4();
    }
  }
  if ([v5 isFinished])
  {
    id v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = [v5 ic_loggingDescription];
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      long long v35 = v9;
      __int16 v36 = 2114;
      uint64_t v37 = v10;
      uint64_t v11 = "Not adding long-lived operation because it's finished: %{public}@, accountID: %{public}@";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v11, buf, 0x16u);

      goto LABEL_27;
    }
    goto LABEL_27;
  }
  if ([v5 isCancelled])
  {
    id v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = [v5 ic_loggingDescription];
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138543618;
      long long v35 = v9;
      __int16 v36 = 2114;
      uint64_t v37 = v12;
      uint64_t v11 = "Not adding long-lived operation because it's cancelled: %{public}@, accountID: %{public}@";
      goto LABEL_11;
    }
LABEL_27:

    goto LABEL_28;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v28 = v6;
    id v8 = v5;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v27 = a1;
    uint64_t v13 = [*(id *)(a1 + 48) operationQueue];
    id v14 = [v13 operations];

    id v15 = [v14 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v30;
      while (2)
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(void *)v30 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v20 = [v19 operationID];
            uint64_t v21 = [v8 operationID];
            unsigned __int8 v22 = [v20 isEqualToString:v21];

            if (v22)
            {

              goto LABEL_26;
            }
          }
        }
        id v16 = [v14 countByEnumeratingWithState:&v29 objects:v33 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }

    long long v23 = +[REMLog cloudkit];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      long long v24 = [v8 ic_loggingDescription];
      uint64_t v25 = *(void *)(v27 + 40);
      *(_DWORD *)long long buf = 138543618;
      long long v35 = v24;
      __int16 v36 = 2114;
      uint64_t v37 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Adding long-lived operation back to the queue: %{public}@, accountID: %{public}@", buf, 0x16u);
    }
    [*(id *)(v27 + 48) addCallbackBlocksToModifyRecordsOperation:v8 rootRecordIDsByShareID:0];
    id v26 = [*(id *)(v27 + 48) operationQueue];
    [v26 addOperation:v8];

    [*(id *)(v27 + 48) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
LABEL_26:
    id v6 = v28;
    goto LABEL_27;
  }
LABEL_28:
}

void sub_1000320A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) retryCountsByOperationType];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v4 = (void *)v3;
  id v5 = &off_1008D7198;
  if (v3) {
    id v5 = (_UNKNOWN **)v3;
  }
  id v6 = v5;

  id v7 = (char *)[v6 unsignedIntegerValue] + 1;
  id v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    int v12 = 138543874;
    uint64_t v13 = v9;
    __int16 v14 = 1024;
    unsigned int v15 = [v6 unsignedIntegerValue];
    __int16 v16 = 1024;
    int v17 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Incrementing retry count for %{public}@ from %d to %d", (uint8_t *)&v12, 0x18u);
  }

  uint64_t v10 = +[NSNumber numberWithUnsignedInteger:v7];
  uint64_t v11 = [*(id *)(a1 + 32) retryCountsByOperationType];
  [v11 setObject:v10 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_1000322C0(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Clearing retry count for %{public}@", (uint8_t *)&v5, 0xCu);
  }

  uint64_t v4 = [*(id *)(a1 + 40) retryCountsByOperationType];
  [v4 removeObjectForKey:*(void *)(a1 + 32)];
}

id sub_100032614(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) shouldIgnoreErrorForBackoffTimer:a2 operationType:*(void *)(a1 + 40)];
}

void sub_1000326D8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if ([*(id *)(a1 + 32) isInternetReachable])
  {
    unsigned __int8 v3 = [*v2 isReadyToSync];
    uint64_t v4 = +[REMLog cloudkit];
    int v5 = v4;
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ICCC: Starting a retry timer if necessary for error: %{public}@", (uint8_t *)&buf, 0xCu);
      }

      [*(id *)(a1 + 32) timeIntervalToRetryAfterFromError:*(void *)(a1 + 40)];
      double v8 = v7;
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v19 = 0x2020000000;
      uint64_t v20 = 0;
      uint64_t v9 = [*(id *)(a1 + 32) retryCountsByOperationType];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_1000329C4;
      v15[3] = &unk_1008ADDE0;
      void v15[4] = &buf;
      [v9 enumerateKeysAndObjectsUsingBlock:v15];

      double v10 = (double)(unint64_t)(*(void *)(*((void *)&buf + 1) + 24) + 1)
          * (double)(unint64_t)(*(void *)(*((void *)&buf + 1) + 24) + 1);
      double v11 = fmin(v10 + v10, 933.0);
      if (v11 > v8)
      {
        int v12 = +[REMLog cloudkit];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int16 v16 = 134217984;
          double v17 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Using backoff time for retry (%.0fs)", v16, 0xCu);
        }

        double v8 = v11;
      }
      if (v8 > 0.0)
      {
        [*v2 setHasRetryTimer:1];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100032A0C;
        block[3] = &unk_1008AF458;
        void block[4] = *v2;
        *(double *)&void block[5] = v8;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      }
      _Block_object_dispose(&buf, 8);
    }
    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_10074D138((uint64_t)v2, v5);
      }
    }
  }
  else
  {
    uint64_t v13 = +[REMLog cloudkit];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_10074D1C8();
    }
  }
}

void sub_10003299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000329C4(uint64_t a1, uint64_t a2, void *a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  id result = [a3 unsignedIntegerValue];
  if (v4 <= (unint64_t)result) {
    unint64_t v6 = (unint64_t)result;
  }
  else {
    unint64_t v6 = v4;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  return result;
}

void sub_100032A0C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) retryTimer];
  if (!v2
    || (unsigned __int8 v3 = (void *)v2,
        [*(id *)(a1 + 32) retryTimer],
        unint64_t v4 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v5 = [v4 isValid],
        v4,
        v3,
        (v5 & 1) == 0))
  {
    unint64_t v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (int)*(double *)(a1 + 40);
      v9[0] = 67109120;
      v9[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Retrying operations after %ds", (uint8_t *)v9, 8u);
    }

    double v8 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"retryOperationsIfNecessary" selector:0 userInfo:0 repeats:*(double *)(a1 + 40)];
    [*(id *)(a1 + 32) setRetryTimer:v8];
  }
}

void sub_100032C5C(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 64));
  _Unwind_Resume(a1);
}

id sub_100032C70(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) retryTimer];
  [v2 invalidate];

  [*(id *)(a1 + 32) setRetryTimer:0];
  unsigned __int8 v3 = *(void **)(a1 + 32);

  return [v3 setHasRetryTimer:0];
}

void sub_100032CCC(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  if ([*(id *)(a1 + 32) isInternetReachable])
  {
    unsigned __int8 v2 = [*v1 isReadyToSync];
    unsigned __int8 v3 = +[REMLog cloudkit];
    unint64_t v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Retrying operations", buf, 2u);
      }

      objc_initWeak(&location, *v1);
      if ([*v1 needsToUpdateSubscriptions])
      {
        unsigned __int8 v5 = +[REMLog cloudkit];
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Retrying to update subscriptions", buf, 2u);
        }

        unint64_t v6 = +[REMLog cloudkit];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.updateSubscription}", buf, 2u);
        }

        int v7 = (void *)os_transaction_create();
        id v8 = *v1;
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_100033518;
        v41[3] = &unk_1008ADCD8;
        objc_copyWeak(&v43, &location);
        id v9 = v7;
        id v42 = v9;
        [v8 updateSubscriptionsWithCompletionHandler:v41];

        objc_destroyWeak(&v43);
      }
      double v10 = objc_opt_class();
      double v11 = [*v1 accountZoneIDsNeedingToBeSaved];
      LODWORD(v10) = [v10 haveZoneIDsInAccountZoneIDs:v11];

      if (v10)
      {
        int v12 = +[REMLog cloudkit];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Retrying to save record zones", buf, 2u);
        }

        uint64_t v13 = [*v1 containersByAccountID];
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_1000335D4;
        v40[3] = &unk_1008AF050;
        v40[4] = *v1;
        [v13 enumerateKeysAndObjectsUsingBlock:v40];
      }
      __int16 v14 = [*v1 databaseScopeStringsNeedingRetryFetchChangesByAccountID];
      BOOL v15 = [v14 count] == 0;

      if (!v15)
      {
        __int16 v16 = +[REMLog cloudkit];
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          double v17 = [*v1 databaseScopeStringsNeedingRetryFetchChangesByAccountID];
          *(_DWORD *)long long buf = 138543362;
          id v46 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Retrying CKFetchDatabaseChangesOperation databaseScopes: %{public}@", buf, 0xCu);
        }
        [*v1 syncWithReason:@"RetryCKFetchDatabaseChangesOperation" discretionary:0 completionHandler:&stru_1008AF4C0];
      }
      id v18 = objc_opt_class();
      uint64_t v19 = [*v1 accountZoneIDsNeedingFetchChanges];
      LODWORD(v1_Block_object_dispose(&STACK[0x2A0], 8) = [v18 haveZoneIDsInAccountZoneIDs:v19];

      if (v18)
      {
        uint64_t v20 = +[REMLog cloudkit];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Retrying to fetch record zone changes", buf, 2u);
        }

        uint64_t v21 = +[REMLog cloudkit];
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.fetchRecordZoneChanges}", buf, 2u);
        }

        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472;
        v38[2] = sub_1000338F4;
        v38[3] = &unk_1008AF4E8;
        id v22 = (id)os_transaction_create();
        id v39 = v22;
        long long v23 = objc_retainBlock(v38);
        id v24 = *v1;
        uint64_t v25 = +[NSDictionary dictionary];
        [v24 fetchRecordZoneChangesWithReason:@"RetryAccountZoneIDsNeedingFetchChanges" cloudSchemaCatchUpSyncContextMap:v25 completionHandler:v23];
      }
      id v26 = [*v1 objectIDsToProcess];
      if ([v26 count])
      {
      }
      else
      {
        id v28 = [*v1 objectIDsToRetry];
        BOOL v29 = [v28 count] == 0;

        if (v29)
        {
LABEL_37:
          long long v31 = [*v1 containersByAccountID];
          long long v32 = [v31 allKeys];

          long long v33 = [*v1 setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:v32 syncReason:@"RetryCloudSchemaCatchUpSync"];
          if ([v33 count])
          {
            long long v34 = +[REMLog cloudkit];
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              long long v35 = [v33 allKeys];
              *(_DWORD *)long long buf = 138543362;
              id v46 = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "CloudSchemaCatchUpSync: Retrying catch up sync for accounts: %{public}@", buf, 0xCu);
            }
            [*v1 syncWithReason:@"RetryCloudSchemaCatchUpSync" discretionary:0 completionHandler:&stru_1008AF508];
          }
          else
          {
            if ([*v1 needsToMergeLocalObjects])
            {
              __int16 v36 = +[REMLog cloudkit];
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: Retrying to merge local objects", buf, 2u);
              }

              [*v1 syncWithReason:@"RetryMergeLocalObjects" discretionary:0 completionHandler:&stru_1008AF528];
            }
            if ([*v1 needsToUpdateCloudContextOnAccountsDidChange])
            {
              uint64_t v37 = +[REMLog cloudkit];
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Retry calling UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.", buf, 2u);
              }

              [*v1 setNeedsToUpdateCloudContextOnAccountsDidChange:0];
              [*v1 updateCloudContextStateWithSyncOption:1 syncReason:@"AccountsDidChange" withCompletionHandler:0];
            }
          }

          objc_destroyWeak(&location);
          return;
        }
      }
      long long v30 = +[REMLog cloudkit];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Retrying to process changes", buf, 2u);
      }

      [*v1 processPendingCloudObjectsWithOperationName:ICNSBlockOperationNameProcessObjectsForRetryOperations];
      goto LABEL_37;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074D1FC((uint64_t)v1, v4);
    }
  }
  else
  {
    uint64_t v27 = +[REMLog cloudkit];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      sub_10074D28C();
    }
  }
}

void sub_1000334A4(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 104));
  _Unwind_Resume(a1);
}

id sub_100033518(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = (id *)(a1 + 40);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained incrementOrClearRetryCountForOperationType:@"Subscriptions" error:v3];

  unsigned __int8 v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.updateSubscription}", v7, 2u);
  }

  return self;
}

void sub_1000335D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = [*(id *)(a1 + 32) operationToSaveZonesIfNecessaryForAccountID:v3];
  if (v4)
  {
    unsigned __int8 v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v15 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "os_transaction INIT {name: com.apple.remindd.cloudkit.retry.zoneIDsNeedingToBeSaved[%@]}", buf, 0xCu);
    }

    unint64_t v6 = (void *)os_transaction_create();
    [v4 modifyRecordZonesCompletionBlock];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100033788;
    v10[3] = &unk_1008AF480;
    id v13 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = v3;
    id v12 = v6;
    id v7 = v6;
    id v8 = v13;
    [v4 setModifyRecordZonesCompletionBlock:v10];
    id v9 = [*(id *)(a1 + 32) operationQueue];
    [v9 addOperation:v4];

    [*(id *)(a1 + 32) errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary];
  }
}

id sub_100033788(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  unsigned __int8 v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.zoneIDsNeedingToBeSaved[%@]}", (uint8_t *)&v5, 0xCu);
  }

  return self;
}

void sub_100033858(id a1, NSError *a2)
{
  unsigned __int8 v2 = a2;
  uint64_t v3 = +[REMLog cloudkit];
  unint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074D2C0();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CKFetchDatabaseChangesOperation: Retry sync completed.", v5, 2u);
  }
}

void sub_1000338F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = +[REMLog cloudkit];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Completed retry to fetch record zone changes {error: %@}", (uint8_t *)&v6, 0xCu);
  }

  unint64_t v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.retry.fetchRecordZoneChanges}", (uint8_t *)&v6, 2u);
  }

  id v5 = self;
}

void sub_100033A0C(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = +[REMLog cloudkit];
  unint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074D328();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CloudSchemaCatchUpSync: Retry catch-up sync completed.", v5, 2u);
  }
}

void sub_100033AA8(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v3 = +[REMLog cloudkit];
  unint64_t v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10074D390();
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MERGE.LOCAL: Retry merging local objects completed.", v5, 2u);
  }
}

void sub_100034108(uint64_t a1)
{
  uint64_t v3 = +[REMCDAccount accountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  if (v3)
  {
    unint64_t v4 = +[REMCKServerChangeToken serverChangeTokenForAccount:v3 zoneID:*(void *)(a1 + 56) databaseScope:*(void *)(a1 + 72) context:*(void *)(a1 + 40)];
    id v5 = v4;
    if (v4) {
      [v4 setServerChangeToken:*(void *)(a1 + 64)];
    }
    else {
      id v30 = +[REMCKServerChangeToken addServerChangeTokenForAccount:v3 ckServerChangeToken:*(void *)(a1 + 64) zoneID:*(void *)(a1 + 56) databaseScope:*(void *)(a1 + 72) context:*(void *)(a1 + 40)];
    }
  }
  else
  {
    int v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      id v49 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "saveServerChangeToken: The cloudKitAccount is nil for accountID %{public}@", buf, 0xCu);
    }

    +[NSMutableArray array];
    v39 = uint64_t v38 = a1;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v8 = [*(id *)(a1 + 48) cloudKitAccountsInContext:*(void *)(a1 + 40)];
    id v9 = [v8 countByEnumeratingWithState:&v44 objects:v57 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v45;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v45 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v44 + 1) + 8 * i);
          uint64_t v1 = [v13 name];
          __int16 v14 = [v13 identifier];
          id v15 = [v14 UUIDString];
          __int16 v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"(name: %@, id: %@, inactive: %d)", v1, v15, [v13 inactive]);
          [v39 addObject:v16];
        }
        id v10 = [v8 countByEnumeratingWithState:&v44 objects:v57 count:16];
      }
      while (v10);
    }

    double v17 = [*(id *)(v38 + 48) appleAccountUtilities];
    uint64_t v37 = [v17 unsafeUntilSystemReady_primaryICloudACAccount];

    id v18 = +[NSMutableArray array];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v19 = [*(id *)(v38 + 48) appleAccountUtilities];
    uint64_t v20 = [v19 unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled];

    id v21 = [v20 countByEnumeratingWithState:&v40 objects:v56 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v41;
      do
      {
        for (j = 0; j != v22; j = (char *)j + 1)
        {
          if (*(void *)v41 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v40 + 1) + 8 * (void)j);
          id v26 = [v25 accountDescription];
          uint64_t v27 = [v25 identifier];
          id v28 = [v25 aa_accountClass];
          uint64_t v1 = +[NSString stringWithFormat:@"(name: %@, id: %@, class: %@)", v26, v27, v28];
          [v18 addObject:v1];
        }
        id v22 = [v20 countByEnumeratingWithState:&v40 objects:v56 count:16];
      }
      while (v22);
    }

    BOOL v29 = +[REMLog cloudkit];
    a1 = v38;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
    {
      id v31 = [v39 componentsJoinedByString:@", "];
      if (v37)
      {
        uint64_t v33 = [v37 accountDescription];
        uint64_t v1 = [v37 identifier];
        __int16 v36 = (void *)v33;
        long long v32 = +[NSString stringWithFormat:@"(name: %@, id: %@)", v33, v1];
      }
      else
      {
        long long v32 = @"nil";
      }
      long long v34 = [v18 componentsJoinedByString:@", "];
      unsigned int v35 = [*(id *)(v38 + 48) isReadyToSync];
      *(_DWORD *)long long buf = 138413058;
      id v49 = v31;
      __int16 v50 = 2112;
      __int16 v51 = v32;
      __int16 v52 = 2112;
      __int16 v53 = v34;
      __int16 v54 = 1024;
      unsigned int v55 = v35;
      _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Trying to save server change token without an account {accounts: [%@], primaryACAccount: %@, acAccounts: [%@], isReadyToSync: %d}", buf, 0x26u);
      if (v37)
      {
      }
    }

    uint64_t v3 = 0;
  }
  [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(a1 + 40) shouldTakeServerAsTruth:1 logDescription:@"saving server change token"];
}

void sub_1000347E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100034800(void *a1)
{
  id v2 = +[REMCDAccount accountWithCKIdentifier:a1[4] context:a1[5]];
  if (v2)
  {
    uint64_t v3 = +[REMCKServerChangeToken serverChangeTokenForAccount:v2 zoneID:a1[6] databaseScope:a1[8] context:a1[5]];
    uint64_t v4 = [v3 serverChangeToken];
    uint64_t v5 = *(void *)(a1[7] + 8);
    int v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;
  }
  else
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074D540();
    }
  }
}

void sub_100034AC0(uint64_t a1)
{
  id v2 = +[REMCDAccount accountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  if (v2)
  {
    uint64_t v3 = +[REMCKServerChangeToken serverChangeTokenForAccount:v2 zoneID:*(void *)(a1 + 48) databaseScope:*(void *)(a1 + 64) context:*(void *)(a1 + 40)];
    if (v3)
    {
      [*(id *)(a1 + 40) deleteObject:v3];
      [v2 removeCkServerChangeTokensObject:v3];
      [(id)objc_opt_class() saveAndFaultIfFailWithContext:*(void *)(a1 + 40) shouldTakeServerAsTruth:1 logDescription:@"deleting server change token"];
    }
  }
  else
  {
    uint64_t v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074D644();
    }
  }
}

id sub_100034C84(uint64_t a1)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = [*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  id v2 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v21;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v21 != v4) {
          objc_enumerationMutation(obj);
        }
        int v6 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v7 = [v6 ckServerChangeTokens];
        id v8 = [v7 copy];

        id v9 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v17;
          do
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(void *)v17 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(void *)(*((void *)&v16 + 1) + 8 * (void)j);
              [*(id *)(a1 + 40) deleteObject:v13];
              [v6 removeCkServerChangeTokensObject:v13];
            }
            id v10 = [v8 countByEnumeratingWithState:&v16 objects:v24 count:16];
          }
          while (v10);
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    }
    while (v3);
  }

  return [*(id *)(a1 + 40) ic_saveWithLogDescription:@"deleting all server change tokens"];
}

void sub_100034FC4(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000350D4;
  v8[3] = &unk_1008AF5C8;
  id v9 = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100035154;
  v5[3] = &unk_1008AF618;
  uint64_t v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  [v3 updateUserRecordWithAccountID:v9 updateFunction:v8 completionHandler:v5];
}

void sub_1000350D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    +[REMCDAccount clearUserRecord:a2];
  }
  else
  {
    id v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10074D6E0();
    }
  }
}

void sub_100035154(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkit];
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074D74C();
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully cleaned user record", buf, 2u);
    }

    id v6 = [(id)objc_opt_class() appZoneID];
    v13[0] = v6;
    id v7 = [(id)objc_opt_class() migrationZoneID];
    v13[1] = v7;
    uint64_t v5 = +[NSArray arrayWithObjects:v13 count:2];

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000352FC;
    v10[3] = &unk_1008AF5F0;
    id v11 = *(id *)(a1 + 48);
    [v8 deleteRecordZonesWithZoneIDs:v5 accountID:v9 markZonesAsUserPurged:1 completionHandler:v10];
  }
}

uint64_t sub_1000352FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100035680(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  CFStringRef v6 = @"operationCount";
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
  id v7 = v4;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
  [v2 postNotificationName:@"ICCloudContextHasPendingOperationsDidChangeNotification" object:v3 userInfo:v5];
}

id sub_10003575C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) printOperationQueue];
}

void sub_100035838(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) icUserDefaults];
  id v2 = [v1 userDefaults];
  CFStringRef v4 = @"PollCloudKitWhenLaunchingAndBackgrounding";
  uint64_t v5 = &__kCFBooleanFalse;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  [v2 registerDefaults:v3];
}

void sub_1000359D0(uint64_t a1)
{
  [*(id *)(a1 + 32) clearSubscribedSubscriptionIDs];
  [*(id *)(a1 + 32) unobservePrimaryCloudKitAccountPersonIDSaltChanges];
  id v2 = [*(id *)(a1 + 32) storeController];
  uint64_t v3 = [v2 inMemoryPrimaryActiveCKAccountREMObjectID];

  if (!v3)
  {
    CFStringRef v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Primary CK account may have just been disabled, force run observePrimaryCloudKitAccountPersonIDSaltChanges to invoke the 'errorHandler' to unset personIDs in non-primary CK accounts", v7, 2u);
    }

    [*(id *)(a1 + 32) observePrimaryCloudKitAccountPersonIDSaltChanges];
    uint64_t v5 = [*(id *)(a1 + 32) accountPersonIDSaltObserver];

    if (v5)
    {
      CFStringRef v6 = +[REMLog cloudkit];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        sub_10074D7B4();
      }
    }
  }
}

id sub_100035C24(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCloudContextStateWithReason:@"AccountsDidChangeCancelEverything"];
}

void sub_100035F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100035F38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountInitializerDidCompleteOnAccountsDidChangeObserver];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) accountInitializerDidCompleteOnAccountsDidChangeObserver];
    [v3 unobserve];

    CFStringRef v4 = *(void **)(a1 + 32);
    [v4 setAccountInitializerDidCompleteOnAccountsDidChangeObserver:0];
  }
}

void sub_100035FAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification after accountsDidEnable.", buf, 2u);
    }

    [WeakRetained didCompleteInitializeAllAccounts:v3];
    CFStringRef v6 = [WeakRetained accountInitializerDidCompleteOnAccountsDidChangeObserver];
    [v6 unobserve];

    [WeakRetained setAccountInitializerDidCompleteOnAccountsDidChangeObserver:0];
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}", v9, 2u);
    }

    id v8 = self;
  }
}

id sub_1000360D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAccountInitializerDidCompleteOnAccountsDidChangeObserver:*(void *)(a1 + 40)];
}

id sub_100036424(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateCloudContextStateWithReason:@"ApplicationWillEnterForeground"];
}

void sub_1000368D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
}

id sub_10003691C()
{
  v0 = +[REMLog cloudkit];
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.aps}", v2, 2u);
  }

  return self;
}

void sub_1000369A0(uint64_t a1)
{
  id v2 = +[REMSignpost sync];
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  CFStringRef v4 = v2;
  uint64_t v5 = v4;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v3, "cloudkit.aps", "", buf, 2u);
  }

  CFStringRef v6 = +[NSDate date];
  id v7 = +[DABabysitter sharedBabysitter];
  id v8 = [v7 tokenByRegisteringAccount:*(void *)(a1 + 32) forOperationWithName:@"SYNC[APS]"];

  if (v8)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100036C58;
    v16[3] = &unk_1008AF640;
    id v11 = v5;
    os_signpost_id_t v23 = v3;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v17 = v11;
    uint64_t v18 = v12;
    id v19 = *(id *)(a1 + 48);
    id v20 = v6;
    id v21 = v8;
    id v22 = *(id *)(a1 + 56);
    [v9 handleNotification:v10 completionHandler:v16];

    uint64_t v13 = v17;
  }
  else
  {
    uint64_t v13 = +[REMError babySatErrorWithOperationName:@"com.apple.remindd.cloudkit.sync.crashDetected"];
    CFStringRef v25 = @"identifier";
    CFStringRef v26 = @"SYNC[APS]";
    __int16 v14 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    +[Analytics postEventWithName:@"com.apple.remindd.cloudkit.sync.crashDetected" payload:v14 error:v13 performAutoBugCaptureOnError:1];

    id v15 = +[REMLog cloudkit];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT)) {
      sub_10074D958(a1 + 32, v15);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100036C58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    CFStringRef v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10074D9E4();
    }
  }
  else
  {
    uint64_t v5 = *(id *)(a1 + 32);
    CFStringRef v6 = v5;
    os_signpost_id_t v7 = *(void *)(a1 + 80);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_INTERVAL_END, v7, "cloudkit.aps", "", buf, 2u);
    }

    id v8 = [*(id *)(a1 + 40) processingQueue];
    __int16 v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    long long v16 = sub_100036E70;
    long long v17 = &unk_1008ADC88;
    uint64_t v9 = *(void **)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 40);
    id v19 = v9;
    dispatch_async(v8, &v14);

    uint64_t v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = +[NSDate date];
      [v11 timeIntervalSinceDate:*(void *)(a1 + 56)];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v21 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "SYNC[APS] END {duration: %.4f}", buf, 0xCu);
    }
  }
  id v13 = self;
  (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
}

id sub_100036E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearCloudDirtyForToken:*(void *)(a1 + 40)];
}

void sub_1000375D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 208), 8);
  _Unwind_Resume(a1);
}

void sub_100037644(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)os_signpost_id_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Completed save record zone Reminders for force-setting migration state", v7, 2u);
  }

  if (v4)
  {
    CFStringRef v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_10074DAE8();
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100037708(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = +[REMLog cloudkit];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138543618;
    id v27 = v6;
    __int16 v28 = 2112;
    id v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fetched user record for force-setting migration state in accountID: %{public}@, {record: %@}", buf, 0x16u);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a2);
  os_signpost_id_t v7 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) recordID];
  id v8 = [v7 recordName];
  uint64_t v9 = +[NSString stringWithFormat:@"%@/%@", @"Account", v8];

  id v10 = objc_alloc((Class)CKRecordID);
  id v11 = [(id)objc_opt_class() appZoneID];
  id v12 = [v10 initWithRecordName:v9 zoneID:v11];

  if (*(unsigned char *)(a1 + 80))
  {
    id v13 = +[REMLog cloudkit];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      id v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Force-setting migration state: create an account record for force-setting migration with id: %{public}@", buf, 0xCu);
    }

    id v14 = [objc_alloc((Class)CKRecord) initWithRecordType:@"Account" recordID:v12];
    uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
    long long v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  else
  {
    id v17 = objc_alloc((Class)CKFetchRecordsOperation);
    id v25 = v12;
    uint64_t v18 = +[NSArray arrayWithObjects:&v25 count:1];
    id v19 = [v17 initWithRecordIDs:v18];

    [*(id *)(a1 + 40) configureOperation:v19];
    id v20 = [*(id *)(a1 + 56) privateCloudDatabase];
    [v19 setDatabase:v20];

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100037A28;
    v22[3] = &unk_1008AF6B8;
    uint64_t v24 = *(void *)(a1 + 72);
    id v23 = *(id *)(a1 + 48);
    [v19 setPerRecordCompletionBlock:v22];
    uint64_t v21 = [v19 database];
    [v21 addOperation:v19];
  }
}

void sub_100037A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fetched account record for force-setting migration state {record: %@}", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  CFStringRef v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v3;
  id v7 = v3;

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100037B0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  CFStringRef v6 = +[REMLog cloudkit];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    LOWORD(v_Block_object_dispose(&STACK[0x2A0], 8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Completed modify records operation for force-setting migration state", (uint8_t *)&v8, 2u);
  }

  if (v5)
  {
    id v7 = +[REMLog cloudkit];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to modify records operation for force-setting migration state {error: %{public}@}", (uint8_t *)&v8, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100037CCC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v2 = *(unsigned char *)(a1 + 41) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  [*(id *)(a1 + 32) adjustAPSNotificationDebouncerIntervalWithMigrationState:v2];
  id result = [*(id *)(a1 + 32) uploadSuspended];
  if (v2 != result)
  {
    id v4 = +[REMLog cloudkit];
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v5)
      {
        __int16 v9 = 0;
        CFStringRef v6 = "Suspend upload";
        id v7 = (uint8_t *)&v9;
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      }
    }
    else if (v5)
    {
      __int16 v8 = 0;
      CFStringRef v6 = "Resume upload";
      id v7 = (uint8_t *)&v8;
      goto LABEL_10;
    }

    return [*(id *)(a1 + 32) setUploadSuspended:v2];
  }
  return result;
}

void sub_100037E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100037E98(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) cloudKitAccountsInContext:*(void *)(a1 + 40)];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100037F2C;
  v3[3] = &unk_1008AF730;
  void v3[4] = *(void *)(a1 + 48);
  [v2 enumerateObjectsUsingBlock:v3];
}

void sub_100037F2C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  if ([v6 didChooseToMigrate]) {
    unsigned int v7 = [v6 didFinishMigration] ^ 1;
  }
  else {
    unsigned int v7 = 0;
  }
  __int16 v8 = +[REMLog cloudkit];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = [v6 remObjectID];
    int v10 = 138543874;
    id v11 = v9;
    __int16 v12 = 1024;
    unsigned int v13 = [v6 didChooseToMigrate];
    __int16 v14 = 1024;
    unsigned int v15 = [v6 didFinishMigration];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Checking if we should adjust APS debouncer interval according to migration state of {account: %{public}@, didChooseToMigrate: %d, didFinishMigration: %d}", (uint8_t *)&v10, 0x18u);
  }
  if (v7)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
}

void sub_10003872C(uint64_t a1)
{
  id v25 = +[ICCloudContext _systemBuildVersion];
  if (*(void *)(a1 + 32))
  {
    unsigned __int8 v2 = [*(id *)(a1 + 48) retryPerformingCloudSchemaCatchUpSync];
    id v3 = +[REMLog cloudkit];
    id v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void *)(a1 + 56);
        uint64_t v7 = *(void *)(a1 + 64);
        *(_DWORD *)long long buf = 138544130;
        uint64_t v31 = v6;
        __int16 v32 = 2114;
        uint64_t v33 = v5;
        __int16 v34 = 2114;
        *(void *)unsigned int v35 = v25;
        *(_WORD *)&v35[8] = 2114;
        *(void *)&v35[10] = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x2Au);
      }
    }
    else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *(void *)(a1 + 32);
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = *(void *)(a1 + 64);
      *(_DWORD *)long long buf = 138544130;
      uint64_t v31 = v22;
      __int16 v32 = 2114;
      uint64_t v33 = v21;
      __int16 v34 = 2114;
      *(void *)unsigned int v35 = v25;
      *(_WORD *)&v35[8] = 2114;
      *(void *)&v35[10] = v23;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x2Au);
    }
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) allKeys];
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v8 = [v4 countByEnumeratingWithState:&v26 objects:v36 count:16];
    if (v8)
    {
      id v10 = v8;
      uint64_t v11 = *(void *)v27;
      *(void *)&long long v9 = 138544386;
      long long v24 = v9;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v4);
          }
          uint64_t v13 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          __int16 v14 = [*(id *)(a1 + 48) contextForAccountID:v13 withBatchFetchHelper:0, v24];
          unsigned int v15 = +[ICCloudSchemaCompatibilityUtils cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:v13 context:v14];
          long long v16 = +[REMLog cloudkit];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *(void *)(a1 + 56);
            uint64_t v18 = *(void *)(a1 + 64);
            *(_DWORD *)long long buf = v24;
            uint64_t v31 = v17;
            __int16 v32 = 2114;
            uint64_t v33 = v13;
            __int16 v34 = 1024;
            *(_DWORD *)unsigned int v35 = v15;
            *(_WORD *)&void v35[4] = 2114;
            *(void *)&v35[6] = v25;
            *(_WORD *)&v35[14] = 2114;
            *(void *)&v35[16] = v18;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "...SYNC[%{public}@] CloudSchemaCatchUpSync: completed successfully, persistenceCloudSchemaVersion bumped {accountIdentifier: %{public}@, didUpdate: %d, buildVersion: %{public}@, debugLabel: %{public}@}", buf, 0x30u);
          }

          if (v15)
          {
            id v19 = +[REMUserDefaults daemonUserDefaults];
            id v20 = +[NSDate now];
            [v19 setCloudKitSchemaCatchUpSyncLastSuccessDate:v20];

            [v19 setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:v25];
          }
        }
        id v10 = [v4 countByEnumeratingWithState:&v26 objects:v36 count:16];
      }
      while (v10);
    }
  }
}

BOOL sub_100039A00(id a1, Class a2, unint64_t a3, BOOL *a4)
{
  unsigned int v5 = [(objc_class *)a2 isSubclassOfClass:objc_opt_class()];
  if (v5)
  {
    LOBYTE(v5) = [(objc_class *)a2 shouldAttemptLocalObjectMerge];
  }
  return v5;
}

void sub_10003A380(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10003A3A0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10003A3E0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_10003A3FC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10003A420(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void sub_10003A440(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, v5, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_10003A46C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10003A4AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t sub_10003A4F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10003A504(uint64_t a1)
{
  return *(void *)a1;
}

void sub_10003A548(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0xCu);
}

uint64_t sub_10003A584()
{
  return v0;
}

uint64_t sub_10003A59C(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

void sub_10003A5B8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_10003A5E4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

unsigned char *sub_10003A604(unsigned char *result, unsigned char *a2)
{
  *id result = 0;
  *a2 = 0;
  return result;
}

void sub_10003A614(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(&STACK[0x2A0], 8) = a1;
}

uint64_t sub_10003A620(uint64_t result, float a2)
{
  float *v3 = a2;
  void *v2 = result;
  return result;
}

void sub_10003A62C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

uint64_t sub_10003A674(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_10003A680(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 48);
}

uint64_t sub_10003A690()
{
  return v0;
}

uint64_t sub_10003A69C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 80);
}

void sub_10003A6B8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_fault_impl(a1, v4, OS_LOG_TYPE_FAULT, a4, v5, 0xCu);
}

void sub_10003A6D8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void sub_10003A6F8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0x16u);
}

void sub_10003A718(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x20u);
}

void sub_10003D558(id a1)
{
  uint64_t v1 = objc_alloc_init(ICCloudConfiguration);
  uint64_t v2 = qword_1009228F8;
  qword_1009228F8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10003D994(uint64_t a1, void *a2)
{
  id v3 = [a2 lastPathComponent];
  uint64_t v4 = [*(id *)(a1 + 32) lastPathComponent];
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_10003DF04(id a1, BOOL a2)
{
  if (!a2)
  {
    uint64_t v2 = +[REMLog cloudkit];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_10074E308();
    }
  }
}

void sub_10003E034(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t v10 = +[REMLog cloudkit];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_10074E500(v9);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11) {
      (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0);
    }
  }
  else
  {
    id v12 = v8;
    if ([v12 statusCode] == (id)200)
    {
      id v29 = 0;
      uint64_t v13 = +[NSPropertyListSerialization propertyListWithData:v7 options:0 format:0 error:&v29];
      id v14 = v29;
      if (v14)
      {
        unsigned int v15 = +[REMLog cloudkit];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          sub_10074E3E4(v14);
        }

        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
      }
      else
      {
        uint64_t v18 = +[ICCloudContext processingQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10003E3A8;
        block[3] = &unk_1008ADC88;
        void block[4] = *(void *)(a1 + 32);
        id v19 = v13;
        id v28 = v19;
        dispatch_async(v18, block);

        id v20 = [(id)objc_opt_class() cachedConfigurationURL];
        uint64_t v21 = +[REMLog cloudkit];
        uint64_t v22 = v21;
        if (v20)
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            uint64_t v31 = v20;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Updating locally cached configuration {cacheURL: %{public}@}", buf, 0xCu);
          }

          id v26 = 0;
          unsigned __int8 v23 = [v19 writeToURL:v20 error:&v26];
          uint64_t v22 = v26;
          if ((v23 & 1) == 0)
          {
            long long v24 = +[REMLog cloudkit];
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
              sub_10074E370();
            }
          }
        }
        else if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          sub_10074E33C();
        }

        uint64_t v25 = *(void *)(a1 + 40);
        if (v25) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v25, 1);
        }
      }
    }
    else
    {
      long long v16 = +[REMLog cloudkit];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10074E468(v12);
      }

      uint64_t v17 = *(void *)(a1 + 40);
      if (v17) {
        (*(void (**)(uint64_t, void))(v17 + 16))(v17, 0);
      }
    }
  }
}

id sub_10003E3A8(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkit];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Received remote configuration", buf, 2u);
  }

  id result = [(id)objc_opt_class() isConfigurationValid:*(void *)(a1 + 40)];
  if (result)
  {
    uint64_t v4 = +[REMLog cloudkit];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ICCloudConfiguration: Applying remote configuration", v5, 2u);
    }

    return [*(id *)(a1 + 32) setConfigurationFromDictionary:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_10003FD54(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"ICCloudConfigurationChangedNotification" object:*(void *)(a1 + 32)];
}

void sub_10003FFD8(id a1)
{
  uint64_t v1 = objc_alloc_init(_ICCloudDefaultValuesConfigurationStorage);
  uint64_t v2 = qword_100922910;
  qword_100922910 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000404E8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100042060(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_100042080(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Au);
}

void sub_100042214(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    id v7 = +[REMLogStore container];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074EEE0(a4, v7);
    }
    uint64_t v8 = 2;
  }
  else
  {
    if (a2)
    {
      uint64_t v8 = 1;
      goto LABEL_8;
    }
    id v7 = +[REMLogStore container];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10074EE48(a1, a3, v7);
    }
    uint64_t v8 = 3;
  }

LABEL_8:
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004233C;
  v10[3] = &unk_1008AF870;
  id v9 = *(NSObject **)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = v8;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = a3;
  dispatch_async(v9, v10);
}

uint64_t sub_10004233C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[4] + 16))(a1[4], a1[5], a1[6], a1[7]);
}

BOOL sub_1000440CC(id a1, NSManagedObject *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = [(NSManagedObject *)a2 objectID];
  unsigned __int8 v5 = [v4 isTemporaryID];

  return v5;
}

void sub_100044348(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10004436C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained ic_permanentObjectID];

  if (v3)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100044438;
    v4[3] = &unk_1008ADC88;
    id v5 = *(id *)(a1 + 32);
    id v6 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);
  }
}

void sub_100044438(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:*(void *)(a1 + 32) object:*(void *)(a1 + 40)];
}

void sub_100044640(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100044664(uint64_t a1, uint64_t a2)
{
}

void sub_100044670(uint64_t a1)
{
}

void sub_100044678(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = [WeakRetained ic_permanentObjectID];

  if (v3)
  {
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472;
    uint64_t v8 = sub_100044780;
    id v9 = &unk_1008ADC88;
    id v10 = *(id *)(a1 + 32);
    id v11 = v3;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &v6);
  }
  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  id v5 = objc_loadWeakRetained((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  [v4 removeObserver:v5];
}

void sub_100044780(uint64_t a1)
{
  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:*(void *)(a1 + 32) object:*(void *)(a1 + 40)];
}

BOOL sub_1000479A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(unsigned __int8 *)(a1 + 40);
  unsigned int v5 = [v3 markedForDeletion];
  id v6 = +[REMLogStore write];
  uint64_t v7 = v6;
  if (v4 == v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Stopping recurssion because isDeleted == self.markedForDeletion", v9, 2u);
    }
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
      sub_10074FD24((unsigned __int8 *)(a1 + 40), a1);
    }

    if (*(unsigned char *)(a1 + 40)) {
      [v3 markForDeletion];
    }
    else {
      [v3 unmarkForDeletion];
    }
  }

  return v4 != v5;
}

id sub_100047B38(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) objectID];
  unsigned int v5 = [v3 objectID];
  id v6 = [v4 isEqual:v5];

  if ((v6 & 1) == 0)
  {
    uint64_t v7 = [v3 managedObjectContext];
    [v7 deleteObject:v3];
  }
  return v6;
}

uint64_t sub_100047CA4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) != a2) {
    [*(id *)(a1 + 40) addObject:a2];
  }
  return 1;
}

void sub_100048AE4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_100048B34(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void performBlockOnMainThread(void *a1)
{
  block = a1;
  if (+[NSThread isMainThread]) {
    block[2]();
  }
  else {
    dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

id ICGenericError()
{
  id v0 = [objc_alloc((Class)NSError) initWithDomain:@"com.apple.reminders" code:-1 userInfo:0];

  return v0;
}

void sub_1000495FC(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922920;
  qword_100922920 = (uint64_t)v1;

  [(id)qword_100922920 setTimeStyle:3];
  id v3 = (void *)qword_100922920;

  [v3 setDateStyle:1];
}

void sub_100049710(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922930;
  qword_100922930 = (uint64_t)v1;

  [(id)qword_100922930 setTimeStyle:1];
  [(id)qword_100922930 setDateStyle:1];
  id v3 = (void *)qword_100922930;

  _[v3 setDoesRelativeDateFormatting:1];
}

void sub_100049778(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922940;
  qword_100922940 = (uint64_t)v1;

  [(id)qword_100922940 setTimeStyle:1];
  id v3 = (void *)qword_100922940;

  [v3 setDateStyle:1];
}

void sub_100049A04(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922950;
  qword_100922950 = (uint64_t)v1;

  [(id)qword_100922950 setTimeStyle:1];
  id v3 = (void *)qword_100922950;

  [v3 setDateStyle:0];
}

void sub_100049A60(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922960;
  qword_100922960 = (uint64_t)v1;

  id v3 = (void *)qword_100922960;
  id v5 = +[NSLocale currentLocale];
  int v4 = +[NSDateFormatter dateFormatFromTemplate:@"cccc" options:0 locale:v5];
  [v3 setDateFormat:v4];
}

void sub_100049B00(id a1)
{
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = (void *)qword_100922970;
  qword_100922970 = (uint64_t)v1;

  [(id)qword_100922970 setTimeStyle:0];
  [(id)qword_100922970 setDateStyle:1];
  id v3 = (void *)qword_100922970;

  _[v3 setDoesRelativeDateFormatting:1];
}

dispatch_workloop_t rd_dispatch_workloop_create(const char *a1)
{
  dispatch_workloop_t v1 = dispatch_workloop_create(a1);

  return v1;
}

void sub_10004A284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A2B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004A2C8(uint64_t a1)
{
}

uint64_t sub_10004A2D0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) fetchRequest];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

id incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = [v3 count];
  if (v5 != [v4 count])
  {
    id v6 = +[REMLog cloudkit];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_10075046C(v6);
    }
  }
  uint64_t v7 = +[NSMutableDictionary dictionary];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v8 = v3;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)v19;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v19 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        unsigned int v15 = [v4 objectAtIndex:(char *)i + v11];
        [v7 setObject:v15 forKey:v14];
      }
      id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      v11 += (uint64_t)i;
    }
    while (v10);
  }

  long long v16 = +[NSDictionary dictionaryWithDictionary:v7];

  return v16;
}

id cloudKitSchemaVersionIncompatibilityInfoMap()
{
  if (qword_100922988 != -1) {
    dispatch_once(&qword_100922988, &stru_1008AFA90);
  }
  id v0 = (void *)qword_100922980;

  return v0;
}

void sub_10004AA94(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = (void *)qword_100922980;
  qword_100922980 = v1;

  id v3 = +[REMCDAccount cdEntityName];
  v35[0] = v3;
  id v4 = +[REMCDList cdEntityName];
  v35[1] = v4;
  id v5 = +[NSArray arrayWithObjects:v35 count:2];
  id v6 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v5, &off_1008D78E0);

  [(id)qword_100922980 setObject:v6 forKeyedSubscript:&off_1008D7348];
  uint64_t v7 = +[REMCDSmartList cdEntityName];
  __int16 v34 = v7;
  id v8 = +[NSArray arrayWithObjects:&v34 count:1];
  id v9 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v8, &off_1008D7910);

  [(id)qword_100922980 setObject:v9 forKeyedSubscript:&off_1008D7360];
  id v10 = +[REMCDList cdEntityName];
  v33[0] = v10;
  uint64_t v11 = +[REMCDSmartList cdEntityName];
  v33[1] = v11;
  uint64_t v12 = +[NSArray arrayWithObjects:v33 count:2];
  uint64_t v13 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v12, &off_1008D7958);

  [(id)qword_100922980 setObject:v13 forKeyedSubscript:&off_1008D7378];
  uint64_t v14 = +[REMCDReminder cdEntityName];
  __int16 v32 = v14;
  unsigned int v15 = +[NSArray arrayWithObjects:&v32 count:1];
  long long v16 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v15, &off_1008D7988);

  [(id)qword_100922980 setObject:v16 forKeyedSubscript:&off_1008D7390];
  uint64_t v17 = +[REMCDList cdEntityName];
  v31[0] = v17;
  long long v18 = +[REMCDSmartList cdEntityName];
  v31[1] = v18;
  long long v19 = +[REMCDTemplate cdEntityName];
  v31[2] = v19;
  long long v20 = +[REMCDListSection cdEntityName];
  v31[3] = v20;
  long long v21 = +[NSArray arrayWithObjects:v31 count:4];
  uint64_t v22 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v21, &off_1008D7A00);

  [(id)qword_100922980 setObject:v22 forKeyedSubscript:&off_1008D73A8];
  unsigned __int8 v23 = +[REMCDAccount cdEntityName];
  id v30 = v23;
  long long v24 = +[NSArray arrayWithObjects:&v30 count:1];
  uint64_t v25 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v24, &off_1008D7A30);

  [(id)qword_100922980 setObject:v25 forKeyedSubscript:&off_1008D73C0];
  id v26 = +[REMCDReminder cdEntityName];
  id v29 = v26;
  long long v27 = +[NSArray arrayWithObjects:&v29 count:1];
  id v28 = incompatibilityInfoWithEntitiesAndArraysOfPropertyKeys(v27, &off_1008D7A60);

  [(id)qword_100922980 setObject:v28 forKeyedSubscript:&off_1008D73D8];
}

void sub_10004B1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B208(uint64_t a1)
{
  uint64_t v2 = +[REMCDAccount cloudKitAccountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  if (v2)
  {
    id v3 = v2;
    [v2 setPersistenceCloudSchemaVersion:20240715];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 40) ic_save];
    uint64_t v2 = v3;
  }
}

void sub_10004B608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B648(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004B658(uint64_t a1)
{
}

void sub_10004B660(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  uint64_t v8 = (uint64_t)[a2 integerValue];
  if (v8 < 20240716 && v8 > *(void *)(a1 + 64))
  {
    uint64_t v10 = v8;
    uint64_t v11 = [v7 objectForKey:*(void *)(a1 + 32)];
    if ([v11 count])
    {
      uint64_t v12 = +[REMLog cloudkit];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = [*(id *)(a1 + 40) ckIdentifier];
        uint64_t v15 = *(void *)(a1 + 64);
        int v16 = 138544386;
        uint64_t v17 = v13;
        __int16 v18 = 2114;
        long long v19 = v14;
        __int16 v20 = 2048;
        uint64_t v21 = v15;
        __int16 v22 = 2048;
        uint64_t v23 = 20240715;
        __int16 v24 = 2048;
        uint64_t v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "ICCSCU: this cloud object is an entity that needs to run CloudSchemaCatchUpSync {entity: %{public}@, identifier: %{public}@, persistenceVersion: %lld, runtimeVersion: %lld, incompatibilityInfoVersionNumber: %lld}", (uint8_t *)&v16, 0x34u);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
      if (*(unsigned char *)(a1 + 72)) {
        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObjectsFromArray:v11];
      }
      else {
        *a4 = 1;
      }
    }
  }
}

void sub_10004B8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B908(void *a1)
{
  uint64_t v2 = +[REMCDAccount cloudKitAccountWithCKIdentifier:a1[4] context:a1[5]];
  if (v2)
  {
    id v4 = v2;
    id v3 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v2 persistenceCloudSchemaVersion]);
    *(void *)(*(void *)(a1[6] + 8) + 24) = [v3 integerValue];

    uint64_t v2 = v4;
  }
}

id sub_10004C178(uint64_t a1)
{
  [*(id *)(a1 + 32) _setCKIdentifierIfNecessary];
  uint64_t v2 = [*(id *)(a1 + 32) ckCloudState];
  id v3 = [v2 currentLocalVersion];

  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    id v4 = [*(id *)(a1 + 32) ckCloudState];
    [v4 setCurrentLocalVersion:0];

    id v5 = [*(id *)(a1 + 32) ckCloudState];
    [v5 setLatestVersionSyncedToCloud:0];
  }
  id v6 = [*(id *)(a1 + 32) ckCloudState];
  [v6 setCurrentLocalVersion:[v6 currentLocalVersion] + 1];

  id v7 = +[NSDate date];
  uint64_t v8 = [*(id *)(a1 + 32) ckCloudState];
  [v8 setLocalVersionDate:v7];

  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = [v9 ckDirtyFlags] | 2;

  return [v9 setCkDirtyFlags:v10];
}

uint64_t sub_10004C8E0(uint64_t a1, void *a2)
{
  id v3 = [a2 accountCKIdentifier];
  id v4 = v3;
  if (*(void *)(a1 + 32))
  {
    if (v3) {
      uint64_t v5 = (uint64_t)[v3 isEqualToString:];
    }
    else {
      uint64_t v5 = 1;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_10004C994(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.reminders.cloud.failure-counts", v3);
  uint64_t v2 = (void *)qword_100922990;
  qword_100922990 = (uint64_t)v1;
}

void sub_10004CA4C(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = qword_1009229A0;
  qword_1009229A0 = v1;

  _objc_release_x1(v1, v2);
}

void sub_10004CB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004CB64(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckIdentifier];
  if (v2)
  {
    id v3 = [(id)objc_opt_class() failedToSyncCountsByCKIdentifier];
    id v4 = [v3 objectForKey:v2];

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 integerValue];
  }
  else
  {
    uint64_t v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_100750870();
    }
  }
}

void sub_10004CCB0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckIdentifier];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = [(id)objc_opt_class() failedToSyncCountsByCKIdentifier];
    uint64_t v5 = v4;
    if (v3)
    {
      id v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
      [v5 setObject:v6 forKey:v2];
    }
    else
    {
      [v4 removeObjectForKey:v2];
    }
  }
  else
  {
    uint64_t v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1007508A4();
    }
  }
}

void sub_10004CDC8(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = qword_1009229B0;
  qword_1009229B0 = v1;

  _objc_release_x1(v1, v2);
}

void sub_10004CEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004CEE0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckIdentifier];
  if (v2)
  {
    uint64_t v3 = [(id)objc_opt_class() numberOfPushAttemptsToWaitByCKIdentifier];
    id v4 = [v3 objectForKey:v2];

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 integerValue];
  }
  else
  {
    uint64_t v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1007508D8();
    }
  }
}

void sub_10004D02C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckIdentifier];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = [(id)objc_opt_class() numberOfPushAttemptsToWaitByCKIdentifier];
    uint64_t v5 = v4;
    if (v3)
    {
      id v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 40)];
      [v5 setObject:v6 forKey:v2];
    }
    else
    {
      [v4 removeObjectForKey:v2];
    }
  }
  else
  {
    uint64_t v5 = +[REMLog cloudkit];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_10075090C();
    }
  }
}

void sub_10004D458()
{
  id v0 = [(id)objc_opt_class() numberOfPushAttemptsToWaitByCKIdentifier];
  [v0 removeAllObjects];

  uint64_t v1 = [(id)objc_opt_class() failedToSyncCountsByCKIdentifier];
  [v1 removeAllObjects];

  id v2 = +[NSNotificationCenter defaultCenter];
  [v2 postNotificationName:@"ICCloudContextUnrecoverableErrorNotification" object:0];
}

void sub_10004DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004DD5C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _isInICloudAccount];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10004DE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10004DE68(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isDeleted];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result ^ 1;
  return result;
}

void sub_10004E740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004E764(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004E774(uint64_t a1)
{
}

uint64_t sub_10004E77C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) entity];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_10004EC5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 ckServerRecord];
  uint64_t v5 = (void *)v4;
  if (*(id *)(a1 + 32) == v3)
  {
    if (v4)
    {
      id v9 = [v3 parentCloudObject];
      uint64_t v10 = [v9 recordID];
      uint64_t v11 = v10;
      if (v10)
      {
        uint64_t v12 = [v10 zoneID];
        uint64_t v13 = [v5 recordID];
        uint64_t v14 = [v13 zoneID];
        unsigned __int8 v15 = [v12 isEqual:v14];

        if ((v15 & 1) == 0)
        {
          uint64_t v17 = objc_opt_class();
          __int16 v18 = [v5 recordID];
          long long v19 = [v18 ic_loggingDescription];
          uint64_t v20 = objc_opt_class();
          uint64_t v21 = [v11 ic_loggingDescription];
          __int16 v22 = +[NSString stringWithFormat:@"Cross-zone parent record relationship found. Resetting ckServerRecord. { class: %@, recordID: %@, parentClass: %@, parentRecordID: %@ }", v17, v19, v20, v21];

          [(id)objc_opt_class() faultAndPromptToFileRadarWithICTap2RadarType:4 title:@"recursivelyFixCrossZoneRelationshipWithVisitedMap" description:&stru_1008D0E58 logMessage:v22];
          goto LABEL_3;
        }
      }
    }
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  if (v4)
  {
LABEL_3:
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = [v5 copy];
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v3, v7);

    [v3 setCkServerRecord:0];
    [v3 setCkZoneOwnerName:0];
  }
  uint64_t v8 = 1;
LABEL_10:

  return v8;
}

void sub_100050C74(id a1)
{
  uint64_t v1 = +[NSMutableSet set];
  uint64_t v2 = qword_1009229C0;
  qword_1009229C0 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100050E38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000511AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000511C0(uint64_t a1)
{
  id obj = [*(id *)(a1 + 40) temporaryAssets];
  objc_sync_enter(obj);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v11 = [*(id *)(a1 + 32) recordsToSave];
  id v13 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v13)
  {
    uint64_t v12 = *(void *)v20;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v11);
        }
        uint64_t v2 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v14);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v3 = [v2 allKeys];
        id v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v4)
        {
          uint64_t v5 = *(void *)v16;
          do
          {
            uint64_t v6 = 0;
            do
            {
              if (*(void *)v16 != v5) {
                objc_enumerationMutation(v3);
              }
              id v7 = [v2 objectForKeyedSubscript:*(void *)(*((void *)&v15 + 1) + 8 * (void)v6)];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                uint64_t v8 = [*(id *)(a1 + 40) temporaryAssets];
                unsigned int v9 = [v8 containsObject:v7];

                if (v9) {
                  [*(id *)(a1 + 40) deleteTemporaryFilesForAsset:v7];
                }
              }

              uint64_t v6 = (char *)v6 + 1;
            }
            while (v4 != v6);
            id v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }
          while (v4);
        }

        uint64_t v14 = (char *)v14 + 1;
      }
      while (v14 != v13);
      id v13 = [v11 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }
    while (v13);
  }

  objc_sync_exit(obj);
}

void sub_1000513F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100051544(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100051758(id a1, NSURL *a2, NSError *a3)
{
  id v3 = a3;
  id v4 = +[REMLog cloudkit];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100751718();
  }

  return 1;
}

void sub_100052DE4(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.reminders.cloud.versions-by-operation", v3);
  uint64_t v2 = (void *)qword_1009229D8;
  qword_1009229D8 = (uint64_t)v1;
}

void sub_100052E9C(id a1)
{
  uint64_t v1 = +[NSMapTable weakToStrongObjectsMapTable];
  uint64_t v2 = qword_1009229E8;
  qword_1009229E8 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100052FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100052FE4(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() versionsByRecordIDByOperation];
  id v5 = [v2 objectForKey:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) recordID];
  if (v3)
  {
    id v4 = [v5 objectForKeyedSubscript:v3];
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v4 longLongValue];
  }
}

void sub_100053150(uint64_t a1)
{
  id v5 = [(id)objc_opt_class() versionsByRecordIDByOperation];
  uint64_t v2 = [v5 objectForKey:*(void *)(a1 + 40)];
  if (!v2)
  {
    uint64_t v2 = +[NSMutableDictionary dictionary];
    [v5 setObject:v2 forKey:*(void *)(a1 + 40)];
  }
  id v3 = [*(id *)(a1 + 32) recordID];
  if (v3)
  {
    id v4 = +[NSNumber numberWithLongLong:*(void *)(a1 + 48)];
    [v2 setObject:v4 forKeyedSubscript:v3];
  }
}

void sub_1000532F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100053310(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) recordID];
  if (v2)
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = [objc_opt_class() versionsByRecordIDByOperation];
    id v4 = [v3 objectEnumerator];

    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          unsigned int v9 = [*(id *)(*((void *)&v11 + 1) + 8 * i) objectForKeyedSubscript:v2];
          uint64_t v10 = v9;
          if (v9 && (uint64_t)[v9 longLongValue] >= *(void *)(a1 + 48))
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;

            goto LABEL_13;
          }
        }
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
}

void sub_100053558(id a1)
{
  uint64_t v1 = objc_alloc_init(CKRecordSystemFieldsTransformer);
  uint64_t v2 = qword_1009229F8;
  qword_1009229F8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000535E8(id a1)
{
  uint64_t v1 = objc_alloc_init(CKShareSystemFieldsTransformer);
  uint64_t v2 = qword_100922A08;
  qword_100922A08 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100053F70(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) ckCloudState];
  id v3 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v2 inCloud]);
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"inCloud"];

  if ([*(id *)(a1 + 40) markedForDeletion]) {
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"markedForDeletion"];
  }
  if ([*(id *)(a1 + 40) needsToBePushedToCloud]) {
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"needsToBePushedToCloud"];
  }
  if ([*(id *)(a1 + 40) ckNeedsToBeFetchedFromCloud]) {
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"ckNeedsToBeFetchedFromCloud"];
  }
  if ([*(id *)(a1 + 40) ckNeedsInitialFetchFromCloud]) {
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"ckNeedsInitialFetchFromCloud"];
  }
  if ([*(id *)(a1 + 40) needsToBeDeletedFromCloud]) {
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"needsToBeDeletedFromCloud"];
  }
  id v4 = [*(id *)(a1 + 40) ckCloudState];
  id v5 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v4 latestVersionSyncedToCloud]);
  [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:@"latestVersionSyncedToCloud"];

  id v6 = [*(id *)(a1 + 40) ckCloudState];
  uint64_t v7 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v6 currentLocalVersion]);
  [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"currentLocalVersion"];

  uint64_t v8 = [*(id *)(a1 + 40) ckCloudState];
  uint64_t v9 = [v8 localVersionDate];
  uint64_t v10 = (void *)v9;
  if (v9) {
    CFStringRef v11 = (const __CFString *)v9;
  }
  else {
    CFStringRef v11 = @"nil";
  }
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"localVersionDate"];

  if (([*(id *)(a1 + 40) hasAllMandatoryFields] & 1) == 0)
  {
    long long v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 40) hasAllMandatoryFields]);
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"hasAllMandatoryFields"];
  }
  if ((uint64_t)[*(id *)(a1 + 40) failedToSyncCount] >= 1)
  {
    long long v13 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 40) failedToSyncCount]);
    [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:@"failedToSyncCount"];
  }
  if ((uint64_t)[*(id *)(a1 + 40) numberOfPushAttemptsToWaitCount] >= 1)
  {
    long long v14 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 40) numberOfPushAttemptsToWaitCount]);
    [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:@"numberOfPushAttemptsToWaitCount"];
  }
  if ([*(id *)(a1 + 40) minimumSupportedAppVersion])
  {
    long long v15 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [*(id *)(a1 + 40) minimumSupportedAppVersion]);
    [*(id *)(a1 + 32) setObject:v15 forKeyedSubscript:@"minimumSupportedAppVersion"];
  }
  long long v16 = [*(id *)(a1 + 40) ckServerShare];

  if (v16)
  {
    long long v17 = [*(id *)(a1 + 40) ckServerShare];
    long long v18 = [v17 recordID];
    long long v19 = [v18 ic_loggingDescription];
    [*(id *)(a1 + 32) setObject:v19 forKeyedSubscript:@"ckServerShare"];
  }
  long long v20 = [*(id *)(a1 + 40) ckServerRecord];

  if (v20)
  {
    id v23 = [*(id *)(a1 + 40) ckServerRecord];
    long long v21 = [v23 recordID];
    long long v22 = [v21 ic_loggingDescription];
    [*(id *)(a1 + 32) setObject:v22 forKeyedSubscript:@"ckServerRecord"];
  }
}

void sub_1000546F4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x20u);
}

uint64_t sub_100054714()
{
  return v0;
}

id blockOperationShortNameFromOperationName(void *a1)
{
  uint64_t v1 = qword_100922A18;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_100922A18, &stru_1008AFCF8);
  }
  id v3 = [(id)qword_100922A20 objectForKeyedSubscript:v2];
  id v4 = v3;
  if (!v3) {
    id v3 = v2;
  }
  id v5 = v3;

  return v5;
}

void sub_10005480C(id a1)
{
  v3[0] = ICNSBlockOperationNameCreateFetchZoneChanges;
  v3[1] = ICNSBlockOperationNameDeleteSharesForObjectsFetchAndCompletion;
  v4[0] = ICNSBlockOperationShortNameCreateFetchZoneChanges;
  v4[1] = ICNSBlockOperationShortNameDeleteSharesForObjectsFetchAndCompletion;
  v3[2] = ICNSBlockOperationNameFetchCompletion;
  v3[3] = ICNSBlockOperationNameFetchDatabaseChangesCompletion;
  v4[2] = ICNSBlockOperationShortNameFetchCompletion;
  v4[3] = ICNSBlockOperationShortNameFetchDatabaseChangesCompletion;
  void v3[4] = ICNSBlockOperationNameFetchZoneChangesCompletion;
  void v3[5] = ICNSBlockOperationNameFinishOperations;
  void v4[4] = ICNSBlockOperationShortNameFetchZoneChangesCompletion;
  void v4[5] = ICNSBlockOperationShortNameFinishOperations;
  v3[6] = ICNSBlockOperationNameProcessCompletion;
  v3[7] = ICNSBlockOperationNameProcessCompletionForOperations;
  v4[6] = ICNSBlockOperationShortNameProcessCompletion;
  v4[7] = ICNSBlockOperationShortNameProcessCompletionForOperations;
  v3[8] = ICNSBlockOperationNameProcessDirtyObjects;
  v3[9] = ICNSBlockOperationNameProcessLocalObjects;
  v4[8] = ICNSBlockOperationShortNameProcessDirtyObjects;
  v4[9] = ICNSBlockOperationShortNameProcessLocalObjects;
  v3[10] = ICNSBlockOperationNameProcessObjectsForContextDidSave;
  v3[11] = ICNSBlockOperationNameProcessObjectsForReachabilityChanged;
  v4[10] = ICNSBlockOperationShortNameProcessObjectsForContextDidSave;
  v4[11] = ICNSBlockOperationShortNameProcessObjectsForReachabilityChanged;
  v3[12] = ICNSBlockOperationNameProcessObjectsForRetryOperations;
  v4[12] = ICNSBlockOperationShortNameProcessObjectsForRetryOperations;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:13];
  id v2 = (void *)qword_100922A20;
  qword_100922A20 = v1;
}

void sub_100055F5C(uint64_t a1)
{
  v53[0] = objc_opt_class();
  v53[1] = objc_opt_class();
  v53[2] = objc_opt_class();
  id v2 = +[NSArray arrayWithObjects:v53 count:3];
  __int16 v34 = +[NSMutableArray array];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v42 objects:v52 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v43;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v43 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = [*(id *)(*((void *)&v42 + 1) + 8 * i) fetchRequest];
        [v7 setPropertiesToFetch:&off_1008D7A90];
        uint64_t v51 = *(void *)(a1 + 32);
        uint64_t v8 = +[NSArray arrayWithObjects:&v51 count:1];
        [v7 setAffectedStores:v8];

        [v7 setFetchBatchSize:50];
        uint64_t v9 = *(void **)(a1 + 40);
        id v41 = 0;
        uint64_t v10 = [v9 executeFetchRequest:v7 error:&v41];
        id v11 = v41;
        if (!v10)
        {
          uint64_t v31 = +[REMLogStore container];
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_1007520C4((uint64_t)v11, v31);
          }

          id v30 = obj;
          goto LABEL_31;
        }
        [v34 addObjectsFromArray:v10];
      }
      id v4 = [obj countByEnumeratingWithState:&v42 objects:v52 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v12 = v34;
  id v13 = [v12 countByEnumeratingWithState:&v37 objects:v50 count:16];
  if (v13)
  {
    id v15 = v13;
    unint64_t v16 = 0;
    uint64_t v17 = *(void *)v38;
    *(void *)&long long v14 = 138412290;
    long long v32 = v14;
    do
    {
      long long v18 = 0;
      do
      {
        if (*(void *)v38 != v17) {
          objc_enumerationMutation(v12);
        }
        uint64_t v19 = *(void *)(*((void *)&v37 + 1) + 8 * (void)v18);
        [*(id *)(a1 + 48) setTotalMigratedCount:((char *)[*(id *)(a1 + 48) totalMigratedCount] + 1)];
        [*(id *)(a1 + 48) migrateTokenResolutionMapInObject:v19];
        [*(id *)(a1 + 48) migrateCRDTsInObject:v19];
        if (v16 < 0x31)
        {
          ++v16;
        }
        else
        {
          long long v20 = +[REMLogStore container];
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            long long v21 = [*(id *)(a1 + 40) updatedObjects];
            id v22 = [v21 count];
            id v23 = [*(id *)(a1 + 48) totalMigratedCount];
            *(_DWORD *)long long buf = 134218240;
            id v47 = v22;
            __int16 v48 = 2048;
            id v49 = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Saving batch {updatedObjectsCount: %ld, totalMigratedCount: %ld}", buf, 0x16u);
          }
          __int16 v24 = *(void **)(a1 + 40);
          id v36 = 0;
          unsigned __int8 v25 = [v24 save:&v36];
          id v26 = v36;
          if ((v25 & 1) == 0)
          {
            long long v27 = +[REMLogStore container];
            if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)long long buf = v32;
              id v47 = v26;
              _os_log_fault_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Failed to save batch. Migration error {error: %@}", buf, 0xCu);
            }
          }
          unint64_t v16 = 0;
        }
        long long v18 = (char *)v18 + 1;
      }
      while (v15 != v18);
      id v15 = [v12 countByEnumeratingWithState:&v37 objects:v50 count:16];
    }
    while (v15);
  }

  id v28 = *(void **)(a1 + 40);
  id v35 = 0;
  unsigned __int8 v29 = [v28 save:&v35];
  id v30 = v35;
  if ((v29 & 1) == 0)
  {
    uint64_t v7 = +[REMLogStore container];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_10075204C((uint64_t)v30, v7);
    }
LABEL_31:
  }
}

void sub_100056F58(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1000570F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100057110(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100057120(uint64_t a1)
{
}

void sub_100057128(uint64_t a1, void *a2)
{
  id v8 = [a2 persistentStoreCoordinator];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [v8 persistentStores];
  uint64_t v5 = [v3 _currentREMChangeTokenFromNSPersistentStores:v4 persistentStoreCoordinator:v8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1000572A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000572BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _persistenceStoreIDsForAccountTypes:*(void *)(a1 + 48)];
  uint64_t v5 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v4 count]);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v6 = v4;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v19 + 1) + 8 * (void)v10);
        id v12 = [v3 persistentStoreCoordinator:v19];
        id v13 = [v12 persistentStoreForIdentifier:v11];

        if (v13) {
          [v5 addObject:v13];
        }

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }

  long long v14 = *(void **)(a1 + 32);
  id v15 = [v3 persistentStoreCoordinator];
  uint64_t v16 = [v14 _currentREMChangeTokenFromNSPersistentStores:v5 persistentStoreCoordinator:v15];
  uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;
}

void sub_100057588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000575A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _persistenceStoreIDForAccountID:*(void *)(a1 + 40)];
  uint64_t v5 = [v3 persistentStoreCoordinator];
  id v6 = [v5 persistentStoreForIdentifier:v4];

  if (v6)
  {
    id v7 = *(void **)(a1 + 32);
    id v13 = v6;
    id v8 = +[NSArray arrayWithObjects:&v13 count:1];
    uint64_t v9 = [v3 persistentStoreCoordinator];
    uint64_t v10 = [v7 _currentREMChangeTokenFromNSPersistentStores:v8 persistentStoreCoordinator:v9];
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_1000577D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000577E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) _persistenceStoreIDForAccountID:*(void *)(a1 + 40)];
  uint64_t v5 = [v3 persistentStoreCoordinator];
  id v6 = [v5 persistentStoreForIdentifier:v4];

  if (v6)
  {
    id v7 = +[NSDate dateWithTimeIntervalSince1970:0.0];
    id v8 = +[NSPersistentHistoryChangeRequest fetchHistoryAfterDate:v7];

    [v8 setFetchLimit:1];
    __int16 v24 = v6;
    uint64_t v9 = +[NSArray arrayWithObjects:&v24 count:1];
    [v8 setAffectedStores:v9];

    [v8 setResultType:3];
    id v23 = 0;
    uint64_t v10 = [v3 executeRequest:v8 error:&v23];
    id v11 = v23;
    if (v11)
    {
      id v12 = +[REMLog changeTracking];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1007523E4(v3);
      }
    }
    else
    {
      objc_opt_class();
      id v13 = [v10 result];
      id v12 = REMDynamicCast();

      long long v14 = [v12 firstObject];
      id v15 = [v14 token];

      if (v15)
      {
        long long v22 = v10;
        id v16 = objc_alloc((Class)REMNSPersistentHistoryToken);
        uint64_t v17 = [v14 token];
        long long v18 = v16;
        uint64_t v10 = v22;
        id v19 = [v18 initWithPersistentHistoryToken:v17];
        uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
        long long v21 = *(void **)(v20 + 40);
        *(void *)(v20 + 40) = v19;
      }
      else
      {
        uint64_t v17 = +[REMLog changeTracking];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_100752354(v3);
        }
      }
    }
  }
}

void sub_100057BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100057C08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = v6;
  if (v6)
  {
    long long v14 = v6;
    id v8 = [*(id *)(a1 + 32) _changeTokenFromCDTrackingState:v6 error:a4];
    if (v8)
    {
      id v9 = objc_alloc_init((Class)REMChangeTrackingState);
      [v9 setLastConsumedChangeToken:v8];
      uint64_t v10 = [v14 lastConsumedDate];
      [v9 setLastConsumedDate:v10];

      uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v9;
    }
    id v7 = v14;
  }

  return _objc_release_x1(v6, v7);
}

void sub_100057F68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (!v8)
  {
    uint64_t v10 = +[REMCDChangeTrackingState entity];
    uint64_t v11 = [v10 name];

    id v9 = +[NSEntityDescription insertNewObjectForEntityForName:v11 inManagedObjectContext:v7];
    [v7 assignObject:v9 toPersistentStore:*(void *)(a1 + 32)];
  }
  id v12 = [*(id *)(a1 + 40) clientName];
  [v9 setClientName:v12];

  id v13 = [*(id *)(a1 + 40) accountIdentifier];
  [v9 setAccountIdentifier:v13];

  [v9 setLastConsumedChangeTokenData:*(void *)(a1 + 48)];
  long long v14 = objc_opt_new();
  [v9 setLastConsumedDate:v14];

  id v17 = 0;
  [v7 save:&v17];
  id v15 = v17;
  if (v15)
  {
    id v16 = +[REMLog changeTracking];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_100752670(v15, v16);
    }

    if (a4)
    {
      *a4 = +[NSError errorWithREMChangeErrorCode:8 underlyingError:v15];
    }
  }
}

void sub_100058328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10005834C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = [v4 _fetchRequestWithPredicateUsingEntityNames:v5 managedObjectContext:v3 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    [*(id *)(a1 + 48) setFetchRequest:v7];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    id v9 = *(void **)(v8 + 40);
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    if (*(void *)(v8 + 40))
    {
      uint64_t v16 = [*(id *)(a1 + 32) _errorChangeSetWithError:];
      uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
      id v15 = *(void **)(v17 + 40);
      *(void *)(v17 + 40) = v16;
      goto LABEL_6;
    }
    id v9 = 0;
  }
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  id v12 = (id *)(v8 + 40);
  id v18 = v9;
  uint64_t v13 = [v10 _resultChangeSetByExecutingRequest:v11 managedObjectContext:v3 error:&v18];
  objc_storeStrong(v12, v18);
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;
LABEL_6:
}

void sub_100058718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_10005873C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 32))
  {
    uint64_t v4 = +[NSPersistentHistoryChangeRequest fetchHistoryAfterToken:](NSPersistentHistoryChangeRequest, "fetchHistoryAfterToken:");
  }
  else
  {
    uint64_t v5 = +[NSDate dateWithTimeIntervalSince1970:0.0];
    uint64_t v4 = +[NSPersistentHistoryChangeRequest fetchHistoryAfterDate:v5];
  }
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v8 + 40);
  id v9 = [v6 _fetchRequestWithPredicateUsingEntityNames:v7 managedObjectContext:v3 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    [v4 setFetchRequest:v9];
  }
  else if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
  {
    uint64_t v15 = [*(id *)(a1 + 40) _errorChangeSetWithError:x0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v14 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
    goto LABEL_11;
  }
  if (*(void *)(a1 + 72)) {
    [v4 setFetchLimit:];
  }
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
  id v17 = *(id *)(v11 + 40);
  uint64_t v12 = [v10 _resultChangeSetByExecutingRequest:v4 managedObjectContext:v3 error:&v17];
  objc_storeStrong((id *)(v11 + 40), v17);
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
LABEL_11:
}

void sub_100058F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100058F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v62 objects:v73 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v7 = *(void *)v63;
    *(void *)&long long v5 = 138412802;
    long long v44 = v5;
    uint64_t v8 = INDateRelevanceProvider_ptr;
    id v9 = INDateRelevanceProvider_ptr;
    id v46 = v3;
    uint64_t v47 = a1;
    uint64_t v45 = *(void *)v63;
    do
    {
      uint64_t v10 = 0;
      id v52 = v6;
      do
      {
        uint64_t v11 = v7;
        if (*(void *)v63 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void *)(*((void *)&v62 + 1) + 8 * v10);
        uint64_t v14 = *(void **)(a1 + 40);
        id v61 = 0;
        uint64_t v15 = [v14 _fetchCDAuxiliaryChangeInfosWithObjectID:v12 inManagedObjectContext:v3 error:&v61];
        id v16 = v61;
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = v15 == 0;
        }
        __int16 v53 = v15;
        if (v17)
        {
          uint64_t v18 = a1;
          id v19 = v3;
          id v20 = v16;
          uint64_t v21 = +[NSError errorWithREMChangeErrorCode:10 underlyingError:v16];
          uint64_t v22 = v18;
          uint64_t v23 = *(void *)(*(void *)(v18 + 56) + 8);
          unsigned __int8 v25 = *(void **)(v23 + 40);
          *(void *)(v23 + 40) = v21;
          uint64_t v7 = v11;
          id v24 = v52;
        }
        else
        {
          uint64_t v49 = v12;
          __int16 v50 = v13;
          uint64_t v51 = v10;
          unsigned __int8 v25 = [v15 entity];
          __int16 v54 = +[NSMutableDictionary dictionary];
          long long v57 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          id v55 = [v25 propertiesByName];
          id v26 = [v55 countByEnumeratingWithState:&v57 objects:v72 count:16];
          if (v26)
          {
            id v27 = v26;
            uint64_t v28 = *(void *)v58;
            do
            {
              for (i = 0; i != v27; i = (char *)i + 1)
              {
                if (*(void *)v58 != v28) {
                  objc_enumerationMutation(v55);
                }
                uint64_t v30 = *(void *)(*((void *)&v57 + 1) + 8 * i);
                uint64_t v31 = [v25 propertiesByName:v44];
                long long v32 = [v31 objectForKeyedSubscript:v30];

                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  uint64_t v33 = [v15 valueForKey:v30];
                  if (v33)
                  {
                    __int16 v34 = (void *)v33;
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      [v34 UUIDString];
                      id v35 = v9;
                      uint64_t v37 = v36 = v8;

                      __int16 v34 = (void *)v37;
                      uint64_t v8 = v36;
                      id v9 = v35;
                      uint64_t v15 = v53;
                    }
                    [v54 setObject:v34 forKey:v30];
                  }
                }
              }
              id v27 = [v55 countByEnumeratingWithState:&v57 objects:v72 count:16];
            }
            while (v27);
          }

          id v56 = 0;
          long long v38 = +[NSPropertyListSerialization dataWithPropertyList:v54 format:100 options:0 error:&v56];
          id v20 = v56;
          if (v20 || !v38)
          {
            long long v39 = +[REMLog changeTracking];
            id v24 = v52;
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              long long v43 = [v20 localizedDescription];
              *(_DWORD *)long long buf = v44;
              uint64_t v67 = v49;
              __int16 v68 = 2112;
              __int16 v69 = v43;
              __int16 v70 = 2112;
              long long v71 = v54;
              _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Could not encode CD object into plist data {objectID: %@, error: %@, dictionary: %@}", buf, 0x20u);
            }
            uint64_t v40 = +[NSError errorWithREMChangeErrorCode:10 underlyingError:v20];
            uint64_t v22 = v47;
            uint64_t v41 = *(void *)(*(void *)(v47 + 56) + 8);
            long long v42 = *(void **)(v41 + 40);
            *(void *)(v41 + 40) = v40;
          }
          else
          {
            uint64_t v22 = v47;
            [*(id *)(v47 + 48) setObject:v38 forKey:v49];
            id v24 = v52;
          }
          uint64_t v13 = v50;
          uint64_t v10 = v51;

          uint64_t v7 = v45;
          id v19 = v46;
        }

        ++v10;
        id v3 = v19;
        a1 = v22;
      }
      while ((id)v10 != v24);
      id v6 = [obj countByEnumeratingWithState:&v62 objects:v73 count:16];
    }
    while (v6);
  }
}

void sub_10005A720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005A738(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = a1 + 32;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  id v6 = [a2 executeRequest:v3 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void **)(*(void *)(*(void *)(v4 + 8) + 8) + 40);
  if (!v7)
  {
    if (!v6)
    {
      BOOL v17 = +[REMLog changeTracking];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
        sub_100752894(v4, v17, v18, v19, v20, v21, v22, v23);
      }
    }
    objc_opt_class();
    id v9 = [v6 result];
    uint64_t v10 = REMDynamicCast();

    if (v10)
    {
      if ([v10 BOOLValue]) {
        goto LABEL_12;
      }
      uint64_t v11 = 3;
    }
    else
    {
      uint64_t v11 = 2;
    }
    uint64_t v14 = +[NSError errorWithREMChangeErrorCode:v11];
    uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    goto LABEL_12;
  }
  if ([v7 code] == (id)134301) {
    uint64_t v8 = 4;
  }
  else {
    uint64_t v8 = 1;
  }
  uint64_t v12 = +[NSError errorWithREMChangeErrorCode:v8 underlyingError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
LABEL_12:
}

void sub_10005AA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005AA1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMCDChangeTrackingState fetchRequest];
  uint64_t v5 = [*(id *)(a1 + 32) clientName];
  id v6 = [*(id *)(a1 + 32) accountIdentifier];
  uint64_t v7 = +[NSPredicate predicateWithFormat:@"clientName == %@ AND accountIdentifier == %@", v5, v6];
  [v4 setPredicate:v7];

  id v24 = 0;
  uint64_t v8 = [v3 executeFetchRequest:v4 error:&v24];
  id v9 = v24;
  if (v9)
  {
    uint64_t v10 = +[REMLog changeTracking];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_100752974(a1 + 32, v9);
    }

    uint64_t v11 = +[NSError errorWithREMChangeErrorCode:8 underlyingError:v9];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    if ((unint64_t)[v8 count] >= 2)
    {
      id v16 = +[REMLog changeTracking];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        sub_100752904(a1 + 32, v16, v17, v18, v19, v20, v21, v22);
      }
    }
    uint64_t v13 = [v8 firstObject];
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v15 + 40);
    (*(void (**)(void))(v14 + 16))();
    objc_storeStrong((id *)(v15 + 40), obj);
  }
}

void sub_10005AF54(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_10005B184(id a1)
{
  uint64_t v1 = (void *)qword_100922A30;
  qword_100922A30 = (uint64_t)&off_1008D7AA8;
}

void sub_10005B72C(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  uint64_t v6 = [v5 previousServerChangeToken];

  if (v6)
  {
    uint64_t v7 = [v5 previousServerChangeToken];
    uint64_t v8 = [v7 data];
    id v9 = [v8 base64EncodedStringWithOptions:0];
  }
  else
  {
    id v9 = @"(none)";
  }
  uint64_t v10 = [v12 ic_loggingDescription];
  if (v9) {
    CFStringRef v11 = v9;
  }
  else {
    CFStringRef v11 = @"(none)";
  }
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:v10];
}

id *sub_10005BE70(id *result)
{
  if (!qword_100922A38) {
    return (id *)_[result[4] initSharedSettingsWithOptions:721457];
  }
  return result;
}

void sub_10005C28C(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf)
{
  _os_log_error_impl(a1, v11, OS_LOG_TYPE_ERROR, a4, &buf, 0x16u);
}

void sub_10005CB68(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  uint64_t v4 = REMDynamicCast();

  id v5 = [v4 backingCDObject];
  if (v5)
  {
    uint64_t v6 = [*(id *)(a1 + 32) managedObjectContext];
    [v6 refreshObject:v5 mergeChanges:0];
  }
  else
  {
    uint64_t v6 = +[REMLogStore write];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_100753338(v4);
    }
  }
}

uint64_t isCloudContextSyncReasonUserInitiated(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    if ([v1 isEqualToString:@"SyncInterface(AppDelegate)"]) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = (uint64_t)[v2 isEqualToString:@"SyncInterface(UpdateAccounts)"];
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_10005CF84(id a1)
{
  v3[0] = objc_opt_class();
  v3[1] = objc_opt_class();
  v3[2] = objc_opt_class();
  v3[3] = objc_opt_class();
  void v3[4] = objc_opt_class();
  void v3[5] = objc_opt_class();
  v3[6] = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:v3 count:7];
  id v2 = (void *)qword_100922A50;
  qword_100922A50 = v1;
}

void sub_10005D0B8(id a1)
{
  uint64_t v1 = +[NSMutableArray array];
  id v2 = +[REMCDObject subclassesOfREMCDObjectRepresentingRootCoreDataEntities];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005D194;
  v6[3] = &unk_1008B0080;
  id v7 = v1;
  id v3 = v1;
  [v2 enumerateObjectsUsingBlock:v6];

  uint64_t v4 = +[NSArray arrayWithArray:v3];
  id v5 = (void *)qword_100922A60;
  qword_100922A60 = v4;
}

uint64_t sub_10005D194(uint64_t a1, Class aClass)
{
  NSStringFromClass(aClass);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    id v3 = [*(id *)(a1 + 32) addObject:v3];
    id v4 = v6;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_10005D3C0()
{
  return objc_opt_isKindOfClass() & 1;
}

void sub_10005D93C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) addObject:v2];
}

void sub_10005DFAC(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (*(unsigned char *)(a1 + 48)
    && (objc_opt_class(), REMDynamicCast(), (id v6 = objc_claimAutoreleasedReturnValue()) != 0))
  {
    id v7 = v6;
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = [v6 ic_prettyDescriptionWithTabLevel:1];
    [v8 appendFormat:@"\t%@ = %@\n", v10, v9];
  }
  else
  {
    [*(id *)(a1 + 32) appendFormat:*(void *)(a1 + 40), v10, v5];
  }
}

void sub_10005E780(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) zoneName];
  id v3 = (void *)v2;
  if (v2) {
    CFStringRef v4 = (const __CFString *)v2;
  }
  else {
    CFStringRef v4 = &stru_1008D0E58;
  }
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:@"zoneName"];

  id v5 = [*(id *)(a1 + 40) serverChangeToken];
  uint64_t v6 = [v5 ic_loggingDescription];
  id v7 = (void *)v6;
  if (v6) {
    CFStringRef v8 = (const __CFString *)v6;
  }
  else {
    CFStringRef v8 = &stru_1008D0E58;
  }
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"serverChangeToken"];

  +[NSNumber numberWithShort:](NSNumber, "numberWithShort:", [*(id *)(a1 + 40) databaseScope]);
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"databaseScope"];
}

void sub_10005EBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005EBB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005EBC8(uint64_t a1)
{
}

void sub_10005EBD0(uint64_t a1)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v2 = +[NSArray arrayWithObjects:&v8 count:1];
  id v3 = +[REMCDObject ic_objectsFromObjectIDs:v2 context:*(void *)(a1 + 40)];

  CFStringRef v4 = [v3 firstObject];
  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 48) existingShareForObject:v4];
    uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
}

void sub_10005EDFC(uint64_t a1)
{
  uint64_t v26 = *(void *)(a1 + 32);
  uint64_t v2 = +[NSArray arrayWithObjects:&v26 count:1];
  id v3 = +[REMCDObject ic_objectsFromObjectIDs:v2 context:*(void *)(a1 + 40)];

  CFStringRef v4 = [v3 firstObject];
  if (v4)
  {
    uint64_t v5 = [*(id *)(a1 + 48) existingShareForObject:v4];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 56);
      if (v7) {
        [v5 setObject:v7 forKeyedSubscript:CKShareThumbnailImageDataKey];
      }
      uint64_t v8 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = [v4 shortLoggingDescription];
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using existing share for %@", buf, 0xCu);
      }
      (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    }
    else
    {
      uint64_t v12 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = [v4 shortLoggingDescription];
        *(_DWORD *)long long buf = 138412290;
        unsigned __int8 v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No existing share for %@", buf, 0xCu);
      }
      id v14 = [*(id *)(a1 + 48) newShareForObject:v4];
      if (v14)
      {
        uint64_t v15 = *(void **)(a1 + 48);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        void v19[2] = sub_10005F190;
        v19[3] = &unk_1008B01A8;
        id v20 = *(id *)(a1 + 64);
        uint64_t v22 = &stru_1008B0158;
        id v21 = *(id *)(a1 + 56);
        id v23 = *(id *)(a1 + 72);
        [v15 prepareShare:v14 forObject:v4 completionHandler:v19];

        id v16 = v20;
      }
      else
      {
        id v16 = +[NSString stringWithFormat:@"Failed to create share for object {object: %@}", v4];
        uint64_t v17 = *(void *)(a1 + 72);
        uint64_t v18 = +[REMError internalErrorWithDebugDescription:v16];
        (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);
      }
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"The object we want to share is not found (objectID: %@}"), *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 72);
    CFStringRef v11 = +[REMError internalErrorWithDebugDescription:v6];
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
  }
}

void sub_10005F174(id a1, CKShare *a2, NSData *a3)
{
  if (a3) {
    [(CKShare *)a2 setObject:a3 forKeyedSubscript:CKShareThumbnailImageDataKey];
  }
}

void sub_10005F190(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005F294;
  block[3] = &unk_1008B0180;
  id v14 = *(id *)(a1 + 48);
  id v11 = v5;
  id v12 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 56);
  id v13 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_10005F294(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 64) + 16);

  return v2();
}

void sub_10005FDB4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) managedObjectContext];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10005FE7C;
  v6[3] = &unk_1008AEC28;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(a1 + 48);
  id v7 = v3;
  uint64_t v8 = v4;
  id v9 = v5;
  id v10 = *(id *)(a1 + 56);
  [v2 performBlock:v6];
}

void sub_10005FE7C(uint64_t a1)
{
  uint64_t v2 = +[REMLog cloudkitCollaboration];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    id v3 = [*(id *)(a1 + 32) shortLoggingDescription];
    *(_DWORD *)long long buf = 138412290;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Finished waiting for operations before preparing share for %@", buf, 0xCu);
  }
  id v5 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10005FFBC;
  v7[3] = &unk_1008B01F8;
  void v7[4] = v5;
  id v8 = *(id *)(a1 + 56);
  [v5 saveShare:v4 forObject:v6 completionHandler:v7];
}

void sub_10005FFBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = a2;
  [v5 setObjectContext:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000602A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000602CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v9 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) shortLoggingDescription];
      int v18 = 138412290;
      uint64_t v19 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Retrying to save share for %@", (uint8_t *)&v18, 0xCu);
    }
    id v11 = [*(id *)(a1 + 32) ckServerShare];

    if (v11)
    {
      id v12 = [*(id *)(a1 + 32) ckServerShare];
      [*(id *)(a1 + 40) populateShare:v12 withObject:*(void *)(a1 + 32)];
      id v13 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        id v14 = [v12 ic_loggingDescription];
        int v18 = 138412290;
        uint64_t v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Using saved server share when retrying %@", (uint8_t *)&v18, 0xCu);
      }
    }
    else
    {
      id v12 = *(id *)(a1 + 48);
    }
    uint64_t v15 = [*(id *)(a1 + 40) rootRecordForObject:*(void *)(a1 + 32)];
    uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    [*(id *)(a1 + 40) saveShare:v12 withRootRecord:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) object:*(void *)(a1 + 32) completionHandler:*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8) {
      (*(void (**)(uint64_t, id, void))(v8 + 16))(v8, v5, 0);
    }
  }
}

void sub_10006094C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006098C(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained(a1 + 9);
  id v9 = [a1[4] managedObjectContext];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100060AEC;
  void v14[3] = &unk_1008B02B0;
  id v15 = v7;
  id v16 = a1[4];
  id v17 = WeakRetained;
  id v18 = a1[5];
  id v19 = a1[6];
  id v20 = a1[7];
  id v10 = a1[8];
  id v21 = v6;
  id v22 = v10;
  id v11 = v6;
  id v12 = WeakRetained;
  id v13 = v7;
  [v9 performBlock:v14];
}

void sub_100060AEC(uint64_t a1)
{
  id v3 = (void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 code] == (id)2)
    {
      uint64_t v4 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_100753A68(a1);
      }

      id v5 = [*(id *)(a1 + 32) userInfo];
      id v6 = [v5 objectForKeyedSubscript:CKPartialErrorsByItemIDKey];

      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100060E0C;
      v16[3] = &unk_1008B0248;
      id v17 = *(id *)(a1 + 40);
      id v18 = *(id *)(a1 + 48);
      id v19 = *(id *)(a1 + 56);
      id v20 = *(id *)(a1 + 64);
      id v21 = *(id *)(a1 + 72);
      [v6 enumerateKeysAndObjectsUsingBlock:v16];
    }
    id v7 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100753970();
    }

    uint64_t v8 = *(void *)(a1 + 88);
    if (v8) {
      (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, 0, *v3);
    }
  }
  else
  {
    id v9 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 72) ic_loggingDescription];
      id v11 = [*(id *)(a1 + 48) ic_loggingDescription];
      *(_DWORD *)long long buf = 138412546;
      id v23 = v10;
      __int16 v24 = 2112;
      unsigned __int8 v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Saved share %@ %@", buf, 0x16u);
    }
    id v12 = [*(id *)(a1 + 80) indexOfObjectPassingTest:&stru_1008B0288];
    if (v12 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      id v13 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_1007538C8(a1);
      }
      id v14 = 0;
    }
    else
    {
      id v14 = [*(id *)(a1 + 80) objectAtIndex:v12];
      id v13 = [*(id *)(a1 + 40) managedObjectContext];
      [*(id *)(a1 + 40) setServerShareIfNewer:v14];
      [v13 ic_save];
    }

    uint64_t v15 = *(void *)(a1 + 88);
    if (v15) {
      (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v14, 0);
    }
  }
}

void sub_100060E0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[REMLog cloudkitCollaboration];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    __int16 v24 = [*(id *)(a1 + 32) shortLoggingDescription];
    unsigned __int8 v25 = [v5 ic_loggingDescription];
    uint64_t v26 = [*(id *)(a1 + 40) ic_loggingDescription];
    int v27 = 138413058;
    uint64_t v28 = v24;
    __int16 v29 = 2112;
    uint64_t v30 = v25;
    __int16 v31 = 2112;
    long long v32 = v26;
    __int16 v33 = 2112;
    id v34 = v6;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error saving share for %@ when saving record ID %@ %@: %@", (uint8_t *)&v27, 0x2Au);
  }
  if ([v6 code] == (id)14)
  {
    uint64_t v8 = [v6 userInfo];
    id v9 = [v8 objectForKeyedSubscript:CKRecordChangedErrorServerRecordKey];

    if (v9)
    {
      id v10 = [*(id *)(a1 + 48) recordID];
      unsigned int v11 = [v5 isEqual:v10];

      if (v11)
      {
        id v12 = +[REMLog cloudkitCollaboration];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          id v13 = [v9 ic_loggingDescription];
          id v14 = [*(id *)(a1 + 32) shortLoggingDescription];
          uint64_t v15 = [[*(id *)(a1 + 40) ic_loggingDescription];
          int v27 = 138412802;
          uint64_t v28 = v13;
          __int16 v29 = 2112;
          uint64_t v30 = v14;
          __int16 v31 = 2112;
          long long v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Saving server record %@ for %@ %@", (uint8_t *)&v27, 0x20u);
        }
        [*(id *)(a1 + 32) objectWasFetchedFromCloudWithRecord:v9 accountID:*(void *)(a1 + 56)];
        goto LABEL_17;
      }
      id v17 = [*(id *)(a1 + 64) recordID];
      unsigned int v18 = [v5 isEqual:v17];

      if (!v18)
      {
LABEL_17:
        id v23 = [*(id *)(a1 + 32) managedObjectContext];
        [v23 ic_saveWithLogDescription:@"Saving Share"];

        goto LABEL_18;
      }
      id v19 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [v9 ic_loggingDescription];
        id v21 = [*(id *)(a1 + 32) shortLoggingDescription];
        id v22 = [*(id *)(a1 + 40) ic_loggingDescription];
        int v27 = 138412802;
        uint64_t v28 = v20;
        __int16 v29 = 2112;
        uint64_t v30 = v21;
        __int16 v31 = 2112;
        long long v32 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Saving server share %@ for %@ %@", (uint8_t *)&v27, 0x20u);
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [*(id *)(a1 + 32) setServerShareIfNewer:v9];
        goto LABEL_17;
      }
      id v16 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
        sub_100753BEC();
      }
    }
    else
    {
      id v16 = +[REMLog cloudkitCollaboration];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_100753B10();
      }
    }

    goto LABEL_17;
  }
LABEL_18:
}

BOOL sub_1000611F0(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  return isKindOfClass & 1;
}

void sub_1000616FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006173C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  objc_opt_class();
  id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

  uint64_t v8 = REMDynamicCast();

  id v9 = +[REMLog cloudkitCollaboration];
  id v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = [v8 ic_loggingDescription];
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
      id v13 = [WeakRetained ic_loggingDescription];
      id v14 = [*(id *)(a1 + 40) ckIdentifier];
      int v20 = 138412802;
      id v21 = v11;
      __int16 v22 = 2114;
      id v23 = v13;
      __int16 v24 = 2114;
      id v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Fetched share %@ %{public}@ %{public}@", (uint8_t *)&v20, 0x20u);
    }
    [*(id *)(a1 + 48) saveServerShare:v8 accountID:*(void *)(a1 + 56) completionHandler:*(void *)(a1 + 64)];
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v17 = [*(id *)(a1 + 32) ic_loggingDescription];
      id v18 = objc_loadWeakRetained((id *)(a1 + 72));
      id v19 = [v18 ic_loggingDescription];
      int v20 = 138412802;
      id v21 = v17;
      __int16 v22 = 2112;
      id v23 = v19;
      __int16 v24 = 2112;
      id v25 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Error fetching share %@ %@: %@", (uint8_t *)&v20, 0x20u);
    }
    uint64_t v15 = *(void *)(a1 + 64);
    id v16 = +[NSError errorWithDomain:@"com.apple.reminders" code:214 userInfo:0];
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }
}

void sub_100061A7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100061B2C;
  v7[3] = &unk_1008ADD50;
  id v4 = *(NSObject **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100061B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100061C60(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectForShare:*(void *)(a1 + 40) accountID:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
  id v3 = +[REMLog cloudkitCollaboration];
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      id v5 = objc_opt_class();
      id v6 = v5;
      id v7 = [v2 identifier];
      id v8 = [[*(id *)(a1 + 40) ic_loggingDescription];
      int v10 = 138543874;
      unsigned int v11 = v5;
      __int16 v12 = 2114;
      id v13 = v7;
      __int16 v14 = 2112;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setting server share on %{public}@ %{public}@ %@", (uint8_t *)&v10, 0x20u);
    }
    [v2 setServerShareIfNewer:*(void *)(a1 + 40)];
    [*(id *)(a1 + 56) ic_save];
  }
  else
  {
    if (v4)
    {
      id v9 = [*(id *)(a1 + 40) ic_loggingDescription];
      int v10 = 138412290;
      unsigned int v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Couldn't find cloud object for share %@", (uint8_t *)&v10, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10006215C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) objectForShare:v2 accountID:*(void *)(a1 + 48) context:*(void *)(a1 + 56)];
    if (!v3) {
      goto LABEL_10;
    }
  }
  else if (!*(void *)(a1 + 64) {
         || ([*(id *)(a1 + 40) cloudContext],
  }
             BOOL v4 = objc_claimAutoreleasedReturnValue(),
             [v4 existingCloudObjectForRecordID:*(void *)(a1 + 64) recordType:0 accountID:*(void *)(a1 + 48) context:*(void *)(a1 + 56)], id v3 = objc_claimAutoreleasedReturnValue(), v4, !v3))
  {
LABEL_10:
    id v3 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = [*(id *)(a1 + 32) ic_loggingDescription];
      *(_DWORD *)long long buf = 138412290;
      id v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Couldn't find cloud object for share %@", buf, 0xCu);
    }
    goto LABEL_16;
  }
  unsigned int v5 = [v3 isOwnedByCurrentUser];
  id v6 = +[REMLog cloudkitCollaboration];
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      id v8 = [v3 shortLoggingDescription];
      id v9 = [[*(id *)(a1 + 32) ic_loggingDescription];
      *(_DWORD *)long long buf = 138412546;
      id v17 = v8;
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User stopped sharing %@ %@", buf, 0x16u);
    }
    [v3 setCkNeedsToBeFetchedFromCloud:1];
    [v3 setCkServerShare:0];
  }
  else
  {
    if (v7)
    {
      unsigned int v11 = [v3 shortLoggingDescription];
      __int16 v12 = [[*(id *)(a1 + 32) ic_loggingDescription];
      *(_DWORD *)long long buf = 138412546;
      id v17 = v11;
      __int16 v18 = 2112;
      id v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User removed themselves from shared %@ %@", buf, 0x16u);
    }
    [v3 markForDeletion];
    [v3 deleteFromLocalDatabase];
  }
  [*(id *)(a1 + 56) ic_save];
LABEL_16:

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100062430;
  block[3] = &unk_1008AE138;
  id v13 = *(NSObject **)(a1 + 72);
  id v15 = *(id *)(a1 + 80);
  dispatch_async(v13, block);
}

uint64_t sub_100062430(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100062A44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100062A84(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) cloudContext];
  uint64_t v2 = [v7 primaryCloudKitAccountInContext:*(void *)(a1 + 40)];
  id v3 = [v2 identifier];
  uint64_t v4 = [v3 UUIDString];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100062B18(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) share];
  uint64_t v4 = [v2 objectForShare:v3 accountID:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) context:*(void *)(a1 + 48)];

  if (v4
    && ([v4 ckServerShare], (uint64_t v5 = objc_claimAutoreleasedReturnValue()) != 0)
    && (id v6 = (void *)v5, v7 = [v4 markedForDeletion], v6, (v7 & 1) == 0))
  {
    id v16 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = [v4 shortLoggingDescription];
      __int16 v18 = [*(id *)(a1 + 40) share];
      id v19 = [v18 ic_loggingDescription];
      *(_DWORD *)long long buf = 138412546;
      id v34 = v17;
      __int16 v35 = 2112;
      id v36 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Accepting share: Found existing object %@ for share metadata %@", buf, 0x16u);
    }
    int v20 = [*(id *)(a1 + 40) share];
    [v4 didAcceptShare:v20];

    [*(id *)(a1 + 48) ic_save];
    id v21 = *(NSObject **)(a1 + 56);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100062E60;
    block[3] = &unk_1008B0350;
    id v22 = *(id *)(a1 + 72);
    uint64_t v23 = *(void *)(a1 + 80);
    id v31 = v22;
    uint64_t v32 = v23;
    dispatch_async(v21, block);
    id v15 = v31;
  }
  else
  {
    id v8 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(a1 + 40) share];
      int v10 = [v9 ic_loggingDescription];
      *(_DWORD *)long long buf = 138412290;
      id v34 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Accepting share: No existing object for share metadata %@", buf, 0xCu);
    }
    unsigned int v11 = dispatch_get_global_queue(2, 0);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_100062E84;
    v24[3] = &unk_1008B03C8;
    __int16 v12 = *(void **)(a1 + 40);
    v24[4] = *(void *)(a1 + 32);
    id v25 = v12;
    id v13 = *(id *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 80);
    id v26 = v13;
    uint64_t v29 = v14;
    id v27 = *(id *)(a1 + 56);
    id v28 = *(id *)(a1 + 72);
    dispatch_async(v11, v24);

    id v15 = v25;
  }
}

uint64_t sub_100062E60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0, 1, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100062E84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100062F50;
  v6[3] = &unk_1008B03A0;
  uint64_t v5 = *(void *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 64);
  [v2 acceptShareWithMetadata:v3 container:v5 accountID:v4 fetchObjectWithCompletionHandler:v6];
}

void sub_100062F50(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_100063034;
  v13[3] = &unk_1008B0378;
  id v9 = *(NSObject **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v15 = v8;
  id v16 = v10;
  char v17 = a3;
  id v14 = v7;
  id v11 = v8;
  id v12 = v7;
  dispatch_async(v9, v13);
}

uint64_t sub_100063034(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 40));
}

void sub_10006382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100063870(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v4 = [v5 recordID];
  if (v4) {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
  }
}

void sub_1000638D8(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkitCollaboration];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100753FD4((uint64_t)a1, (uint64_t)v3, v5);
    }

    id v6 = (void (**)(id, id, void, id))a1[8];
    if (v6) {
      v6[2](v6, v3, 0, a1[5]);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [a1[4] share];
      id v8 = [v7 URL];
      id WeakRetained = objc_loadWeakRetained(a1 + 9);
      id v10 = [WeakRetained ic_loggingDescription];
      *(_DWORD *)long long buf = 138412546;
      id v36 = v8;
      __int16 v37 = 2112;
      long long v38 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Share accepted for URL %@ %@", buf, 0x16u);
    }
    id v11 = [a1[4] hierarchicalRootRecordID];
    id v12 = +[REMLog cloudkitCollaboration];
    id v13 = v12;
    if (v11)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v14 = [v11 ic_loggingDescription];
        id v15 = a1[5];
        *(_DWORD *)long long buf = 138412546;
        id v36 = v14;
        __int16 v37 = 2112;
        long long v38 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fetching record from share %@, account ID = %@", buf, 0x16u);
      }
      id v16 = [a1[6] cloudContext];
      id v34 = v11;
      char v17 = +[NSArray arrayWithObjects:&v34 count:1];
      id v18 = a1[5];
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100063CBC;
      v25[3] = &unk_1008B0468;
      id v19 = v11;
      id v20 = a1[6];
      id v26 = v19;
      id v27 = v20;
      id v28 = a1[4];
      id v29 = a1[7];
      objc_copyWeak(&v33, a1 + 9);
      id v30 = a1[5];
      id v21 = a1[8];
      id v31 = 0;
      id v32 = v21;
      [v16 fetchRecordIDs:v17 accountID:v18 operationGroupName:@"FetchRecordForAcceptedShare" runExclusively:1 completionHandler:v25];

      objc_destroyWeak(&v33);
    }
    else
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = [a1[4] share];
        uint64_t v23 = [v22 ic_loggingDescription];
        *(_DWORD *)long long buf = 138412290;
        id v36 = v23;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "No root record when accepting share: %@", buf, 0xCu);
      }
      id v24 = a1[8];
      if (v24) {
        (*((void (**)(id, void, void, id))v24 + 2))(v24, 0, 0, a1[5]);
      }
    }
  }
}

void sub_100063CA0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100063CBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[REMLog cloudkitCollaboration];
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1007540D0(a1);
    }
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v6 = [[*(id *)(a1 + 32) ic_loggingDescription];
      *(_DWORD *)long long buf = 138412290;
      id v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Fetched record from share %@", buf, 0xCu);
    }
    id v7 = [*(id *)(a1 + 40) cloudContext];
    id v8 = [v7 newBackgroundContext];

    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_100063F08;
    id v14 = &unk_1008B0440;
    id v15 = *(id *)(a1 + 48);
    id v16 = *(id *)(a1 + 56);
    objc_copyWeak(&v20, (id *)(a1 + 88));
    id v17 = *(id *)(a1 + 32);
    id v18 = *(id *)(a1 + 64);
    id v5 = v8;
    id v19 = v5;
    [v5 performBlockAndWait:&v11];

    objc_destroyWeak(&v20);
  }

  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(uint64_t, void, void, void))(v9 + 16))(v9, *(void *)(a1 + 72), 0, *(void *)(a1 + 64));
  }
  id v10 = [*(id *)(a1 + 40) cloudContext:v11, v12, v13, v14];
  [v10 syncWithReason:@"SyncAfterAcceptShare" discretionary:0 completionHandler:0];
}

void sub_100063EEC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100063F08(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) share];
  id v3 = [v2 recordID];

  if (!v3) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = [*(id *)(a1 + 32) share];
  id v6 = [v5 recordID];
  id v7 = [v4 objectForKeyedSubscript:v6];

  id v8 = +[REMLog cloudkitCollaboration];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = [v7 ic_loggingDescription];
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    id v11 = [WeakRetained ic_loggingDescription];
    int v17 = 138412546;
    id v18 = v9;
    __int16 v19 = 2112;
    id v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Using share from per-share completion block %@: %@", (uint8_t *)&v17, 0x16u);
  }
  if (!v7)
  {
LABEL_5:
    id v7 = [*(id *)(a1 + 32) share];
    uint64_t v12 = +[REMLog cloudkitCollaboration];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = [v7 ic_loggingDescription];
      id v14 = objc_loadWeakRetained((id *)(a1 + 72));
      id v15 = [v14 ic_loggingDescription];
      int v17 = 138412546;
      id v18 = v13;
      __int16 v19 = 2112;
      id v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Falling back to share from metadata %@: %@", (uint8_t *)&v17, 0x16u);
    }
  }
  id v16 = +[REMCDObject objectWithRecordID:*(void *)(a1 + 48) accountID:*(void *)(a1 + 56) context:*(void *)(a1 + 64)];
  [v16 didAcceptShare:v7];
  [*(id *)(a1 + 64) ic_save];
}

void sub_100065B44(uint64_t a1)
{
  uint64_t v2 = +[NSMutableDictionary dictionary];
  id v4 = +[REMCDObject entity];
  [*(id *)(a1 + 32) _heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:v4 heightMap:v2];
  id v3 = (void *)qword_100922A68;
  qword_100922A68 = v2;
}

uint64_t sub_100065C98(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 entity];
  id v7 = [v6 name];

  id v8 = [v5 entity];

  uint64_t v9 = [v8 name];

  if (v7)
  {
    id v10 = [*(id *)(a1 + 32) objectForKey:v7];
    id v11 = [v10 unsignedIntegerValue];

    if (v9)
    {
LABEL_3:
      uint64_t v12 = [*(id *)(a1 + 32) objectForKey:v9];
      id v13 = [v12 unsignedIntegerValue];

      goto LABEL_6;
    }
  }
  else
  {
    id v11 = 0;
    if (v9) {
      goto LABEL_3;
    }
  }
  id v13 = 0;
LABEL_6:
  if (v11 <= v13)
  {
    if (v11 >= v13)
    {
      uint64_t v14 = 0;
      if (v7 && v9) {
        uint64_t v14 = (uint64_t)[v7 compare:v9];
      }
    }
    else
    {
      uint64_t v14 = 1;
    }
  }
  else
  {
    uint64_t v14 = -1;
  }

  return v14;
}

void sub_100066104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006612C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) containsObject:v3] & 1) == 0)
  {
    id v5 = *(void **)(a1 + 40);
    id v20 = 0;
    id v6 = [v5 existingObjectWithID:v3 error:&v20];
    id v7 = v20;
    id v8 = v7;
    if (v7)
    {
      uint64_t v9 = [v7 userInfo];
      id v10 = [v9 objectForKeyedSubscript:NSDebugDescriptionErrorKey];

      if (!v10)
      {
        id v10 = [v8 description];
      }
      id v11 = [v8 domain];
      uint64_t v12 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v8 code]);
      id v13 = +[NSString stringWithFormat:@"%@[%@] - %@", v11, v12, v10];

      uint64_t v14 = +[REMLogStore write];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
        sub_100754528((uint64_t)v3, (uint64_t)v13, v14);
      }
    }
    else
    {
      objc_opt_class();
      id v10 = REMDynamicCast();
      if (v10)
      {
        id v15 = off_1008AA478;
        if (*(unsigned char *)(a1 + 64)) {
          id v15 = &off_1008AA918;
        }
        id v13 = objc_alloc_init(*v15);
        id v16 = [v10 objectID];
        [v13 setManagedObjectID:v16];

        [v13 setBackingCDObject:v10];
        int v17 = [*(id *)(a1 + 40) objectTreeProcessorDelegateFactoryWithTreeNode:v13];
        id v18 = [[REMCDObjectTreeProcessor alloc] initWithTraversalOrder:0 batchSize:*(void *)(a1 + 56) delegate:v17];
        __int16 v19 = [(REMCDObjectTreeProcessor *)v18 traverse:v13];
        [*(id *)(a1 + 32) addObjectsFromArray:v19];
        ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
      }
      else
      {
        id v13 = +[REMLogStore write];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
          sub_1007544B0((uint64_t)v3, v13);
        }
      }
    }
  }
}

void sub_10006773C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100067790(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000677A0(uint64_t a1)
{
}

uint64_t sub_1000677A8(void *a1)
{
  uint64_t v2 = INDateRelevanceProvider_ptr;
  id v3 = +[REMLogStore container];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(*(void *)(a1[6] + 8) + 40);
    id v5 = [*(id *)(*(void *)(a1[7] + 8) + 40) count];
    *(_DWORD *)long long buf = 138543618;
    uint64_t v55 = v4;
    uint64_t v2 = INDateRelevanceProvider_ptr;
    __int16 v56 = 2048;
    id v57 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[%{public}@] after save {attachmentIDs.count: %ld}", buf, 0x16u);
  }

  long long v52 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  id obj = *(id *)(*(void *)(a1[7] + 8) + 40);
  id v41 = [obj countByEnumeratingWithState:&v49 objects:v66 count:16];
  if (v41)
  {
    uint64_t v39 = *(void *)v50;
    do
    {
      for (i = 0; i != v41; i = (char *)i + 1)
      {
        if (*(void *)v50 != v39) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        uint64_t v9 = [*(id *)(*(void *)(a1[7] + 8) + 40) objectForKeyedSubscript:v7];
        id v10 = (void *)a1[4];
        id v48 = 0;
        id v11 = [v10 purgeAttachmentFilesWithAttachmentIDs:v9 accountID:v7 error:&v48];
        id v12 = v48;
        id v13 = [v2[202] container];
        uint64_t v14 = v13;
        if (v12)
        {
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            uint64_t v35 = *(void *)(*(void *)(a1[6] + 8) + 40);
            id v33 = [v12 code];
            id v15 = [v12 localizedDescription];
            *(_DWORD *)long long buf = 138544642;
            uint64_t v55 = v35;
            __int16 v56 = 2114;
            id v57 = v7;
            __int16 v58 = 2048;
            id v59 = v33;
            __int16 v60 = 2112;
            id v61 = v15;
            __int16 v62 = 2114;
            long long v63 = v9;
            __int16 v64 = 2114;
            long long v65 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, attachmentIDs: %{public}@, purged: %{public}@}", buf, 0x3Eu);

            uint64_t v2 = INDateRelevanceProvider_ptr;
          }
        }
        else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(*(void *)(a1[6] + 8) + 40);
          id v17 = [v9 count];
          id v18 = [v11 count];
          *(_DWORD *)long long buf = 138544130;
          uint64_t v55 = v16;
          __int16 v56 = 2114;
          id v57 = v7;
          __int16 v58 = 2048;
          id v59 = v17;
          uint64_t v2 = INDateRelevanceProvider_ptr;
          __int16 v60 = 2048;
          id v61 = v18;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged attachment files for {accountID: %{public}@, attachmentIDs.count: %ld, purged.count: %ld}", buf, 0x2Au);
        }
      }
      id v41 = [obj countByEnumeratingWithState:&v49 objects:v66 count:16];
    }
    while (v41);
  }

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obja = *(id *)(*(void *)(a1[8] + 8) + 40);
  id v42 = [obja countByEnumeratingWithState:&v44 objects:v53 count:16];
  if (v42)
  {
    uint64_t v40 = *(void *)v45;
    do
    {
      for (j = 0; j != v42; j = (char *)j + 1)
      {
        if (*(void *)v45 != v40) {
          objc_enumerationMutation(obja);
        }
        id v20 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
        id v22 = [*(id *)(*(void *)(a1[8] + 8) + 40) objectForKeyedSubscript:v20];
        uint64_t v23 = (void *)a1[4];
        id v43 = 0;
        id v24 = [v23 purgeAttachmentFilesWithSha512SumsAndExtensions:v22 accountID:v20 error:&v43];
        id v25 = v43;
        id v26 = [v2[202] container];
        uint64_t v27 = v26;
        if (v25)
        {
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            uint64_t v36 = *(void *)(*(void *)(a1[6] + 8) + 40);
            id v34 = [v25 code];
            id v28 = [v25 localizedDescription];
            *(_DWORD *)long long buf = 138544642;
            uint64_t v55 = v36;
            __int16 v56 = 2114;
            id v57 = v20;
            __int16 v58 = 2048;
            id v59 = v34;
            __int16 v60 = 2112;
            id v61 = v28;
            __int16 v62 = 2114;
            long long v63 = v22;
            __int16 v64 = 2114;
            long long v65 = v24;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, fileNames: %{public}@, purged: %{public}@}", buf, 0x3Eu);

            uint64_t v2 = INDateRelevanceProvider_ptr;
          }
        }
        else if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = *(void *)(*(void *)(a1[6] + 8) + 40);
          id v30 = [v22 count];
          id v31 = [v24 count];
          *(_DWORD *)long long buf = 138544130;
          uint64_t v55 = v29;
          __int16 v56 = 2114;
          id v57 = v20;
          __int16 v58 = 2048;
          id v59 = v30;
          uint64_t v2 = INDateRelevanceProvider_ptr;
          __int16 v60 = 2048;
          id v61 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[%{public}@] Purged attachment files for {accountID: %{public}@, fileNames.count: %ld, purged.count: %ld}", buf, 0x2Au);
        }
      }
      id v42 = [obja countByEnumeratingWithState:&v44 objects:v53 count:16];
    }
    while (v42);
  }

  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006850C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = +[REMLogStore search];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_100754738();
    }

    objc_end_catch();
    JUMPOUT(0x1000684D4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100068714(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = +[REMLogStore search];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100754808((uint64_t)v3, a1, v4);
    }
  }
}

void sub_10006A144(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = +[REMLog utility];
  id v7 = v6;
  if (v5 || (a2 & 1) == 0)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1007549BC((uint64_t)v5, v7);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) identifier];
    int v10 = 138412290;
    id v11 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Done unset didChooseToMigrate and didFinishMigration on ACAccount (%@)", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

id sub_10006A444(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v3 recordIDsToDelete];
    id v5 = [v4 containsObject:*(void *)(a1 + 32)];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10006A5C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v3 recordIDs];
    id v5 = [v4 containsObject:*(void *)(a1 + 32)];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10006A744(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v4 = [v3 recordsToSave];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10006A824;
    v7[3] = &unk_1008B05C8;
    id v8 = *(id *)(a1 + 32);
    id v5 = [v4 ic_containsObjectPassingTest:v7];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10006A824(uint64_t a1, void *a2)
{
  id v3 = [a2 recordID];
  id v4 = [v3 isEqual:*(void *)(a1 + 32)];

  return v4;
}

void sub_10006ABBC(id a1)
{
  uint64_t v1 = +[NSBundle bundleForClass:objc_opt_class()];
  id v5 = v1;
  id v2 = +[NSArray arrayWithObjects:&v5 count:1];
  uint64_t v3 = +[NSManagedObjectModel mergedModelFromBundles:v2];
  id v4 = (void *)qword_100922A78;
  qword_100922A78 = v3;
}

void sub_10006B06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006B088(uint64_t a1)
{
  id v2 = +[NSMapTable strongToWeakObjectsMapTable];
  [*(id *)(a1 + 32) setL_accountStoreMap:v2];

  uint64_t v3 = +[NSMapTable strongToStrongObjectsMapTable];
  [*(id *)(a1 + 32) setL_accountStorageCacheByObjectIDs:v3];

  id v4 = +[NSMapTable strongToStrongObjectsMapTable];
  [*(id *)(a1 + 32) setL_accountExternalIdentifiersToObjectIDsMap:v4];

  id v5 = +[NSHashTable hashTableWithOptions:0];
  [*(id *)(a1 + 32) setL_allGenericAccountsObjectIDs:v5];

  id v6 = *(void **)(a1 + 32);
  id v10 = 0;
  unsigned __int8 v7 = [v6 l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:1 shouldDeleteInvalidStoresImmediately:1 error:&v10];
  id v8 = v10;
  if ((v7 & 1) == 0)
  {
    uint64_t v9 = +[REMLogStore container];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100754AD4();
    }

    [*(id *)(a1 + 40) accountStoresFailToLoadWithError:v8];
  }
}

void sub_10006B1B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = +[REMLogStore search];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100754B3C();
    }
  }
  else
  {
    id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
    id v4 = WeakRetained;
    if (WeakRetained)
    {
      id v6 = WeakRetained + 4;
      os_unfair_lock_lock(WeakRetained + 4);
      id v4 = v4;
      [v4 l_activateCoreSpotlightDelegates];
      os_unfair_lock_unlock(v6);
    }
  }
}

id sub_10006B2A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) l_activateCoreSpotlightDelegates];
}

void sub_10006F010(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = v5;
  if (v5 && ([v5 isEqual:@"NullMetadataAccountIdentifier"] & 1) == 0) {
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:v6];
  }
}

void sub_100072560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

uint64_t sub_10007258C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007259C(uint64_t a1)
{
}

uint64_t sub_1000725A4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _deduplicateStore:*(void *)(a1 + 40) withStore:*(void *)(a1 + 48) isLocalAccountType:*(unsigned __int8 *)(a1 + 72) managedObjectContext:*(void *)(a1 + 56)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1000728F8(uint64_t a1)
{
  uint64_t v2 = +[REMCDAccount fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithValue:1];
  [v2 setPredicate:v3];

  [v2 setResultType:2];
  v76[0] = @"identifier";
  v76[1] = @"type";
  uint64_t v4 = +[NSArray arrayWithObjects:v76 count:2];
  __int16 v56 = v2;
  [v2 setPropertiesToFetch:v4];

  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v60 objects:v75 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v61;
    *(void *)&long long v7 = 138544386;
    long long v47 = v7;
    id v54 = v5;
    uint64_t v55 = *(void *)v61;
    do
    {
      id v10 = 0;
      id v57 = v8;
      do
      {
        if (*(void *)v61 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v60 + 1) + 8 * (void)v10);
        id v13 = [v11 URL];
        unsigned int v14 = [v13 isEqual:*(void *)(a1 + 40)];

        if (v14)
        {
          [*(id *)(a1 + 48) setObject:v11 forKey:@"local"];
          goto LABEL_43;
        }
        long long v74 = v11;
        id v15 = +[NSArray arrayWithObjects:&v74 count:1];
        [v56 setAffectedStores:v15];

        uint64_t v16 = *(void **)(a1 + 56);
        id v59 = 0;
        id v17 = [v16 executeFetchRequest:v56 error:&v59];
        id v18 = v59;
        __int16 v19 = [v17 valueForKey:@"identifier"];
        uint64_t v20 = [v17 valueForKey:@"type"];
        id v21 = (void *)v20;
        if (!v19 || !v20)
        {
          uint64_t v27 = +[REMLogStore container];
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543618;
            id v65 = v18;
            __int16 v66 = 2112;
            uint64_t v67 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Error fetching account ID from store {error: %{public}@, store: %@}", buf, 0x16u);
          }

          [*(id *)(a1 + 72) addObject:v11];
          goto LABEL_42;
        }
        id v22 = [v19 valueForKey:@"UUIDString"];
        __int16 v58 = v22;
        if ([v22 count] == (id)1)
        {
          id v53 = v18;
          if ([v21 count])
          {
            objc_opt_class();
            uint64_t v23 = [v21 objectAtIndexedSubscript:0];
            id v24 = REMDynamicCast();
            uint64_t v25 = (int)[v24 intValue];

            id v5 = v54;
            if (v25)
            {
              if (v25 == 1)
              {
                [*(id *)(a1 + 64) addObject:v11];
                uint64_t v26 = 1;
              }
              else
              {
                uint64_t v26 = 0;
              }
              id v18 = v53;
              uint64_t v35 = [v58 firstObject:v47];
              uint64_t v36 = [*(id *)(a1 + 48) valueForKey:v35];
              long long v52 = (void *)v36;
              if (v36)
              {
                long long v51 = v35;
                __int16 v37 = (void *)v36;
                uint64_t v38 = [*(id *)(a1 + 80) _deduplicateStore:v36 withStore:v11 isLocalAccountType:v26 managedObjectContext:*(void *)(a1 + 56)];
                [*(id *)(a1 + 72) addObject:v38];
                id v39 = v37;
                uint64_t v40 = v39;
                long long v49 = (void *)v38;
                if ((id)v38 == v39)
                {
                  id v41 = v11;

                  [*(id *)(a1 + 48) setObject:v41 forKey:v51];
                  long long v50 = v41;
                }
                else
                {
                  long long v50 = v39;
                }
                id v42 = +[REMLogStore container];
                id v34 = v58;
                if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                {
                  id v48 = [v50 identifier];
                  uint64_t v45 = [v49 identifier];
                  *(_DWORD *)long long buf = v47;
                  id v65 = v51;
                  __int16 v66 = 2114;
                  uint64_t v67 = v48;
                  __int16 v68 = 2112;
                  __int16 v69 = v50;
                  __int16 v70 = 2114;
                  uint64_t v71 = v45;
                  long long v46 = (void *)v45;
                  __int16 v72 = 2112;
                  long long v73 = v49;
                  _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}", buf, 0x34u);

                  id v34 = v58;
                }

                uint64_t v35 = v51;
              }
              else
              {
                [*(id *)(a1 + 48) setObject:v11 forKey:v35];
                id v34 = v58;
              }

              id v5 = v54;
              goto LABEL_41;
            }
          }
          else
          {
            id v32 = +[REMLogStore container];
            if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
            {
              long long v44 = [v58 firstObject];
              *(_DWORD *)long long buf = 138543618;
              id v65 = v44;
              __int16 v66 = 2112;
              uint64_t v67 = v11;
              _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "[_validateAccountStores] RDCDAccountTypeKey from [REMCDAccount fetchRequest] yields no result unexpectedly {accountID: %{public}@, store: %@}", buf, 0x16u);
            }
          }
          id v33 = +[REMLogStore container];
          id v18 = v53;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
          {
            id v43 = [v58 firstObject];
            *(_DWORD *)long long buf = 138543618;
            id v65 = v43;
            __int16 v66 = 2112;
            uint64_t v67 = v11;
            _os_log_fault_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "[_validateAccountStores] Found corrupted store with unkwown account type {accountID: %{public}@, store: %@}", buf, 0x16u);

            id v5 = v54;
          }

          [*(id *)(a1 + 72) addObject:v11];
        }
        else
        {
          id v28 = [v22 count];
          uint64_t v29 = +[REMLogStore container];
          id v30 = v29;
          if (v28)
          {
            if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
            {
              id v31 = [v58 count];
              *(_DWORD *)long long buf = 134218498;
              id v65 = v31;
              __int16 v66 = 2114;
              uint64_t v67 = v58;
              __int16 v68 = 2112;
              __int16 v69 = v11;
              _os_log_fault_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "[_validateAccountStores] Found corrupted store with %ld REMCDAccount objects {accountIDs: %{public}@, store: %@}", buf, 0x20u);
            }
          }
          else if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412290;
            id v65 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[_validateAccountStores] Found store with no REMCDAccount. Going to disconnect and destroy {store: %@}", buf, 0xCu);
          }

          [*(id *)(a1 + 72) addObject:v11];
          id v5 = v54;
        }
        id v34 = v58;
LABEL_41:

LABEL_42:
        id v8 = v57;
        uint64_t v9 = v55;
LABEL_43:
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [v5 countByEnumeratingWithState:&v60 objects:v75 count:16];
    }
    while (v8);
  }
}

void sub_100073E04(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v7 = 0;
  unsigned int v2 = [v1 save:&v7];
  id v3 = v7;
  uint64_t v4 = +[REMLogStore container];
  id v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "RDStoreControllerMigrator: [MIGRATE STORE] Did update stores metadata", v6, 2u);
    }
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    sub_10075527C();
  }
}

void sub_1000747D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = [v3 URL];
  uint64_t v6 = [v5 lastPathComponent];
  id v7 = (void *)v6;
  if (v5 && v6)
  {
    id v8 = [v5 URLByDeletingLastPathComponent];
    uint64_t v9 = [v8 URLByDeletingLastPathComponent];

    id v10 = [v9 path];
    unsigned __int8 v56 = 0;
    if (!v10 || ![*(id *)(a1 + 40) fileExistsAtPath:v10 isDirectory:&v56] || !v56)
    {
      uint64_t v20 = +[REMLogStore container];
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        __int16 v58 = v10;
        __int16 v59 = 1024;
        *(_DWORD *)long long v60 = v56;
        *(_WORD *)&void v60[4] = 2112;
        *(void *)&v60[6] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[addValidatedStoresToAccountStoreMapWithStores] Cannot obtain a valid container directory path from storeURL {reminderDataContainerPath: %@, isDirectory: %d, storeURL: %@}", buf, 0x1Cu);
      }

      [*(id *)(a1 + 32) addObject:v3];
      goto LABEL_47;
    }
    id v11 = [*(id *)(a1 + 48) databaseBackupDirectoryURLWithContainerURL:v9];
    id v12 = *(void **)(a1 + 40);
    id v55 = 0;
    unsigned __int8 v13 = [v12 rem_createDirectoryIfNecessaryAtURL:v11 error:&v55];
    id v48 = v55;
    long long v49 = v11;
    if ((v13 & 1) == 0)
    {
      unsigned int v14 = +[REMLogStore container];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (objc_class *)objc_opt_class();
        long long v51 = NSStringFromClass(v38);
        long long v47 = NSStringFromSelector(*(SEL *)(a1 + 56));
        uint64_t v45 = +[NSString stringWithFormat:@"%@.%@", v51, v47];
        id v39 = [v48 localizedDescription];
        *(_DWORD *)long long buf = 138544130;
        __int16 v58 = v45;
        __int16 v59 = 2112;
        *(void *)long long v60 = v9;
        *(_WORD *)&v60[8] = 2112;
        *(void *)&v60[10] = v11;
        __int16 v61 = 2112;
        long long v62 = v39;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[%{public}@] Create directory failed {reminderDataContainerURL: %@, databaseBackupDirectoryURL: %@, error: %@}", buf, 0x2Au);
      }
    }
    [v11 setRd_isExcludedFromBackup:1];
    long long v50 = [*(id *)(a1 + 48) invalidStoreBackupURLWithFileName:v7 withContainerURL:v9];
    if (!v50)
    {
      id v21 = +[REMLogStore container];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_10075535C();
      }

      [*(id *)(a1 + 32) addObject:v3];
      goto LABEL_46;
    }
    id v15 = *(void **)(a1 + 40);
    id v54 = 0;
    [v15 copyItemAtURL:v5 toURL:v50 error:&v54];
    id v16 = v54;
    if (v16)
    {
      id v17 = v16;
      id v18 = +[REMLogStore container];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
        sub_1007554EC();
      }

      [*(id *)(a1 + 32) addObject:v3];
      goto LABEL_45;
    }
    id v22 = [v5 URLByDeletingPathExtension];
    uint64_t v23 = [v22 URLByAppendingPathExtension:@"sqlite-wal"];

    id v24 = [v5 URLByDeletingPathExtension];
    uint64_t v25 = [v24 URLByAppendingPathExtension:@"sqlite-shm"];

    id v42 = v23;
    uint64_t v43 = [v23 path];
    id v41 = v25;
    long long v46 = [v25 path];
    uint64_t v26 = [v50 URLByDeletingPathExtension];
    uint64_t v27 = [v26 URLByAppendingPathExtension:@"sqlite-wal"];

    id v28 = [v50 URLByDeletingPathExtension];
    long long v44 = [v28 URLByAppendingPathExtension:@"sqlite-shm"];

    uint64_t v29 = (void *)v43;
    id v17 = 0;
    uint64_t v40 = (void *)v27;
    if (v43 && v27)
    {
      if ([*(id *)(a1 + 40) fileExistsAtPath:v43])
      {
        id v30 = *(void **)(a1 + 40);
        id v53 = 0;
        [v30 copyItemAtURL:v42 toURL:v27 error:&v53];
        id v17 = v53;
        if (v17)
        {
          id v31 = +[REMLogStore container];
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            sub_100755460();
          }

          uint64_t v29 = (void *)v43;
        }
      }
      else
      {
        id v17 = 0;
      }
    }
    if (v46 && v44 && [*(id *)(a1 + 40) fileExistsAtPath:v46])
    {
      id v32 = *(void **)(a1 + 40);
      id v52 = v17;
      [v32 copyItemAtURL:v41 toURL:v44 error:&v52];
      id v33 = v52;

      if (v33)
      {
        id v34 = +[REMLogStore container];
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
          sub_1007553D4();
        }

        id v17 = v33;
        uint64_t v29 = (void *)v43;
        goto LABEL_40;
      }
    }
    else if (v17)
    {
LABEL_40:
      [*(id *)(a1 + 32) addObject:v3];
LABEL_44:

LABEL_45:
LABEL_46:

LABEL_47:
      goto LABEL_48;
    }
    uint64_t v35 = +[REMLogStore container];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      [v3 identifier];
      __int16 v37 = v36 = v29;
      *(_DWORD *)long long buf = 138543874;
      __int16 v58 = v37;
      __int16 v59 = 2112;
      *(void *)long long v60 = v3;
      *(_WORD *)&v60[8] = 2112;
      *(void *)&v60[10] = v50;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "[addValidatedStoresToAccountStoreMapWithStores] Created back up of invalid store {store: id=%{public}@ %@, backupURL: %@}", buf, 0x20u);

      uint64_t v29 = v36;
    }

    id v17 = 0;
    goto LABEL_44;
  }
  __int16 v19 = +[REMLogStore container];
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_1007552F4();
  }

  [*(id *)(a1 + 32) addObject:v3];
LABEL_48:
}

void sub_100075EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100075ED8(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  unsigned int v2 = [*(id *)(a1 + 32) l_accountStoreMap];
  id v3 = [v2 objectEnumerator];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_100076120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100076138(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  unsigned int v2 = [*(id *)(a1 + 32) l_accountStoreMap];
  id v3 = [v2 keyEnumerator];

  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        long long v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        long long v9 = [*(id *)(a1 + 32) l_accountStoreMap];
        long long v10 = [v9 objectForKey:v8];

        long long v11 = *(void **)(a1 + 40);
        id v12 = [v10 identifier];
        LODWORD(v11) = [v11 isEqualToString:v12];

        if (v11)
        {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v8);

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1000763F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007640C(uint64_t a1)
{
  [*(id *)(a1 + 32) l_accountStoreMap];
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = [v5 objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100076658(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v15 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v15];
  id v5 = v15;
  uint64_t v6 = [v4 valueForKey:@"identifier"];

  if (v6)
  {
    id v7 = [v6 valueForKey:@"UUIDString"];
    os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 16));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000767C4;
    v11[3] = &unk_1008ADD00;
    uint64_t v8 = a1[6];
    long long v9 = (void *)a1[7];
    id v12 = v7;
    uint64_t v13 = v8;
    id v14 = v9;
    long long v10 = v7;
    sub_1000767C4((id *)v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 16));
  }
  else
  {
    long long v10 = +[REMLogStore container];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1007556A8();
    }
  }
}

void sub_1000767C4(id *a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = a1[4];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v6);
        uint64_t v8 = [a1[5] l_accountStoreMap:v10];
        long long v9 = [v8 objectForKey:v7];

        if (v9) {
          [a1[6] addObject:v9];
        }

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

void sub_100076990(uint64_t a1)
{
  uint64_t v1 = +[REMChangeTracking entityNamesToIncludeFromTrackingWithOptionProvider:*(void *)(a1 + 32)];
  uint64_t v10 = NSPersistentHistoryTrackingEntitiesToInclude;
  long long v11 = v1;
  id v2 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  id v3 = +[NSBundle bundleForClass:objc_opt_class()];
  v8[0] = NSPersistentHistoryTrackingKey;
  v8[1] = NSMigratePersistentStoresAutomaticallyOption;
  v9[0] = v2;
  v9[1] = &__kCFBooleanTrue;
  _DWORD v9[2] = &__kCFBooleanTrue;
  v8[2] = NSInferMappingModelAutomaticallyOption;
  v8[3] = NSPersistentStoreCoordinatorResourceBundlesForMigration;
  uint64_t v7 = v3;
  id v4 = +[NSArray arrayWithObjects:&v7 count:1];
  void v8[4] = NSPersistentStoreServiceConfigurationOptionKey;
  v9[3] = v4;
  void v9[4] = &__kCFBooleanTrue;
  uint64_t v5 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:5];
  uint64_t v6 = (void *)qword_100922A88;
  qword_100922A88 = v5;
}

void sub_100076C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100076CA4(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  id obj = 0;
  unsigned __int8 v5 = [v2 l_createAccountStoresWithIdentifiers:v3 didAddNewStores:v4 error:&obj];
  id v6 = obj;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v5;
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v6);
}

void sub_100077D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_100077E08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = +[REMLogStore container];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_100755798();
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    if (objc_msgSend(v6, "rem_isDiskFullSQLError")) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    }
  }
  else
  {
    objc_opt_class();
    uint64_t v8 = [*(id *)(a1 + 32) options];
    long long v9 = [v8 valueForKey:NSPersistentStoreConnectionPoolMaxSizeKey];
    uint64_t v10 = REMDynamicCast();

    uint64_t v11 = +[REMLogStore container];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = 138543874;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      long long v16 = v10;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[createOrLoadAccountStores] didAdd store {fileName: %{public}@, connectionPoolMaxSize: %{public}@, addedStoreDescription: %@}", (uint8_t *)&v13, 0x20u);
    }
  }
}

void sub_100078104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007811C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) metadata];
  id v3 = [v2 mutableCopy];

  [v3 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"RDStoreControllerAccountIdentifier"];
  id v4 = [v3 copy];
  [*(id *)(a1 + 32) setMetadata:v4];

  id v5 = *(void **)(a1 + 48);
  id v10 = 0;
  unsigned __int8 v6 = [v5 save:&v10];
  id v7 = v10;
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 64);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v6;
  if (v9 && v7) {
    **(void **)(a1 + 64) = v7;
  }
}

void sub_1000783F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100078420(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id v5 = *(void **)(v4 + 40);
  id v8 = 0;
  id obj = v5;
  unsigned __int8 v6 = [v2 l_removeAccountStoresWithIdentifiers:v3 deletedObjectIDs:&obj error:&v8];
  objc_storeStrong((id *)(v4 + 40), obj);
  id v7 = v8;
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = v6;
  objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), v7);
}

void sub_100078FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_10007901C(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) metadata];
  id v4 = [v3 mutableCopy];

  uint64_t v5 = [v4 objectForKeyedSubscript:@"RDStoreControllerAccountIdentifier"];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  [v4 setObject:&__kCFBooleanTrue forKeyedSubscript:@"RDMarkedForDeletion"];
  id v8 = [v4 copy];
  [*v2 setMetadata:v8];

  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = a1 + 56;
  uint64_t v11 = *(void **)(v9 - 16);
  uint64_t v12 = *(void *)(v10 + 8);
  id obj = *(id *)(v12 + 40);
  unsigned __int8 v13 = [v11 save:&obj];
  objc_storeStrong((id *)(v12 + 40), obj);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = +[REMLogStore container];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_100755884(v2, v9, v14);
    }
  }
}

void sub_10007913C(uint64_t a1)
{
  id v2 = [objc_alloc((Class)NSFetchRequest) initWithEntityName:*(void *)(a1 + 32)];
  uint64_t v31 = *(void *)(a1 + 40);
  uint64_t v3 = +[NSArray arrayWithObjects:&v31 count:1];
  [v2 setAffectedStores:v3];

  id v4 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  uint64_t v30 = *(void *)(a1 + 40);
  uint64_t v5 = +[NSArray arrayWithObjects:&v30 count:1];
  [v4 setAffectedStores:v5];

  [v4 setResultType:1];
  uint64_t v6 = *(void **)(a1 + 48);
  id v20 = 0;
  id v7 = [v6 executeRequest:v4 error:&v20];
  id v8 = v20;
  id v9 = v20;
  uint64_t v10 = [v7 result];
  uint64_t v11 = (void *)v10;
  if (v10)
  {
    id v22 = NSDeletedObjectsKey;
    uint64_t v23 = v10;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v21 = *(void *)(a1 + 48);
    unsigned __int8 v13 = +[NSArray arrayWithObjects:&v21 count:1];
    +[NSManagedObjectContext mergeChangesFromRemoteContextSave:v12 intoContexts:v13];

    uint64_t v14 = +[REMLogStore container];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v25 = v15;
      __int16 v26 = 2112;
      uint64_t v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "[markAccountStoreDeleted] Done deleting objects for entity {entity: %@, store: %@}", buf, 0x16u);
    }

    [*(id *)(a1 + 56) addObjectsFromArray:v11];
  }
  else
  {
    uint64_t v17 = +[REMLogStore container];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v25 = v18;
      __int16 v26 = 2112;
      uint64_t v27 = v19;
      __int16 v28 = 2114;
      id v29 = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "[markAccountStoreDeleted] Failed to delete objects for entity {entity: %@, store: %@, error: %{public}@}", buf, 0x20u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v8);
    if (+[REMSystemUtilities isInternalInstall]) {
      +[REMRadarUtilities promptUserToFileBugWithAlertMessage:REMRadarUtilitiesAlertMessageDefault bugTitle:@"nil localDeletedObjectIDs in RDStoreController.l_markAccountStoreDeletedAndDeleteData" bugDescription:REMRadarUtilitiesBugDescriptionDefault];
    }
  }
}

void sub_10007957C(id a1)
{
  attr = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = dispatch_get_global_queue(17, 0);
  dispatch_queue_t v2 = dispatch_queue_create_with_target_V2("com.apple.remindd.RDStoreController.fileIOWorker", attr, v1);
  uint64_t v3 = (void *)qword_100922A98;
  qword_100922A98 = (uint64_t)v2;
}

void sub_100079AFC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) coreSpotlightDelegateManager];
  [v1 reindexAllSearchableItems];
}

void sub_100079C00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) coreSpotlightDelegateManager];
  [v2 reindexSearchableItemsWithIdentifiers:*(void *)(a1 + 40)];
}

id sub_100079CFC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  [v2 _removeAllPersistentStores:*(void *)(a1 + 40)];

  uint64_t v3 = [*(id *)(a1 + 32) l_accountStoreMap];
  [v3 removeAllObjects];

  id v4 = *(void **)(a1 + 32);

  return [v4 l_invalidateAccountStorageCaches:@"invalidateStoreConnections"];
}

void sub_100079E4C(uint64_t a1)
{
  [*(id *)(a1 + 32) setStoreController:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 40) persistentStoreCoordinator];
  [*(id *)(a1 + 32) setPersistentStoreCoordinator:v2];

  uint64_t v3 = [*(id *)(a1 + 40) mergePolicy];
  [*(id *)(a1 + 32) setMergePolicy:v3];

  [*(id *)(a1 + 32) setTransactionAuthor:*(void *)(a1 + 48)];
  if (objc_opt_respondsToSelector()) {
    [*(id *)(a1 + 32) _setAllowsExpandedUserInfoKeys:1];
  }
  if (*(unsigned char *)(a1 + 56))
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = +[NSQueryGenerationToken currentQueryGenerationToken];
    id v9 = 0;
    unsigned __int8 v6 = [v4 setQueryGenerationFromToken:v5 error:&v9];
    id v7 = v9;

    if ((v6 & 1) == 0)
    {
      id v8 = +[REMLogStore read];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_10075590C();
      }
    }
  }
}

uint64_t sub_10007A574(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007A774(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007A9E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10007AC50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordID];
  id v4 = +[REMCDAccount existingCloudObjectForRecordID:v2 accountID:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];

  uint64_t v3 = v4;
  if (v4)
  {
    [v4 mergeMigrationStateFromRecord:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) ic_saveWithLogDescription:@"merged migration state from user record"];
    uint64_t v3 = v4;
  }
}

void sub_10007AEAC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[ICCloudContext appZoneID];
  LODWORD(v2) = [v2 isEqual:v3];

  if (v2)
  {
    id v4 = +[REMCDAccount accountWithCKIdentifier:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];
    uint64_t v5 = [v4 allChildObjects];
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        [v11 setInCloud:0, v12];
        [v11 clearServerRecord];
        if (([v11 markedForDeletion] & 1) == 0) {
          [v11 updateChangeCount];
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v8);
  }

  [*(id *)(a1 + 48) ic_saveWithLogDescription:@"cleared server records for all cloud objects"];
}

void sub_10007B1D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) ownerName];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"ckZoneOwnerName == %@", v2];

  __int16 v26 = (void *)v3;
  id v4 = +[REMCDObject ic_objectsMatchingPredicate:v3 context:*(void *)(a1 + 40)];
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v28 objects:v38 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    id v8 = INDateRelevanceProvider_ptr;
    do
    {
      uint64_t v9 = 0;
      id v27 = v6;
      do
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v9);
        uint64_t v11 = [v10 recordID];
        long long v12 = [v11 zoneID];
        unsigned int v13 = [v12 isEqual:*(void *)(a1 + 32)];

        long long v14 = [v8[201] cloudkit];
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          if (v15)
          {
            uint64_t v16 = [v10 shortLoggingDescription];
            uint64_t v17 = *(void **)(a1 + 48);
            *(_DWORD *)long long buf = 138412546;
            id v33 = v16;
            __int16 v34 = 2114;
            uint64_t v35 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Deleting shared %@ for accountID %{public}@", buf, 0x16u);
          }
          [v10 deleteFromLocalDatabase];
        }
        else
        {
          if (v15)
          {
            uint64_t v18 = [v10 shortLoggingDescription];
            uint64_t v19 = [v10 recordID];
            id v20 = [v19 zoneID];
            [v20 ic_loggingDescription];
            uint64_t v21 = v7;
            id v22 = v8;
            v24 = uint64_t v23 = v4;
            uint64_t v25 = *(void *)(a1 + 48);
            *(_DWORD *)long long buf = 138412802;
            id v33 = v18;
            __int16 v34 = 2114;
            uint64_t v35 = v24;
            __int16 v36 = 2114;
            uint64_t v37 = v25;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not deleting shared %@ in wrong zone %{public}@ for account ID %{public}@", buf, 0x20u);

            id v4 = v23;
            id v8 = v22;
            uint64_t v7 = v21;
            id v6 = v27;
          }
        }
        uint64_t v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v28 objects:v38 count:16];
    }
    while (v6);
  }
  [*(id *)(a1 + 40) ic_saveWithLogDescription:@"deleted all local database objects after shared zone was deleted"];
}

void sub_10007B684(uint64_t a1)
{
  id v2 = +[REMCDAccount accountWithCKIdentifier:*(void *)(a1 + 32) context:*(void *)(a1 + 40)];
  uint64_t v3 = [v2 allChildObjects];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        if ([v8 isDeletable])
        {
          [*(id *)(a1 + 48) deleteCloudObjectIfFullyPushed:v8];
        }
        else
        {
          [v8 clearServerRecord];
          [v8 setInCloud:0];
          [v8 updateChangeCount];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }
  if ([*(id *)(a1 + 40) hasChanges])
  {
    uint64_t v9 = *(void **)(a1 + 40);
    id v13 = 0;
    unsigned __int8 v10 = [v9 save:&v13];
    id v11 = v13;
    if ((v10 & 1) == 0)
    {
      long long v12 = +[REMLog cloudkit];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100755A88();
      }
    }
  }
}

void sub_10007C688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10007C6D8(void *a1)
{
  id v8 = +[REMCDAccount unsafeUntilSystemReady_primaryCloudKitAccountInContext:a1[4] appleAccountUtilities:a1[5]];
  uint64_t v2 = [v8 identifier];
  uint64_t v3 = *(void *)(a1[6] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = [v8 personIDSalt];
  uint64_t v6 = *(void *)(a1[7] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  *(unsigned char *)(*(void *)(a1[8] + 8) + 24) = [v8 inactive];
}

void sub_10007C77C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[RDAccountPersonIDSaltObserver AccountAbsentError];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10007C924(id a1)
{
  long long v28 = +[REMCDAccount cdEntityName];
  v29[0] = v28;
  id v27 = +[REMCDList cdEntityName];
  v29[1] = v27;
  __int16 v26 = +[REMCDReminder cdEntityName];
  v29[2] = v26;
  uint64_t v25 = +[REMCDSharee cdEntityName];
  v29[3] = v25;
  id v24 = +[REMCDCalDAVNotification cdEntityName];
  v29[4] = v24;
  uint64_t v23 = +[REMCDAssignment cdEntityName];
  v29[5] = v23;
  id v22 = +[REMCDHashtag cdEntityName];
  void v29[6] = v22;
  uint64_t v21 = +[REMCDSmartList cdEntityName];
  v29[7] = v21;
  id v20 = +[REMCDSharedToMeReminderPlaceholder cdEntityName];
  v29[8] = v20;
  uint64_t v19 = +[REMCDTemplate cdEntityName];
  v29[9] = v19;
  uint64_t v18 = +[REMCDSavedReminder cdEntityName];
  v29[10] = v18;
  long long v17 = +[REMCDAlarm cdEntityName];
  v29[11] = v17;
  long long v16 = +[REMCDAlarmDateTrigger cdEntityName];
  v29[12] = v16;
  long long v15 = +[REMCDAlarmTimeIntervalTrigger cdEntityName];
  v29[13] = v15;
  long long v14 = +[REMCDAlarmLocationTrigger cdEntityName];
  v29[14] = v14;
  id v13 = +[REMCDAlarmVehicleTrigger cdEntityName];
  v29[15] = v13;
  uint64_t v1 = +[REMCDListSection cdEntityName];
  v29[16] = v1;
  id v2 = +[REMCDSmartListSection cdEntityName];
  v29[17] = v2;
  uint64_t v3 = +[REMCDTemplateSection cdEntityName];
  v29[18] = v3;
  id v4 = +[REMCDAuxiliaryChangeInfo cdEntityName];
  v29[19] = v4;
  uint64_t v5 = +[REMCDAuxiliaryReminderChangeInfo cdEntityName];
  v29[20] = v5;
  uint64_t v6 = +[REMCDAuxiliaryReminderChangeDeleteInfo cdEntityName];
  v29[21] = v6;
  uint64_t v7 = +[REMCDAuxiliaryReminderChangeMoveInfo cdEntityName];
  v29[22] = v7;
  id v8 = +[REMCDHashtagLabel cdEntityName];
  v29[23] = v8;
  uint64_t v9 = +[REMCKSharedEntitySyncActivity cdEntityName];
  v29[24] = v9;
  unsigned __int8 v10 = +[REMCDDueDateDeltaAlert cdEntityName];
  v29[25] = v10;
  uint64_t v11 = +[NSArray arrayWithObjects:v29 count:26];
  long long v12 = (void *)qword_100922AA8;
  qword_100922AA8 = v11;
}

void sub_10007D690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D6A8(uint64_t a1)
{
  uint64_t v2 = [[*(id *)(a1 + 32) l_primaryActiveCloudKitAccountREMObjectID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

uint64_t sub_10007D7B0(uint64_t a1)
{
  uint64_t v2 = [[*(id *)(a1 + 32) l_primaryActiveCloudKitAccountREMObjectID];
  id v3 = *(id *)(a1 + 40);
  if (v3 != (id)v2)
  {
    uint64_t v5 = v2;
    id v3 = [v3 isEqual:v2];
    uint64_t v2 = v5;
    if ((v3 & 1) == 0)
    {
      id v3 = [*(id *)(a1 + 32) setL_primaryActiveCloudKitAccountREMObjectID:*(void *)(a1 + 40)];
      uint64_t v2 = v5;
    }
  }

  return _objc_release_x1(v3, v2);
}

void sub_10007D95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007D974(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) l_accountStoragesForAccountObjectIDs:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

id sub_10007DAA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) l_setAccountStorages:*(void *)(a1 + 40) forAccountObjectIDs:*(void *)(a1 + 48)];
}

void sub_10007DBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007DC00(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8 * (void)v7);
        uint64_t v9 = [*(id *)(a1 + 40) l_accountExternalIdentifiersToObjectIDsMap:v14];
        unsigned __int8 v10 = [v9 objectForKey:v8];

        if (v10) {
          [v2 addObject:v10];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v5);
  }

  uint64_t v11 = [*(id *)(a1 + 40) l_accountStoragesForAccountObjectIDs:v2];
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_10007DE2C(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v7);
        objc_opt_class();
        uint64_t v9 = [v8 objectID:v12];
        unsigned __int8 v10 = REMCheckedDynamicCast();

        if (v10) {
          [v2 addObject:v10];
        }

        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  id v11 = [*(id *)(a1 + 32) count];
  if (v11 == [v2 count]) {
    [*(id *)(a1 + 40) l_setAccountStorages:*(void *)(a1 + 32) forAccountObjectIDs:v2];
  }
}

void sub_10007E0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007E0D4(uint64_t a1)
{
  uint64_t v2 = [[*(id *)(a1 + 32) l_allGenericAccountsObjectIDs];
  id v3 = [v2 count];

  if (v3)
  {
    id v4 = +[NSMutableArray array];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v5 = [*(id *)(a1 + 32) l_accountStorageCacheByObjectIDs];
    uint64_t v6 = [v5 keyEnumerator];

    id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v21;
      do
      {
        unsigned __int8 v10 = 0;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v10);
          long long v12 = [[*(id *)(a1 + 32) l_allGenericAccountsObjectIDs];
          unsigned int v13 = [v12 containsObject:v11];

          if (v13)
          {
            long long v14 = [*(id *)(a1 + 32) l_accountStorageCacheByObjectIDs];
            long long v15 = [v14 objectForKey:v11];

            [v4 addObject:v15];
          }
          unsigned __int8 v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v8);
    }

    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    long long v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v4;
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = &__NSArray0__struct;
  }
}

void sub_10007E3A4(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v25;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v7);
        objc_opt_class();
        uint64_t v9 = [v8 objectID];
        unsigned __int8 v10 = REMCheckedDynamicCast();

        if (v10) {
          [v2 addObject:v10];
        }

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
    }
    while (v5);
  }

  id v11 = [*(id *)(a1 + 32) count];
  if (v11 == [v2 count])
  {
    [*(id *)(a1 + 40) l_setAccountStorages:*(void *)(a1 + 32) forAccountObjectIDs:v2];
    long long v12 = [*(id *)(a1 + 40) l_allGenericAccountsObjectIDs];
    [v12 removeAllObjects];

    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = v2;
    id v14 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        long long v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v17);
          uint64_t v19 = [[*(id *)(a1 + 40) l_allGenericAccountsObjectIDs:v20];
          [v19 addObject:v18];

          long long v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v20 objects:v28 count:16];
      }
      while (v15);
    }
  }
}

void sub_10007EC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10007EC90(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = [*(id *)(a1 + 32) l_accountStoreMap];
  id v39 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v2 count]);

  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id v3 = [*(id *)(v1 + 32) l_accountStoreMap];
  id v4 = [v3 keyEnumerator];

  id v5 = [v4 countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v45;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v45 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v44 + 1) + 8 * i);
        unsigned __int8 v10 = [*(id *)(v1 + 32) l_accountStoreMap];
        uint64_t v11 = [v10 objectForKey:v9];

        long long v12 = [v11 URL];
        uint64_t v13 = [v12 lastPathComponent];
        uint64_t v14 = v1;
        uint64_t v15 = (void *)v13;
        if (v13) {
          uint64_t v16 = (__CFString *)v13;
        }
        else {
          uint64_t v16 = @"(nil)";
        }
        long long v17 = v16;

        uint64_t v1 = v14;
        [v39 setObject:v17 forKeyedSubscript:v9];
      }
      id v6 = [v4 countByEnumeratingWithState:&v44 objects:v54 count:16];
    }
    while (v6);
  }

  [v39 removeObjectForKey:@"local"];
  uint64_t v18 = +[REMLogStore container];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = [*(id *)(v1 + 32) isolatedReminderDataContainerURL];
    long long v20 = +[RDPaths defaultReminderDataContainerURL];
    *(_DWORD *)long long buf = 138412802;
    uint64_t v49 = v19;
    __int16 v50 = 2112;
    id v51 = v20;
    __int16 v52 = 2112;
    id v53 = v39;
  }
  uint64_t v21 = *(void *)(*(void *)(v1 + 40) + 8);
  if (*(unsigned char *)(v21 + 24))
  {
    long long v22 = *(void **)(v1 + 32);
    long long v23 = [v39 allKeys];
    uint64_t v24 = *(void *)(*(void *)(v1 + 48) + 8);
    long long v25 = *(void **)(v24 + 40);
    id v42 = 0;
    id v43 = v25;
    unsigned __int8 v26 = [v22 l_removeAccountStoresWithIdentifiers:v23 deletedObjectIDs:&v43 error:&v42];
    objc_storeStrong((id *)(v24 + 40), v43);
    id v27 = v42;
    *(unsigned char *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v26;
  }
  else
  {
    id v27 = 0;
    *(unsigned char *)(v21 + 24) = 0;
  }
  uint64_t v28 = *(void *)(*(void *)(v1 + 40) + 8);
  if (*(unsigned char *)(v28 + 24))
  {
    long long v29 = [*(id *)(v1 + 32) persistentStoreCoordinator];
    id v41 = v27;
    unsigned __int8 v30 = [v29 _removeAllPersistentStores:&v41];
    id v31 = v41;

    *(unsigned char *)(*(void *)(*(void *)(v1 + 40) + 8) + 24) = v30;
    id v27 = v31;
  }
  else
  {
    *(unsigned char *)(v28 + 24) = 0;
  }
  uint64_t v32 = *(void *)(*(void *)(v1 + 40) + 8);
  if (*(unsigned char *)(v32 + 24)
    && (objc_msgSend(*(id *)(v1 + 32), "l_accountStoreMap"),
        id v33 = objc_claimAutoreleasedReturnValue(),
        [v33 removeAllObjects],
        v33,
        objc_msgSend(*(id *)(v1 + 32), "l_invalidateAccountStorageCaches:", @"nukeData"),
        uint64_t v32 = *(void *)(*(void *)(v1 + 40) + 8),
        *(unsigned char *)(v32 + 24)))
  {
    __int16 v34 = *(void **)(v1 + 32);
    id v40 = v27;
    unsigned __int8 v35 = [v34 l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:0 shouldDeleteInvalidStoresImmediately:0 error:&v40];
    id v36 = v40;

    uint64_t v32 = *(void *)(*(void *)(v1 + 40) + 8);
    id v27 = v36;
  }
  else
  {
    unsigned __int8 v35 = 0;
  }
  *(unsigned char *)(v32 + 24) = v35;
  objc_storeStrong((id *)(*(void *)(*(void *)(v1 + 56) + 8) + 40), v27);
  uint64_t v37 = +[REMLogStore container];
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v38 = (void *)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 40) + 8) + 24);
    *(_DWORD *)long long buf = 134218242;
    uint64_t v49 = v38;
    __int16 v50 = 2114;
    id v51 = v27;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "RDStoreController nukeData completed {allSuccess: %ld, error: %{public}@}", buf, 0x16u);
  }
}

void sub_10007F1BC(uint64_t a1)
{
  uint64_t v13 = +[NSPredicate predicateWithFormat:@"markedForDeletion == YES"];
  uint64_t v2 = +[REMCDObject ic_objectsMatchingPredicate:context:](REMCDObject, "ic_objectsMatchingPredicate:context:");
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = [v2 copy];
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (([v8 isDeleted] & 1) == 0)
        {
          uint64_t v9 = +[REMLogStore write];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
            sub_100755C80((uint64_t)v19, (uint64_t)v8);
          }

          [v8 deleteFromLocalDatabase];
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v5);
  }

  unsigned __int8 v10 = *(void **)(a1 + 32);
  id v14 = 0;
  [v10 save:&v14];
  id v11 = v14;
  if (v11)
  {
    long long v12 = +[REMLogStore write];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100755C18();
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000802E4(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) l_accountStoreMap];
  id v3 = [v2 keyEnumerator];

  id obj = v3;
  id v20 = [v3 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v20)
  {
    uint64_t v19 = *(void *)v23;
    do
    {
      id v4 = 0;
      do
      {
        if (*(void *)v23 != v19) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v4);
        id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:v5];
        uint64_t v7 = +[NSPredicate predicateWithFormat:@"%K == %@", @"identifier", v6];

        id v8 = +[REMCDAccount fetchRequest];
        [v8 setPredicate:v7];
        [v8 setResultType:0];
        uint64_t v9 = *(void **)(a1 + 40);
        id v21 = 0;
        unsigned __int8 v10 = [v9 executeFetchRequest:v8 error:&v21];
        id v11 = v21;
        objc_opt_class();
        long long v12 = [v10 firstObject];
        uint64_t v13 = REMDynamicCast();

        if (v11)
        {
          id v14 = *(void **)(a1 + 48);
          long long v15 = [v11 debugDescription];
          [v14 addObject:v15];
        }
        if (v13)
        {
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
          [*(id *)(a1 + 32) _populateCountForEntity:objc_opt_class() withinCDAccount:v13 statsAccumulator:*(void *)(a1 + 56) errorAccumulator:*(void *)(a1 + 48)];
        }
        else
        {
          long long v16 = *(void **)(a1 + 48);
          long long v17 = +[NSString stringWithFormat:@"Cannot fetch CD account with identifier %@", v5];
          [v16 addObject:v17];
        }
        id v4 = (char *)v4 + 1;
      }
      while (v20 != v4);
      id v20 = [obj countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v20);
  }
}

void sub_1000808F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008090C(uint64_t a1)
{
  [*(id *)(a1 + 32) l_accountStoreMap];
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 count];
}

id sub_100080A28(uint64_t a1)
{
  return [*(id *)(a1 + 32) l_removeFromPersistentStoreCoordinatorAndDeleteImmediatelyWithStores:*(void *)(a1 + 40)];
}

void sub_100081558(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v20 = 0;
  uint64_t v5 = [v2 executeRequest:v3 withContext:v4 error:&v20];
  id v6 = v20;

  if (v5)
  {
    if ([v5 resultType] == (id)2
      && ([v5 result],
          uint64_t v7 = objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          char isKindOfClass = objc_opt_isKindOfClass(),
          v7,
          (isKindOfClass & 1) != 0))
    {
      uint64_t v9 = [v5 result];
      uint64_t v10 = (uint64_t)[v9 integerValue];
    }
    else
    {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    id v11 = *(void **)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 72);
    id v14 = +[NSNumber numberWithInteger:v10];
    long long v15 = +[NSString stringWithFormat:@"%@.%@(%@)", v12, v13, v14];
    [v11 addObject:v15];

    long long v16 = +[REMLogStore container];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = +[NSNumber numberWithInteger:v10];
      *(_DWORD *)long long buf = 138412802;
      uint64_t v22 = v17;
      __int16 v23 = 2112;
      uint64_t v24 = v18;
      __int16 v25 = 2112;
      unsigned __int8 v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "PopulateDefaultValues END {entity: %@, attributeName: %@, updated.count: %@}", buf, 0x20u);
    }
  }
  else
  {
    long long v16 = +[REMLogStore container];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_100755CDC((uint64_t)v6, a1, v16);
    }
  }
}

void sub_100081A60(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  id v4 = +[NSNotificationCenter defaultCenter];
  [v4 postNotificationName:kReachabilityChangedNotification object:v3];
}

void sub_100082388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000823B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000823C4(uint64_t a1)
{
}

void sub_1000823CC(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v3 = +[NSArray arrayWithObjects:&v6 count:1];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  LOBYTE(v2) = [v2 obtainPermanentIDsForObjects:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = (_BYTE)v2;
}

void sub_100082AF8(_Unwind_Exception *a1)
{
}

void sub_100082B18(uint64_t a1)
{
  id v2 = objc_opt_class();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) managedObjectContext];
  uint64_t v5 = [v2 ic_objectsMatchingPredicate:v3 context:v4];

  if ([v5 count])
  {
    id v6 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    unsigned __int8 v35 = v5;
    id obj = v5;
    id v40 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
    if (v40)
    {
      char v38 = 0;
      uint64_t v39 = *(void *)v49;
      uint64_t v37 = a1;
      do
      {
        for (i = 0; i != v40; i = (char *)i + 1)
        {
          if (*(void *)v49 != v39) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v48 + 1) + 8 * i);
          objc_opt_class();
          uint64_t v12 = REMDynamicCast();
          uint64_t v13 = [v12 ckIdentifier];
          uint64_t v14 = [v12 accountCKIdentifier];
          id v42 = v12;
          if (v14)
          {
            long long v15 = (void *)v14;
          }
          else
          {
            long long v16 = +[REMLog cloudkit];
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              uint64_t v55 = v13;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "ICBatchFetchHelper found object %{public}@ with nil accountIdentifier", buf, 0xCu);
            }

            if ((v38 & 1) == 0)
            {
              long long v46 = 0u;
              long long v47 = 0u;
              long long v44 = 0u;
              long long v45 = 0u;
              uint64_t v17 = [*(id *)(a1 + 40) ckIdentifierAccountPairs];
              id v18 = [v17 countByEnumeratingWithState:&v44 objects:v53 count:16];
              if (v18)
              {
                id v19 = v18;
                uint64_t v20 = *(void *)v45;
                do
                {
                  for (j = 0; j != v19; j = (char *)j + 1)
                  {
                    if (*(void *)v45 != v20) {
                      objc_enumerationMutation(v17);
                    }
                    uint64_t v22 = *(void **)(*((void *)&v44 + 1) + 8 * (void)j);
                    __int16 v23 = [v22 ckIdentifier];
                    [v9 setObject:v22 forKeyedSubscript:v23];
                  }
                  id v19 = [v17 countByEnumeratingWithState:&v44 objects:v53 count:16];
                }
                while (v19);
              }

              a1 = v37;
            }
            uint64_t v24 = [v9 objectForKeyedSubscript:v13];
            long long v15 = [v24 accountIdentifier];

            char v38 = 1;
          }
          id v41 = (void *)v13;
          __int16 v25 = [[_REMCKIdentifierAccountIdentifierPair alloc] initWithCkIdentifier:v13 accountIdentifier:v15];
          unsigned __int8 v26 = [*(id *)(a1 + 40) managedObjectContext];
          __int16 v52 = v11;
          +[NSArray arrayWithObjects:&v52 count:1];
          v28 = uint64_t v27 = a1;
          id v43 = 0;
          unsigned int v29 = [v26 obtainPermanentIDsForObjects:v28 error:&v43];
          id v30 = v43;

          if (v29)
          {
            id v31 = [*(id *)(v27 + 40) managedObjectIDCache];
            uint64_t v32 = [v11 objectID];
            [v31 setObject:v32 forKey:v25];

            [*(id *)(*(void *)(*(void *)(v27 + 48) + 8) + 40) addObject:v25];
            a1 = v27;
            id v33 = v42;
          }
          else
          {
            __int16 v34 = +[REMLog cloudkit];
            id v33 = v42;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138543362;
              uint64_t v55 = (uint64_t)v25;
              _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Cannot obtain permanent ID for %{public}@", buf, 0xCu);
            }

            a1 = v37;
          }
        }
        id v40 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
      }
      while (v40);
    }

    uint64_t v5 = v35;
  }
}

void sub_100083284(uint64_t a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v17;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v16 + 1) + 8 * (void)v6);
        id v8 = [_REMCKIdentifierAccountIdentifierPair alloc];
        id v9 = -[_REMCKIdentifierAccountIdentifierPair initWithCkIdentifier:accountIdentifier:](v8, "initWithCkIdentifier:accountIdentifier:", v7, *(void *)(a1 + 40), (void)v16);
        uint64_t v10 = [*(id *)(a1 + 48) ckIdentifierAccountPairs];
        [v10 addObject:v9];

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v4);
  }

  id v11 = [*(id *)(a1 + 48) dispatchBlocks];
  id v12 = objc_retainBlock(*(id *)(a1 + 56));
  [v11 addObject:v12];

  uint64_t v13 = [*(id *)(a1 + 48) dispatchBlocks];
  id v14 = [v13 count];
  id v15 = [*(id *)(a1 + 48) batchSize];

  if (v14 >= v15) {
    [*(id *)(a1 + 48) _flush];
  }
}

void sub_1000834B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dispatchBlocks];
  id v3 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 addObject:v3];

  id v4 = [*(id *)(a1 + 32) dispatchBlocks];
  id v5 = [v4 count];
  id v6 = [*(id *)(a1 + 32) batchSize];

  if (v5 >= v6)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    [v7 _flush];
  }
}

id sub_1000836F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flush];
}

void sub_100083B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100083BA4(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 24));
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [WeakRetained existingObjectWithID:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100084A40(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v2 = *(void **)(a1 + 40);

  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);
}

uint64_t sub_100084B40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100084E0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100084E30(uint64_t a1)
{
  id v2 = +[REMCDReminder cdEntityName];
  uint64_t v3 = +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:v2];

  uint64_t v4 = +[NSPredicate predicateWithFormat:@"%K != NULL", @"ckServerRecordData"];
  [v3 setPredicate:v4];

  [v3 setIncludesSubentities:1];
  [v3 setResultType:2];
  uint64_t v5 = +[NSString stringWithFormat:@"%@.%@", @"parentReminder", @"ckIdentifier"];
  CFStringRef v18 = @"ckParentReminderIdentifier";
  uint64_t v6 = +[NSExpression expressionForKeyPath:v5];
  long long v19 = v6;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  [v3 setPropertiesToUpdate:v7];

  uint64_t v17 = *(void *)(a1 + 32);
  id v8 = +[NSArray arrayWithObjects:&v17 count:1];
  [v3 setAffectedStores:v8];

  id v9 = [*(id *)(a1 + 32) persistentStoreCoordinator];
  uint64_t v10 = *(void *)(a1 + 40);
  id v16 = 0;
  id v11 = [v9 executeRequest:v3 withContext:v10 error:&v16];
  id v12 = v16;

  if (!v11)
  {
    uint64_t v15 = +[REMLogStore container];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1007562EC((uint64_t)v12, v15);
    }
    goto LABEL_7;
  }
  if ([v11 resultType] == (id)2)
  {
    uint64_t v13 = [v11 result];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v15 = [v11 result];
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v15 integerValue];
LABEL_7:
    }
  }
}

void sub_10008534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100085364(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100085374(uint64_t a1)
{
}

void sub_10008537C(uint64_t a1)
{
  id v2 = +[REMCDAccount fetchRequest];
  uint64_t v3 = +[REMCDAccount predicateForCloudKitAccountsWithKeyPathPrefix:0];
  [v2 setPredicate:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v26 = 0;
  uint64_t v5 = [v4 executeFetchRequest:v2 error:&v26];
  id v6 = v26;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;

  if (v6)
  {
    id v9 = +[REMLog cloudkit];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1007563B4();
    }
  }
  else
  {
    id v21 = v2;
    uint64_t v10 = +[NSMutableArray array];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v20 = a1;
    id v11 = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v12 = [v11 countByEnumeratingWithState:&v22 objects:v29 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v23;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v23 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          uint64_t v17 = [v16 ckUserRecordName];

          if (!v17)
          {
            CFStringRef v18 = +[REMLog cloudkit];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v28 = v16;
              _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Found extended account without CK user record name: %@", buf, 0xCu);
            }
          }
          [v10 addObject:v16];
        }
        id v13 = [v11 countByEnumeratingWithState:&v22 objects:v29 count:16];
      }
      while (v13);
    }

    id v6 = 0;
    uint64_t v19 = *(void *)(*(void *)(v20 + 40) + 8);
    id v9 = *(NSObject **)(v19 + 40);
    *(void *)(v19 + 40) = v10;
    id v2 = v21;
  }
}

void sub_10008573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085754(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000857F0;
  v4[3] = &unk_1008B08C0;
  long long v3 = *(_OWORD *)(a1 + 32);
  id v2 = (id)v3;
  long long v5 = v3;
  uint64_t v6 = *(void *)(a1 + 48);
  [v2 performBlockAndWait:v4];
}

void sub_1000857F0(uint64_t a1)
{
  id v2 = [(id)qword_100922AC0 objectForKey:*(void *)(a1 + 32)];
  uint64_t v3 = [v2 allValues];
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  uint64_t v7 = v6;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v8 = [*(id *)(a1 + 48) _fetchCloudKitAccountsInContext:*(void *)(a1 + 32)];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v7 = *(void **)(*(void *)(v11 + 8) + 40);
  if (v7)
  {
LABEL_3:
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v12 = v7;
    id v13 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v25;
      while (2)
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v25 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = [*(id *)(*((void *)&v24 + 1) + 8 * i) managedObjectContext:v24];

          if (!v17)
          {
            uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8);
            uint64_t v19 = *(void **)(v18 + 40);
            *(void *)(v18 + 40) = 0;

            goto LABEL_13;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }
LABEL_13:

    uint64_t v11 = *(void *)(a1 + 40);
    if (*(void *)(*(void *)(v11 + 8) + 40))
    {
      if (v6) {
        return;
      }
    }
    else
    {
      uint64_t v20 = [*(id *)(a1 + 48) _fetchCloudKitAccountsInContext:*(void *)(a1 + 32)];
      uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
      long long v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;

      uint64_t v11 = *(void *)(a1 + 40);
    }
  }
  long long v23 = [[*(id *)(a1 + 48) accountByCKIdentifierFrom:*(void *)(*(void *)(v11 + 8) + 40)], v24];
  [(id)qword_100922AC0 setObject:v23 forKey:*(void *)(a1 + 32)];
}

void sub_100085AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085AD8(uint64_t a1)
{
  id v2 = +[REMCDAccount fetchRequest];
  uint64_t v3 = cloudBasedAccountTypes();
  uint64_t v4 = +[NSPredicate predicateWithFormat:@"type IN %@", v3];
  [v2 setPredicate:v4];

  long long v5 = *(void **)(a1 + 32);
  id v9 = 0;
  id v6 = [v5 countForFetchRequest:v2 error:&v9];
  id v7 = v9;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  if (v7)
  {
    uint64_t v8 = +[REMLog cloudkit];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100756420();
    }
  }
}

void sub_100085FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100085FC0(uint64_t a1)
{
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
  if (!v2) {
    goto LABEL_26;
  }
  id v4 = v2;
  uint64_t v5 = *(void *)v36;
  *(void *)&long long v3 = 138543618;
  long long v33 = v3;
  while (2)
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(void *)v36 != v5) {
        objc_enumerationMutation(obj);
      }
      id v7 = *(void **)(*((void *)&v35 + 1) + 8 * i);
      uint64_t v8 = [v7 accountTypeHost:v33];
      unsigned int v9 = [v8 isPrimaryCloudKit];

      uint64_t v10 = [v7 identifier];
      uint64_t v11 = [v10 UUIDString];
      id v12 = [*(id *)(a1 + 40) identifier];
      unsigned int v13 = [v11 isEqualToString:v12];

      id v14 = [v7 identifier];
      uint64_t v15 = [v14 UUIDString];
      unsigned int v16 = [v15 isEqualToString:@"55CF9DED-2785-46E1-9991-04987805FEE7"];

      int v17 = v13 ^ 1;
      if (((v9 ^ 1) & 1) == 0 && (v17 & 1) == 0)
      {
        uint64_t v28 = +[REMLog cloudkit];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          unsigned int v29 = [v7 identifier];
          id v30 = [v29 UUIDString];
          id v31 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)long long buf = v33;
          id v40 = v30;
          __int16 v41 = 2114;
          id v42 = v31;
          uint64_t v32 = "CloudKitUtils: Found a CloudKit REMCDAccount that matches the primary iCloud ACAccount {cdAccount: %{pub"
                "lic}@, acAccount: %{public}@}";
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, v32, buf, 0x16u);
        }
LABEL_25:

        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v7);
        goto LABEL_26;
      }
      if (v16)
      {
        uint64_t v28 = +[REMLog cloudkit];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          unsigned int v29 = [v7 identifier];
          id v30 = [v29 UUIDString];
          id v31 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)long long buf = v33;
          id v40 = v30;
          __int16 v41 = 2114;
          id v42 = v31;
          uint64_t v32 = "CloudKitUtils: Found a PPT fixture CK account, ASSUMED to be matching the primary iCloud ACAccount {cdAc"
                "count: %{public}@, acAccount: %{public}@}";
          goto LABEL_24;
        }
        goto LABEL_25;
      }
      if ((v9 ^ 1 | v13))
      {
        if ((v9 | v17)) {
          continue;
        }
        uint64_t v18 = +[REMLog cloudkit];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
        {
          uint64_t v19 = [v7 identifier];
          uint64_t v20 = [v19 UUIDString];
          uint64_t v21 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)long long buf = v33;
          id v40 = v20;
          __int16 v41 = 2114;
          id v42 = v21;
          _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "CloudKitUtils: Found a non-primary CloudKit REMCDAccount that matches the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}", buf, 0x16u);
        }
      }
      else
      {
        long long v22 = +[REMLog cloudkit];
        if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
        {
          long long v25 = [v7 identifier];
          long long v26 = [v25 UUIDString];
          long long v27 = [*(id *)(a1 + 40) identifier];
          *(_DWORD *)long long buf = v33;
          id v40 = v26;
          __int16 v41 = 2114;
          id v42 = v27;
          _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "CloudKitUtils: Found a primary CloudKit REMCDAccount that does NOT match with the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}", buf, 0x16u);
        }
        uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
        id v24 = v7;
        uint64_t v18 = *(NSObject **)(v23 + 40);
        *(void *)(v23 + 40) = v24;
      }
    }
    id v4 = [obj countByEnumeratingWithState:&v35 objects:v43 count:16];
    if (v4) {
      continue;
    }
    break;
  }
LABEL_26:
}

void sub_100086718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086738(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000867F0;
  v5[3] = &unk_1008B08E8;
  id v6 = v2;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v7 = v4;
  uint64_t v8 = *(void *)(a1 + 56);
  [v6 performBlockAndWait:v5];
}

void sub_1000867F0(uint64_t a1)
{
  id v2 = [(id)qword_100922AC0 objectForKey:*(void *)(a1 + 32)];
  uint64_t v3 = [v2 objectForKey:*(void *)(a1 + 40)];
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void *)(v6 + 40);
  if (v7)
  {
    uint64_t v8 = 0;
    unsigned int v9 = *(void **)(v6 + 40);
    uint64_t v10 = v2;
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 56) _fetchCloudKitAccountsInContext:*(void *)(a1 + 32)];
    uint64_t v10 = [*(id *)(a1 + 56) accountByCKIdentifierFrom:v8];

    uint64_t v11 = [v10 objectForKey:*(void *)(a1 + 40)];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    unsigned int v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    id v14 = +[REMLog cloudkit];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 40);
      unsigned int v16 = [v10 allKeys];
      int v26 = 138543618;
      uint64_t v27 = v15;
      __int16 v28 = 2114;
      unsigned int v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "cloudKitAccountWithCKIdentifier: not in cache, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@", (uint8_t *)&v26, 0x16u);
    }
    unsigned int v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    if (!v9) {
      goto LABEL_12;
    }
  }
  int v17 = [v9 managedObjectContext];

  if (!v17)
  {
    uint64_t v18 = [*(id *)(a1 + 56) _fetchCloudKitAccountsInContext:*(void *)(a1 + 32)];

    uint64_t v19 = [*(id *)(a1 + 56) accountByCKIdentifierFrom:v18];

    uint64_t v20 = [v19 objectForKey:*(void *)(a1 + 40)];
    uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
    long long v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    uint64_t v23 = +[REMLog cloudkit];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      long long v25 = [v19 allKeys];
      int v26 = 138543618;
      uint64_t v27 = v24;
      __int16 v28 = 2114;
      unsigned int v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "cloudKitAccountWithCKIdentifier: nil context, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@", (uint8_t *)&v26, 0x16u);
    }
    uint64_t v8 = (void *)v18;
    uint64_t v10 = v19;
    goto LABEL_12;
  }
  if (!v7) {
LABEL_12:
  }
    [(id)qword_100922AC0 setObject:v10 forKey:*(void *)(a1 + 32)];
}

int main(int argc, const char **argv, const char **envp)
{
  ReminderKitInternalVerify()();
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E278(v3, qword_100906D70);
  uint64_t v4 = sub_10008E2DC(v3, (uint64_t)qword_100906D70);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_10008E2DC(v3, (uint64_t)qword_100942328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v5, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 67109120;
    id v9 = [self processInfo];
    [v9 processIdentifier];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "LAUNCH remindd {pid: %d}", v8, 8u);
    swift_slowDealloc();
  }

  sub_100087524();
  sub_1000878A8();
  return 0;
}

uint64_t sub_100087524()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v0 - 8);
  __chkstk_darwin();
  id v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v3 - 8);
  uint64_t v17 = v3;
  __chkstk_darwin();
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)&unk_100906D70);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "os_transaction INIT {name: com.apple.remindd.launch}", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = os_transaction_create();
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v11 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  aBlock[4] = sub_10009689C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  aBlock[3] = &unk_1008B8390;
  unsigned int v13 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v5, v17);
}

uint64_t sub_1000878A8()
{
  uint64_t v0 = type metadata accessor for REM_os_activity.Scope();
  uint64_t v23 = *(void *)(v0 - 8);
  uint64_t v24 = v0;
  __chkstk_darwin(v0);
  id v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for REM_os_activity.Options();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for REM_os_activity();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v22 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)&unk_100906D70);
  sub_100088AE4();
  sub_100088CBC(65537);
  static REM_os_activity.Options.ifNonePresent.getter();
  REM_os_activity.init(_:dso:options:)();
  REM_os_activity.Scope.init()();
  REM_os_activity.Scope.enter(_:)();
  char v27 = 0;
  v26.rlim_t rlim_cur = 0;
  v26.rlim_max = 0;
  getrlimit(8, &v26);
  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_beginAccess();
    rlim_t rlim_cur = v26.rlim_cur;
    sub_10008F634();
    uint64_t v11 = BinaryInteger.description.getter();
    rlim_t rlim_cur = sub_1000C51B8(v11, v12, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    rlim_t rlim_cur = v26.rlim_max;
    uint64_t v13 = BinaryInteger.description.getter();
    rlim_t rlim_cur = sub_1000C51B8(v13, v14, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "getrlimit(RLIMIT_NOFILE) = (%{public}s, %{public}s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100089818(&v27, &v28);
  REM_os_activity.Scope.leave()();
  char v16 = v27;
  do
  {
    CFRunLoopRunResult v18 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 86400.0, 1u);
    char v19 = v16 & gDADMainRunloopStopped;
  }
  while ((v19 & 1) == 0 && (v18 - 1) > 1);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v24);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100087CF0(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v99 = a3;
  uint64_t v97 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  v94 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = type metadata accessor for DispatchQoS();
  uint64_t v93 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  v92 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)&unk_100906D70);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "os_transaction INIT {name: com.apple.remindd.xpcEvents}", v12, 2u);
    swift_slowDealloc();
  }

  uint64_t v91 = os_transaction_create();
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100942078;
  uint64_t v14 = type metadata accessor for RDXPCEventStream.SystemXPCEventInterface();
  uint64_t v15 = swift_allocObject();
  if (byte_10090F9C8 == 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    byte_10090F9C8 = 1;
    v102 = (void *)v14;
    v103 = (void (*)())&off_1008BE550;
    aBlock[0] = v15;
    type metadata accessor for RDXPCEventStream();
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = sub_100096204((uint64_t)aBlock, v14);
    __chkstk_darwin(v17);
    char v19 = (uint64_t *)((char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v20 + 16))(v19);
    uint64_t v21 = *v19;
    *(void *)(v16 + 64) = v14;
    *(void *)(v16 + 72) = &off_1008BE550;
    *(unsigned char *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = _swiftEmptyArrayStorage;
    *(void *)(v16 + 40) = v21;
    *(void *)(v16 + 16) = v13;
    id v22 = v13;
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)aBlock);
    uint64_t v23 = (void *)qword_100942078;
    uint64_t v24 = (objc_class *)type metadata accessor for RDLocationManager();
    long long v25 = (char *)objc_allocWithZone(v24);
    *(void *)&v25[OBJC_IVAR____TtC7remindd17RDLocationManager_delegate + 8] = 0;
    swift_unknownObjectWeakInit();
    *(void *)&v25[OBJC_IVAR____TtC7remindd17RDLocationManager_q_locationManager] = 0;
    *(void *)&v25[OBJC_IVAR____TtC7remindd17RDLocationManager_queue] = v23;
    v107.receiver = v25;
    v107.super_class = v24;
    id v26 = v23;
    id v27 = [super init];
    uint64_t v28 = qword_1009070C0;
    swift_retain();
    id v29 = a1;
    swift_retain();
    id v30 = v27;
    swift_retain();
    if (v28 != -1) {
      swift_once();
    }
    id v31 = (void *)qword_100942060;
    Class v90 = (Class)type metadata accessor for RDDaemon();
    uint64_t v32 = (char *)objc_allocWithZone(v90);
    id v33 = v31;
    __int16 v34 = (char *)sub_10008F918((void *)v16, v29, a2, v99, v30, a4, v33, v32);
    id v99 = v34;
    type metadata accessor for RDMigrationClient();
    sub_1002A49E4((uint64_t)v29);
    uint64_t v89 = a2;
    id v86 = v30;
    long long v35 = &v34[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
    uint64_t v36 = *(void *)&v34[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon + 8];
    type metadata accessor for RDAccountUtils();
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 24) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(void *)(v37 + 24) = v36;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectWeakAssign();
    *(void *)(v37 + 40) = 0;
    [v29 setAccountUtils:v37];
    swift_release();
    uint64_t v88 = type metadata accessor for RDExchangeAccountComplimentaryService();
    swift_allocObject();
    id v38 = v29;
    v87 = sub_1000EED2C(v38, 0, 0, 0);
    uint64_t v39 = (objc_class *)type metadata accessor for RDDaemonController();
    uint64_t v40 = *((void *)v35 + 1);
    long long v108 = xmmword_100776E20;
    uint64_t v110 = 0;
    memset(v111, 0, 14);
    uint64_t v109 = 0;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v42 = swift_unknownObjectRetain();
    id v43 = sub_10054145C(v42, (uint64_t)&v108, 0, v39, ObjectType, v40);
    id v44 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v43];

    long long v45 = self;
    id v46 = v38;
    id v47 = v44;
    id v48 = [v45 sharedInstance];
    id v49 = [self daemonUserDefaults];
    long long v50 = (objc_class *)type metadata accessor for RDAccountInitializer();
    long long v51 = (char *)objc_allocWithZone(v50);
    *(void *)&v51[OBJC_IVAR____TtC7remindd20RDAccountInitializer_store] = v47;
    *(void *)&v51[OBJC_IVAR____TtC7remindd20RDAccountInitializer_storeController] = v46;
    *(void *)&v51[OBJC_IVAR____TtC7remindd20RDAccountInitializer_appleAccountUtilities] = v48;
    *(void *)&v51[OBJC_IVAR____TtC7remindd20RDAccountInitializer_userDefaults] = v49;
    v106.receiver = v51;
    v106.super_class = v50;
    id v52 = [super init];
    sub_100419D54();

    id v53 = (void *)qword_100942078;
    uint64_t v98 = type metadata accessor for RDNotifydEventStream();
    swift_allocObject();
    id v54 = v53;
    id v55 = v47;
    id v85 = v55;
    id v56 = v54;
    uint64_t v57 = sub_1002237E0(v56, 0);
    sub_1000963CC(0, (unint64_t *)&qword_100908178);
    id v58 = [(id)swift_getObjCClassFromMetadata() daemonUserDefaults];
    id v59 = [self sharedConfiguration];
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = v55;
    uint64_t v84 = type metadata accessor for RDSyncPoller();
    __int16 v61 = (void *)swift_allocObject();
    v61[4] = &off_1008CA620;
    v61[9] = v59;
    v61[10] = &off_1008CA640;
    v61[7] = v57;
    v61[8] = &off_1008BED88;
    v61[2] = v56;
    v61[3] = v58;
    v61[5] = sub_1000962A4;
    v61[6] = v60;
    long long v62 = (void *)qword_100942078;
    long long v63 = (objc_class *)type metadata accessor for RDDisplayDateUpdater();
    v83 = v63;
    id v64 = objc_allocWithZone(v63);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    swift_allocObject();
    id v65 = v62;
    id v66 = v46;
    id v67 = v65;
    __int16 v68 = (char *)v64;
    *(void *)&v68[OBJC_IVAR____TtC7remindd20RDDisplayDateUpdater_significantTimeNotificationStream] = sub_1002237E0(v67, 0);

    v105.receiver = v68;
    v105.super_class = v63;
    id v82 = [super init];

    __int16 v69 = (void *)qword_100942078;
    swift_allocObject();
    uint64_t v70 = sub_1002237E0(v69, 0);
    sub_1005C6578();
    sub_1005A9CFC();
    uint64_t v71 = (void *)swift_allocObject();
    v71[2] = v61;
    v71[3] = v16;
    id v72 = v86;
    v71[4] = v86;
    v71[5] = v70;
    uint64_t v81 = v16;
    v71[6] = v91;
    v103 = sub_100096304;
    v104 = v71;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100236C78;
    v102 = &unk_1008B8020;
    long long v73 = _Block_copy(aBlock);
    swift_retain();
    id v86 = v72;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    long long v74 = v92;
    static DispatchQoS.unspecified.getter();
    v100 = _swiftEmptyArrayStorage;
    sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    long long v75 = v94;
    uint64_t v76 = v97;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v73);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v75, v76);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v74, v95);
    swift_release();
    sub_100094134((uint64_t *)&unk_100908180);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_100776E30;
    *(void *)(v77 + 56) = v90;
    *(void *)(v77 + 64) = &off_1008B7D20;
    id v78 = v99;
    *(void *)(v77 + 32) = v99;
    *(void *)(v77 + 96) = type metadata accessor for RDStoreControllerNotificationCenter();
    *(void *)(v77 + 104) = &off_1008B7D00;
    *(void *)(v77 + 72) = v89;
    *(void *)(v77 + 136) = v84;
    *(void *)(v77 + 144) = &off_1008B7CF8;
    *(void *)(v77 + 112) = v61;
    *(void *)(v77 + 176) = v83;
    *(void *)(v77 + 184) = &off_1008B7CF0;
    *(void *)(v77 + 152) = v82;
    *(void *)(v77 + 216) = v98;
    *(void *)(v77 + 224) = &off_1008B7CE8;
    *(void *)(v77 + 192) = v70;
    *(void *)(v77 + 256) = v88;
    *(void *)(v77 + 264) = &off_1008B7CE0;
    *(void *)(v77 + 232) = v87;
    swift_retain();
    id v79 = v78;
    swift_unknownObjectRelease();
    swift_release();

    return (uint64_t)v79;
  }
  return result;
}

void sub_100088920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)&unk_100906D70);
  sub_10056E2B8();
  sub_1001E9A28();
  sub_1004F05C4();
  uint64_t v6 = *(void *)(a4 + 16);
  *(void *)(a4 + 16) = sub_100088A2C;
  *(void *)(a4 + 24) = 0;
  sub_100096314(v6);
  oslog = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "os_transaction RELEASE {name: com.apple.remindd.xpcEvents}", v8, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100088A2C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)&unk_100906D70);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Triggered proactiveExitStream.eventHandler. Exiting... {name: com.apple.remindd.xpcEvents}", v3, 2u);
    swift_slowDealloc();
  }

  return _xpc_transaction_exit_clean();
}

void sub_100088AE4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin();
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10008E2DC(v2, (uint64_t)&unk_100906D70);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  char v6 = _set_user_dir_suffix();
  swift_release();
  if ((v6 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    long long v13 = xmmword_100776E40;
    *(_OWORD *)(inited + 16) = xmmword_100776E40;
    *(void *)(inited + 32) = 49;
    *(void *)(inited + 40) = 0xE100000000000000;
    int v8 = errno.getter();
    if (!strerror(v8)) {
      __break(1u);
    }
    uint64_t v9 = String.init(cString:)();
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v9;
    *(void *)(inited + 56) = v10;
    sub_1001805C0(inited);
    uint64_t v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = v13;
    *(void *)(v11 + 32) = 48;
    *(void *)(v11 + 40) = 0xE100000000000000;
    int v12 = errno.getter();
    *(void *)(v11 + 72) = &type metadata for Int32;
    *(_DWORD *)(v11 + 4_Block_object_dispose(&STACK[0x260], 8) = v12;
    sub_1001805C0(v11);
    sub_10052ECB8((uint64_t)"Sandbox: _set_user_dir_suffix() failed %{public}d (%@)", 54, 2);
    __break(1u);
  }
}

uint64_t sub_100088CBC(int a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  char v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10008E2DC(v4, (uint64_t)&unk_100906D70);
  uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v8 + 16) = 1024;
  uint64_t v9 = (const char *)(v8 + 32);
  bzero((void *)(v8 + 32), 0x400uLL);
  if (!confstr(a1, (char *)(v8 + 32), 0x400uLL))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v31[1] = v7;
      uint64_t v12 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      uint64_t v33 = v31[0];
      *(_DWORD *)uint64_t v12 = 67240706;
      LODWORD(v32) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + _Block_object_dispose(&STACK[0x260], 8) = 1026;
      LODWORD(v32) = errno.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 14) = 2080;
      int v13 = errno.getter();
      uint64_t result = (uint64_t)strerror(v13);
      if (!result)
      {
LABEL_21:
        __break(1u);
        goto LABEL_22;
      }
      uint64_t v15 = String.init(cString:)();
      uint64_t v32 = sub_1000C51B8(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sandbox: confstr() for type %{public}d failed %{public}d (%s)", (uint8_t *)v12, 0x18u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  if (realpath_DARWIN_EXTSN(v9, 0))
  {
    swift_bridgeObjectRelease();
    sub_1000891C8();
    return swift_slowDealloc();
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.fault.getter();
  if (!os_log_type_enabled(v17, v18))
  {
    swift_bridgeObjectRelease_n();
LABEL_18:

    uint64_t v30 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v30 + 16) = 1;
    *(unsigned char *)(v30 + 32) = 0;
    sub_1000891C8();
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  uint64_t v33 = result;
  *(_DWORD *)uint64_t v19 = 136315650;
  uint64_t v20 = *(void *)(v8 + 16);
  if (!v20)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*v9)
  {
    uint64_t v21 = 0;
    uint64_t v22 = v20 - 1;
    while (v22 != v21)
    {
      if (!*(unsigned __int8 *)(v8 + 33 + v21++)) {
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_16:
  swift_bridgeObjectRetain();
  uint64_t v24 = static String._fromUTF8Repairing(_:)();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_1000C51B8(v24, v26, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v19 + 12) = 1026;
  LODWORD(v32) = errno.getter();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v19 + 1_Block_object_dispose(&STACK[0x260], 8) = 2080;
  int v27 = errno.getter();
  uint64_t result = (uint64_t)strerror(v27);
  if (result)
  {
    uint64_t v28 = String.init(cString:)();
    uint64_t v32 = sub_1000C51B8(v28, v29, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sandbox: realpath(%s) failed %{public}d (%s)", (uint8_t *)v19, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_1000891C8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)&unk_100906D70);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    uint64_t v3 = String.init(cString:)();
    sub_1000C51B8(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Sandbox: TMPDIR=%s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id sub_10008933C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)&unk_100906D70);
  if (qword_100907360 != -1) {
    swift_once();
  }
  long long v24 = xmmword_100776E50;
  uint64_t v26 = 0;
  v27[0] = 0;
  uint64_t v25 = 0;
  *(void *)((char *)v27 + 6) = 0;
  sub_10036ED54((uint64_t)&v24, a1, a2);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    int v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "os_transaction INIT {name: com.apple.remindd.xpcEvents}", v13, 2u);
    swift_slowDealloc();
  }

  uint64_t v14 = os_transaction_create();
  id v15 = [objc_allocWithZone((Class)type metadata accessor for RDBarebonesDaemon()) init];
  sub_1005C70B0();
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  aBlock[4] = sub_100096034;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  void aBlock[3] = &unk_1008B7EE0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v20);
  swift_release();
  return v15;
}

void sub_100089758(uint64_t a1, const char *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E2DC(v3, (uint64_t)&unk_100906D70);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc();
  }
}

void sub_100089818(unsigned char *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = (char *)sub_10008E2DC(v8, (uint64_t)&unk_100906D70);
  if ([self isSetupUser])
  {
    *(void *)&long long v108 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7E68;
    uint64_t v10 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v10);
    _Block_release(v10);
    *(void *)&long long v108 = j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7E90;
    os_log_type_t v11 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v11);
    _Block_release(v11);
    if (qword_1009070E0 != -1) {
      swift_once();
    }
    uint64_t v7 = (char *)qword_100942080;
    os_log_type_t v12 = (uint64_t *)&unk_10091D000;
    if (!qword_10091DC48) {
      goto LABEL_9;
    }
    if (qword_100907958 == -1)
    {
LABEL_6:
      sub_10008E2DC(v8, (uint64_t)qword_10091DC30);
      int v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "allCheckedInActivities called more than once", v15, 2u);
        swift_slowDealloc();
      }

LABEL_9:
      uint64_t v16 = v7;
      uint64_t v17 = sub_100095E98((uint64_t)&off_1008B10D0, v16, (uint64_t)sub_10008AC00, 0);

      v12[393] = (uint64_t)v17;
      swift_bridgeObjectRelease();
      os_log_type_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Running in the buddy setup user. Going to run a barebones daemon.", v20, 2u);
        swift_slowDealloc();
      }

      sub_100094134(&qword_100908148);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_100776E40;
      id v22 = sub_10008933C(0x754265726F666542, 0xEB00000000796464);
      *(void *)(v21 + 56) = type metadata accessor for RDBarebonesDaemon();
      *(void *)(v21 + 64) = &off_1008B7D18;
      *(void *)(v21 + 32) = v22;
      goto LABEL_57;
    }
LABEL_59:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v97 = a1;
  uint64_t v98 = v8;
  objc_super v105 = v9;
  v102 = a2;
  uint64_t v103 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v23 = objc_allocWithZone((Class)UNUserNotificationCenter);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v23 initWithBundleIdentifier:v24];

  if (qword_1009070D8 != -1) {
    swift_once();
  }
  os_log_type_t v12 = qword_100942000;
  uint64_t v26 = (void *)qword_100942078;
  int v27 = (objc_class *)type metadata accessor for RDUserNotificationCenter();
  uint64_t v28 = (char *)objc_allocWithZone(v27);
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_sharedListUpdateNotificationDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_queue] = v26;
  *(void *)&v28[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_notificationCenter] = v25;
  v109.receiver = v28;
  v109.super_class = v27;
  unint64_t v29 = v26;
  id v101 = v25;
  a2 = [super init];
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_10008F6C0;
  *(void *)(v31 + 24) = v30;
  uint64_t v100 = v30;
  *(void *)&long long v108 = sub_10008F6F4;
  *((void *)&v108 + 1) = v31;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v107 = sub_1003B3260;
  *((void *)&v107 + 1) = &unk_1008B7D78;
  uint64_t v32 = _Block_copy(&aBlock);
  uint64_t v33 = a2;
  swift_retain();
  swift_release();
  dispatch_sync(v29, v32);
  _Block_release(v32);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v29)
  {
    __break(1u);
    goto LABEL_59;
  }
  __int16 v34 = (void *)qword_100942078;
  uint64_t UnlockNotificationEngine = type metadata accessor for RDBeforeFirstUnlockNotificationEngine();
  uint64_t v36 = (void *)swift_allocObject();
  v36[2] = v34;
  v36[3] = v33;
  v36[4] = &off_1008C8BA8;
  v104 = v33;
  id v37 = v34;
  id v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "os_transaction INIT {name: com.apple.remindd.firstUnlockManager.launch}", v40, 2u);
    swift_slowDealloc();
  }

  uint64_t v41 = os_transaction_create();
  uint64_t v42 = type metadata accessor for RDFirstUnlockManager();
  swift_allocObject();
  uint64_t v43 = sub_10022A29C();
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  id v44 = (void *)static OS_dispatch_queue.main.getter();
  *(void *)&long long v108 = 0;
  long long aBlock = 0u;
  long long v107 = 0u;
  swift_retain();
  swift_unknownObjectRetain();
  char v45 = sub_10022A4C8((uint64_t)v44, (uint64_t)&aBlock, v43, (uint64_t)sub_10008AC20, 0, v43, v41);

  uint64_t v99 = v41;
  swift_unknownObjectRelease();
  swift_release();
  sub_1000966BC((uint64_t)&aBlock, &qword_100908140);
  if (v45 == 1)
  {
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v49, v50))
    {
      long long v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unexpected currentUnlockState - .firstUnlock is a transitional state that should be passed to the unlock handler only.", v51, 2u);
      swift_slowDealloc();
    }
  }
  else if (!v45)
  {
    *(void *)&long long v108 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7E40;
    id v46 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v46);
    _Block_release(v46);
    id v47 = v104;
    *(void *)&v104[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_beforeFirstUnlockReminderDelegate + 8] = &off_1008BFE60;
    swift_unknownObjectWeakAssign();
    swift_retain();
    sub_100292B04();
    swift_release();
    sub_100094134(&qword_100908148);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100776E60;
    id v48 = sub_10008933C(0x616F4C74416E7552, 0xE900000000000064);
    *(void *)(v21 + 56) = type metadata accessor for RDBarebonesDaemon();
    *(void *)(v21 + 64) = &off_1008B7D18;
    *(void *)(v21 + 32) = v48;
    *(void *)(v21 + 96) = UnlockNotificationEngine;
    *(void *)(v21 + 104) = &off_1008B7D08;
    *(void *)(v21 + 72) = v36;
    *(void *)(v21 + 136) = v42;
    *(void *)(v21 + 144) = &off_1008B7D10;
    *(void *)(v21 + 112) = v43;
    swift_release();

    swift_unknownObjectRelease();
    a2 = v102;
LABEL_57:
    *a2 = v21;
    return;
  }
  id v52 = [objc_allocWithZone((Class)RDStoreController) init];
  if ([v52 hasFailedLoadingAccountStoresFromDiskDueToDiskFull])
  {
    *(void *)&long long v108 = REMCDList.cleanUpAfterLocalObjectMerge();
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7DC8;
    id v53 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.alarm", 0, v53);
    _Block_release(v53);
    *(void *)&long long v108 = j_j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7DF0;
    id v54 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v54);
    _Block_release(v54);
    if (qword_1009070E0 != -1) {
      swift_once();
    }
    id v55 = (void *)qword_100942080;
    if (qword_10091DC48)
    {
      if (qword_100907958 != -1) {
        swift_once();
      }
      sub_10008E2DC(v98, (uint64_t)qword_10091DC30);
      id v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v56, v57))
      {
        id v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "allCheckedInActivities called more than once", v58, 2u);
        swift_slowDealloc();
      }
    }
    id v59 = v55;
    uint64_t v60 = sub_100095E98((uint64_t)&off_1008B10D0, v59, (uint64_t)sub_10008AD00, 0);

    qword_10091DC48 = (uint64_t)v60;
    swift_bridgeObjectRelease();
    __int16 v61 = (void *)static OS_dispatch_queue.main.getter();
    *(void *)&long long v108 = sub_10008AF10;
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_10008B834;
    *((void *)&v107 + 1) = &unk_1008B7E18;
    long long v62 = _Block_copy(&aBlock);
    swift_release();
    [v52 requestFreeSpaceToLoadAccountStoresWithQueue:v61 completionBlock:v62];
    _Block_release(v62);

    long long v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      id v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Could not load some of our databases due to disk full. Going to run a barebones daemon.", v65, 2u);
      swift_slowDealloc();
    }

    sub_100094134(&qword_100908148);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100776E40;
    id v66 = sub_10008933C(0x6C6C75466B736944, 0xE800000000000000);
    *(void *)(v21 + 56) = type metadata accessor for RDBarebonesDaemon();
    *(void *)(v21 + 64) = &off_1008B7D18;
    *(void *)(v21 + 32) = v66;
    swift_release();
    swift_release();

    goto LABEL_56;
  }
  v110[0] = 0x4014000000000000;
  type metadata accessor for RDStoreControllerNotificationCenter();
  memset(&v110[1], 0, 24);
  __int16 v111 = 0;
  swift_allocObject();
  id v52 = v52;
  id v67 = sub_100400110(0, 0, v52, (uint64_t)v110);
  if (qword_1009070C8 != -1) {
    swift_once();
  }
  sub_100401C48(0, (void *)qword_100942068, (uint64_t)sub_10008B8A4, 0, (uint64_t)v7);
  sub_100094178((uint64_t)v7);
  swift_retain();
  sub_1002938EC();
  swift_release();
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  __int16 v68 = sub_10008B968(0xD00000000000001BLL, 0x80000001007C75F0, (void *)qword_100942060, &qword_1009082A0, &qword_1009082A8);
  uint64_t v70 = v69;
  v95[1] = v68;
  objc_super v105 = (char *)sub_100087CF0(v52, (uint64_t)v67, v104, (uint64_t)v68);
  uint64_t v72 = v71;
  long long v73 = v97;
  if (qword_100907BA8 != -1) {
    swift_once();
  }
  int v74 = byte_1009426D9;
  *long long v73 = byte_1009426D9;
  uint64_t v96 = v72;
  if (v74 != 1)
  {
    if (qword_1009077D0 != -1) {
      swift_once();
    }
    sub_10008E2DC(v98, (uint64_t)qword_1009423B8);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Not Running DataAccess", v93, 2u);
      swift_slowDealloc();
    }

    *(void *)&long long v108 = j_j___s7remindd28RDLaunchAnalyticsPostNotifydyySo13OS_xpc_object_pF;
    *((void *)&v108 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v107 = sub_100594E04;
    *((void *)&v107 + 1) = &unk_1008B7DA0;
    v94 = _Block_copy(&aBlock);
    xpc_set_event_stream_handler("com.apple.notifyd.matching", 0, v94);
    _Block_release(v94);
    goto LABEL_55;
  }
  if (qword_1009077D0 != -1) {
    swift_once();
  }
  uint64_t v97 = v67;
  v95[0] = v52;
  sub_10008E2DC(v98, (uint64_t)qword_1009423B8);
  long long v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v77 = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Running DataAccess", v77, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for RDDARequestsQueue();
  id v78 = (void *)swift_allocObject();
  v78[6] = 0;
  swift_unknownObjectWeakInit();
  v78[2] = 0xD000000000000019;
  v78[3] = 0x80000001007C7650;
  id v79 = *(void **)(v70 + 32);
  v78[4] = v79;
  v78[7] = v70;
  v78[8] = _swiftEmptyArrayStorage;
  swift_retain_n();
  id v80 = v79;
  sub_10008BF54((uint64_t)v78, v80, (uint64_t)sub_1001B4A4C, 0);
  swift_release();

  uint64_t v81 = *(void *)&v105[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
  uint64_t v82 = *(void *)&v105[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon + 8];
  v83 = (objc_class *)type metadata accessor for RDDaemonController();
  long long aBlock = xmmword_100776E70;
  *(void *)&long long v108 = 0;
  long long v107 = 0uLL;
  *(void *)((char *)&v108 + 6) = 0;
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectRetain_n();
  id v85 = v104;
  id v86 = sub_10054145C(v81, (uint64_t)&aBlock, 0, v83, ObjectType, v82);
  v87 = (void *)qword_100922078;
  qword_100922078 = (uint64_t)v86;

  off_100922080 = v97;
  swift_retain();
  swift_release();
  qword_100922088 = (uint64_t)v85;
  qword_100922090 = (uint64_t)&off_1008C8BA8;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (qword_100907BA0 != -1) {
    swift_once();
  }
  uint64_t v88 = qword_1009426D0;
  uint64_t v90 = v103;
  sub_1007437F0(v88, (uint64_t)v78);
  id v52 = (id)v95[0];
  if (!v90)
  {
    swift_release();
LABEL_55:
    uint64_t v21 = (uint64_t)sub_1001FF764(v96);
    swift_release();
    swift_release();

    swift_release();
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
LABEL_56:

    swift_release();
    swift_unknownObjectRelease();

    a2 = v102;
    goto LABEL_57;
  }
  __break(1u);
}

void sub_10008AC00(char a1)
{
}

void sub_10008AC20()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)&unk_100906D70);
  raise(1);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "remindd raised signal (%d) in try to terminate asap", v3, 8u);
    swift_slowDealloc();
  }

  exit(0);
}

void sub_10008AD00(char a1)
{
}

void sub_10008AD20(char a1, const char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)&unk_100906D70);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v8 = 0xD000000000000030;
    unint64_t v9 = 0x80000001007C7430;
    switch(a1)
    {
      case 1:
        uint64_t v8 = 0xD00000000000002DLL;
        uint64_t v10 = "com.apple.remindd.ICCloudConfigurationUpdater";
        goto LABEL_6;
      case 2:
        uint64_t v8 = 0xD000000000000034;
        uint64_t v10 = "com.apple.remindd.ICCloudSchemaCatchUpSyncController";
        goto LABEL_6;
      case 3:
        uint64_t v8 = 0xD000000000000031;
        uint64_t v10 = "com.apple.remindd.RDHousekeepingActivityScheduler";
LABEL_6:
        unint64_t v9 = (unint64_t)(v10 - 32) | 0x8000000000000000;
        break;
      case 4:
        unint64_t v9 = 0x80000001007C7520;
        uint64_t v8 = 0xD00000000000001BLL;
        break;
      default:
        break;
    }
    sub_1000C51B8(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, a2, v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

void sub_10008AF10(uint64_t a1, unsigned char *a2, unint64_t a3)
{
  unint64_t v46 = a3;
  id v47 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v44[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v52 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v44[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for DispatchTimeInterval();
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v50 = v11;
  __chkstk_darwin(v11);
  int v13 = &v44[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v51 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v51 - 8);
  uint64_t v15 = __chkstk_darwin(v51);
  id v48 = &v44[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  os_log_type_t v18 = &v44[-v17];
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = sub_10008E2DC(v19, (uint64_t)&unk_100906D70);
  uint64_t v54 = v8;
  uint64_t v55 = v5;
  id v53 = v7;
  uint64_t v56 = v20;
  if ((unint64_t)(a1 - 2) >= 3 && a1)
  {
    if (a1 != 1)
    {
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
      sub_10052ECB8((uint64_t)"Unknown RDFreeSpaceResult value", 31, 2);
      __break(1u);
      return;
    }
    uint64_t v36 = Logger.logObject.getter();
    int v45 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v36, (os_log_type_t)v45);
    unint64_t v38 = v46;
    if (v46 >= (unint64_t)v47)
    {
      if (v37)
      {
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 134218240;
        aBlock[0] = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 12) = 2048;
        aBlock[0] = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v45, "remindd is now exiting in response to requested free space to load account stores {requested: %llu, available: %llu}", (uint8_t *)v40, 0x16u);
        swift_slowDealloc();
      }

      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Notifying stores must refresh due to relaunching upon requested free space to load account stores", v43, 2u);
        swift_slowDealloc();
      }

      notify_post(_REMStoreMustRefreshNotificationName);
      sub_10008AC20();
    }
    if (v37)
    {
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 134218240;
      aBlock[0] = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2048;
      aBlock[0] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v45, "RDStoreController.requestFreeSpaceToLoadAccountStores completes with .success but still doesn't have enough space {requested: %llu, available: %llu}", (uint8_t *)v39, 0x16u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218496;
      aBlock[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      aBlock[0] = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2048;
      aBlock[0] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDStoreController.requestFreeSpaceToLoadAccountStores did not succeed {result: %lu, requested: %llu, available: %llu}", (uint8_t *)v23, 0x20u);
      swift_slowDealloc();
    }
  }
  NSString v24 = v48;
  static DispatchTime.now()();
  *int v13 = 300;
  uint64_t v26 = v49;
  uint64_t v25 = v50;
  (*(void (**)(void *, void, uint64_t))(v49 + 104))(v13, enum case for DispatchTimeInterval.seconds(_:), v50);
  id v47 = v18;
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v26 + 8))(v13, v25);
  int v27 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
  uint64_t v28 = v51;
  uint64_t v50 = v14 + 8;
  v27(v24, v51);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 134217984;
    aBlock[0] = 300;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "remindd couldn't get the requested free space to load account stores, will terminate after {delay: %ld}", v31, 0xCu);
    swift_slowDealloc();
  }

  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  uint64_t v32 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_10008B77C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100236C78;
  void aBlock[3] = &unk_1008B7F08;
  uint64_t v33 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  __int16 v34 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v35 = v47;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v33);

  (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v34, v4);
  (*(void (**)(unsigned char *, uint64_t))(v52 + 8))(v10, v54);
  v27(v35, v28);
}

void sub_10008B77C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)&unk_100906D70);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "remindd is now exiting after failure to get requested disk space to load account stores in hope to get relaunched in some better future", v3, 2u);
    swift_slowDealloc();
  }

  sub_10008AC20();
}

uint64_t sub_10008B834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

uint64_t sub_10008B8A4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)&unk_100906D70);
  os_log_type_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Notifying stores did change", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = (const char *)_REMStoreChangedNotificationName;

  return notify_post(v4);
}

void *sub_10008B968(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  sub_100094134(a4);
  uint64_t v9 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  v9[6] = 0;
  v9[7] = 0;
  _DWORD v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  sub_100094134(a5);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  void v10[4] = a3;
  void v10[5] = v9;
  swift_bridgeObjectRetain_n();
  id v11 = a3;
  swift_retain();
  return v10;
}

uint64_t variable initialization expression of StartMigrationRequest.source@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for StartMigrationRequest.OneOf_Source, a1);
}

uint64_t static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()()
{
  return 0;
}

uint64_t variable initialization expression of StartMigrationResponse.state()
{
  return 0;
}

uint64_t variable initialization expression of StartMigrationResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for StartMigrationResponse.OneOf_Result, a1);
}

double variable initialization expression of StartMigrationResponse.Details.timeElapsed()
{
  return 0.0;
}

uint64_t variable initialization expression of MigrateRequest.source@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for MigrateRequest.OneOf_Source, a1);
}

void __swiftcall REMCDAccount.existingLocalObjectToMerge(with:)(REMCDObject_optional *__return_ptr retstr, NSPredicate_optional *with)
{
}

uint64_t variable initialization expression of MigrateResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for MigrateResponse.OneOf_Result, a1);
}

uint64_t variable initialization expression of MigrateResponse._nextStep@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for MigrateResponse.NextStep, a1);
}

uint64_t variable initialization expression of UnmigrateResponse.result@<X0>(uint64_t a1@<X8>)
{
  return sub_10008BAD0(type metadata accessor for UnmigrateResponse.OneOf_Result, a1);
}

uint64_t sub_10008BAD0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t variable initialization expression of BasicResponse.result()
{
  return 0;
}

void sub_10008BB54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  uint64_t v14 = (void *)v4[4];
  if (static NSObject.== infix(_:_:)())
  {
    uint64_t v32 = a1;
    if (v4[6])
    {
      if (qword_1009075B8 != -1) {
        swift_once();
      }
      sub_10008E2DC(v10, (uint64_t)qword_100918C80);
      swift_retain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v31 = a3;
        uint64_t v19 = v5[2];
        unint64_t v18 = v5[3];
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_1000C51B8(v19, v18, &v34);
        a3  = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
    }
    uint64_t v21 = v5[2];
    uint64_t v20 = v5[3];
    swift_unknownObjectWeakAssign();
    uint64_t v22 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v23 = (void *)swift_allocObject();
    v23[2]  = v22;
    v23[3]  = v21;
    v23[4]  = v20;
    void v23[5] = a3;
    v23[6]  = a4;
    uint64_t v24 = v5[6];
    v5[6]  = sub_1000965EC;
    v5[7]  = v23;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100096314(v24);
  }
  else
  {
    if (qword_1009075B8 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10008E2DC(v10, (uint64_t)qword_100918C80);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100776E80;
    *(void *)(inited + 32)  = 48;
    *(void *)(inited + 40)  = 0xE100000000000000;
    uint64_t v27 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v14;
    *(void *)(inited + 72)  = v27;
    *(void *)(inited + 80)  = 49;
    *(void *)(inited + 120)  = v27;
    *(void *)(inited + 8_Block_object_dispose(&STACK[0x260], 8) = 0xE100000000000000;
    *(void *)(inited + 96)  = a2;
    id v28 = v14;
    id v29 = a2;
    sub_1001805C0(inited);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"Unexpected eventHandler queue {self.queue: %@, queue: %@}", 57, 2);
    __break(1u);
  }
}

void sub_10008BF54(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000963CC(0, (unint64_t *)&qword_10090C120);
  uint64_t v14 = (void *)v4[4];
  if (static NSObject.== infix(_:_:)())
  {
    uint64_t v32 = a1;
    if (v4[6])
    {
      if (qword_1009075B8 != -1) {
        swift_once();
      }
      sub_10008E2DC(v10, (uint64_t)qword_100918C80);
      swift_retain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v31 = a3;
        uint64_t v19 = v5[2];
        unint64_t v18 = v5[3];
        swift_bridgeObjectRetain();
        uint64_t v33 = sub_1000C51B8(v19, v18, &v34);
        a3  = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
    }
    uint64_t v21 = v5[2];
    uint64_t v20 = v5[3];
    swift_unknownObjectWeakAssign();
    uint64_t v22 = swift_allocObject();
    swift_weakInit();
    uint64_t v23 = (void *)swift_allocObject();
    v23[2]  = v22;
    v23[3]  = v21;
    v23[4]  = v20;
    void v23[5] = a3;
    v23[6]  = a4;
    uint64_t v24 = v5[6];
    v5[6]  = sub_100096144;
    v5[7]  = v23;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100096314(v24);
  }
  else
  {
    if (qword_1009075B8 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_10008E2DC(v10, (uint64_t)qword_100918C80);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v25, v10);
    sub_100094134(&qword_100908170);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100776E80;
    *(void *)(inited + 32)  = 48;
    *(void *)(inited + 40)  = 0xE100000000000000;
    uint64_t v27 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v14;
    *(void *)(inited + 72)  = v27;
    *(void *)(inited + 80)  = 49;
    *(void *)(inited + 120)  = v27;
    *(void *)(inited + 8_Block_object_dispose(&STACK[0x260], 8) = 0xE100000000000000;
    *(void *)(inited + 96)  = a2;
    id v28 = v14;
    id v29 = a2;
    sub_1001805C0(inited);
    sub_1001805C0((uint64_t)_swiftEmptyArrayStorage);
    sub_10052ECB8((uint64_t)"Unexpected eventHandler queue {self.queue: %@, queue: %@}", 57, 2);
    __break(1u);
  }
}

uint64_t variable initialization expression of REMGroceryClassifier.requireRemovingNumbers()
{
  return 2;
}

uint64_t sub_10008C35C()
{
  return swift_slowDealloc();
}

uint64_t sub_10008C368()
{
  return swift_slowAlloc();
}

id variable initialization expression of RDSynchronizedKeyValueStore.queue()
{
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_100942078;

  return v0;
}

uint64_t variable initialization expression of REMCDTemplate.defaultPublicLinkURLHostname()
{
  return 0x632E64756F6C6369;
}

void sub_10008C3E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, uint64_t *))
{
  uint64_t v15 = a1;
  swift_beginAccess();
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    a5(Strong, &v15);
  }
  else
  {
    if (qword_1009075B8 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_100918C80);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      int v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)int v13 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Dropping reader message because target has been deallocated {identifier: %s}", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_10008C5D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  sub_1000961A8(a1, (uint64_t)v13);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    a5();
    swift_release();
  }
  else
  {
    if (qword_1009075B8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E2DC(v8, (uint64_t)qword_100918C80);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000C51B8(a3, a4, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Dropping reader message because target has been deallocated {identifier: %s}", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_10008C7D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[0]  = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16)  = a3;
  *(void *)(v13 + 24)  = a1;
  aBlock[4]  = sub_100096640;
  aBlock[5]  = v13;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8228;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  v16[1]  = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_10008CA9C()
{
  os_log_type_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[2];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  char v8 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v8)
  {
    if (qword_100907670 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_10091A490);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CloudSchemaCatchUpSyncController: Starting", v12, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (v1[3])
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      os_log_type_t v16 = "CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v17 = v1[4];
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    uint64_t v19 = *(void **)(v17 + 16);
    type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16)  = v19;
    uint64_t v21 = (void *)swift_allocObject();
    v21[2]  = v7;
    v21[3]  = sub_100096774;
    void v21[4] = v18;
    type metadata accessor for RDDynamicXPCActivity();
    swift_allocObject();
    id v22 = v7;
    swift_retain();
    swift_retain_n();
    id v23 = v19;
    *(void *)(v20 + 24)  = sub_100597404(2, (uint64_t)sub_100097308, (uint64_t)v21);
    swift_release();
    swift_release_n();
    v1[3]  = v20;
    swift_release();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      os_log_type_t v16 = "CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start";
      goto LABEL_10;
    }
  }
}

void sub_10008CE44()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  os_log_type_t v42 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)&v39 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(v1 + 16);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v1_Block_object_dispose(&STACK[0x260], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v20 = *(void **)(v1 + 40);
  swift_getObjectType();
  if ([v20 schedulingState] != (id)1) {
    return;
  }
  id v21 = [v20 lastScheduledDate];
  if (v21)
  {
    id v22 = v21;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v23 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v23(v4, v11, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      v23(v13, v4, v5);
      Date.timeIntervalSinceNow.getter();
      double v24 = *(double *)(v1 + 64);
      if (v25 >= -v24)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      }
      else
      {
        if (qword_100907670 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_10008E2DC(v26, (uint64_t)qword_10091A490);
        uint64_t v27 = v42;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v42, v13, v5);
        swift_retain();
        id v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v41 = swift_slowAlloc();
          uint64_t v44 = v41;
          *(_DWORD *)uint64_t v30 = 134349314;
          uint64_t v43 = *(void *)&v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          *(_WORD *)(v30 + 12)  = 2082;
          sub_10008F3AC((unint64_t *)&qword_100908230, (void (*)(uint64_t))&type metadata accessor for Date);
          os_log_t v40 = v28;
          uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v43 = sub_1000C51B8(v31, v32, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
          v33(v27, v5);
          os_log_t v34 = v40;
          _os_log_impl((void *)&_mh_execute_header, v40, v29, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release();
          uint64_t v33 = *(void (**)(char *, uint64_t))(v6 + 8);
          v33(v27, v5);
        }
        sub_10008DAB4();
        v33(v13, v5);
      }
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  }
  sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
  if (qword_100907670 != -1) {
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v35 = type metadata accessor for Logger();
  sub_10008E2DC(v35, (uint64_t)qword_10091A490);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now", v38, 2u);
    swift_slowDealloc();
  }

  sub_1004A3CA0();
  sub_10008D4B0();
}

void sub_10008D4B0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v27[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = (void *)v0[2];
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5)  = _dispatchPreconditionTest(_:)();
  uint64_t v8 = *(void (**)(void *, uint64_t))(v2 + 8);
  uint64_t v7 = v2 + 8;
  v8(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  swift_beginAccess();
  uint64_t v1 = v0[3];
  if (v1)
  {
    uint64_t v9 = (void *)v0[5];
    swift_getObjectType();
    swift_retain();
    id v10 = [v9 schedulingState];
    if (v10)
    {
      uint64_t v7 = (uint64_t)v10;
      if (qword_100907670 == -1)
      {
LABEL_5:
        uint64_t v11 = type metadata accessor for Logger();
        sub_10008E2DC(v11, (uint64_t)qword_10091A490);
        swift_retain();
        uint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 134349312;
          uint64_t v28 = v7;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v14 + 12)  = 1026;
          uint64_t v28 = v1;
          type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivity();
          LOBYTE(v2_Block_object_dispose(&STACK[0x260], 8) = sub_1004A452C() & 1;
          LODWORD(v2_Block_object_dispose(&STACK[0x260], 8) = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{BOOL,public}d}", (uint8_t *)v14, 0x12u);
          swift_slowDealloc();
          swift_release();
        }
        else
        {
          swift_release_n();
        }

        return;
      }
LABEL_26:
      swift_once();
      goto LABEL_5;
    }
    uint64_t v28 = *(void *)(*(void *)(v1 + 24) + 120);
    type metadata accessor for UnfairLock();
    swift_retain();
    Lock.sync<A>(_:)();
    swift_release();
    if (v27[15])
    {
      if (qword_100907670 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E2DC(v19, (uint64_t)qword_10091A490);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        id v22 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v22 = 134349056;
        uint64_t v28 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}", v22, 0xCu);
        swift_slowDealloc();
      }

      sub_1004A3FE8();
      swift_release();
    }
    else
    {
      sub_1004A42F0();
      sub_1004A3FE8();
      if (qword_100907670 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10091A490);
      double v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria", v26, 2u);
        swift_slowDealloc();
      }
      swift_release();
    }
  }
  else
  {
    if (qword_100907670 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091A490);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out", v18, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10008DA54()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10008DAB4();
    return swift_release();
  }
  return result;
}

void sub_10008DAB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (void *)v1[2];
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v43 = v12;
  LOBYTE(v12)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if (v12)
  {
    os_log_type_t v42 = v4;
    if (qword_100907670 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10091A490);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudSchemaCatchUpSyncController: Running scheduled background activity...", v16, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v17 = (void *)v1[5];
  swift_getObjectType();
  uint64_t v18 = (void **)[v17 schedulingState];
  if (v18 == (void **)1)
  {
    sub_1004A3CE8();
    Strong  = swift_unknownObjectWeakLoadStrong();
    uint64_t v20 = v1[7];
    os_log_type_t v21 = Logger.logObject.getter();
    if (Strong)
    {
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}", v23, 2u);
        swift_slowDealloc();
      }

      uint64_t v24 = os_transaction_create();
      os_log_type_t v25 = (void *)swift_allocObject();
      v25[2]  = Strong;
      v25[3]  = v20;
      void v25[4] = v24;
      uint64_t v41 = v24;
      uint64_t v51 = sub_100096758;
      uint64_t v52 = v25;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v48 = 1107296256;
      os_log_t v40 = &v49;
      uint64_t v49 = sub_100236C78;
      uint64_t v50 = &unk_1008B82A0;
      uint64_t v26 = _Block_copy(&aBlock);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      static DispatchQoS.unspecified.getter();
      unint64_t v46 = _swiftEmptyArrayStorage;
      v37[2]  = sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      v37[1]  = sub_100094134((uint64_t *)&unk_10090AFD0);
      v37[3]  = sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
      uint64_t v27 = v42;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v39 = Strong;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v26);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v45 + 8);
      v45 += 8;
      unint64_t v38 = v28;
      v28(v27, v2);
      os_log_type_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
      v29(v7, v5);
      swift_release();
      uint64_t v51 = sub_100096764;
      uint64_t v52 = v1;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v48 = 1107296256;
      uint64_t v49 = sub_100236C78;
      uint64_t v50 = &unk_1008B82C8;
      uint64_t v30 = _Block_copy(&aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      unint64_t v46 = _swiftEmptyArrayStorage;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v30);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v38(v27, v2);
      v29(v7, v5);
      swift_release();
    }
    else
    {
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v35, "CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()", v36, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    uint64_t v31 = v18;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_t v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_t v34 = 134349056;
      long long aBlock = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}", v34, 0xCu);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10008E21C(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if (*(void *)(a1 + 24))
  {
    swift_retain();
    sub_100596208();
    return swift_release();
  }
  return result;
}

uint64_t *sub_10008E278(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2  = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_10008E2DC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t variable initialization expression of RDUserNotificationCenter.beforeFirstUnlockReminderDelegate()
{
  return 0;
}

uint64_t sub_10008E320(uint64_t a1, uint64_t a2)
{
  return sub_10008F084(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10008E344(uint64_t a1, uint64_t a2)
{
  return sub_10008F084(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

_WORD *sub_10008E364@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2  = *result;
  *(unsigned char *)(a2 + 2)  = 0;
  return result;
}

void sub_10008E374(_WORD *a1@<X8>)
{
  *a1  = *v1;
}

id sub_10008E388()
{
  return *v0;
}

uint64_t sub_10008E390@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2  = result;
  return result;
}

uint64_t sub_10008E398(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2  = 0;
  return result;
}

uint64_t sub_10008E410(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2  = 0;
  return v3 & 1;
}

uint64_t sub_10008E490@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v2;
  return result;
}

BOOL sub_10008E4D4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

void sub_10008E4EC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10008E51C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10008E564()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10008E5A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1  = result;
  a1[1]  = v3;
  return result;
}

uint64_t sub_10008E5D4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10008E5E4(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10008E650(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10008E6BC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10008E74C()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10008E784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10008E800()
{
  return Hasher._finalize()();
}

void *sub_10008E860@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2  = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  return result;
}

void sub_10008E870(void *a1@<X8>)
{
  *a1  = *v1;
}

uint64_t sub_10008E87C(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100908450, type metadata accessor for NLLanguage);
  uint64_t v3 = sub_10008F3AC(&qword_100908458, type metadata accessor for NLLanguage);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008E938(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100908420, type metadata accessor for REMSmartListType);
  uint64_t v3 = sub_10008F3AC(&qword_100908428, type metadata accessor for REMSmartListType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008E9F4(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100907DA0, type metadata accessor for ICCloudContextSyncReason);
  uint64_t v3 = sub_10008F3AC(&qword_100907DA8, type metadata accessor for ICCloudContextSyncReason);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008EAB0(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100907DB0, type metadata accessor for REMXPCSyncInterfaceSyncReason);
  uint64_t v3 = sub_10008F3AC(&qword_100907DB8, type metadata accessor for REMXPCSyncInterfaceSyncReason);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008EB6C(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100908440, type metadata accessor for NLTagScheme);
  uint64_t v3 = sub_10008F3AC(&qword_100908448, type metadata accessor for NLTagScheme);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008EC28(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100908430, type metadata accessor for NLTag);
  uint64_t v3 = sub_10008F3AC(&qword_100908438, type metadata accessor for NLTag);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008ECE4(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100907DC0, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10008F3AC(&qword_100907DC8, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008EDA0(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_1009083D0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10008EE0C(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_1009083D0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10008EE7C(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10008EEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_10008EF6C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10008EF80@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v2;
  return result;
}

uint64_t sub_10008EFC8(uint64_t a1)
{
  uint64_t v2 = sub_10008F3AC(&qword_100908410, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_10008F3AC(&qword_100908418, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10008F084(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10008F0C8()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10008F11C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10008F190()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10008F21C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unsigned char **sub_10008F258(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void type metadata accessor for REMAccountType(uint64_t a1)
{
}

void type metadata accessor for REMStoreMode(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void type metadata accessor for ICCloudContextSyncReason(uint64_t a1)
{
}

void type metadata accessor for REMSharedEntitySyncActivityType(uint64_t a1)
{
}

void type metadata accessor for REMXPCSyncInterfaceSyncReason(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for REMObjectIsConnectedState(uint64_t a1)
{
}

uint64_t sub_10008F31C()
{
  return sub_10008F3AC(&qword_100907D50, type metadata accessor for URLResourceKey);
}

uint64_t sub_10008F364()
{
  return sub_10008F3AC(&qword_100907D58, type metadata accessor for URLResourceKey);
}

uint64_t sub_10008F3AC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008F3F4()
{
  return sub_10008F3AC(&qword_100907D60, type metadata accessor for URLResourceKey);
}

uint64_t sub_10008F43C()
{
  return sub_10008F3AC(&qword_100907D68, type metadata accessor for REMXPCSyncInterfaceSyncReason);
}

uint64_t sub_10008F484()
{
  return sub_10008F3AC(&qword_100907D70, type metadata accessor for REMXPCSyncInterfaceSyncReason);
}

uint64_t sub_10008F4CC()
{
  return sub_10008F3AC(&qword_100907D78, type metadata accessor for REMXPCSyncInterfaceSyncReason);
}

uint64_t sub_10008F514()
{
  return sub_10008F3AC(&qword_100907D80, type metadata accessor for ICCloudContextSyncReason);
}

uint64_t sub_10008F55C()
{
  return sub_10008F3AC(&qword_100907D88, type metadata accessor for ICCloudContextSyncReason);
}

uint64_t sub_10008F5A4()
{
  return sub_10008F3AC(&qword_100907D90, type metadata accessor for ICCloudContextSyncReason);
}

uint64_t sub_10008F5EC()
{
  return sub_10008F3AC(&qword_100907D98, type metadata accessor for REMAccountType);
}

unint64_t sub_10008F634()
{
  unint64_t result = qword_100908130;
  if (!qword_100908130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908130);
  }
  return result;
}

uint64_t sub_10008F688()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10008F6C0()
{
}

uint64_t sub_10008F6E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008F6F4()
{
  return sub_1003B3238(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10008F6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_10008F70C()
{
  return swift_release();
}

uint64_t sub_10008F714(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = *(void (**)(uint64_t *))(result + 48);
  if (v2)
  {
    swift_retain();
    v2(&v3);
    return sub_100096314((uint64_t)v2);
  }
  return result;
}

uint64_t sub_10008F788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v19 = type metadata accessor for RDPublicCloudDatabaseController();
  uint64_t v20 = &off_1008CAD20;
  *(void *)&long long v18 = a4;
  *(void *)(a6 + 64)  = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a6 + 104)  = &_swiftEmptySetSingleton;
  *(void *)(a6 + 112)  = 0;
  *(unsigned char *)(a6 + 120)  = 0;
  *(void *)(a6 + 12_Block_object_dispose(&STACK[0x260], 8) = 0xD000000000000023;
  *(void *)(a6 + 136)  = 0x80000001007C7960;
  *(void *)(a6 + 144)  = 0xD00000000000002BLL;
  *(void *)(a6 + 152)  = 0x80000001007C7990;
  *(void *)(a6 + 160)  = 0xD000000000000038;
  *(void *)(a6 + 16_Block_object_dispose(&STACK[0x260], 8) = 0x80000001007C79C0;
  *(void *)(a6 + 176)  = [objc_allocWithZone((Class)type metadata accessor for RDTemplateOperationQueue.BabysitTarget()) init];
  *(void *)(a6 + 72)  = a1;
  uint64_t v12 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v13 = (char *)objc_allocWithZone(v12);
  uint64_t v14 = &v13[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v14 = a2;
  *((void *)v14 + 1)  = &off_1008C3598;
  os_log_type_t v15 = &v13[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)os_log_type_t v15 = 0xD000000000000016;
  *((void *)v15 + 1)  = 0x80000001007C7A00;
  *(void *)(v15 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v15 + 3)  = 0;
  *((void *)v15 + 4)  = 0;
  *((void *)v15 + 2)  = 0;
  *(void *)&v13[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v17.receiver  = v13;
  v17.super_class  = v12;
  *(void *)(a6 + 80)  = [super init];
  *(void *)(a6 + 8_Block_object_dispose(&STACK[0x260], 8) = a3;
  sub_1000967D4(&v18, a6 + 16);
  *(void *)(a6 + 96)  = a5;
  return a6;
}

uint64_t sub_10008F918(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, void *a7, char *a8)
{
  v298  = a5;
  v292  = a3;
  v291  = a1;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  __chkstk_darwin(v13 - 8);
  v295  = (char *)v268 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277  = sub_100094134((uint64_t *)&unk_10090AFA0);
  v276  = *(void *)(v277 - 8);
  __chkstk_darwin(v277);
  v278  = (char *)v268 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v289  = type metadata accessor for DispatchWorkItemFlags();
  v297  = *(void *)(v289 - 8);
  __chkstk_darwin(v289);
  v288  = (char *)v268 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287  = type metadata accessor for DispatchQoS();
  v296  = *(void *)(v287 - 8);
  __chkstk_darwin(v287);
  v286  = (char *)v268 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = &a8[OBJC_IVAR____TtC7remindd8RDDaemon_manualSortHintUpdater];
  *(_OWORD *)long long v18 = 0u;
  *((_OWORD *)v18 + 1)  = 0u;
  v283  = v18;
  uint64_t v19 = sub_10008B968(0xD000000000000013, 0x80000001007C7770, a7, &qword_100908290, &qword_100908298);
  v285  = v20;
  uint64_t v21 = type metadata accessor for RDCoreSuggestionsController();
  os_log_type_t v22 = self;
  uint64_t v23 = a8;
  id v24 = [v22 serviceForReminders];
  swift_getObjectType();
  uint64_t v25 = sub_10038E560((uint64_t)v24);
  v270  = OBJC_IVAR____TtC7remindd8RDDaemon_coreSuggestionController;
  *(void *)&v23[OBJC_IVAR____TtC7remindd8RDDaemon_coreSuggestionController]  = v25;
  v305  = v21;
  v306  = &off_1008C3738;
  *(void *)&long long aBlock = v25;
  uint64_t v26 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDaemon());
  uint64_t v27 = sub_100096204((uint64_t)&aBlock, v21);
  __chkstk_darwin(v27);
  os_log_type_t v29 = (void *)((char *)v268 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v30 + 16))(v29);
  uint64_t v31 = *v29;
  swift_retain_n();
  id v32 = a2;
  id v33 = a4;
  id v34 = v298;
  swift_retain();
  swift_retain();
  id v35 = a7;
  uint64_t v36 = sub_1000941D4(v32, v33, v34, a6, (uint64_t)v19, v31, v35, v26);
  v298  = v32;

  v293  = (char *)v33;
  v284  = (char *)v34;

  v282  = a6;
  swift_release();
  v281  = v19;
  swift_release();
  id v37 = v35;

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  swift_release();
  v299  = v23;
  unint64_t v38 = (char **)&v23[OBJC_IVAR____TtC7remindd8RDDaemon_xpcDaemon];
  *unint64_t v38 = v36;
  v38[1]  = (char *)&off_1008C3598;
  v294  = (uint64_t *)v38;
  uint64_t v39 = qword_1009070B8;
  os_log_t v40 = v36;
  if (v39 != -1) {
    swift_once();
  }
  uint64_t v41 = (void *)qword_100942058;
  os_log_type_t v42 = (char *)objc_allocWithZone((Class)type metadata accessor for RDClientConnectionListener());
  uint64_t v43 = sub_1005C7298(v40, v41, v42);
  uint64_t v44 = OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener;
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_xpcClientConnectionListener]  = v43;
  if (qword_100907300 != -1) {
    swift_once();
  }
  v290  = v40;
  uint64_t v45 = static RDSynchronizedKeyValueStore.default;
  v269  = OBJC_IVAR____TtC7remindd8RDDaemon_synchronizedKeyValueStores;
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_synchronizedKeyValueStores]  = static RDSynchronizedKeyValueStore.default;
  uint64_t v46 = qword_1009070E0;
  swift_retain();
  id v47 = v298;
  if (v46 != -1) {
    swift_once();
  }
  v306  = (_UNKNOWN **)sub_100096324;
  v307  = (void *)v45;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1)  = 1107296256;
  v304  = sub_100236C78;
  v305  = (uint64_t)&unk_1008B8048;
  uint64_t v48 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v49 = v286;
  static DispatchQoS.unspecified.getter();
  v312[0]  = _swiftEmptyArrayStorage;
  uint64_t v50 = sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  uint64_t v51 = sub_100094134((uint64_t *)&unk_10090AFD0);
  uint64_t v52 = sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  id v53 = v288;
  v274  = v51;
  v273  = v52;
  uint64_t v54 = v289;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v48);
  uint64_t v55 = v297 + 8;
  uint64_t v56 = *(void (**)(char *, uint64_t))(v297 + 8);
  v56(v53, v54);
  uint64_t v57 = v296 + 8;
  id v58 = *(void (**)(char *, uint64_t))(v296 + 8);
  v58(v49, v287);
  swift_release();
  type metadata accessor for RDDisabledAccountsEventHandler();
  id v59 = (void *)swift_allocObject();
  v59[2]  = 0;
  v59[3]  = 0;
  v59[4]  = &_swiftEmptySetSingleton;
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_disabledAccountsEventHandler]  = v59;
  unsigned int v60 = [v47 supportsAlarmEngine];
  v280  = v37;
  v279  = v44;
  v297  = v55;
  v296  = v57;
  v275  = v50;
  v272  = v56;
  v271  = v58;
  if (v60)
  {
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16)  = xmmword_100776E90;
    *(void *)(v61 + 32)  = 0x402E000000000000;
    v312[0]  = sub_100096484;
    v312[1]  = v61;
    v313  = xmmword_100776EA0;
    v314  = 1;
    type metadata accessor for RDStoreControllerNotificationCenter();
    swift_allocObject();
    id v62 = v298;
    swift_retain();
    long long v63 = sub_100400110(0x676E456D72616C41, 0xEB00000000656E69, v62, (uint64_t)v312);
    v268[1]  = v63;
    os_log_type_t v64 = v294;
    id v65 = (void *)*v294;
    uint64_t v66 = v294[1];
    id v67 = v299;
    swift_retain();
    __int16 v68 = v291;
    uint64_t v69 = (uint64_t)v63;
    uint64_t v70 = v293;
    uint64_t v71 = sub_100094DF8(v291, v65, v66, v62, v69, v293, v284, v285);
    swift_release();
    *(void *)&v67[OBJC_IVAR____TtC7remindd8RDDaemon_alarmEngine]  = v71;
    v310[0]  = 0x404E000000000000;
    memset(&v310[1], 0, 24);
    v311  = 0;
    swift_allocObject();
    id v72 = v62;
    swift_retain();
    long long v73 = sub_100400110(0x676E457961646F54, 0xEB00000000656E69, v72, (uint64_t)v310);
    uint64_t v74 = *v64;
    uint64_t v75 = v64[1];
    uint64_t v76 = *(void *)&v67[v269];
    swift_retain();
    uint64_t v77 = v75;
    id v47 = v298;
    id v78 = sub_1000920C0((uint64_t)v68, v74, v77, (uint64_t)v73, v70, v76);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v79 = (uint64_t)v295;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_10008E2DC(v80, (uint64_t)qword_10091E450);
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.default.getter();
    v83  = os_log_type_enabled(v81, v82);
    uint64_t v79 = (uint64_t)v295;
    if (v83)
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Alarm and today engines are disabled because store controller does not support them", v84, 2u);
      swift_slowDealloc();
    }

    id v78 = 0;
    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_alarmEngine]  = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_todayEngine]  = v78;
  if ([v47 supportsTimelineEngine])
  {
    id v85 = (id)v291[2];
    swift_unknownObjectRetain();
    uint64_t v86 = sub_1000BF9FC(v85, v47);

    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v87  = type metadata accessor for Logger();
    sub_10008E2DC(v87, (uint64_t)qword_10091E450);
    uint64_t v88 = Logger.logObject.getter();
    os_log_type_t v89 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v90 = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "Timeline engine is disabled because store controller does not support it.", v90, 2u);
      swift_slowDealloc();
    }

    uint64_t v86 = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_timelineEngine]  = v86;
  uint64_t v91 = qword_100942000;
  if ([v47 supportsAssignmentNotificationEngine])
  {
    v308[0]  = 0x403E000000000000;
    memset(&v308[1], 0, 24);
    v309  = 256;
    type metadata accessor for RDStoreControllerNotificationCenter();
    swift_allocObject();
    id v92 = v47;
    uint64_t v93 = sub_100400110(0xD000000000000015, 0x80000001007C77B0, v92, (uint64_t)v308);
    v94  = *v294;
    uint64_t v95 = v294[1];
    uint64_t v96 = qword_1009070D8;
    swift_unknownObjectRetain();
    if (v96 != -1) {
      swift_once();
    }
    uint64_t v97 = sub_1000926EC(v94, v95, v92, (uint64_t)v93, v293, (void *)qword_100942078, 0);
    swift_unknownObjectRelease();
    swift_release();
    id v47 = v298;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    uint64_t v98 = type metadata accessor for Logger();
    sub_10008E2DC(v98, (uint64_t)qword_10091E450);
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v99, v100))
    {
      id v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v101 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Assignment notification engine is disabled because store controller does not support it", v101, 2u);
      swift_slowDealloc();
    }

    uint64_t v97 = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_assignmentNotificationEngine]  = v97;
  if ([v47 supportsHashtagLabelUpdater])
  {
    if (qword_1009070D8 != -1) {
      swift_once();
    }
    v102  = (void *)qword_100942078;
    v104  = *v294;
    uint64_t v103 = v294[1];
    uint64_t v105 = qword_100906FB8;
    id v106 = v47;
    id v107 = v102;
    swift_unknownObjectRetain();
    if (v105 != -1) {
      swift_once();
    }
    uint64_t v108 = v277;
    uint64_t v109 = sub_10008E2DC(v277, (uint64_t)qword_100942000);
    uint64_t v110 = (uint64_t)v278;
    (*(void (**)(char *, uint64_t, uint64_t))(v276 + 16))(v278, v109, v108);
    type metadata accessor for RDHashtagLabelUpdater(0);
    swift_allocObject();
    __int16 v111 = sub_100198B3C(v107, v106, v104, v103, v110, 0, 0);

    swift_unknownObjectRelease();
    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_hashtagLabelUpdater]  = v111;
    v306  = (_UNKNOWN **)sub_10009646C;
    v307  = v111;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1)  = 1107296256;
    v304  = sub_100236C78;
    v305  = (uint64_t)&unk_1008B80C0;
    v112  = _Block_copy(&aBlock);
    swift_retain_n();
    v113  = v286;
    static DispatchQoS.unspecified.getter();
    v302  = _swiftEmptyArrayStorage;
    v114  = v288;
    v115  = v289;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v112);
    swift_release();
    v272(v114, v115);
    v271(v113, v287);
    swift_release();
    id v47 = v298;
    uint64_t v91 = qword_100942000;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v116  = type metadata accessor for Logger();
    sub_10008E2DC(v116, (uint64_t)qword_10091E450);
    v117  = Logger.logObject.getter();
    v118  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v119  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v119  = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v118, "RDHashtagLabelUpdater is disabled because store controller does not support it", v119, 2u);
      swift_slowDealloc();
    }

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_hashtagLabelUpdater]  = 0;
  }
  if ([v47 supportsStalePinnedListsEventHandler])
  {
    v120  = qword_1009070D8;
    v121  = v47;
    if (v120 != -1) {
      swift_once();
    }
    v122  = (id)v91[15];
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
    v123  = [self defaultCenter];
    type metadata accessor for RDStalePinnedListsEventHandler();
    swift_allocObject();
    v124  = sub_100372550((uint64_t)v121, (uint64_t)v122, v79, (uint64_t)v123);
    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_stalePinnedListsEventHandler]  = v124;
    swift_retain();
    sub_10037263C();
    swift_release();
    v125  = v290;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v126  = type metadata accessor for Logger();
    sub_10008E2DC(v126, (uint64_t)qword_10091E450);
    v127  = Logger.logObject.getter();
    v128  = static os_log_type_t.default.getter();
    v129  = os_log_type_enabled(v127, v128);
    v125  = v290;
    if (v129)
    {
      v130  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v130  = 0;
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "RDStalePinnedListsEventHandler is disabled because store controller does not support it", v130, 2u);
      swift_slowDealloc();
    }

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_stalePinnedListsEventHandler]  = 0;
  }
  if ([v47 supportsTemplateOperation])
  {
    type metadata accessor for RDPublicCloudDatabaseController();
    swift_allocObject();
    v131  = sub_1005800B4((uint64_t)sub_1005C654C, 0);
    v132  = qword_1009070D8;
    v133  = v47;
    v134  = v125;
    if (v132 != -1) {
      swift_once();
    }
    v135  = v299;
    v136  = (void *)qword_100942078;
    v137  = *(void *)(*(void *)&v299[v279]
                     + OBJC_IVAR____TtC7remindd26RDClientConnectionListener_clientConnectionDidClosePublisher);
    type metadata accessor for RDTemplateOperationQueue();
    v138  = swift_allocObject();
    v139  = v136;
    swift_retain();
    swift_retain();
    *(void *)&v135[OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue]  = sub_10008F788((uint64_t)v133, (uint64_t)v134, (uint64_t)v139, (uint64_t)v131, v137, v138);
    swift_retain();
    sub_100575320();
    swift_release();
    swift_release();
    uint64_t v79 = (uint64_t)v295;
    id v47 = v298;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v140  = type metadata accessor for Logger();
    sub_10008E2DC(v140, (uint64_t)qword_10091E450);
    v141  = Logger.logObject.getter();
    v142  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v141, v142))
    {
      v143  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v143  = 0;
      _os_log_impl((void *)&_mh_execute_header, v141, v142, "RDTemplateOperationQueue is disabled because store controller does not support it", v143, 2u);
      swift_slowDealloc();
    }

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_templateOperationQueue]  = 0;
  }
  if ([v47 supportsTemplateOperation])
  {
    v144  = qword_1009070D8;
    v145  = v47;
    v146  = v292;
    if (v144 != -1) {
      swift_once();
    }
    v147  = (id)qword_100942078;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
    v148  = [self defaultCenter];
    type metadata accessor for RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler();
    swift_allocObject();
    v149  = sub_100378850((uint64_t)v145, (uint64_t)v147, v79, (uint64_t)v148);
    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler]  = v149;
    swift_retain();
    sub_10037893C();
    swift_release();
  }
  else
  {
    v146  = v292;
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v150  = type metadata accessor for Logger();
    sub_10008E2DC(v150, (uint64_t)qword_10091E450);
    v151  = Logger.logObject.getter();
    v152  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v151, v152))
    {
      v153  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v153  = 0;
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler is disabled because store controller does not support it", v153, 2u);
      swift_slowDealloc();
    }

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler]  = 0;
  }
  if ([v47 supportsGroceryOperation])
  {
    v154  = qword_1009070D8;
    v155  = v47;
    v156  = v125;
    if (v154 != -1) {
      swift_once();
    }
    v157  = (void *)qword_100942078;
    v158  = objc_allocWithZone((Class)type metadata accessor for RDGroceryOperationQueue());
    v159  = v157;
    v160  = sub_100095B38(v155, v156, v159, v158);

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_groceryOperationQueue]  = v160;
    v161  = v160;
    sub_1005ECAA8();
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v162  = type metadata accessor for Logger();
    sub_10008E2DC(v162, (uint64_t)qword_10091E450);
    v163  = Logger.logObject.getter();
    v164  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v163, v164))
    {
      v165  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v165  = 0;
      _os_log_impl((void *)&_mh_execute_header, v163, v164, "RDGroceryOperationQueue is disabled because store controller does not support it", v165, 2u);
      swift_slowDealloc();
    }

    *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_groceryOperationQueue]  = 0;
  }
  if ([v47 supportsApplicationShortcuts])
  {
    type metadata accessor for RDApplicationShortcutAssembly();
    v166  = v294[1];
    v167  = swift_unknownObjectRetain();
    sub_1000D07F4(v167, v166, v146, &aBlock);
    swift_unknownObjectRelease();
    sub_100096408((uint64_t)&aBlock, (uint64_t)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_applicationShortcutEngine], &qword_1009081B8);
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v168  = type metadata accessor for Logger();
    sub_10008E2DC(v168, (uint64_t)qword_10091E450);
    v169  = Logger.logObject.getter();
    v170  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v169, v170))
    {
      v171  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v171  = 0;
      _os_log_impl((void *)&_mh_execute_header, v169, v170, "Application shortcut engine is disabled because store controller does not support application shortcuts", v171, 2u);
      swift_slowDealloc();
    }

    v172  = &v299[OBJC_IVAR____TtC7remindd8RDDaemon_applicationShortcutEngine];
    *((void *)v172 + 4)  = 0;
    *(_OWORD *)v172  = 0u;
    *((_OWORD *)v172 + 1)  = 0u;
  }
  if ([v47 supportsSuggestedAttributes])
  {
    v173  = (objc_class *)type metadata accessor for RDDaemonController();
    v174  = (char *)objc_allocWithZone(v173);
    v175  = &v174[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
    *(void *)v175  = v125;
    *((void *)v175 + 1)  = &off_1008C3598;
    v176  = &v174[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
    *(void *)v176  = 0xD00000000000001ELL;
    *((void *)v176 + 1)  = 0x80000001007C7790;
    *(void *)(v176 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
    *((void *)v176 + 3)  = 0;
    *((void *)v176 + 4)  = 0;
    *((void *)v176 + 2)  = 0;
    *(void *)&v174[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
    v300.receiver  = v174;
    v300.super_class  = v173;
    v177  = v125;
    v178  = [super init];
    v179  = [objc_allocWithZone((Class)REMStore) initWithDaemonController:v178];
    v180  = (void *)qword_100942080;
    v181  = self;
    v182  = v180;
    swift_retain();
    v183  = [v181 daemonUserDefaults];
    v184  = [self sharedConfiguration];

    v305  = sub_1000963CC(0, &qword_1009081B0);
    v306  = &off_1008CE6F0;
    *(void *)&long long aBlock = v184;
    type metadata accessor for RDSuggestedAttributesAutoTrainer();
    v185  = (void *)swift_allocObject();
    v186  = (char *)v185 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_storeControllerObserverToken;
    v187  = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56))(v186, 1, 1, v187);
    *(void *)((char *)v185 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_xpcActivity)  = 0;
    v185[2]  = v182;
    v185[3]  = v146;
    v185[4]  = v179;
    v185[5]  = v183;
    v185[6]  = &off_1008CE6B8;
    sub_1000967D4(&aBlock, (uint64_t)(v185 + 7));
    *((unsigned char *)v185 + OBJC_IVAR____TtC7remindd32RDSuggestedAttributesAutoTrainer_started)  = 0;
    v188  = (uint64_t)v283;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v189  = type metadata accessor for Logger();
    sub_10008E2DC(v189, (uint64_t)qword_10091E450);
    v190  = Logger.logObject.getter();
    v191  = static os_log_type_t.default.getter();
    v192  = os_log_type_enabled(v190, v191);
    v188  = (uint64_t)v283;
    if (v192)
    {
      v193  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v193  = 0;
      _os_log_impl((void *)&_mh_execute_header, v190, v191, "Suggested attributes disabled because not supported by store controller", v193, 2u);
      swift_slowDealloc();
    }

    v185  = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_suggestedAttributesAutoTrainer]  = v185;
  if ([v298 supportsWidgetRefresh])
  {
    if (qword_1009070D8 != -1) {
      swift_once();
    }
    v194  = (void *)qword_100942078;
    type metadata accessor for RDWidgetRefreshEngine();
    swift_allocObject();
    swift_retain();
    v195  = sub_100375760(v194, v146);
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v196  = type metadata accessor for Logger();
    sub_10008E2DC(v196, (uint64_t)qword_10091E450);
    v197  = Logger.logObject.getter();
    v198  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v197, v198))
    {
      v199  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v199  = 0;
      _os_log_impl((void *)&_mh_execute_header, v197, v198, "Widget refresh disabled because not supported by store controller", v199, 2u);
      swift_slowDealloc();
    }

    v195  = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_widgetRefresh]  = v195;
  v200  = (void *)qword_100942080;
  v201  = v298;
  swift_retain();
  v202  = v200;
  v203  = (uint64_t)v295;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  v204  = self;
  v205  = [v204 defaultCenter];
  v206  = type metadata accessor for RDManualSortHintUpdater();
  swift_allocObject();
  v207  = sub_1004DAA3C(v201, v146, v202, v203, v205);
  v305  = v206;
  *(void *)&long long aBlock = v207;
  swift_beginAccess();
  sub_10009632C((uint64_t)&aBlock, v188);
  swift_endAccess();
  v208  = &selRef_ckServerChangeTokens;
  v209  = [v201 cloudContext];
  v210  = qword_100942000;
  if (!v209) {
    goto LABEL_107;
  }
  v211  = v209;
  if (![v201 supportsCloudSchemaCatchUpSyncBackgroundScheduling])
  {

LABEL_107:
    v226  = &v299[OBJC_IVAR____TtC7remindd8RDDaemon_cloudSchemaCatchUpSyncController];
    *((void *)v226 + 4)  = 0;
    *(_OWORD *)v226  = 0u;
    *((_OWORD *)v226 + 1)  = 0u;
    goto LABEL_108;
  }
  v212  = [v211 processingQueue];
  type metadata accessor for RDICCloudSchemaCatchUpSyncXPCActivityFactory();
  v213  = swift_allocObject();
  *(void *)(v213 + 16)  = v201;
  v214  = v201;
  v215  = [v211 icUserDefaults];
  v216  = [v215 cloudSchemaCatchUpSyncSchedulingStateStorage];

  v217  = qword_100907678;
  v218  = v211;
  if (v217 != -1) {
    swift_once();
  }
  v219  = qword_10091A4A8;
  v220  = sub_100094134(&qword_1009081A8);
  v221  = (void *)swift_allocObject();
  v221[3]  = 0;
  v221[7]  = 0;
  swift_unknownObjectWeakInit();
  v221[2]  = v212;
  v221[4]  = v213;
  v221[5]  = v216;
  v221[7]  = &off_1008CAF58;
  swift_unknownObjectWeakAssign();

  v221[8]  = v219;
  [v218 setCloudSchemaCatchUpSyncController:v221];
  v222  = v221[2];
  v223  = swift_allocObject();
  *(void *)(v223 + 16)  = sub_100096394;
  *(void *)(v223 + 24)  = v221;
  v306  = (_UNKNOWN **)sub_100097240;
  v307  = (void *)v223;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1)  = 1107296256;
  v304  = sub_1003B3260;
  v305  = (uint64_t)&unk_1008B8098;
  v224  = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v222, v224);
  _Block_release(v224);
  LOBYTE(v222)  = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v222)
  {
    __break(1u);
    return result;
  }
  v305  = v220;
  v306  = &off_1008C7838;

  *(void *)&long long aBlock = v221;
  sub_100096408((uint64_t)&aBlock, (uint64_t)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_cloudSchemaCatchUpSyncController], &qword_1009081A0);
  v210  = qword_100942000;
  v208  = &selRef_ckServerChangeTokens;
LABEL_108:
  v227  = self;
  v228  = [v227 sharedConfiguration];
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  v229  = (void *)v210[15];
  type metadata accessor for RDICCloudConfigurationUpdaterXPCActivityFactory();
  v230  = swift_allocObject();
  sub_1000963CC(0, (unint64_t *)&qword_100908178);
  ObjCClassFromMetadata  = (void *)swift_getObjCClassFromMetadata();
  v232  = v229;
  v233  = v228;
  v234  = [ObjCClassFromMetadata daemonUserDefaults];
  v235  = sub_100094134(&qword_100908198);
  v236  = (void *)swift_allocObject();
  v298  = v233;
  v236[2]  = v233;
  v236[3]  = v232;
  v236[4]  = v234;
  v236[5]  = &off_1008CAB50;
  v236[6]  = 0;
  v236[7]  = v230;
  v305  = v235;
  v306  = &off_1008CAC70;
  *(void *)&long long aBlock = v236;
  sub_100096408((uint64_t)&aBlock, (uint64_t)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_cloudConfigurationUpdater], &qword_1009081A0);
  v237  = [v201 v208[22]];
  if (v237)
  {
    v238  = v237;
    v239  = (void *)qword_100942080;
    v240  = v201;
    v241  = v239;
    v242  = v238;
    v243  = [v204 defaultCenter];
    v244  = [v227 sharedConfiguration];
    v245  = [ObjCClassFromMetadata daemonUserDefaults];
    type metadata accessor for RDICCloudExtraneousAlarmsCollector();
    v246  = (uint64_t *)swift_allocObject();
    v247  = sub_100095C94((uint64_t)v240, (uint64_t)v241, (uint64_t)v238, (uint64_t)&off_1008CAF68, (uint64_t)v243, (uint64_t)v244, (uint64_t)v245, 0, 0, v246);
  }
  else
  {
    v247  = 0;
  }
  v248  = v280;
  v249  = v290;
  v250  = v299;
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_extraneousAlarmsCollector]  = v247;
  sub_1001C8AC4((void *)qword_100942080, (void *)qword_100942078, v201, (uint64_t *)&aBlock);
  sub_100096408((uint64_t)&aBlock, (uint64_t)&v250[OBJC_IVAR____TtC7remindd8RDDaemon_housekeepingActivityScheduler], &qword_1009081A0);
  if ([v201 supportsSyncActivityNotificationEngine])
  {
    v251  = (void *)qword_100942078;
    v252  = [ObjCClassFromMetadata daemonUserDefaults];
    LOBYTE(aBlock)  = 1;
    *((void *)&aBlock + 1)  = 5;
    LOBYTE(v304)  = 1;
    v305  = 30;
    LOBYTE(v306)  = 0;
    v253  = sub_100092AEC(v251, v201, v293, v252, (uint64_t)&aBlock);
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v254  = type metadata accessor for Logger();
    sub_10008E2DC(v254, (uint64_t)qword_10091E450);
    v255  = Logger.logObject.getter();
    v256  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v255, v256))
    {
      v257  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v257  = 0;
      _os_log_impl((void *)&_mh_execute_header, v255, v256, "RDSyncActivityNotificationEngine is disabled because sharedListNotifications feature flag is off", v257, 2u);
      swift_slowDealloc();
    }

    v253  = 0;
  }
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_syncActivityNotificationEngine]  = v253;
  if ([v201 supportsSharedInlineTagAutoConvertEngine])
  {
    v258  = sub_1002E50A4(v201, (void *)qword_100942078);
    v259  = v298;
  }
  else
  {
    if (qword_1009079E8 != -1) {
      swift_once();
    }
    v260  = type metadata accessor for Logger();
    sub_10008E2DC(v260, (uint64_t)qword_10091E450);
    v261  = Logger.logObject.getter();
    v262  = static os_log_type_t.default.getter();
    v263  = os_log_type_enabled(v261, v262);
    v259  = v298;
    if (v263)
    {
      v264  = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v264  = 0;
      _os_log_impl((void *)&_mh_execute_header, v261, v262, "RDSharedInlineTagAutoConvertEngineAssembly is disabled because supportsSharedInlineTagAutoConvertEngine feature flag is off", v264, 2u);
      swift_slowDealloc();
    }

    v258  = 0;
  }
  v265  = v299;
  *(void *)&v299[OBJC_IVAR____TtC7remindd8RDDaemon_sharedInlineTagAutoConvertEngine]  = v258;

  v266  = (objc_class *)type metadata accessor for RDDaemon();
  v301.receiver  = v265;
  v301.super_class  = v266;
  v267 = [super init];
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  swift_release();
  return (uint64_t)v267;
}

void *sub_1000920C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v44 = a2;
  id v45 = a5;
  uint64_t v47 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v50 = v11;
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = qword_100907118;
  uint64_t v14 = a6;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E2DC(v15, (uint64_t)qword_10090F8F8);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    long long v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting RDTodayNotificationAssembly", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v19 = *(void **)(a1 + 16);
  type metadata accessor for RDXPCActivityTimeEventStream();
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t v21 = (char *)v20 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  uint64_t v22 = type metadata accessor for RDXPCEventStream.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = (void *)((char *)v20 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  *uint64_t v23 = 0;
  v23[1]  = 0;
  v20[2]  = v19;
  v20[3]  = 0xD000000000000024;
  v20[4]  = 0x80000001007C77D0;
  void v20[5] = a1;
  type metadata accessor for RDNotifydEventStream();
  swift_allocObject();
  id v24 = v19;
  swift_retain();
  uint64_t v25 = sub_1002237E0(v24, 0);
  uint64_t v26 = *(void **)(a4 + 16);
  uint64_t v55 = &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
  uint64_t v56 = (void (*)())&off_1008C8218;
  type metadata accessor for RDDynamicSignificantTimeNotificationEngine();
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = sub_100096204((uint64_t)aBlock, (uint64_t)&type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter);
  __chkstk_darwin(v28);
  (*(void (**)(void))(v29 + 16))();
  *(void *)(v27 + 56)  = &type metadata for RDDynamicSignificantTimeNotificationEngine.XPCEventSetter;
  *(void *)(v27 + 64)  = &off_1008C8218;
  *(unsigned char *)(v27 + 72)  = 2;
  *(void *)(v27 + 16)  = v24;
  *(void *)(v27 + 24)  = v26;
  id v30 = v24;
  id v31 = v26;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)aBlock);
  type metadata accessor for RDTodayNotificationEngine();
  id v32 = (void *)swift_allocObject();
  swift_retain();
  id v33 = v30;
  v43[0]  = v33;
  swift_retain();
  uint64_t v34 = v25;
  v43[1]  = v25;
  swift_retain();
  swift_retain();
  id v35 = (char *)v45;
  uint64_t v36 = v44;
  swift_unknownObjectRetain();
  swift_retain();
  id v37 = sub_100093C3C((uint64_t)v33, (uint64_t)v20, v34, a4, (uint64_t)v35, v14, v36, v47, v27, v32);
  *(void *)&v35[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_todayNotificationDelegate + 8]  = &off_1008CED20;
  swift_unknownObjectWeakAssign();
  uint64_t v56 = sub_100096490;
  uint64_t v57 = v37;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  uint64_t v55 = (ValueMetadata *)&unk_1008B8110;
  unint64_t v38 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v39 = v46;
  static DispatchQoS.unspecified.getter();
  id v53 = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  os_log_t v40 = v48;
  uint64_t v41 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
  swift_release();
  swift_release();
  return v37;
}

uint64_t sub_1000926EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, int a7)
{
  int v30 = a7;
  id v29 = a3;
  uint64_t v31 = a2;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v14 - 8);
  uint64_t v33 = v14;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906F30 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090C698);
  long long v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting RDAssignmentNotificationEngineAssembly", v20, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for RDAssignmentNotificationEngine();
  uint64_t v21 = swift_allocObject();
  id v22 = a6;
  swift_retain();
  uint64_t v23 = a5;
  swift_unknownObjectRetain();
  id v24 = v29;
  uint64_t v25 = sub_100093548(v22, a4, v23, a1, v31, v24, v30 & 1, v21);
  *(void *)&v23[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_assignmentNotificationDelegate + 8]  = &off_1008B8E78;
  swift_unknownObjectWeakAssign();
  aBlock[4]  = sub_10009664C;
  aBlock[5]  = v25;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8250;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v35 = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v33);
  swift_release();
  return v25;
}

uint64_t sub_100092AEC(void *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v33 = a3;
  id v34 = a4;
  id v31 = a1;
  id v32 = a2;
  uint64_t v5 = *(void *)(a5 + 8);
  uint64_t v6 = *(void *)(a5 + 24);
  char v7 = *(unsigned char *)(a5 + 32);
  char v8 = *(unsigned char *)a5 & 1;
  char v9 = *(unsigned char *)(a5 + 16) & 1;
  int v30 = v7 & 1;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v15 = &v29[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((v7 & 1) == 0)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100908178);
    id v16 = [(id)swift_getObjCClassFromMetadata() daemonUserDefaults];
    unsigned __int8 v17 = [v16 sharedListActivityNotifications_demoMode];

    if (v17)
    {
      if (qword_100907530 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E2DC(v18, (uint64_t)qword_100917F78);
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "📔 RDSyncActivityEngine: Starting in demo mode", v21, 2u);
        swift_slowDealloc();
      }

      char v8 = 1;
      uint64_t v6 = 10;
      uint64_t v5 = 5;
      char v9 = 1;
    }
  }
  v39[0]  = v8;
  uint64_t v40 = v5;
  char v41 = v9;
  uint64_t v42 = v6;
  char v43 = v30;
  type metadata accessor for RDSharedListActivityNotificationsEngine(0);
  uint64_t v22 = swift_allocObject();
  id v23 = v31;
  id v24 = v32;
  id v25 = v33;
  uint64_t v26 = sub_100092F4C((uint64_t)v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v34, (uint64_t)v39, v22);
  aBlock[4]  = sub_1000967EC;
  aBlock[5]  = v26;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8340;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v37 = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);
  (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v12, v10);
  (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v35);
  swift_release();
  return v26;
}

uint64_t sub_100092F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v42 = a1;
  uint64_t v41 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v41);
  uint64_t v40 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_100908240);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  __chkstk_darwin(v8);
  id v37 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100094134(&qword_100908248);
  uint64_t v10 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134(&qword_100908250);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100094134(&qword_100908258);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  os_log_type_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_fetchedJournalEntries;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_100094134(&qword_100908260);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v21, v20, v17);
  uint64_t v22 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_processedJournalEntries;
  uint64_t v47 = &_swiftEmptyDictionarySingleton;
  sub_100094134(&qword_100908268);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v22, v16, v13);
  uint64_t v23 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine___debug_staleObjectIDs;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_100094134(&qword_100908270);
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v23, v12, v36);
  *(void *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_cancellables)  = &_swiftEmptySetSingleton;
  uint64_t v24 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine__started;
  LOBYTE(v47)  = 0;
  id v25 = v37;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v24, v25, v39);
  uint64_t v39 = OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_journalUpdatesSubscriptionTransactionRegistrar;
  type metadata accessor for RDTransactionRegistrar();
  uint64_t v26 = (void *)swift_allocObject();
  void v26[4] = 0;
  void v26[5] = 0;
  v26[2]  = 0xD000000000000041;
  v26[3]  = 0x80000001007C7AC0;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000967F4((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  v26[6]  = UnfairLock.init(options:)();
  *(void *)(a6 + v39)  = v26;
  uint64_t v27 = OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_accountSignInOrOutSubscriptionTransactionRegistrar;
  uint64_t v28 = (void *)swift_allocObject();
  void v28[4] = 0;
  void v28[5] = 0;
  v28[2]  = 0xD000000000000045;
  v28[3]  = 0x80000001007C7B10;
  uint64_t v47 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  swift_allocObject();
  v28[6]  = UnfairLock.init(options:)();
  *(void *)(a6 + v27)  = v28;
  *(void *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_scheduler)  = v42;
  uint64_t v29 = v44;
  *(void *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_storeController)  = v43;
  int v30 = (void *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userNotificationCenter);
  void *v30 = v29;
  v30[1]  = &off_1008C8BA8;
  id v31 = (void *)(a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_userDefaults);
  *id v31 = v45;
  v31[1]  = &off_1008C0988;
  uint64_t v32 = a6 + OBJC_IVAR____TtC7remindd39RDSharedListActivityNotificationsEngine_appliedEngineConfiguration;
  id v33 = (_OWORD *)v46;
  *(unsigned char *)(v32 + 32)  = *(unsigned char *)(v46 + 32);
  long long v34 = v33[1];
  *(_OWORD *)uint64_t v32 = *v33;
  *(_OWORD *)(v32 + 16)  = v34;
  return a6;
}

uint64_t sub_100093548(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, int a7, uint64_t a8)
{
  LODWORD(v45)  = a7;
  uint64_t v44 = a6;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v14 - 8);
  uint64_t v52 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v50 = v16;
  uint64_t v51 = v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v53 = v20;
  uint64_t v54 = v21;
  __chkstk_darwin(v20);
  uint64_t v43 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v55 = v23;
  uint64_t v56 = v24;
  __chkstk_darwin(v23);
  uint64_t v48 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a8 + 16)  = 0xD000000000000017;
  *(void *)(a8 + 24)  = 0x80000001007C78C0;
  *(void *)(a8 + 32)  = 0xD00000000000001FLL;
  *(void *)(a8 + 40)  = 0x80000001007C78E0;
  *(void *)(a8 + 4_Block_object_dispose(&STACK[0x260], 8) = 0xD00000000000003CLL;
  *(void *)(a8 + 56)  = 0x80000001007C7900;
  *(void *)(a8 + 64)  = [objc_allocWithZone((Class)type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget()) init];
  uint64_t v26 = a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
  uint64_t v27 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  *(unsigned char *)(a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started)  = 0;
  *(void *)(a8
            + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID)  = 0;
  *(void *)(a8 + 72)  = a1;
  *(void *)(a8 + 80)  = a3;
  uint64_t v49 = a2;
  *(void *)(a8 + 8_Block_object_dispose(&STACK[0x260], 8) = &off_1008C8BA8;
  *(void *)(a8 + 96)  = a2;
  uint64_t v28 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v29 = (char *)objc_allocWithZone(v28);
  int v30 = &v29[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  uint64_t v47 = a4;
  *(void *)int v30 = a4;
  *((void *)v30 + 1)  = a5;
  id v31 = &v29[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)id v31 = 0xD00000000000001CLL;
  *((void *)v31 + 1)  = 0x80000001007C7940;
  *(void *)(v31 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v31 + 3)  = 0;
  *((void *)v31 + 4)  = 0;
  *((void *)v31 + 2)  = 0;
  *(void *)&v29[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v58.receiver  = v29;
  v58.super_class  = v28;
  id v32 = a1;
  swift_retain();
  id v46 = a3;
  swift_unknownObjectRetain();
  id v33 = [super init];
  long long v34 = v44;
  *(void *)(a8 + 104)  = v33;
  *(void *)(a8 + 112)  = v34;
  *(unsigned char *)(a8 + 120)  = (_BYTE)v45;
  *(void *)(a8 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_cloudKitAccountsDidChangeSubscriptions)  = _swiftEmptyArrayStorage;
  id v45 = v34;
  uint64_t v57 = sub_100407054((void *)0xD00000000000001CLL, 0x80000001007C7940, 0);
  sub_100094134((uint64_t *)&unk_1009081E0);
  sub_100094134((uint64_t *)&unk_10090AB80);
  sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
  Publisher.map<A>(_:)();
  sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
  uint64_t v35 = v43;
  uint64_t v36 = v50;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v19, v36);
  swift_release();
  uint64_t v57 = (uint64_t)v32;
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v38 = (uint64_t)v52;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v52, 1, 1, v37);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
  sub_100096654();
  uint64_t v39 = v48;
  uint64_t v40 = v53;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC(v38, (uint64_t *)&unk_1009081C0);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v40);
  type metadata accessor for RDAssignmentNotificationEngine();
  sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
  uint64_t v41 = v55;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v39, v41);
  swift_beginAccess();
  sub_100094134(&qword_100908218);
  sub_1000967F4((unint64_t *)&unk_100908220, &qword_100908218);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();

  return a8;
}

void *sub_100093C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  v29[3]  = type metadata accessor for RDSynchronizedKeyValueStore();
  v29[4]  = &protocol witness table for RDSynchronizedKeyValueStore;
  v29[0]  = a6;
  uint64_t v18 = (char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_storeControllerObservationToken;
  uint64_t v19 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *((unsigned char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_started)  = 0;
  *(void *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_todayNotificationTimeObserver)  = 0;
  *(void *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_badgeCountCriteriaObserver)  = 0;
  *(void *)((char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_lastDismissedDateDidChangeExternally)  = 0;
  uint64_t v20 = (char *)a10 + OBJC_IVAR____TtC7remindd25RDTodayNotificationEngine_cachedLastDismissedDate;
  uint64_t v21 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  a10[2]  = a1;
  a10[3]  = a2;
  a10[4]  = &off_1008BAFD8;
  a10[5]  = a3;
  a10[6]  = &off_1008BED88;
  a10[7]  = a5;
  a10[8]  = &off_1008C8BA8;
  a10[9]  = a4;
  sub_100096838((uint64_t)v29, (uint64_t)(a10 + 10));
  uint64_t v22 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v23 = (char *)objc_allocWithZone(v22);
  uint64_t v24 = &v23[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v24 = a7;
  *((void *)v24 + 1)  = a8;
  uint64_t v25 = &v23[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)uint64_t v25 = 0xD000000000000017;
  *((void *)v25 + 1)  = 0x80000001007C7800;
  *(void *)(v25 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v25 + 3)  = 0;
  *((void *)v25 + 4)  = 0;
  *((void *)v25 + 2)  = 0;
  *(void *)&v23[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v28.receiver  = v23;
  v28.super_class  = v22;
  id v26 = [super init];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v29);
  a10[15]  = v26;
  a10[16]  = a9;
  return a10;
}

void *sub_100093E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[7]  = 0xD000000000000014;
  a6[8]  = 0x80000001007C78A0;
  a6[10]  = 0;
  a6[11]  = 0;
  a6[9]  = 0;
  *(void *)((char *)a6 + 94)  = 0;
  a6[4]  = a1;
  uint64_t v11 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  uint64_t v13 = &v12[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v13 = a2;
  *((void *)v13 + 1)  = a3;
  uint64_t v14 = &v12[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)uint64_t v14 = 0xD000000000000014;
  *((void *)v14 + 1)  = 0x80000001007C78A0;
  *(void *)(v14 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v14 + 3)  = 0;
  *((void *)v14 + 4)  = 0;
  *((void *)v14 + 2)  = 0;
  *(void *)&v12[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v17.receiver  = v12;
  v17.super_class  = v11;
  id v15 = [super init];
  a6[2]  = a4;
  a6[3]  = &off_1008C8BA8;
  a6[5]  = a5;
  a6[6]  = v15;
  return a6;
}

void sub_100093F44(char a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)&unk_100906D70);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "remindd is now exiting in response to first unlock", v7, 2u);
        swift_slowDealloc();
      }

      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Notifying stores must refresh due to relaunching upon first unlock notification", v10, 2u);
        swift_slowDealloc();
      }

      uint64_t v11 = notify_post(_REMStoreMustRefreshNotificationName);
      a2(v11);
    }
  }
  else
  {
    oslog  = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "first unlock handler should not be called before first unlock happens", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100094134(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1  = result;
  }
  return result;
}

uint64_t sub_100094178(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *sub_1000941D4(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char *a8)
{
  v28[3]  = type metadata accessor for RDCoreSuggestionsController();
  void v28[4] = &off_1008C3738;
  v28[0]  = a6;
  swift_unknownObjectWeakInit();
  *(void *)&a8[OBJC_IVAR____TtC7remindd11RDXPCDaemon_storeController]  = a1;
  uint64_t v16 = (char *)objc_allocWithZone((Class)type metadata accessor for RDXPCDebugPerformer());
  id v17 = a1;
  uint64_t v18 = a8;
  *(void *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer]  = sub_10038BE44(v17, 0, a2, a3, v16);
  type metadata accessor for RDXPCSyncInterfacePerformerFactory();
  swift_allocObject();
  id v19 = v17;
  swift_retain();
  uint64_t v20 = sub_100148DDC(v19, a4, a7);

  *(void *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_syncInterfacePerformerFactory]  = v20;
  uint64_t v21 = (objc_class *)type metadata accessor for RDXPCIndexingPerformer();
  uint64_t v22 = (char *)objc_allocWithZone(v21);
  *(void *)&v22[OBJC_IVAR____TtC7remindd22RDXPCIndexingPerformer_storeController]  = v19;
  v27.receiver  = v22;
  v27.super_class  = v21;
  id v23 = v19;
  *(void *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_indexingPerformer]  = [v27 init];
  *(void *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_dataAccessRequestsWriter]  = a4;
  *(void *)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_contactInteractionWriter]  = a5;
  sub_100096838((uint64_t)v28, (uint64_t)&v18[OBJC_IVAR____TtC7remindd11RDXPCDaemon_coreSuggestionsHandler]);
  swift_retain();
  swift_retain();

  v26.receiver  = v18;
  v26.super_class  = (Class)type metadata accessor for RDXPCDaemon();
  uint64_t v24 = (char *)[super init];
  *(void *)(*(void *)&v24[OBJC_IVAR____TtC7remindd11RDXPCDaemon_debugPerformer]
            + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_xpcDaemon
            + _Block_object_dispose(&STACK[0x260], 8) = &off_1008C3598;
  swift_unknownObjectWeakAssign();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v28);
  return v24;
}

id sub_1000943E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v17[3]  = type metadata accessor for RDAlarmProducerDataSource();
  void v17[4] = &off_1008C3D88;
  a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_started]  = 0;
  v17[0]  = a3;
  *(void *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_queue]  = a1;
  os_log_type_t v12 = &a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_timeEventStream];
  void *v12 = a2;
  v12[1]  = &off_1008BAFD8;
  sub_100096838((uint64_t)v17, (uint64_t)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_dataSource]);
  *(void *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_beforeFirstUnlockNotificationEngine]  = a4;
  *(void *)&a6[OBJC_IVAR____TtC7remindd19RDTimeAlarmProducer_delegate + 8]  = &off_1008CF5C0;
  swift_unknownObjectUnownedInit();
  v16.receiver  = a6;
  v16.super_class  = ObjectType;
  id v13 = a1;
  swift_retain();
  swift_retain();
  id v14 = [super init];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
  return v14;
}

id sub_100094518(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v17[3]  = type metadata accessor for RDAlarmProducerDataSource();
  void v17[4] = &off_1008C3D28;
  a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_started]  = 0;
  v17[0]  = a3;
  *(void *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_queue]  = a1;
  os_log_type_t v12 = &a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_timeEventStream];
  void *v12 = a2;
  v12[1]  = &off_1008BAFD8;
  sub_100096838((uint64_t)v17, (uint64_t)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_dataSource]);
  *(void *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_beforeFirstUnlockNotificationEngine]  = a4;
  *(void *)&a6[OBJC_IVAR____TtC7remindd27RDDueDateDeltaAlarmProducer_delegate + 8]  = &off_1008CF5C0;
  swift_unknownObjectUnownedInit();
  v16.receiver  = a6;
  v16.super_class  = ObjectType;
  id v13 = a1;
  swift_retain();
  swift_retain();
  id v14 = [super init];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v17);
  return v14;
}

char *sub_100094650(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for RDAlarmProducerDataSource();
  v21[3]  = v6;
  void v21[4] = &off_1008C3D78;
  v21[0]  = a3;
  uint64_t v7 = (objc_class *)type metadata accessor for RDLocationAlarmProducer();
  uint64_t v8 = (char *)objc_allocWithZone(v7);
  uint64_t v9 = sub_100096204((uint64_t)v21, v6);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  uint64_t v13 = *v11;
  v20[4]  = &off_1008C3D78;
  v20[3]  = v6;
  v20[0]  = v13;
  *(void *)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_delegate + 8]  = &off_1008CF5C0;
  swift_unknownObjectUnownedInit();
  *(void *)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_queue]  = a1;
  id v14 = &v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager];
  *(void *)id v14 = a2;
  *((void *)v14 + 1)  = &off_1008C83D8;
  sub_100096838((uint64_t)v20, (uint64_t)&v8[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_dataSource]);
  v19.receiver  = v8;
  v19.super_class  = v7;
  id v15 = a1;
  id v16 = a2;
  id v17 = (char *)[super init];
  *(void *)(*(void *)&v17[OBJC_IVAR____TtC7remindd23RDLocationAlarmProducer_locationManager]
            + OBJC_IVAR____TtC7remindd17RDLocationManager_delegate
            + _Block_object_dispose(&STACK[0x260], 8) = &off_1008CAE68;
  swift_unknownObjectWeakAssign();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v20);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
  return v17;
}

id sub_10009483C(void *a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = type metadata accessor for RDAlarmProducerDataSource();
  void v13[4] = &off_1008C3D68;
  *(_DWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_connectedToken]  = -1;
  v13[3]  = v8;
  v13[0]  = a2;
  *(_DWORD *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_disconnectedToken]  = -1;
  a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_started]  = 0;
  *(void *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_queue]  = a1;
  sub_100096838((uint64_t)v13, (uint64_t)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_dataSource]);
  *(void *)&a4[OBJC_IVAR____TtC7remindd22RDVehicleAlarmProducer_delegate + 8]  = &off_1008CF5C0;
  swift_unknownObjectUnownedInit();
  v12.receiver  = a4;
  v12.super_class  = ObjectType;
  id v9 = a1;
  id v10 = [super init];
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v13);
  return v10;
}

id sub_100094954(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v24[3]  = type metadata accessor for RDUserInteractionSessionManager();
  v24[4]  = &off_1008BEE98;
  v24[0]  = a3;
  v23[3]  = type metadata accessor for RDAlarmProducerDataSource();
  v23[4]  = &off_1008C3D48;
  v23[0]  = a4;
  *(void *)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_queue]  = a1;
  sub_100096838((uint64_t)v23, (uint64_t)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_dataSource]);
  *(void *)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_delegate + 8]  = &off_1008CF5C0;
  swift_unknownObjectUnownedInit();
  sub_100096838((uint64_t)v24, (uint64_t)&a6[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_userInteractionSessionManager]);
  out_token  = 0;
  uint64_t v11 = (const char *)_REMStoreShouldNotifyOfInteractionWithPeopleNotificationName;
  objc_super v12 = a6;
  id v13 = a1;
  if (notify_register_check(v11, &out_token))
  {
    if (qword_100907168 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009108E0);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v17 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to register notify token for _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {status: %u}", v17, 8u);
      swift_slowDealloc();
    }

    int v18 = -1;
  }
  else
  {
    int v18 = out_token;
  }
  *(_DWORD *)&v12[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeopleNotifyToken]  = v18;
  v12[OBJC_IVAR____TtC7remindd33RDContactInteractionAlarmProducer_shouldNotifyOfInteractionWithPeople]  = 0;

  v21.receiver  = v12;
  v21.super_class  = ObjectType;
  id v19 = [super init];
  sub_10008BB54((uint64_t)v19, v13, (uint64_t)sub_100225928, 0);

  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v23);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
  return v19;
}

id sub_100094C04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = type metadata accessor for RDUserInteractionSessionManager();
  objc_super v26 = &off_1008BEE98;
  v24[0]  = a3;
  uint64_t v22 = type metadata accessor for RDAlarmProducerDataSource();
  id v23 = &off_1008C3D48;
  v21[0]  = a4;
  id v10 = (char *)objc_allocWithZone((Class)type metadata accessor for RDContactInteractionAlarmProducer());
  uint64_t v11 = sub_100096204((uint64_t)v24, v25);
  __chkstk_darwin(v11);
  id v13 = (void *)((char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  uint64_t v15 = sub_100096204((uint64_t)v21, v22);
  __chkstk_darwin(v15);
  id v17 = (void *)((char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  id v19 = sub_100094954(a1, a2, *v13, *v17, a5, v10);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v21);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
  return v19;
}

void *sub_100094DF8(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, char *a6, char *a7, void **a8)
{
  v119  = a6;
  id v13 = (char *)*a8;
  __int16 v111 = a8;
  uint64_t v109 = a7;
  uint64_t v110 = v13;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  v117  = *(void *)(v14 - 8);
  v118  = v14;
  __chkstk_darwin(v14);
  v115  = (char *)v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116  = type metadata accessor for DispatchQoS();
  v114  = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  v113  = (char *)v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100907B68 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_100921578);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "os_transaction INIT {name: com.apple.remindd.RDAlarmEngineAssembly}", v20, 2u);
    swift_slowDealloc();
  }

  v112  = os_transaction_create();
  objc_super v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Starting alarm engine assembly", v23, 2u);
    swift_slowDealloc();
  }

  uint64_t v24 = (void *)a1[2];
  unsigned int v25 = [a4 supportsAlarmEngine];
  v104  = a1;
  if (v25)
  {
    type metadata accessor for RDBeforeFirstUnlockNotificationEngine();
    objc_super v26 = (void *)swift_allocObject();
    id v27 = v119;
    v26[2]  = v24;
    v26[3]  = v27;
    void v26[4] = &off_1008C8BA8;
    id v28 = v24;
    id v29 = v27;
  }
  else
  {
    objc_super v26 = 0;
  }
  v120  = v26;
  type metadata accessor for RDAlarmEngine();
  swift_allocObject();
  swift_retain();
  swift_retain();
  id v30 = v24;
  swift_unknownObjectRetain();
  uint64_t v106 = a3;
  id v31 = sub_10067EB38(v30, (uint64_t)a2, a3, a5, (uint64_t)v26);
  *(void *)&v119[OBJC_IVAR____TtC7remindd24RDUserNotificationCenter_reminderAlarmDelegate + 8]  = &off_1008CF5B0;
  swift_unknownObjectWeakAssign();
  id v32 = (void *)type metadata accessor for RDAlarmProducerDataSource();
  swift_allocObject();
  id v33 = v30;
  swift_unknownObjectRetain();
  uint64_t v34 = sub_1003BED54((uint64_t)v33, (uint64_t)a2, a3, (uint64_t)a4);
  type metadata accessor for RDXPCActivityTimeEventStream();
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = (char *)v35 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken;
  uint64_t v37 = type metadata accessor for RDXPCEventStream.Token(0);
  id v107 = a2;
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)(v37 - 8);
  v100[0]  = *(void *)(v39 + 56);
  v100[1]  = v39 + 56;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v100[0])(v36, 1, 1, v37);
  uint64_t v40 = (void *)((char *)v35 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  *uint64_t v40 = 0;
  v40[1]  = 0;
  void v35[2] = v33;
  v35[3]  = 0xD00000000000001CLL;
  id v41 = v104;
  void v35[4] = 0x80000001007C7850;
  v35[5]  = v41;
  v124  = v32;
  v125  = (void (*)())&off_1008C3D88;
  *(void *)&long long aBlock = v34;
  uint64_t v42 = v34;
  uint64_t v105 = objc_allocWithZone((Class)type metadata accessor for RDTimeAlarmProducer());
  uint64_t v43 = sub_100096204((uint64_t)&aBlock, (uint64_t)v32);
  id v101 = v100;
  __chkstk_darwin(v43);
  id v45 = (void *)((char *)v100 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = *(void (**)(uint64_t *))(v46 + 16);
  uint64_t v48 = v32;
  id v103 = v32;
  v47(v45);
  uint64_t v49 = *v45;
  id v50 = v33;
  uint64_t v51 = (uint64_t)v120;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v108 = v35;
  uint64_t v105 = sub_1000943E0(v50, (uint64_t)v35, v49, v51, (uint64_t)v31, v105);

  swift_release();
  swift_release();
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  uint64_t v52 = (void *)swift_allocObject();
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v100[0])((char *)v52 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_xpcEventStreamToken, 1, 1, v38);
  uint64_t v53 = (void *)((char *)v52 + OBJC_IVAR____TtC7remindd28RDXPCActivityTimeEventStream_eventHandler);
  *uint64_t v53 = 0;
  v53[1]  = 0;
  v52[2]  = v50;
  v52[3]  = 0xD000000000000024;
  v52[4]  = 0x80000001007C7870;
  void v52[5] = v41;
  uint64_t v54 = (uint64_t)v52;
  v124  = v48;
  v125  = (void (*)())&off_1008C3D28;
  uint64_t v55 = v42;
  *(void *)&long long aBlock = v42;
  uint64_t v56 = objc_allocWithZone((Class)type metadata accessor for RDDueDateDeltaAlarmProducer());
  uint64_t v57 = sub_100096204((uint64_t)&aBlock, (uint64_t)v124);
  __chkstk_darwin(v57);
  id v59 = (void *)((char *)v100 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v60 + 16))(v59);
  uint64_t v61 = *v59;
  id v62 = v50;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v101 = (void *)v54;
  v104  = sub_100094518(v62, v54, v61, v51, (uint64_t)v31, v56);

  swift_release();
  swift_release();
  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  id v63 = v62;
  swift_retain();
  swift_retain();
  os_log_type_t v64 = v109;
  uint64_t v109 = sub_100094650(v63, v64, v55);

  swift_release();
  v124  = v103;
  v125  = (void (*)())&off_1008C3D68;
  *(void *)&long long aBlock = v55;
  id v65 = objc_allocWithZone((Class)type metadata accessor for RDVehicleAlarmProducer());
  uint64_t v66 = sub_100096204((uint64_t)&aBlock, (uint64_t)v124);
  __chkstk_darwin(v66);
  __int16 v68 = (void *)((char *)v100 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v69 + 16))(v68);
  uint64_t v70 = *v68;
  id v71 = v63;
  swift_retain();
  swift_retain();
  id v103 = sub_10009483C(v71, v70, (uint64_t)v31, v65);

  swift_release();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  id v72 = v111;
  uint64_t v74 = v111[2];
  long long v73 = v111[3];
  uint64_t v75 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  v75[6]  = 0;
  v75[7]  = 0;
  v75[2]  = v74;
  v75[3]  = v73;
  v75[4]  = v71;
  uint64_t v76 = swift_allocObject();
  *(void *)(v76 + 16)  = v71;
  *(void *)(v76 + 24)  = v75;
  uint64_t v77 = (uint64_t)v72[6];
  v72[6]  = sub_1000964D8;
  v72[7]  = (void *)v76;
  id v78 = v71;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100096314(v77);
  uint64_t v79 = self;
  v102  = v55;
  swift_retain();
  swift_retain();
  id v80 = [v79 daemonUserDefaults];
  v124  = (void *)sub_1000963CC(0, (unint64_t *)&qword_100908178);
  v125  = (void (*)())&off_1008C5AC0;
  *(void *)&long long aBlock = v80;
  type metadata accessor for RDUserInteractionSessionManager();
  uint64_t v81 = swift_allocObject();
  sub_1000967D4(&aBlock, v81 + 16);
  id v82 = sub_100094C04(v78, (uint64_t)v75, v81, v55, (uint64_t)v31);

  swift_release();
  swift_release();
  type metadata accessor for RDAlarmNotificationConsumer();
  v83  = (void *)swift_allocObject();
  id v84 = v78;
  id v85 = v119;
  uint64_t v86 = (uint64_t)v107;
  swift_unknownObjectRetain();
  v87  = (uint64_t)v120;
  swift_retain();
  uint64_t v88 = sub_100093E4C((uint64_t)v84, v86, v106, (uint64_t)v85, v87, v83);
  os_log_type_t v89 = (void *)swift_allocObject();
  uint64_t v90 = v105;
  v89[2]  = v31;
  v89[3]  = v90;
  uint64_t v91 = v104;
  id v92 = v109;
  v89[4]  = v104;
  v89[5]  = v92;
  uint64_t v93 = v103;
  v89[6]  = v103;
  v89[7]  = v82;
  v94  = v112;
  v89[8]  = v88;
  v89[9]  = v94;
  v125  = sub_100096554;
  v126  = v89;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1)  = 1107296256;
  v123  = sub_100236C78;
  v124  = &unk_1008B8188;
  uint64_t v95 = _Block_copy(&aBlock);
  swift_retain();
  v119  = v90;
  __int16 v111 = v91;
  uint64_t v110 = v92;
  uint64_t v109 = v93;
  id v107 = v82;
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v96 = v113;
  static DispatchQoS.unspecified.getter();
  v121  = _swiftEmptyArrayStorage;
  sub_10008F3AC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v97 = v115;
  uint64_t v98 = v118;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v95);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v97, v98);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v96, v116);
  swift_release();
  return v31;
}

id sub_100095B38(void *a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_cancellables]  = &_swiftEmptySetSingleton;
  *(void *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_osTransaction]  = 0;
  a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_isHandlingOperationQueueItems]  = 0;
  *(void *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_storeController]  = a1;
  *(void *)&a4[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_scheduler]  = a3;
  id v9 = (objc_class *)type metadata accessor for RDDaemonController();
  id v10 = (char *)objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v11 = a2;
  *((void *)v11 + 1)  = &off_1008C3598;
  uint64_t v12 = &v10[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)uint64_t v12 = 0xD000000000000015;
  *((void *)v12 + 1)  = 0x80000001007C7A20;
  *(void *)(v12 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v12 + 3)  = 0;
  *((void *)v12 + 4)  = 0;
  *((void *)v12 + 2)  = 0;
  *(void *)&v10[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v19.receiver  = v10;
  v19.super_class  = v9;
  id v13 = a4;
  id v14 = a1;
  id v15 = a3;
  id v16 = a2;
  *(void *)&v13[OBJC_IVAR____TtC7remindd23RDGroceryOperationQueue_daemonController]  = [super init];

  v18.receiver  = v13;
  v18.super_class  = ObjectType;
  return [super init];
}

uint64_t *sub_100095C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v16 = *a10;
  v25[3]  = sub_1000963CC(0, &qword_1009081B0);
  void v25[4] = &off_1008BF018;
  v25[0]  = a6;
  v24[3]  = sub_1000963CC(0, (unint64_t *)&qword_100908178);
  v24[4]  = &off_1008BF038;
  v24[0]  = a7;
  a10[5]  = 0;
  swift_unknownObjectWeakInit();
  a10[18]  = 0;
  swift_unknownObjectWeakInit();
  a10[19]  = 0;
  a10[20]  = 0;
  a10[21]  = 0xD000000000000022;
  a10[22]  = 0x80000001007C7A90;
  a10[24]  = 0;
  a10[25]  = 0;
  a10[23]  = 0;
  *(uint64_t *)((char *)a10 + 206)  = 0;
  *(void *)&long long v21 = v16;
  sub_100094134(&qword_100908238);
  a10[27]  = String.init<A>(reflecting:)();
  a10[28]  = v17;
  *((_OWORD *)a10 + 17)  = 0u;
  *((_OWORD *)a10 + 1_Block_object_dispose(&STACK[0x260], 8) = 0u;
  a10[38]  = 0;
  a10[2]  = a1;
  a10[3]  = a2;
  a10[5]  = a4;
  swift_unknownObjectWeakAssign();
  a10[16]  = a5;
  sub_100096838((uint64_t)v25, (uint64_t)(a10 + 6));
  sub_100096838((uint64_t)v24, (uint64_t)(a10 + 11));
  sub_100096838((uint64_t)v24, (uint64_t)&v21);
  uint64_t v18 = type metadata accessor for RDICCloudExtraneousAlarmsCollector.RDICCloudExtraneousAlarmsCollectorExecutionDateStorage();
  uint64_t v19 = swift_allocObject();
  sub_1000967D4(&v21, v19 + 16);
  uint64_t v22 = v18;
  id v23 = &off_1008BF070;
  *(void *)&long long v21 = v19;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v24);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v25);
  sub_1000967D4(&v21, (uint64_t)(a10 + 29));
  a10[18]  = a9;
  swift_unknownObjectWeakAssign();
  return a10;
}

void *sub_100095E98(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v5)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    id v10 = (char *)(a1 + 32);
    do
    {
      char v11 = *v10++;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16)  = a3;
      *(void *)(v12 + 24)  = a4;
      *(unsigned char *)(v12 + 32)  = v11;
      id v13 = (void *)swift_allocObject();
      void v13[2] = a2;
      v13[3]  = sub_1000960D8;
      void v13[4] = v12;
      type metadata accessor for RDDynamicXPCActivity();
      swift_allocObject();
      id v14 = a2;
      swift_retain();
      sub_100597404(v11, (uint64_t)sub_1000960FC, (uint64_t)v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v5;
    }
    while (v5);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_100095FFC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100096034()
{
  sub_100089758(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.xpcEvents}");
}

uint64_t sub_100096058(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1  = result;
  }
  return result;
}

uint64_t sub_1000960A0()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000960D8()
{
  return sub_100597070(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1000960FC(uint64_t a1, uint64_t a2)
{
  return sub_1005970A0(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100096108()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100096144(uint64_t a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  unint64_t v4 = v1[4];
  uint64_t v5 = (void (*)(void))v1[5];
  sub_1000961A8(a1, (uint64_t)v6);
  sub_10008C5D8((uint64_t)v6, v2, v3, v4, v5);
}

uint64_t sub_1000961A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100096204(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_1000962A4()
{
  sub_10056E514(*(void **)(v0 + 16));
}

uint64_t sub_1000962AC()
{
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100096304()
{
  sub_100088920(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100096314(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

id sub_100096324()
{
  return sub_1005C6518(v0);
}

uint64_t sub_10009632C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100908190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_100096394()
{
  sub_10008CA9C();

  sub_10008CE44();
}

uint64_t sub_1000963BC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000963CC(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100096408(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100094134(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10009646C()
{
}

uint64_t sub_100096474()
{
  return _swift_deallocObject(v0, 40, 7);
}

double sub_100096484(uint64_t a1)
{
  return sub_10068371C(a1, v1[2], v1[3], v1[4]);
}

void sub_100096490()
{
}

uint64_t sub_100096498()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000964D8(uint64_t *a1)
{
  return sub_10008C7D4(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000964E4()
{
  swift_release();

  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_100096554()
{
  sub_100683994(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_100096568()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000965A4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000965EC(uint64_t *a1)
{
  sub_10008C3E8(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t, uint64_t *))(v1 + 40));
}

uint64_t sub_100096600()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100096640()
{
  return sub_10008F714(*(void *)(v0 + 16), (uint64_t *)(v0 + 24));
}

void sub_10009664C()
{
}

unint64_t sub_100096654()
{
  unint64_t result = qword_10090D990;
  if (!qword_10090D990)
  {
    sub_1000963CC(255, (unint64_t *)&qword_10090F370);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090D990);
  }
  return result;
}

uint64_t sub_1000966BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100094134(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100096718()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100096758()
{
  sub_1004A3CFC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100096764()
{
  return sub_10008E21C(v0);
}

uint64_t sub_10009676C@<X0>(BOOL *a1@<X8>)
{
  return sub_10059A750(v1, a1);
}

uint64_t sub_100096774()
{
  return sub_10008DA54();
}

uint64_t sub_100096794()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000967D4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32)  = *((void *)a1 + 4);
  *(_OWORD *)a2  = v2;
  *(_OWORD *)(a2 + 16)  = v3;
  return a2;
}

void sub_1000967EC()
{
}

uint64_t sub_1000967F4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100096838(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24)  = v3;
  *(void *)(a2 + 32)  = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_10009689C()
{
  sub_100089758(*(void *)(v0 + 16), "os_transaction RELEASE {name: com.apple.remindd.launch}");
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for AssetsResult(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for RDSavedDayOfWeek(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1  = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedDayOfWeek(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RDSavedDayOfWeek(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16)  = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for REMSmartListUserDefinedVisibility(uint64_t a1)
{
}

void type metadata accessor for REMSmartListType(uint64_t a1)
{
}

void type metadata accessor for REMReminderNextThirdsHour(uint64_t a1)
{
}

void type metadata accessor for NLTag(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

void type metadata accessor for ComparisonResult(uint64_t a1)
{
}

void type metadata accessor for NLTagScheme(uint64_t a1)
{
}

void type metadata accessor for DACalendarShareResponse(uint64_t a1)
{
}

void type metadata accessor for REMAlarmVehicleTriggerEvent(uint64_t a1)
{
}

void type metadata accessor for REMManualOrderingListType(uint64_t a1)
{
}

void type metadata accessor for NLLanguage(uint64_t a1)
{
}

void type metadata accessor for REMListSharingStatus(uint64_t a1)
{
}

void type metadata accessor for BMMiningTaskCompletionStatus(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

uint64_t sub_100096A80()
{
  return sub_10008F3AC(&qword_100908340, type metadata accessor for QualityOfService);
}

uint64_t sub_100096AC8()
{
  return sub_10008F3AC(&qword_100908348, type metadata accessor for NLLanguage);
}

uint64_t sub_100096B10()
{
  return sub_10008F3AC(&qword_100908350, type metadata accessor for NLLanguage);
}

uint64_t sub_100096B58()
{
  return sub_10008F3AC(&qword_100908358, type metadata accessor for NLLanguage);
}

uint64_t sub_100096BA0()
{
  return sub_10008F3AC(&qword_100908360, type metadata accessor for NLTagScheme);
}

uint64_t sub_100096BE8()
{
  return sub_10008F3AC(&qword_100908368, type metadata accessor for NLTagScheme);
}

uint64_t sub_100096C30()
{
  return sub_10008F3AC(&qword_100908370, type metadata accessor for NLTagScheme);
}

uint64_t sub_100096C78()
{
  return sub_10008F3AC(&qword_100908378, type metadata accessor for CKError);
}

uint64_t sub_100096CC0()
{
  return sub_10008F3AC(&qword_100908380, type metadata accessor for CKError);
}

uint64_t sub_100096D08()
{
  return sub_10008F3AC(&qword_100908388, type metadata accessor for NLTag);
}

uint64_t sub_100096D50()
{
  return sub_10008F3AC(&qword_100908390, type metadata accessor for NLTag);
}

uint64_t sub_100096D98()
{
  return sub_10008F3AC(&qword_100908398, type metadata accessor for NLTag);
}

uint64_t sub_100096DE0()
{
  return sub_10008F3AC(&qword_1009083A0, type metadata accessor for REMSmartListType);
}

uint64_t sub_100096E28()
{
  return sub_10008F3AC(&qword_1009083A8, type metadata accessor for REMSmartListType);
}

uint64_t sub_100096E70()
{
  return sub_10008F3AC(&qword_1009083B0, type metadata accessor for REMSmartListType);
}

uint64_t sub_100096EB8()
{
  return sub_10008F3AC(&qword_1009083B8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100096F00()
{
  return sub_10008F3AC(&qword_1009083C0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100096F48()
{
  return sub_10008F3AC(&qword_1009083C8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100096F90()
{
  return sub_10008F3AC(&qword_1009083D0, type metadata accessor for CKError);
}

uint64_t sub_100096FD8()
{
  return sub_10008F3AC(&qword_1009083D8, type metadata accessor for CKError);
}

uint64_t sub_100097020()
{
  return sub_10008F3AC(&qword_1009083E0, type metadata accessor for CKError);
}

uint64_t sub_100097068()
{
  return sub_10008F3AC(&qword_1009083E8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_1000970C4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    ForeignTypeMetadata  = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10009710C()
{
  return sub_10008F3AC(&qword_1009083F0, type metadata accessor for Code);
}

unint64_t sub_100097158()
{
  unint64_t result = qword_1009083F8;
  if (!qword_1009083F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009083F8);
  }
  return result;
}

uint64_t sub_1000971AC()
{
  return sub_10008F3AC(&qword_100908400, type metadata accessor for Code);
}

uint64_t sub_1000971F4()
{
  return sub_10008F3AC((unint64_t *)&qword_100908408, type metadata accessor for CKError);
}

void sub_100097314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v68 = a4;
  uint64_t v67 = a3;
  uint64_t v8 = type metadata accessor for TimeZone();
  uint64_t v75 = *(void (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v66 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for Calendar.Identifier();
  uint64_t v10 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  id v65 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for Calendar();
  id v72 = *(void (***)(char *, uint64_t))(v80 - 8);
  __chkstk_darwin(v80);
  os_log_type_t v64 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DateComponents();
  uint64_t v13 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  id v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = a1;
  uint64_t v21 = *(void *)(a1 + 16);
  v83  = v5;
  uint64_t v73 = a2;
  if (v21)
  {
    id v78 = (void (**)(char *, void, uint64_t))(v10 + 104);
    uint64_t v77 = (void (**)(char *, uint64_t))(v10 + 8);
    LODWORD(v76)  = enum case for Calendar.Identifier.gregorian(_:);
    ++v75;
    uint64_t v74 = v8;
    ++v72;
    id v71 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v70 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v69 = v18;
    swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    id v23 = v66;
    uint64_t v24 = v65;
    unsigned int v25 = v64;
    do
    {
      ++v22;
      Date.init(timeIntervalSinceReferenceDate:)();
      uint64_t v26 = v81;
      (*v78)(v24, v76, v81);
      Calendar.init(identifier:)();
      (*v77)(v24, v26);
      static TimeZone.current.getter();
      Calendar.dateComponents(in:from:)();
      (*v75)(v23, v74);
      (*v72)(v25, v80);
      id v27 = objc_allocWithZone((Class)REMAlarmDateTrigger);
      isa  = DateComponents._bridgeToObjectiveC()().super.isa;
      id v29 = [v27 initWithDateComponents:isa];

      (*v71)(v15, v79);
      (*v70)(v20, v69);
    }
    while (v21 != v22);
    swift_bridgeObjectRelease();
    id v5 = v83;
    a2  = v73;
  }
  uint64_t v30 = *(void *)(a2 + 16);
  id v31 = &selRef_willSave;
  if (v30)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v82 = v30 - 1;
    uint64_t v32 = 32;
    while (1)
    {
      uint64_t v74 = v32;
      id v33 = (long long *)(a2 + v32);
      long long v34 = v33[8];
      long long v35 = v33[3];
      long long v86 = v33[2];
      v87  = v35;
      long long v36 = v33[6];
      long long v91 = v33[7];
      long long v92 = v34;
      long long v37 = v33[1];
      long long v84 = *v33;
      long long v85 = v37;
      long long v38 = v33[4];
      long long v89 = v33[5];
      long long v90 = v36;
      long long v88 = v38;
      uint64_t v81 = v89;
      uint64_t v39 = *((void *)&v34 + 1);
      uint64_t v80 = v34;
      uint64_t v40 = v87;
      uint64_t v79 = *((void *)&v86 + 1);
      double v41 = *(double *)&v86;
      double v42 = *((double *)&v87 + 1);
      double v43 = *((double *)&v89 + 1);
      uint64_t v44 = *((void *)&v84 + 1);
      id v78 = (void (**)(char *, void, uint64_t))v84;
      uint64_t v45 = *((void *)&v91 + 1);
      uint64_t v77 = (void (**)(char *, uint64_t))v91;
      uint64_t v46 = *((void *)&v36 + 1);
      uint64_t v75 = (void (**)(char *, uint64_t))v36;
      uint64_t v47 = *((void *)&v85 + 1);
      uint64_t v48 = v85;
      long long v49 = v38;
      id v76 = objc_allocWithZone((Class)REMStructuredLocation);
      sub_100097D94((uint64_t)&v84);
      sub_100097D94((uint64_t)&v84);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100097E24(v49, *((unint64_t *)&v49 + 1));
      id v50 = sub_100097BA0(v41, v42, v43, v80, v39, v79, v40, (uint64_t)v78, v44, (uint64_t)v77, v45, (uint64_t)v75, v46, v48, v47, v49, *((unint64_t *)&v49 + 1));
      id v51 = objc_allocWithZone((Class)REMAlarmLocationTrigger);
      id v52 = [v51 initWithStructuredLocation:v50 proximity:v81];
      sub_100097E90((uint64_t)&v84);

      id v31 = &selRef_willSave;
      id v5 = v83;

      sub_100097E90((uint64_t)&v84);
      if (!v82) {
        break;
      }
      --v82;
      uint64_t v32 = v74 + 144;
      a2  = v73;
    }
    swift_bridgeObjectRelease_n();
  }
  uint64_t v53 = v67;
  uint64_t v54 = *(void *)(v67 + 16);
  uint64_t v55 = v68;
  if (v54)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = 0;
    do
    {
      double v57 = *(double *)(v53 + 8 * v56++ + 32);
      id v58 = [objc_allocWithZone((Class)REMAlarmTimeIntervalTrigger) initWithTimeInterval:v57];
    }
    while (v54 != v56);
    swift_bridgeObjectRelease();
  }
  uint64_t v59 = *(void *)(v55 + 16);
  if (v59)
  {
    swift_bridgeObjectRetain();
    uint64_t v60 = 0;
    do
    {
      uint64_t v61 = *(void *)(v55 + 8 * v60++ + 32);
      id v62 = [objc_allocWithZone((Class)REMAlarmVehicleTrigger) initWithEvent:v61];
    }
    while (v59 != v60);
    swift_bridgeObjectRelease();
  }
}

id sub_100097BA0(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  if (a5)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a7) {
      goto LABEL_3;
    }
  }
  else
  {
    NSString v24 = 0;
    if (a7)
    {
LABEL_3:
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (a9) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  NSString v25 = 0;
  if (a9)
  {
LABEL_4:
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v27 = a13;
    if (a11) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  NSString v26 = 0;
  uint64_t v27 = a13;
  if (a11)
  {
LABEL_5:
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v29 = a15;
    if (v27) {
      goto LABEL_6;
    }
LABEL_12:
    NSString v30 = 0;
    unint64_t v31 = a17;
    if (v29) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_11:
  NSString v28 = 0;
  uint64_t v29 = a15;
  if (!v27) {
    goto LABEL_12;
  }
LABEL_6:
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v31 = a17;
  if (v29)
  {
LABEL_7:
    NSString v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
LABEL_13:
  NSString v32 = 0;
LABEL_14:
  if (v31 >> 60 == 15)
  {
    isa  = 0;
  }
  else
  {
    isa  = Data._bridgeToObjectiveC()().super.isa;
    sub_100097F20(a16, v31);
  }
  id v34 = [v17 initWithTitle:v24 locationUID:v25 latitude:v26 longitude:v28 radius:v30 address:v32 routing:a1 referenceFrameString:a2 contactLabel:a3 mapKitHandle:isa];

  return v34;
}

uint64_t sub_100097D94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100097E24(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100097E24(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100097E38(a1, a2);
  }
  return a1;
}

uint64_t sub_100097E38(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100097E90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  unint64_t v3 = *(void *)(a1 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100097F20(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100097F20(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100097F34(a1, a2);
  }
  return a1;
}

uint64_t sub_100097F34(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_100097F8C(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  isUniquelyReferenced_nonNull_native  = v4;
  uint64_t v43 = a3;
  uint64_t v44 = a2;
  uint64_t v42 = type metadata accessor for UUID();
  unint64_t v8 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  double v41 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_34;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return;
  }
  while (1)
  {
    unint64_t v40 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) == 0) {
      break;
    }
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
    uint64_t v12 = v11;
    uint64_t v39 = v43 - v44;
    if (v43 == v44)
    {
LABEL_27:
      swift_bridgeObjectRelease();

      return;
    }
    if (v43 < v44) {
      goto LABEL_38;
    }
    uint64_t v13 = 0;
    unint64_t v37 = a1;
    long long v38 = (void (**)(char *, uint64_t))(v8 + 8);
    v34[1]  = isUniquelyReferenced_nonNull_native;
    uint64_t v35 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v36 = v10 - 1;
    while (v44 + v13 < v43)
    {
      id v14 = v12;
      id v15 = [v14 uuid];
      uint64_t v16 = v41;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = UUID.uuidString.getter();
      unint64_t v8 = v18;
      (*v38)(v16, v42);
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = *(void **)a4;
      uint64_t v19 = v45;
      uint64_t v20 = (void *)a4;
      *(void *)a4  = 0x8000000000000000;
      a4  = sub_1001806F8(v17, v8);
      uint64_t v22 = v19[2];
      BOOL v23 = (v21 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (__OFADD__(v22, v23)) {
        goto LABEL_30;
      }
      a1  = v21;
      if (v19[3] >= v24)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1003181E8();
        }
      }
      else
      {
        sub_10030D5E4(v24, isUniquelyReferenced_nonNull_native);
        unint64_t v25 = sub_1001806F8(v17, v8);
        if ((a1 & 1) != (v26 & 1)) {
          goto LABEL_39;
        }
        a4  = v25;
      }
      int v27 = v44 + v13;
      NSString v28 = v45;
      if (a1)
      {
        *(_DWORD *)(v45[7] + 4 * a4)  = v27;
      }
      else
      {
        v45[(a4 >> 6) + 8] |= 1 << a4;
        uint64_t v29 = (uint64_t *)(v28[6] + 16 * a4);
        *uint64_t v29 = v17;
        v29[1]  = v8;
        *(_DWORD *)(v28[7] + 4 * a4)  = v27;
        uint64_t v30 = v28[2];
        BOOL v31 = __OFADD__(v30, 1);
        uint64_t v32 = v30 + 1;
        if (v31) {
          goto LABEL_32;
        }
        v28[2]  = v32;
        swift_bridgeObjectRetain();
      }
      a4  = (unint64_t)v20;
      *uint64_t v20 = v28;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1  = v37;
      if (v36 == v13) {
        goto LABEL_35;
      }
      unint64_t v8 = v13 + 1;
      if (v40)
      {
        id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v8 >= *(void *)(v35 + 16)) {
          goto LABEL_33;
        }
        id v33 = *(id *)(v37 + 8 * v13 + 40);
      }
      uint64_t v12 = v33;
      if (__OFADD__(v8, 1)) {
        goto LABEL_31;
      }
      if (v39 == ++v13) {
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    if (!v10) {
      goto LABEL_35;
    }
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(a1 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_100098358()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009086B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009086B0);
  if (qword_100907858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942550);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100098420(uint64_t a1, char a2)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  sub_1000963CC(0, (unint64_t *)&unk_10090B010);
  sub_10009ACB4((unint64_t *)&qword_100911830, (unint64_t *)&unk_10090B010);
  unint64_t result = Sequence.elements<A>(ofType:)();
  unint64_t v5 = result;
  if (!(result >> 62))
  {
    uint64_t v6 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  unint64_t v8 = _swiftEmptyDictionarySingleton;
  if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_100097F8C(v5, 0, v6, (unint64_t)&v8);
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t)v8;
    swift_bridgeObjectRetain();
    sub_100098560(a1, v7, a2);
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_100098560(uint64_t a1, uint64_t a2, char a3)
{
  isUniquelyReferenced_nonNull_native  = a1;
  uint64_t v81 = _swiftEmptyDictionarySingleton;
  aBlock[0]  = a1;
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  sub_1000963CC(0, &qword_1009086C8);
  sub_10009ACB4(&qword_1009208E0, &qword_1009086C8);
  unint64_t v4 = Sequence.elements<A>(ofType:)();
  unint64_t v5 = v4;
  uint64_t v6 = (void *)(v4 >> 62);
  if (v4 >> 62)
  {
LABEL_82:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v8 = a2;
  if (v7 == *(void *)(a2 + 16))
  {
LABEL_8:
    uint64_t v13 = v5 & 0xFFFFFFFFFFFFFF8;
    if (!v6) {
      goto LABEL_9;
    }
LABEL_61:
    swift_bridgeObjectRetain_n();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_10;
    }
LABEL_62:
    swift_bridgeObjectRelease();
LABEL_63:
    swift_bridgeObjectRelease();
    if (qword_100906D88 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_10008E2DC(v60, (uint64_t)qword_1009086B0);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      id v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v58 = 0;
      uint64_t v59 = "[implSort] Objects are already in correct order. Will skip sorting";
LABEL_67:
      _os_log_impl((void *)&_mh_execute_header, v56, v57, v59, v58, 2u);
      swift_slowDealloc();
    }
LABEL_68:

    return swift_bridgeObjectRelease();
  }
  if (qword_100906D88 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E2DC(v9, (uint64_t)qword_1009086B0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134218240;
    aBlock[0]  = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12)  = 2048;
    aBlock[0]  = *(void *)(a2 + 16);
    uint64_t v8 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[implSort] Count of CD objects is not same as that of the Ordering Map {allCDObjects#: %ld, orderingIndexMap#: %ld}", (uint8_t *)v12, 0x16u);
    swift_slowDealloc();

    goto LABEL_8;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v5 & 0xFFFFFFFFFFFFFF8;
  if (v6) {
    goto LABEL_61;
  }
LABEL_9:
  uint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_62;
  }
LABEL_10:
  uint64_t v69 = v7;
  uint64_t v70 = (void *)isUniquelyReferenced_nonNull_native;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  unint64_t v76 = v5 & 0xC000000000000001;
  uint64_t v73 = v5 & 0xFFFFFFFFFFFFFF8;
  uint64_t v74 = v14;
  unint64_t v75 = v5;
  char v72 = 0;
  do
  {
    while (1)
    {
      if (v76)
      {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v16 >= *(void *)(v73 + 16)) {
          goto LABEL_81;
        }
        id v17 = *(id *)(v5 + 8 * v16 + 32);
      }
      unint64_t v18 = v17;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      self;
      uint64_t v19 = (void *)swift_dynamicCastObjCClass();
      unint64_t v78 = v15;
      unint64_t v79 = v16 + 1;
      if (v19 || (self, (uint64_t v19 = (void *)swift_dynamicCastObjCClass()) != 0))
      {
        id v20 = [v19 parentList];
        goto LABEL_21;
      }
      self;
      unint64_t v21 = (void *)swift_dynamicCastObjCClass();
      if (v21)
      {
        id v20 = [v21 parentReminder];
LABEL_21:
        id v22 = v20;
        uint64_t v6 = v22;
        if (v22) {
          id v23 = v22;
        }
        else {
          id v23 = v18;
        }
        goto LABEL_24;
      }
      if (qword_100906D88 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_10008E2DC(v43, (uint64_t)qword_1009086B0);
      id v23 = v18;
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        aBlock[0]  = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        id v23 = v23;
        id v47 = [v23 description];
        uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v5 = v49;

        *(void *)(v46 + 4)  = sub_1000C51B8(v48, v5, aBlock);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "[implSort] Unexpected CD object in ordered set {object: %s}", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = a2;
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v6 = 0;
LABEL_24:
      id v24 = v23;
      uint64_t v25 = sub_100099B48(v24, v8);

      if (v6) {
        unsigned int v26 = sub_100099B48(v18, v8);
      }
      else {
        unsigned int v26 = 0;
      }
      id v27 = [v18 objectID];
      uint64_t v28 = (uint64_t)v81;
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0]  = v28;
      uint64_t v81 = (void *)0x8000000000000000;
      unint64_t v30 = sub_100306F98((uint64_t)v27);
      uint64_t v31 = *(void *)(v28 + 16);
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        goto LABEL_79;
      }
      char v34 = v29;
      if (*(void *)(v28 + 24) >= v33)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_1003181DC();
        }
      }
      else
      {
        sub_10030D5D8(v33, isUniquelyReferenced_nonNull_native);
        unint64_t v35 = sub_100306F98((uint64_t)v27);
        if ((v34 & 1) != (v36 & 1)) {
          goto LABEL_84;
        }
        unint64_t v30 = v35;
      }
      unint64_t v15 = v26 | (unint64_t)(v25 << 32);
      unint64_t v37 = (void *)aBlock[0];
      if (v34)
      {
        *(void *)(*(void *)(aBlock[0] + 56) + 8 * v30)  = v15;
        unint64_t v5 = v75;
      }
      else
      {
        *(void *)(aBlock[0] + 8 * (v30 >> 6) + 64) |= 1 << v30;
        uint64_t v38 = 8 * v30;
        *(void *)(v37[6] + v3_Block_object_dispose(&STACK[0x260], 8) = v27;
        *(void *)(v37[7] + v3_Block_object_dispose(&STACK[0x260], 8) = v15;
        uint64_t v39 = v37[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        unint64_t v5 = v75;
        if (v40) {
          goto LABEL_80;
        }
        v37[2]  = v41;
        id v42 = v27;
      }
      uint64_t v81 = v37;

      swift_bridgeObjectRelease();
      if (v15 >= v78) {
        break;
      }
      ++v16;
      uint64_t v8 = a2;
      if (v79 == v74)
      {
        swift_bridgeObjectRelease();
        id v50 = (void *)&unk_100906000;
        goto LABEL_49;
      }
      char v72 = 1;
    }
    ++v16;
    uint64_t v8 = a2;
  }
  while (v79 != v74);
  swift_bridgeObjectRelease();
  id v50 = &unk_100906000;
  if ((v72 & 1) == 0) {
    goto LABEL_63;
  }
LABEL_49:
  if (a3)
  {
    if (v50[433] != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E2DC(v51, (uint64_t)qword_1009086B0);
    id v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "[implSort] LOOKATME: Pre-sorted but full CD mutableOrderedSet.sort still needed.", v54, 2u);
      swift_slowDealloc();
    }
  }
  if ([self _forceDisableFullRemindersSorting])
  {
    swift_bridgeObjectRelease();
    if (v50[433] != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_10008E2DC(v55, (uint64_t)qword_1009086B0);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v56, v57))
    {
      id v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v58 = 0;
      uint64_t v59 = "[implSort] _forceDisableFullRemindersSorting = YES so we will abort from running mutableOrderedSet.sort now.";
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  if (v50[433] != -1) {
    swift_once();
  }
  uint64_t v62 = type metadata accessor for Logger();
  sub_10008E2DC(v62, (uint64_t)qword_1009086B0);
  swift_bridgeObjectRetain();
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v63, v64))
  {
    id v65 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v65 = 134217984;
    swift_bridgeObjectRelease();
    aBlock[0]  = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "[implSort] Performing full CD mutableOrderedSet.sort {total.count: %ld}", v65, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v66 = swift_allocObject();
  *(void *)(v66 + 16)  = &v81;
  uint64_t v67 = swift_allocObject();
  *(void *)(v67 + 16)  = sub_10009A21C;
  *(void *)(v67 + 24)  = v66;
  aBlock[4]  = (uint64_t)sub_10009A234;
  aBlock[5]  = v67;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_100288114;
  void aBlock[3] = (uint64_t)&unk_1008B8708;
  uint64_t v68 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v70 sortWithOptions:16 usingComparator:v68];
  _Block_release(v68);
  LOBYTE(v6_Block_object_dispose(&STACK[0x260], 8) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v68 & 1) == 0)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_84:
  sub_1000963CC(0, (unint64_t *)&qword_100914150);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000990F0(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v35 - v12;
  uint64_t v14 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v14 - 8);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v35 - v18;
  sub_10009A1B0(a1, (uint64_t)v37);
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  id v20 = v36;
  id v21 = [v36 identifier];
  if (v21)
  {
    id v22 = v21;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, v23, 1, v7);
  sub_100096408((uint64_t)v16, (uint64_t)v19, (uint64_t *)&unk_100909E50);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v19, 1, v7))
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v19, v7);
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v28 = v27;
    char v29 = *(void (**)(char *, uint64_t))(v8 + 8);
    v29(v13, v7);
    id v30 = [a4 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v31 = UUID.uuidString.getter();
    uint64_t v33 = v32;
    v29(v10, v7);
    if (v26 == v31 && v28 == v33)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {

        return 0;
      }
    }
    uint64_t v24 = 1;
    *a3  = 1;

    return v24;
  }

  sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
  return 0;
}

uint64_t sub_100099440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a1 + 32);
  v9[3]  = swift_getObjectType();
  v9[0]  = a2;
  swift_unknownObjectRetain();
  LOBYTE(a4)  = v7(v9, a3, a4);
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v9);
  return a4 & 1;
}

uint64_t sub_1000994C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(a4 + 16);
  *(void *)(a4 + 16)  = 0x8000000000000000;
  sub_1002C3BC0(a2, v6, v8, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + 16)  = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

id sub_100099574(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v38 = a1;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v37 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v40 = [objc_allocWithZone((Class)NSMutableOrderedSet) init];
  id v34 = v2;
  id v11 = [v2 orderedSet];
  NSOrderedSet.makeIterator()();

  NSFastEnumerationIterator.next()();
  if (v48)
  {
    id v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
    id v36 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v35 = (void (**)(char *, uint64_t))(v7 + 8);
    *(void *)&long long v12 = 138412290;
    long long v41 = v12;
    while (1)
    {
      sub_10009A1A0(&v47, v46);
      sub_10009A1B0((uint64_t)v46, (uint64_t)v45);
      sub_1000963CC(0, (unint64_t *)&unk_100910040);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_8;
      }
      uint64_t v13 = v44;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v42)(v5, 1, v6) == 1) {
        break;
      }
      id v21 = v37;
      (*v36)(v37, v5, v6);
      id v22 = objc_allocWithZone((Class)REMObjectID);
      swift_bridgeObjectRetain();
      isa  = UUID._bridgeToObjectiveC()().super.isa;
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v22 initWithUUID:isa entityName:v24];

      [v40 addObject:v25];
      (*v35)(v21, v6);
LABEL_4:
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v46);
      NSFastEnumerationIterator.next()();
      if (!v48) {
        goto LABEL_16;
      }
    }

    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E50);
LABEL_8:
    if (qword_100906D88 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_1009086B0);
    sub_10009A1B0((uint64_t)v46, (uint64_t)v45);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = v6;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = v41;
      sub_10009A1B0((uint64_t)v45, (uint64_t)&v44);
      if (swift_dynamicCast()) {
        uint64_t v20 = v43;
      }
      else {
        uint64_t v20 = NSString.init(stringLiteral:)();
      }
      *(void *)(v18 + 4)  = v20;
      *uint64_t v19 = v20;
      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v45);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid UUID found in REMCRMergeableOrderedSet<NSString> when converting it to REMCRMergeableOrderedSet<REMObjectID> {uuidString: %@}", (uint8_t *)v18, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v17;
    }
    else
    {

      _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v45);
    }
    goto LABEL_4;
  }
LABEL_16:
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  id v26 = [v34 replicaIDSource];
  id v27 = objc_allocWithZone((Class)REMCRMergeableOrderedSet);
  id v28 = v40;
  id v29 = [v27 initWithReplicaIDSource:v26 orderedSet:v40];

  return v29;
}

uint64_t sub_100099B48(void *a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v15 = __chkstk_darwin(v14).n128_u64[0];
  uint64_t v17 = (char *)&v30 - v16;
  id v18 = [a1 identifier:v15];
  if (v18)
  {
    uint64_t v19 = v18;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
  }
  sub_100096408((uint64_t)v13, (uint64_t)v17, (uint64_t *)&unk_100909E50);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v17, 1, v3))
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v17, v3);
    sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v26 = v31;
    if (*(void *)(v31 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_1001806F8(v23, v25);
      if (v28)
      {
        uint64_t v22 = *(unsigned int *)(*(void *)(v26 + 56) + 4 * v27);
        swift_bridgeObjectRelease_n();
        return v22;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = String.hashValue.getter();
    swift_bridgeObjectRelease();
    return v22;
  }
  sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
  id v20 = [a1 objectID];
  id v21 = [v20 URIRepresentation];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = URL.hashValue.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v22;
}

uint64_t sub_100099EBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10009A1B0(a1, (uint64_t)v26);
  sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v5 = v25;
  sub_10009A1B0(a2, (uint64_t)v26);
  if ((swift_dynamicCast() & 1) == 0)
  {

LABEL_12:
    if (qword_100906D88 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_1009086B0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v19, "relationship contains non-REMCDObject objects", v20, 2u);
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  id v6 = [v25 objectID];
  uint64_t v7 = v6;
  uint64_t v8 = *a3;
  if (!*(void *)(*a3 + 16)
    || (unint64_t v9 = sub_100306F98((uint64_t)v6), (v10 & 1) == 0)
    || (unint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9),
        v7,
        id v12 = [v25 objectID],
        uint64_t v7 = v12,
        uint64_t v13 = *a3,
        !*(void *)(*a3 + 16))
    || (unint64_t v14 = sub_100306F98((uint64_t)v12), (v15 & 1) == 0))
  {

    if (qword_100906D88 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_1009086B0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "could not get a sorting order from object", v24, 2u);
      swift_slowDealloc();

      return 0;
    }

LABEL_21:
    return 0;
  }
  unint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);

  if (v11 == v16) {
    return 0;
  }
  if (v11 < v16) {
    return -1;
  }
  else {
    return 1;
  }
}

_OWORD *sub_10009A1A0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2  = *a1;
  a2[1]  = v2;
  return a2;
}

uint64_t sub_10009A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24)  = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10009A20C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009A21C(uint64_t a1, uint64_t a2)
{
  return sub_100099EBC(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_10009A224()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009A234(uint64_t a1, uint64_t a2)
{
  return sub_1002880EC(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_10009A23C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_10009A24C()
{
  return swift_release();
}

void sub_10009A254(void *a1, uint64_t a2)
{
  uint64_t v73 = a2;
  uint64_t v3 = type metadata accessor for IndexSet();
  os_log_t v72 = *(os_log_t *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v12 = (char *)&v67 - v11;
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v13 - 8);
  char v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v17 = __chkstk_darwin(v16).n128_u64[0];
  os_log_type_t v19 = (char *)&v67 - v18;
  if (objc_msgSend(a1, "lastObject", v17))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v79, 0, sizeof(v79));
  }
  sub_100096408((uint64_t)v79, (uint64_t)aBlock, &qword_100908190);
  if (v75)
  {
    sub_1000963CC(0, (unint64_t *)&unk_10090AF40);
    if ((swift_dynamicCast() & 1) == 0) {
      return;
    }
    id v71 = v78;
    id v20 = [v78 identifier];
    if (v20)
    {
      uint64_t v21 = v20;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v15, v22, 1, v6);
    sub_100096408((uint64_t)v15, (uint64_t)v19, (uint64_t *)&unk_100909E50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v19, 1, v6))
    {

      os_log_type_t v23 = (uint64_t *)&unk_100909E50;
      uint64_t v24 = v19;
      goto LABEL_12;
    }
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v19, v6);
    sub_1000966BC((uint64_t)v19, (uint64_t *)&unk_100909E50);
    uint64_t v69 = UUID.uuidString.getter();
    uint64_t v70 = v25;
    uint64_t v68 = *(void (**)(char *, uint64_t))(v7 + 8);
    v68(v12, v6);
    isEscapingClosureAtFileLocation  = v73;
    if (*(void *)(v73 + 16) < 2uLL)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v27 = qword_100906D88;
      swift_bridgeObjectRetain();
      if (v27 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E2DC(v28, (uint64_t)qword_1009086B0);
      swift_bridgeObjectRetain();
      id v29 = Logger.logObject.getter();
      uint64_t v30 = isEscapingClosureAtFileLocation;
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 134217984;
        aBlock[0]  = *(void *)(v30 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v29, v31, "[implSort] pre-sort: we have more than 1 sorting hints but we currently only support to accomate 1 {count: %ld}", v32, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      isEscapingClosureAtFileLocation  = v30;
    }
    uint64_t v33 = (void *)sub_1002B0F08(isEscapingClosureAtFileLocation);
    if (!v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    id v34 = v33;
    id v35 = [v33 uuid];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v36 = (void *)UUID.uuidString.getter();
    uint64_t v38 = v37;
    v68(v9, v6);
    uint64_t v39 = &selRef_ckServerChangeTokens;
    if ((void *)v69 == v36 && v70 == v38)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      isEscapingClosureAtFileLocation  = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16)  = v34;
        uint64_t v46 = swift_allocObject();
        uint64_t v70 = sub_10009AC70;
        *(void *)(v46 + 16)  = sub_10009AC70;
        *(void *)(v46 + 24)  = v45;
        uint64_t v43 = v45;
        unint64_t v76 = sub_10009AC88;
        uint64_t v77 = (void *)v46;
        aBlock[0]  = _NSConcreteStackBlock;
        aBlock[1]  = 1107296256;
        aBlock[2]  = sub_100099440;
        unint64_t v75 = &unk_1008B8780;
        long long v47 = _Block_copy(aBlock);
        id v36 = v77;
        id v40 = v34;
        id v48 = v34;
        swift_retain();
        swift_release();
        uint64_t v42 = (uint64_t)[a1 indexOfObjectPassingTest:v47];
        _Block_release(v47);
        isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((isEscapingClosureAtFileLocation & 1) == 0)
        {
          uint64_t v44 = v73;
          isEscapingClosureAtFileLocation  = (uint64_t)v70;
          goto LABEL_32;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
    id v40 = v34;
    id v41 = [a1 count];
    uint64_t v42 = (uint64_t)v41 - 1;
    if (!__OFSUB__(v41, 1))
    {
      isEscapingClosureAtFileLocation  = 0;
      uint64_t v43 = 0;
      uint64_t v44 = v73;
LABEL_32:
      if (v42 == NSNotFound.getter() || v42 < 0 || v42 >= (uint64_t)[a1 count])
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if (*(void *)(v44 + 16))
        {
          id v49 = v40;
          unint64_t v50 = sub_100306FE8((uint64_t)v49);
          if (v51)
          {
            uint64_t v69 = v43;
            id v52 = v49;
            uint64_t v53 = *(void *)(*(void *)(v44 + 56) + 8 * v50);

            if (v53 < 0 || v53 >= (uint64_t)[a1 count])
            {
              swift_bridgeObjectRelease();

              uint64_t v55 = isEscapingClosureAtFileLocation;
LABEL_49:
              sub_100096314(v55);
              return;
            }
            uint64_t v39 = (char **)v53;
            BOOL v54 = v42 == v53;
            id v36 = v52;
            if (v54)
            {
              swift_bridgeObjectRelease();

              goto LABEL_44;
            }
            IndexSet.init(integer:)();
            IndexSet._bridgeToObjectiveC()(v56);
            id v58 = v57;
            ((void (*)(char *, uint64_t))v72[1].isa)(v5, v3);
            [a1 moveObjectsAtIndexes:v58 toIndex:v39];

            if (qword_100906D88 == -1)
            {
LABEL_51:
              uint64_t v59 = type metadata accessor for Logger();
              sub_10008E2DC(v59, (uint64_t)qword_1009086B0);
              id v60 = v36;
              uint64_t v61 = Logger.logObject.getter();
              os_log_type_t v62 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v61, v62))
              {
                uint64_t v63 = swift_slowAlloc();
                os_log_type_t v64 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v63 = 138412802;
                uint64_t v70 = (uint64_t (*)(uint64_t, uint64_t, unsigned char *))isEscapingClosureAtFileLocation;
                aBlock[0]  = v60;
                os_log_t v72 = v61;
                id v65 = v60;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *os_log_type_t v64 = v40;

                *(_WORD *)(v63 + 12)  = 2048;
                aBlock[0]  = v42;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *(_WORD *)(v63 + 22)  = 2048;
                aBlock[0]  = v39;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_t v66 = v72;
                _os_log_impl((void *)&_mh_execute_header, v72, v62, "[implSort] pre-sort: moved object {objectID: %@, from: %ld, to: %ld}", (uint8_t *)v63, 0x20u);
                sub_100094134((uint64_t *)&unk_10090A040);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_bridgeObjectRelease();

                uint64_t v55 = (uint64_t)v70;
                goto LABEL_49;
              }

              swift_bridgeObjectRelease();
LABEL_44:
              sub_100096314(isEscapingClosureAtFileLocation);
              return;
            }
LABEL_56:
            swift_once();
            goto LABEL_51;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          id v49 = v71;
        }
      }
      goto LABEL_44;
    }
    __break(1u);
    goto LABEL_55;
  }
  os_log_type_t v23 = &qword_100908190;
  uint64_t v24 = (char *)aBlock;
LABEL_12:
  sub_1000966BC((uint64_t)v24, v23);
}

uint64_t sub_10009AC38()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009AC70(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_1000990F0(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10009AC78()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009AC88()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10009ACB4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000963CC(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t StartMigrationRequest.source.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1, a1, &qword_1009086D0);
}

uint64_t StartMigrationRequest.source.setter(uint64_t a1)
{
  return sub_1000B1CB4(a1, v1, &qword_1009086D0);
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.timeElapsed.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.archivePath.getter()
{
  uint64_t v1 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v0, (uint64_t)v3, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(v3, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v3, &qword_1009086D0);
    return 0;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_10009B440((uint64_t)v3, type metadata accessor for StartMigrationRequest.OneOf_Source);
    return 0;
  }
  return *(void *)v3;
}

uint64_t type metadata accessor for StartMigrationRequest.OneOf_Source(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908AC8);
}

uint64_t StartMigrationRequest.archivePath.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009B4DC(a1, a2);
}

void (*StartMigrationRequest.archivePath.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  v4[2]  = v2;
  uint64_t v5 = sub_100094134(&qword_1009086D0);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3]  = v6;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  void v4[4] = started;
  uint64_t v8 = *(void *)(started - 8);
  void v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086D0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v9 = *v6;
      unint64_t v10 = v6[1];
      goto LABEL_7;
    }
    sub_10009B440((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
LABEL_7:
  void *v4 = v9;
  v4[1]  = v10;
  return sub_10009B018;
}

void sub_10009B018(uint64_t **a1, char a2)
{
}

uint64_t StartMigrationRequest.credential.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(v6, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086D0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_1000AEA7C((uint64_t)v6, a1, type metadata accessor for StartMigrationRequest.Credential);
    }
    sub_10009B440((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
  }
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0xE000000000000000;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0xE000000000000000;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;
  *(void *)(a1 + 56)  = 0xE000000000000000;
  *(_DWORD *)(a1 + 64)  = 0;
  type metadata accessor for StartMigrationRequest.Credential(0);
  return UnknownStorage.init()();
}

uint64_t StartMigrationRequest.Credential.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0xE000000000000000;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0xE000000000000000;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;
  *(void *)(a1 + 56)  = 0xE000000000000000;
  *(_DWORD *)(a1 + 64)  = 0;
  type metadata accessor for StartMigrationRequest.Credential(0);
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for StartMigrationRequest.Credential(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908B58);
}

uint64_t StartMigrationRequest.credential.setter(uint64_t a1)
{
  return sub_10009FE4C(a1, &qword_1009086D0, type metadata accessor for StartMigrationRequest.Credential, type metadata accessor for StartMigrationRequest.OneOf_Source);
}

void (*StartMigrationRequest.credential.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  void *v4 = v1;
  uint64_t v5 = sub_100094134(&qword_1009086D0);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1]  = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for StartMigrationRequest.Credential(0) - 8) + 64);
  v4[2]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3]  = v8;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  void v4[4] = started;
  uint64_t v10 = *(void *)(started - 8);
  void v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086D0);
LABEL_6:
    *uint64_t v8 = 0;
    v8[1]  = 0xE000000000000000;
    v8[2]  = 0;
    v8[3]  = 0xE000000000000000;
    void v8[4] = 0;
    void v8[5] = 0xE000000000000000;
    v8[6]  = 0;
    v8[7]  = 0xE000000000000000;
    *((_DWORD *)v8 + 16)  = 0;
    UnknownStorage.init()();
    return sub_10009B408;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_6;
  }
  sub_1000AEA7C((uint64_t)v6, (uint64_t)v8, type metadata accessor for StartMigrationRequest.Credential);
  return sub_10009B408;
}

void sub_10009B408(uint64_t **a1, char a2)
{
}

uint64_t sub_10009B440(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t StartMigrationRequest.embeddedTestData.getter()
{
  return sub_10009CF88(&qword_1009086D0, type metadata accessor for StartMigrationRequest.OneOf_Source, type metadata accessor for StartMigrationRequest.OneOf_Source);
}

uint64_t StartMigrationRequest.embeddedTestData.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009B4DC(a1, a2);
}

uint64_t sub_10009B4DC(uint64_t a1, uint64_t a2)
{
  sub_1000966BC((uint64_t)v2, &qword_1009086D0);
  void *v2 = a1;
  v2[1]  = a2;
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(started - 8) + 56);

  return v6(v2, 0, 1, started);
}

void (*StartMigrationRequest.embeddedTestData.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  v4[2]  = v2;
  uint64_t v5 = sub_100094134(&qword_1009086D0);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3]  = v6;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  void v4[4] = started;
  uint64_t v8 = *(void *)(started - 8);
  void v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086D0);
LABEL_6:
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_6;
  }
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
LABEL_7:
  void *v4 = v9;
  v4[1]  = v10;
  return sub_10009B6E0;
}

void sub_10009B6E0(uint64_t **a1, char a2)
{
}

void sub_10009B6E8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (void *)(*a1)[2];
  size_t v7 = (void *)(*a1)[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)v8, &qword_1009086D0);
    *uint64_t v8 = v4;
    v8[1]  = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000966BC((*a1)[2], &qword_1009086D0);
    *uint64_t v8 = v4;
    v8[1]  = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  free(v7);

  free(v2);
}

uint64_t StartMigrationRequest.disableCache.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20));
}

uint64_t type metadata accessor for StartMigrationRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100908A10);
}

uint64_t StartMigrationRequest.disableCache.setter(char a1)
{
  uint64_t result = type metadata accessor for StartMigrationRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 20))  = a1;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.disableCache.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C6B8(type metadata accessor for StartMigrationRequest, a1);
}

uint64_t StartMigrationRequest.unknownFields.setter(uint64_t a1)
{
  return sub_10009C750(a1, type metadata accessor for StartMigrationRequest);
}

Swift::Void (__swiftcall *StartMigrationRequest.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.baseURL.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartMigrationRequest.Credential.baseURL.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16)  = a1;
  *(void *)(v2 + 24)  = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.remindersMigrated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.hostname.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartMigrationRequest.Credential.hostname.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32)  = a1;
  *(void *)(v2 + 40)  = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.hostname.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.mmeAuthToken.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartMigrationRequest.Credential.mmeAuthToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x260], 8) = a1;
  *(void *)(v2 + 56)  = a2;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.mmeAuthToken.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.partition.getter()
{
  return *(unsigned int *)(v0 + 64);
}

uint64_t StartMigrationRequest.Credential.partition.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 64)  = result;
  return result;
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.partition.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.Credential.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009F130(type metadata accessor for StartMigrationRequest.Credential, a1);
}

uint64_t StartMigrationRequest.Credential.unknownFields.setter(uint64_t a1)
{
  return sub_10009F1C8(a1, type metadata accessor for StartMigrationRequest.Credential);
}

Swift::Void (__swiftcall *StartMigrationRequest.Credential.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationRequest.init()@<X0>(uint64_t a1@<X8>)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(a1, 1, 1, started);
  *(unsigned char *)(a1 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20))  = 0;
  return UnknownStorage.init()();
}

uint64_t StartMigrationResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009DB38(type metadata accessor for StartMigrationResponse, &qword_1009086D8, a1);
}

uint64_t StartMigrationResponse.result.setter(uint64_t a1)
{
  return sub_10009DBA8(a1, type metadata accessor for StartMigrationResponse, &qword_1009086D8);
}

Swift::Void (__swiftcall *StartMigrationResponse.result.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.success.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  started  = type metadata accessor for StartMigrationResponse(0);
  sub_1000BF710(v1 + *(int *)(started + 20), (uint64_t)v5, &qword_1009086D8);
  uint64_t v7 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086D8);
LABEL_5:
    *(void *)a1  = 0;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(_DWORD *)(a1 + 12)  = 0;
    *(_DWORD *)(a1 + 16)  = 0;
    type metadata accessor for StartMigrationResponse.Details(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_5;
  }
  return sub_1000AEA7C((uint64_t)v5, a1, type metadata accessor for StartMigrationResponse.Details);
}

uint64_t StartMigrationResponse.Details.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10009DDB8((void (*)(void))type metadata accessor for StartMigrationResponse.Details, a1);
}

uint64_t StartMigrationResponse.success.setter(uint64_t a1)
{
  return sub_10009C1B0(a1, type metadata accessor for StartMigrationResponse.Details);
}

void (*StartMigrationResponse.success.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1]  = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for StartMigrationResponse.Details(0) - 8) + 64);
  v3[2]  = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3]  = v7;
  uint64_t v8 = *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  *((_DWORD *)v3 + 12)  = v8;
  sub_1000BF710(v1 + v8, (uint64_t)v5, &qword_1009086D8);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  void v3[4] = started;
  uint64_t v10 = *(void *)(started - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086D8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C((uint64_t)v5, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Details);
      return sub_10009BFE0;
    }
    sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
  }
  *(void *)uint64_t v7 = 0;
  v7[8]  = 0;
  *((_DWORD *)v7 + 3)  = 0;
  *((_DWORD *)v7 + 4)  = 0;
  UnknownStorage.init()();
  return sub_10009BFE0;
}

void sub_10009BFE0(uint64_t a1, char a2)
{
}

uint64_t StartMigrationResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  started  = type metadata accessor for StartMigrationResponse(0);
  sub_1000BF710(v1 + *(int *)(started + 20), (uint64_t)v5, &qword_1009086D8);
  uint64_t v7 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086D8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_1000AEA7C((uint64_t)v5, a1, type metadata accessor for StartMigrationResponse.Error);
    }
    sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
  }
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16)  = 0;
  type metadata accessor for StartMigrationResponse.Error(0);
  return UnknownStorage.init()();
}

uint64_t StartMigrationResponse.Error.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E26C((void (*)(void))type metadata accessor for StartMigrationResponse.Error, a1);
}

uint64_t StartMigrationResponse.error.setter(uint64_t a1)
{
  return sub_10009C1B0(a1, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_10009C1B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_1000966BC(v5, &qword_1009086D8);
  sub_1000AEA7C(a1, v5, a2);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(started - 8) + 56);

  return v7(v5, 0, 1, started);
}

void (*StartMigrationResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086D8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1]  = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for StartMigrationResponse.Error(0) - 8) + 64);
  v3[2]  = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3]  = v7;
  uint64_t v8 = *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  *((_DWORD *)v3 + 12)  = v8;
  sub_1000BF710(v1 + v8, (uint64_t)v5, &qword_1009086D8);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  void v3[4] = started;
  uint64_t v10 = *(void *)(started - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086D8);
LABEL_6:
    void *v7 = 0;
    v7[1]  = 0xE000000000000000;
    *((_DWORD *)v7 + 4)  = 0;
    UnknownStorage.init()();
    return sub_10009C44C;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000AEA7C((uint64_t)v5, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Error);
  return sub_10009C44C;
}

void sub_10009C44C(uint64_t a1, char a2)
{
}

uint64_t StartMigrationResponse.log.getter()
{
  return sub_10009ECBC(type metadata accessor for StartMigrationResponse);
}

uint64_t StartMigrationResponse.log.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009ED1C(a1, a2, type metadata accessor for StartMigrationResponse);
}

Swift::Void (__swiftcall *StartMigrationResponse.log.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009EDC8(type metadata accessor for StartMigrationResponse, a1);
}

uint64_t StartMigrationResponse.unknownFields.setter(uint64_t a1)
{
  return sub_10009EE60(a1, type metadata accessor for StartMigrationResponse);
}

Swift::Void (__swiftcall *StartMigrationResponse.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static StartMigrationResponse.Details.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B05D4(a1, a2, (uint64_t (*)(void, double))type metadata accessor for StartMigrationResponse.Details) & 1;
}

uint64_t static StartMigrationResponse.Error.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B03F0(a1, a2, type metadata accessor for StartMigrationResponse.Error) & 1;
}

double StartMigrationResponse.Details.timeElapsed.getter()
{
  return *(double *)v0;
}

void StartMigrationResponse.Details.timeElapsed.setter(double a1)
{
  double *v1 = a1;
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.isObserver.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.listsMigrated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009D5A8(type metadata accessor for StartMigrationResponse.Details, a1);
}

uint64_t StartMigrationResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_10009D640(a1, type metadata accessor for StartMigrationResponse.Details);
}

Swift::Void (__swiftcall *StartMigrationResponse.Details.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C6B8(type metadata accessor for StartMigrationResponse.Error, a1);
}

uint64_t sub_10009C6B8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t StartMigrationResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_10009C750(a1, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_10009C750(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

Swift::Void (__swiftcall *StartMigrationResponse.Error.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t StartMigrationResponse.init()@<X0>(void *a1@<X8>)
{
  *a1  = 0;
  a1[1]  = 0xE000000000000000;
  started  = type metadata accessor for StartMigrationResponse(0);
  uint64_t v3 = (char *)a1 + *(int *)(started + 20);
  uint64_t v4 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (void *)((char *)a1 + *(int *)(started + 24));
  *uint64_t v5 = 0;
  v5[1]  = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t MigrateRequest.source.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1, a1, &qword_1009086E0);
}

uint64_t MigrateRequest.source.setter(uint64_t a1)
{
  return sub_1000B1CB4(a1, v1, &qword_1009086E0);
}

uint64_t MigrateRequest.user.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v4 - 8);
  size_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086E0);
  uint64_t v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086E0);
LABEL_5:
    *(void *)a1  = 0;
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
    type metadata accessor for MigrateRequest.User(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_5;
  }
  return sub_1000AEA7C((uint64_t)v6, a1, type metadata accessor for MigrateRequest.User);
}

uint64_t MigrateRequest.User.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  type metadata accessor for MigrateRequest.User(0);
  return UnknownStorage.init()();
}

uint64_t MigrateRequest.user.setter(uint64_t a1)
{
  return sub_10009FE4C(a1, &qword_1009086E0, type metadata accessor for MigrateRequest.User, type metadata accessor for MigrateRequest.OneOf_Source);
}

void (*MigrateRequest.user.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  void *v4 = v1;
  uint64_t v5 = sub_100094134(&qword_1009086E0);
  size_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1]  = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for MigrateRequest.User(0) - 8) + 64);
  v4[2]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3]  = v8;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086E0);
  uint64_t v9 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  void v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086E0);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1000AEA7C((uint64_t)v6, (uint64_t)v8, type metadata accessor for MigrateRequest.User);
      return sub_10009CC8C;
    }
    sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
  }
  *(void *)uint64_t v8 = 0;
  v8[2]  = 0;
  UnknownStorage.init()();
  return sub_10009CC8C;
}

void sub_10009CC8C(uint64_t **a1, char a2)
{
}

uint64_t MigrateRequest.archivePath.getter()
{
  uint64_t v1 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v0, (uint64_t)v3, &qword_1009086E0);
  uint64_t v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_1000966BC((uint64_t)v3, &qword_1009086E0);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return *(void *)v3;
    }
    sub_10009B440((uint64_t)v3, type metadata accessor for MigrateRequest.OneOf_Source);
  }
  return 0;
}

uint64_t MigrateRequest.archivePath.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009D0AC(a1, a2);
}

void (*MigrateRequest.archivePath.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  v4[2]  = v2;
  uint64_t v5 = sub_100094134(&qword_1009086E0);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3]  = v6;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086E0);
  uint64_t v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  void v4[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086E0);
LABEL_6:
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_6;
  }
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
LABEL_7:
  void *v4 = v9;
  v4[1]  = v10;
  return sub_10009CF4C;
}

void sub_10009CF4C(uint64_t **a1, char a2)
{
}

uint64_t MigrateRequest.embeddedTestData.getter()
{
  return sub_10009CF88(&qword_1009086E0, type metadata accessor for MigrateRequest.OneOf_Source, type metadata accessor for MigrateRequest.OneOf_Source);
}

uint64_t sub_10009CF88(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v7 = v3;
  uint64_t v8 = sub_100094134(a1);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v7, (uint64_t)v10, a1);
  uint64_t v11 = a2(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11) == 1)
  {
    sub_1000966BC((uint64_t)v10, a1);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return *(void *)v10;
    }
    sub_10009B440((uint64_t)v10, a3);
  }
  return 0;
}

uint64_t MigrateRequest.embeddedTestData.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009D0AC(a1, a2);
}

uint64_t sub_10009D0AC(uint64_t a1, uint64_t a2)
{
  sub_1000966BC((uint64_t)v2, &qword_1009086E0);
  void *v2 = a1;
  v2[1]  = a2;
  uint64_t v5 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v2, 0, 1, v5);
}

void (*MigrateRequest.embeddedTestData.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  v4[2]  = v2;
  uint64_t v5 = sub_100094134(&qword_1009086E0);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3]  = v6;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086E0);
  uint64_t v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  void v4[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  void v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086E0);
LABEL_6:
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_6;
  }
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
LABEL_7:
  void *v4 = v9;
  v4[1]  = v10;
  return sub_10009D2B0;
}

void sub_10009D2B0(uint64_t **a1, char a2)
{
}

void sub_10009D2B8(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (void *)(*a1)[2];
  uint64_t v7 = (void *)(*a1)[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000966BC((uint64_t)v8, &qword_1009086E0);
    *uint64_t v8 = v4;
    v8[1]  = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000966BC((*a1)[2], &qword_1009086E0);
    *uint64_t v8 = v4;
    v8[1]  = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  free(v7);

  free(v2);
}

uint64_t MigrateRequest.options.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 20));
}

uint64_t MigrateRequest.options.setter(int a1)
{
  uint64_t result = type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(v1 + *(int *)(result + 20))  = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.options.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.userInitiated.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 24));
}

uint64_t MigrateRequest.userInitiated.setter(char a1)
{
  uint64_t result = type metadata accessor for MigrateRequest(0);
  *(unsigned char *)(v1 + *(int *)(result + 24))  = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.userInitiated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.simulatedError.getter()
{
  return *(unsigned int *)(v0 + *(int *)(type metadata accessor for MigrateRequest(0) + 28));
}

uint64_t MigrateRequest.simulatedError.setter(int a1)
{
  uint64_t result = type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(v1 + *(int *)(result + 28))  = a1;
  return result;
}

Swift::Void (__swiftcall *MigrateRequest.simulatedError.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009D5A8(type metadata accessor for MigrateRequest, a1);
}

uint64_t sub_10009D5A8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t MigrateRequest.unknownFields.setter(uint64_t a1)
{
  return sub_10009D640(a1, type metadata accessor for MigrateRequest);
}

uint64_t sub_10009D640(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateRequest.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateRequest.Option.init()()
{
  return 0;
}

uint64_t MigrateRequest.Option.init(rawValue:)(uint64_t a1)
{
  return sub_1000B1B44(a1);
}

uint64_t MigrateRequest.Option.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_10077A3A0[result];
  }
  return result;
}

void sub_10009D750(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 1;
}

uint64_t sub_10009D760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000B1B44(a1);
  *(void *)a2  = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(unsigned char *)(a2 + 9)  = v5 & 1;
  return result;
}

uint64_t sub_10009D794()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_10077A3A0[result];
  }
  return result;
}

uint64_t sub_10009D7B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000B1B44(*a1);
  *(void *)a2  = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(unsigned char *)(a2 + 9)  = v5 & 1;
  return result;
}

void sub_10009D7EC(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_10077A3A0[v2];
  }
  *a1  = v2;
}

uint64_t sub_10009D814(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000BF6BC();

  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_10009D864(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v2 = qword_10077A3A0[v2];
  }
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v3 = qword_10077A3A0[v3];
  }
  return v2 == v3;
}

uint64_t MigrateRequest.User.dsID.getter()
{
  return *(void *)v0;
}

uint64_t MigrateRequest.User.dsID.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t MigrateResponse.NextStep.invocationCount.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t MigrateResponse.NextStep.invocationCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + _Block_object_dispose(&STACK[0x260], 8) = result;
  return result;
}

uint64_t MigrateRequest.User.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C6B8(type metadata accessor for MigrateRequest.User, a1);
}

uint64_t MigrateRequest.User.unknownFields.setter(uint64_t a1)
{
  return sub_10009C750(a1, type metadata accessor for MigrateRequest.User);
}

Swift::Void (__swiftcall *MigrateRequest.User.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateRequest.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = (int *)type metadata accessor for MigrateRequest(0);
  *(_DWORD *)(a1 + v3[5])  = 0;
  *(unsigned char *)(a1 + v3[6])  = 0;
  *(_DWORD *)(a1 + v3[7])  = 0;
  return UnknownStorage.init()();
}

void sub_10009D9C0()
{
  static MigrateRequest.Option.allCases  = (uint64_t)&off_1008B1188;
}

uint64_t *MigrateRequest.Option.allCases.unsafeMutableAddressor()
{
  if (qword_100906D90 != -1) {
    swift_once();
  }
  return &static MigrateRequest.Option.allCases;
}

uint64_t static MigrateRequest.Option.allCases.getter()
{
  return sub_10009F698(&qword_100906D90);
}

uint64_t static MigrateRequest.Option.allCases.setter(uint64_t a1)
{
  return sub_10009F718(a1, &qword_100906D90, &static MigrateRequest.Option.allCases);
}

uint64_t (*static MigrateRequest.Option.allCases.modify())()
{
  if (qword_100906D90 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_10009DAF4@<X0>(void *a1@<X8>)
{
  return sub_10009F82C(&qword_100906D90, &static MigrateRequest.Option.allCases, a1);
}

uint64_t MigrateResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009DB38(type metadata accessor for MigrateResponse, &qword_1009086E8, a1);
}

uint64_t sub_10009DB38@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1(0);
  return sub_1000BF710(v3 + *(int *)(v6 + 20), a3, a2);
}

uint64_t MigrateResponse.result.setter(uint64_t a1)
{
  return sub_10009DBA8(a1, type metadata accessor for MigrateResponse, &qword_1009086E8);
}

uint64_t sub_10009DBA8(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v6 = a2(0);
  return sub_1000B1CB4(a1, v3 + *(int *)(v6 + 20), a3);
}

Swift::Void (__swiftcall *MigrateResponse.result.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.success.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1009086E8);
  uint64_t v7 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086E8);
LABEL_5:
    *(void *)a1  = 0;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(_DWORD *)(a1 + 12)  = 0;
    *(_DWORD *)(a1 + 16)  = 0;
    type metadata accessor for MigrateResponse.Details(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_5;
  }
  return sub_1000AEA7C((uint64_t)v5, a1, type metadata accessor for MigrateResponse.Details);
}

uint64_t MigrateResponse.Details.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10009DDB8((void (*)(void))type metadata accessor for MigrateResponse.Details, a1);
}

uint64_t sub_10009DDB8@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2  = 0;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(_DWORD *)(a2 + 12)  = 0;
  *(_DWORD *)(a2 + 16)  = 0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.success.setter(uint64_t a1)
{
  return sub_10009DE1C(a1, type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_10009DE1C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_1000966BC(v5, &qword_1009086E8);
  sub_1000AEA7C(a1, v5, a2);
  uint64_t v6 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 0, 1, v6);
}

void (*MigrateResponse.success.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1]  = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for MigrateResponse.Details(0) - 8) + 64);
  v3[2]  = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3]  = v7;
  uint64_t v8 = *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  *((_DWORD *)v3 + 12)  = v8;
  sub_1000BF710(v1 + v8, (uint64_t)v5, &qword_1009086E8);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  void v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086E8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C((uint64_t)v5, (uint64_t)v7, type metadata accessor for MigrateResponse.Details);
      return sub_10009E0B8;
    }
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
  }
  *(void *)uint64_t v7 = 0;
  v7[8]  = 0;
  *((_DWORD *)v7 + 3)  = 0;
  *((_DWORD *)v7 + 4)  = 0;
  UnknownStorage.init()();
  return sub_10009E0B8;
}

void sub_10009E0B8(uint64_t a1, char a2)
{
}

uint64_t MigrateResponse.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1009086E8);
  uint64_t v7 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086E8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_1000AEA7C((uint64_t)v5, a1, type metadata accessor for MigrateResponse.Error);
    }
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
  }
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16)  = 0;
  type metadata accessor for MigrateResponse.Error(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.Error.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_10009E26C((void (*)(void))type metadata accessor for MigrateResponse.Error, a1);
}

uint64_t sub_10009E26C@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2  = 0;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16)  = 0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.error.setter(uint64_t a1)
{
  return sub_10009DE1C(a1, type metadata accessor for MigrateResponse.Error);
}

void (*MigrateResponse.error.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086E8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1]  = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for MigrateResponse.Error(0) - 8) + 64);
  v3[2]  = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3]  = v7;
  uint64_t v8 = *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  *((_DWORD *)v3 + 12)  = v8;
  sub_1000BF710(v1 + v8, (uint64_t)v5, &qword_1009086E8);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  void v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v5, &qword_1009086E8);
LABEL_6:
    void *v7 = 0;
    v7[1]  = 0xE000000000000000;
    *((_DWORD *)v7 + 4)  = 0;
    UnknownStorage.init()();
    return sub_10009E4AC;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000AEA7C((uint64_t)v5, (uint64_t)v7, type metadata accessor for MigrateResponse.Error);
  return sub_10009E4AC;
}

void sub_10009E4AC(uint64_t a1, char a2)
{
}

void sub_10009E4E4(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 32);
  uint64_t v10 = *(void *)(*(void *)a1 + 40);
  uint64_t v11 = *(int *)(*(void *)a1 + 48);
  id v12 = *(void **)(*(void *)a1 + 16);
  uint64_t v13 = *(void **)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v11;
  if (a2)
  {
    sub_1000AEAE4(*(void *)(*(void *)a1 + 24), (uint64_t)v12, a4);
    sub_1000966BC(v15, a3);
    sub_1000AEA7C((uint64_t)v12, v15, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    sub_10009B440((uint64_t)v13, a6);
  }
  else
  {
    sub_1000966BC(**(void **)a1 + v11, a3);
    sub_1000AEA7C((uint64_t)v13, v15, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  free(v13);
  free(v12);
  free(v14);

  free(v8);
}

uint64_t MigrateResponse.nextStep.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100094134(&qword_1009086F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1009086F0);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Step - 8) + 48))(v5, 1, Step) != 1) {
    return sub_1000AEA7C((uint64_t)v5, a1, type metadata accessor for MigrateResponse.NextStep);
  }
  *(_WORD *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(_DWORD *)(a1 + 4)  = 0;
  UnknownStorage.init()();
  return sub_1000966BC((uint64_t)v5, &qword_1009086F0);
}

uint64_t MigrateResponse.NextStep.init()@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(_DWORD *)(a1 + 4)  = 0;
  type metadata accessor for MigrateResponse.NextStep(0);
  return UnknownStorage.init()();
}

uint64_t MigrateResponse.nextStep.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  sub_1000966BC(v3, &qword_1009086F0);
  sub_1000AEA7C(a1, v3, type metadata accessor for MigrateResponse.NextStep);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(Step - 8) + 56);

  return v5(v3, 0, 1, Step);
}

void (*MigrateResponse.nextStep.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1  = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086F0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1]  = v5;
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  v3[2]  = Step;
  uint64_t v7 = *(void *)(Step - 8);
  uint64_t v8 = v7;
  v3[3]  = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  void v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  *((_DWORD *)v3 + 12)  = v11;
  sub_1000BF710(v1 + v11, (uint64_t)v5, &qword_1009086F0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, Step) == 1)
  {
    *(_WORD *)uint64_t v10 = 0;
    v10[1]  = 0;
    *((_DWORD *)v10 + 1)  = 0;
    UnknownStorage.init()();
    sub_1000966BC((uint64_t)v5, &qword_1009086F0);
  }
  else
  {
    sub_1000AEA7C((uint64_t)v5, (uint64_t)v10, type metadata accessor for MigrateResponse.NextStep);
  }
  return sub_10009E9E8;
}

void sub_10009E9E8(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    sub_1000AEAE4(*(void *)(*(void *)a1 + 40), (uint64_t)v4, type metadata accessor for MigrateResponse.NextStep);
    sub_1000966BC(v9, &qword_1009086F0);
    sub_1000AEA7C((uint64_t)v4, v9, type metadata accessor for MigrateResponse.NextStep);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.NextStep);
  }
  else
  {
    sub_1000966BC(**(void **)a1 + v3, &qword_1009086F0);
    sub_1000AEA7C((uint64_t)v5, v9, type metadata accessor for MigrateResponse.NextStep);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);

  free(v2);
}

BOOL MigrateResponse.hasNextStep.getter()
{
  uint64_t v1 = sub_100094134(&qword_1009086F0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_1009086F0);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(Step - 8) + 48))(v3, 1, Step) != 1;
  sub_1000966BC((uint64_t)v3, &qword_1009086F0);
  return v6;
}

Swift::Void __swiftcall MigrateResponse.clearNextStep()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for MigrateResponse(0) + 32);
  sub_1000966BC(v1, &qword_1009086F0);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Step - 8) + 56);

  v3(v1, 1, 1, Step);
}

uint64_t MigrateResponse.logs.getter()
{
  return sub_10009ECBC(type metadata accessor for MigrateResponse);
}

uint64_t sub_10009ECBC(uint64_t (*a1)(void))
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1(0) + 24));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t MigrateResponse.logs.setter(uint64_t a1, uint64_t a2)
{
  return sub_10009ED1C(a1, a2, type metadata accessor for MigrateResponse);
}

uint64_t sub_10009ED1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  BOOL v6 = (void *)(v3 + *(int *)(a3(0) + 24));
  uint64_t result = swift_bridgeObjectRelease();
  void *v6 = a1;
  v6[1]  = a2;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.logs.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009EDC8(type metadata accessor for MigrateResponse, a1);
}

uint64_t sub_10009EDC8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t MigrateResponse.unknownFields.setter(uint64_t a1)
{
  return sub_10009EE60(a1, type metadata accessor for MigrateResponse);
}

uint64_t sub_10009EE60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateResponse.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static MigrateResponse.Details.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B05D4(a1, a2, (uint64_t (*)(void, double))type metadata accessor for MigrateResponse.Details) & 1;
}

uint64_t static MigrateResponse.Error.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_1000B03F0(a1, a2, type metadata accessor for MigrateResponse.Error) & 1;
}

uint64_t MigrateResponse.Details.isObserver.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t MigrateResponse.Details.isObserver.setter(uint64_t result)
{
  *(unsigned char *)(v1 + _Block_object_dispose(&STACK[0x260], 8) = result;
  return result;
}

uint64_t MigrateResponse.Details.listsMigrated.getter()
{
  return *(unsigned int *)(v0 + 12);
}

uint64_t MigrateResponse.Details.listsMigrated.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 12)  = result;
  return result;
}

uint64_t MigrateResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009D5A8(type metadata accessor for MigrateResponse.Details, a1);
}

uint64_t MigrateResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_10009D640(a1, type metadata accessor for MigrateResponse.Details);
}

Swift::Void (__swiftcall *MigrateResponse.Details.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.Error.retryCount.getter()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t MigrateResponse.Error.retryCount.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 16)  = result;
  return result;
}

uint64_t MigrateResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C6B8(type metadata accessor for MigrateResponse.Error, a1);
}

uint64_t MigrateResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_10009C750(a1, type metadata accessor for MigrateResponse.Error);
}

Swift::Void (__swiftcall *MigrateResponse.Error.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.defined.getter()
{
  return *v0;
}

uint64_t MigrateResponse.NextStep.defined.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t MigrateResponse.NextStep.isTerminated.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t MigrateResponse.NextStep.isTerminated.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1)  = result;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.isTerminated.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.nextInvocationInSeconds.getter()
{
  return *(unsigned int *)(v0 + 4);
}

uint64_t MigrateResponse.NextStep.nextInvocationInSeconds.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4)  = result;
  return result;
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.nextInvocationInSeconds.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.NextStep.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009F130(type metadata accessor for MigrateResponse.NextStep, a1);
}

uint64_t sub_10009F130@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t MigrateResponse.NextStep.unknownFields.setter(uint64_t a1)
{
  return sub_10009F1C8(a1, type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_10009F1C8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

Swift::Void (__swiftcall *MigrateResponse.NextStep.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t MigrateResponse.init()@<X0>(void *a1@<X8>)
{
  *a1  = 0;
  a1[1]  = 0xE000000000000000;
  uint64_t v2 = (int *)type metadata accessor for MigrateResponse(0);
  uint64_t v3 = (char *)a1 + v2[5];
  uint64_t v4 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (void *)((char *)a1 + v2[6]);
  *uint64_t v5 = 0;
  v5[1]  = 0xE000000000000000;
  UnknownStorage.init()();
  BOOL v6 = (char *)a1 + v2[8];
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Step - 8) + 56);

  return v8(v6, 1, 1, Step);
}

uint64_t UnmigrateRequest.options.getter()
{
  return *v0;
}

uint64_t UnmigrateRequest.options.setter(uint64_t result)
{
  _DWORD *v1 = result;
  return result;
}

uint64_t UnmigrateRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for UnmigrateRequest, a1);
}

uint64_t UnmigrateRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for UnmigrateRequest);
}

Swift::Void (__swiftcall *UnmigrateRequest.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateRequest.Option.rawValue.getter(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  return result;
}

uint64_t sub_10009F424@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2  = result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = result == 0;
  *(unsigned char *)(a2 + 9)  = 0;
  return result;
}

uint64_t sub_10009F43C()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_10009F454@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2  = *result;
  char v3 = v2;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x260], 8) = v3;
  *(unsigned char *)(a2 + 9)  = 0;
  return result;
}

void sub_10009F470(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    *a1  = 0;
  }
  else {
    *a1  = *(void *)v1;
  }
}

Swift::Int sub_10009F48C()
{
  return Hasher._finalize()();
}

uint64_t sub_10009F4F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000BF668();

  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10009F544()
{
  return Hasher._finalize()();
}

BOOL sub_10009F5AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v2 = 0;
  }
  return v3 == v2;
}

uint64_t UnmigrateRequest.init()@<X0>(_DWORD *a1@<X8>)
{
  *a1  = 0;
  type metadata accessor for UnmigrateRequest(0);
  return UnknownStorage.init()();
}

void sub_10009F614()
{
  static UnmigrateRequest.Option.allCases  = (uint64_t)&off_1008B1208;
}

uint64_t *UnmigrateRequest.Option.allCases.unsafeMutableAddressor()
{
  if (qword_100906D98 != -1) {
    swift_once();
  }
  return &static UnmigrateRequest.Option.allCases;
}

uint64_t static UnmigrateRequest.Option.allCases.getter()
{
  return sub_10009F698(&qword_100906D98);
}

uint64_t sub_10009F698(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static UnmigrateRequest.Option.allCases.setter(uint64_t a1)
{
  return sub_10009F718(a1, &qword_100906D98, &static UnmigrateRequest.Option.allCases);
}

uint64_t sub_10009F718(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3  = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static UnmigrateRequest.Option.allCases.modify())()
{
  if (qword_100906D98 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_10009F808@<X0>(void *a1@<X8>)
{
  return sub_10009F82C(&qword_100906D98, &static UnmigrateRequest.Option.allCases, a1);
}

uint64_t sub_10009F82C@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3  = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t UnmigrateResponse.result.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BF710(v1, a1, &qword_1009086F8);
}

uint64_t UnmigrateResponse.result.setter(uint64_t a1)
{
  return sub_1000B1CB4(a1, v1, &qword_1009086F8);
}

uint64_t UnmigrateResponse.success.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v4 - 8);
  BOOL v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086F8);
  uint64_t v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086F8);
LABEL_5:
    *a1  = 0;
    type metadata accessor for UnmigrateResponse.Details(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_5;
  }
  return sub_1000AEA7C((uint64_t)v6, (uint64_t)a1, type metadata accessor for UnmigrateResponse.Details);
}

uint64_t UnmigrateResponse.Details.init()@<X0>(void *a1@<X8>)
{
  *a1  = 0;
  type metadata accessor for UnmigrateResponse.Details(0);
  return UnknownStorage.init()();
}

uint64_t UnmigrateResponse.success.setter(uint64_t a1)
{
  return sub_10009FE4C(a1, &qword_1009086F8, type metadata accessor for UnmigrateResponse.Details, type metadata accessor for UnmigrateResponse.OneOf_Result);
}

void (*UnmigrateResponse.success.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  void *v4 = v1;
  uint64_t v5 = sub_100094134(&qword_1009086F8);
  BOOL v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1]  = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for UnmigrateResponse.Details(0) - 8) + 64);
  v4[2]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3]  = v8;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086F8);
  uint64_t v9 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  void v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086F8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C((uint64_t)v6, (uint64_t)v8, type metadata accessor for UnmigrateResponse.Details);
      return sub_10009FC6C;
    }
    sub_10009B440((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
  }
  *uint64_t v8 = 0;
  UnknownStorage.init()();
  return sub_10009FC6C;
}

void sub_10009FC6C(uint64_t **a1, char a2)
{
}

uint64_t UnmigrateResponse.error.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v4 - 8);
  BOOL v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086F8);
  uint64_t v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086F8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_1000AEA7C((uint64_t)v6, (uint64_t)a1, type metadata accessor for UnmigrateResponse.Error);
    }
    sub_10009B440((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
  }
  *a1  = 0;
  a1[1]  = 0xE000000000000000;
  type metadata accessor for UnmigrateResponse.Error(0);
  return UnknownStorage.init()();
}

uint64_t UnmigrateResponse.Error.init()@<X0>(void *a1@<X8>)
{
  return sub_1000A0BE0((void (*)(void))type metadata accessor for UnmigrateResponse.Error, a1);
}

uint64_t UnmigrateResponse.error.setter(uint64_t a1)
{
  return sub_10009FE4C(a1, &qword_1009086F8, type metadata accessor for UnmigrateResponse.Error, type metadata accessor for UnmigrateResponse.OneOf_Result);
}

uint64_t sub_10009FE4C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  sub_1000966BC(v4, a2);
  sub_1000AEA7C(a1, v4, a3);
  uint64_t v8 = a4(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(v4, 0, 1, v8);
}

void (*UnmigrateResponse.error.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1  = v4;
  void *v4 = v1;
  uint64_t v5 = sub_100094134(&qword_1009086F8);
  BOOL v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1]  = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for UnmigrateResponse.Error(0) - 8) + 64);
  v4[2]  = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3]  = v8;
  sub_1000BF710(v2, (uint64_t)v6, &qword_1009086F8);
  uint64_t v9 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  void v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v6, &qword_1009086F8);
LABEL_6:
    *uint64_t v8 = 0;
    v8[1]  = 0xE000000000000000;
    UnknownStorage.init()();
    return sub_1000A00D0;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v6, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_6;
  }
  sub_1000AEA7C((uint64_t)v6, (uint64_t)v8, type metadata accessor for UnmigrateResponse.Error);
  return sub_1000A00D0;
}

void sub_1000A00D0(uint64_t **a1, char a2)
{
}

void sub_1000A0108(uint64_t **a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v8 = *a1;
  uint64_t v9 = (*a1)[4];
  uint64_t v10 = (*a1)[5];
  uint64_t v11 = (void *)(*a1)[2];
  id v12 = (void *)(*a1)[3];
  uint64_t v14 = **a1;
  uint64_t v13 = (void *)(*a1)[1];
  if (a2)
  {
    sub_1000AEAE4((*a1)[3], (uint64_t)v11, a4);
    sub_1000966BC(v14, a3);
    sub_1000AEA7C((uint64_t)v11, v14, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
    sub_10009B440((uint64_t)v12, a6);
  }
  else
  {
    sub_1000966BC(**a1, a3);
    sub_1000AEA7C((uint64_t)v12, v14, a4);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  free(v12);
  free(v11);
  free(v13);

  free(v8);
}

uint64_t UnmigrateResponse.logs.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t UnmigrateResponse.logs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1]  = a2;
  return result;
}

Swift::Void (__swiftcall *UnmigrateResponse.logs.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10009C6B8(type metadata accessor for UnmigrateResponse, a1);
}

uint64_t UnmigrateResponse.unknownFields.setter(uint64_t a1)
{
  return sub_10009C750(a1, type metadata accessor for UnmigrateResponse);
}

Swift::Void (__swiftcall *UnmigrateResponse.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static UnmigrateResponse.Error.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000B1978(a1, a2, type metadata accessor for UnmigrateResponse.Error) & 1;
}

uint64_t UnmigrateResponse.Details.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for UnmigrateResponse.Details, a1);
}

uint64_t sub_1000A03EC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t UnmigrateResponse.Details.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000A0484(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

Swift::Void (__swiftcall *UnmigrateResponse.Details.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.Error.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for UnmigrateResponse.Error, a1);
}

uint64_t UnmigrateResponse.Error.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for UnmigrateResponse.Error);
}

Swift::Void (__swiftcall *UnmigrateResponse.Error.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t UnmigrateResponse.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = (void *)(a1 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
  void *v3 = 0;
  v3[1]  = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t EmptyRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t EmptyRequest.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UnknownStorage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t BasicResponse.result.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_1000B1D98(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
  return v1;
}

uint64_t BasicResponse.result.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_1000B1DB8(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
  *(void *)uint64_t v3 = a1;
  *(void *)(v3 + _Block_object_dispose(&STACK[0x260], 8) = a2;
  *(unsigned char *)(v3 + 16)  = a3;
  return result;
}

uint64_t BasicResponse.success.getter()
{
  if (v0[2]) {
    return 0;
  }
  uint64_t v1 = *v0;
  sub_1000B1DB0();
  return v1;
}

uint64_t BasicResponse.success.setter(uint64_t a1, uint64_t a2)
{
  return BasicResponse.result.setter(a1, a2, 0);
}

uint64_t (*BasicResponse.success.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2]  = v1;
  if (v1[2])
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  else
  {
    uint64_t v3 = *v1;
    unint64_t v4 = v1[1];
    sub_1000B1DB0();
  }
  *a1  = v3;
  a1[1]  = v4;
  return sub_1000A0868;
}

uint64_t sub_1000A0868(uint64_t *a1, char a2)
{
  return sub_1000A0958(a1, a2, 0);
}

uint64_t BasicResponse.error.getter()
{
  int v1 = *((unsigned __int8 *)v0 + 16);
  if (v1 == 255 || (v1 & 1) == 0) {
    return 0;
  }
  uint64_t v3 = *v0;
  sub_1000B1DB0();
  return v3;
}

uint64_t BasicResponse.error.setter(uint64_t a1, uint64_t a2)
{
  return BasicResponse.result.setter(a1, a2, 1);
}

uint64_t (*BasicResponse.error.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2]  = v1;
  int v3 = *((unsigned __int8 *)v1 + 16);
  if (v3 == 255 || (v3 & 1) == 0)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  else
  {
    uint64_t v5 = *v1;
    unint64_t v6 = v1[1];
    sub_1000B1DB0();
  }
  *a1  = v5;
  a1[1]  = v6;
  return sub_1000A0950;
}

uint64_t sub_1000A0950(uint64_t *a1, char a2)
{
  return sub_1000A0958(a1, a2, 1);
}

uint64_t sub_1000A0958(uint64_t *a1, char a2, char a3)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *a1;
  uint64_t v7 = *(void *)v5;
  uint64_t v8 = *(void *)(v5 + 8);
  unsigned __int8 v9 = *(unsigned char *)(v5 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000B1DB8(v7, v8, v9);
    *(void *)uint64_t v5 = v6;
    *(void *)(v5 + _Block_object_dispose(&STACK[0x260], 8) = v4;
    *(unsigned char *)(v5 + 16)  = a3;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = sub_1000B1DB8(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
    *(void *)uint64_t v5 = v6;
    *(void *)(v5 + _Block_object_dispose(&STACK[0x260], 8) = v4;
    *(unsigned char *)(v5 + 16)  = a3;
  }
  return result;
}

uint64_t BasicResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for BasicResponse, a1);
}

uint64_t BasicResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for BasicResponse);
}

Swift::Void (__swiftcall *BasicResponse.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t static BasicResponse.OneOf_Result.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  return sub_1000AD4EC(a1, a2, a3 & 1, a4, a5, a6 & 1);
}

uint64_t sub_1000A0A8C(uint64_t a1, uint64_t a2)
{
  return sub_1000AD4EC(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t BasicResponse.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(unsigned char *)(a1 + 16)  = -1;
  type metadata accessor for BasicResponse(0);
  return UnknownStorage.init()();
}

uint64_t PingRequest.message.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PingRequest.message.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1]  = a2;
  return result;
}

uint64_t PingRequest.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for PingRequest, a1);
}

uint64_t PingRequest.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for PingRequest);
}

Swift::Void (__swiftcall *PingRequest.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t PingRequest.init()@<X0>(void *a1@<X8>)
{
  return sub_1000A0BE0((void (*)(void))type metadata accessor for PingRequest, a1);
}

uint64_t sub_1000A0BE0@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2  = 0;
  a2[1]  = 0xE000000000000000;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t PingResponse.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A03EC(type metadata accessor for PingResponse, a1);
}

uint64_t PingResponse.unknownFields.setter(uint64_t a1)
{
  return sub_1000A0484(a1, type metadata accessor for PingResponse);
}

Swift::Void (__swiftcall *PingResponse.unknownFields.modify())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t PingResponse.init()@<X0>(void *a1@<X8>)
{
  return sub_1000A0BE0((void (*)(void))type metadata accessor for PingResponse, a1);
}

void *StartMigrationRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationRequest.protoMessageName;
}

unint64_t static StartMigrationRequest.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000A0CDC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static StartMigrationRequest._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static StartMigrationRequest._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778370;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "archivePath";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 11;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unsigned __int8 v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "credential";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 10;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  id v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)id v12 = "embeddedTestData";
  *((void *)v12 + 1)  = 16;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "disableCache";
  *((void *)v14 + 1)  = 12;
  v14[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t StartMigrationRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DA0, (uint64_t)static StartMigrationRequest._protobuf_nameMap);
}

uint64_t static StartMigrationRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DA0, (uint64_t)static StartMigrationRequest._protobuf_nameMap, a1);
}

uint64_t StartMigrationRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v11 = v4;
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        uint64_t v12 = a1;
        uint64_t v13 = (void *)v5;
        uint64_t v14 = a2;
        uint64_t v15 = a3;
        int v16 = 0;
        goto LABEL_8;
      case 2:
        sub_1000A1090(v5, a1, a2, a3);
        break;
      case 3:
        uint64_t v12 = a1;
        uint64_t v13 = (void *)v5;
        uint64_t v14 = a2;
        uint64_t v15 = a3;
        int v16 = 2;
LABEL_8:
        sub_1000A1604(v12, v13, v14, v15, v16);
        uint64_t v11 = 0;
        break;
      case 4:
        type metadata accessor for StartMigrationRequest(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      default:
        break;
    }
    uint64_t v4 = v11;
  }
}

uint64_t sub_1000A1090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  started  = type metadata accessor for StartMigrationRequest.Credential(0);
  uint64_t v6 = *(void *)(started - 8);
  uint64_t v7 = __chkstk_darwin(started);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  double v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v37 - v18;
  uint64_t v20 = sub_100094134(&qword_100909990);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = started;
  uint64_t v26 = started;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  sub_1000BF710(a1, (uint64_t)v12, &qword_1009086D0);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    sub_1000966BC((uint64_t)v12, &qword_1009086D0);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    sub_1000AEA7C((uint64_t)v12, (uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
    sub_1000AEA7C((uint64_t)v19, (uint64_t)v17, type metadata accessor for StartMigrationRequest.OneOf_Source);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000966BC((uint64_t)v24, &qword_100909990);
      sub_1000AEA7C((uint64_t)v17, v30, type metadata accessor for StartMigrationRequest.Credential);
      sub_1000AEA7C(v30, (uint64_t)v24, type metadata accessor for StartMigrationRequest.Credential);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    sub_10009B440((uint64_t)v17, type metadata accessor for StartMigrationRequest.OneOf_Source);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  sub_1000B1E38(&qword_100908810, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return sub_1000966BC((uint64_t)v24, &qword_100909990);
  }
  uint64_t v34 = v42;
  sub_1000BF710((uint64_t)v24, v42, &qword_100909990);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    sub_1000966BC((uint64_t)v24, &qword_100909990);
    return sub_1000966BC(v34, &qword_100909990);
  }
  else
  {
    uint64_t v35 = v41;
    sub_1000AEA7C(v34, v41, type metadata accessor for StartMigrationRequest.Credential);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v24, &qword_100909990);
    uint64_t v36 = v40;
    sub_1000966BC(v40, &qword_1009086D0);
    sub_1000AEA7C(v35, v36, type metadata accessor for StartMigrationRequest.Credential);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t sub_1000A1604(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  if (v19)
  {
    uint64_t v20 = v19;
    int v17 = a5;
    uint64_t v16 = v18;
    sub_1000BF710((uint64_t)a2, (uint64_t)v10, &qword_1009086D0);
    started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    uint64_t v13 = *(void *)(started - 8);
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, started);
    sub_1000966BC((uint64_t)v10, &qword_1009086D0);
    if (v14 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)a2, &qword_1009086D0);
    uint64_t v15 = v20;
    *a2  = v16;
    a2[1]  = v15;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, started);
  }
  return result;
}

uint64_t StartMigrationRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v3, (uint64_t)v10, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(v10, 1, started) != 1)
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_1000A1B94(v3);
        uint64_t result = sub_10009B440((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
        if (v4) {
          return result;
        }
      }
      else
      {
        sub_10009B440((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
        uint64_t result = sub_1000A5A4C(v3, a1, a2, a3, &qword_1009086D0, type metadata accessor for StartMigrationRequest.OneOf_Source, type metadata accessor for StartMigrationRequest.OneOf_Source);
        if (v4) {
          return result;
        }
      }
    }
    else
    {
      sub_10009B440((uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
      uint64_t result = sub_1000A1A34(v3);
      if (v4) {
        return result;
      }
    }
  }
  if (*(unsigned char *)(v3 + *(int *)(type metadata accessor for StartMigrationRequest(0) + 20)) != 1) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  if (!v4) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_1000A1A34(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086D0);
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(v4, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086D0);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for StartMigrationRequest.OneOf_Source);
  __break(1u);
  return result;
}

uint64_t sub_1000A1B94(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  started  = type metadata accessor for StartMigrationRequest.Credential(0);
  __chkstk_darwin(started);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086D0);
  uint64_t v8 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086D0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for StartMigrationRequest.Credential);
    sub_1000B1E38(&qword_100908810, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for StartMigrationRequest.Credential);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for StartMigrationRequest.OneOf_Source);
  __break(1u);
  return result;
}

Swift::Int StartMigrationRequest.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for StartMigrationRequest, &qword_100908700, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
}

uint64_t sub_1000A1E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(a2, 1, 1, started);
  *(unsigned char *)(a2 + *(int *)(a1 + 20))  = 0;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000A1E84())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000A1EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A1EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A1EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909900, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A1F5C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DA0, (uint64_t)static StartMigrationRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000A1F80(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009087F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A1FF0()
{
  sub_1000B1E38(&qword_1009087F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);

  return Message.hash(into:)();
}

void *StartMigrationRequest.Credential.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationRequest.Credential.protoMessageName;
}

unint64_t static StartMigrationRequest.Credential.protoMessageName.getter()
{
  return 0xD000000000000020;
}

uint64_t sub_1000A2098()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static StartMigrationRequest.Credential._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778380;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "dsID";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "baseURL";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "hostname";
  *((void *)v12 + 1)  = 8;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "mmeAuthToken";
  *((void *)v14 + 1)  = 12;
  v14[16]  = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2)  = 5;
  *(void *)uint64_t v15 = "partition";
  *(void *)(v15 + _Block_object_dispose(&STACK[0x260], 8) = 9;
  *(unsigned char *)(v15 + 16)  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t StartMigrationRequest.Credential._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DA8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap);
}

uint64_t static StartMigrationRequest.Credential._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DA8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap, a1);
}

uint64_t StartMigrationRequest.Credential.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t StartMigrationRequest.Credential.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = *(void *)(v0 + 40);
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v9 = *(void *)(v0 + 56);
        uint64_t v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0) {
          uint64_t v10 = *(void *)(v0 + 48) & 0xFFFFFFFFFFFFLL;
        }
        if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (!*(_DWORD *)(v0 + 64)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for StartMigrationRequest.Credential(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int StartMigrationRequest.Credential.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for StartMigrationRequest.Credential, &qword_100908708, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
}

uint64_t sub_1000A2610@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(void *)(a1 + 16)  = 0;
  *(void *)(a1 + 24)  = 0xE000000000000000;
  *(void *)(a1 + 32)  = 0;
  *(void *)(a1 + 40)  = 0xE000000000000000;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = 0;
  *(void *)(a1 + 56)  = 0xE000000000000000;
  *(_DWORD *)(a1 + 64)  = 0;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000A2650())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000A2674()
{
  return StartMigrationRequest.Credential.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A268C()
{
  return StartMigrationRequest.Credential.traverse<A>(visitor:)();
}

uint64_t sub_1000A26A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A2720@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DA8, (uint64_t)static StartMigrationRequest.Credential._protobuf_nameMap, a1);
}

uint64_t sub_1000A2744(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908810, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A27B0()
{
  sub_1000B1E38(&qword_100908810, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);

  return Message.hash(into:)();
}

void *StartMigrationResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.protoMessageName;
}

unint64_t static StartMigrationResponse.protoMessageName.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1000A2854()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static StartMigrationResponse._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static StartMigrationResponse._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778370;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "state";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 5;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "success";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "error";
  *((void *)v12 + 1)  = 5;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "log";
  *((void *)v14 + 1)  = 3;
  v14[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t StartMigrationResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DB0, (uint64_t)static StartMigrationResponse._protobuf_nameMap);
}

uint64_t static StartMigrationResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DB0, (uint64_t)static StartMigrationResponse._protobuf_nameMap, a1);
}

uint64_t StartMigrationResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v11 = v4;
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        goto LABEL_8;
      case 2:
        sub_1000A2BEC(v5, a1, a2, a3);
        goto LABEL_9;
      case 3:
        sub_1000A3168(v5, a1, a2, a3);
        goto LABEL_9;
      case 5:
        type metadata accessor for StartMigrationResponse(0);
LABEL_8:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_9:
        uint64_t v11 = 0;
        break;
      default:
        break;
    }
    uint64_t v4 = v11;
  }
}

uint64_t sub_1000A2BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  started  = type metadata accessor for StartMigrationResponse.Details(0);
  uint64_t v5 = *(void *)(started - 8);
  uint64_t v6 = __chkstk_darwin(started);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100094134(&qword_100909978);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = started;
  v24((char *)&v34 - v22, 1, 1, started);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_1000BF710(v35, (uint64_t)v11, &qword_1009086D8);
  uint64_t v36 = v13;
  LODWORD(v46)  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_1000966BC((uint64_t)v11, &qword_1009086D8);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_7;
  }
  uint64_t v26 = (uint64_t)v40;
  sub_1000AEA7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_1000AEA7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for StartMigrationResponse.OneOf_Result);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10009B440((uint64_t)v16, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_5;
  }
  sub_1000966BC((uint64_t)v23, &qword_100909978);
  sub_1000AEA7C((uint64_t)v16, v26, type metadata accessor for StartMigrationResponse.Details);
  sub_1000AEA7C(v26, (uint64_t)v23, type metadata accessor for StartMigrationResponse.Details);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_7:
  sub_1000B1E38(&qword_100908840, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return sub_1000966BC((uint64_t)v23, &qword_100909978);
  }
  uint64_t v30 = v38;
  sub_1000BF710((uint64_t)v23, v38, &qword_100909978);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    sub_1000966BC((uint64_t)v23, &qword_100909978);
    return sub_1000966BC(v30, &qword_100909978);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_1000AEA7C(v31, v37, type metadata accessor for StartMigrationResponse.Details);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v23, &qword_100909978);
    uint64_t v33 = v35;
    sub_1000966BC(v35, &qword_1009086D8);
    sub_1000AEA7C(v32, v33, type metadata accessor for StartMigrationResponse.Details);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_1000A3168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  started  = type metadata accessor for StartMigrationResponse.Error(0);
  uint64_t v5 = *(void *)(started - 8);
  uint64_t v6 = __chkstk_darwin(started);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100094134(&qword_100909980);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = started;
  v24((char *)&v34 - v22, 1, 1, started);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for StartMigrationResponse(0) + 20);
  sub_1000BF710(v35, (uint64_t)v11, &qword_1009086D8);
  uint64_t v36 = v13;
  LODWORD(v46)  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_1000966BC((uint64_t)v11, &qword_1009086D8);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_1000AEA7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
    sub_1000AEA7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for StartMigrationResponse.OneOf_Result);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000966BC((uint64_t)v23, &qword_100909980);
      sub_1000AEA7C((uint64_t)v16, v26, type metadata accessor for StartMigrationResponse.Error);
      sub_1000AEA7C(v26, (uint64_t)v23, type metadata accessor for StartMigrationResponse.Error);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_10009B440((uint64_t)v16, type metadata accessor for StartMigrationResponse.OneOf_Result);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_1000B1E38(&qword_100908858, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return sub_1000966BC((uint64_t)v23, &qword_100909980);
  }
  uint64_t v30 = v38;
  sub_1000BF710((uint64_t)v23, v38, &qword_100909980);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_1000966BC((uint64_t)v23, &qword_100909980);
    return sub_1000966BC(v30, &qword_100909980);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_1000AEA7C(v31, v37, type metadata accessor for StartMigrationResponse.Error);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v23, &qword_100909980);
    uint64_t v33 = v35;
    sub_1000966BC(v35, &qword_1009086D8);
    sub_1000AEA7C(v32, v33, type metadata accessor for StartMigrationResponse.Error);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t StartMigrationResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = v0[1];
  uint64_t v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v7 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    started  = type metadata accessor for StartMigrationResponse(0);
    sub_1000BF710((uint64_t)v0 + *(int *)(started + 20), (uint64_t)v5, &qword_1009086D8);
    uint64_t v10 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1) {
      goto LABEL_10;
    }
    if (swift_getEnumCaseMultiPayload() == 1) {
      sub_1000A3B24((uint64_t)v0);
    }
    else {
      sub_1000A38F4((uint64_t)v0);
    }
    uint64_t v2 = v1;
    uint64_t result = sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.OneOf_Result);
    if (!v1)
    {
LABEL_10:
      uint64_t v11 = (void *)((char *)v0 + *(int *)(started + 24));
      uint64_t v12 = *v11;
      unint64_t v13 = v11[1];
      uint64_t v14 = HIBYTE(v13) & 0xF;
      if ((v13 & 0x2000000000000000) == 0) {
        uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
      }
      if (!v14) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      if (!v2) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_1000A38F4(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  started  = type metadata accessor for StartMigrationResponse.Details(0);
  __chkstk_darwin(started);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StartMigrationResponse(0);
  sub_1000BF710(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1009086D8);
  uint64_t v9 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086D8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Details);
    sub_1000B1E38(&qword_100908840, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for StartMigrationResponse.Details);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for StartMigrationResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000A3B24(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086D8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  started  = type metadata accessor for StartMigrationResponse.Error(0);
  __chkstk_darwin(started);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StartMigrationResponse(0);
  sub_1000BF710(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1009086D8);
  uint64_t v9 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086D8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for StartMigrationResponse.Error);
    sub_1000B1E38(&qword_100908858, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for StartMigrationResponse.Error);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for StartMigrationResponse.OneOf_Result);
  __break(1u);
  return result;
}

Swift::Int StartMigrationResponse.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for StartMigrationResponse, &qword_100908710, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);
}

uint64_t sub_1000A3DA0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2  = 0;
  a2[1]  = 0xE000000000000000;
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 20);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 56))(v4, 1, 1, started);
  uint64_t v6 = (void *)((char *)a2 + *(int *)(a1 + 24));
  void *v6 = 0;
  v6[1]  = 0xE000000000000000;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000A3E38())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000A3E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A3E74()
{
  return StartMigrationResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000A3E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098F0, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A3F08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DB0, (uint64_t)static StartMigrationResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000A3F2C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908828, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A3F98()
{
  sub_1000B1E38(&qword_100908828, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);

  return Message.hash(into:)();
}

void *StartMigrationResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.Details.protoMessageName;
}

unint64_t static StartMigrationResponse.Details.protoMessageName.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1000A403C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static StartMigrationResponse.Details._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778370;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "time_elapsed";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 12;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "is_observer";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 11;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "lists_migrated";
  *((void *)v12 + 1)  = 14;
  v12[16]  = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "reminders_migrated";
  *((void *)v14 + 1)  = 18;
  v14[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t StartMigrationResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DB8, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap);
}

uint64_t static StartMigrationResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DB8, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap, a1);
}

uint64_t StartMigrationResponse.Details.decodeMessage<A>(decoder:)()
{
  return sub_1000A85DC();
}

uint64_t StartMigrationResponse.Details.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A8708(a1, a2, a3, (void (*)(void))type metadata accessor for StartMigrationResponse.Details);
}

Swift::Int StartMigrationResponse.Details.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for StartMigrationResponse.Details, &qword_100908718, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
}

Swift::Void (__swiftcall *sub_1000A4354())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000A4378()
{
  return StartMigrationResponse.Details.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A4390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Details.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A43A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098E8, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A4424@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DB8, (uint64_t)static StartMigrationResponse.Details._protobuf_nameMap, a1);
}

uint64_t sub_1000A4448(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908840, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A44B4()
{
  sub_1000B1E38(&qword_100908840, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);

  return Message.hash(into:)();
}

void *StartMigrationResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static StartMigrationResponse.Error.protoMessageName;
}

unint64_t static StartMigrationResponse.Error.protoMessageName.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_1000A455C(uint64_t a1)
{
  return sub_1000A8B4C(a1, static StartMigrationResponse.Error._protobuf_nameMap);
}

uint64_t StartMigrationResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DC0, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap);
}

uint64_t static StartMigrationResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DC0, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap, a1);
}

uint64_t StartMigrationResponse.Error.decodeMessage<A>(decoder:)()
{
  return sub_1000A8D50();
}

uint64_t StartMigrationResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A8E20(a1, a2, a3, (void (*)(void))type metadata accessor for StartMigrationResponse.Error);
}

Swift::Int StartMigrationResponse.Error.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for StartMigrationResponse.Error, &qword_100908720, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000A4640()
{
  return StartMigrationResponse.Error.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A4658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StartMigrationResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A4670(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098E0, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A46EC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DC0, (uint64_t)static StartMigrationResponse.Error._protobuf_nameMap, a1);
}

uint64_t sub_1000A4710(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908858, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A477C()
{
  sub_1000B1E38(&qword_100908858, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);

  return Message.hash(into:)();
}

const char *MigrateRequest.protoMessageName.unsafeMutableAddressor()
{
  return "MigrateRequest";
}

uint64_t static MigrateRequest.protoMessageName.getter()
{
  return 0x526574617267694DLL;
}

uint64_t sub_1000A4828()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateRequest._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateRequest._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100776E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "user";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "archivePath";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 11;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "embeddedTestData";
  *((void *)v12 + 1)  = 16;
  v12[16]  = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "options";
  *((void *)v14 + 1)  = 7;
  v14[16]  = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "user_initiated";
  *((void *)v16 + 1)  = 14;
  v16[16]  = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "simulated_error";
  *((void *)v18 + 1)  = 15;
  v18[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DC8, (uint64_t)static MigrateRequest._protobuf_nameMap);
}

uint64_t static MigrateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DC8, (uint64_t)static MigrateRequest._protobuf_nameMap, a1);
}

uint64_t MigrateRequest.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v14 = v4;
    if (v4 || (v16 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        sub_1000A4CC8(v5, a1, a2, a3);
        break;
      case 2:
        uint64_t v9 = a1;
        unint64_t v10 = (void *)v5;
        uint64_t v11 = a2;
        uint64_t v12 = a3;
        int v13 = 1;
        goto LABEL_3;
      case 3:
        uint64_t v9 = a1;
        unint64_t v10 = (void *)v5;
        uint64_t v11 = a2;
        uint64_t v12 = a3;
        int v13 = 2;
LABEL_3:
        sub_1000A523C(v9, v10, v11, v12, v13);
        uint64_t v14 = 0;
        break;
      case 4:
        type metadata accessor for MigrateRequest(0);
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
        break;
      case 5:
        type metadata accessor for MigrateRequest(0);
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        break;
      case 6:
        type metadata accessor for MigrateRequest(0);
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        break;
      default:
        break;
    }
    uint64_t v4 = v14;
  }
}

uint64_t sub_1000A4CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for MigrateRequest.User(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = sub_100094134(&qword_100909968);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  sub_1000BF710(a1, (uint64_t)v12, &qword_1009086E0);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    sub_1000966BC((uint64_t)v12, &qword_1009086E0);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    sub_1000AEA7C((uint64_t)v12, (uint64_t)v19, type metadata accessor for MigrateRequest.OneOf_Source);
    sub_1000AEA7C((uint64_t)v19, (uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload())
    {
      sub_10009B440((uint64_t)v17, type metadata accessor for MigrateRequest.OneOf_Source);
      uint64_t v30 = v46;
    }
    else
    {
      sub_1000966BC((uint64_t)v24, &qword_100909968);
      sub_1000AEA7C((uint64_t)v17, v31, type metadata accessor for MigrateRequest.User);
      sub_1000AEA7C(v31, (uint64_t)v24, type metadata accessor for MigrateRequest.User);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  sub_1000B1E38(&qword_100908888, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return sub_1000966BC((uint64_t)v24, &qword_100909968);
  }
  uint64_t v34 = v42;
  sub_1000BF710((uint64_t)v24, v42, &qword_100909968);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    sub_1000966BC((uint64_t)v24, &qword_100909968);
    return sub_1000966BC(v34, &qword_100909968);
  }
  else
  {
    uint64_t v35 = v41;
    sub_1000AEA7C(v34, v41, type metadata accessor for MigrateRequest.User);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v24, &qword_100909968);
    uint64_t v36 = v40;
    sub_1000966BC(v40, &qword_1009086E0);
    sub_1000AEA7C(v35, v36, type metadata accessor for MigrateRequest.User);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t sub_1000A523C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  if (v19)
  {
    uint64_t v20 = v19;
    int v17 = a5;
    uint64_t v16 = v18;
    sub_1000BF710((uint64_t)a2, (uint64_t)v10, &qword_1009086E0);
    uint64_t v12 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    uint64_t v13 = *(void *)(v12 - 8);
    int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
    sub_1000966BC((uint64_t)v10, &qword_1009086E0);
    if (v14 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)a2, &qword_1009086E0);
    uint64_t v15 = v20;
    *a2  = v16;
    a2[1]  = v15;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  return result;
}

uint64_t MigrateRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v3, (uint64_t)v10, &qword_1009086E0);
  uint64_t v11 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11) != 1)
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        sub_10009B440((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
        uint64_t result = sub_1000A58E8(v3);
        if (v4) {
          return result;
        }
      }
      else
      {
        sub_10009B440((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
        uint64_t result = sub_1000A5A4C(v3, a1, a2, a3, &qword_1009086E0, type metadata accessor for MigrateRequest.OneOf_Source, type metadata accessor for MigrateRequest.OneOf_Source);
        if (v4) {
          return result;
        }
      }
    }
    else
    {
      sub_1000A56C8(v3);
      uint64_t result = sub_10009B440((uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
      if (v4) {
        return result;
      }
    }
  }
  uint64_t v12 = (int *)type metadata accessor for MigrateRequest(0);
  if (!*(_DWORD *)(v3 + v12[5])
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (*(unsigned char *)(v3 + v12[6]) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(v3 + v12[7])) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_1000A56C8(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086E0);
  uint64_t v8 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086E0);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for MigrateRequest.User);
    sub_1000B1E38(&qword_100908888, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for MigrateRequest.User);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for MigrateRequest.OneOf_Source);
  __break(1u);
  return result;
}

uint64_t sub_1000A58E8(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086E0);
  uint64_t v5 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086E0);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for MigrateRequest.OneOf_Source);
  __break(1u);
  return result;
}

uint64_t sub_1000A5A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v11 = sub_100094134(a5);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v13, a5);
  uint64_t v14 = a6(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    sub_1000966BC((uint64_t)v13, a5);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_10009B440((uint64_t)v13, a7);
  __break(1u);
  return result;
}

Swift::Int MigrateRequest.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateRequest, &qword_100908728, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
}

uint64_t sub_1000A5BF8@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = a1[6];
  *(_DWORD *)(a2 + a1[5])  = 0;
  *(unsigned char *)(a2 + v5)  = 0;
  *(_DWORD *)(a2 + a1[7])  = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000A5C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateRequest.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A5C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A5CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098D8, (void (*)(uint64_t))type metadata accessor for MigrateRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A5D24@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DC8, (uint64_t)static MigrateRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000A5D48(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A5DB4()
{
  sub_1000B1E38(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);

  return Message.hash(into:)();
}

uint64_t sub_1000A5E30()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateRequest.Option._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateRequest.Option._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100776E30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 0;
  *(void *)unint64_t v6 = "NONE";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 1;
  *(void *)unint64_t v10 = "DRY_RUN";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)uint64_t v12 = "DISABLE_SHARING";
  *((void *)v12 + 1)  = 15;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "SAVE_ORIGINAL_JSON";
  *((void *)v14 + 1)  = 18;
  v14[16]  = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 8;
  *(void *)uint64_t v16 = "USER_INITIATED";
  *((void *)v16 + 1)  = 14;
  v16[16]  = 2;
  v9();
  int v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *int v17 = 16;
  *(void *)uint64_t v18 = "NO_CLEANUP";
  *((void *)v18 + 1)  = 10;
  v18[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateRequest.Option._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DD0, (uint64_t)static MigrateRequest.Option._protobuf_nameMap);
}

uint64_t static MigrateRequest.Option._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DD0, (uint64_t)static MigrateRequest.Option._protobuf_nameMap, a1);
}

uint64_t sub_1000A6130@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DD0, (uint64_t)static MigrateRequest.Option._protobuf_nameMap, a1);
}

void *MigrateRequest.User.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateRequest.User.protoMessageName;
}

unint64_t static MigrateRequest.User.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_1000A617C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateRequest.User._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateRequest.User._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100776E80;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "dsID";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2)  = 2;
  *(void *)unint64_t v10 = "partition";
  *((void *)v10 + 1)  = 9;
  uint8_t v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateRequest.User._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DD8, (uint64_t)static MigrateRequest.User._protobuf_nameMap);
}

uint64_t static MigrateRequest.User._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DD8, (uint64_t)static MigrateRequest.User._protobuf_nameMap, a1);
}

uint64_t MigrateRequest.User.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularUInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MigrateRequest.User.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for MigrateRequest.User(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int MigrateRequest.User.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateRequest.User, &qword_100908730, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
}

uint64_t sub_1000A6524@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000A654C()
{
  return MigrateRequest.User.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A6564()
{
  return MigrateRequest.User.traverse<A>(visitor:)();
}

uint64_t sub_1000A657C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098D0, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A65F8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DD8, (uint64_t)static MigrateRequest.User._protobuf_nameMap, a1);
}

uint64_t sub_1000A661C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908888, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6688()
{
  sub_1000B1E38(&qword_100908888, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);

  return Message.hash(into:)();
}

void *MigrateResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.protoMessageName;
}

uint64_t static MigrateResponse.protoMessageName.getter()
{
  return 0x526574617267694DLL;
}

uint64_t sub_1000A6734()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateResponse._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateResponse._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778380;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "state";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 5;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "success";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "error";
  *((void *)v12 + 1)  = 5;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "next_step";
  *((void *)v14 + 1)  = 9;
  v14[16]  = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2)  = 5;
  *(void *)uint64_t v15 = "logs";
  *(void *)(v15 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v15 + 16)  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DE0, (uint64_t)static MigrateResponse._protobuf_nameMap);
}

uint64_t static MigrateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DE0, (uint64_t)static MigrateResponse._protobuf_nameMap, a1);
}

uint64_t MigrateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v11 = v4;
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        goto LABEL_9;
      case 2:
        sub_1000A6B30(v5, a1, a2, a3);
        goto LABEL_10;
      case 3:
        sub_1000A70AC(v5, a1, a2, a3);
        goto LABEL_10;
      case 4:
        sub_1000A7628();
        goto LABEL_10;
      case 5:
        type metadata accessor for MigrateResponse(0);
LABEL_9:
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_10:
        uint64_t v11 = 0;
        break;
      default:
        break;
    }
    uint64_t v4 = v11;
  }
}

uint64_t sub_1000A6B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for MigrateResponse.Details(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100094134(&qword_100909950);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_1000BF710(v35, (uint64_t)v11, &qword_1009086E8);
  uint64_t v36 = v13;
  LODWORD(v46)  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_1000966BC((uint64_t)v11, &qword_1009086E8);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_7;
  }
  uint64_t v26 = (uint64_t)v40;
  sub_1000AEA7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_1000AEA7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for MigrateResponse.OneOf_Result);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10009B440((uint64_t)v16, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_5;
  }
  sub_1000966BC((uint64_t)v23, &qword_100909950);
  sub_1000AEA7C((uint64_t)v16, v26, type metadata accessor for MigrateResponse.Details);
  sub_1000AEA7C(v26, (uint64_t)v23, type metadata accessor for MigrateResponse.Details);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_7:
  sub_1000B1E38(&qword_1009088B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return sub_1000966BC((uint64_t)v23, &qword_100909950);
  }
  uint64_t v30 = v38;
  sub_1000BF710((uint64_t)v23, v38, &qword_100909950);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    sub_1000966BC((uint64_t)v23, &qword_100909950);
    return sub_1000966BC(v30, &qword_100909950);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_1000AEA7C(v31, v37, type metadata accessor for MigrateResponse.Details);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v23, &qword_100909950);
    uint64_t v33 = v35;
    sub_1000966BC(v35, &qword_1009086E8);
    sub_1000AEA7C(v32, v33, type metadata accessor for MigrateResponse.Details);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_1000A70AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for MigrateResponse.Error(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100094134(&qword_100909958);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for MigrateResponse(0) + 20);
  sub_1000BF710(v35, (uint64_t)v11, &qword_1009086E8);
  uint64_t v36 = v13;
  LODWORD(v46)  = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_1000966BC((uint64_t)v11, &qword_1009086E8);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_1000AEA7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
    sub_1000AEA7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for MigrateResponse.OneOf_Result);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000966BC((uint64_t)v23, &qword_100909958);
      sub_1000AEA7C((uint64_t)v16, v26, type metadata accessor for MigrateResponse.Error);
      sub_1000AEA7C(v26, (uint64_t)v23, type metadata accessor for MigrateResponse.Error);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_10009B440((uint64_t)v16, type metadata accessor for MigrateResponse.OneOf_Result);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_1000B1E38(&qword_1009088D0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return sub_1000966BC((uint64_t)v23, &qword_100909958);
  }
  uint64_t v30 = v38;
  sub_1000BF710((uint64_t)v23, v38, &qword_100909958);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_1000966BC((uint64_t)v23, &qword_100909958);
    return sub_1000966BC(v30, &qword_100909958);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_1000AEA7C(v31, v37, type metadata accessor for MigrateResponse.Error);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v23, &qword_100909958);
    uint64_t v33 = v35;
    sub_1000966BC(v35, &qword_1009086E8);
    sub_1000AEA7C(v32, v33, type metadata accessor for MigrateResponse.Error);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_1000A7628()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t MigrateResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = v3[1];
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    uint64_t v15 = type metadata accessor for MigrateResponse(0);
    sub_1000BF710((uint64_t)v3 + *(int *)(v15 + 20), (uint64_t)v11, &qword_1009086E8);
    uint64_t v16 = type metadata accessor for MigrateResponse.OneOf_Result(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v11, 1, v16) == 1) {
      goto LABEL_10;
    }
    if (swift_getEnumCaseMultiPayload() == 1) {
      sub_1000A7B38((uint64_t)v3);
    }
    else {
      sub_1000A7908((uint64_t)v3);
    }
    uint64_t v5 = v4;
    uint64_t result = sub_10009B440((uint64_t)v11, type metadata accessor for MigrateResponse.OneOf_Result);
    if (!v4)
    {
LABEL_10:
      uint64_t result = sub_1000A7D68((uint64_t)v3, a1, a2, a3);
      if (!v5)
      {
        uint64_t v17 = (void *)((char *)v3 + *(int *)(v15 + 24));
        uint64_t v18 = *v17;
        unint64_t v19 = v17[1];
        uint64_t v20 = HIBYTE(v19) & 0xF;
        if ((v19 & 0x2000000000000000) == 0) {
          uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
        }
        if (v20) {
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
        }
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_1000A7908(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MigrateResponse.Details(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1009086E8);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086E8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for MigrateResponse.Details);
    sub_1000B1E38(&qword_1009088B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for MigrateResponse.Details);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for MigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000A7B38(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086E8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MigrateResponse.Error(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1009086E8);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086E8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for MigrateResponse.Error);
    sub_1000B1E38(&qword_1009088D0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for MigrateResponse.Error);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for MigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000A7D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1]  = a4;
  uint64_t v5 = sub_100094134(&qword_1009086F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v9 = *(void *)(Step - 8);
  __chkstk_darwin(Step);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MigrateResponse(0);
  sub_1000BF710(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_1009086F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Step) == 1) {
    return sub_1000966BC((uint64_t)v7, &qword_1009086F0);
  }
  sub_1000AEA7C((uint64_t)v7, (uint64_t)v11, type metadata accessor for MigrateResponse.NextStep);
  sub_1000B1E38(&qword_1009088E8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_10009B440((uint64_t)v11, type metadata accessor for MigrateResponse.NextStep);
}

Swift::Int MigrateResponse.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateResponse, &qword_100908738, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
}

uint64_t sub_1000A7FB8@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  *a2  = 0;
  a2[1]  = 0xE000000000000000;
  uint64_t v4 = (char *)a2 + a1[5];
  uint64_t v5 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (void *)((char *)a2 + a1[6]);
  void *v6 = 0;
  v6[1]  = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v7 = (char *)a2 + a1[8];
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Step - 8) + 56);

  return v9(v7, 1, 1, Step);
}

uint64_t sub_1000A809C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000A810C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000A817C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000A8194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A81AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098C8, (void (*)(uint64_t))type metadata accessor for MigrateResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A8228@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DE0, (uint64_t)static MigrateResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000A824C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009088A0, (void (*)(uint64_t))type metadata accessor for MigrateResponse);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A82B8()
{
  sub_1000B1E38(&qword_1009088A0, (void (*)(uint64_t))type metadata accessor for MigrateResponse);

  return Message.hash(into:)();
}

void *MigrateResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.Details.protoMessageName;
}

unint64_t static MigrateResponse.Details.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000A835C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateResponse.Details._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateResponse.Details._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778370;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "time_elapsed";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 12;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "is_observer";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 11;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "lists_migrated";
  *((void *)v12 + 1)  = 14;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "reminders_migrated";
  *((void *)v14 + 1)  = 18;
  v14[16]  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DE8, (uint64_t)static MigrateResponse.Details._protobuf_nameMap);
}

uint64_t static MigrateResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DE8, (uint64_t)static MigrateResponse.Details._protobuf_nameMap, a1);
}

uint64_t sub_1000A85DC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MigrateResponse.Details.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A8708(a1, a2, a3, (void (*)(void))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000A8708(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (*(double *)v4 == 0.0 || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v5))
  {
    if (*(unsigned char *)(v4 + 8) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
    {
      if (!*(_DWORD *)(v4 + 12)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
      {
        if (!*(_DWORD *)(v4 + 16)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
        {
          a4(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int MigrateResponse.Details.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateResponse.Details, &qword_100908740, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000A8868@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(_DWORD *)(a1 + 12)  = 0;
  *(_DWORD *)(a1 + 16)  = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000A8894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000A8904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000A8974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.Details.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A898C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098C0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A8A08@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DE8, (uint64_t)static MigrateResponse.Details._protobuf_nameMap, a1);
}

uint64_t sub_1000A8A2C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009088B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A8A98()
{
  sub_1000B1E38(&qword_1009088B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);

  return Message.hash(into:)();
}

void *MigrateResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.Error.protoMessageName;
}

unint64_t static MigrateResponse.Error.protoMessageName.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_1000A8B40(uint64_t a1)
{
  return sub_1000A8B4C(a1, static MigrateResponse.Error._protobuf_nameMap);
}

uint64_t sub_1000A8B4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  sub_10008E278(v3, a2);
  sub_10008E2DC(v3, (uint64_t)a2);
  sub_100094134(&qword_100909918);
  uint64_t v4 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16)  = xmmword_100776E80;
  uint64_t v8 = (void *)(v7 + v6);
  unint64_t v9 = v7 + v6 + v4[14];
  *uint64_t v8 = 1;
  *(void *)unint64_t v9 = "message";
  *(void *)(v9 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v9 + 16)  = 2;
  uint64_t v10 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v11 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v12 = *(void (**)(void))(*(void *)(v11 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v12)(v9, v10, v11);
  uint64_t v13 = (char *)v8 + v5 + v4[14];
  *(void *)((char *)v8 + v5)  = 2;
  *(void *)uint64_t v13 = "retry_count";
  *((void *)v13 + 1)  = 11;
  v13[16]  = 2;
  v12();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DF0, (uint64_t)static MigrateResponse.Error._protobuf_nameMap);
}

uint64_t static MigrateResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DF0, (uint64_t)static MigrateResponse.Error._protobuf_nameMap, a1);
}

uint64_t sub_1000A8D50()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MigrateResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A8E20(a1, a2, a3, (void (*)(void))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000A8E20(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = *(void *)(v4 + 8);
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *(void *)v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (!*(_DWORD *)(v4 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int MigrateResponse.Error.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateResponse.Error, &qword_100908748, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000A8F44@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16)  = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000A8F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MigrateResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000A8F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A9004@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DF0, (uint64_t)static MigrateResponse.Error._protobuf_nameMap, a1);
}

uint64_t sub_1000A9028(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009088D0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A9094()
{
  sub_1000B1E38(&qword_1009088D0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);

  return Message.hash(into:)();
}

void *MigrateResponse.NextStep.protoMessageName.unsafeMutableAddressor()
{
  return &static MigrateResponse.NextStep.protoMessageName;
}

unint64_t static MigrateResponse.NextStep.protoMessageName.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_1000A9138()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static MigrateResponse.NextStep._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100778380;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3)  = 1;
  *(void *)unint64_t v6 = "defined";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2)  = 2;
  *(void *)unint64_t v10 = "is_terminated";
  *(void *)(v10 + _Block_object_dispose(&STACK[0x260], 8) = 13;
  *(unsigned char *)(v10 + 16)  = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "next_invocation_in_seconds";
  *((void *)v12 + 1)  = 26;
  v12[16]  = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "invocation_count";
  *((void *)v14 + 1)  = 16;
  v14[16]  = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2)  = 5;
  *(void *)uint64_t v15 = "failure_count";
  *(void *)(v15 + _Block_object_dispose(&STACK[0x260], 8) = 13;
  *(unsigned char *)(v15 + 16)  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t MigrateResponse.NextStep._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906DF8, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap);
}

uint64_t static MigrateResponse.NextStep._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906DF8, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap, a1);
}

uint64_t MigrateResponse.NextStep.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t MigrateResponse.NextStep.traverse<A>(visitor:)()
{
  if (*(unsigned char *)v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 1) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 4)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 8)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(_DWORD *)(v0 + 12)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for MigrateResponse.NextStep(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

Swift::Int MigrateResponse.NextStep.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for MigrateResponse.NextStep, &qword_100908750, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000A9690@<X0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(_DWORD *)(a1 + 4)  = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000A96BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000A972C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000A979C()
{
  return MigrateResponse.NextStep.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A97B4()
{
  return MigrateResponse.NextStep.traverse<A>(visitor:)();
}

uint64_t sub_1000A97CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098B0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A9848@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906DF8, (uint64_t)static MigrateResponse.NextStep._protobuf_nameMap, a1);
}

uint64_t sub_1000A986C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009088E8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A98D8()
{
  sub_1000B1E38(&qword_1009088E8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);

  return Message.hash(into:)();
}

void *UnmigrateRequest.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateRequest.protoMessageName;
}

unint64_t static UnmigrateRequest.protoMessageName.getter()
{
  return 0xD000000000000010;
}

uint64_t sub_1000A997C(uint64_t a1)
{
  return sub_1000ACCF4(a1, static UnmigrateRequest._protobuf_nameMap, (uint64_t)"options", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t UnmigrateRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E00, (uint64_t)static UnmigrateRequest._protobuf_nameMap);
}

uint64_t static UnmigrateRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E00, (uint64_t)static UnmigrateRequest._protobuf_nameMap, a1);
}

uint64_t UnmigrateRequest.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
    }
  }
  return result;
}

uint64_t UnmigrateRequest.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for UnmigrateRequest(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int UnmigrateRequest.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for UnmigrateRequest, &qword_100908758, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
}

uint64_t sub_1000A9B34@<X0>(_DWORD *a1@<X8>)
{
  *a1  = 0;
  return UnknownStorage.init()();
}

Swift::Void (__swiftcall *sub_1000A9B60())()
{
  return REMCDList.cleanUpAfterLocalObjectMerge();
}

uint64_t sub_1000A9B84()
{
  return UnmigrateRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000A9B9C()
{
  return UnmigrateRequest.traverse<A>(visitor:)();
}

uint64_t sub_1000A9BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098A8, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000A9C30@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E00, (uint64_t)static UnmigrateRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000A9C54(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908900, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A9CC0()
{
  sub_1000B1E38(&qword_100908900, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);

  return Message.hash(into:)();
}

uint64_t sub_1000A9D3C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static UnmigrateRequest.Option._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_100776E40;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2)  = 0;
  *(void *)unint64_t v4 = "NONE";
  *(void *)(v4 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v4 + 16)  = 2;
  uint64_t v5 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UnmigrateRequest.Option._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E08, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap);
}

uint64_t static UnmigrateRequest.Option._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E08, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap, a1);
}

uint64_t sub_1000A9EDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E08, (uint64_t)static UnmigrateRequest.Option._protobuf_nameMap, a1);
}

void *UnmigrateResponse.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.protoMessageName;
}

unint64_t static UnmigrateResponse.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_1000A9F28()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static UnmigrateResponse._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static UnmigrateResponse._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100776E60;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "success";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2)  = 2;
  *(void *)unint64_t v10 = "error";
  *((void *)v10 + 1)  = 5;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2)  = 3;
  *(void *)uint64_t v11 = "logs";
  *(void *)(v11 + _Block_object_dispose(&STACK[0x260], 8) = 4;
  *(unsigned char *)(v11 + 16)  = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t UnmigrateResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E10, (uint64_t)static UnmigrateResponse._protobuf_nameMap);
}

uint64_t static UnmigrateResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E10, (uint64_t)static UnmigrateResponse._protobuf_nameMap, a1);
}

uint64_t UnmigrateResponse.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    uint64_t v9 = v4;
    if (v4 || (v11 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 3:
        type metadata accessor for UnmigrateResponse(0);
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_3:
        uint64_t v9 = 0;
        break;
      case 2:
        sub_1000AA7CC(v5, a1, a2, a3);
        goto LABEL_3;
      case 1:
        sub_1000AA254(v5, a1, a2, a3);
        goto LABEL_3;
    }
    uint64_t v4 = v9;
  }
}

uint64_t sub_1000AA254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for UnmigrateResponse.Details(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = sub_100094134(&qword_100909930);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  sub_1000BF710(a1, (uint64_t)v12, &qword_1009086F8);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    sub_1000966BC((uint64_t)v12, &qword_1009086F8);
    uint64_t v29 = v13;
    uint64_t v30 = v46;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v31 = (uint64_t)v44;
    sub_1000AEA7C((uint64_t)v12, (uint64_t)v19, type metadata accessor for UnmigrateResponse.OneOf_Result);
    sub_1000AEA7C((uint64_t)v19, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_10009B440((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
      uint64_t v30 = v46;
    }
    else
    {
      sub_1000966BC((uint64_t)v24, &qword_100909930);
      sub_1000AEA7C((uint64_t)v17, v31, type metadata accessor for UnmigrateResponse.Details);
      sub_1000AEA7C(v31, (uint64_t)v24, type metadata accessor for UnmigrateResponse.Details);
      uint64_t v30 = v46;
      v38(v24, 0, 1, v46);
    }
  }
  uint64_t v32 = v45;
  sub_1000B1E38(&qword_100908930, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return sub_1000966BC((uint64_t)v24, &qword_100909930);
  }
  uint64_t v34 = v42;
  sub_1000BF710((uint64_t)v24, v42, &qword_100909930);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v30) == 1)
  {
    sub_1000966BC((uint64_t)v24, &qword_100909930);
    return sub_1000966BC(v34, &qword_100909930);
  }
  else
  {
    uint64_t v35 = v41;
    sub_1000AEA7C(v34, v41, type metadata accessor for UnmigrateResponse.Details);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v24, &qword_100909930);
    uint64_t v36 = v40;
    sub_1000966BC(v40, &qword_1009086F8);
    sub_1000AEA7C(v35, v36, type metadata accessor for UnmigrateResponse.Details);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t sub_1000AA7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for UnmigrateResponse.Error(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = sub_100094134(&qword_100909938);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  uint64_t v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  sub_1000BF710(a1, (uint64_t)v12, &qword_1009086F8);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    sub_1000966BC((uint64_t)v12, &qword_1009086F8);
    uint64_t v29 = v13;
  }
  else
  {
    uint64_t v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    sub_1000AEA7C((uint64_t)v12, (uint64_t)v19, type metadata accessor for UnmigrateResponse.OneOf_Result);
    sub_1000AEA7C((uint64_t)v19, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000966BC((uint64_t)v24, &qword_100909938);
      sub_1000AEA7C((uint64_t)v17, v30, type metadata accessor for UnmigrateResponse.Error);
      sub_1000AEA7C(v30, (uint64_t)v24, type metadata accessor for UnmigrateResponse.Error);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    sub_10009B440((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  sub_1000B1E38(&qword_100908948, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return sub_1000966BC((uint64_t)v24, &qword_100909938);
  }
  uint64_t v34 = v42;
  sub_1000BF710((uint64_t)v24, v42, &qword_100909938);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    sub_1000966BC((uint64_t)v24, &qword_100909938);
    return sub_1000966BC(v34, &qword_100909938);
  }
  else
  {
    uint64_t v35 = v41;
    sub_1000AEA7C(v34, v41, type metadata accessor for UnmigrateResponse.Error);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_1000966BC((uint64_t)v24, &qword_100909938);
    uint64_t v36 = v40;
    sub_1000966BC(v40, &qword_1009086F8);
    sub_1000AEA7C(v35, v36, type metadata accessor for UnmigrateResponse.Error);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t UnmigrateResponse.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(v0, (uint64_t)v5, &qword_1009086F8);
  uint64_t v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6) == 1) {
    goto LABEL_6;
  }
  if (swift_getEnumCaseMultiPayload() == 1) {
    sub_1000AB130(v0);
  }
  else {
    sub_1000AAF0C(v0);
  }
  uint64_t v2 = v1;
  uint64_t result = sub_10009B440((uint64_t)v5, type metadata accessor for UnmigrateResponse.OneOf_Result);
  if (!v1)
  {
LABEL_6:
    uint64_t v8 = (uint64_t *)(v0 + *(int *)(type metadata accessor for UnmigrateResponse(0) + 20));
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFLL;
    }
    if (!v11) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v2) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t sub_1000AAF0C(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086F8);
  uint64_t v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086F8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
    sub_1000B1E38(&qword_100908930, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for UnmigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

uint64_t sub_1000AB130(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009086F8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v4, &qword_1009086F8);
  uint64_t v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v4, &qword_1009086F8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000AEA7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Error);
    sub_1000B1E38(&qword_100908948, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_10009B440((uint64_t)v7, type metadata accessor for UnmigrateResponse.Error);
  }
  uint64_t result = sub_10009B440((uint64_t)v4, type metadata accessor for UnmigrateResponse.OneOf_Result);
  __break(1u);
  return result;
}

Swift::Int UnmigrateResponse.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for UnmigrateResponse, &qword_100908760, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);
}

uint64_t sub_1000AB3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = (void *)(a2 + *(int *)(a1 + 20));
  *uint64_t v5 = 0;
  v5[1]  = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000AB41C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000AB48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000AB4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_1000AB514()
{
  return UnmigrateResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000AB52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_1009098A0, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AB5A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E10, (uint64_t)static UnmigrateResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000AB5CC(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908918, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AB638()
{
  sub_1000B1E38(&qword_100908918, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);

  return Message.hash(into:)();
}

void *UnmigrateResponse.Details.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.Details.protoMessageName;
}

unint64_t static UnmigrateResponse.Details.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_1000AB6DC(uint64_t a1)
{
  return sub_1000ACCF4(a1, static UnmigrateResponse.Details._protobuf_nameMap, (uint64_t)"time_elapsed", 12, (unsigned int *)&enum case for _NameMap.NameDescription.standard(_:));
}

uint64_t UnmigrateResponse.Details._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E18, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap);
}

uint64_t static UnmigrateResponse.Details._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E18, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap, a1);
}

uint64_t UnmigrateResponse.Details.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
    }
  }
  return result;
}

uint64_t UnmigrateResponse.Details.traverse<A>(visitor:)()
{
  if (*v0 == 0.0 || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for UnmigrateResponse.Details(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int UnmigrateResponse.Details.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for UnmigrateResponse.Details, &qword_100908768, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000AB894@<X0>(void *a1@<X8>)
{
  *a1  = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1000AB8B8()
{
  return UnmigrateResponse.Details.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000AB8D0()
{
  return UnmigrateResponse.Details.traverse<A>(visitor:)();
}

uint64_t sub_1000AB8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909898, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AB964@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E18, (uint64_t)static UnmigrateResponse.Details._protobuf_nameMap, a1);
}

uint64_t sub_1000AB988(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908930, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AB9F4()
{
  sub_1000B1E38(&qword_100908930, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);

  return Message.hash(into:)();
}

void *UnmigrateResponse.Error.protoMessageName.unsafeMutableAddressor()
{
  return &static UnmigrateResponse.Error.protoMessageName;
}

unint64_t static UnmigrateResponse.Error.protoMessageName.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1000ABA98(uint64_t a1)
{
  return sub_1000ACCF4(a1, static UnmigrateResponse.Error._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t UnmigrateResponse.Error._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E20, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap);
}

uint64_t static UnmigrateResponse.Error._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E20, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap, a1);
}

uint64_t UnmigrateResponse.Error.decodeMessage<A>(decoder:)()
{
  return sub_1000ACF88();
}

uint64_t UnmigrateResponse.Error.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AC9B4(a1, a2, a3, (void (*)(void))type metadata accessor for UnmigrateResponse.Error);
}

Swift::Int UnmigrateResponse.Error.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for UnmigrateResponse.Error, &qword_100908770, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
}

uint64_t sub_1000ABB8C()
{
  return UnmigrateResponse.Error.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000ABBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnmigrateResponse.Error.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000ABBBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909890, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ABC38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E20, (uint64_t)static UnmigrateResponse.Error._protobuf_nameMap, a1);
}

uint64_t sub_1000ABC5C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908948, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ABCC8()
{
  sub_1000B1E38(&qword_100908948, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);

  return Message.hash(into:)();
}

const char *EmptyRequest.protoMessageName.unsafeMutableAddressor()
{
  return "EmptyRequest";
}

uint64_t static EmptyRequest.protoMessageName.getter()
{
  return 0x7165527974706D45;
}

uint64_t sub_1000ABD70()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static EmptyRequest._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static EmptyRequest._protobuf_nameMap);
  return _NameMap.init()();
}

uint64_t EmptyRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E28, (uint64_t)static EmptyRequest._protobuf_nameMap);
}

uint64_t static EmptyRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E28, (uint64_t)static EmptyRequest._protobuf_nameMap, a1);
}

uint64_t EmptyRequest.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t EmptyRequest.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static EmptyRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  LOBYTE(a2)  = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int EmptyRequest.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for EmptyRequest, &qword_100908780, (void (*)(uint64_t))type metadata accessor for EmptyRequest);
}

uint64_t sub_1000AC034()
{
  return EmptyRequest.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000AC04C()
{
  return EmptyRequest.traverse<A>(visitor:)();
}

uint64_t sub_1000AC064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909888, (void (*)(uint64_t))type metadata accessor for EmptyRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AC0E0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E28, (uint64_t)static EmptyRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000AC104(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908960, (void (*)(uint64_t))type metadata accessor for EmptyRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AC170()
{
  sub_1000B1E38(&qword_100908960, (void (*)(uint64_t))type metadata accessor for EmptyRequest);

  return Message.hash(into:)();
}

const char *BasicResponse.protoMessageName.unsafeMutableAddressor()
{
  return "BasicResponse";
}

uint64_t static BasicResponse.protoMessageName.getter()
{
  return 0x7365526369736142;
}

uint64_t sub_1000AC21C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_10008E278(v0, static BasicResponse._protobuf_nameMap);
  sub_10008E2DC(v0, (uint64_t)static BasicResponse._protobuf_nameMap);
  sub_100094134(&qword_100909918);
  uint64_t v1 = (int *)(sub_100094134(&qword_100909920) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16)  = xmmword_100776E80;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "success";
  *(void *)(v6 + _Block_object_dispose(&STACK[0x260], 8) = 7;
  *(unsigned char *)(v6 + 16)  = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2)  = 2;
  *(void *)unint64_t v10 = "error";
  *((void *)v10 + 1)  = 5;
  uint8_t v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t BasicResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E30, (uint64_t)static BasicResponse._protobuf_nameMap);
}

uint64_t static BasicResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E30, (uint64_t)static BasicResponse._protobuf_nameMap, a1);
}

uint64_t BasicResponse.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      sub_1000AC4C0();
    }
    else if (result == 1)
    {
      sub_1000AC4C0();
    }
  }
  return result;
}

uint64_t sub_1000AC4C0()
{
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BasicResponse.traverse<A>(visitor:)()
{
  int v2 = *(unsigned __int8 *)(v0 + 16);
  if (v2 != 255)
  {
    if (v2)
    {
      uint64_t result = sub_1000AC678(v0);
      if (v1) {
        return result;
      }
    }
    else
    {
      uint64_t result = sub_1000AC638(v0);
      if (v1) {
        return result;
      }
    }
  }
  type metadata accessor for BasicResponse(0);
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_1000AC638(uint64_t result)
{
  if ((*(unsigned char *)(result + 16) & 1) == 0) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AC678(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 != 255 && (v1 & 1) != 0) {
    return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  }
  __break(1u);
  return result;
}

Swift::Int BasicResponse.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for BasicResponse, &qword_100908788, (void (*)(uint64_t))type metadata accessor for BasicResponse);
}

uint64_t sub_1000AC710@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1  = 0;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = 0;
  *(unsigned char *)(a1 + 16)  = -1;
  return UnknownStorage.init()();
}

uint64_t sub_1000AC73C()
{
  return BasicResponse.decodeMessage<A>(decoder:)();
}

uint64_t sub_1000AC754()
{
  return BasicResponse.traverse<A>(visitor:)();
}

uint64_t sub_1000AC76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909880, (void (*)(uint64_t))type metadata accessor for BasicResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AC7E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E30, (uint64_t)static BasicResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000AC80C(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908978, (void (*)(uint64_t))type metadata accessor for BasicResponse);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000AC878()
{
  sub_1000B1E38(&qword_100908978, (void (*)(uint64_t))type metadata accessor for BasicResponse);

  return Message.hash(into:)();
}

const char *PingRequest.protoMessageName.unsafeMutableAddressor()
{
  return "PingRequest";
}

uint64_t static PingRequest.protoMessageName.getter()
{
  return 0x75716552676E6950;
}

uint64_t sub_1000AC920(uint64_t a1)
{
  return sub_1000ACCF4(a1, static PingRequest._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t PingRequest._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E38, (uint64_t)static PingRequest._protobuf_nameMap);
}

uint64_t static PingRequest._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E38, (uint64_t)static PingRequest._protobuf_nameMap, a1);
}

uint64_t PingRequest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AC9B4(a1, a2, a3, (void (*)(void))type metadata accessor for PingRequest);
}

uint64_t sub_1000AC9B4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t static PingRequest.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000B1978(a1, a2, type metadata accessor for PingRequest) & 1;
}

Swift::Int PingRequest.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for PingRequest, &qword_100908790, (void (*)(uint64_t))type metadata accessor for PingRequest);
}

uint64_t sub_1000ACAE0@<X0>(void *a1@<X8>)
{
  *a1  = 0;
  a1[1]  = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_1000ACB08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PingRequest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000ACB20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909878, (void (*)(uint64_t))type metadata accessor for PingRequest);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000ACB9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E38, (uint64_t)static PingRequest._protobuf_nameMap, a1);
}

uint64_t sub_1000ACBC0(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_100908990, (void (*)(uint64_t))type metadata accessor for PingRequest);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ACC2C()
{
  sub_1000B1E38(&qword_100908990, (void (*)(uint64_t))type metadata accessor for PingRequest);

  return Message.hash(into:)();
}

const char *PingResponse.protoMessageName.unsafeMutableAddressor()
{
  return "PingResponse";
}

uint64_t static PingResponse.protoMessageName.getter()
{
  return 0x70736552676E6950;
}

uint64_t sub_1000ACCD4(uint64_t a1)
{
  return sub_1000ACCF4(a1, static PingResponse._protobuf_nameMap, (uint64_t)"message", 7, (unsigned int *)&enum case for _NameMap.NameDescription.same(_:));
}

uint64_t sub_1000ACCF4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  sub_10008E278(v9, a2);
  sub_10008E2DC(v9, (uint64_t)a2);
  sub_100094134(&qword_100909918);
  unint64_t v10 = (int *)(sub_100094134(&qword_100909920) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16)  = xmmword_100776E40;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11)  = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + _Block_object_dispose(&STACK[0x260], 8) = a4;
  *(unsigned char *)(v13 + 16)  = 2;
  uint64_t v14 = *a5;
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t PingResponse._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_1000ACE78(&qword_100906E40, (uint64_t)static PingResponse._protobuf_nameMap);
}

uint64_t sub_1000ACE78(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();

  return sub_10008E2DC(v3, a2);
}

uint64_t static PingResponse._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1000ACEF0(&qword_100906E40, (uint64_t)static PingResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000ACEF0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_10008E2DC(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_1000ACF88()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t PingResponse.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000AC9B4(a1, a2, a3, (void (*)(void))type metadata accessor for PingResponse);
}

uint64_t static PingResponse.== infix(_:_:)(char *a1, char *a2)
{
  return sub_1000B1978(a1, a2, type metadata accessor for PingResponse) & 1;
}

Swift::Int PingResponse.hashValue.getter()
{
  return sub_1000AD09C((void (*)(void))type metadata accessor for PingResponse, &qword_100908798, (void (*)(uint64_t))type metadata accessor for PingResponse);
}

Swift::Int sub_1000AD09C(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_1000AD124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1000AD194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_1000AD204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PingResponse.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_1000AD21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000B1E38(&qword_100909870, (void (*)(uint64_t))type metadata accessor for PingResponse);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000AD298@<X0>(uint64_t a1@<X8>)
{
  return sub_1000AD2BC(&qword_100906E40, (uint64_t)static PingResponse._protobuf_nameMap, a1);
}

uint64_t sub_1000AD2BC@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_10008E2DC(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_1000AD358(uint64_t a1)
{
  uint64_t v2 = sub_1000B1E38(&qword_1009089A8, (void (*)(uint64_t))type metadata accessor for PingResponse);

  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000AD3C4()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AD41C()
{
  sub_1000B1E38(&qword_1009089A8, (void (*)(uint64_t))type metadata accessor for PingResponse);

  return Message.hash(into:)();
}

Swift::Int sub_1000AD498()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AD4EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if ((a6 & 1) == 0) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t _s7remindd22StartMigrationResponseV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v42 - v7;
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v9 = *(void *)(started - 8);
  __chkstk_darwin(started);
  uint64_t v44 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100909970);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100094134(&qword_1009086D8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *((void *)a1 + 1);
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  if (v23 != *(void *)a2 || v24 != *((void *)a2 + 1))
  {
    char v25 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v25 & 1;
    }
  }
  uint64_t v43 = v4;
  uint64_t v26 = (int *)type metadata accessor for StartMigrationResponse(0);
  sub_1000BF710((uint64_t)&v48[v26[5]], (uint64_t)v22, &qword_1009086D8);
  sub_1000BF710((uint64_t)&v49[v26[5]], (uint64_t)v20, &qword_1009086D8);
  uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_1000BF710((uint64_t)v22, (uint64_t)v13, &qword_1009086D8);
  sub_1000BF710((uint64_t)v20, v27, &qword_1009086D8);
  int v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v28((uint64_t)v13, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v20, &qword_1009086D8);
    sub_1000966BC((uint64_t)v22, &qword_1009086D8);
    if (v28(v27, 1, started) == 1)
    {
      sub_1000966BC((uint64_t)v13, &qword_1009086D8);
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  sub_1000BF710((uint64_t)v13, (uint64_t)v17, &qword_1009086D8);
  if (v28(v27, 1, started) == 1)
  {
    sub_1000966BC((uint64_t)v20, &qword_1009086D8);
    sub_1000966BC((uint64_t)v22, &qword_1009086D8);
    sub_10009B440((uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
LABEL_9:
    sub_1000966BC((uint64_t)v13, &qword_100909970);
LABEL_15:
    char v25 = 0;
    return v25 & 1;
  }
  uint64_t v29 = v44;
  sub_1000AEA7C(v27, v44, type metadata accessor for StartMigrationResponse.OneOf_Result);
  char v30 = _s7remindd22StartMigrationResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v17, v29);
  sub_10009B440(v29, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v20, &qword_1009086D8);
  sub_1000966BC((uint64_t)v22, &qword_1009086D8);
  sub_10009B440((uint64_t)v17, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v13, &qword_1009086D8);
  if ((v30 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_11:
  uint64_t v31 = v26[6];
  uint64_t v32 = v47;
  uint64_t v33 = &v48[v31];
  uint64_t v34 = *(void *)&v48[v31 + 8];
  uint64_t v35 = &v49[v31];
  uint64_t v36 = v43;
  if (*(void *)v33 == *(void *)v35 && v34 == *((void *)v35 + 1)
    || (char v25 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    uint64_t v38 = v45;
    v37(v45, &v48[v26[7]], v36);
    uint64_t v39 = v46;
    v37(v46, &v49[v26[7]], v36);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v25 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v32 + 8);
    v40(v39, v36);
    v40(v38, v36);
  }
  return v25 & 1;
}

uint64_t _s7remindd22StartMigrationResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  started  = type metadata accessor for StartMigrationResponse.Error(0);
  __chkstk_darwin(started);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StartMigrationResponse.Details(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_100094134(&qword_1009099B0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  sub_1000AEAE4(a1, (uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
  sub_1000AEAE4(a2, v19, type metadata accessor for StartMigrationResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1000AEAE4((uint64_t)v18, (uint64_t)v14, type metadata accessor for StartMigrationResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C(v19, (uint64_t)v8, type metadata accessor for StartMigrationResponse.Details);
      char v21 = sub_1000B05D4((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void, double))type metadata accessor for StartMigrationResponse.Details);
      sub_10009B440((uint64_t)v8, type metadata accessor for StartMigrationResponse.Details);
      sub_10009B440((uint64_t)v14, type metadata accessor for StartMigrationResponse.Details);
      sub_10009B440((uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
      return v21 & 1;
    }
    uint64_t v22 = type metadata accessor for StartMigrationResponse.Details;
    uint64_t v23 = (uint64_t)v14;
    goto LABEL_14;
  }
  sub_1000AEAE4((uint64_t)v18, (uint64_t)v12, type metadata accessor for StartMigrationResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v22 = type metadata accessor for StartMigrationResponse.Error;
    uint64_t v23 = (uint64_t)v12;
LABEL_14:
    sub_10009B440(v23, v22);
    sub_1000966BC((uint64_t)v18, &qword_1009099B0);
LABEL_17:
    char v21 = 0;
    return v21 & 1;
  }
  sub_1000AEA7C(v19, (uint64_t)v5, type metadata accessor for StartMigrationResponse.Error);
  BOOL v20 = *(void *)v12 == *(void *)v5 && *((void *)v12 + 1) == *((void *)v5 + 1);
  if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v12 + 4) != *((_DWORD *)v5 + 4)
    || (type metadata accessor for UnknownStorage(),
        sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.Error);
    sub_10009B440((uint64_t)v12, type metadata accessor for StartMigrationResponse.Error);
    sub_10009B440((uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_17;
  }
  sub_10009B440((uint64_t)v5, type metadata accessor for StartMigrationResponse.Error);
  sub_10009B440((uint64_t)v12, type metadata accessor for StartMigrationResponse.Error);
  sub_10009B440((uint64_t)v18, type metadata accessor for StartMigrationResponse.OneOf_Result);
  char v21 = 1;
  return v21 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v40 - v7;
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v9 = *(void *)(started - 8);
  __chkstk_darwin(started);
  uint64_t v45 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100909988);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_1009086D0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v40 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v46 = a1;
  sub_1000BF710(a1, (uint64_t)&v40 - v22, &qword_1009086D0);
  uint64_t v47 = a2;
  sub_1000BF710(a2, (uint64_t)v21, &qword_1009086D0);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000BF710((uint64_t)v23, (uint64_t)v14, &qword_1009086D0);
  sub_1000BF710((uint64_t)v21, v24, &qword_1009086D0);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, started) != 1)
  {
    sub_1000BF710((uint64_t)v14, (uint64_t)v18, &qword_1009086D0);
    if (v25(v24, 1, started) != 1)
    {
      uint64_t v26 = v45;
      sub_1000AEA7C(v24, v45, type metadata accessor for StartMigrationRequest.OneOf_Source);
      char v27 = _s7remindd21StartMigrationRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v18, v26);
      sub_10009B440(v26, type metadata accessor for StartMigrationRequest.OneOf_Source);
      sub_1000966BC((uint64_t)v21, &qword_1009086D0);
      sub_1000966BC((uint64_t)v23, &qword_1009086D0);
      sub_10009B440((uint64_t)v18, type metadata accessor for StartMigrationRequest.OneOf_Source);
      sub_1000966BC((uint64_t)v14, &qword_1009086D0);
      if ((v27 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    sub_1000966BC((uint64_t)v21, &qword_1009086D0);
    sub_1000966BC((uint64_t)v23, &qword_1009086D0);
    sub_10009B440((uint64_t)v18, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_6:
    sub_1000966BC((uint64_t)v14, &qword_100909988);
    goto LABEL_9;
  }
  sub_1000966BC((uint64_t)v21, &qword_1009086D0);
  sub_1000966BC((uint64_t)v23, &qword_1009086D0);
  if (v25(v24, 1, started) != 1) {
    goto LABEL_6;
  }
  sub_1000966BC((uint64_t)v14, &qword_1009086D0);
LABEL_8:
  uint64_t v28 = type metadata accessor for StartMigrationRequest(0);
  uint64_t v29 = v47;
  if (*(unsigned __int8 *)(v46 + *(int *)(v28 + 20)) == *(unsigned __int8 *)(v47 + *(int *)(v28 + 20)))
  {
    uint64_t v32 = v28;
    uint64_t v34 = v43;
    uint64_t v33 = v44;
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    uint64_t v36 = v41;
    v35(v41, v46 + *(int *)(v28 + 24), v44);
    uint64_t v37 = v29 + *(int *)(v32 + 24);
    uint64_t v38 = v42;
    v35(v42, v37, v33);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
    v39(v38, v33);
    v39(v36, v33);
    return v30 & 1;
  }
LABEL_9:
  char v30 = 0;
  return v30 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  started  = type metadata accessor for StartMigrationRequest.Credential(0);
  __chkstk_darwin(started - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v28 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v28 - v14);
  uint64_t v16 = sub_100094134(&qword_1009099B8);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = &v19[*(int *)(v17 + 56)];
  sub_1000AEAE4(a1, (uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
  sub_1000AEAE4(a2, (uint64_t)v20, type metadata accessor for StartMigrationRequest.OneOf_Source);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_1000AEAE4((uint64_t)v19, (uint64_t)v15, type metadata accessor for StartMigrationRequest.OneOf_Source);
    uint64_t v24 = *v15;
    uint64_t v23 = v15[1];
    if (!swift_getEnumCaseMultiPayload()) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_1000AEAE4((uint64_t)v19, (uint64_t)v10, type metadata accessor for StartMigrationRequest.OneOf_Source);
    uint64_t v24 = *v10;
    uint64_t v23 = v10[1];
    if (swift_getEnumCaseMultiPayload() == 2)
    {
LABEL_8:
      if (v24 == *(void *)v20 && v23 == *((void *)v20 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          sub_10009B440((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_16:
          char v22 = 0;
          return v22 & 1;
        }
      }
      sub_10009B440((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
      char v22 = 1;
      return v22 & 1;
    }
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_15:
    sub_1000966BC((uint64_t)v19, &qword_1009099B8);
    goto LABEL_16;
  }
  sub_1000AEAE4((uint64_t)v19, (uint64_t)v13, type metadata accessor for StartMigrationRequest.OneOf_Source);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_10009B440((uint64_t)v13, type metadata accessor for StartMigrationRequest.Credential);
    goto LABEL_15;
  }
  sub_1000AEA7C((uint64_t)v20, (uint64_t)v6, type metadata accessor for StartMigrationRequest.Credential);
  char v22 = _s7remindd21StartMigrationRequestV10CredentialV2eeoiySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v6);
  sub_10009B440((uint64_t)v6, type metadata accessor for StartMigrationRequest.Credential);
  sub_10009B440((uint64_t)v13, type metadata accessor for StartMigrationRequest.Credential);
  sub_10009B440((uint64_t)v19, type metadata accessor for StartMigrationRequest.OneOf_Source);
  return v22 & 1;
}

uint64_t _s7remindd21StartMigrationRequestV10CredentialV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*(void *)(a1 + 48) == *(void *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56)
          || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          if (*(_DWORD *)(a1 + 64) == *(_DWORD *)(a2 + 64))
          {
            started  = type metadata accessor for StartMigrationRequest.Credential(0);
            uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
            v15(v10, a1 + *(int *)(started + 36), v4);
            v15(v8, a2 + *(int *)(started + 36), v4);
            sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
            char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
            v16(v8, v4);
            v16(v10, v4);
          }
          else
          {
            char v12 = 0;
          }
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t type metadata accessor for StartMigrationResponse(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100908BF8);
}

uint64_t type metadata accessor for StartMigrationResponse.OneOf_Result(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908CB0);
}

uint64_t type metadata accessor for StartMigrationResponse.Details(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908D40);
}

uint64_t sub_1000AEA7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000AEAE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for StartMigrationResponse.Error(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908DE0);
}

uint64_t type metadata accessor for MigrateRequest.OneOf_Source(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908F38);
}

uint64_t type metadata accessor for MigrateRequest.User(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100908FC8);
}

uint64_t type metadata accessor for MigrateRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100908E78);
}

uint64_t _s7remindd17UnmigrateResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v44 - v7;
  uint64_t v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100909928);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_1009086F8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v44 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v50 = a1;
  sub_1000BF710(a1, (uint64_t)&v44 - v22, &qword_1009086F8);
  uint64_t v51 = a2;
  sub_1000BF710(a2, (uint64_t)v21, &qword_1009086F8);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000BF710((uint64_t)v23, (uint64_t)v14, &qword_1009086F8);
  sub_1000BF710((uint64_t)v21, v24, &qword_1009086F8);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v21, &qword_1009086F8);
    sub_1000966BC((uint64_t)v23, &qword_1009086F8);
    if (v25(v24, 1, v8) == 1)
    {
      sub_1000966BC((uint64_t)v14, &qword_1009086F8);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_1000BF710((uint64_t)v14, (uint64_t)v18, &qword_1009086F8);
  if (v25(v24, 1, v8) == 1)
  {
    sub_1000966BC((uint64_t)v21, &qword_1009086F8);
    sub_1000966BC((uint64_t)v23, &qword_1009086F8);
    sub_10009B440((uint64_t)v18, type metadata accessor for UnmigrateResponse.OneOf_Result);
LABEL_6:
    sub_1000966BC((uint64_t)v14, &qword_100909928);
LABEL_12:
    char v35 = 0;
    return v35 & 1;
  }
  uint64_t v26 = v45;
  sub_1000AEA7C(v24, v45, type metadata accessor for UnmigrateResponse.OneOf_Result);
  char v27 = _s7remindd17UnmigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v18, v26);
  sub_10009B440(v26, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v21, &qword_1009086F8);
  sub_1000966BC((uint64_t)v23, &qword_1009086F8);
  sub_10009B440((uint64_t)v18, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v14, &qword_1009086F8);
  if ((v27 & 1) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v28 = type metadata accessor for UnmigrateResponse(0);
  uint64_t v29 = *(int *)(v28 + 20);
  uint64_t v30 = v50;
  uint64_t v31 = v51;
  uint64_t v32 = *(void *)(v50 + v29);
  uint64_t v33 = *(void *)(v50 + v29 + 8);
  uint64_t v34 = (void *)(v51 + v29);
  if (v32 == *v34 && v33 == v34[1] || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v37 = v48;
    uint64_t v36 = v49;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 16);
    uint64_t v39 = v46;
    v38(v46, v30 + *(int *)(v28 + 24), v49);
    uint64_t v40 = v31 + *(int *)(v28 + 24);
    uint64_t v41 = v47;
    v38(v47, v40, v36);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v42 = *(void (**)(char *, uint64_t))(v37 + 8);
    v42(v41, v36);
    v42(v39, v36);
  }
  return v35 & 1;
}

uint64_t _s7remindd17UnmigrateResponseV7DetailsV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2)
  {
    uint64_t v11 = type metadata accessor for UnmigrateResponse.Details(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s7remindd17UnmigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = type metadata accessor for UnmigrateResponse.Error(0);
  __chkstk_darwin(v28);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = type metadata accessor for UnmigrateResponse.Details(0);
  __chkstk_darwin(v27);
  uint64_t v7 = (double *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  char v13 = (double *)((char *)&v27 - v12);
  uint64_t v14 = sub_100094134(&qword_100909998);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (uint64_t)&v17[*(int *)(v15 + 56)];
  sub_1000AEAE4(a1, (uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
  sub_1000AEAE4(a2, v18, type metadata accessor for UnmigrateResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1000AEAE4((uint64_t)v17, (uint64_t)v11, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1000AEA7C(v18, (uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
      BOOL v19 = *v11 == *v5 && v11[1] == v5[1];
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        type metadata accessor for UnknownStorage();
        sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v20 = type metadata accessor for UnmigrateResponse.Error;
          sub_10009B440((uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
          uint64_t v21 = (uint64_t)v11;
LABEL_17:
          sub_10009B440(v21, v20);
          sub_10009B440((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
          return 1;
        }
      }
      uint64_t v25 = type metadata accessor for UnmigrateResponse.Error;
      sub_10009B440((uint64_t)v5, type metadata accessor for UnmigrateResponse.Error);
      uint64_t v26 = (uint64_t)v11;
LABEL_20:
      sub_10009B440(v26, v25);
      sub_10009B440((uint64_t)v17, type metadata accessor for UnmigrateResponse.OneOf_Result);
      return 0;
    }
    uint64_t v22 = type metadata accessor for UnmigrateResponse.Error;
    uint64_t v23 = (uint64_t)v11;
  }
  else
  {
    sub_1000AEAE4((uint64_t)v17, (uint64_t)v13, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C(v18, (uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
      if (*v13 == *v7)
      {
        type metadata accessor for UnknownStorage();
        sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v20 = type metadata accessor for UnmigrateResponse.Details;
          sub_10009B440((uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
          uint64_t v21 = (uint64_t)v13;
          goto LABEL_17;
        }
      }
      uint64_t v25 = type metadata accessor for UnmigrateResponse.Details;
      sub_10009B440((uint64_t)v7, type metadata accessor for UnmigrateResponse.Details);
      uint64_t v26 = (uint64_t)v13;
      goto LABEL_20;
    }
    uint64_t v22 = type metadata accessor for UnmigrateResponse.Details;
    uint64_t v23 = (uint64_t)v13;
  }
  sub_10009B440(v23, v22);
  sub_1000966BC((uint64_t)v17, &qword_100909998);
  return 0;
}

uint64_t _s7remindd16UnmigrateRequestV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    uint64_t v11 = type metadata accessor for UnmigrateRequest(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 20)], v4);
    v12(v8, &a2[*(int *)(v11 + 20)], v4);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s7remindd15MigrateResponseV2eeoiySbAC_ACtFZ_0(char *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v67 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  id v65 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  os_log_type_t v64 = (char *)&v63 - v7;
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v72 = *(void *)(Step - 8);
  uint64_t v73 = Step;
  __chkstk_darwin(Step);
  uint64_t v63 = (unsigned __int8 *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100094134(&qword_100909940);
  __chkstk_darwin(v69);
  uint64_t v74 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_1009086F0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v68 = (unsigned __int8 *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v70 = (uint64_t)&v63 - v15;
  __chkstk_darwin(v14);
  uint64_t v71 = (uint64_t)&v63 - v16;
  uint64_t v17 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100094134(&qword_100909948);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v63 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100094134(&qword_1009086E8);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  uint64_t v27 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v63 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v63 - v31;
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *((void *)a1 + 1);
  unint64_t v75 = a1;
  unint64_t v76 = a2;
  if (v33 != *a2 || v34 != a2[1])
  {
    char v35 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v35 & 1;
    }
  }
  uint64_t v36 = (int *)type metadata accessor for MigrateResponse(0);
  sub_1000BF710((uint64_t)&v75[v36[5]], (uint64_t)v32, &qword_1009086E8);
  sub_1000BF710((uint64_t)v76 + v36[5], (uint64_t)v30, &qword_1009086E8);
  uint64_t v37 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_1000BF710((uint64_t)v32, (uint64_t)v23, &qword_1009086E8);
  sub_1000BF710((uint64_t)v30, v37, &qword_1009086E8);
  uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v38((uint64_t)v23, 1, v17) == 1)
  {
    sub_1000966BC((uint64_t)v30, &qword_1009086E8);
    sub_1000966BC((uint64_t)v32, &qword_1009086E8);
    if (v38(v37, 1, v17) == 1)
    {
      sub_1000966BC((uint64_t)v23, &qword_1009086E8);
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v39 = &qword_100909948;
    uint64_t v40 = (uint64_t)v23;
LABEL_17:
    sub_1000966BC(v40, v39);
    goto LABEL_18;
  }
  sub_1000BF710((uint64_t)v23, (uint64_t)v27, &qword_1009086E8);
  if (v38(v37, 1, v17) == 1)
  {
    sub_1000966BC((uint64_t)v30, &qword_1009086E8);
    sub_1000966BC((uint64_t)v32, &qword_1009086E8);
    sub_10009B440((uint64_t)v27, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_9;
  }
  sub_1000AEA7C(v37, (uint64_t)v20, type metadata accessor for MigrateResponse.OneOf_Result);
  char v41 = _s7remindd15MigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v27, (uint64_t)v20);
  sub_10009B440((uint64_t)v20, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v30, &qword_1009086E8);
  sub_1000966BC((uint64_t)v32, &qword_1009086E8);
  sub_10009B440((uint64_t)v27, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_1000966BC((uint64_t)v23, &qword_1009086E8);
  if ((v41 & 1) == 0)
  {
LABEL_18:
    char v35 = 0;
    return v35 & 1;
  }
LABEL_11:
  uint64_t v42 = v71;
  sub_1000BF710((uint64_t)&v75[v36[8]], v71, &qword_1009086F0);
  uint64_t v43 = v70;
  sub_1000BF710((uint64_t)v76 + v36[8], v70, &qword_1009086F0);
  uint64_t v44 = v74;
  uint64_t v45 = v74 + *(int *)(v69 + 48);
  sub_1000BF710(v42, v74, &qword_1009086F0);
  sub_1000BF710(v43, v45, &qword_1009086F0);
  uint64_t v46 = v73;
  uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
  if (v47(v44, 1, v73) == 1)
  {
    sub_1000966BC(v43, &qword_1009086F0);
    sub_1000966BC(v42, &qword_1009086F0);
    if (v47(v45, 1, v46) == 1)
    {
      sub_1000966BC(v44, &qword_1009086F0);
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v48 = v68;
  sub_1000BF710(v44, (uint64_t)v68, &qword_1009086F0);
  if (v47(v45, 1, v46) == 1)
  {
    sub_1000966BC(v43, &qword_1009086F0);
    sub_1000966BC(v42, &qword_1009086F0);
    sub_10009B440((uint64_t)v48, type metadata accessor for MigrateResponse.NextStep);
LABEL_16:
    uint64_t v39 = &qword_100909940;
    uint64_t v40 = v44;
    goto LABEL_17;
  }
  uint64_t v50 = v63;
  sub_1000AEA7C(v45, (uint64_t)v63, type metadata accessor for MigrateResponse.NextStep);
  StepV2eeoiySbAE_AEtFZ_0  = _s7remindd15MigrateResponseV8NextStepV2eeoiySbAE_AEtFZ_0(v48, v50);
  sub_10009B440((uint64_t)v50, type metadata accessor for MigrateResponse.NextStep);
  sub_1000966BC(v43, &qword_1009086F0);
  sub_1000966BC(v42, &qword_1009086F0);
  sub_10009B440((uint64_t)v48, type metadata accessor for MigrateResponse.NextStep);
  sub_1000966BC(v44, &qword_1009086F0);
  if ((StepV2eeoiySbAE_AEtFZ_0 & 1) == 0) {
    goto LABEL_18;
  }
LABEL_21:
  uint64_t v52 = v36[6];
  uint64_t v53 = &v75[v52];
  uint64_t v54 = *(void *)&v75[v52 + 8];
  uint64_t v55 = (void *)((char *)v76 + v52);
  if (*(void *)v53 == *v55 && v54 == v55[1] || (char v35 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v57 = v66;
    uint64_t v56 = v67;
    id v58 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    uint64_t v59 = v64;
    v58(v64, &v75[v36[7]], v67);
    id v60 = (char *)v76 + v36[7];
    uint64_t v61 = v65;
    v58(v65, v60, v56);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    os_log_type_t v62 = *(void (**)(char *, uint64_t))(v57 + 8);
    v62(v61, v56);
    v62(v59, v56);
  }
  return v35 & 1;
}

uint64_t _s7remindd15MigrateResponseV8NextStepV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*a1 == *a2
    && a1[1] == a2[1]
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
    && *((_DWORD *)a1 + 3) == *((_DWORD *)a2 + 3))
  {
    Step  = type metadata accessor for MigrateResponse.NextStep(0);
    uint64_t v12 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(Step + 36)], v4);
    v12(v8, &a2[*(int *)(Step + 36)], v4);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1000B03F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
    {
      uint64_t v15 = a3(0);
      uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v16(v12, a1 + *(int *)(v15 + 24), v6);
      v16(v10, a2 + *(int *)(v15 + 24), v6);
      sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
      v17(v10, v6);
      v17(v12, v6);
    }
    else
    {
      char v14 = 0;
    }
  }
  return v14 & 1;
}

uint64_t sub_1000B05D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, double))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  if (*(double *)a1 == *(double *)a2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16))
  {
    uint64_t v13 = a3(0, *(double *)a1);
    char v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 32), v6);
    v14(v10, a2 + *(int *)(v13 + 32), v6);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t _s7remindd15MigrateResponseV12OneOf_ResultO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = type metadata accessor for MigrateResponse.Error(0);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MigrateResponse.Details(0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  char v14 = (char *)&v25 - v13;
  uint64_t v15 = sub_100094134(&qword_1009099A0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t)&v18[*(int *)(v16 + 56)];
  sub_1000AEAE4(a1, (uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
  sub_1000AEAE4(a2, v19, type metadata accessor for MigrateResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_1000AEAE4((uint64_t)v18, (uint64_t)v14, type metadata accessor for MigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_1000AEA7C(v19, (uint64_t)v8, type metadata accessor for MigrateResponse.Details);
      char v21 = sub_1000B05D4((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(void, double))type metadata accessor for MigrateResponse.Details);
      sub_10009B440((uint64_t)v8, type metadata accessor for MigrateResponse.Details);
      sub_10009B440((uint64_t)v14, type metadata accessor for MigrateResponse.Details);
      sub_10009B440((uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
      return v21 & 1;
    }
    uint64_t v22 = type metadata accessor for MigrateResponse.Details;
    uint64_t v23 = (uint64_t)v14;
    goto LABEL_14;
  }
  sub_1000AEAE4((uint64_t)v18, (uint64_t)v12, type metadata accessor for MigrateResponse.OneOf_Result);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v22 = type metadata accessor for MigrateResponse.Error;
    uint64_t v23 = (uint64_t)v12;
LABEL_14:
    sub_10009B440(v23, v22);
    sub_1000966BC((uint64_t)v18, &qword_1009099A0);
LABEL_17:
    char v21 = 0;
    return v21 & 1;
  }
  sub_1000AEA7C(v19, (uint64_t)v5, type metadata accessor for MigrateResponse.Error);
  BOOL v20 = *(void *)v12 == *(void *)v5 && *((void *)v12 + 1) == *((void *)v5 + 1);
  if (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *((_DWORD *)v12 + 4) != *((_DWORD *)v5 + 4)
    || (type metadata accessor for UnknownStorage(),
        sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
  {
    sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.Error);
    sub_10009B440((uint64_t)v12, type metadata accessor for MigrateResponse.Error);
    sub_10009B440((uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_17;
  }
  sub_10009B440((uint64_t)v5, type metadata accessor for MigrateResponse.Error);
  sub_10009B440((uint64_t)v12, type metadata accessor for MigrateResponse.Error);
  sub_10009B440((uint64_t)v18, type metadata accessor for MigrateResponse.OneOf_Result);
  char v21 = 1;
  return v21 & 1;
}

uint64_t _s7remindd14MigrateRequestV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  char v41 = (char *)&v40 - v7;
  uint64_t v8 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134(&qword_100909960);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  char v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134(&qword_1009086E0);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  char v21 = (char *)&v40 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v46 = a1;
  sub_1000BF710(a1, (uint64_t)&v40 - v22, &qword_1009086E0);
  uint64_t v47 = a2;
  sub_1000BF710(a2, (uint64_t)v21, &qword_1009086E0);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_1000BF710((uint64_t)v23, (uint64_t)v14, &qword_1009086E0);
  sub_1000BF710((uint64_t)v21, v24, &qword_1009086E0);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    sub_1000BF710((uint64_t)v14, (uint64_t)v18, &qword_1009086E0);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v45;
      sub_1000AEA7C(v24, v45, type metadata accessor for MigrateRequest.OneOf_Source);
      char v27 = _s7remindd14MigrateRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0((uint64_t)v18, v26);
      sub_10009B440(v26, type metadata accessor for MigrateRequest.OneOf_Source);
      sub_1000966BC((uint64_t)v21, &qword_1009086E0);
      sub_1000966BC((uint64_t)v23, &qword_1009086E0);
      sub_10009B440((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
      sub_1000966BC((uint64_t)v14, &qword_1009086E0);
      if (v27) {
        goto LABEL_8;
      }
LABEL_12:
      char v37 = 0;
      return v37 & 1;
    }
    sub_1000966BC((uint64_t)v21, &qword_1009086E0);
    sub_1000966BC((uint64_t)v23, &qword_1009086E0);
    sub_10009B440((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
LABEL_6:
    sub_1000966BC((uint64_t)v14, &qword_100909960);
    goto LABEL_12;
  }
  sub_1000966BC((uint64_t)v21, &qword_1009086E0);
  sub_1000966BC((uint64_t)v23, &qword_1009086E0);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_1000966BC((uint64_t)v14, &qword_1009086E0);
LABEL_8:
  uint64_t v28 = (int *)type metadata accessor for MigrateRequest(0);
  uint64_t v29 = v47;
  if (*(_DWORD *)(v46 + v28[5]) != *(_DWORD *)(v47 + v28[5])) {
    goto LABEL_12;
  }
  uint64_t v30 = v28;
  if (*(unsigned __int8 *)(v46 + v28[6]) != *(unsigned __int8 *)(v47 + v28[6])
    || *(_DWORD *)(v46 + v28[7]) != *(_DWORD *)(v47 + v28[7]))
  {
    goto LABEL_12;
  }
  uint64_t v32 = v43;
  uint64_t v31 = v44;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v34 = v41;
  v33(v41, v46 + v28[8], v44);
  uint64_t v35 = v29 + v30[8];
  uint64_t v36 = v42;
  v33(v42, v35, v31);
  sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v38 = *(void (**)(char *, uint64_t))(v32 + 8);
  v38(v36, v31);
  v38(v34, v31);
  return v37 & 1;
}

uint64_t _s7remindd14MigrateRequestV4UserV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
  {
    uint64_t v11 = type metadata accessor for MigrateRequest.User(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v8, a2 + *(int *)(v11 + 24), v4);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s7remindd14MigrateRequestV12OneOf_SourceO21__derived_enum_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MigrateRequest.User(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t *)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (uint64_t *)((char *)&v27 - v12);
  __chkstk_darwin(v11);
  uint64_t v28 = (uint64_t)&v27 - v14;
  uint64_t v15 = sub_100094134(&qword_1009099A8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = &v18[*(int *)(v16 + 56)];
  sub_1000AEAE4(a1, (uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
  sub_1000AEAE4(a2, (uint64_t)v19, type metadata accessor for MigrateRequest.OneOf_Source);
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000AEAE4((uint64_t)v18, (uint64_t)v13, type metadata accessor for MigrateRequest.OneOf_Source);
      uint64_t v22 = *v13;
      uint64_t v21 = v13[1];
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_1000AEAE4((uint64_t)v18, (uint64_t)v10, type metadata accessor for MigrateRequest.OneOf_Source);
      uint64_t v22 = *v10;
      uint64_t v21 = v10[1];
      if (swift_getEnumCaseMultiPayload() == 2)
      {
LABEL_4:
        if (v22 == *(void *)v19 && v21 == *((void *)v19 + 1))
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0) {
            goto LABEL_22;
          }
        }
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = v28;
    sub_1000AEAE4((uint64_t)v18, v28, type metadata accessor for MigrateRequest.OneOf_Source);
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_1000AEA7C((uint64_t)v19, (uint64_t)v6, type metadata accessor for MigrateRequest.User);
      if (*(void *)v25 != *(void *)v6
        || *(_DWORD *)(v25 + 8) != *((_DWORD *)v6 + 2)
        || (type metadata accessor for UnknownStorage(),
            sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage),
            (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
      {
        sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.User);
        sub_10009B440(v25, type metadata accessor for MigrateRequest.User);
LABEL_22:
        sub_10009B440((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
        return 0;
      }
      sub_10009B440((uint64_t)v6, type metadata accessor for MigrateRequest.User);
      sub_10009B440(v25, type metadata accessor for MigrateRequest.User);
LABEL_16:
      sub_10009B440((uint64_t)v18, type metadata accessor for MigrateRequest.OneOf_Source);
      return 1;
    }
    sub_10009B440(v25, type metadata accessor for MigrateRequest.User);
  }
  sub_1000966BC((uint64_t)v18, &qword_1009099A8);
  return 0;
}

uint64_t _s7remindd13BasicResponseV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  int v11 = *(unsigned __int8 *)(a1 + 16);
  int v12 = *(unsigned __int8 *)(a2 + 16);
  if (v11 == 255)
  {
    if (v12 == 255)
    {
LABEL_13:
      uint64_t v14 = type metadata accessor for BasicResponse(0);
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v15(v10, a1 + *(int *)(v14 + 20), v4);
      v15(v8, a2 + *(int *)(v14 + 20), v4);
      sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
      return v13 & 1;
    }
    goto LABEL_5;
  }
  if (v12 == 255)
  {
LABEL_5:
    char v13 = 0;
    return v13 & 1;
  }
  if (v11)
  {
    if ((v12 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else if (v12)
  {
    goto LABEL_5;
  }
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    goto LABEL_13;
  }
  char v13 = 0;
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_13;
  }
  return v13 & 1;
}

uint64_t sub_1000B1978(char *a1, char *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int v12 = (char *)&v19 - v11;
  BOOL v13 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v13 || (char v14 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v15 = a3(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v16(v12, &a1[*(int *)(v15 + 20)], v6);
    v16(v10, &a2[*(int *)(v15 + 20)], v6);
    sub_1000B1E38(&qword_100908778, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v14 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
    v17(v10, v6);
    v17(v12, v6);
  }
  return v14 & 1;
}

uint64_t sub_1000B1B44(uint64_t result)
{
  switch(result)
  {
    case 4:
      uint64_t result = 3;
      break;
    case 8:
      uint64_t result = 4;
      break;
    case 16:
      uint64_t result = 5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for MigrateResponse(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100909060);
}

uint64_t type metadata accessor for MigrateResponse.OneOf_Result(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909128);
}

uint64_t type metadata accessor for MigrateResponse.Details(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009091B8);
}

uint64_t type metadata accessor for MigrateResponse.Error(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909258);
}

uint64_t type metadata accessor for MigrateResponse.NextStep(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009092F0);
}

uint64_t type metadata accessor for UnmigrateRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909390);
}

uint64_t sub_1000B1CB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100094134(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for UnmigrateResponse.OneOf_Result(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009094D8);
}

uint64_t type metadata accessor for UnmigrateResponse.Details(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909568);
}

uint64_t type metadata accessor for UnmigrateResponse.Error(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009095F8);
}

uint64_t type metadata accessor for UnmigrateResponse(uint64_t a1)
{
  return sub_1000B1EA0(a1, (uint64_t *)&unk_100909420);
}

uint64_t sub_1000B1D98(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1000B1DB0();
  }
  return result;
}

uint64_t sub_1000B1DB0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B1DB8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_1000B1DD0();
  }
  return result;
}

uint64_t sub_1000B1DD0()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for BasicResponse(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909718);
}

uint64_t type metadata accessor for PingRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_1009097A8);
}

uint64_t type metadata accessor for PingResponse(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909838);
}

uint64_t sub_1000B1E38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for EmptyRequest(uint64_t a1)
{
  return sub_1000B1EA0(a1, qword_100909688);
}

uint64_t sub_1000B1EA0(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1000B1EDC()
{
  unint64_t result = qword_1009087A0;
  if (!qword_1009087A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087A0);
  }
  return result;
}

unint64_t sub_1000B1F34()
{
  unint64_t result = qword_1009087A8;
  if (!qword_1009087A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087A8);
  }
  return result;
}

unint64_t sub_1000B1F8C()
{
  unint64_t result = qword_1009087B0;
  if (!qword_1009087B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087B0);
  }
  return result;
}

uint64_t sub_1000B1FE0()
{
  return sub_1000B2138(&qword_1009087B8, &qword_1009087C0);
}

unint64_t sub_1000B200C()
{
  unint64_t result = qword_1009087C8;
  if (!qword_1009087C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087C8);
  }
  return result;
}

unint64_t sub_1000B2064()
{
  unint64_t result = qword_1009087D0;
  if (!qword_1009087D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087D0);
  }
  return result;
}

unint64_t sub_1000B20BC()
{
  unint64_t result = qword_1009087D8;
  if (!qword_1009087D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1009087D8);
  }
  return result;
}

uint64_t sub_1000B2110()
{
  return sub_1000B2138(&qword_1009087E0, &qword_1009087E8);
}

uint64_t sub_1000B2138(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B2188()
{
  return sub_1000B1E38(&qword_1009087F0, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
}

uint64_t sub_1000B21D0()
{
  return sub_1000B1E38(&qword_1009087F8, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
}

uint64_t sub_1000B2218()
{
  return sub_1000B1E38(&qword_100908700, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
}

uint64_t sub_1000B2260()
{
  return sub_1000B1E38(&qword_100908800, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest);
}

uint64_t sub_1000B22A8()
{
  return sub_1000B1E38(&qword_100908808, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
}

uint64_t sub_1000B22F0()
{
  return sub_1000B1E38(&qword_100908810, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
}

uint64_t sub_1000B2338()
{
  return sub_1000B1E38(&qword_100908708, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
}

uint64_t sub_1000B2380()
{
  return sub_1000B1E38(&qword_100908818, (void (*)(uint64_t))type metadata accessor for StartMigrationRequest.Credential);
}

uint64_t sub_1000B23C8()
{
  return sub_1000B1E38(&qword_100908820, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);
}

uint64_t sub_1000B2410()
{
  return sub_1000B1E38(&qword_100908828, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);
}

uint64_t sub_1000B2458()
{
  return sub_1000B1E38(&qword_100908710, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);
}

uint64_t sub_1000B24A0()
{
  return sub_1000B1E38(&qword_100908830, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse);
}

uint64_t sub_1000B24E8()
{
  return sub_1000B1E38(&qword_100908838, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
}

uint64_t sub_1000B2530()
{
  return sub_1000B1E38(&qword_100908840, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
}

uint64_t sub_1000B2578()
{
  return sub_1000B1E38(&qword_100908718, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
}

uint64_t sub_1000B25C0()
{
  return sub_1000B1E38(&qword_100908848, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Details);
}

uint64_t sub_1000B2608()
{
  return sub_1000B1E38(&qword_100908850, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000B2650()
{
  return sub_1000B1E38(&qword_100908858, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000B2698()
{
  return sub_1000B1E38(&qword_100908720, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000B26E0()
{
  return sub_1000B1E38(&qword_100908860, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000B2728()
{
  return sub_1000B1E38(&qword_100908868, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
}

uint64_t sub_1000B2770()
{
  return sub_1000B1E38(&qword_100908870, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
}

uint64_t sub_1000B27B8()
{
  return sub_1000B1E38(&qword_100908728, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
}

uint64_t sub_1000B2800()
{
  return sub_1000B1E38(&qword_100908878, (void (*)(uint64_t))type metadata accessor for MigrateRequest);
}

uint64_t sub_1000B2848()
{
  return sub_1000B1E38(&qword_100908880, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
}

uint64_t sub_1000B2890()
{
  return sub_1000B1E38(&qword_100908888, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
}

uint64_t sub_1000B28D8()
{
  return sub_1000B1E38(&qword_100908730, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
}

uint64_t sub_1000B2920()
{
  return sub_1000B1E38(&qword_100908890, (void (*)(uint64_t))type metadata accessor for MigrateRequest.User);
}

uint64_t sub_1000B2968()
{
  return sub_1000B1E38(&qword_100908898, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
}

uint64_t sub_1000B29B0()
{
  return sub_1000B1E38(&qword_1009088A0, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
}

uint64_t sub_1000B29F8()
{
  return sub_1000B1E38(&qword_100908738, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
}

uint64_t sub_1000B2A40()
{
  return sub_1000B1E38(&qword_1009088A8, (void (*)(uint64_t))type metadata accessor for MigrateResponse);
}

uint64_t sub_1000B2A88()
{
  return sub_1000B1E38(&qword_1009088B0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000B2AD0()
{
  return sub_1000B1E38(&qword_1009088B8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000B2B18()
{
  return sub_1000B1E38(&qword_100908740, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000B2B60()
{
  return sub_1000B1E38(&qword_1009088C0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Details);
}

uint64_t sub_1000B2BA8()
{
  return sub_1000B1E38(&qword_1009088C8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000B2BF0()
{
  return sub_1000B1E38(&qword_1009088D0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000B2C38()
{
  return sub_1000B1E38(&qword_100908748, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000B2C80()
{
  return sub_1000B1E38(&qword_1009088D8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000B2CC8()
{
  return sub_1000B1E38(&qword_1009088E0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000B2D10()
{
  return sub_1000B1E38(&qword_1009088E8, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000B2D58()
{
  return sub_1000B1E38(&qword_100908750, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000B2DA0()
{
  return sub_1000B1E38(&qword_1009088F0, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
}

uint64_t sub_1000B2DE8()
{
  return sub_1000B1E38(&qword_1009088F8, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
}

uint64_t sub_1000B2E30()
{
  return sub_1000B1E38(&qword_100908900, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
}

uint64_t sub_1000B2E78()
{
  return sub_1000B1E38(&qword_100908758, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
}

uint64_t sub_1000B2EC0()
{
  return sub_1000B1E38(&qword_100908908, (void (*)(uint64_t))type metadata accessor for UnmigrateRequest);
}

uint64_t sub_1000B2F08()
{
  return sub_1000B1E38(&qword_100908910, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);
}

uint64_t sub_1000B2F50()
{
  return sub_1000B1E38(&qword_100908918, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);
}

uint64_t sub_1000B2F98()
{
  return sub_1000B1E38(&qword_100908760, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);
}

uint64_t sub_1000B2FE0()
{
  return sub_1000B1E38(&qword_100908920, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse);
}

uint64_t sub_1000B3028()
{
  return sub_1000B1E38(&qword_100908928, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000B3070()
{
  return sub_1000B1E38(&qword_100908930, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000B30B8()
{
  return sub_1000B1E38(&qword_100908768, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000B3100()
{
  return sub_1000B1E38(&qword_100908938, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Details);
}

uint64_t sub_1000B3148()
{
  return sub_1000B1E38(&qword_100908940, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
}

uint64_t sub_1000B3190()
{
  return sub_1000B1E38(&qword_100908948, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
}

uint64_t sub_1000B31D8()
{
  return sub_1000B1E38(&qword_100908770, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
}

uint64_t sub_1000B3220()
{
  return sub_1000B1E38(&qword_100908950, (void (*)(uint64_t))type metadata accessor for UnmigrateResponse.Error);
}

uint64_t sub_1000B3268()
{
  return sub_1000B1E38(&qword_100908958, (void (*)(uint64_t))type metadata accessor for EmptyRequest);
}

uint64_t sub_1000B32B0()
{
  return sub_1000B1E38(&qword_100908960, (void (*)(uint64_t))type metadata accessor for EmptyRequest);
}

uint64_t sub_1000B32F8()
{
  return sub_1000B1E38(&qword_100908780, (void (*)(uint64_t))type metadata accessor for EmptyRequest);
}

uint64_t sub_1000B3340()
{
  return sub_1000B1E38(&qword_100908968, (void (*)(uint64_t))type metadata accessor for EmptyRequest);
}

uint64_t sub_1000B3388()
{
  return sub_1000B1E38(&qword_100908970, (void (*)(uint64_t))type metadata accessor for BasicResponse);
}

uint64_t sub_1000B33D0()
{
  return sub_1000B1E38(&qword_100908978, (void (*)(uint64_t))type metadata accessor for BasicResponse);
}

uint64_t sub_1000B3418()
{
  return sub_1000B1E38(&qword_100908788, (void (*)(uint64_t))type metadata accessor for BasicResponse);
}

uint64_t sub_1000B3460()
{
  return sub_1000B1E38(&qword_100908980, (void (*)(uint64_t))type metadata accessor for BasicResponse);
}

uint64_t sub_1000B34A8()
{
  return sub_1000B1E38(&qword_100908988, (void (*)(uint64_t))type metadata accessor for PingRequest);
}

uint64_t sub_1000B34F0()
{
  return sub_1000B1E38(&qword_100908990, (void (*)(uint64_t))type metadata accessor for PingRequest);
}

uint64_t sub_1000B3538()
{
  return sub_1000B1E38(&qword_100908790, (void (*)(uint64_t))type metadata accessor for PingRequest);
}

uint64_t sub_1000B3580()
{
  return sub_1000B1E38(&qword_100908998, (void (*)(uint64_t))type metadata accessor for PingRequest);
}

uint64_t sub_1000B35C8()
{
  return sub_1000B1E38(&qword_1009089A0, (void (*)(uint64_t))type metadata accessor for PingResponse);
}

uint64_t sub_1000B3610()
{
  return sub_1000B1E38(&qword_1009089A8, (void (*)(uint64_t))type metadata accessor for PingResponse);
}

uint64_t sub_1000B3658()
{
  return sub_1000B1E38(&qword_100908798, (void (*)(uint64_t))type metadata accessor for PingResponse);
}

uint64_t sub_1000B36A0()
{
  return sub_1000B1E38(&qword_1009089B0, (void (*)(uint64_t))type metadata accessor for PingResponse);
}

uint64_t *initializeBufferWithCopyOfBuffer for StartMigrationRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
    uint64_t v8 = *(void *)(started - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, started))
    {
      uint64_t v9 = sub_100094134(&qword_1009086D0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = a2[1];
        *a1  = *a2;
        a1[1]  = v11;
        uint64_t v12 = a2[3];
        a1[2]  = a2[2];
        a1[3]  = v12;
        uint64_t v13 = a2[5];
        a1[4]  = a2[4];
        a1[5]  = v13;
        uint64_t v14 = a2[7];
        a1[6]  = a2[6];
        a1[7]  = v14;
        *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
        uint64_t v15 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        char v24 = (char *)a2 + v15;
        uint64_t v25 = (char *)a1 + v15;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v23(v25, v24, v16);
      }
      else
      {
        uint64_t v17 = a2[1];
        *a1  = *a2;
        a1[1]  = v17;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, started);
    }
    uint64_t v18 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for StartMigrationRequest(uint64_t a1, uint64_t a2)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(a1, 1, started))
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
LABEL_5:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    if (EnumCaseMultiPayload != 1)
    {
      if (EnumCaseMultiPayload) {
        goto LABEL_7;
      }
      goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = a1 + *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
LABEL_7:
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *initializeWithCopy for StartMigrationRequest(void *a1, void *a2, uint64_t a3)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(started - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, started))
  {
    uint64_t v8 = sub_100094134(&qword_1009086D0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = a2[1];
      *a1  = *a2;
      a1[1]  = v9;
      uint64_t v10 = a2[3];
      a1[2]  = a2[2];
      a1[3]  = v10;
      uint64_t v11 = a2[5];
      a1[4]  = a2[4];
      a1[5]  = v11;
      uint64_t v12 = a2[7];
      a1[6]  = a2[6];
      a1[7]  = v12;
      *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
      uint64_t v13 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v22 = (char *)a2 + v13;
      uint64_t v23 = (char *)a1 + v13;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v21(v23, v22, v14);
    }
    else
    {
      uint64_t v15 = a2[1];
      *a1  = *a2;
      a1[1]  = v15;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
  }
  uint64_t v16 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(started - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, started);
  int v10 = v8(a2, 1, started);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(void *)a1  = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16)  = *(void *)(a2 + 16);
        *(void *)(a1 + 24)  = *(void *)(a2 + 24);
        *(void *)(a1 + 32)  = *(void *)(a2 + 32);
        *(void *)(a1 + 40)  = *(void *)(a2 + 40);
        *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
        *(void *)(a1 + 56)  = *(void *)(a2 + 56);
        *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
        uint64_t v11 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        uint64_t v22 = a2 + v11;
        uint64_t v24 = a1 + v11;
        uint64_t v12 = type metadata accessor for UnknownStorage();
        uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v21(v24, v22, v12);
      }
      else
      {
        *(void *)a1  = *(void *)a2;
        *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
      goto LABEL_10;
    }
LABEL_7:
    uint64_t v13 = sub_100094134(&qword_1009086D0);
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_10;
  }
  if (v10)
  {
    sub_10009B440(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(void *)(a1 + 40)  = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
      *(void *)(a1 + 56)  = *(void *)(a2 + 56);
      *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
      uint64_t v19 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v25 = a2 + v19;
      uint64_t v26 = a1 + v19;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23(v26, v25, v20);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_10:
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *initializeWithTake for StartMigrationRequest(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(started - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, started))
  {
    uint64_t v8 = sub_100094134(&qword_1009086D0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v9 = a2[1];
      *a1  = *a2;
      a1[1]  = v9;
      long long v10 = a2[3];
      a1[2]  = a2[2];
      a1[3]  = v10;
      *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
      uint64_t v11 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
  }
  uint64_t v15 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20))  = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  started  = type metadata accessor for StartMigrationRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(started - 8);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, started);
  int v10 = v8(a2, 1, started);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_10009B440(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v18 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1  = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16)  = v18;
        long long v19 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = v19;
        *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
        uint64_t v20 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
        uint64_t v21 = a1 + v20;
        uint64_t v22 = a2 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v17 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10009B440(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
LABEL_7:
    size_t v17 = *(void *)(*(void *)(sub_100094134(&qword_1009086D0) - 8) + 64);
LABEL_8:
    memcpy((void *)a1, (const void *)a2, v17);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16)  = v11;
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = v12;
    *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
    uint64_t v13 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(v7 + 64));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, started);
LABEL_14:
  uint64_t v24 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20))  = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  uint64_t v27 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B462C);
}

uint64_t sub_1000B462C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_1009086D0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for StartMigrationRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B477C);
}

uint64_t sub_1000B477C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100094134(&qword_1009086D0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20))  = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000B48A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t initializeBufferWithCopyOfBuffer for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *(void *)a1  = *a2;
    a1  = v14 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *(void *)a1  = *a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v6;
      uint64_t v7 = a2[3];
      *(void *)(a1 + 16)  = a2[2];
      *(void *)(a1 + 24)  = v7;
      uint64_t v8 = a2[5];
      *(void *)(a1 + 32)  = a2[4];
      *(void *)(a1 + 40)  = v8;
      uint64_t v9 = a2[7];
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = a2[6];
      *(void *)(a1 + 56)  = v9;
      *(_DWORD *)(a1 + 64)  = *((_DWORD *)a2 + 16);
      uint64_t v10 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v11 = a1 + v10;
      uint64_t v17 = (uint64_t)a2 + v10;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v11, v17, v12);
    }
    else
    {
      uint64_t v15 = a2[1];
      *(void *)a1  = *a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v15;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for StartMigrationRequest.OneOf_Source(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = a1 + *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t initializeWithCopy for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16)  = *(void *)(a2 + 16);
    *(void *)(a1 + 24)  = v5;
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32)  = *(void *)(a2 + 32);
    *(void *)(a1 + 40)  = v6;
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
    *(void *)(a1 + 56)  = v7;
    *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
    uint64_t v8 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    uint64_t v13 = a2 + v8;
    uint64_t v14 = a1 + v8;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v14, v13, v9);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
    *(void *)a1  = *(void *)a2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v11;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest.OneOf_Source(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10009B440(a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16)  = *(void *)(a2 + 16);
      *(void *)(a1 + 24)  = *(void *)(a2 + 24);
      *(void *)(a1 + 32)  = *(void *)(a2 + 32);
      *(void *)(a1 + 40)  = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
      *(void *)(a1 + 56)  = *(void *)(a2 + 56);
      *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
      uint64_t v4 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v8 = a2 + v4;
      uint64_t v9 = a1 + v4;
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v6(v9, v8, v5);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for StartMigrationRequest.OneOf_Source(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = a2[1];
    *a1  = *a2;
    a1[1]  = v6;
    long long v7 = a2[3];
    a1[2]  = a2[2];
    a1[3]  = v7;
    *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
    uint64_t v8 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for StartMigrationRequest.OneOf_Source(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for StartMigrationRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = a2[1];
      *a1  = *a2;
      a1[1]  = v6;
      long long v7 = a2[3];
      a1[2]  = a2[2];
      a1[3]  = v7;
      *((_DWORD *)a1 + 16)  = *((_DWORD *)a2 + 16);
      uint64_t v8 = *(int *)(type metadata accessor for StartMigrationRequest.Credential(0) + 36);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000B4FF4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1000B5004()
{
  uint64_t result = type metadata accessor for StartMigrationRequest.Credential(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for StartMigrationRequest.Credential(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1  = *a2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16)  = a2[2];
    *(void *)(a1 + 24)  = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32)  = a2[4];
    *(void *)(a1 + 40)  = v7;
    uint64_t v8 = a2[7];
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = a2[6];
    *(void *)(a1 + 56)  = v8;
    uint64_t v9 = *(int *)(a3 + 36);
    uint64_t v10 = (uint64_t)a2 + v9;
    uint64_t v11 = a1 + v9;
    *(_DWORD *)(a1 + 64)  = *((_DWORD *)a2 + 16);
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v11, v10, v12);
  }
  return v3;
}

uint64_t destroy for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v7;
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a2 + v8;
  uint64_t v10 = a1 + v8;
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v9, v11);
  return a1;
}

uint64_t assignWithCopy for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = v5;
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64)  = *(_DWORD *)(a2 + 64);
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B5590);
}

uint64_t sub_1000B5590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for StartMigrationRequest.Credential(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B5654);
}

uint64_t sub_1000B5654(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000B56FC()
{
  return sub_1000BC110();
}

uint64_t *initializeBufferWithCopyOfBuffer for StartMigrationResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    unint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1  = *a2;
    a1[1]  = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
    uint64_t v12 = *(void *)(started - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, started))
    {
      uint64_t v14 = sub_100094134(&qword_1009086D8);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *uint64_t v9 = *v10;
      if (EnumCaseMultiPayload == 1)
      {
        v9[1]  = v10[1];
        *((_DWORD *)v9 + 4)  = *((_DWORD *)v10 + 4);
        uint64_t v17 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
        uint64_t v34 = (char *)v10 + v17;
        uint64_t v35 = (char *)v9 + v17;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        long long v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v35, v34, v18);
      }
      else
      {
        *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v10 + 8);
        *(void *)((char *)v9 + 12)  = *(void *)((char *)v10 + 12);
        uint64_t v20 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
        uint64_t v21 = (char *)v9 + v20;
        uint64_t v22 = (char *)v10 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, started);
    }
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1]  = v28;
    uint64_t v29 = (char *)v4 + v25;
    uint64_t v30 = (char *)a2 + v25;
    uint64_t v31 = type metadata accessor for UnknownStorage();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
    swift_bridgeObjectRetain();
    v32(v29, v30, v31);
  }
  return v4;
}

uint64_t destroy for StartMigrationResponse(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(started - 8) + 48))(v4, 1, started))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
    }
    else
    {
      uint64_t v6 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
    }
    uint64_t v7 = v4 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

void *initializeWithCopy for StartMigrationResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v11 = *(void *)(started - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, started))
  {
    uint64_t v13 = sub_100094134(&qword_1009086D8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *uint64_t v8 = *v9;
    if (EnumCaseMultiPayload == 1)
    {
      v8[1]  = v9[1];
      *((_DWORD *)v8 + 4)  = *((_DWORD *)v9 + 4);
      uint64_t v15 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      uint64_t v32 = (char *)v9 + v15;
      uint64_t v33 = (char *)v8 + v15;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v33, v32, v16);
    }
    else
    {
      *((unsigned char *)v8 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v9 + 8);
      *(void *)((char *)v8 + 12)  = *(void *)((char *)v9 + 12);
      uint64_t v18 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      long long v19 = (char *)v8 + v18;
      uint64_t v20 = (char *)v9 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, started);
  }
  uint64_t v22 = a3[6];
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1]  = v26;
  uint64_t v27 = (char *)a1 + v23;
  uint64_t v28 = (char *)a2 + v23;
  uint64_t v29 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
  swift_bridgeObjectRetain();
  v30(v27, v28, v29);
  return a1;
}

void *assignWithCopy for StartMigrationResponse(void *a1, void *a2, int *a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v10 = *(void *)(started - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, started);
  int v13 = v11((uint64_t)v8, 1, started);
  if (v12)
  {
    if (!v13)
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *(void *)uint64_t v7 = *(void *)v8;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
        uint64_t v15 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
        uint64_t v40 = &v8[v15];
        uint64_t v41 = v7 + v15;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v17(v41, v40, v16);
      }
      else
      {
        *(unsigned char *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = v8[8];
        *(_DWORD *)(v7 + 12)  = *((_DWORD *)v8 + 3);
        *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
        uint64_t v24 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
        uint64_t v25 = v7 + v24;
        uint64_t v26 = &v8[v24];
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, started);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v18 = sub_100094134(&qword_1009086D8);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    sub_10009B440(v7, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440(v7, type metadata accessor for StartMigrationResponse.OneOf_Result);
    int v19 = swift_getEnumCaseMultiPayload();
    *(void *)uint64_t v7 = *(void *)v8;
    if (v19 == 1)
    {
      *(void *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = *((void *)v8 + 1);
      *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      uint64_t v21 = v7 + v20;
      uint64_t v42 = &v8[v20];
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v21, v42, v22);
    }
    else
    {
      *(unsigned char *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = v8[8];
      *(_DWORD *)(v7 + 12)  = *((_DWORD *)v8 + 3);
      *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
      uint64_t v36 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      uint64_t v37 = v7 + v36;
      uint64_t v38 = &v8[v36];
      uint64_t v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v28 = a3[6];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1]  = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  return a1;
}

_OWORD *initializeWithTake for StartMigrationResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v10 = *(void *)(started - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, started))
  {
    uint64_t v11 = sub_100094134(&qword_1009086D8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _OWORD *v7 = *v8;
      *((_DWORD *)v7 + 4)  = *((_DWORD *)v8 + 4);
      uint64_t v12 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
    }
    else
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((unsigned char *)v7 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v8 + 8);
      *(void *)((char *)v7 + 12)  = *(void *)((char *)v8 + 12);
      uint64_t v12 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
    }
    int v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, started);
  }
  uint64_t v16 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6])  = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

void *assignWithTake for StartMigrationResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  started  = type metadata accessor for StartMigrationResponse.OneOf_Result(0);
  uint64_t v11 = *(void *)(started - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, started);
  int v14 = v12((uint64_t)v9, 1, started);
  if (v13)
  {
    if (!v14)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_DWORD *)(v8 + 16)  = *((_DWORD *)v9 + 4);
        uint64_t v15 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
      }
      else
      {
        *(void *)uint64_t v8 = *(void *)v9;
        *(unsigned char *)(v8 + _Block_object_dispose(&STACK[0x260], 8) = v9[8];
        *(void *)(v8 + 12)  = *(void *)(v9 + 12);
        uint64_t v15 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
      }
      uint64_t v16 = v8 + v15;
      uint64_t v17 = &v9[v15];
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, started);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v19 = sub_100094134(&qword_1009086D8);
    memcpy((void *)v8, v9, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  if (v14)
  {
    sub_10009B440(v8, type metadata accessor for StartMigrationResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440(v8, type metadata accessor for StartMigrationResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_DWORD *)(v8 + 16)  = *((_DWORD *)v9 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for StartMigrationResponse.Error(0) + 24);
    }
    else
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + _Block_object_dispose(&STACK[0x260], 8) = v9[8];
      *(void *)(v8 + 12)  = *(void *)(v9 + 12);
      uint64_t v20 = *(int *)(type metadata accessor for StartMigrationResponse.Details(0) + 32);
    }
    uint64_t v21 = v8 + v20;
    uint64_t v22 = &v9[v20];
    uint64_t v23 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1]  = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6804);
}

uint64_t sub_1000B6804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100094134(&qword_1009086D8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6948);
}

uint64_t sub_1000B6948(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100094134(&qword_1009086D8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000B6A78()
{
  sub_1000B6B68(319, (unint64_t *)&unk_100908C08, (void (*)(uint64_t))type metadata accessor for StartMigrationResponse.OneOf_Result);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000B6B68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000BA690(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t destroy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  return sub_1000BA868(a1, a2, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t initializeWithCopy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA944(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t assignWithCopy for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAAD8(a1, a2, a3, type metadata accessor for StartMigrationResponse.OneOf_Result, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t initializeWithTake for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC74(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t assignWithTake for StartMigrationResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BADFC(a1, a2, a3, type metadata accessor for StartMigrationResponse.OneOf_Result, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t sub_1000B6CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAF84(a1, a2, a3, type metadata accessor for StartMigrationResponse.Details, type metadata accessor for StartMigrationResponse.Error);
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6D44);
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6D5C);
}

uint64_t getEnumTagSinglePayload for StartMigrationResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B6D90);
}

uint64_t storeEnumTagSinglePayload for StartMigrationResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B6DA8);
}

uint64_t sub_1000B6DAC()
{
  return sub_1000BBB54();
}

uint64_t *initializeBufferWithCopyOfBuffer for MigrateRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MigrateRequest.OneOf_Source(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100094134(&qword_1009086E0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = a2[1];
        *a1  = *a2;
        a1[1]  = v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        *a1  = *a2;
        *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
        uint64_t v13 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        int v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v17 = a3[6];
    *(_DWORD *)((char *)a1 + a3[5])  = *(_DWORD *)((char *)a2 + a3[5]);
    *((unsigned char *)a1 + v17)  = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[8];
    *(_DWORD *)((char *)a1 + a3[7])  = *(_DWORD *)((char *)a2 + a3[7]);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  }
  return a1;
}

uint64_t destroy for MigrateRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!EnumCaseMultiPayload)
    {
      uint64_t v6 = a1 + *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    }
  }
  uint64_t v8 = a1 + *(int *)(a2 + 32);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *initializeWithCopy for MigrateRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134(&qword_1009086E0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1  = *a2;
      a1[1]  = v10;
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1  = *a2;
      *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
      uint64_t v11 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v15 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5])  = *(_DWORD *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + v15)  = *((unsigned char *)a2 + v15);
  uint64_t v16 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7])  = *(_DWORD *)((char *)a2 + a3[7]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

void *assignWithCopy for MigrateRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        *a1  = *a2;
        a1[1]  = a2[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        *a1  = *a2;
        *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
        uint64_t v14 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_16;
    }
LABEL_8:
    uint64_t v12 = sub_100094134(&qword_1009086E0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    int v13 = swift_getEnumCaseMultiPayload();
    if (v13 == 2)
    {
      *a1  = *a2;
      a1[1]  = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1  = *a2;
      if (v13 == 1)
      {
        a1[1]  = a2[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
        uint64_t v23 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_16:
  *(_DWORD *)((char *)a1 + a3[5])  = *(_DWORD *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + a3[6])  = *((unsigned char *)a2 + a3[6]);
  *(_DWORD *)((char *)a1 + a3[7])  = *(_DWORD *)((char *)a2 + a3[7]);
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_DWORD *initializeWithTake for MigrateRequest(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134(&qword_1009086E0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      a1[2]  = a2[2];
      uint64_t v9 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5])  = *(_DWORD *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + v13)  = *((unsigned char *)a2 + v13);
  uint64_t v14 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7])  = *(_DWORD *)((char *)a2 + a3[7]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  return a1;
}

_DWORD *assignWithTake for MigrateRequest(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MigrateRequest.OneOf_Source(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
      if (!swift_getEnumCaseMultiPayload())
      {
        *(void *)a1  = *(void *)a2;
        a1[2]  = a2[2];
        uint64_t v22 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
        uint64_t v23 = (char *)a1 + v22;
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v11 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
LABEL_7:
    size_t v11 = *(void *)(*(void *)(sub_100094134(&qword_1009086E0) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v11);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    *(void *)a1  = *(void *)a2;
    a1[2]  = a2[2];
    uint64_t v12 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  uint64_t v16 = a3[6];
  *(_DWORD *)((char *)a1 + a3[5])  = *(_DWORD *)((char *)a2 + a3[5]);
  *((unsigned char *)a1 + v16)  = *((unsigned char *)a2 + v16);
  uint64_t v17 = a3[8];
  *(_DWORD *)((char *)a1 + a3[7])  = *(_DWORD *)((char *)a2 + a3[7]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B7BA0);
}

uint64_t sub_1000B7BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_1009086E0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 254)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B7CF0);
}

uint64_t sub_1000B7CF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100094134(&qword_1009086E0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24))  = a2 + 1;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000B7E1C()
{
  sub_1000B6B68(319, (unint64_t *)&unk_100908E88, (void (*)(uint64_t))type metadata accessor for MigrateRequest.OneOf_Source);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for MigrateRequest.OneOf_Source(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1  = *a2;
    a1  = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = a2[1];
      *a1  = *a2;
      a1[1]  = v7;
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1  = *a2;
      *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
      uint64_t v9 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      unsigned int v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MigrateRequest.OneOf_Source(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!result)
  {
    uint64_t v3 = a1 + *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  return result;
}

void *initializeWithCopy for MigrateRequest.OneOf_Source(void *a1, void *a2)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = a2[1];
    *a1  = *a2;
    a1[1]  = v5;
    swift_bridgeObjectRetain();
  }
  else
  {
    *a1  = *a2;
    *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
    uint64_t v6 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for MigrateRequest.OneOf_Source(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      *a1  = *a2;
      a1[1]  = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      *a1  = *a2;
      *((_DWORD *)a1 + 2)  = *((_DWORD *)a2 + 2);
      uint64_t v5 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_DWORD *initializeWithTake for MigrateRequest.OneOf_Source(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *(void *)a1  = *(void *)a2;
    a1[2]  = a2[2];
    uint64_t v6 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_DWORD *assignWithTake for MigrateRequest.OneOf_Source(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for MigrateRequest.OneOf_Source);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      a1[2]  = a2[2];
      uint64_t v6 = *(int *)(type metadata accessor for MigrateRequest.User(0) + 24);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_1000B84D0()
{
  uint64_t result = type metadata accessor for MigrateRequest.User(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MigrateRequest.Option(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MigrateRequest.Option(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MigrateRequest.Option(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9)  = v3;
  return result;
}

uint64_t sub_1000B85C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000B85E4(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x260], 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MigrateRequest.Option()
{
  return &type metadata for MigrateRequest.Option;
}

void *initializeBufferWithCopyOfBuffer for MigrateRequest.User(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1  = *a2;
    *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for MigrateRequest.User(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B8974);
}

uint64_t sub_1000B8974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for MigrateRequest.User(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B89F8);
}

uint64_t sub_1000B89F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_1000B8A6C()
{
  return sub_1000BBB54();
}

uint64_t *initializeBufferWithCopyOfBuffer for MigrateResponse(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1  = *a2;
    a1[1]  = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unsigned int v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for MigrateResponse.OneOf_Result(0);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100094134(&qword_1009086E8);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *uint64_t v9 = *v10;
      if (EnumCaseMultiPayload == 1)
      {
        v9[1]  = v10[1];
        *((_DWORD *)v9 + 4)  = *((_DWORD *)v10 + 4);
        uint64_t v17 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
        uint64_t v40 = (char *)v10 + v17;
        uint64_t v41 = (char *)v9 + v17;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v41, v40, v18);
      }
      else
      {
        *((unsigned char *)v9 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v10 + 8);
        *(void *)((char *)v9 + 12)  = *(void *)((char *)v10 + 12);
        uint64_t v20 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
        uint64_t v21 = (char *)v9 + v20;
        uint64_t v22 = (char *)v10 + v20;
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v24 = a3[6];
    uint64_t v25 = a3[7];
    uint64_t v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1]  = v28;
    uint64_t v29 = (char *)v4 + v25;
    uint64_t v30 = (char *)a2 + v25;
    uint64_t v31 = type metadata accessor for UnknownStorage();
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
    swift_bridgeObjectRetain();
    v32(v29, v30, v31);
    uint64_t v33 = a3[8];
    uint64_t v34 = (_WORD *)((char *)v4 + v33);
    uint64_t v35 = (_WORD *)((char *)a2 + v33);
    Step  = type metadata accessor for MigrateResponse.NextStep(0);
    uint64_t v37 = *(void *)(Step - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v37 + 48))(v35, 1, Step))
    {
      uint64_t v38 = sub_100094134(&qword_1009086F0);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      *uint64_t v34 = *v35;
      *(void *)(v34 + 2)  = *(void *)(v35 + 2);
      *((_DWORD *)v34 + 3)  = *((_DWORD *)v35 + 3);
      v32((char *)v34 + *(int *)(Step + 36), (char *)v35 + *(int *)(Step + 36), v31);
      (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, Step);
    }
  }
  return v4;
}

uint64_t destroy for MigrateResponse(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
    }
    else
    {
      uint64_t v6 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
    }
    uint64_t v7 = v4 + v6;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v15(v9, v10);
  uint64_t v11 = a1 + a2[8];
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Step - 8) + 48))(v11, 1, Step);
  if (!result)
  {
    uint64_t v14 = v11 + *(int *)(Step + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v14, v10);
  }
  return result;
}

void *initializeWithCopy for MigrateResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100094134(&qword_1009086E8);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *uint64_t v8 = *v9;
    if (EnumCaseMultiPayload == 1)
    {
      v8[1]  = v9[1];
      *((_DWORD *)v8 + 4)  = *((_DWORD *)v9 + 4);
      uint64_t v15 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      uint64_t v38 = (char *)v9 + v15;
      uint64_t v39 = (char *)v8 + v15;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v39, v38, v16);
    }
    else
    {
      *((unsigned char *)v8 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v9 + 8);
      *(void *)((char *)v8 + 12)  = *(void *)((char *)v9 + 12);
      uint64_t v18 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      uint64_t v19 = (char *)v8 + v18;
      uint64_t v20 = (char *)v9 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v22 = a3[6];
  uint64_t v23 = a3[7];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1]  = v26;
  uint64_t v27 = (char *)a1 + v23;
  uint64_t v28 = (char *)a2 + v23;
  uint64_t v29 = type metadata accessor for UnknownStorage();
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
  swift_bridgeObjectRetain();
  v30(v27, v28, v29);
  uint64_t v31 = a3[8];
  uint64_t v32 = (_WORD *)((char *)a1 + v31);
  uint64_t v33 = (_WORD *)((char *)a2 + v31);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v35 = *(void *)(Step - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v35 + 48))(v33, 1, Step))
  {
    uint64_t v36 = sub_100094134(&qword_1009086F0);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    *uint64_t v32 = *v33;
    *(void *)(v32 + 2)  = *(void *)(v33 + 2);
    *((_DWORD *)v32 + 3)  = *((_DWORD *)v33 + 3);
    v30((char *)v32 + *(int *)(Step + 36), (char *)v33 + *(int *)(Step + 36), v29);
    (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, Step);
  }
  return a1;
}

void *assignWithCopy for MigrateResponse(void *a1, void *a2, int *a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *(void *)uint64_t v7 = *(void *)v8;
      if (EnumCaseMultiPayload == 1)
      {
        *(void *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = *((void *)v8 + 1);
        *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
        uint64_t v15 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
        uint64_t v50 = &v8[v15];
        uint64_t v52 = v7 + v15;
        uint64_t v16 = type metadata accessor for UnknownStorage();
        uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16);
        swift_bridgeObjectRetain();
        v17(v52, v50, v16);
      }
      else
      {
        *(unsigned char *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = v8[8];
        *(_DWORD *)(v7 + 12)  = *((_DWORD *)v8 + 3);
        *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
        uint64_t v24 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
        uint64_t v25 = v7 + v24;
        uint64_t v26 = &v8[v24];
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v18 = sub_100094134(&qword_1009086E8);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    sub_10009B440(v7, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440(v7, type metadata accessor for MigrateResponse.OneOf_Result);
    int v19 = swift_getEnumCaseMultiPayload();
    *(void *)uint64_t v7 = *(void *)v8;
    if (v19 == 1)
    {
      *(void *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = *((void *)v8 + 1);
      *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      uint64_t v21 = v7 + v20;
      uint64_t v53 = &v8[v20];
      uint64_t v22 = type metadata accessor for UnknownStorage();
      uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v21, v53, v22);
    }
    else
    {
      *(unsigned char *)(v7 + _Block_object_dispose(&STACK[0x260], 8) = v8[8];
      *(_DWORD *)(v7 + 12)  = *((_DWORD *)v8 + 3);
      *(_DWORD *)(v7 + 16)  = *((_DWORD *)v8 + 4);
      uint64_t v46 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      uint64_t v47 = v7 + v46;
      uint64_t v48 = &v8[v46];
      uint64_t v49 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v28 = a3[6];
  uint64_t v29 = (void *)((char *)a1 + v28);
  uint64_t v30 = (void *)((char *)a2 + v28);
  *uint64_t v29 = *v30;
  v29[1]  = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[7];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for UnknownStorage();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(void (**)(char *, char *))(v35 + 24);
  uint64_t v51 = v34;
  v36(v32, v33);
  uint64_t v37 = a3[8];
  uint64_t v54 = a1;
  uint64_t v38 = (uint64_t)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v41 = *(void *)(Step - 8);
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  LODWORD(v33)  = v42(v38, 1, Step);
  int v43 = v42((uint64_t)v39, 1, Step);
  if (!v33)
  {
    if (!v43)
    {
      *(unsigned char *)uint64_t v38 = *v39;
      *(unsigned char *)(v38 + 1)  = v39[1];
      *(_DWORD *)(v38 + 4)  = *((_DWORD *)v39 + 1);
      *(_DWORD *)(v38 + _Block_object_dispose(&STACK[0x260], 8) = *((_DWORD *)v39 + 2);
      *(_DWORD *)(v38 + 12)  = *((_DWORD *)v39 + 3);
      ((void (*)(uint64_t, char *, uint64_t))v36)(v38 + *(int *)(Step + 36), &v39[*(int *)(Step + 36)], v51);
      return v54;
    }
    sub_10009B440(v38, type metadata accessor for MigrateResponse.NextStep);
    goto LABEL_19;
  }
  if (v43)
  {
LABEL_19:
    uint64_t v44 = sub_100094134(&qword_1009086F0);
    memcpy((void *)v38, v39, *(void *)(*(void *)(v44 - 8) + 64));
    return v54;
  }
  *(unsigned char *)uint64_t v38 = *v39;
  *(unsigned char *)(v38 + 1)  = v39[1];
  *(_DWORD *)(v38 + 4)  = *((_DWORD *)v39 + 1);
  *(_DWORD *)(v38 + _Block_object_dispose(&STACK[0x260], 8) = *((_DWORD *)v39 + 2);
  *(_DWORD *)(v38 + 12)  = *((_DWORD *)v39 + 3);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v38 + *(int *)(Step + 36), &v39[*(int *)(Step + 36)], v51);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, Step);
  return v54;
}

_OWORD *initializeWithTake for MigrateResponse(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1  = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100094134(&qword_1009086E8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _OWORD *v7 = *v8;
      *((_DWORD *)v7 + 4)  = *((_DWORD *)v8 + 4);
      uint64_t v12 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
    }
    else
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((unsigned char *)v7 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)v8 + 8);
      *(void *)((char *)v7 + 12)  = *(void *)((char *)v8 + 12);
      uint64_t v12 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
    }
    int v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v16 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6])  = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UnknownStorage();
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
  v20(v17, v18, v19);
  uint64_t v21 = a3[8];
  uint64_t v22 = (_WORD *)((char *)a1 + v21);
  uint64_t v23 = (_WORD *)((char *)a2 + v21);
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v25 = *(void *)(Step - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, Step))
  {
    uint64_t v26 = sub_100094134(&qword_1009086F0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    *uint64_t v22 = *v23;
    *(void *)(v22 + 2)  = *(void *)(v23 + 2);
    *((_DWORD *)v22 + 3)  = *((_DWORD *)v23 + 3);
    v20((char *)v22 + *(int *)(Step + 36), (char *)v23 + *(int *)(Step + 36), v19);
    (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, Step);
  }
  return a1;
}

void *assignWithTake for MigrateResponse(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for MigrateResponse.OneOf_Result(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        *(_DWORD *)(v8 + 16)  = *((_DWORD *)v9 + 4);
        uint64_t v15 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
      }
      else
      {
        *(void *)uint64_t v8 = *(void *)v9;
        *(unsigned char *)(v8 + _Block_object_dispose(&STACK[0x260], 8) = v9[8];
        *(void *)(v8 + 12)  = *(void *)(v9 + 12);
        uint64_t v15 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
      }
      uint64_t v16 = v8 + v15;
      uint64_t v17 = &v9[v15];
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v19 = sub_100094134(&qword_1009086E8);
    memcpy((void *)v8, v9, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_14;
  }
  if (v14)
  {
    sub_10009B440(v8, type metadata accessor for MigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440(v8, type metadata accessor for MigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *(_DWORD *)(v8 + 16)  = *((_DWORD *)v9 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for MigrateResponse.Error(0) + 24);
    }
    else
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + _Block_object_dispose(&STACK[0x260], 8) = v9[8];
      *(void *)(v8 + 12)  = *(void *)(v9 + 12);
      uint64_t v20 = *(int *)(type metadata accessor for MigrateResponse.Details(0) + 32);
    }
    uint64_t v21 = v8 + v20;
    uint64_t v22 = &v9[v20];
    uint64_t v23 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v24 = a3[6];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1]  = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UnknownStorage();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(void (**)(char *, char *))(v33 + 40);
  uint64_t v44 = v32;
  v34(v30, v31);
  uint64_t v35 = a3[8];
  uint64_t v45 = a1;
  uint64_t v36 = (uint64_t)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  Step  = type metadata accessor for MigrateResponse.NextStep(0);
  uint64_t v39 = *(void *)(Step - 8);
  uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
  LODWORD(v31)  = v40(v36, 1, Step);
  int v41 = v40((uint64_t)v37, 1, Step);
  if (!v31)
  {
    if (!v41)
    {
      *(unsigned char *)uint64_t v36 = *v37;
      *(unsigned char *)(v36 + 1)  = v37[1];
      *(void *)(v36 + 4)  = *(void *)(v37 + 4);
      *(_DWORD *)(v36 + 12)  = *((_DWORD *)v37 + 3);
      ((void (*)(uint64_t, char *, uint64_t))v34)(v36 + *(int *)(Step + 36), &v37[*(int *)(Step + 36)], v44);
      return v45;
    }
    sub_10009B440(v36, type metadata accessor for MigrateResponse.NextStep);
    goto LABEL_19;
  }
  if (v41)
  {
LABEL_19:
    uint64_t v42 = sub_100094134(&qword_1009086F0);
    memcpy((void *)v36, v37, *(void *)(*(void *)(v42 - 8) + 64));
    return v45;
  }
  *(_WORD *)uint64_t v36 = *(_WORD *)v37;
  *(void *)(v36 + 4)  = *(void *)(v37 + 4);
  *(_DWORD *)(v36 + 12)  = *((_DWORD *)v37 + 3);
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v36 + *(int *)(Step + 36), &v37[*(int *)(Step + 36)], v44);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, Step);
  return v45;
}

uint64_t getEnumTagSinglePayload for MigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA208);
}

uint64_t sub_1000BA208(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_100094134(&qword_1009086E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[5];
LABEL_9:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = sub_100094134(&qword_1009086F0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];

  return v15(v17, a2, v16);
}

uint64_t storeEnumTagSinglePayload for MigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA39C);
}

uint64_t sub_1000BA39C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_100094134(&qword_1009086E8);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
LABEL_7:
    int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = sub_100094134(&qword_1009086F0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];

  return v15(v17, a2, a2, v16);
}

void sub_1000BA51C()
{
  sub_1000B6B68(319, &qword_100909070, (void (*)(uint64_t))type metadata accessor for MigrateResponse.OneOf_Result);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F)
    {
      sub_1000B6B68(319, (unint64_t *)&unk_100909078, (void (*)(uint64_t))type metadata accessor for MigrateResponse.NextStep);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1000BA690(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BA690(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  int v7 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v7 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *(void *)a1  = *a2;
    a1  = v16 + ((v7 + 16) & ~(unint64_t)v7);
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *(void *)a1  = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = a2[1];
      *(_DWORD *)(a1 + 16)  = *((_DWORD *)a2 + 4);
      uint64_t v11 = *(int *)(a5(0) + 24);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = (uint64_t)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    else
    {
      *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 12)  = *(uint64_t *)((char *)a2 + 12);
      uint64_t v17 = *(int *)(a4(0) + 32);
      uint64_t v18 = a1 + v17;
      uint64_t v19 = (uint64_t)a2 + v17;
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  return sub_1000BA868(a1, a2, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BA868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(int *)(a4(0) + 24);
  }
  else
  {
    uint64_t v7 = *(int *)(a3(0) + 32);
  }
  uint64_t v8 = a1 + v7;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t initializeWithCopy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA944(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BA944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  *(void *)a1  = *(void *)a2;
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
    uint64_t v10 = *(int *)(a5(0) + 24);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  else
  {
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 12)  = *(void *)(a2 + 12);
    uint64_t v15 = *(int *)(a4(0) + 32);
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAAD8(a1, a2, a3, type metadata accessor for MigrateResponse.OneOf_Result, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BAAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  if (a1 != a2)
  {
    sub_10009B440(a1, a4);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *(void *)a1  = *(void *)a2;
    if (EnumCaseMultiPayload == 1)
    {
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
      uint64_t v11 = *(int *)(a6(0) + 24);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    else
    {
      *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
      *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
      uint64_t v16 = *(int *)(a5(0) + 32);
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAC74(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BAC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
    uint64_t v9 = *(int *)(a5(0) + 24);
  }
  else
  {
    *(void *)a1  = *(void *)a2;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 12)  = *(void *)(a2 + 12);
    uint64_t v9 = *(int *)(a4(0) + 32);
  }
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for MigrateResponse.OneOf_Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BADFC(a1, a2, a3, type metadata accessor for MigrateResponse.OneOf_Result, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BADFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  if (a1 != a2)
  {
    sub_10009B440(a1, a4);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
      uint64_t v10 = *(int *)(a6(0) + 24);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 12)  = *(void *)(a2 + 12);
      uint64_t v10 = *(int *)(a5(0) + 32);
    }
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000BAF58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAF84(a1, a2, a3, type metadata accessor for MigrateResponse.Details, type metadata accessor for MigrateResponse.Error);
}

uint64_t sub_1000BAF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *_s7remindd22StartMigrationResponseV7DetailsVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1  = *a2;
    *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 12)  = *(uint64_t *)((char *)a2 + 12);
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12)  = *(void *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12)  = *(void *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV7DetailsVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(unsigned char *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12)  = *(void *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BB3E4);
}

uint64_t sub_1000BB3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BB4AC);
}

uint64_t sub_1000BB4B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + _Block_object_dispose(&STACK[0x260], 8) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000BB554()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *_s7remindd22StartMigrationResponseV5ErrorVwCP_0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1  = *a2;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v5;
    *(_DWORD *)(a1 + 16)  = *((_DWORD *)a2 + 4);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwcp_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwca_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwtk_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t _s7remindd22StartMigrationResponseV5ErrorVwta_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16)  = *(_DWORD *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BB9E0);
}

uint64_t sub_1000BB9E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BBAA8);
}

uint64_t sub_1000BBAAC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000BBB54()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MigrateResponse.NextStep(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1  = *(_WORD *)a2;
    *(void *)(a1 + 4)  = *(uint64_t *)((char *)a2 + 4);
    *(_DWORD *)(a1 + 12)  = *((_DWORD *)a2 + 3);
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 4)  = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(_DWORD *)(a1 + 4)  = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1  = *(_WORD *)a2;
  *(void *)(a1 + 4)  = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1  = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1)  = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 4)  = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12)  = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BBF90);
}

uint64_t sub_1000BBF90(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 36)];
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for MigrateResponse.NextStep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BC054);
}

unsigned char *sub_1000BC054(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 36)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000BC0F8()
{
  return sub_1000BC110();
}

uint64_t sub_1000BC110()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1  = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    int v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

_DWORD *initializeWithCopy for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for UnmigrateRequest(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  int v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BC488);
}

uint64_t storeEnumTagSinglePayload for UnmigrateRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BC4A0);
}

uint64_t sub_1000BC4A4()
{
  return sub_1000BF5D8();
}

ValueMetadata *type metadata accessor for UnmigrateRequest.Option()
{
  return &type metadata for UnmigrateRequest.Option;
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100094134(&qword_1009086F8);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *a1  = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        a1[1]  = a2[1];
        uint64_t v12 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
        uint64_t v30 = (char *)a1 + v12;
        uint64_t v13 = (char *)a2 + v12;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v30, v13, v14);
      }
      else
      {
        uint64_t v16 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v20 = *(int *)(a3 + 20);
    uint64_t v21 = *(int *)(a3 + 24);
    uint64_t v22 = (uint64_t *)((char *)a1 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1]  = v24;
    uint64_t v25 = (char *)a1 + v21;
    uint64_t v26 = (char *)a2 + v21;
    uint64_t v27 = type metadata accessor for UnknownStorage();
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_bridgeObjectRetain();
    v28(v25, v26, v27);
  }
  return a1;
}

uint64_t destroy for UnmigrateResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = type metadata accessor for UnmigrateResponse.Error(0);
    }
    else
    {
      uint64_t v5 = type metadata accessor for UnmigrateResponse.Details(0);
    }
    uint64_t v6 = a1 + *(int *)(v5 + 20);
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

void *initializeWithCopy for UnmigrateResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134(&qword_1009086F8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *a1  = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1]  = a2[1];
      uint64_t v10 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      uint64_t v28 = (char *)a1 + v10;
      uint64_t v11 = (char *)a2 + v10;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_bridgeObjectRetain();
      v13(v28, v11, v12);
    }
    else
    {
      uint64_t v14 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = (void *)((char *)a1 + v18);
  uint64_t v21 = (void *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1]  = v22;
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (char *)a2 + v19;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  v26(v23, v24, v25);
  return a1;
}

void *assignWithCopy for UnmigrateResponse(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
      *a1  = *a2;
      if (EnumCaseMultiPayload == 1)
      {
        a1[1]  = a2[1];
        uint64_t v12 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
        uint64_t v39 = (char *)a1 + v12;
        uint64_t v13 = (char *)a2 + v12;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        v15(v39, v13, v14);
      }
      else
      {
        uint64_t v23 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v16 = sub_100094134(&qword_1009086F8);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    int v17 = swift_getEnumCaseMultiPayload();
    *a1  = *a2;
    if (v17 == 1)
    {
      a1[1]  = a2[1];
      uint64_t v18 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UnknownStorage();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
    }
    else
    {
      uint64_t v35 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16))(v36, v37, v38);
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v27 = *(int *)(a3 + 20);
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1]  = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(a3 + 24);
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  return a1;
}

_OWORD *initializeWithTake for UnmigrateResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100094134(&qword_1009086F8);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1  = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      uint64_t v9 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    }
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 24);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20))  = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

_OWORD *assignWithTake for UnmigrateResponse(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UnmigrateResponse.OneOf_Result(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        *a1  = *a2;
        uint64_t v11 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      }
      else
      {
        *(void *)a1  = *(void *)a2;
        uint64_t v11 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      }
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v15 = sub_100094134(&qword_1009086F8);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_14;
  }
  if (v10)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1  = *a2;
      uint64_t v16 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      uint64_t v16 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    }
    int v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    swift_storeEnumTagMultiPayload();
  }
LABEL_14:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1]  = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(a3 + 24);
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BD4D0);
}

uint64_t sub_1000BD4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_1009086F8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10)  = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BD618);
}

uint64_t sub_1000BD618(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100094134(&qword_1009086F8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_1000BD74C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000BD774(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  sub_1000B6B68(319, a4, a5);
  if (v5 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v6 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse.OneOf_Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1  = *a2;
    a1  = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *a1  = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1]  = a2[1];
      uint64_t v7 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
    }
    else
    {
      uint64_t v13 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for UnmigrateResponse.OneOf_Result(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = type metadata accessor for UnmigrateResponse.Error(0);
  }
  else
  {
    uint64_t v2 = type metadata accessor for UnmigrateResponse.Details(0);
  }
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

void *initializeWithCopy for UnmigrateResponse.OneOf_Result(void *a1, void *a2)
{
  EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
  *a1  = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    a1[1]  = a2[1];
    uint64_t v5 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  else
  {
    uint64_t v10 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for UnmigrateResponse.OneOf_Result(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    EnumCaseMultiPayload  = swift_getEnumCaseMultiPayload();
    *a1  = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      a1[1]  = a2[1];
      uint64_t v5 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
      unint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
    }
    else
    {
      uint64_t v10 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for UnmigrateResponse.OneOf_Result(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1  = *a2;
    uint64_t v4 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
  }
  else
  {
    *(void *)a1  = *(void *)a2;
    uint64_t v4 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
  }
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for UnmigrateResponse.OneOf_Result(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_10009B440((uint64_t)a1, type metadata accessor for UnmigrateResponse.OneOf_Result);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1  = *a2;
      uint64_t v4 = *(int *)(type metadata accessor for UnmigrateResponse.Error(0) + 20);
    }
    else
    {
      *(void *)a1  = *(void *)a2;
      uint64_t v4 = *(int *)(type metadata accessor for UnmigrateResponse.Details(0) + 20);
    }
    uint64_t v5 = (char *)a1 + v4;
    unint64_t v6 = (char *)a2 + v4;
    uint64_t v7 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s7remindd21StartMigrationRequestV12OneOf_SourceOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s7remindd21StartMigrationRequestV12OneOf_SourceOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000BDF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BAF84(a1, a2, a3, type metadata accessor for UnmigrateResponse.Details, type metadata accessor for UnmigrateResponse.Error);
}

uint64_t *initializeBufferWithCopyOfBuffer for UnmigrateResponse.Details(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1  = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t _s7remindd16UnmigrateRequestVwxx_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *initializeWithCopy for UnmigrateResponse.Details(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *assignWithCopy for UnmigrateResponse.Details(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *initializeWithTake for UnmigrateResponse.Details(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for UnmigrateResponse.Details(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE2E4);
}

uint64_t sub_1000BE2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse.Details(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE36C);
}

uint64_t sub_1000BE370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_1000BE3E4()
{
  return sub_1000BF5D8();
}

uint64_t getEnumTagSinglePayload for UnmigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE420);
}

uint64_t storeEnumTagSinglePayload for UnmigrateResponse.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE438);
}

uint64_t sub_1000BE43C()
{
  return sub_1000BF5D8();
}

uint64_t initializeBufferWithCopyOfBuffer for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t destroy for EmptyRequest(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UnknownStorage();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for EmptyRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmptyRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BE6BC);
}

uint64_t sub_1000BE6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for EmptyRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BE73C);
}

uint64_t sub_1000BE73C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000BE7AC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BasicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v7 = *((unsigned __int8 *)a2 + 16);
    if (v7 == 255)
    {
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
    }
    else
    {
      char v9 = v7 & 1;
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      sub_1000B1DB0();
      *(void *)uint64_t v4 = v10;
      *(void *)(v4 + _Block_object_dispose(&STACK[0x260], 8) = v11;
      *(unsigned char *)(v4 + 16)  = v9;
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = v4 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return v4;
}

uint64_t destroy for BasicResponse(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255) {
    sub_1000B1DD0();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for BasicResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 == 255)
  {
    *(_OWORD *)a1  = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
  }
  else
  {
    char v7 = v6 & 1;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    sub_1000B1DB0();
    *(void *)a1  = v8;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v9;
    *(unsigned char *)(a1 + 16)  = v7;
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (uint64_t)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t assignWithCopy for BasicResponse(uint64_t a1, long long *a2, uint64_t a3)
{
  int v6 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v6 == 255)
    {
      long long v8 = *a2;
      *(unsigned char *)(a1 + 16)  = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1  = v8;
    }
    else
    {
      char v12 = v6 & 1;
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *((void *)a2 + 1);
      sub_1000B1DB0();
      *(void *)a1  = v13;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v14;
      *(unsigned char *)(a1 + 16)  = v12;
    }
  }
  else if (v6 == 255)
  {
    sub_1000BEBBC(a1);
    char v7 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1  = *a2;
    *(unsigned char *)(a1 + 16)  = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *(void *)a2;
    uint64_t v11 = *((void *)a2 + 1);
    sub_1000B1DB0();
    *(void *)a1  = v10;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v11;
    *(unsigned char *)(a1 + 16)  = v9;
    sub_1000B1DD0();
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000BEBBC(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 16);
    if (v6 != 255)
    {
      *(_OWORD *)a1  = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16)  = v6 & 1;
      sub_1000B1DD0();
      goto LABEL_6;
    }
    sub_1000BEBBC(a1);
  }
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16)  = *(unsigned char *)(a2 + 16);
LABEL_6:
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BED54);
}

uint64_t sub_1000BED54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 253)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 <= 1) {
      return 0;
    }
    else {
      return v4 ^ 0xFF;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BasicResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BEE10);
}

uint64_t sub_1000BEE10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 253)
  {
    *(unsigned char *)(result + 16)  = ~(_BYTE)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000BEEB4()
{
  return sub_1000BF5D8();
}

uint64_t destroy for BasicResponse.OneOf_Result()
{
  return sub_1000B1DD0();
}

uint64_t _s7remindd13BasicResponseV12OneOf_ResultOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000B1DB0();
  *(void *)a1  = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  return a1;
}

uint64_t assignWithCopy for BasicResponse.OneOf_Result(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  sub_1000B1DB0();
  *(void *)a1  = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(unsigned char *)(a1 + 16)  = v5;
  sub_1000B1DD0();
  return a1;
}

__n128 initializeWithTake for BasicResponse.OneOf_Result(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0]  = a2[1].n128_u8[0];
  *a1  = result;
  return result;
}

uint64_t assignWithTake for BasicResponse.OneOf_Result(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16)  = v3;
  sub_1000B1DD0();
  return a1;
}

uint64_t getEnumTagSinglePayload for BasicResponse.OneOf_Result(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BasicResponse.OneOf_Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000BF060(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1000BF068(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16)  = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BasicResponse.OneOf_Result()
{
  return &type metadata for BasicResponse.OneOf_Result;
}

uint64_t getEnumTagSinglePayload for PingRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BF098);
}

uint64_t storeEnumTagSinglePayload for PingRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BF0B0);
}

uint64_t *_s7remindd17UnmigrateResponseV5ErrorVwCP_0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1  = *a2;
    a1[1]  = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t _s7remindd17UnmigrateResponseV5ErrorVwxx_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *_s7remindd17UnmigrateResponseV5ErrorVwcp_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *_s7remindd17UnmigrateResponseV5ErrorVwca_0(void *a1, void *a2, uint64_t a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *_s7remindd17UnmigrateResponseV5ErrorVwtk_0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1  = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *_s7remindd17UnmigrateResponseV5ErrorVwta_0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PingResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BF464);
}

uint64_t sub_1000BF468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PingResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BF52C);
}

uint64_t sub_1000BF530(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000BF5D8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1000BF668()
{
  unint64_t result = qword_100909908;
  if (!qword_100909908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909908);
  }
  return result;
}

unint64_t sub_1000BF6BC()
{
  unint64_t result = qword_100909910;
  if (!qword_100909910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909910);
  }
  return result;
}

uint64_t sub_1000BF710(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100094134(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

id static REMCDSmartListSection.fetchRequest()()
{
  id v1 = [v0 cdEntityName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithEntityName:v3];

  return v4;
}

void *sub_1000BF848(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UnfairLock.Options();
  __chkstk_darwin(v6);
  a3[2]  = 0xD00000000000001ALL;
  a3[3]  = 0x80000001007C81F0;
  a3[7]  = 0;
  type metadata accessor for RDTransactionRegistrar();
  uint64_t v7 = (void *)swift_allocObject();
  void v7[4] = 0;
  void v7[5] = 0;
  v7[2]  = 0xD00000000000003FLL;
  v7[3]  = 0x80000001007C8210;
  sub_1000BFE64((unint64_t *)&qword_100908278, (void (*)(uint64_t))&type metadata accessor for UnfairLock.Options);
  sub_100094134(&qword_100908280);
  sub_1000BFEAC((unint64_t *)&qword_100908288, &qword_100908280);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for UnfairLock();
  swift_allocObject();
  v7[6]  = UnfairLock.init(options:)();
  a3[8]  = v7;
  a3[4]  = a1;
  a3[5]  = &off_1008C89F0;
  a3[6]  = a2;
  return a3;
}

uint64_t sub_1000BF9FC(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  uint64_t v31 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009099C0);
  uint64_t v10 = type metadata accessor for REMWidgetRefresh.WidgetKind();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16)  = xmmword_100776E40;
  (*(void (**)(unint64_t, void, uint64_t))(v11 + 104))(v13 + v12, enum case for REMWidgetRefresh.WidgetKind.widgetForAnyList(_:), v10);
  type metadata accessor for RDIntentsRelevantShortcutsHandler();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16)  = v13;
  type metadata accessor for RDRelevantShortcutsProcessor();
  uint64_t v15 = (void *)swift_allocObject();
  swift_retain();
  id v16 = a1;
  uint64_t v17 = sub_1000BF848(v14, (uint64_t)v16, v15);
  swift_retain();
  uint64_t v18 = sub_100308CC0(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v20 = v18[2];
  unint64_t v19 = v18[3];
  if (v20 >= v19 >> 1) {
    uint64_t v18 = sub_100308CC0((void *)(v19 > 1), v20 + 1, 1, v18);
  }
  v18[2]  = v20 + 1;
  uint64_t v21 = &v18[2 * v20];
  void v21[4] = v17;
  v21[5]  = &off_1008BF858;
  type metadata accessor for RDTimelineEngine();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 4_Block_object_dispose(&STACK[0x260], 8) = 0u;
  *(_OWORD *)(v22 + 64)  = 0u;
  *(_OWORD *)(v22 + 80)  = 0u;
  *(unsigned char *)(v22 + 96)  = 0;
  *(void *)(v22 + 16)  = v16;
  *(void *)(v22 + 24)  = a2;
  *(void *)(v22 + 32)  = v18;
  *(void *)(v22 + 40)  = 60;
  aBlock[4]  = sub_1000BFE48;
  aBlock[5]  = v22;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8A28;
  uint64_t v23 = _Block_copy(aBlock);
  v16;
  id v24 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_1000BFE64((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000BFEAC((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v25 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v25);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  swift_release();
  return v22;
}

uint64_t sub_1000BFE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000BFE5C()
{
  return swift_release();
}

uint64_t sub_1000BFE64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BFEAC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BFEFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_1009099C8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_1009099C8);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  NSString v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000BFFC4()
{
  Swift::Int v0 = sub_10032D9A0((uint64_t)&off_1008B1238);
  uint64_t result = swift_arrayDestroy();
  qword_100941FB0  = v0;
  return result;
}

uint64_t sub_1000C0010(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v31 = (unint64_t)(63 - v6) >> 6;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    while (1)
    {
      int64_t v12 = v11;
      if (!v8) {
        break;
      }
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_31;
      }
    }
    int64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_50;
    }
    if (v15 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v15);
    ++v11;
    if (!v16)
    {
      int64_t v11 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v33 + 8 * v11);
      if (!v16)
      {
        int64_t v11 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v33 + 8 * v11);
        if (!v16) {
          break;
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_31:
      uint64_t v18 = (uint64_t *)(*(void *)(v32 + 48) + 16 * v14);
      uint64_t v20 = *v18;
      uint64_t v19 = v18[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v21 = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v23 = v21 & ~v22;
      if ((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23))
      {
        uint64_t v24 = *(void *)(v5 + 48);
        uint64_t v25 = (void *)(v24 + 16 * v23);
        BOOL v26 = *v25 == v20 && v25[1] == v19;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_44:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v30 = 0;
LABEL_45:
          sub_1000C1AF8();
          return v30;
        }
        uint64_t v27 = ~v22;
        while (1)
        {
          unint64_t v23 = (v23 + 1) & v27;
          if (((*(void *)(v9 + ((v23 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v23) & 1) == 0) {
            break;
          }
          uint64_t v28 = (void *)(v24 + 16 * v23);
          BOOL v29 = *v28 == v20 && v28[1] == v19;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_44;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v31)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v30 = 1;
    goto LABEL_45;
  }
  unint64_t v16 = *(void *)(v33 + 8 * v17);
  if (v16)
  {
    int64_t v11 = v12 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= v31) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v33 + 8 * v11);
    ++v17;
    if (v16) {
      goto LABEL_30;
    }
  }
LABEL_50:
  __break(1u);
  return result;
}

id sub_1000C02F4()
{
  id v1 = [*v0 languageHypothesisThresholdForPrimaryLanguage];

  return v1;
}

id sub_1000C032C()
{
  id v1 = [*v0 languageHypothesisThresholdForAdditionalLanguages];

  return v1;
}

uint64_t sub_1000C0364()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self daemonUserDefaults];
  id v5 = [v4 preferredLocalizations];

  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v6 + 16))
  {
    swift_bridgeObjectRelease();
LABEL_5:
    static Locale.current.getter();
    uint64_t v7 = Locale.identifier.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return v7;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v7;
}

float sub_1000C04C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, float a8)
{
  if (a4 == a6 && a5 == a7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v18 = sub_1001E2A94(a6, a7, 1, 0);
  if (v8) {
    return a8;
  }
  if (v18[2] <= a1)
  {
    swift_bridgeObjectRelease();
    if (qword_100906E48 == -1) {
      goto LABEL_11;
    }
  }
  else
  {
    if ((a1 & 0x8000000000000000) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a8;
    }
    __break(1u);
  }
  swift_once();
LABEL_11:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_1009099C8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  type  = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, type))
  {
    log  = v20;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315650;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a2, a3, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12)  = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a4, a5, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 22)  = 2080;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a6, a7, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "convert(prediction:from:to:) skip: %s, %s, %s", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
LABEL_4:
  swift_bridgeObjectRetain();
  return a8;
}

void sub_1000C0814(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v64 = a5;
  uint64_t v68 = a1;
  uint64_t v69 = type metadata accessor for Locale.Components();
  uint64_t v8 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a3;
  uint64_t v11 = Array<A>.removingDuplicates()();
  int64_t v12 = *(void *)(v11 + 16);
  unint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v67 = (void *)v11;
  if (v12)
  {
    uint64_t v14 = v11;
    uint64_t v65 = a2;
    uint64_t v66 = a4;
    uint64_t v70 = _swiftEmptyArrayStorage;
    sub_1001DE0F8(0, v12, 0);
    int64_t v15 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v16 = v14 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      Locale.Components.init(identifier:)();
      v17._rawValue  = Locale.Components.rem_language()()._rawValue;
      (*v15)(v10, v69);
      swift_bridgeObjectRelease();
      unint64_t v13 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DE0F8(0, v13[2] + 1, 1);
        unint64_t v13 = v70;
      }
      unint64_t v19 = v13[2];
      unint64_t v18 = v13[3];
      if (v19 >= v18 >> 1)
      {
        sub_1001DE0F8(v18 > 1, v19 + 1, 1);
        unint64_t v13 = v70;
      }
      v16 += 16;
      void v13[2] = v19 + 1;
      v13[v19 + 4]  = v17._rawValue;
      --v12;
    }
    while (v12);
    a4  = v66;
  }
  id v20 = [objc_allocWithZone((Class)NLLanguageRecognizer) init];
  type metadata accessor for NLLanguage(0);
  isa  = Array._bridgeToObjectiveC()().super.isa;
  [v20 setLanguageConstraints:isa];

  NSString v22 = String._bridgeToObjectiveC()();
  [v20 processString:v22];

  uint64_t v23 = NLLanguageRecognizer.languageHypotheses(withMaximum:)();
  uint64_t v24 = a4[3];
  uint64_t v25 = a4[4];
  sub_1000C0DE0(a4, v24);
  BOOL v26 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
  uint64_t v27 = a4[3];
  uint64_t v28 = a4[4];
  sub_1000C0DE0(a4, v27);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
  uint64_t v30 = (void *)v29;
  int64_t v31 = v67;
  uint64_t v32 = v67[2];
  if (!v32 || (uint64_t v33 = v13[2], v34 = v64, !v33))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v61 = v26;
  os_log_type_t v62 = (void *)v29;
  uint64_t v65 = v23;
  id v60 = v20;
  uint64_t v35 = v67[4];
  uint64_t v36 = v67[5];
  uint64_t v66 = v13 + 4;
  swift_bridgeObjectRetain();
  unint64_t v37 = 0;
  uint64_t v68 = v33 - 1;
  uint64_t v69 = v32 - 1;
  uint64_t v38 = v31 + 7;
  uint64_t v39 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (!*(void *)(v34 + 16))
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
    id v40 = (id)v66[v37];
    unint64_t v41 = sub_1001806F8(v35, v36);
    if (v42)
    {
      id v43 = *(id *)(*(void *)(v34 + 56) + 8 * v41);
      swift_bridgeObjectRelease();
      uint64_t v44 = v65;
      if (!*(void *)(v65 + 16))
      {
        id v49 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v39 = sub_1003090AC(0, v39[2] + 1, 1, v39);
        }
        unint64_t v51 = v39[2];
        unint64_t v50 = v39[3];
        if (v51 >= v50 >> 1) {
          uint64_t v39 = sub_1003090AC((void *)(v50 > 1), v51 + 1, 1, v39);
        }
        v39[2]  = v51 + 1;
        uint64_t v52 = &v39[2 * v51];
        v52[4]  = v37;
        void v52[5] = v49;
LABEL_36:

        uint64_t v34 = v64;
        goto LABEL_38;
      }
      id v40 = v40;
      uint64_t v45 = sub_100307038();
      if (v46)
      {
        double v47 = *(double *)(*(void *)(v44 + 56) + 8 * v45);

        if (*(void *)(v63 + 16) < 2uLL)
        {
          id v53 = [objc_allocWithZone((Class)NSNumber) initWithDouble:0.0];
        }
        else
        {
          if (v37) {
            uint64_t v48 = v62;
          }
          else {
            uint64_t v48 = v61;
          }
          id v53 = v48;
        }
        uint64_t v54 = v53;
        [v53 doubleValue];
        if (v55 >= v47)
        {

          goto LABEL_38;
        }
        id v49 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v39 = sub_1003090AC(0, v39[2] + 1, 1, v39);
        }
        unint64_t v57 = v39[2];
        unint64_t v56 = v39[3];
        if (v57 >= v56 >> 1) {
          uint64_t v39 = sub_1003090AC((void *)(v56 > 1), v57 + 1, 1, v39);
        }
        v39[2]  = v57 + 1;
        id v58 = &v39[2 * v57];
        v58[4]  = v37;
        v58[5]  = v49;

        goto LABEL_36;
      }
    }
    else
    {

      swift_bridgeObjectRelease();
    }
LABEL_38:
    int64_t v31 = v67;
LABEL_39:
    if (v69 == v37) {
      goto LABEL_45;
    }
    if (v37 + 1 >= v31[2]) {
      break;
    }
    if (v68 == v37)
    {
LABEL_45:
      id v20 = v60;
      BOOL v26 = v61;
      uint64_t v30 = v62;
      goto LABEL_46;
    }
    uint64_t v35 = *(v38 - 1);
    uint64_t v36 = *v38;
    unint64_t v59 = v13[2];
    swift_bridgeObjectRetain();
    ++v37;
    v38 += 2;
    if (v37 >= v59) {
      goto LABEL_48;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
}

void *sub_1000C0DE0(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000C0E24(uint64_t a1, unint64_t a2)
{
  unint64_t v54 = a2;
  uint64_t v3 = type metadata accessor for String.Encoding();
  uint64_t v52 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134(&qword_1009099E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100094134(&qword_1009099E8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134(&qword_1009099F0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134(&qword_1009099F8);
  Regex.init(_regexString:version:)();
  uint64_t v53 = a1;
  unint64_t v17 = v54;
  double v55 = v16;
  uint64_t v56 = v13;
  Regex.wholeMatch(in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_1000C1A24((uint64_t)v8);
    if (qword_100906E48 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_1009099C8);
    swift_bridgeObjectRetain_n();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v57[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_1000C51B8(v53, v17, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "REMGroceryClassifier.isValidSourceType no result for '%s)'", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v55, v56);
LABEL_20:
    char v43 = 0;
    return v43 & 1;
  }
  uint64_t v51 = v14;
  uint64_t v49 = v10;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  swift_getKeyPath();
  uint64_t v50 = v9;
  uint64_t v48 = v12;
  Regex.Match.subscript.getter();
  swift_release();
  uint64_t v22 = static String._fromSubstring(_:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  v57[0]  = 123;
  v57[1]  = 0xE100000000000000;
  v25._countAndFlagsBits  = v22;
  v25._object  = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits  = 125;
  v26._object  = (void *)0xE100000000000000;
  String.append(_:)(v26);
  static String.Encoding.utf8.getter();
  uint64_t v27 = String.data(using:allowLossyConversion:)();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v5, v3);
  if (v29 >> 60 == 15)
  {
    if (qword_100906E48 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E2DC(v30, (uint64_t)qword_1009099C8);
    swift_bridgeObjectRetain_n();
    int64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      v57[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v58 = sub_1000C51B8(v53, v17, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "REMGroceryClassifier.isValidSourceType no data for '%s)'", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v55, v56);
    goto LABEL_20;
  }
  sub_1002ED110((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  sub_100094134(&qword_10090F3B0);
  sub_1000C1A84();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v34 = sub_1001261C0(v57[0]);
  if (qword_100906E48 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_10008E2DC(v35, (uint64_t)qword_1009099C8);
  swift_bridgeObjectRetain_n();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    unint64_t v54 = v29;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v52 = v27;
    uint64_t v39 = (uint8_t *)v38;
    v57[0]  = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = Set.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v58 = sub_1000C51B8(v40, v42, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v29 = v54;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "REMGroceryClassifier.isValidSourceType sourceTypeSet: %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v27 = v52;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v45 = v50;
  if (qword_100906E50 != -1) {
    swift_once();
  }
  char v46 = sub_1000C0010(qword_100941FB0, v34);
  sub_100097F20(v27, v29);
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v45);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v55, v56);
  char v43 = v46 ^ 1;
  return v43 & 1;
}

uint64_t sub_1000C1A24(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_1009099E0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000C1A84()
{
  unint64_t result = qword_100909A00;
  if (!qword_100909A00)
  {
    sub_100096058(&qword_10090F3B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909A00);
  }
  return result;
}

uint64_t sub_1000C1AF8()
{
  return swift_release();
}

uint64_t sub_1000C1B00()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ExtendedTriple();
  uint64_t v35 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v29 - v6;
  uint64_t v8 = type metadata accessor for LanguageView();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewService();
  int64_t v12 = (void *)static ViewService.clientService.getter();
  ViewService.languageView.getter();

  if (v0) {
    return (uint64_t)v1;
  }
  unint64_t v13 = LanguageView.inferredLanguageTriples()();
  os_log_type_t v32 = v11;
  unint64_t v36 = v13;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_19:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v32, v8);
    swift_bridgeObjectRelease();
    return (uint64_t)v1;
  }
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1001DE098(0, v15 & ~(v15 >> 63), 0);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v29[1]  = 0;
    uint64_t v30 = v9;
    uint64_t v31 = v8;
    uint64_t v1 = v40;
    uint64_t v16 = v35;
    if ((v36 & 0xC000000000000001) != 0)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (void (**)(uint64_t *, char *, uint64_t))(v35 + 16);
      unint64_t v19 = (void (**)(char *, uint64_t))(v35 + 8);
      do
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1000C1FA4(&qword_100909A08);
        sub_1000C1FA4((unint64_t *)&unk_100909A10);
        FetchableRecord<>.init(row:)();
        uint64_t v40 = v1;
        unint64_t v21 = v1[2];
        unint64_t v20 = v1[3];
        if (v21 >= v20 >> 1) {
          sub_1001DE098(v20 > 1, v21 + 1, 1);
        }
        ++v17;
        uint64_t v38 = v2;
        uint64_t v39 = &protocol witness table for ExtendedTriple;
        uint64_t v22 = sub_1000C1FE8((uint64_t *)&v37);
        (*v18)(v22, v7, v2);
        uint64_t v23 = v40;
        v40[2]  = v21 + 1;
        sub_1000967D4(&v37, (uint64_t)&v23[5 * v21 + 4]);
        (*v19)(v7, v2);
        uint64_t v1 = v40;
      }
      while (v15 != v17);
    }
    else
    {
      unint64_t v24 = v36 + 32;
      uint64_t v34 = sub_1000C1FA4(&qword_100909A08);
      uint64_t v33 = sub_1000C1FA4((unint64_t *)&unk_100909A10);
      do
      {
        swift_retain();
        FetchableRecord<>.init(row:)();
        uint64_t v40 = v1;
        unint64_t v26 = v1[2];
        unint64_t v25 = v1[3];
        if (v26 >= v25 >> 1) {
          sub_1001DE098(v25 > 1, v26 + 1, 1);
        }
        uint64_t v38 = v2;
        uint64_t v39 = &protocol witness table for ExtendedTriple;
        uint64_t v27 = sub_1000C1FE8((uint64_t *)&v37);
        (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 16))(v27, v4, v2);
        unint64_t v28 = v40;
        v40[2]  = v26 + 1;
        sub_1000967D4(&v37, (uint64_t)&v28[5 * v26 + 4]);
        (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v2);
        uint64_t v1 = v40;
        v24 += 8;
        --v15;
      }
      while (v15);
    }
    uint64_t v9 = v30;
    uint64_t v8 = v31;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C1FA4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ExtendedTriple();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000C1FE8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1  = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_1000C204C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909A20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909A20);
  if (qword_1009077C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942388);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

_UNKNOWN **static REMCDAssignment.recordTypes()()
{
  return &off_1008B1288;
}

uint64_t static REMCDAssignment.existingCloudObject(for:accountID:managedObjectContext:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  swift_bridgeObjectRetain();
  id v6 = a4;
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [self objectWithRecordID:v5 accountID:v7 context:v6];

  if (v8)
  {
    uint64_t result = swift_dynamicCastUnknownClass();
    if (result) {
      return result;
    }
  }
  return 0;
}

id static REMCDAssignment.newCloudObject(for:account:managedObjectContext:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = [a1 recordID];
  NSString v9 = [v8 recordName];

  if (!v9)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v10 = [(id)swift_getObjCClassFromMetadata() newObjectWithCKRecordName:v9 context:a3 account:a2];

  if (v10)
  {
    id v11 = [a2 ckIdentifier];
    if (v11)
    {
      int64_t v12 = v11;
      [v10 mergeDataFromRecord:a1 accountID:v11];

      [v10 setCkServerRecord:a1];
      [v10 setInCloud:1];
      [v10 updateParentReferenceIfNecessary];
    }
    else
    {
      if (qword_100906E58 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10008E2DC(v13, (uint64_t)qword_100909A20);
      id v14 = a2;
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = v4;
        *(_DWORD *)uint64_t v17 = 136446466;
        swift_getMetatypeMetadata();
        uint64_t v18 = String.init<A>(describing:)();
        uint64_t v28 = sub_1000C51B8(v18, v19, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12)  = 2082;
        id v20 = [v14 remObjectID:v27];
        if (v20)
        {
          unint64_t v21 = v20;
          id v22 = [v20 description];

          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v25 = v24;
        }
        else
        {
          unint64_t v25 = 0xE300000000000000;
          uint64_t v23 = 7104878;
        }
        uint64_t v28 = sub_1000C51B8(v23, v25, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
  }
  return v10;
}

Swift::String __swiftcall REMCDList.recordZoneName()()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  result._object  = v1;
  result._countAndFlagsBits  = v0;
  return result;
}

Swift::String __swiftcall REMCDAssignment.recordType()()
{
  uint64_t v0 = 0x656D6E6769737341;
  uint64_t v1 = (void *)0xEA0000000000746ELL;
  result._object  = v1;
  result._countAndFlagsBits  = v0;
  return result;
}

Swift::Bool __swiftcall REMCDList.shouldMarkAsDeletedInsteadOfDeletingImmediately()()
{
  return 1;
}

Swift::Void __swiftcall REMCDAssignment.mergeData(from:accountID:)(CKRecord from, Swift::String accountID)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  long long v89 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v86 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v10 - 8);
  int64_t v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v13 = String._bridgeToObjectiveC()();
  v99.receiver  = v3;
  v99.super_class  = (Class)REMCDAssignment;
  [super mergeDataFromRecord:from.super.isa accountID:v13];

  id v14 = [(objc_class *)from.super.isa recordID];
  NSString v15 = [v14 recordName];

  if (!v15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v88 = v7;
  NSString v16 = [v3 ckIdentifierFromRecordName:v15];

  if (!v16)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setCkIdentifier:v16];

  uint64_t v17 = 0;
  v87  = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  long long v84 = (void (**)(char *, uint64_t))(v8 + 8);
  long long v85 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  unint64_t v95 = 0x80000001007C82B0;
  *(void *)&long long v18 = 136315394;
  v83  = v18;
  uint64_t v82 = (char *)&type metadata for Any + 8;
  unint64_t v93 = 0x80000001007C8270;
  v94  = 0x80000001007C8290;
  *(void *)&long long v18 = 136315138;
  long long v90 = v18;
  long long v91 = v3;
  long long v92 = v12;
  do
  {
    uint64_t v19 = *((unsigned __int8 *)&off_1008B12E8 + v17++ + 32);
    switch(v19)
    {
      case 1:
        id v23 = [(objc_class *)from.super.isa encryptedValues];
        NSString v24 = String._bridgeToObjectiveC()();
        id v25 = [v23 objectForKeyedSubscript:v24];
        swift_unknownObjectRelease();

        if (v25)
        {
          uint64_t v98 = (uint64_t)v25;
          sub_100094134(&qword_100909AB0);
          if (swift_dynamicCast())
          {
            uint64_t v27 = v96;
            unint64_t v26 = v97;
            NSString v28 = String._bridgeToObjectiveC()();
            [v3 setCkAssigneeIdentifier:v28];

            uint64_t v29 = sub_1000C34EC(v27, v26);
            if (v29)
            {
              uint64_t v30 = (void *)v29;
              swift_bridgeObjectRelease();
              [v3 setAssignee:v30];
              goto LABEL_19;
            }
            if (qword_100906E58 != -1) {
              swift_once();
            }
            uint64_t v61 = type metadata accessor for Logger();
            sub_10008E2DC(v61, (uint64_t)qword_100909A20);
            id v62 = v3;
            swift_bridgeObjectRetain();
            uint64_t v63 = Logger.logObject.getter();
            int v64 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v63, (os_log_type_t)v64))
            {
              int v80 = v64;
              isa  = from.super.isa;
              uint64_t v65 = swift_slowAlloc();
              uint64_t v79 = swift_slowAlloc();
              uint64_t v96 = v79;
              *(_DWORD *)uint64_t v65 = v83;
              id v66 = [v62 ckIdentifier:v79];
              if (v66)
              {
                uint64_t v67 = v66;
                uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v70 = v69;
              }
              else
              {
                unint64_t v70 = 0xE300000000000000;
                uint64_t v68 = 7104878;
              }
              from.super.isa  = isa;
              *(void *)(v65 + 4)  = sub_1000C51B8(v68, v70, &v96);

              swift_bridgeObjectRelease();
              *(_WORD *)(v65 + 12)  = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v65 + 14)  = sub_1000C51B8(v27, v26, &v96);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v80, "Assignee object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, assigneeID: %s}", (uint8_t *)v65, 0x16u);
              goto LABEL_61;
            }
            goto LABEL_56;
          }
        }
        break;
      case 2:
        id v31 = [(objc_class *)from.super.isa encryptedValues];
        NSString v32 = String._bridgeToObjectiveC()();
        id v33 = [v31 objectForKeyedSubscript:v32];
        swift_unknownObjectRelease();

        if (v33)
        {
          uint64_t v98 = (uint64_t)v33;
          sub_100094134(&qword_100909AB0);
          if (swift_dynamicCast())
          {
            uint64_t v35 = v96;
            unint64_t v34 = v97;
            NSString v36 = String._bridgeToObjectiveC()();
            [v3 setCkOriginatorIdentifier:v36];

            uint64_t v37 = sub_1000C34EC(v35, v34);
            if (v37)
            {
              uint64_t v30 = (void *)v37;
              swift_bridgeObjectRelease();
              [v3 setOriginator:v30];
LABEL_19:
            }
            else
            {
              if (qword_100906E58 != -1) {
                swift_once();
              }
              uint64_t v71 = type metadata accessor for Logger();
              sub_10008E2DC(v71, (uint64_t)qword_100909A20);
              id v62 = v3;
              swift_bridgeObjectRetain();
              uint64_t v63 = Logger.logObject.getter();
              int v72 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v63, (os_log_type_t)v72))
              {
                int v80 = v72;
                isa  = from.super.isa;
                uint64_t v73 = swift_slowAlloc();
                uint64_t v79 = swift_slowAlloc();
                uint64_t v96 = v79;
                *(_DWORD *)uint64_t v73 = v83;
                id v74 = [v62 ckIdentifier:v79];
                if (v74)
                {
                  unint64_t v75 = v74;
                  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v78 = v77;
                }
                else
                {
                  unint64_t v78 = 0xE300000000000000;
                  uint64_t v76 = 7104878;
                }
                from.super.isa  = isa;
                *(void *)(v73 + 4)  = sub_1000C51B8(v76, v78, &v96);

                swift_bridgeObjectRelease();
                *(_WORD *)(v73 + 12)  = 2080;
                swift_bridgeObjectRetain();
                *(void *)(v73 + 14)  = sub_1000C51B8(v35, v34, &v96);
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v80, "Originator object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, originatorID: %s}", (uint8_t *)v73, 0x16u);
LABEL_61:
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                goto LABEL_62;
              }
LABEL_56:

              swift_bridgeObjectRelease_n();
              int64_t v12 = v92;
            }
          }
        }
        break;
      case 3:
        uint64_t v38 = CKRecord.subscript.getter();
        if (v38)
        {
          uint64_t v98 = v38;
          sub_100094134(&qword_100909AB0);
          if (swift_dynamicCast())
          {
            uint64_t v39 = v89;
            UUID.init(uuidString:)();
            uint64_t v40 = (uint64_t)v39;
            swift_bridgeObjectRelease();
            unint64_t v41 = v39;
            uint64_t v42 = v88;
            if ((*v87)(v41, 1, v88) != 1)
            {
              unint64_t v59 = v86;
              (*v85)(v86, v40, v42);
              Class v60 = UUID._bridgeToObjectiveC()().super.isa;
              [v3 setOwningReminderIdentifier:v60];

              (*v84)(v59, v42);
              break;
            }
            sub_1000966BC(v40, (uint64_t *)&unk_100909E50);
          }
        }
        if (qword_100906E58 != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        sub_10008E2DC(v43, (uint64_t)qword_100909A20);
        id v44 = v3;
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = from.super.isa;
          uint64_t v48 = swift_slowAlloc();
          uint64_t v96 = swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = v90;
          id v49 = [v44 ckIdentifier];
          if (v49)
          {
            uint64_t v50 = v49;
            uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v53 = v52;
          }
          else
          {
            unint64_t v53 = 0xE300000000000000;
            uint64_t v51 = 7104878;
          }
          from.super.isa  = v47;
          *(void *)(v48 + 4)  = sub_1000C51B8(v51, v53, &v96);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Cannot convert to a UUID from CKRecord to owningReminderIdentifier {ckIdentifier: %s}", (uint8_t *)v48, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v3 = v91;
LABEL_62:
          int64_t v12 = v92;
        }
        else
        {
        }
        break;
      case 4:
        if (CKRecord.subscript.getter())
        {
          self;
          unint64_t v54 = (void *)swift_dynamicCastObjCClass();
          if (!v54) {
            swift_unknownObjectRelease();
          }
        }
        else
        {
          unint64_t v54 = 0;
        }
        id v56 = sub_1000C4D4C(v54, (unint64_t *)&qword_10090B040);
        if (v56)
        {
          unint64_t v57 = v56;
          self;
          uint64_t v58 = (void *)swift_dynamicCastObjCClass();
          if (!v58) {
        }
          }
        else
        {
          uint64_t v58 = 0;
        }

        [v3 setReminder:v58];
        break;
      case 5:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        CKRecordKeyValueSetting.subscript.getter();
        if (BYTE2(v96)) {
          __int16 v55 = 0;
        }
        else {
          __int16 v55 = v96;
        }
        [v3 setStatus:v55];
        break;
      default:
        sub_1000963CC(0, (unint64_t *)&qword_100909E80);
        uint64_t v20 = type metadata accessor for Date();
        CKRecordKeyValueSetting.subscript.getter();
        uint64_t v21 = *(void *)(v20 - 8);
        Class v22 = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, v20) != 1)
        {
          Class v22 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v20);
        }
        [v3 setAssignedDate:v22];

        break;
    }
  }
  while (v17 != 6);
}

uint64_t sub_1000C34EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v6 = [v3 managedObjectContext];
  if (!v6)
  {
    if (qword_100906E58 == -1)
    {
LABEL_10:
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E2DC(v15, (uint64_t)qword_100909A20);
      NSString v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        long long v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Trying to merge CKRecord to an object without MOC", v18, 2u);
        swift_slowDealloc();
      }

      return 0;
    }
LABEL_19:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v7 = v6;
  sub_1000963CC(0, (unint64_t *)&unk_100909AE0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_100776E40;
  *(void *)(v8 + 56)  = &type metadata for String;
  *(void *)(v8 + 64)  = sub_1000C5B38();
  *(void *)(v8 + 32)  = a1;
  *(void *)(v8 + 40)  = a2;
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
  id v10 = [swift_getObjCClassFromMetadata() ic_objectsMatchingPredicate:v9 context:v7];
  sub_1000963CC(0, (unint64_t *)&qword_100909B00);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();

    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_14;
  }
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_19;
  }
  id v12 = *(id *)(v11 + 32);
LABEL_7:
  NSString v13 = v12;
  swift_bridgeObjectRelease();

  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result) {
    return result;
  }

  return 0;
}

CKRecord_optional __swiftcall REMCDAssignment.newlyCreatedRecord()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v56 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v53 - v9;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  id v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  NSString v16 = (char *)&v53 - v15;
  v68.receiver  = v1;
  v68.super_class  = (Class)REMCDAssignment;
  id v18 = [super newlyCreatedRecord];
  if (v18)
  {
    unint64_t v57 = v14;
    uint64_t v58 = v8;
    uint64_t v19 = 0;
    id v62 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
    uint64_t v63 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
    unint64_t v54 = (void (**)(char *, uint64_t))(v3 + 8);
    __int16 v55 = (void (**)(char *, char *, uint64_t))(v3 + 16);
    unint64_t v60 = 0x80000001007C8290;
    unint64_t v61 = 0x80000001007C82B0;
    unint64_t v59 = 0x80000001007C8270;
    uint64_t v64 = v2;
    while (2)
    {
      uint64_t v21 = *((unsigned __int8 *)&off_1008B1310 + v19++ + 32);
      switch(v21)
      {
        case 1:
          id v26 = [v18 encryptedValues];
          id v27 = [v1 ckAssigneeIdentifier];
          if (v27)
          {
            NSString v28 = v27;
            uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v31 = v30;

            *((void *)&v66 + 1)  = &type metadata for String;
            uint64_t v67 = &protocol witness table for String;
            *(void *)&long long v65 = v29;
            *((void *)&v65 + 1)  = v31;
            uint64_t v2 = v64;
          }
          else
          {
            uint64_t v67 = 0;
            long long v65 = 0u;
            long long v66 = 0u;
          }
          goto LABEL_26;
        case 2:
          id v32 = [v18 encryptedValues];
          id v33 = [v1 ckOriginatorIdentifier];
          if (v33)
          {
            unint64_t v34 = v33;
            uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v37 = v36;

            *((void *)&v66 + 1)  = &type metadata for String;
            uint64_t v67 = &protocol witness table for String;
            *(void *)&long long v65 = v35;
            *((void *)&v65 + 1)  = v37;
            uint64_t v2 = v64;
          }
          else
          {
            uint64_t v67 = 0;
            long long v65 = 0u;
            long long v66 = 0u;
          }
LABEL_26:
          swift_getObjectType();
          CKRecordKeyValueSetting.subscript.setter();
          swift_unknownObjectRelease();
          goto LABEL_5;
        case 3:
          id v38 = [v1 owningReminderIdentifier];
          if (v38)
          {
            uint64_t v39 = v38;
            uint64_t v40 = (uint64_t)v58;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v41 = 0;
          }
          else
          {
            uint64_t v41 = 1;
            uint64_t v40 = (uint64_t)v58;
          }
          (*v63)(v40, v41, 1, v2);
          sub_100096408(v40, (uint64_t)v10, (uint64_t *)&unk_100909E50);
          if ((*v62)(v10, 1, v2))
          {
            sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
            long long v65 = 0u;
            long long v66 = 0u;
            uint64_t v67 = 0;
          }
          else
          {
            uint64_t v48 = v56;
            (*v55)(v56, v10, v2);
            sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909E50);
            uint64_t v49 = UUID.uuidString.getter();
            uint64_t v51 = v50;
            (*v54)(v48, v2);
            *((void *)&v66 + 1)  = &type metadata for String;
            uint64_t v67 = &protocol witness table for String;
            *(void *)&long long v65 = v49;
            *((void *)&v65 + 1)  = v51;
          }
          goto LABEL_24;
        case 4:
          id v42 = [v1 reminder];
          if (v42)
          {
            uint64_t v43 = v42;
            id v44 = [v42 recordID];
          }
          else
          {
            id v44 = 0;
          }
          id v45 = [v1 cloudKitReferenceWithRecordIDAndValidateAction:v44];

          CKRecord.subscript.setter();
          goto LABEL_5;
        case 5:
          unsigned __int16 v20 = (unsigned __int16)[v1 status];
          *((void *)&v66 + 1)  = &type metadata for Int16;
          uint64_t v67 = &protocol witness table for Int16;
          LOWORD(v65)  = v20;
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
          goto LABEL_4;
        default:
          id v22 = [v1 assignedDate];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = (uint64_t)v57;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v25 = type metadata accessor for Date();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
          }
          else
          {
            uint64_t v25 = type metadata accessor for Date();
            uint64_t v24 = (uint64_t)v57;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v57, 1, 1, v25);
          }
          sub_100096408(v24, (uint64_t)v16, (uint64_t *)&unk_100909A40);
          type metadata accessor for Date();
          uint64_t v46 = *(void *)(v25 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v16, 1, v25) == 1)
          {
            sub_1000966BC((uint64_t)v16, (uint64_t *)&unk_100909A40);
            long long v65 = 0u;
            long long v66 = 0u;
            uint64_t v67 = 0;
          }
          else
          {
            *((void *)&v66 + 1)  = v25;
            uint64_t v67 = &protocol witness table for Date;
            uint64_t v47 = sub_1000C1FE8((uint64_t *)&v65);
            (*(void (**)(uint64_t *, char *, uint64_t))(v46 + 32))(v47, v16, v25);
          }
LABEL_24:
          sub_1000963CC(0, (unint64_t *)&qword_100909E80);
LABEL_4:
          CKRecordKeyValueSetting.subscript.setter();
LABEL_5:
          if (v19 != 6) {
            continue;
          }
          goto LABEL_31;
      }
    }
  }
LABEL_31:
  unint64_t v52 = (objc_class *)v18;
  result.value.super.isa  = v52;
  result.is_nil  = v17;
  return result;
}

void __swiftcall REMCDRecurrenceRule.parentCloud()(REMCDObject_optional *__return_ptr retstr)
{
  id v2 = [v1 reminder];

  id v3 = v2;
}

Swift::Void __swiftcall REMCDAssignment.fixBrokenReferences()()
{
  if (qword_100906E58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100909A20);
  id v2 = v0;
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  uint64_t v5 = &selRef_intersectsSet_;
  if (!os_log_type_enabled(v3, v4))
  {

    goto LABEL_14;
  }
  uint64_t v6 = swift_slowAlloc();
  uint64_t v43 = swift_slowAlloc();
  *(_DWORD *)uint64_t v6 = 136446466;
  id v7 = [v2 remObjectID];
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = [v7 description];

    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    unint64_t v12 = 0xE300000000000000;
    uint64_t v10 = 7104878;
  }
  sub_1000C51B8(v10, v12, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v6 + 12)  = 2082;
  id v13 = [v2 reminder];
  if (!v13) {
    goto LABEL_12;
  }
  id v14 = v13;
  id v15 = [v13 remObjectID];
  if (!v15)
  {

LABEL_12:
    unint64_t v20 = 0xE300000000000000;
    uint64_t v5 = &selRef_intersectsSet_;
    uint64_t v21 = 7104878;
    goto LABEL_13;
  }
  NSString v16 = v15;
  id v17 = [v15 description];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = v18;
  uint64_t v5 = &selRef_intersectsSet_;
LABEL_13:
  sub_1000C51B8(v21, v20, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fixing broken references for assignment {assignmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v6, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_14:
  id v22 = [v2 v5[467]];
  if (v22)
  {
    id v23 = v22;
    if ([v22 markedForDeletion]
      && ([v2 markedForDeletion] & 1) == 0)
    {
      id v24 = v2;
      id v25 = v23;
      id v26 = v24;
      id v27 = v25;
      NSString v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446466;
        id v31 = [v26 remObjectID];
        if (v31)
        {
          id v32 = v31;
          id v33 = [v31 description];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;
        }
        else
        {
          unint64_t v36 = 0xE300000000000000;
          uint64_t v34 = 7104878;
        }
        sub_1000C51B8(v34, v36, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12)  = 2082;
        id v37 = [v27 remObjectID];
        if (v37)
        {
          id v38 = v37;
          id v39 = [v37 description];

          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v42 = v41;
        }
        else
        {
          unint64_t v42 = 0xE300000000000000;
          uint64_t v40 = 7104878;
        }
        sub_1000C51B8(v40, v42, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Reminder is marked for deletion but assignment is not {assignmentID: %{public}s, reminderID: %{public}s}", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      [v26 markForDeletion];
    }
    [v23 forcePushToCloud];
  }
}

Swift::Void __swiftcall REMCDAssignment.cleanUpAfterLocalObjectMerge()()
{
  if (qword_100906E58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100909A20);
  id v7 = v0;
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100909AB8);
    uint64_t v5 = String.init<A>(describing:)();
    sub_1000C51B8(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id sub_1000C497C(void *a1)
{
  return sub_1000C4D4C(a1, (unint64_t *)&qword_10090B040);
}

id sub_1000C4990(void *a1)
{
  return sub_1000C49A8(a1, (void (*)(void))type metadata accessor for REMCDTemplate);
}

id sub_1000C49A8(void *a1, void (*a2)(void))
{
  os_log_type_t v3 = v2;
  a2(0);
  uint64_t v5 = [v3 managedObjectContext];
  if (!v5)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091AC90);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v16, "Trying to merge CKRecord to an object without MOC", v17, 2u);
      swift_slowDealloc();
    }
    goto LABEL_16;
  }
  unint64_t v6 = v5;
  if (!a1)
  {
LABEL_16:

    return 0;
  }
  id v7 = a1;
  id v8 = [v3 accountCKIdentifier];
  if (!v8)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10091AC90);
    id v19 = v7;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      *(_DWORD *)id v22 = 138543362;
      id v25 = [v19 recordID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v23 = v25;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier", v22, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_16;
  }
  id v9 = v8;
  ObjCClassFromMetadata  = (void *)swift_getObjCClassFromMetadata();
  id v11 = [v7 recordID];
  id v12 = [ObjCClassFromMetadata existingCloudObjectForRecordID:v11 accountID:v9 context:v6];

  if (!v12)
  {
    id v13 = [v7 recordID];
    id v14 = [v3 account];
    id v12 = [ObjCClassFromMetadata newPlaceholderObjectForRecordID:v13 account:v14 context:v6];
  }
  return v12;
}

id sub_1000C4D38(void *a1)
{
  return sub_1000C4D4C(a1, (unint64_t *)&qword_100909AD0);
}

id sub_1000C4D4C(void *a1, unint64_t *a2)
{
  os_log_type_t v3 = v2;
  sub_1000963CC(0, a2);
  uint64_t v5 = [v3 managedObjectContext];
  if (!v5)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10091AC90);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v16, "Trying to merge CKRecord to an object without MOC", v17, 2u);
      swift_slowDealloc();
    }
    goto LABEL_16;
  }
  unint64_t v6 = v5;
  if (!a1)
  {
LABEL_16:

    return 0;
  }
  id v7 = a1;
  id v8 = [v3 accountCKIdentifier];
  if (!v8)
  {
    if (qword_1009076A0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E2DC(v18, (uint64_t)qword_10091AC90);
    id v19 = v7;
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      id v23 = (void *)swift_slowAlloc();
      *(_DWORD *)id v22 = 138543362;
      id v25 = [v19 recordID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v23 = v25;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier", v22, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_16;
  }
  id v9 = v8;
  ObjCClassFromMetadata  = (void *)swift_getObjCClassFromMetadata();
  id v11 = [v7 recordID];
  id v12 = [ObjCClassFromMetadata existingCloudObjectForRecordID:v11 accountID:v9 context:v6];

  if (!v12)
  {
    id v13 = [v7 recordID];
    id v14 = [v3 account];
    id v12 = [ObjCClassFromMetadata newPlaceholderObjectForRecordID:v13 account:v14 context:v6];
  }
  return v12;
}

id sub_1000C50D8(void *a1)
{
  return sub_1000C4D4C(a1, (unint64_t *)&unk_100910210);
}

id sub_1000C50EC(void *a1)
{
  return sub_1000C49A8(a1, (void (*)(void))type metadata accessor for REMCDSavedReminder);
}

id sub_1000C5104(void *a1)
{
  return sub_1000C4D4C(a1, (unint64_t *)&unk_100909AC0);
}

uint64_t sub_1000C5118(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000C5140(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_1000C51B8(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v8;
  return result;
}

uint64_t sub_1000C51B8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000C528C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0]  = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10009A1B0((uint64_t)v12, *a3);
      *a3  = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0]  = a1;
    v12[1]  = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10009A1B0((uint64_t)v12, *a3);
      *a3  = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1000C528C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0]  = a5;
          __src[1]  = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1  = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1000C5448(a5, a6);
    *a1  = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1  = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1000C5448(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000C54E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1000C5658(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1000C5658(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16)  = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4)  = 0;
  return v2;
}

void *sub_1000C54E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1002AE7F8(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000C5658(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100094134((uint64_t *)&unk_100909B10);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2)  = v8;
    *((void *)v10 + 3)  = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2)  = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSo15REMCDAssignmentC7reminddE26existingLocalObjectToMerge4withSo11REMCDObjectCSgSo11NSPredicateCSg_tF_0()
{
  if (qword_100906E58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100909A20);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100909AB8);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

uint64_t _sSo15REMCDAssignmentC7reminddE5merge15withLocalObjectSbSo11REMCDObjectC_tF_0()
{
  if (qword_100906E58 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E2DC(v1, (uint64_t)qword_100909A20);
  id v2 = v0;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getObjectType();
    sub_100094134(&qword_100909AB8);
    uint64_t v6 = String.init<A>(describing:)();
    sub_1000C51B8(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return 0;
}

unint64_t sub_1000C5B38()
{
  unint64_t result = qword_100909AF0;
  if (!qword_100909AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909AF0);
  }
  return result;
}

uint64_t sub_1000C5B90()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909B20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909B20);
  if (qword_1009077F0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942418);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000C5C58(uint64_t a1, uint64_t a2)
{
  v3[3]  = a2;
  void v3[4] = v2;
  v3[2]  = a1;
  uint64_t v4 = type metadata accessor for REMRemindersListDataView.CountByCompleted();
  void v3[5] = v4;
  v3[6]  = *(void *)(v4 - 8);
  void v3[7] = swift_task_alloc();
  v3[8]  = _s10PredicatesOMa(0);
  v3[9]  = swift_task_alloc();
  return _swift_task_switch(sub_1000C5D4C, 0, 0);
}

uint64_t sub_1000C5D4C()
{
  uint64_t v1 = v0[4];
  if (![*(id *)(v1 + 16) enableGroceryFeedbackSurvey])
  {
    if (qword_100906E60 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E2DC(v7, (uint64_t)qword_100909B20);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "RDFeedbackProvider: Survey is not enabled for non-seed builds.";
    goto LABEL_11;
  }
  if ([*(id *)(v1 + 16) hasSeenGroceryFeedbackSurvey])
  {
    if (qword_100906E60 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_100909B20);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "RDFeedbackProvider: Has seen the feedback survey.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v3, v4, v6, v5, 2u);
    swift_slowDealloc();
LABEL_12:

    goto LABEL_13;
  }
  uint64_t v10 = (void *)v0[9];
  size_t v11 = (void *)v0[2];
  uint64_t v12 = v0[3];
  *uint64_t v10 = v11;
  swift_storeEnumTagMultiPayload();
  id v13 = v11;
  id v14 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v10);
  sub_10051EB6C(v12, (uint64_t)v14);
  uint64_t v16 = v0[6];
  uint64_t v15 = v0[7];
  uint64_t v17 = v0[5];
  uint64_t v18 = REMRemindersListDataView.CountByCompleted.incomplete.getter();

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  if (v18 < 3)
  {
    if (qword_100906E60 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_100909B20);
    unint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v3, v4)) {
      goto LABEL_12;
    }
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    uint64_t v6 = "RDFeedbackProvider: Survey requires 3 or more reminders in the list.";
    goto LABEL_11;
  }
  [*(id *)(v1 + 16) setHasSeenGroceryFeedbackSurvey:1];
  sub_1000C609C();
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000C609C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134(&qword_100909BE0);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2]  = 0;
  v7[3]  = 0;
  void v7[4] = v1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_retain();
  if (v8 == 1)
  {
    sub_1000C6FE8((uint64_t)v4);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16)  = &unk_100909BF0;
  *(void *)(v12 + 24)  = v7;
  if (v10 | v9)
  {
    v14[0]  = 0;
    v14[1]  = 0;
    v14[2]  = v9;
    void v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1000C62D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 72)  = a4;
  return _swift_task_switch(sub_1000C62F8, 0, 0);
}

uint64_t sub_1000C62F8()
{
  id v22 = v0;
  if (qword_100906E60 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[10]  = sub_10008E2DC(v1, (uint64_t)qword_100909B20);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    v0[8]  = sub_1000C51B8(0xD00000000000001FLL, 0x80000001007C85A0, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RDFeedbackProvider: showFeedback {formIdentifier: %s}", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v5 = objc_allocWithZone((Class)type metadata accessor for FBKSForm());
  uint64_t v6 = (void *)FBKSForm.init(identifier:)();
  v0[11]  = v6;
  dispatch thunk of FBKSForm.authenticationMethod.setter();
  id v7 = [objc_allocWithZone((Class)type metadata accessor for FBKSLaunchConfiguration()) init];
  v0[12]  = v7;
  dispatch thunk of FBKSLaunchConfiguration.promptStyle.setter();
  int v8 = self;
  id v9 = [v8 mainBundle];
  v10._countAndFlagsBits  = 0xD000000000000017;
  v24._countAndFlagsBits  = 0xD00000000000002ELL;
  v24._object  = (void *)0x80000001007C85E0;
  v10._object  = (void *)0x80000001007C85C0;
  v11._countAndFlagsBits  = 0;
  v11._object  = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v10, (Swift::String_optional)0, (NSBundle)v9, v11, v24);

  dispatch thunk of FBKSLaunchConfiguration.localizedPromptTitle.setter();
  id v12 = [v8 mainBundle];
  v25._countAndFlagsBits  = 0xD000000000000030;
  v13._countAndFlagsBits  = 0xD00000000000004DLL;
  v25._object  = (void *)0x80000001007C8660;
  v13._object  = (void *)0x80000001007C8610;
  v14._countAndFlagsBits  = 0;
  v14._object  = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v25);

  dispatch thunk of FBKSLaunchConfiguration.localizedPromptMessage.setter();
  id v15 = objc_allocWithZone((Class)type metadata accessor for FBKSDraftLauncher());
  id v16 = v6;
  v0[13]  = FBKSDraftLauncher.init(feedbackForm:)();
  uint64_t v20 = (uint64_t (*)(id))((char *)&async function pointer to dispatch thunk of FBKSDraftLauncher.collectFeedback(launchConfiguration:)
                                   + async function pointer to dispatch thunk of FBKSDraftLauncher.collectFeedback(launchConfiguration:));
  id v17 = v7;
  uint64_t v18 = (void *)swift_task_alloc();
  v0[14]  = v18;
  *uint64_t v18 = v0;
  v18[1]  = sub_1000C6694;
  return v20(v7);
}

uint64_t sub_1000C6694()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 120)  = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = sub_1000C6954;
  }
  else
  {

    os_log_type_t v3 = sub_1000C67B0;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000C67B0()
{
  uint64_t v12 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = *(void **)(v0 + 96);
    uint64_t v4 = *(void **)(v0 + 104);
    uint64_t v5 = *(void **)(v0 + 88);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v0 + 56)  = sub_1000C51B8(0xD00000000000001FLL, 0x80000001007C85A0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RDFeedbackProvider: Feedback request succeeded. {formIdentifier: %s}", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    int v8 = *(void **)(v0 + 96);
    id v7 = *(void **)(v0 + 104);
  }
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_1000C6954()
{
  uint64_t v13 = v0;
  os_log_type_t v2 = (void *)v0[12];
  uint64_t v1 = (void *)v0[13];
  os_log_type_t v3 = (void *)v0[11];
  uint64_t v4 = v0[9];

  [*(id *)(v4 + 16) setHasSeenGroceryFeedbackSurvey:0];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    v0[6]  = sub_1000C51B8(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDFeedbackProvider: Feedback request failed. {error: %s}", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  Swift::String v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_1000C6B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6BB4(a1, a2, a3);
}

uint64_t sub_1000C6B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000C6BB4(a1, a2, a3);
}

uint64_t sub_1000C6BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000C6FE8(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16)  = a2;
  *(void *)(v8 + 24)  = a3;
  return swift_task_create();
}

uint64_t TantorMigrationAPIAsyncClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDFeedbackProvider()
{
  return self;
}

uint64_t sub_1000C6DAC(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C6E08()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C6E48()
{
  uint64_t v2 = *(void *)(v0 + 32);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16)  = v3;
  void *v3 = v1;
  v3[1]  = sub_1000C6EF4;
  v3[9]  = v2;
  return _swift_task_switch(sub_1000C62F8, 0, 0);
}

uint64_t sub_1000C6EF4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000C6FE8(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100909BE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C7048(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16)  = v4;
  void *v4 = v2;
  v4[1]  = sub_1000C7124;
  return v6(a1);
}

uint64_t sub_1000C7124()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000C721C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16)  = v5;
  *uint64_t v5 = v2;
  v5[1]  = sub_1000C75D4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100909BF8 + dword_100909BF8);
  return v6(a1, v4);
}

uint64_t sub_1000C72D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C730C(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24)  = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 32)  = v3;
  void *v3 = v2;
  v3[1]  = sub_1000C73EC;
  return v5(v2 + 16);
}

uint64_t sub_1000C73EC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  void *v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1000C751C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16)  = v5;
  *uint64_t v5 = v2;
  v5[1]  = sub_1000C6EF4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100909C10 + dword_100909C10);
  return v6(a1, v4);
}

uint64_t sub_1000C75E0(uint64_t a1)
{
  uint64_t result = sub_1000C8FE0(&qword_100909C58, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsInvocation);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = result;
  return result;
}

uint64_t sub_1000C7638()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909C20);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909C20);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void sub_1000C7700(void *a1@<X1>, uint64_t a2@<X2>, void (*a3)(char *, uint64_t, uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v232  = a3;
  v215  = a2;
  v234  = a1;
  v195  = a5;
  v196  = type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel();
  v189  = *(void *)(v196 - 8);
  __chkstk_darwin(v196);
  v194  = (char *)&v178 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v203  = (char *)&v178 - v8;
  uint64_t v9 = sub_100094134(&qword_100909C60);
  __chkstk_darwin(v9 - 8);
  v192  = (uint64_t)&v178 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v201  = (uint64_t)&v178 - v12;
  v202  = type metadata accessor for REMRemindersListDataView.SectionsModel();
  v200  = *(void *)(v202 - 8);
  __chkstk_darwin(v202);
  v191  = (char *)&v178 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v199  = (char *)&v178 - v15;
  uint64_t v16 = sub_100094134(&qword_100909C68);
  __chkstk_darwin(v16 - 8);
  v188  = (uint64_t)&v178 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209  = type metadata accessor for REMRemindersListDataView.RemindersPrefetch();
  v211  = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  v208  = (uint64_t *)((char *)&v178 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19);
  v210  = (char *)&v178 - v20;
  v207  = type metadata accessor for REMRemindersListDataView.Diff();
  v206  = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  v193  = (char *)&v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v198  = (char *)&v178 - v23;
  __chkstk_darwin(v24);
  v197  = (char *)&v178 - v25;
  __chkstk_darwin(v26);
  v219  = (uint64_t)&v178 - v27;
  uint64_t v28 = sub_100094134(&qword_100909C70);
  __chkstk_darwin(v28 - 8);
  v190  = (uint64_t)&v178 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v205  = (char *)&v178 - v31;
  __chkstk_darwin(v32);
  v217  = (uint64_t)&v178 - v33;
  __chkstk_darwin(v34);
  v218  = (uint64_t)&v178 - v35;
  uint64_t v36 = type metadata accessor for REMRemindersListDataView.SortingStyle();
  v222  = *(void (***)(uint64_t, uint64_t))(v36 - 8);
  v223  = v36;
  __chkstk_darwin(v36);
  v221  = (char *)&v178 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subtasks  = type metadata accessor for REMRemindersListDataView.FetchSubtasks();
  v230  = *(void (**)(uint64_t, uint64_t))(Subtasks - 8);
  __chkstk_darwin(Subtasks);
  v216  = (char *)&v178 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39);
  v220  = (char *)&v178 - v40;
  v227  = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  v224  = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  v204  = (char *)&v178 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  v213  = (char *)&v178 - v43;
  __chkstk_darwin(v44);
  v212  = (char *)&v178 - v45;
  __chkstk_darwin(v46);
  v231  = (char *)&v178 - v47;
  Configuration  = type metadata accessor for REMRemindersListDataView.FetchConfiguration();
  v229  = *(void *)(Configuration - 8);
  __chkstk_darwin(Configuration);
  uint64_t v49 = (char *)&v178 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v50);
  unint64_t v52 = (char *)&v178 - v51;
  __chkstk_darwin(v53);
  __int16 v55 = (char *)&v178 - v54;
  __chkstk_darwin(v56);
  uint64_t v58 = (char *)&v178 - v57;
  __chkstk_darwin(v59);
  unint64_t v61 = (char *)&v178 - v60;
  __chkstk_darwin(v62);
  uint64_t v64 = (char **)((char *)&v178 - v63);
  __chkstk_darwin(v65);
  uint64_t v67 = (void (*)(char *, uint64_t))((char *)&v178 - v66);
  __chkstk_darwin(v68);
  unint64_t v70 = (char *)&v178 - v69;
  v228  = a4;
  uint64_t v71 = (void *)REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.smartList.getter();
  uint64_t v72 = v233;
  id v73 = sub_1005AF2D0(v234, v232, v71);
  v233  = v72;
  if (v72)
  {

    return;
  }
  v183  = v70;
  v184  = v67;
  v185  = (char *)v64;
  v182  = v61;
  v180  = v58;
  v181  = v55;
  v179  = v52;
  v178  = v49;
  id v74 = v73;

  id v75 = [v74 accountID];
  id v76 = [v234 persistentStoreOfAccountWithAccountID:v75];

  v187  = v74;
  if (v76)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16)  = xmmword_10077A530;
    *(void *)(v77 + 32)  = v76;
    v235  = v77;
    specialized Array._endMutation()();
    v186  = v235;
  }
  else
  {
    v186  = 0;
  }
  uint64_t v78 = v224;
  uint64_t v79 = v185;
  int v80 = (char *)v184;
  uint64_t v81 = v183;
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v83  = v229 + 8;
  uint64_t v82 = *(void (**)(char *, uint64_t))(v229 + 8);
  long long v84 = v81;
  uint64_t v85 = Configuration;
  v82(v84, Configuration);
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  long long v86 = v220;
  REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
  v82(v80, v85);
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  v87  = v79;
  uint64_t v88 = (uint64_t)v221;
  REMRemindersListDataView.FetchConfiguration.sortingStyle.getter();
  uint64_t v89 = (uint64_t)v231;
  v82(v87, v85);
  long long v90 = v187;
  uint64_t v91 = v233;
  long long v92 = sub_1005AB4F8(v187, v234, v89, v86, v88);
  if (v91)
  {

    swift_bridgeObjectRelease();
    v222[1](v88, v223);
    (*((void (**)(char *, uint64_t))v230 + 1))(v86, Subtasks);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v89, v227);
    return;
  }
  v184  = v82;
  v185  = (char *)v92;
  v222[1](v88, v223);
  unint64_t v93 = (void (*)(char *, uint64_t))*((void *)v230 + 1);
  v230  = (void (*)(uint64_t, uint64_t))((char *)v230 + 8);
  v93(v86, Subtasks);
  v94  = *(void (***)(uint64_t, uint64_t))(v78 + 8);
  v231  = (char *)(v78 + 8);
  ((void (*)(uint64_t, uint64_t))v94)(v89, v227);
  unint64_t v95 = (void *)REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.smartList.getter();
  id v96 = [v95 objectID];

  if (qword_100907100 != -1) {
    swift_once();
  }
  unint64_t v97 = (objc_class *)qword_100942090;
  uint64_t v98 = (objc_class *)sub_1001D6E88();
  objc_super v99 = (objc_class *)sub_1001D73A8();
  unint64_t v100 = sub_1001D7584((unint64_t)v96, 1, (uint64_t)v234, v97, v98, v99);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v101 = (void *)sub_1001FFD68(v100);
  swift_bridgeObjectRelease();
  v102  = sub_10013D83C(v101, (uint64_t)v185);
  v222  = v94;
  v223  = v102;
  swift_bridgeObjectRelease();
  id v103 = v182;
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  v104  = v103;
  LOBYTE(v103)  = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
  uint64_t v105 = Configuration;
  uint64_t v106 = v184;
  v184(v104, Configuration);
  uint64_t v107 = v227;
  if ((v103 & 1) == 0) {
    goto LABEL_13;
  }
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  v229  = v83;
  uint64_t v108 = v212;
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v106(v104, v105);
  uint64_t v109 = v213;
  (*(void (**)(char *, void, uint64_t))(v224 + 104))(v213, enum case for REMRemindersListDataView.ShowCompleted.on(_:), v107);
  LODWORD(v233)  = static REMRemindersListDataView.ShowCompleted.== infix(_:_:)();
  uint64_t v110 = v109;
  __int16 v111 = v222;
  ((void (*)(char *, uint64_t))v222)(v110, v107);
  ((void (*)(char *, uint64_t))v111)(v108, v107);
  if (v233)
  {
    swift_bridgeObjectRetain();
    v112  = v218;
    REMRemindersListDataView.CountByCompleted.init(reminders:)();
    v113  = type metadata accessor for REMRemindersListDataView.CountByCompleted();
    v114  = v112;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v113 - 8) + 56))(v112, 0, 1, v113);
    v115  = v219;
  }
  else
  {
LABEL_13:
    v116  = v180;
    REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
    LODWORD(v233)  = REMRemindersListDataView.FetchConfiguration.countCompleted.getter();
    v106(v116, v105);
    v117  = v181;
    REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
    v118  = v216;
    REMRemindersListDataView.FetchConfiguration.fetchSubtasks.getter();
    v106(v117, v105);
    v119  = v217;
    sub_1005ABD10(v234, v233 & 1, v118, v187, v217);
    v120  = v219;
    v121  = v218;
    v93(v118, Subtasks);
    v114  = v121;
    sub_100096408(v119, v121, &qword_100909C70);
    v115  = v120;
  }
  v122  = [v214 fetchResultTokenToDiffAgainst];
  sub_10051F2BC(v122, (uint64_t)v234, v115);
  v123  = v232;
  v124  = v179;

  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.remindersPrefetch.getter();
  v125  = v184;
  v184(v124, v105);
  v126  = v211;
  v127  = v208;
  v128  = v209;
  (*(void (**)(void))(v211 + 16))();
  v129  = (*(uint64_t (**)(uint64_t *, uint64_t))(v126 + 88))(v127, v128);
  v233  = 0;
  if (v129 == enum case for REMRemindersListDataView.RemindersPrefetch.initial(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v126 + 96))(v127, v128);
    v130  = *v127;
    swift_bridgeObjectRetain();
    v131  = Array<A>.reminders.getter();
    v230  = (void (*)(uint64_t, uint64_t))sub_1005280D0(v130, v131, (uint64_t)v234, v123, 0);
    swift_bridgeObjectRelease();
    v132  = (uint64_t)v204;
LABEL_20:
    swift_bridgeObjectRelease();
    v128  = v209;
    v142  = (uint64_t)v205;
    v143  = v210;
    v144  = v178;
    goto LABEL_21;
  }
  v132  = (uint64_t)v204;
  if (v129 == enum case for REMRemindersListDataView.RemindersPrefetch.updatedInserted(_:))
  {
    v133  = *(void (**)(uint64_t *, uint64_t))(v126 + 96);
    v134  = v208;
    v133(v208, v128);
    v135  = *v134;
    swift_bridgeObjectRetain();
    v230  = (void (*)(uint64_t, uint64_t))sub_100528BCC(v135, v219, (uint64_t)v234, v123, 0);
    goto LABEL_20;
  }
  if (v129 == enum case for REMRemindersListDataView.RemindersPrefetch.initialAndDateRange(_:))
  {
    v136  = v208;
    (*(void (**)(uint64_t *, uint64_t))(v126 + 96))(v208, v128);
    v137  = *v136;
    v138  = sub_100094134(&qword_100909C78);
    v139  = v188;
    sub_100096408((uint64_t)v136 + *(int *)(v138 + 48), v188, &qword_100909C68);
    swift_bridgeObjectRetain();
    v140  = Array<A>.reminders.getter();
    v141  = (uint64_t)v234;
    v230  = (void (*)(uint64_t, uint64_t))sub_1005280D0(v137, v140, (uint64_t)v234, v123, 0);
    sub_10052929C(v139, v140, v141, v123, 0);
    v114  = v218;
    swift_bridgeObjectRelease();
    sub_1000966BC(v139, &qword_100909C68);
    goto LABEL_20;
  }
  v142  = (uint64_t)v205;
  v144  = v178;
  if (v129 != enum case for REMRemindersListDataView.RemindersPrefetch.none(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  v230  = (void (*)(uint64_t, uint64_t))_swiftEmptyArrayStorage;
  v143  = v210;
LABEL_21:
  (*(void (**)(char *, uint64_t))(v211 + 8))(v143, v128);
  v145  = v114;
  sub_1000BF710(v114, v142, &qword_100909C70);
  REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.configuration.getter();
  REMRemindersListDataView.FetchConfiguration.showCompleted.getter();
  v125(v144, Configuration);
  v146  = v233;
  v147  = v234;
  v148  = v187;
  sub_1005AC2DC(v234, v187, v142, v132, v185);
  v233  = v146;
  if (v146)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v222)(v132, v227);
    sub_1000966BC(v142, &qword_100909C70);
    (*(void (**)(uint64_t, uint64_t))(v206 + 8))(v219, v207);
    sub_1000966BC(v145, &qword_100909C70);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t))v222)(v132, v227);
    sub_1000966BC(v142, &qword_100909C70);
    sub_1000BF710(v145, v190, &qword_100909C70);
    v149  = v199;
    REMRemindersListDataView.SectionsModel.init(sections:remindersCount:hasIncompleteOrCompletedReminders:prefetchedReminders:prefetchedDueReminders:)();
    v150  = [v148 objectID];
    v151  = [v148 accountID];
    ManualOrdering  = REMRemindersListDataView.CustomSmartListSectionsInvocation.Parameters.shouldFetchManualOrderingID.getter();
    v153  = v201;
    sub_1005ACF5C(v150, v151, v147, ManualOrdering & 1, v201);

    (*(void (**)(char *, char *, uint64_t))(v200 + 16))(v191, v149, v202);
    sub_1000BF710(v153, v192, &qword_100909C60);
    v234  = v148;
    REMRemindersListDataView.CustomSmartListSectionsModel.init(sectionsModel:smartList:manualOrderingID:)();
    v154  = v206;
    if (qword_100906E68 != -1) {
      swift_once();
    }
    v155  = type metadata accessor for Logger();
    sub_10008E2DC(v155, (uint64_t)qword_100909C20);
    v156  = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
    v157  = v197;
    v158  = v219;
    v159  = v207;
    v156(v197, v219, v207);
    v160  = v198;
    v232  = v156;
    v156(v198, v158, v159);
    v161  = v185;
    swift_bridgeObjectRetain();
    v162  = Logger.logObject.getter();
    v163  = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v162, (os_log_type_t)v163))
    {
      LODWORD(v230)  = v163;
      v164  = swift_slowAlloc();
      *(_DWORD *)v164  = 134218496;
      v165  = v161[2];
      swift_bridgeObjectRelease();
      v235  = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v164 + 12)  = 2048;
      v166  = REMRemindersListDataView.Diff.updatedReminderObjectIDs.getter();
      if ((v166 & 0xC000000000000001) != 0) {
        v167  = __CocoaSet.count.getter();
      }
      else {
        v167  = *(void *)(v166 + 16);
      }
      v169  = v198;
      swift_bridgeObjectRelease();
      v170  = *(void (**)(char *, uint64_t))(v154 + 8);
      v231  = (char *)((v154 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      v170(v197, v159);
      v235  = v167;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v164 + 22)  = 2048;
      v171  = REMRemindersListDataView.Diff.insertedReminderObjectIDs.getter();
      if ((v171 & 0xC000000000000001) != 0) {
        v172  = __CocoaSet.count.getter();
      }
      else {
        v172  = *(void *)(v171 + 16);
      }
      swift_bridgeObjectRelease();
      v170(v169, v159);
      v235  = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v230, "reminders %ld updated %ld inserted %ld", (uint8_t *)v164, 0x20u);
      swift_slowDealloc();

      v230  = (void (*)(uint64_t, uint64_t))v170;
    }
    else
    {
      v168  = *(void (**)(char *, uint64_t))(v154 + 8);
      v231  = (char *)((v154 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      v168(v160, v159);
      v230  = (void (*)(uint64_t, uint64_t))v168;
      v168(v157, v159);

      swift_bridgeObjectRelease_n();
    }
    v173  = v189;
    v174  = v159;
    v175  = v203;
    v176  = v196;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v194, v203, v196);
    v177  = v219;
    v232(v193, v219, v174);
    sub_1000C8FE0(&qword_100909C80, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel);
    sub_1000C8FE0(&qword_100909C88, (void (*)(uint64_t))&type metadata accessor for REMRemindersListDataView.CustomSmartListSectionsModel);
    REMRemindersListDataView.DefaultInvocationResult.init(model:diff:)();

    (*(void (**)(char *, uint64_t))(v173 + 8))(v175, v176);
    sub_1000966BC(v201, &qword_100909C60);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v199, v202);
    v230(v177, v174);
    sub_1000966BC(v218, &qword_100909C70);
  }
}

uint64_t sub_1000C8FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int PermanentlyHideError.hashValue.getter()
{
  return Hasher._finalize()();
}

void PermanentlyHideError.hash(into:)()
{
}

Swift::Int sub_1000C9094()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C90E0@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  id v74 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v72 - 8);
  uint64_t v11 = __chkstk_darwin(v72);
  uint64_t v62 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v61 = (char *)&v58 - v14;
  __chkstk_darwin(v13);
  id v73 = (char *)&v58 - v15;
  uint64_t v64 = type metadata accessor for REMJSONType();
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v1;
  unint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v66 = a1;
  if (v19)
  {
    id v75 = _swiftEmptyArrayStorage;
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v19 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v58 = v2;
    uint64_t v59 = v17;
    uint64_t v21 = 0;
    unint64_t v68 = v18 & 0xC000000000000001;
    uint64_t v67 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v60 = v10;
    uint64_t v22 = (void (**)(uint64_t, char *, uint64_t))(v10 + 32);
    uint64_t v23 = (void (**)(uint64_t, char *, uint64_t))(v8 + 32);
    unint64_t v70 = v18;
    uint64_t v69 = v19;
    do
    {
      if (v68) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v32 = *(id *)(v18 + 8 * v21 + 32);
      }
      uint64_t v33 = v32;
      id v34 = [v32 identifier:v58, v59, v60];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v35 = [v33 dueDateDelta];
      id v36 = [v33 creationDate];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v37 = [v33 acknowledgedDate];
      if (v37)
      {
        uint64_t v24 = v37;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = 0;
      }
      else
      {
        uint64_t v25 = 1;
      }
      uint64_t v26 = v7;
      uint64_t v27 = (uint64_t)v7;
      uint64_t v28 = v71;
      (*v67)(v26, v25, 1, v71);
      ++v21;
      id v29 = [v33 minimumSupportedAppVersion];

      type metadata accessor for RDDueDateDeltaAlert();
      uint64_t v30 = swift_allocObject();
      (*v22)(v30 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier, v73, v72);
      *(void *)(v30 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta)  = v35;
      uint64_t v31 = v28;
      uint64_t v7 = (char *)v27;
      (*v23)(v30 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate, v74, v31);
      sub_1000CAAB4(v27, v30 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate);
      *(void *)(v30 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion)  = v29;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v18 = v70;
    }
    while (v69 != v21);
    swift_bridgeObjectRelease();
    uint64_t v10 = v60;
    uint64_t v17 = v59;
    uint64_t v3 = v58;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for RDDueDateDeltaAlert();
  sub_1000CAA04(&qword_100909CF0, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlert);
  Array<A>.toJSON()();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v3)
  {
    sub_100094134(&qword_100908170);
    uint64_t v38 = v10;
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100778370;
    *(void *)(inited + 32)  = 0xD000000000000012;
    *(void *)(inited + 40)  = 0x80000001007C6B00;
    uint64_t v40 = v65;
    id v41 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v65
                                                                + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID), "uuid"));
    uint64_t v42 = v61;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = UUID.uuidString.getter();
    uint64_t v44 = v17;
    uint64_t v46 = v45;
    uint64_t v47 = *(void (**)(char *, uint64_t))(v38 + 8);
    uint64_t v48 = v42;
    uint64_t v49 = v72;
    v47(v48, v72);
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v43;
    *(void *)(inited + 56)  = v46;
    *(void *)(inited + 72)  = &type metadata for String;
    *(void *)(inited + 80)  = 0xD000000000000011;
    *(void *)(inited + 8_Block_object_dispose(&STACK[0x260], 8) = 0x80000001007C86E0;
    id v50 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v40
                                                                + OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID), "uuid"));
    uint64_t v51 = v62;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v52 = UUID.uuidString.getter();
    uint64_t v54 = v53;
    v47(v51, v49);
    *(void *)(inited + 96)  = v52;
    *(void *)(inited + 104)  = v54;
    *(void *)(inited + 120)  = &type metadata for String;
    *(void *)(inited + 12_Block_object_dispose(&STACK[0x260], 8) = 0xD000000000000012;
    *(void *)(inited + 136)  = 0x80000001007C8700;
    REMJSONType.associatedValueAsAny.getter();
    *(void *)(inited + 176)  = 0xD000000000000017;
    *(void *)(inited + 184)  = 0x80000001007C63B0;
    uint64_t v55 = kREMSupportedVersionFor2023;
    *(void *)(inited + 216)  = &type metadata for Int;
    *(void *)(inited + 192)  = v55;
    unint64_t v56 = sub_1001805C0(inited);
    uint64_t v57 = v63;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v44, v64);
    *uint64_t v66 = v56;
    return (*(uint64_t (**)(void))(v57 + 104))();
  }
  return result;
}

id RDStoreControllerMigrator_UpdateAlternativeDueDatesOfCalDavReminders.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t type metadata accessor for RDDueDateDeltaAlerts()
{
  return self;
}

uint64_t sub_1000C99CC@<X0>(unint64_t *a1@<X8>)
{
  return sub_1000C90E0(a1);
}

uint64_t sub_1000C99F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000CA030(a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

void *sub_1000C9A1C(unint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  id v42 = a2;
  id v43 = a3;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(char **)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v49 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v48 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_17;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v15) {
      break;
    }
    id v50 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v15 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v40 = v8;
    unint64_t v41 = a1;
    uint64_t v8 = 0;
    id v36 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    unint64_t v37 = a1 & 0xC000000000000001;
    id v34 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    id v35 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v31[1]  = v4;
    id v32 = (void (**)(uint64_t, uint64_t))(v10 + 8);
    uint64_t v33 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v38 = v15;
    uint64_t v39 = v12;
    uint64_t v44 = v9;
    while (v15 != v8)
    {
      if (v37)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 8 * v8 + 32);
        swift_retain();
      }
      (*v36)(v48, v13 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_identifier, v12);
      uint64_t v23 = *(void **)(v13 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_dueDateDelta);
      (*v35)(v49, v13 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_creationDate, v9);
      uint64_t v24 = v40;
      sub_1000CAA4C(v13 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_acknowledgedDate, v40);
      id v45 = *(id *)(v13 + OBJC_IVAR____TtC7remindd19RDDueDateDeltaAlert_minimumSupportedAppVersion);
      id v47 = v42;
      id v25 = v43;
      uint64_t v46 = v23;
      uint64_t v26 = v9;
      v27.super.isa  = UUID._bridgeToObjectiveC()().super.isa;
      v28.super.isa  = Date._bridgeToObjectiveC()().super.isa;
      int v29 = (*v34)(v24, 1, v26);
      id v30 = v25;
      if (v29 == 1)
      {
        v17.super.isa  = 0;
        unint64_t v18 = (void (**)(char *, uint64_t))v32;
      }
      else
      {
        v17.super.isa  = Date._bridgeToObjectiveC()().super.isa;
        unint64_t v18 = (void (**)(char *, uint64_t))v32;
        (*v32)(v24, v44);
      }
      ++v8;
      id v19 = objc_allocWithZone((Class)REMDueDateDeltaAlert);
      uint64_t v20 = v47;
      uint64_t v21 = v30;
      id v22 = v30;
      uint64_t v10 = v46;
      id v45 = [v19 initWithIdentifier:v27.super.isa reminderID:v47 accountID:v22 dueDateDelta:v46 creationDate:v28.super.isa acknowledgedDate:v17.super.isa minimumSupportedAppVersion:v45];

      uint64_t v9 = v44;
      (*v18)(v49, v44);
      uint64_t v12 = v39;
      (*v33)(v48, v39);
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v4 = v50[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v15 = v38;
      a1  = v41;
      if (v38 == v8) {
        return v50;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000C9EA8(unint64_t result)
{
  unint64_t v1 = result;
  if (!(result >> 62))
  {
    if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_8:
    sub_1000CAB1C();
    swift_allocError();
    swift_willThrow();
    return v1;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v2 = *(id *)(v1 + 32);
LABEL_6:
    id v3 = [v2 reminderID];
    id v4 = [v2 accountID];
    uint64_t v5 = (objc_class *)type metadata accessor for RDDueDateDeltaAlerts();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    *(void *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID]  = v3;
    *(void *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID]  = v4;
    *(void *)&v6[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects]  = v1;
    v8.receiver  = v6;
    v8.super_class  = v5;
    swift_bridgeObjectRetain();
    unint64_t v1 = (unint64_t)[super init];

    return v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000CA030(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100909CD0);
  uint64_t v64 = *(void *)(v2 - 8);
  uint64_t v65 = v2;
  __chkstk_darwin(v2);
  uint64_t v63 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100094134(&qword_100909CD8);
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  __chkstk_darwin(v4);
  uint64_t v66 = (uint64_t *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = sub_100094134(&qword_100909CE0);
  uint64_t v6 = *(void *)(v73 - 8);
  uint64_t v7 = __chkstk_darwin(v73);
  unint64_t v70 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v61 - v9;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v71 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = type metadata accessor for REMJSONType();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  int v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == enum case for REMJSONType.jsonObject(_:))
  {
    uint64_t v62 = v12;
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v20, v17);
    uint64_t v22 = *v20;
    uint64_t v23 = enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
    uint64_t v25 = v73;
    v24(v10, enum case for Dictionary<>.DeserializableValueType.uuid<A, B><A1>(_:), v73);
    uint64_t v69 = v22;
    uint64_t v26 = v72;
    Dictionary<>.deserializeRequired<A>(key:valueType:)();
    NSUUID v27 = *(void (**)(char *, uint64_t))(v6 + 8);
    v27(v10, v25);
    if (v26)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v61 = v16;
      id v30 = v70;
      v24(v70, v23, v73);
      uint64_t v31 = v71;
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      uint64_t v32 = v11;
      v27(v30, v73);
      uint64_t v33 = type metadata accessor for RDDueDateDeltaAlert();
      uint64_t v34 = sub_1000CAA04(&qword_100909CF0, (void (*)(uint64_t))type metadata accessor for RDDueDateDeltaAlert);
      id v36 = v66;
      uint64_t v35 = v67;
      *uint64_t v66 = v33;
      v36[1]  = v34;
      uint64_t v37 = v68;
      (*(void (**)(uint64_t *, void, uint64_t))(v35 + 104))(v36, enum case for Dictionary<>.DeserializableValueType.jsonArray<A, B><A1>(_:), v68);
      sub_100094134(&qword_100909CF8);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      uint64_t v38 = v62;
      (*(void (**)(uint64_t *, uint64_t))(v35 + 8))(v36, v37);
      unint64_t v39 = v75;
      uint64_t v41 = v64;
      uint64_t v40 = v65;
      id v42 = v63;
      (*(void (**)(char *, void, uint64_t))(v64 + 104))(v63, enum case for Dictionary<>.DeserializableValueType.integer<A, B><A1>(_:), v65);
      Dictionary<>.deserializeRequired<A>(key:valueType:)();
      id v43 = v61;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
      swift_bridgeObjectRelease();
      unint64_t v44 = v75;
      if (rem_isUnsupportedVersionByRuntime())
      {
        swift_bridgeObjectRelease();
        uint64_t v45 = type metadata accessor for REMJSONDeserializationError();
        sub_1000CAA04((unint64_t *)&qword_100909CE8, (void (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError);
        swift_allocError();
        unint64_t *v46 = v44;
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v45 - 8) + 104))(v46, enum case for REMJSONDeserializationError.notSupported(_:), v45);
        swift_willThrow();
        uint64_t v10 = *(char **)(v38 + 8);
        ((void (*)(char *, uint64_t))v10)(v31, v32);
        ((void (*)(char *, uint64_t))v10)(v43, v32);
      }
      else
      {
        id v47 = self;
        isa  = UUID._bridgeToObjectiveC()().super.isa;
        id v49 = [v47 objectIDWithUUID:isa];

        id v50 = self;
        Class v51 = UUID._bridgeToObjectiveC()().super.isa;
        id v52 = [v50 objectIDWithUUID:v51];

        uint64_t v53 = (objc_class *)type metadata accessor for RDDueDateDeltaAlerts();
        uint64_t v54 = (char *)objc_allocWithZone(v53);
        *(void *)&v54[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_reminderID]  = v49;
        *(void *)&v54[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_accountID]  = v52;
        uint64_t v55 = v38;
        id v56 = v49;
        id v57 = v52;
        uint64_t v58 = v54;
        uint64_t v59 = sub_1000C9A1C(v39, v56, v57);
        swift_bridgeObjectRelease();
        *(void *)&v58[OBJC_IVAR____TtC7remindd20RDDueDateDeltaAlerts_remObjects]  = v59;

        v74.receiver  = v58;
        v74.super_class  = v53;
        uint64_t v10 = (char *)[super init];

        uint64_t v60 = *(void (**)(char *, uint64_t))(v55 + 8);
        v60(v71, v32);
        v60(v61, v32);
      }
    }
    return (uint64_t)v10;
  }
  if (v21 == enum case for REMJSONType.jsonArray(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v20, v17);
    swift_bridgeObjectRelease();
    uint64_t v10 = (char *)type metadata accessor for REMJSONDeserializationError();
    sub_1000CAA04((unint64_t *)&qword_100909CE8, (void (*)(uint64_t))&type metadata accessor for REMJSONDeserializationError);
    swift_allocError();
    (*(void (**)(uint64_t, void, char *))(*((void *)v10 - 1) + 104))(v28, enum case for REMJSONDeserializationError.invalidData(_:), v10);
    swift_willThrow();
    return (uint64_t)v10;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CAA04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000CAA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000CAAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909A40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000CAB1C()
{
  unint64_t result = qword_100909D00;
  if (!qword_100909D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909D00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RDDueDateDeltaAlerts.ValidationError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for RDDueDateDeltaAlerts.ValidationError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000CAC60);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDueDateDeltaAlerts.ValidationError()
{
  return &type metadata for RDDueDateDeltaAlerts.ValidationError;
}

unint64_t sub_1000CAC9C()
{
  unint64_t result = qword_100909D08;
  if (!qword_100909D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909D08);
  }
  return result;
}

uint64_t sub_1000CACF0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909D10);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909D10);
  if (qword_100907828 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424C0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000CADB8(uint64_t a1, void (*a2)(void, void), uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  v83  = (void *)a1;
  uint64_t v9 = (void (*)(objc_class *, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double))*v4;
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v10 - 8);
  uint64_t v72 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v71 = (Class *)((char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14);
  unint64_t v70 = (char *)&v66 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  objc_super v74 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v81 = (char *)&v66 - v20;
  unint64_t v69 = v21;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v66 - v23;
  if (qword_100906E70 != -1) {
    swift_once();
  }
  uint64_t v82 = v17;
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = (void *)sub_10008E2DC(v25, (uint64_t)qword_100909D10);
  swift_retain_n();
  id v77 = v26;
  NSUUID v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v79 = a2;
  uint64_t v80 = a3;
  long long v84 = v24;
  uint64_t v85 = v9;
  uint64_t v73 = v12;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v86 = v78;
    *(_DWORD *)uint64_t v30 = 136446466;
    v87  = (uint64_t)v9;
    swift_getMetatypeMetadata();
    uint64_t v32 = String.init<A>(describing:)();
    v87  = sub_1000C51B8(v32, v33, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12)  = 2114;
    uint64_t v34 = (void *)v5[2];
    v87  = (uint64_t)v34;
    id v35 = v34;
    uint64_t v24 = v84;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v34;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s: Start execution {templateObjectID: %{public}@}", (uint8_t *)v30, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  id v36 = (void *)v5[2];
  int v37 = *((unsigned __int8 *)v5 + 64);
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16)  = 0;
  uint64_t v38 = (void *)sub_1002E3C78(v36, (uint64_t)v83, (Class)&off_1008B1660, 0);
  swift_arrayDestroy();
  id v39 = [v38 publicLinkURLUUID];
  if (!v39)
  {
    uint64_t v44 = v72;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v72, 1, 1, v76);
    goto LABEL_10;
  }
  uint64_t v40 = v39;
  LODWORD(v81)  = v37;
  uint64_t v41 = v71;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v42 = v73;
  id v43 = *(void (**)(void))(v73 + 32);
  uint64_t v44 = v72;
  uint64_t v45 = v41;
  uint64_t v46 = v76;
  ((void (*)(uint64_t, void *, uint64_t))v43)(v72, v45, v76);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v46);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v44, 1, v46) == 1)
  {
LABEL_10:
    sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
    sub_1000CB960((uint64_t)v36, 0, v78, v36, (uint64_t)v24, v79, v80, (uint64_t)v85);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v24, v16);
    return swift_release();
  }
  id v77 = v38;
  v43();
  Class v66 = sub_1000D5500();
  uint64_t v72 = v5[6];
  uint64_t v67 = v5[7];
  uint64_t v71 = sub_1000C0DE0(v5 + 3, v72);
  uint64_t v68 = type metadata accessor for RDPublicTemplate();
  uint64_t v47 = v82;
  uint64_t v48 = v74;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v74, v24, v16);
  uint64_t v49 = v47;
  unint64_t v50 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  unint64_t v51 = (v69 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v69 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v16;
  uint64_t v75 = v16;
  uint64_t v55 = v53;
  Class v56 = v66;
  *(void *)(v53 + 16)  = v36;
  *(void *)(v53 + 24)  = v56;
  (*(void (**)(unint64_t, char *, uint64_t))(v49 + 32))(v53 + v50, v48, v54);
  id v57 = v83;
  *(void *)(v55 + v51)  = v83;
  uint64_t v58 = v79;
  *(void *)(v55 + v52)  = v78;
  unint64_t v59 = v55 + v69;
  uint64_t v60 = v80;
  *(void *)unint64_t v59 = v58;
  *(void *)(v59 + _Block_object_dispose(&STACK[0x260], 8) = v60;
  *(unsigned char *)(v59 + 16)  = (_BYTE)v81;
  *(void *)(v55 + ((v52 + 39) & 0xFFFFFFFFFFFFFFF8))  = v85;
  uint64_t v61 = v67;
  uint64_t v85 = *(void (**)(objc_class *, uint64_t, uint64_t (*)(uint64_t, char), uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t, double))(v67 + 16);
  id v62 = v36;
  uint64_t v63 = v56;
  id v64 = v57;
  swift_retain();
  swift_retain();
  v85(v63, v68, sub_1000CD8E0, v55, v68, &off_1008B8DD8, v72, v61, a4);

  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v70, v76);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v75);
  return swift_release();
}

void sub_1000CB960(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(void, void), uint64_t a7, uint64_t a8)
{
  uint64_t v52 = a1;
  uint64_t v53 = a7;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v51 = &v45[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v17);
  uint64_t v19 = &v45[-v18];
  uint64_t v20 = (unsigned char *)(a3 + 16);
  swift_beginAccess();
  if (*(unsigned char *)(a3 + 16))
  {
    if (qword_100906E70 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_100909D10);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v55 = a8;
      swift_getMetatypeMetadata();
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v55 = sub_1000C51B8(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s: Attempted to call completion more than once", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v27 = a2 & 1;
    swift_beginAccess();
    *uint64_t v20 = 1;
    if (qword_100906E70 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_100909D10);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v19, a5, v14);
    id v29 = a4;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc();
      unsigned int v50 = v27;
      uint64_t v34 = v33;
      uint64_t v47 = (void *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v54 = v49;
      *(_DWORD *)uint64_t v34 = 136446722;
      os_log_t v48 = v30;
      uint64_t v56 = a8;
      swift_getMetatypeMetadata();
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v56 = sub_1000C51B8(v35, v36, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12)  = 2114;
      uint64_t v56 = (uint64_t)v29;
      id v37 = v29;
      int v46 = v32;
      uint64_t v38 = a6;
      id v39 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v29;

      a6  = v38;
      *(_WORD *)(v34 + 22)  = 2048;
      uint64_t v40 = v51;
      Date.init()();
      Date.timeIntervalSince(_:)();
      uint64_t v42 = v41;
      id v43 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
      v43(v40, v14);
      uint64_t v56 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v43(v19, v14);
      os_log_t v44 = v48;
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v46, "%{public}s: Finished execution {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v34, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v27 = v50;
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v19, v14);
    }
    a6(v52, v27);
  }
}

uint64_t sub_1000CBEB0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkURLUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1000CBEE4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000CBF20(uint64_t a1, char a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, void), uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  objc_super v99 = a8;
  unint64_t v100 = (objc_class *)a7;
  uint64_t v96 = a6;
  uint64_t v103 = a5;
  uint64_t v15 = a11;
  uint64_t v101 = a9;
  v102  = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v102 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v102);
  uint64_t v18 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19);
  unint64_t v97 = &v87[-v20];
  __chkstk_darwin(v21);
  os_log_type_t v23 = &v87[-v22];
  if (a2)
  {
    swift_errorRetain();
    if (qword_100906E70 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10008E2DC(v46, (uint64_t)qword_100909D10);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v16 + 16))(v18, v103, v102);
    id v47 = a3;
    id v48 = a4;
    sub_1000CD9C4(a1, 1);
    id v49 = v47;
    id v50 = v48;
    sub_1000CD9C4(a1, 1);
    unint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    int v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v54 = swift_slowAlloc();
      v94  = v53;
      uint64_t v55 = v54;
      uint64_t v56 = (void *)swift_slowAlloc();
      long long v92 = (void (*)(void, void, void))v56;
      uint64_t v96 = swift_slowAlloc();
      v110[0]  = v96;
      *(_DWORD *)uint64_t v55 = 136447234;
      os_log_t v93 = v51;
      uint64_t v95 = a11;
      uint64_t aBlock = (id)a11;
      swift_getMetatypeMetadata();
      uint64_t v57 = String.init<A>(describing:)();
      uint64_t aBlock = (id)sub_1000C51B8(v57, v58, v110);
      id v98 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12)  = 2114;
      uint64_t aBlock = v98;
      id v59 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v56 = v98;

      *(_WORD *)(v55 + 22)  = 2082;
      id v60 = [v50 recordName];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      uint64_t aBlock = (id)sub_1000C51B8(v61, v63, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 32)  = 2082;
      swift_getErrorValue();
      uint64_t v64 = Error.rem_errorDescription.getter();
      uint64_t aBlock = (id)sub_1000C51B8(v64, v65, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000CD9D0(a1, 1);
      sub_1000CD9D0(a1, 1);
      *(_WORD *)(v55 + 42)  = 2048;
      Class v66 = v97;
      Date.init()();
      Date.timeIntervalSince(_:)();
      id v68 = v67;
      unint64_t v69 = *(void (**)(void, void))(v16 + 8);
      unint64_t v70 = v66;
      uint64_t v71 = v102;
      v69(v70, v102);
      uint64_t aBlock = v68;
      id v49 = v98;
      uint64_t v15 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v69(v18, v71);
      os_log_t v72 = v93;
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v94, "%{public}s: Failed to delete content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v55, 0x34u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_15:
      swift_errorRetain();
      sub_1000CB960(a1, 1, (uint64_t)v100, v49, v103, v99, v101, v15);
      sub_1000CD9D0(a1, 1);
      return sub_1000CD9D0(a1, 1);
    }
LABEL_14:

    sub_1000CD9D0(a1, 1);
    sub_1000CD9D0(a1, 1);
    (*(void (**)(NSObject *, uint64_t))(v16 + 8))(v18, v102);

    goto LABEL_15;
  }
  if (qword_100906E70 != -1) {
    swift_once();
  }
  v94  = a10;
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_100909D10);
  uint64_t v25 = *(void (**)(void, void, void))(v16 + 16);
  a1  = v102;
  os_log_t v93 = (os_log_t)(v16 + 16);
  long long v92 = v25;
  v25(v23, v103, v102);
  id v26 = a3;
  id v27 = a4;
  id v98 = v26;
  id v28 = v27;
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  int v31 = v30;
  BOOL v32 = os_log_type_enabled(v29, v30);
  uint64_t v95 = a11;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v91 = (void *)swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    v110[0]  = v90;
    *(_DWORD *)uint64_t v33 = 136446978;
    os_log_t v89 = v29;
    uint64_t aBlock = (id)a11;
    swift_getMetatypeMetadata();
    uint64_t v34 = String.init<A>(describing:)();
    int v88 = v31;
    uint64_t aBlock = (id)sub_1000C51B8(v34, v35, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12)  = 2114;
    id v36 = v98;
    uint64_t aBlock = v98;
    id v37 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v91 = v36;

    *(_WORD *)(v33 + 22)  = 2082;
    id v38 = [v28 recordName];
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v41 = v40;

    uint64_t aBlock = (id)sub_1000C51B8(v39, v41, v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a1  = v102;
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32)  = 2048;
    uint64_t v15 = (uint64_t)v97;
    Date.init()();
    Date.timeIntervalSince(_:)();
    id v43 = v42;
    os_log_t v44 = *(void (**)(void, void))(v16 + 8);
    v44(v15, a1);
    uint64_t aBlock = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v44(v23, a1);
    os_log_t v45 = v89;
    _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v88, "%{public}s: Deleted content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, elapsedSeconds: %f}", (uint8_t *)v33, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v73 = v98;
    (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v23, a1);

    uint64_t v15 = (uint64_t)v97;
  }
  v92(v15, v103, a1);
  unint64_t v74 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v75 = (v17 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  id v49 = (id)v96;
  v18[2].isa  = (Class)v98;
  v18[3].isa  = (Class)v49;
  id v77 = *(void (**)(void, void, void))(v16 + 32);
  v16 += 32;
  v77((char *)v18 + v74, v15, a1);
  uint64_t v78 = v99;
  *(Class *)((char *)&v18->isa + v75)  = v100;
  uint64_t v79 = (Class *)((char *)&v18->isa + v76);
  uint64_t v80 = v101;
  *uint64_t v79 = v78;
  v79[1]  = v80;
  *(Class *)((char *)&v18->isa + ((v76 + 23) & 0xFFFFFFFFFFFFFFF8))  = (Class)v95;
  if (v94)
  {
    unint64_t v51 = swift_allocObject();
    v51[2].isa  = (Class)sub_1000CDAE8;
    v51[3].isa  = (Class)v18;
    uint64_t v108 = sub_10008F6F4;
    uint64_t v109 = v51;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v105 = 1107296256;
    uint64_t v106 = sub_1003B3260;
    uint64_t v107 = &unk_1008B8C98;
    uint64_t v81 = _Block_copy(&aBlock);
    id v82 = v98;
    id v50 = v49;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v50 performBlockAndWait:v81];
    _Block_release(v81);
    LOBYTE(v81)  = swift_isEscapingClosureAtFileLocation();
    swift_release_n();
    uint64_t result = swift_release();
    if ((v81 & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v108 = sub_1000CDAE8;
  uint64_t v109 = v18;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v105 = 1107296256;
  uint64_t v106 = sub_100236C78;
  uint64_t v107 = &unk_1008B8C48;
  long long v84 = _Block_copy(&aBlock);
  id v85 = v98;
  id v86 = v49;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v86 performBlock:v84];
  _Block_release(v84);
  return swift_release();
}

void sub_1000CCAC8(void *a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void, void), uint64_t a6, void *a7)
{
  uint64_t v74 = a6;
  unint64_t v75 = a7;
  uint64_t v73 = a4;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_t v72 = (char *)&v65 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v65 - v18;
  sub_1000CDBBC(a1, (uint64_t)a2);
  id v76 = 0;
  if ([a2 save:&v76])
  {
    uint64_t v20 = qword_100906E70;
    id v21 = v76;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_100909D10);
    uint64_t v23 = v12;
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v71 = a3;
    v24(v19, a3, v11);
    id v25 = a1;
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    int v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v29 = swift_slowAlloc();
      os_log_t v68 = v26;
      uint64_t v30 = v29;
      int v31 = (void *)swift_slowAlloc();
      uint64_t v66 = (uint64_t)v31;
      uint64_t v69 = swift_slowAlloc();
      uint64_t v77 = v69;
      *(_DWORD *)uint64_t v30 = 136446722;
      LODWORD(v67)  = v28;
      id v76 = v75;
      swift_getMetatypeMetadata();
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v70 = (uint64_t)a5;
      id v76 = (id)sub_1000C51B8(v32, v33, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12)  = 2114;
      id v76 = v25;
      id v34 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v31 = v25;

      *(_WORD *)(v30 + 22)  = 2048;
      unint64_t v35 = v72;
      Date.init()();
      Date.timeIntervalSince(_:)();
      id v37 = v36;
      id v38 = *(void (**)(char *, uint64_t))(v23 + 8);
      v38(v35, v11);
      id v76 = v37;
      a5  = (void (*)(void, void))v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38(v19, v11);
      os_log_t v39 = v68;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v67, "%{public}s: Reset template's public link to nil {templateObjectID: %{public}@, elapsedSeconds: %f}", (uint8_t *)v30, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
    }
    sub_1000CB960((uint64_t)v25, 0, v73, v25, v71, a5, v74, (uint64_t)v75);
  }
  else
  {
    id v40 = v76;
    uint64_t v41 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906E70 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_100909D10);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
    id v43 = a1;
    swift_errorRetain();
    id v44 = v43;
    swift_errorRetain();
    os_log_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    int v47 = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v71 = a3;
      uint64_t v49 = v48;
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = v14;
      id v50 = (void *)v66;
      uint64_t v70 = swift_slowAlloc();
      uint64_t v77 = v70;
      *(_DWORD *)uint64_t v49 = 136446978;
      LODWORD(v69)  = v47;
      id v76 = v75;
      swift_getMetatypeMetadata();
      os_log_t v68 = v45;
      uint64_t v51 = String.init<A>(describing:)();
      id v76 = (id)sub_1000C51B8(v51, v52, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12)  = 2114;
      id v76 = v44;
      id v53 = v44;
      uint64_t v65 = v11;
      uint64_t v54 = a5;
      id v55 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v50 = v44;

      a5  = v54;
      *(_WORD *)(v49 + 22)  = 2082;
      swift_getErrorValue();
      uint64_t v56 = Error.rem_errorDescription.getter();
      id v76 = (id)sub_1000C51B8(v56, v57, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v49 + 32)  = 2048;
      unint64_t v58 = v72;
      Date.init()();
      id v59 = v67;
      Date.timeIntervalSince(_:)();
      uint64_t v61 = v60;
      unint64_t v62 = *(void (**)(char *, uint64_t))(v12 + 8);
      unint64_t v63 = v58;
      uint64_t v64 = v65;
      v62(v63, v65);
      id v76 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v62(v59, v64);
      os_log_t v45 = v68;
      _os_log_impl((void *)&_mh_execute_header, v68, (os_log_type_t)v69, "%{public}s: Failed to reset template's public link to nil {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}", (uint8_t *)v49, 0x2Au);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      a3  = v71;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }

    swift_errorRetain();
    sub_1000CB960(v41, 1, v73, v44, a3, a5, v74, (uint64_t)v75);
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1000CD2B0()
{
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDTemplateOperationRevokeTemplatePublicLink()
{
  return self;
}

uint64_t sub_1000CD314()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000CD324@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkCreationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CD358(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000CD394(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), SEL *a8)
{
  uint64_t v14 = sub_100094134(a5);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000BF710(a1, (uint64_t)v16, a5);
  uint64_t v17 = *a2;
  uint64_t v18 = a6(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18) != 1)
  {
    uint64_t v20 = (void *)a7();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
  }
  [v17 *a8:v20];
}

uint64_t sub_1000CD4DC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkExpirationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CD510(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000CD54C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkLastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CD580(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000CD5BC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_mostRecentPublicLinkUpdateRequestDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

uint64_t sub_1000CD5F0@<X0>(id *a1@<X0>, SEL *a2@<X3>, void (*a3)(void)@<X4>, uint64_t (*a4)(void)@<X5>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    uint64_t v9 = v8;
    a3();

    uint64_t v10 = ((uint64_t (*)(void))a4)(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = a5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v15 = a4();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v12 = v15;
    uint64_t v13 = a5;
    uint64_t v14 = 1;
  }

  return v11(v13, v14, 1, v12);
}

void sub_1000CD6D0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000CD70C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v10 = sub_1000C1FE8((uint64_t *)&v13);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v10, a2, a5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16)  = a1;
  sub_1000967D4(&v13, v11 + 24);
  *(unsigned char *)(v11 + 64)  = a3;
  return v11;
}

uint64_t sub_1000CD7BC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000CD8E0(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000CBF20(a1, v4, *(void **)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v8), *(void (**)(void, void))(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(v2 + ((v8 + 39) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000CD9C4(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_1000CD9D0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1000CD9DC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1000CDAE8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void **)(v0 + 16);
  unint64_t v6 = *(void **)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + v3);
  unint64_t v8 = *(void (**)(void, void))(v0 + v4);
  uint64_t v9 = *(void *)(v0 + v4 + 8);
  uint64_t v10 = *(void **)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8));

  sub_1000CCAC8(v5, v6, v0 + v2, v7, v8, v9, v10);
}

uint64_t sub_1000CDB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000CDBA4()
{
  return swift_release();
}

uint64_t sub_1000CDBAC()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000CDBBC(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1002E3C78(a1, a2, 0, 0);
  if (!v2)
  {
    uint64_t v12 = (void *)v11;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    v14(v10, 1, 1, v13);
    KeyPath  = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(KeyPath, (uint64_t)v10);
    swift_release();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    uint64_t v16 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
    uint64_t v17 = (NSURL *)swift_getKeyPath();
    sub_100161A84(v17, (uint64_t)v7);
    swift_release();
    sub_1000966BC((uint64_t)v7, (uint64_t *)&unk_100909E50);
    [v12 setPublicLinkConfigurationData:0];
    id v18 = [v12 createResolutionTokenMapIfNecessary];
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 updateForKey:v19];

    v14(v10, 1, 1, v13);
    uint64_t v20 = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(v20, (uint64_t)v10);
    swift_release();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    v14(v10, 1, 1, v13);
    uint64_t v21 = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(v21, (uint64_t)v10);
    swift_release();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    v14(v10, 1, 1, v13);
    uint64_t v22 = (NSURL *)swift_getKeyPath();
    sub_10015F5D0(v22, (uint64_t)v10);
    swift_release();
    sub_1000966BC((uint64_t)v10, (uint64_t *)&unk_100909A40);
    [v12 updateChangeCount];
  }
}

const char *sub_1000CDF00()
{
  return "mostRecentPublicLinkUpdateRequestDate";
}

uint64_t sub_1000CDF0C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_mostRecentPublicLinkUpdateRequestDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CDF54(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000CDFA4()
{
  return "publicLinkURLUUID";
}

uint64_t sub_1000CDFB0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkURLUUID, (void (*)(void))&static UUID._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for UUID, a2);
}

void sub_1000CDFF8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000CE048()
{
  return "publicLinkCreationDate";
}

uint64_t sub_1000CE054@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkCreationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CE09C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000CE0EC()
{
  return "publicLinkLastModifiedDate";
}

uint64_t sub_1000CE0F8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkLastModifiedDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CE140(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000CE190()
{
  return "publicLinkExpirationDate";
}

uint64_t sub_1000CE19C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000CD5F0(a1, (SEL *)&selRef_publicLinkExpirationDate, (void (*)(void))&static Date._unconditionallyBridgeFromObjectiveC(_:), (uint64_t (*)(void))&type metadata accessor for Date, a2);
}

void sub_1000CE1E4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1000CE23C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909DD8);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909DD8);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000CE304(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = &v40[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  switch(a1 >> 62)
  {
    case 1uLL:
      sub_100094134(&qword_100909E00);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16)  = xmmword_100776E60;
      KeyPath  = swift_getKeyPath();
      swift_bridgeObjectRetain();
      id v13 = a4;
      uint64_t v32 = sub_10032ECEC(KeyPath, a1);
      swift_release();
      *(void *)(v11 + 32)  = v32;
      uint64_t v33 = swift_getKeyPath();
      uint64_t v34 = sub_10039F13C(v33, a2, a3, 6);
      swift_release();
      *(void *)(v11 + 40)  = v34;
      uint64_t v17 = swift_getKeyPath();
      id v18 = [v13 uuid];
      goto LABEL_7;
    case 2uLL:
      sub_100094134(&qword_100909E00);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16)  = xmmword_100776E80;
      uint64_t v20 = swift_getKeyPath();
      sub_1000CFF10(a1, a2, a3, a4);
      uint64_t v21 = sub_10032ECEC(v20, a1);
      swift_release();
      *(void *)(v19 + 32)  = v21;
      uint64_t v22 = swift_getKeyPath();
      uint64_t v23 = sub_10032ECF8(v22, a2, a3);
      sub_1000CFFDC(a1, a2, a3, a4);
      swift_release();
      *(void *)(v19 + 40)  = v23;
      uint64_t v41 = v19;
      goto LABEL_5;
    case 3uLL:
      sub_100094134(&qword_100909E00);
      uint64_t v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16)  = xmmword_100776E40;
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16)  = xmmword_100776E80;
      uint64_t v26 = swift_getKeyPath();
      uint64_t v27 = sub_10039F148(v26);
      swift_release();
      *(void *)(inited + 32)  = v27;
      uint64_t v28 = swift_getKeyPath();
      uint64_t v29 = sub_10039F148(v28);
      swift_release();
      *(void *)(inited + 40)  = v29;
      uint64_t v41 = inited;
      specialized Array._endMutation()();
      *(void *)(v24 + 32)  = sub_100397E58(v41);
      uint64_t v41 = v24;
LABEL_5:
      specialized Array._endMutation()();
      uint64_t v30 = v41;
      break;
    default:
      sub_100094134(&qword_100909E00);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16)  = xmmword_100776E60;
      uint64_t v12 = swift_getKeyPath();
      swift_bridgeObjectRetain();
      id v13 = a4;
      uint64_t v14 = sub_10032ECEC(v12, a1);
      swift_release();
      *(void *)(v11 + 32)  = v14;
      uint64_t v15 = swift_getKeyPath();
      uint64_t v16 = sub_10032ECF8(v15, a2, a3);
      swift_release();
      swift_bridgeObjectRelease();
      *(void *)(v11 + 40)  = v16;
      uint64_t v17 = swift_getKeyPath();
      id v18 = [v13 uuid];
LABEL_7:
      id v35 = v18;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v36 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v10, 0, 1, v36);
      uint64_t v37 = sub_10032ED04(v17, (uint64_t)v10);
      swift_release();
      *(void *)(v11 + 4_Block_object_dispose(&STACK[0x260], 8) = v37;
      uint64_t v41 = v11;
      specialized Array._endMutation()();
      uint64_t v30 = v41;

      break;
  }
  sub_100094134(&qword_100909E00);
  uint64_t v38 = swift_initStackObject();
  *(_OWORD *)(v38 + 16)  = xmmword_100776E40;
  *(void *)(v38 + 32)  = sub_1002F51CC(0);
  uint64_t v41 = v38;
  specialized Array._endMutation()();
  sub_100201C94(v30);
  return sub_1002F52FC(v41);
}

id sub_1000CE784@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 listTypeRawValue];
  *a2  = (_WORD)result;
  return result;
}

id sub_1000CE7B8(__int16 *a1, id *a2)
{
  return [*a2 setListTypeRawValue:*a1];
}

void sub_1000CE7CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000CE7D8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000CE7E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000CE7F0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000CE7FC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000CE808(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3  = v6;
  a3[1]  = v8;
}

void sub_1000CE86C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000CE878(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  if (*(void *)(a1 + 8)) {
    NSString v7 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v7 = 0;
  }
  id v8 = v7;
  [v6 *a5];
}

uint64_t sub_1000CE8E8()
{
  sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
  swift_getKeyPath();
  uint64_t result = NSSortDescriptor.init<A, B>(keyPath:ascending:)();
  qword_100941FB8  = result;
  return result;
}

id sub_1000CE93C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 lastAccessedSinceReferenceDate];
  *a2  = result;
  return result;
}

id sub_1000CE970(unsigned int *a1, id *a2)
{
  return [*a2 setLastAccessedSinceReferenceDate:*a1];
}

void sub_1000CE984(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = REMCacheContext.object(forKey:)();
  swift_beginAccess();
  id v4 = *(void **)(a2 + 16);
  *(void *)(a2 + 16)  = v3;
}

id sub_1000CE9E8(void *a1, uint64_t a2, unint64_t a3, void *a4, void *a5)
{
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v56 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = (void *)type metadata accessor for UUID();
  uint64_t v57 = *(v13 - 1);
  id v58 = v13;
  __chkstk_darwin(v13);
  uint64_t v54 = (char *)v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v55 = a1;
  unint64_t v15 = (unsigned __int16)a1;
  swift_bridgeObjectRetain();
  id v61 = a4;
  uint64_t v16 = (objc_class *)[a5 persistentStoreOfAccountWithAccountID:];
  if (v16)
  {
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16)  = xmmword_10077A530;
    *(void *)(v17 + 32)  = v16;
    v60[0]  = v17;
    specialized Array._endMutation()();
    uint64_t v16 = (objc_class *)v60[0];
  }
  id v18 = (void *)sub_1000CE304(v15, a2, a3, a4);
  uint64_t v19 = a2;
  id v20 = sub_100520A9C(v16, (uint64_t)v18);
  swift_bridgeObjectRelease();

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16)  = xmmword_100776E40;
  *(void *)(v21 + 56)  = &type metadata for String;
  *(void *)(v21 + 32)  = 0x696669746E656469;
  *(void *)(v21 + 40)  = 0xEA00000000007265;
  isa  = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v20 setPropertiesToFetch:isa];

  sub_1000963CC(0, &qword_10090E4F0);
  id v23 = a5;
  unint64_t v24 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v5)
  {
    unint64_t v25 = v24;
    uint64_t v26 = v19;
    uint64_t v27 = (void *)(v24 >> 62);
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v28 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v28 < 2) {
      goto LABEL_11;
    }
    if (qword_100906E78 != -1) {
      goto LABEL_31;
    }
    while (1)
    {
      uint64_t v29 = type metadata accessor for Logger();
      sub_10008E2DC(v29, (uint64_t)qword_100909DD8);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      int v53 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        v60[0]  = v52;
        *(_DWORD *)uint64_t v32 = 136315650;
        v50[1]  = v32 + 4;
        uint64_t v33 = REMManualOrderingListType.description.getter();
        id v55 = v27;
        *(void *)&v59[0]  = sub_1000C51B8(v33, v34, v60);
        os_log_t v51 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v32 + 12)  = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v59[0]  = sub_1000C51B8(v26, a3, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v32 + 22)  = 2080;
        *(void *)&v59[0]  = v28;
        sub_1000D0164();
        uint64_t v35 = BinaryInteger.description.getter();
        *(void *)&v59[0]  = sub_1000C51B8(v35, v36, v60);
        uint64_t v27 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v28 = (uint64_t)v51;
        _os_log_impl((void *)&_mh_execute_header, v51, (os_log_type_t)v53, "fetching manual sort hint object ID returned more than one result {listType: %s listID: %s, count: %s}", (uint8_t *)v32, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_11:
        uint64_t v37 = v25 & 0xFFFFFFFFFFFFFF8;
        if (!v27)
        {
LABEL_12:
          id v23 = *(id *)(v37 + 16);
          if (!v23) {
            goto LABEL_20;
          }
          goto LABEL_13;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v37 = v25 & 0xFFFFFFFFFFFFFF8;
        if (!v27) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRetain();
      id v23 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v23)
      {
LABEL_20:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v23;
      }
LABEL_13:
      if ((v25 & 0xC000000000000001) != 0)
      {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
        swift_bridgeObjectRelease();
        *(void *)&v59[0]  = 0x696669746E656469;
        *((void *)&v59[0] + 1)  = 0xEA00000000007265;
        id v39 = [v38 __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
        swift_unknownObjectRelease();
        if (v39)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v59, 0, sizeof(v59));
        }
        uint64_t v40 = v57;
        id v41 = v58;
        uint64_t v42 = (uint64_t)v56;
        sub_100096408((uint64_t)v59, (uint64_t)v60, &qword_100908190);
        if (v60[3])
        {
          int v43 = swift_dynamicCast();
          (*(void (**)(uint64_t, void, uint64_t, id))(v40 + 56))(v42, v43 ^ 1u, 1, v41);
          if ((*(unsigned int (**)(uint64_t, uint64_t, id))(v40 + 48))(v42, 1, v41) != 1)
          {
            id v44 = v54;
            (*(void (**)(char *, uint64_t, id))(v40 + 32))(v54, v42, v41);
            os_log_t v45 = self;
            uint64_t v46 = v40;
            v47.super.isa  = UUID._bridgeToObjectiveC()().super.isa;
            id v58 = v38;
            Class v48 = v47.super.isa;
            id v23 = [v45 objectIDWithUUID:v47.super.isa];

            swift_bridgeObjectRelease();
            (*(void (**)(char *, id))(v46 + 8))(v44, v41);
            return v23;
          }
        }
        else
        {
          sub_1000966BC((uint64_t)v60, &qword_100908190);
          (*(void (**)(uint64_t, uint64_t, uint64_t, id))(v40 + 56))(v42, 1, 1, v41);
        }
        swift_bridgeObjectRelease();

        sub_1000966BC(v42, (uint64_t *)&unk_100909E50);
        return 0;
      }
      uint64_t v27 = &type metadata for Any;
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v38 = *(id *)(v25 + 32);
        goto LABEL_16;
      }
      __break(1u);
LABEL_31:
      swift_once();
    }
  }

  swift_bridgeObjectRelease();
  return v23;
}

void *sub_1000CF1CC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v4 = sub_100094134(&qword_100909DF0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  NSString v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for REMManualOrdering.ManualOrderingID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100094134(&qword_100909DF8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = a1;
  REMManualOrdering.Predefined.init(smartListType:)();
  uint64_t v16 = type metadata accessor for REMManualOrdering.Predefined();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) == 1)
  {
    sub_1000966BC((uint64_t)v14, &qword_100909DF8);
    return 0;
  }
  else
  {
    REMManualOrdering.Predefined.manualOrderingID.getter();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    uint64_t v19 = (void *)REMManualOrdering.ManualOrderingID.objectID.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    id v20 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
    uint64_t v21 = (char *)objc_allocWithZone(v20);
    uint64_t v22 = v32;
    *(void *)&v21[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID]  = v32;
    *(void *)&v21[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID]  = v19;
    v34.receiver  = v21;
    v34.super_class  = v20;
    id v23 = v22;
    id v24 = v19;
    id v25 = [super init];
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16)  = 0;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for REMCache.ExecutionMode.synchronously<A, B>(_:), v4);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16)  = v26;
    *(void *)(v27 + 24)  = v25;
    swift_retain();
    id v28 = v25;
    dispatch thunk of REMCache.performReadOnly(_:operations:)();

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess();
    id v18 = *(void **)(v26 + 16);
    id v29 = v18;
    swift_release();
  }
  return v18;
}

void *sub_1000CF564(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  uint64_t v14 = a1;
  int v15 = (unsigned __int16)a1;
  uint64_t v80 = sub_100094134(&qword_100909DF0);
  uint64_t v78 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v77 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v81 = a6;
  uint64_t v79 = a7;
  id v82 = v14;
  if (v15 != 1
    || (swift_bridgeObjectRetain(),
        v17._countAndFlagsBits  = a2,
        v17._object  = a3,
        (id v18 = (void *)REMSmartListType.init(stringValue:)(v17)) == 0))
  {
    v83  = v7;
    goto LABEL_9;
  }
  uint64_t v19 = v18;
  id v20 = sub_1000CF1CC(v18, a4, a7);
  if (!v20)
  {
    v83  = v7;

    goto LABEL_9;
  }
  uint64_t v21 = v20;
  id v85 = 0;
  id v22 = [a5 existingObjectWithID:v20 error:&v85];
  if (!v22)
  {
    id v56 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    v83  = 0;
LABEL_29:
    LOWORD(v14)  = (_WORD)v82;
LABEL_9:
    swift_bridgeObjectRetain();
    id v27 = a4;
    id v28 = [a5 persistentStoreOfAccountWithAccountID:v27];
    if (v28)
    {
      sub_100094134((uint64_t *)&unk_10090AF20);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16)  = xmmword_10077A530;
      *(void *)(v29 + 32)  = v28;
      id v85 = (id)v29;
      specialized Array._endMutation()();
      id v28 = v85;
    }
    uint64_t v30 = (void *)sub_1000CE304((unsigned __int16)v14, a2, (uint64_t)a3, a4);
    uint64_t v26 = (void *)type metadata accessor for REMCDManualSortHint();
    id v31 = [objc_allocWithZone((Class)NSFetchRequest) init];
    id v32 = [(id)swift_getObjCClassFromMetadata() entity];
    [v31 setEntity:v32];

    if (v28)
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090FE00);
      v33.super.isa  = Array._bridgeToObjectiveC()().super.isa;
    }
    else
    {
      v33.super.isa  = 0;
    }
    [v31 setAffectedStores:v33.super.isa];

    [v31 setPredicate:v30];
    swift_bridgeObjectRelease();
    sub_100094134((uint64_t *)&unk_10090AF20);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16)  = xmmword_10077A530;
    if (qword_100906E80 != -1) {
      swift_once();
    }
    uint64_t v35 = (void *)qword_100941FB8;
    *(void *)(v34 + 32)  = qword_100941FB8;
    id v85 = (id)v34;
    specialized Array._endMutation()();
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    id v36 = v35;
    isa  = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v31 setSortDescriptors:isa];

    uint64_t v38 = v83;
    unint64_t v39 = NSManagedObjectContext.fetch<A>(_:)();
    if (v38)
    {

      swift_bridgeObjectRelease();
      return v26;
    }
    unint64_t v40 = v39;
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      __int16 v41 = (__int16)v82;
      if (v72)
      {
LABEL_20:
        if ((v40 & 0xC000000000000001) != 0)
        {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          id v42 = *(id *)(v40 + 32);
        }
        uint64_t v26 = v42;
        swift_bridgeObjectRelease();
        if (v41 == 1)
        {
          id v43 = v26;
          id v44 = [v43 remObjectID];
          if (v44)
          {
            os_log_t v45 = v44;
            id v46 = [v43 objectID];
            NSUUID v47 = (objc_class *)type metadata accessor for RDPredefinedObjectKey();
            Class v48 = (char *)objc_allocWithZone(v47);
            *(void *)&v48[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_accountID]  = v27;
            *(void *)&v48[OBJC_IVAR____TtC7remindd21RDPredefinedObjectKey_objectID]  = v45;
            v84.receiver  = v48;
            v84.super_class  = v47;
            id v76 = v27;
            id v75 = v45;
            id v49 = [super init];
            os_log_t v51 = v77;
            uint64_t v50 = v78;
            (*(void (**)(char *, void, uint64_t))(v78 + 104))(v77, enum case for REMCache.ExecutionMode.asynchronously<A, B>(_:), v80);
            uint64_t v52 = swift_allocObject();
            id v82 = v26;
            *(void *)(v52 + 16)  = v46;
            *(void *)(v52 + 24)  = v49;
            id v53 = v46;
            v83  = 0;
            id v54 = v53;
            id v55 = v49;
            dispatch thunk of REMCache.performReadAndWrite(_:operations:)();

            uint64_t v26 = v82;
            swift_release();
            (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v80);

            swift_bridgeObjectRelease();
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease();
        id v43 = v31;
LABEL_32:

        if ((v81 & 1) == 0) {
          return v26;
        }
        goto LABEL_33;
      }
    }
    else
    {
      __int16 v41 = (__int16)v82;
      if (*(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_20;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  id v23 = v22;
  id v24 = v85;

  type metadata accessor for REMCDManualSortHint();
  uint64_t v25 = swift_dynamicCastClass();
  if (!v25)
  {
    v83  = v7;

    goto LABEL_29;
  }
  uint64_t v26 = (void *)v25;
  if ((v81 & 1) == 0) {
    return v26;
  }
LABEL_33:
  id v57 = [self sharedConfiguration];
  id v58 = [v57 manualSortHintLastAccessedUpdatePolicy];

  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v61 = v60;

  v62._countAndFlagsBits  = v59;
  v62._object  = v61;
  unint64_t v63 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1008B1538, v62);
  swift_bridgeObjectRelease();
  if (v63 >= 3) {
    char v64 = 2;
  }
  else {
    char v64 = v63;
  }
  id v65 = [v26 remObjectID];
  if (v65)
  {
    uint64_t v66 = v65;
    id v67 = [v65 description];

    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v70 = v69;
  }
  else
  {
    unint64_t v70 = 0xE300000000000000;
    uint64_t v68 = 7104878;
  }
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16)  = v68;
  *(void *)(v71 + 24)  = v70;
  sub_10026C814(1, v64, (void (*)(void, void))sub_1000CFD70, v71);
  swift_release();
  return v26;
}

uint64_t sub_1000CFD38()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000CFD70(uint64_t a1, char a2)
{
  sub_10026C410(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1000CFD7C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CFDBC()
{
  return REMCacheContext.setObject(_:forKey:)();
}

uint64_t sub_1000CFDE8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000CFE20()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000CFE60(uint64_t a1)
{
  sub_1000CE984(a1, *(void *)(v1 + 16));
}

const char *sub_1000CFE68()
{
  return "lastAccessedSinceReferenceDate";
}

id sub_1000CFE74@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 lastAccessedSinceReferenceDate];
  *a2  = result;
  return result;
}

id sub_1000CFEA8(unsigned int *a1, id *a2)
{
  return [*a2 setLastAccessedSinceReferenceDate:*a1];
}

const char *sub_1000CFEBC()
{
  return "listTypeRawValue";
}

id sub_1000CFEC8@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = [*a1 listTypeRawValue];
  *a2  = (_WORD)result;
  return result;
}

id sub_1000CFEFC(__int16 *a1, id *a2)
{
  return [*a2 setListTypeRawValue:*a1];
}

unint64_t sub_1000CFF10(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  if (result >> 62 == 2)
  {
    return swift_bridgeObjectRetain();
  }
  else if ((result >> 62) <= 1)
  {
    swift_bridgeObjectRetain();
    return (unint64_t)a4;
  }
  return result;
}

const char *sub_1000CFF90()
{
  return "listID";
}

void sub_1000CFF9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000CFFBC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_1000CFFDC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 >> 62 == 2)
  {
    swift_bridgeObjectRelease();
  }
  else if ((a1 >> 62) <= 1)
  {
    swift_bridgeObjectRelease();
  }
}

const char *sub_1000D005C()
{
  return "concatenatedContainerIDsWithLocalContainerIDPrefix";
}

void sub_1000D0068(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000D0088(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000D00A8()
{
  return "concatenatedElementIDsWithLocalElementIDPrefix";
}

void sub_1000D00B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_1000D00D4(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

const char *sub_1000D00F4()
{
  return "account";
}

id sub_1000D0100@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 account];
  *a2  = result;
  return result;
}

id sub_1000D013C(void *a1, id *a2)
{
  return [*a2 setAccount:*a1];
}

const char *sub_1000D0150()
{
  return "identifier";
}

unint64_t sub_1000D0164()
{
  unint64_t result = qword_100909E08;
  if (!qword_100909E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909E08);
  }
  return result;
}

void sub_1000D01B8(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v68 = type metadata accessor for UUID();
  uint64_t v66 = *(char ***)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v10 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v51 - v15;
  Swift::String v17 = (void *)sub_1000CE304(a1, a2, a3, a4);
  type metadata accessor for REMCDManualSortHint();
  id v18 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v19 = [(id)swift_getObjCClassFromMetadata() entity];
  [v18 setEntity:v19];

  [v18 setAffectedStores:0];
  [v18 setPredicate:v17];

  unint64_t v20 = NSManagedObjectContext.fetch<A>(_:)();
  unint64_t v22 = v4;
  if (v4)
  {
  }
  else
  {
    id v23 = v66;
    id v61 = v16;
    Swift::String v62 = v10;
    unint64_t v63 = v13;
    unint64_t v24 = v20;
    if (v20 >> 62) {
      goto LABEL_29;
    }
    uint64_t v25 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    for (i  = (uint64_t)v63; v25; i  = (uint64_t)v63)
    {
      v51[1]  = v22;
      id v52 = v18;
      unint64_t v22 = v24 & 0xC000000000000001;
      id v57 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 6);
      id v58 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 7);
      id v53 = (void (**)(char *, uint64_t))(v23 + 1);
      id v54 = (void (**)(char *, uint64_t, uint64_t))(v23 + 2);
      uint64_t v27 = 4;
      id v23 = &selRef_intersectsSet_;
      *(void *)&long long v21 = 33555202;
      long long v56 = v21;
      id v55 = (char *)&type metadata for Any + 8;
      uint64_t v59 = v25;
      unint64_t v60 = v24;
      unint64_t v67 = v24 & 0xC000000000000001;
      while (1)
      {
        id v28 = v22 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v24 + 8 * v27);
        id v18 = v28;
        uint64_t v29 = v27 - 3;
        if (__OFADD__(v27 - 4, 1)) {
          break;
        }
        if (![v28 v23[153]])
        {
          if (qword_100906E78 != -1) {
            swift_once();
          }
          uint64_t v30 = type metadata accessor for Logger();
          sub_10008E2DC(v30, (uint64_t)qword_100909DD8);
          id v31 = v18;
          id v32 = Logger.logObject.getter();
          int v33 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v32, (os_log_type_t)v33))
          {
            int v65 = v33;
            uint64_t v66 = (char **)v32;
            uint64_t v34 = swift_slowAlloc();
            uint64_t v64 = swift_slowAlloc();
            uint64_t v69 = v64;
            *(_DWORD *)uint64_t v34 = v56;
            *(_WORD *)(v34 + 4)  = (unsigned __int16)[v31 listTypeRawValue];
            *(_WORD *)(v34 + 6)  = 2082;
            id v35 = [v31 listID];
            if (v35)
            {
              id v36 = v35;
              uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v39 = v38;
            }
            else
            {
              unint64_t v39 = 0xE300000000000000;
              uint64_t v37 = 7104878;
            }
            *(void *)(v34 + _Block_object_dispose(&STACK[0x260], 8) = sub_1000C51B8(v37, v39, &v69);

            swift_bridgeObjectRelease();
            *(_WORD *)(v34 + 16)  = 2082;
            id v40 = [v31 identifier];
            if (v40)
            {
              __int16 v41 = v40;
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v42 = 0;
            }
            else
            {
              uint64_t v42 = 1;
            }
            uint64_t v44 = (uint64_t)v61;
            id v43 = v62;
            uint64_t v45 = v68;
            (*v58)(i, v42, 1, v68);
            sub_100096408(i, v44, (uint64_t *)&unk_100909E50);
            if ((*v57)(v44, 1, v45))
            {
              sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
              unint64_t v46 = 0xE300000000000000;
              uint64_t v47 = 7104878;
              i  = (uint64_t)v63;
            }
            else
            {
              (*v54)(v43, v44, v68);
              sub_1000966BC(v44, (uint64_t *)&unk_100909E50);
              Class v48 = v43;
              uint64_t v47 = UUID.uuidString.getter();
              unint64_t v46 = v49;
              i  = (uint64_t)v63;
              (*v53)(v48, v68);
            }
            *(void *)(v34 + 1_Block_object_dispose(&STACK[0x260], 8) = sub_1000C51B8(v47, v46, &v69);

            swift_bridgeObjectRelease();
            os_log_t v50 = (os_log_t)v66;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v66, (os_log_type_t)v65, "DELETE(-soft) manual sort hint (listType: %hd, listID: %{public}s, identifier: %{public}s)", (uint8_t *)v34, 0x1Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v25 = v59;
            unint64_t v24 = v60;
          }
          else
          {
          }
          [v31 markForDeletion];
          [v31 updateChangeCount];
          unint64_t v22 = v67;
          id v23 = &selRef_intersectsSet_;
        }

        ++v27;
        if (v29 == v25)
        {

          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_29:
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000D07F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v35 = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100942078;
  uint64_t v14 = (objc_class *)type metadata accessor for RDDaemonController();
  uint64_t v15 = (char *)objc_allocWithZone(v14);
  uint64_t v16 = &v15[OBJC_IVAR____TtC7remindd18RDDaemonController_xpcDaemon];
  *(void *)uint64_t v16 = a1;
  *((void *)v16 + 1)  = a2;
  Swift::String v17 = &v15[OBJC_IVAR____TtC7remindd18RDDaemonController_clientIdentity];
  *(void *)Swift::String v17 = 0xD000000000000013;
  *((void *)v17 + 1)  = 0x80000001007C8800;
  *(void *)(v17 + 3_Block_object_dispose(&STACK[0x260], 8) = 0;
  *((void *)v17 + 3)  = 0;
  *((void *)v17 + 4)  = 0;
  *((void *)v17 + 2)  = 0;
  *(void *)&v15[OBJC_IVAR____TtC7remindd18RDDaemonController_storeContainerToken]  = 0;
  v38.receiver  = v15;
  v38.super_class  = v14;
  swift_unknownObjectRetain();
  id v18 = [super init];
  id v31 = v18;
  type metadata accessor for RDDataStoreApplicationShortcutListProvider();
  swift_allocObject();
  id v19 = v13;
  swift_retain();
  unint64_t v20 = sub_1002EA234(v19, a3, (uint64_t)v18);

  swift_release();
  type metadata accessor for RDSpringBoardApplicationShortcutUpdater();
  uint64_t v21 = swift_allocObject();
  sub_1000D0FD4();
  *(void *)(v21 + 24)  = static OS_dispatch_queue.main.getter();
  *(void *)(v21 + 16)  = [objc_allocWithZone((Class)SBSApplicationShortcutService) init];
  uint64_t v22 = type metadata accessor for RDApplicationShortcutEngine();
  id v23 = (void *)swift_allocObject();
  id v24 = v19;
  swift_retain();
  swift_retain();
  uint64_t v30 = sub_1000D0D10(v24, (uint64_t)v20, v21, v23);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16)  = v20;
  *(void *)(v25 + 24)  = &off_1008C1048;
  aBlock[4]  = sub_1000D104C;
  aBlock[5]  = v25;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8D88;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  id v36 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v12, v33);
  swift_release();
  uint64_t v27 = v35;
  v35[3]  = v22;
  void v27[4] = &off_1008C6C18;

  swift_release();
  uint64_t result = swift_release();
  *uint64_t v27 = v30;
  return result;
}

id RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id RDApplicationShortcutAssembly.init()()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)swift_getObjectType();
  return [super init];
}

uint64_t type metadata accessor for RDApplicationShortcutAssembly()
{
  return self;
}

void *sub_1000D0D10(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4[2]  = a1;
  a4[3]  = a2;
  a4[4]  = &off_1008C1048;
  a4[5]  = a3;
  uint64_t v17 = a3;
  a4[6]  = &off_1008BAD48;
  *(void *)(a2 + 32)  = &off_1008C6C08;
  swift_unknownObjectWeakAssign();
  aBlock[4]  = sub_1000D113C;
  aBlock[5]  = a4;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8DB0;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v20 = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000D10E0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v18);
  swift_release();
  return a4;
}

unint64_t sub_1000D0FD4()
{
  unint64_t result = qword_10090F370;
  if (!qword_10090F370)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090F370);
  }
  return result;
}

uint64_t sub_1000D1014()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D104C()
{
}

uint64_t sub_1000D1070(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000D1080()
{
  return swift_release();
}

unint64_t sub_1000D1088()
{
  unint64_t result = qword_100908150;
  if (!qword_100908150)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908150);
  }
  return result;
}

unint64_t sub_1000D10E0()
{
  unint64_t result = qword_100908160;
  if (!qword_100908160)
  {
    sub_100096058((uint64_t *)&unk_10090AFD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100908160);
  }
  return result;
}

uint64_t sub_1000D113C()
{
  return sub_100483D48(v0);
}

id sub_1000D114C(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for RDPublicTemplate();
  id v4 = objc_allocWithZone((Class)REMObjectID);
  isa  = UUID._bridgeToObjectiveC()().super.isa;
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v4 initWithUUID:isa entityName:v6];

  id v8 = objc_allocWithZone((Class)REMListStorage);
  id v9 = v7;
  id v10 = a1;
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v12 = [v8 initWithObjectID:v9 accountID:v10 name:v11];

  [v12 setColor:v2[2]];
  if (v2[4]) {
    NSString v13 = String._bridgeToObjectiveC()();
  }
  else {
    NSString v13 = 0;
  }
  [v12 setBadgeEmblem:v13];

  if (v2[6])
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = REMSortingStyle.init(stringValue:)();
    if (v14)
    {
      id v15 = (void *)v14;
      [v12 setSortingStyle:v14];
    }
  }
  [v12 setParentAccountID:v10];
  if (qword_100906E88 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100941FC0;
  [v12 setMinimumSupportedVersion:qword_100941FC0];
  [v12 setEffectiveMinimumSupportedVersion:v16];

  return v12;
}

id sub_1000D1368(void *a1, char *a2, void *a3)
{
  uint64_t v101 = a3;
  uint64_t v4 = v3;
  uint64_t v103 = a2;
  uint64_t v6 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v6 - 8);
  objc_super v99 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_100909EA0);
  __chkstk_darwin(v8 - 8);
  uint64_t v106 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (void *)type metadata accessor for UUID();
  uint64_t v107 = (void (**)(uint64_t, uint64_t, uint64_t, id))*(v10 - 1);
  __chkstk_darwin(v10);
  uint64_t v95 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v100 = (char *)&v94 - v13;
  __chkstk_darwin(v14);
  id v98 = (char *)&v94 - v15;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v94 - v17;
  uint64_t v105 = type metadata accessor for RDSavedReminder();
  uint64_t v19 = *(void *)(v105 - 8);
  *(void *)&double v20 = __chkstk_darwin(v105).n128_u64[0];
  uint64_t v108 = (uint64_t)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112  = a1;
  id v22 = [a1 entityName:v20];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  unint64_t v97 = (unint64_t)"or saved reminders is nil";
  uint64_t v110 = (void *)0xD00000000000001DLL;
  unint64_t v111 = 0x80000001007C8B30;
  uint64_t v26 = type metadata accessor for RDPublicTemplate();
  uint64_t v27 = (void *)(v4 + *(int *)(v26 + 32));
  uint64_t v28 = sub_1000D6954((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  ObjCClassFromMetadata  = v27;
  id v109 = v10;
  uint64_t v96 = v28;
  v29._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  if ((void *)v23 == v110 && v25 == v111)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
LABEL_11:
      [self noSuchObjectErrorWithObjectID:v112];
      return (id)swift_willThrow();
    }
  }
  uint64_t v31 = v4 + *(int *)(v26 + 40);
  uint64_t v32 = *(void *)(v31 + 16);
  id v33 = [v112 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v32 + 16) && (unint64_t v34 = sub_100306EC4((uint64_t)v18), (v35 & 1) != 0))
  {
    uint64_t v36 = *(void *)(v32 + 56) + *(void *)(v19 + 72) * v34;
    uint64_t v37 = (uint64_t)v106;
    sub_1000D57B8(v36, (uint64_t)v106);
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = 1;
    uint64_t v37 = (uint64_t)v106;
  }
  uint64_t v39 = v105;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v37, v38, 1, v105);
  id v40 = v107[1];
  ((void (*)(char *, id))v40)(v18, v109);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v37, 1, v39) == 1)
  {
    sub_1000966BC(v37, (uint64_t *)&unk_100909EA0);
    goto LABEL_11;
  }
  sub_1000D56F8(v37, v108);
  id v42 = objc_allocWithZone((Class)REMObjectID);
  isa  = UUID._bridgeToObjectiveC()().super.isa;
  NSString v44 = String._bridgeToObjectiveC()();
  uint64_t v45 = (char *)[v42 initWithUUID:isa entityName:v44];

  uint64_t v46 = *(void *)(v31 + 56);
  id v47 = v112;
  id v48 = [v112 uuid];
  uint64_t v49 = (uint64_t)v100;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v50 = *(void *)(v46 + 16);
  uint64_t v106 = v45;
  if (v50 && (unint64_t v51 = sub_100306EC4(v49), (v52 & 1) != 0))
  {
    uint64_t v53 = *(void *)(v46 + 56);
    id v54 = v107;
    uint64_t v55 = (uint64_t)v99;
    id v56 = v109;
    ((void (*)(char *, unint64_t, id))v107[2])(v99, v53 + (void)v107[9] * v51, v109);
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v57 = 1;
    id v56 = v109;
    uint64_t v55 = (uint64_t)v99;
    id v54 = v107;
  }
  v54[7](v55, v57, 1, v56);
  ((void (*)(uint64_t, id))v40)(v49, v56);
  int v58 = ((uint64_t (*)(uint64_t, uint64_t, id))v54[6])(v55, 1, v56);
  v94  = v31;
  if (v58 == 1)
  {
    sub_1000966BC(v55, (uint64_t *)&unk_100909E50);
    uint64_t v107 = 0;
  }
  else
  {
    uint64_t v59 = v98;
    ((void (*)(char *, uint64_t, id))v54[4])(v98, v55, v56);
    uint64_t v110 = (void *)0xD00000000000001DLL;
    unint64_t v111 = v97 | 0x8000000000000000;
    v60._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    id v61 = objc_allocWithZone((Class)REMObjectID);
    Class v62 = UUID._bridgeToObjectiveC()().super.isa;
    NSString v63 = String._bridgeToObjectiveC()();
    id v47 = v112;
    swift_bridgeObjectRelease();
    uint64_t v107 = (void (**)(uint64_t, uint64_t, uint64_t, id))[v61 initWithUUID:v62 entityName:v63];

    ((void (*)(char *, id))v40)(v59, v56);
  }
  uint64_t v64 = v103;
  int v65 = (void (**)(uint64_t, uint64_t, uint64_t, id))v106;
  type metadata accessor for REMSavedReminderStorageCDIngestor();
  uint64_t inited = swift_initStackObject();
  unint64_t v67 = v101;
  *(void *)(inited + 16)  = v101;
  uint64_t v68 = qword_100906E88;
  id v69 = v67;
  if (v68 != -1) {
    swift_once();
  }
  unint64_t v70 = v107;
  id v71 = v102;
  id v72 = sub_1004F7BBC(v108, v47, (uint64_t)v65, v64, (uint64_t)v107, qword_100941FC0, qword_100941FC0, 0, 0xF000000000000000);
  if (v71)
  {

    return (id)sub_1000D575C(v108);
  }
  uint64_t v101 = 0;
  v102  = v72;
  uint64_t v73 = *(void *)(v94 + 24);
  if (v73)
  {
    id v74 = [v47 uuid];
    uint64_t v75 = (uint64_t)v95;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v73 + 16))
    {
      unint64_t v76 = sub_100306EC4(v75);
      if (v77)
      {
        uint64_t v78 = *(char **)(*(void *)(v73 + 56) + 8 * v76);
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t, id))v40)(v75, v109);
        uint64_t v79 = *((void *)v78 + 2);
        if (v79)
        {
          unint64_t v100 = (char *)inited;
          uint64_t v110 = _swiftEmptyArrayStorage;
          id v109 = v64;
          v112  = v112;
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v105 = type metadata accessor for RDSavedURLAttachment();
          uint64_t v80 = *(void *)(v105 - 8);
          unint64_t v81 = (*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80);
          objc_super v99 = v78;
          id v82 = &v78[v81];
          type metadata accessor for REMCDSavedAttachment();
          ObjCClassFromMetadata  = (id)swift_getObjCClassFromMetadata();
          uint64_t v103 = *(char **)(v80 + 72);
          do
          {
            id v84 = [ObjCClassFromMetadata newObjectID:v94];
            id v85 = (uint64_t *)&v82[*(int *)(v105 + 20)];
            v87  = *v85;
            unint64_t v86 = v85[1];
            id v88 = v109;
            id v89 = v112;
            sub_100097E24(v87, v86);
            URL._bridgeToObjectiveC()(v90);
            long long v92 = v91;
            if (v86 >> 60 == 15)
            {
              v83.super.isa  = 0;
            }
            else
            {
              v83.super.isa  = Data._bridgeToObjectiveC()().super.isa;
              sub_100097F20(v87, v86);
            }
            [objc_allocWithZone((Class)REMURLAttachment) initWithObjectID:v84 accountID:v88 reminderID:v89 url:v92 metadata:v83.super.isa];

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            id v82 = &v103[(void)v82];
            --v79;
          }
          while (v79);
          swift_bridgeObjectRelease();

          int v65 = (void (**)(uint64_t, uint64_t, uint64_t, id))v106;
          unint64_t v70 = v107;
          uint64_t inited = (uint64_t)v100;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_1000963CC(0, (unint64_t *)&unk_100909EB0);
        Class v93 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v102 setAttachments:v93];
        swift_setDeallocating();

        int v65 = v70;
        goto LABEL_34;
      }
    }
    ((void (*)(uint64_t, id))v40)(v75, v109);
  }
  swift_release();

LABEL_34:
  sub_1000D575C(v108);
  return v102;
}

uint64_t sub_1000D1DCC()
{
  uint64_t v82 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v80 = (char *)&v71 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v2 = type metadata accessor for REMRemindersListDataView.SectionLite();
  v83  = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v76 = (char *)&v71 - v6;
  uint64_t v7 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v7 - 8);
  uint64_t v79 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  objc_super v99 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v97 = (char *)&v71 - v12;
  uint64_t v13 = type metadata accessor for REMRemindersListDataView.ReminderLite();
  v102  = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v100 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v86 = (char *)&v71 - v16;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v71 - v18;
  double v20 = (uint64_t *)(v0 + *(int *)(type metadata accessor for RDPublicTemplate() + 40));
  uint64_t v21 = *v20;
  v104  = v0;
  swift_bridgeObjectRetain();
  id v22 = sub_100224E8C((void (*)(uint64_t))sub_1000D581C, (uint64_t)v103, v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = v20[4];
  if (v23 && v20[5] && (uint64_t v24 = v20[6]) != 0)
  {
    uint64_t v90 = v20[5];
    id v74 = (char *)v2;
    uint64_t v25 = _swiftEmptyArrayStorage;
    unint64_t v106 = sub_1002EDD9C((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v2 = v22[2];
    if (v2)
    {
      uint64_t v72 = v23;
      uint64_t v73 = 0;
      unint64_t v85 = 0;
      uint64_t v101 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
      unint64_t v26 = (*(unsigned __int8 *)(v102 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
      id v71 = v22;
      v94  = v26;
      uint64_t v4 = (char *)v22 + v26;
      uint64_t v96 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56);
      uint64_t v27 = *(void *)(v102 + 72);
      uint64_t v78 = v89 + 16;
      id v98 = (void (**)(uint64_t, uint64_t))(v89 + 8);
      uint64_t v95 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48);
      id v88 = (void (**)(char *, uint64_t, uint64_t))(v89 + 32);
      v102 += 16;
      uint64_t v91 = (void (**)(char *, uint64_t))(v102 - 8);
      long long v92 = (void (**)(unint64_t, char *, uint64_t))(v102 + 16);
      uint64_t v28 = (uint64_t)v79;
      v87  = v24;
      uint64_t v93 = v27;
      uint64_t v75 = v13;
      v101(v19, v4, v13);
      while (1)
      {
        char v30 = (void *)REMRemindersListDataView.ReminderLite.objectID.getter();
        id v31 = [v30 uuid:v71];

        uint64_t v32 = (uint64_t)v99;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        if (*(void *)(v24 + 16))
        {
          unint64_t v33 = sub_100306EC4(v32);
          if (v34)
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v89 + 16))(v28, *(void *)(v24 + 56) + *(void *)(v89 + 72) * v33, v9);
            uint64_t v35 = 0;
          }
          else
          {
            uint64_t v35 = 1;
          }
          uint64_t v32 = (uint64_t)v99;
        }
        else
        {
          uint64_t v35 = 1;
        }
        (*v96)(v28, v35, 1, v9);
        unint64_t v36 = (unint64_t)*v98;
        (*v98)(v32, v9);
        if ((*v95)(v28, 1, v9) == 1) {
          break;
        }
        uint64_t v37 = (uint64_t)v97;
        (*v88)(v97, v28, v9);
        if (!*(void *)(v90 + 16) || (v38 = sub_100306EC4(v37), uint64_t v37 = (uint64_t)v97, (v39 & 1) == 0))
        {
          ((void (*)(uint64_t, uint64_t))v36)(v37, v9);
          uint64_t v24 = v87;
          goto LABEL_24;
        }
        id v40 = (uint64_t *)(*(void *)(v90 + 56) + 16 * v38);
        uint64_t v41 = v13;
        uint64_t v13 = *v40;
        uint64_t v42 = v40[1];
        v101(v86, v19, v41);
        swift_bridgeObjectRetain();
        sub_100096314(v85);
        id v43 = (void *)v106;
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v105 = v43;
        uint64_t v77 = v13;
        uint64_t v84 = v42;
        unint64_t v85 = sub_100307194(v13, v42);
        unint64_t v46 = v43[2];
        BOOL v47 = (v45 & 1) == 0;
        uint64_t v48 = v46 + v47;
        if (__OFADD__(v46, v47))
        {
          __break(1u);
          goto LABEL_52;
        }
        char v49 = v45;
        if (v43[3] >= v48)
        {
          uint64_t v13 = v75;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100318FA4();
            id v43 = v105;
          }
          uint64_t v50 = v84;
        }
        else
        {
          sub_10030F328(v48, isUniquelyReferenced_nonNull_native);
          id v43 = v105;
          uint64_t v50 = v84;
          unint64_t v85 = sub_100307194(v77, v84);
          uint64_t v13 = v75;
          if ((v49 & 1) != (v51 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
        }
        unint64_t v106 = (unint64_t)v43;
        swift_bridgeObjectRelease();
        if ((v49 & 1) == 0)
        {
          unint64_t v54 = v85;
          v43[(v85 >> 6) + 8] |= 1 << v85;
          uint64_t v55 = (void *)(v43[6] + 16 * v54);
          *uint64_t v55 = v77;
          v55[1]  = v50;
          *(void *)(v43[7] + 8 * v54)  = _swiftEmptyArrayStorage;
          uint64_t v56 = v43[2];
          uint64_t v57 = (char *)(v56 + 1);
          BOOL v58 = __OFADD__(v56, 1);
          LODWORD(v77)  = v58;
          swift_bridgeObjectRetain();
          if (v77)
          {
            __break(1u);
            goto LABEL_54;
          }
          v43[2]  = v57;
        }
        swift_bridgeObjectRetain();
        uint64_t v59 = v43[7];
        swift_bridgeObjectRelease();
        uint64_t v60 = 8 * v85;
        unint64_t v61 = *(void *)(v59 + 8 * v85);
        char v62 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v59 + v60)  = v61;
        uint64_t v77 = v59;
        if ((v62 & 1) == 0)
        {
          unint64_t v61 = sub_1003091E4(0, *(void *)(v61 + 16) + 1, 1, v61);
          *(void *)(v59 + 8 * v85)  = v61;
        }
        unint64_t v64 = *(void *)(v61 + 16);
        unint64_t v63 = *(void *)(v61 + 24);
        if (v64 >= v63 >> 1)
        {
          unint64_t v61 = sub_1003091E4(v63 > 1, v64 + 1, 1, v61);
          *(void *)(v77 + 8 * v85)  = v61;
        }
        *(void *)(v61 + 16)  = v64 + 1;
        unint64_t v65 = v61 + v94;
        uint64_t v29 = v93;
        (*v92)(v65 + v64 * v93, v86, v13);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v36)(v97, v9);
        unint64_t v85 = (unint64_t)sub_1000D29BC;
        uint64_t v28 = (uint64_t)v79;
        uint64_t v24 = v87;
LABEL_7:
        (*v91)(v19, v13);
        v4 += v29;
        if (!--v2)
        {
          swift_bridgeObjectRelease();
          uint64_t v23 = v72;
          unint64_t v2 = v85;
          goto LABEL_46;
        }
        v101(v19, v4, v13);
      }
      sub_1000966BC(v28, (uint64_t *)&unk_100909E50);
LABEL_24:
      v101(v100, v19, v13);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = (void *)sub_1003091E4(0, v25[2] + 1, 1, (unint64_t)v25);
      }
      unint64_t v53 = v25[2];
      unint64_t v52 = v25[3];
      if (v53 >= v52 >> 1) {
        uint64_t v25 = (void *)sub_1003091E4(v52 > 1, v53 + 1, 1, (unint64_t)v25);
      }
      v25[2]  = v53 + 1;
      uint64_t v29 = v93;
      (*v92)((unint64_t)v25 + v94 + v53 * v93, v100, v13);
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
LABEL_46:
    uint64_t v66 = v90;
    swift_bridgeObjectRetain();
    uint64_t v13 = (uint64_t)sub_1000D50A8(v23, v66, (uint64_t)&v106);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v82);
    uint64_t v57 = v76;
    REMRemindersListDataView.SectionLite.init(type:reminders:)();
    char v67 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v4 = v74;
    if ((v67 & 1) == 0) {
LABEL_54:
    }
      uint64_t v13 = sub_100309218(0, *(void *)(v13 + 16) + 1, 1, v13);
    unint64_t v69 = *(void *)(v13 + 16);
    unint64_t v68 = *(void *)(v13 + 24);
    if (v69 >= v68 >> 1) {
      uint64_t v13 = sub_100309218(v68 > 1, v69 + 1, 1, v13);
    }
    *(void *)(v13 + 16)  = v69 + 1;
    (*(void (**)(unint64_t, char *, char *))(v83 + 32))(v13+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v69, v57, v4);
    swift_bridgeObjectRelease();
    sub_100096314(v2);
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:), v82);
    REMRemindersListDataView.SectionLite.init(type:reminders:)();
    uint64_t v13 = sub_100309218(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
    unint64_t v36 = *(void *)(v13 + 16);
    unint64_t v46 = *(void *)(v13 + 24);
    id v43 = (void *)(v36 + 1);
    if (v36 >= v46 >> 1) {
LABEL_52:
    }
      uint64_t v13 = sub_100309218(v46 > 1, (int64_t)v43, 1, v13);
    *(void *)(v13 + 16)  = v43;
    (*(void (**)(unint64_t, char *, unint64_t))(v83 + 32))(v13+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v36, v4, v2);
  }
  return v13;
}

void sub_1000D29BC(void *a1@<X8>)
{
  *a1  = &_swiftEmptyArrayStorage;
}

void sub_1000D29CC()
{
  qword_100941FC0  = kREMSupportedVersionFor2022;
}

void sub_1000D29E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void v15[5] = a3;
  void v15[6] = 0xD00000000000001DLL;
  v15[7]  = 0x80000001007C8B30;
  uint64_t v5 = type metadata accessor for RDPublicTemplate();
  type metadata accessor for UUID();
  sub_1000D6954((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  v6._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = objc_allocWithZone((Class)REMObjectID);
  isa  = UUID._bridgeToObjectiveC()().super.isa;
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithUUID:isa entityName:v9];

  uint64_t v11 = *(void *)(a2 + *(int *)(v5 + 40) + 8);
  if (*(void *)(v11 + 16))
  {
    unint64_t v12 = sub_100306EC4(a1);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
      __chkstk_darwin(v12);
      v15[2]  = a2;
      swift_bridgeObjectRetain();
      sub_100224E8C((void (*)(uint64_t))sub_1000D583C, (uint64_t)v15, v14);
      swift_bridgeObjectRelease();
    }
  }
  REMObjectID.codable.getter();
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)();
}

void sub_1000D2BE0()
{
  type metadata accessor for RDPublicTemplate();
  type metadata accessor for UUID();
  sub_1000D6954((unint64_t *)&qword_10090FC50, (void (*)(uint64_t))&type metadata accessor for UUID);
  v0._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  id v1 = objc_allocWithZone((Class)REMObjectID);
  isa  = UUID._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 initWithUUID:isa entityName:v3];

  REMObjectID.codable.getter();
  REMRemindersListDataView.ReminderLite.init(objectID:isCompleted:subtasks:)();
}

double sub_1000D2D38@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v103 = a2;
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909E40);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for URL();
  *(void *)&long long v106 = *(void *)(v105 - 8);
  uint64_t v6 = __chkstk_darwin(v105);
  uint64_t v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)&v90 - v9;
  uint64_t v11 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v11 - 8);
  char v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for Date();
  *(void *)&long long v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v107 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v111 = v18;
  *(void *)&v112  = v19;
  __chkstk_darwin(v18);
  uint64_t v110 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x655463696C627550 && v21 == 0xEE006574616C706DLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v28 = self;
      *(void *)&v113  = 0;
      *((void *)&v113 + 1)  = 0xE000000000000000;
      _StringGuts.grow(_:)(117);
      v29._countAndFlagsBits  = 0xD000000000000058;
      v29._object  = (void *)0x80000001007C8820;
      String.append(_:)(v29);
      v30._countAndFlagsBits  = 0x655463696C627550;
      v30._object  = (void *)0xEE006574616C706DLL;
      String.append(_:)(v30);
      v31._object  = (void *)0x80000001007C8880;
      v31._countAndFlagsBits  = 0xD000000000000018;
      String.append(_:)(v31);
      v32._countAndFlagsBits  = CKRecord.recordType.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      v33._countAndFlagsBits  = 125;
      v33._object  = (void *)0xE100000000000000;
      String.append(_:)(v33);
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v28 invalidParameterErrorWithDescription:v34];

      goto LABEL_11;
    }
  }
  uint64_t v23 = CKRecord.subscript.getter();
  if (!v23 || (v118  = v23, sub_100094134(&qword_100909AB0), (swift_dynamicCast() & 1) == 0))
  {
LABEL_9:
    unint64_t v26 = self;
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 invalidParameterErrorWithDescription:v27];

LABEL_11:
    swift_willThrow();

    return result;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v111;
  uint64_t v24 = v112;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v17, 1, v111) == 1)
  {
    sub_1000966BC((uint64_t)v17, (uint64_t *)&unk_100909E50);
    goto LABEL_9;
  }
  unint64_t v36 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  v102  = v24 + 32;
  uint64_t v101 = v36;
  v36(v110, v17, v25);
  uint64_t v37 = CKRecord.subscript.getter();
  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v13, 1, 1, v109);
    goto LABEL_20;
  }
  *(void *)&v113  = v37;
  uint64_t v38 = v109;
  int v39 = swift_dynamicCast();
  uint64_t v40 = v108;
  uint64_t v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56);
  uint64_t v100 = v108 + 56;
  objc_super v99 = v41;
  v41(v13, v39 ^ 1u, 1, v38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v13, 1, v38) == 1)
  {
LABEL_20:
    sub_1000966BC((uint64_t)v13, (uint64_t *)&unk_100909A40);
    uint64_t v48 = self;
    NSString v49 = String._bridgeToObjectiveC()();
    [v48 invalidParameterErrorWithDescription:v49];

    swift_willThrow();
LABEL_48:
    (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v25);
    return result;
  }
  id v43 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  uint64_t v42 = v40 + 32;
  id v98 = v43;
  v43(v107, v13, v38);
  uint64_t v44 = CKRecord.subscript.getter();
  if (!v44 || (v118  = v44, (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v50 = self;
    NSString v51 = String._bridgeToObjectiveC()();
    [v50 invalidParameterErrorWithDescription:v51];

    swift_willThrow();
LABEL_47:
    (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
    goto LABEL_48;
  }
  uint64_t v95 = v42;
  long long v45 = v113;
  uint64_t v46 = CKRecord.subscript.getter();
  v94  = v45;
  if (v46 && (v118  = v46, (swift_dynamicCast() & 1) != 0))
  {
    BOOL v47 = (void *)sub_1000D3CF4(v113, *((uint64_t *)&v113 + 1), &qword_100909E68, (uint64_t)REMColor_ptr, (uint64_t (*)(uint64_t))sub_1004F7534, (uint64_t *)&unk_100909E70);
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v47 = 0;
  }
  uint64_t v52 = CKRecord.subscript.getter();
  if (v52)
  {
    v118  = v52;
    int v53 = swift_dynamicCast();
    uint64_t v54 = v113;
    if (!v53) {
      uint64_t v54 = 0;
    }
    uint64_t v93 = v54;
    if (v53) {
      uint64_t v55 = *((void *)&v113 + 1);
    }
    else {
      uint64_t v55 = 0;
    }
    uint64_t v97 = v55;
  }
  else
  {
    uint64_t v93 = 0;
    uint64_t v97 = 0;
  }
  uint64_t v56 = CKRecord.subscript.getter();
  if (v56)
  {
    v118  = v56;
    int v57 = swift_dynamicCast();
    uint64_t v58 = v113;
    if (!v57) {
      uint64_t v58 = 0;
    }
    uint64_t v92 = v58;
    if (v57) {
      uint64_t v59 = *((void *)&v113 + 1);
    }
    else {
      uint64_t v59 = 0;
    }
    uint64_t v96 = v59;
  }
  else
  {
    uint64_t v92 = 0;
    uint64_t v96 = 0;
  }
  if (!CKRecord.subscript.getter())
  {
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v69 = self;
    NSString v70 = String._bridgeToObjectiveC()();
    [v69 invalidParameterErrorWithDescription:v70];

    swift_willThrow();
    goto LABEL_47;
  }
  self;
  uint64_t v60 = (void *)swift_dynamicCastObjCClass();
  if (!v60)
  {
    swift_unknownObjectRelease();
    goto LABEL_46;
  }
  uint64_t v90 = *((void *)&v45 + 1);
  id v91 = (id)v45;
  id v61 = [v60 fileURL];
  if (!v61)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v5, 1, 1, v105);
    goto LABEL_50;
  }
  char v62 = v61;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v63 = v106;
  unint64_t v64 = *(void (**)(char *, char *, uint64_t))(v106 + 32);
  uint64_t v65 = v105;
  v64(v5, v8, v105);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v5, 0, 1, v65);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v5, 1, v65) == 1)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000966BC((uint64_t)v5, (uint64_t *)&unk_100909E40);
    id v71 = self;
    NSString v72 = String._bridgeToObjectiveC()();
    [v71 invalidParameterErrorWithDescription:v72];

    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_51;
  }
  v64(v10, v5, v65);
  uint64_t v66 = v104;
  uint64_t v67 = Data.init(contentsOf:options:)();
  if (v66)
  {

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(char *, uint64_t))(v106 + 8))(v10, v65);
LABEL_51:
    (*(void (**)(char *, uint64_t))(v108 + 8))(v107, v109);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v111);
    return result;
  }
  uint64_t v73 = v67;
  unint64_t v74 = v68;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1000D4A54();
  unint64_t v75 = v74;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v76 = v111;
  id v77 = v91;
  swift_unknownObjectRelease();
  sub_100097F34(v73, v75);

  swift_release();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v10, v105);
  v112  = v114;
  long long v108 = v115;
  uint64_t v78 = v76;
  uint64_t v79 = v116;
  uint64_t v80 = v117;
  uint64_t v81 = (int *)type metadata accessor for RDPublicTemplate();
  long long v106 = v113;
  uint64_t v82 = v103;
  v101((char *)v103 + v81[8], v110, v78);
  v83  = (char *)v82 + v81[9];
  uint64_t v84 = v109;
  v98(v83, v107, v109);
  v99(v83, 0, 1, v84);
  uint64_t v85 = v90;
  *uint64_t v82 = v94;
  v82[1]  = v85;
  uint64_t v86 = v93;
  v82[2]  = v77;
  v82[3]  = v86;
  v87  = v92;
  v82[4]  = v97;
  v82[5]  = v87;
  v82[6]  = v96;
  id v88 = (char *)v82 + v81[10];
  long long v89 = v112;
  *(_OWORD *)id v88 = v106;
  *((_OWORD *)v88 + 1)  = v89;
  double result = *(double *)&v108;
  *((_OWORD *)v88 + 2)  = v108;
  *((void *)v88 + 6)  = v79;
  *((void *)v88 + 7)  = v80;
  return result;
}

uint64_t sub_1000D3BEC(uint64_t a1, uint64_t a2)
{
  return sub_1000D3CF4(a1, a2, &qword_100909E68, (uint64_t)REMColor_ptr, (uint64_t (*)(uint64_t))sub_1004F7534, (uint64_t *)&unk_100909E70);
}

uint64_t sub_1000D3C70(uint64_t a1, uint64_t a2)
{
  return sub_1000D3CF4(a1, a2, (unint64_t *)&unk_10090D5F0, (uint64_t)REMContactRepresentation_ptr, (uint64_t (*)(uint64_t))sub_1001C87AC, &qword_100909EC0);
}

uint64_t sub_1000D3CF4(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6)
{
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)sub_1000963CC(0, a3);
  static String.Encoding.utf8.getter();
  uint64_t v14 = String.data(using:allowLossyConversion:)();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v16 >> 60 == 15)
  {
    if (qword_100906FA0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090D770);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v47[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      v46[0]  = v13;
      sub_100094134(a6);
      uint64_t v21 = String.init<A>(describing:)();
      v46[0]  = (id)sub_1000C51B8(v21, v22, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDJSONDecoding can't encode input string as utf8 data {class: %s}", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  uint64_t v23 = self;
  isa  = Data._bridgeToObjectiveC()().super.isa;
  v46[0]  = 0;
  id v25 = [v23 JSONObjectWithData:isa options:0 error:v46];

  id v26 = v46[0];
  if (!v25)
  {
    uint64_t v28 = v26;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906FA0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E2DC(v29, (uint64_t)qword_10090D770);
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      v47[0]  = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      v46[0]  = v13;
      sub_100094134(a6);
      uint64_t v33 = String.init<A>(describing:)();
      v46[0]  = (id)sub_1000C51B8(v33, v34, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12)  = 2080;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      v46[0]  = (id)sub_1000C51B8(v35, v36, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDJSONDecoding can't decode JSON {class: %s, error: %s}", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100097F20(v14, v16);

      swift_errorRelease();
    }
    else
    {
      sub_100097F20(v14, v16);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10009A1B0((uint64_t)v47, (uint64_t)v46);
  sub_100094134((uint64_t *)&unk_100917670);
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (qword_100906FA0 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_10008E2DC(v37, (uint64_t)qword_10090D770);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      v46[0]  = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v45 = (uint64_t)v13;
      sub_100094134(a6);
      uint64_t v41 = String.init<A>(describing:)();
      uint64_t v45 = sub_1000C51B8(v41, v42, (uint64_t *)v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid JSONSerialization.jsonObject return value {class: %s}", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    sub_100097F20(v14, v16);

    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
    return 0;
  }
  uint64_t v27 = a5(v45);
  sub_100097F20(v14, v16);
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v47);
  return v27;
}

Class sub_1000D440C()
{
  id v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000963CC(0, (unint64_t *)&qword_100909E80);
  uint64_t v6 = (int *)type metadata accessor for RDPublicTemplate();
  uint64_t v50 = (char *)v0 + v6[8];
  Class v7 = sub_1000D5500();
  v8._countAndFlagsBits  = 0x655463696C627550;
  v8._object  = (void *)0xEE006574616C706DLL;
  v9.super.isa  = CKRecord.init(recordType:recordID:)(v8, (CKRecordID)v7).super.isa;
  uint64_t v10 = 7;
  uint64_t v11 = &byte_1008B16B0;
  unint64_t v48 = 0x80000001007C88A0;
  unint64_t v49 = 0x80000001007C8940;
  uint64_t v46 = v0;
  isa  = v9.super.isa;
  uint64_t v45 = v4;
  v44[1]  = v5;
  v44[0]  = v6;
  while (2)
  {
    int v14 = *v11++;
    switch(v14)
    {
      case 1:
        if (v1[2] && (uint64_t v17 = sub_10016FAD4(), v18))
        {
          *((void *)&v58 + 1)  = &type metadata for String;
          uint64_t v59 = &protocol witness table for String;
          *(void *)&long long v57 = v17;
          *((void *)&v57 + 1)  = v18;
        }
        else
        {
          uint64_t v59 = 0;
          long long v57 = 0u;
          long long v58 = 0u;
        }
        goto LABEL_3;
      case 2:
        uint64_t v20 = *v1;
        uint64_t v19 = v1[1];
        *((void *)&v58 + 1)  = &type metadata for String;
        uint64_t v59 = &protocol witness table for String;
        *(void *)&long long v57 = v20;
        *((void *)&v57 + 1)  = v19;
        swift_bridgeObjectRetain();
        goto LABEL_3;
      case 3:
        sub_1000CAA4C((uint64_t)v1 + v6[9], (uint64_t)v4);
        uint64_t v21 = type metadata accessor for Date();
        uint64_t v22 = *(void *)(v21 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v4, 1, v21) == 1)
        {
          sub_1000966BC((uint64_t)v4, (uint64_t *)&unk_100909A40);
          long long v57 = 0u;
          long long v58 = 0u;
          uint64_t v59 = 0;
        }
        else
        {
          *((void *)&v58 + 1)  = v21;
          uint64_t v59 = &protocol witness table for Date;
          unint64_t v42 = sub_1000C1FE8((uint64_t *)&v57);
          (*(void (**)(uint64_t *, char *, uint64_t))(v22 + 32))(v42, v4, v21);
        }
        goto LABEL_3;
      case 4:
        uint64_t v12 = UUID.uuidString.getter();
        *((void *)&v58 + 1)  = &type metadata for String;
        uint64_t v59 = &protocol witness table for String;
        *(void *)&long long v57 = v12;
        *((void *)&v57 + 1)  = v13;
        goto LABEL_3;
      case 5:
        NSString v51 = v11;
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        uint64_t v52 = JSONEncoder.init()();
        uint64_t v23 = (uint64_t *)((char *)v1 + v6[10]);
        uint64_t v25 = v23[1];
        uint64_t v26 = v23[2];
        uint64_t v27 = v23[3];
        uint64_t v28 = (void *)v23[4];
        uint64_t v29 = v23[5];
        uint64_t v31 = v23[6];
        uint64_t v30 = v23[7];
        *(void *)&long long v57 = *v23;
        uint64_t v24 = v57;
        *((void *)&v57 + 1)  = v25;
        *(void *)&long long v58 = v26;
        *((void *)&v58 + 1)  = v27;
        uint64_t v59 = v28;
        uint64_t v60 = v29;
        uint64_t v61 = v31;
        uint64_t v62 = v30;
        sub_1000D56A4();
        uint64_t v56 = v24;
        swift_bridgeObjectRetain();
        uint64_t v55 = v25;
        swift_bridgeObjectRetain();
        uint64_t v54 = v26;
        swift_bridgeObjectRetain();
        uint64_t v53 = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v32 = v63;
        uint64_t v33 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        uint64_t v63 = v32;
        if (!v32)
        {
          uint64_t v35 = v33;
          unint64_t v36 = v34;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v37 = self;
          Class v38 = Data._bridgeToObjectiveC()().super.isa;
          id v39 = [v37 assetForData:v38];

          v9.super.isa  = isa;
          CKRecord.subscript.setter();
          sub_100097F34(v35, v36);
          uint64_t v4 = v45;
          id v1 = v46;
          uint64_t v6 = (int *)v44[0];
          uint64_t v11 = v51;
LABEL_4:
          if (!--v10) {
            return v9.super.isa;
          }
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v9.super.isa  = isa;

        swift_release();
        return v9.super.isa;
      case 6:
        uint64_t v40 = v1[6];
        if (v40)
        {
          uint64_t v41 = v1[5];
          *((void *)&v58 + 1)  = &type metadata for String;
          uint64_t v59 = &protocol witness table for String;
          *(void *)&long long v57 = v41;
          *((void *)&v57 + 1)  = v40;
        }
        else
        {
          uint64_t v59 = 0;
          long long v57 = 0u;
          long long v58 = 0u;
        }
        goto LABEL_21;
      default:
        uint64_t v15 = v1[4];
        if (v15)
        {
          uint64_t v16 = v1[3];
          *((void *)&v58 + 1)  = &type metadata for String;
          uint64_t v59 = &protocol witness table for String;
          *(void *)&long long v57 = v16;
          *((void *)&v57 + 1)  = v15;
        }
        else
        {
          uint64_t v59 = 0;
          long long v57 = 0u;
          long long v58 = 0u;
        }
LABEL_21:
        swift_bridgeObjectRetain();
LABEL_3:
        CKRecordKeyValueSetting.subscript.setter();
        goto LABEL_4;
    }
  }
}

double sub_1000D4A18@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000D2D38(a1, a2);
}

uint64_t sub_1000D4A30()
{
  return 0x655463696C627550;
}

unint64_t sub_1000D4A54()
{
  unint64_t result = qword_100909E60;
  if (!qword_100909E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909E60);
  }
  return result;
}

uint64_t type metadata accessor for RDPublicTemplate()
{
  uint64_t result = qword_100909F20;
  if (!qword_100909F20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D4AF4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Class v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100094134((uint64_t *)&unk_10091C320);
  __chkstk_darwin(v63);
  CKRecord v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909A40);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v59 - v17;
  if (*a1 == *a2 && a1[1] == a2[1] || (char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(), v20 = 0, (v19 & 1) != 0))
  {
    unint64_t v64 = v16;
    uint64_t v21 = (void *)a1[2];
    uint64_t v22 = (void *)a2[2];
    if (v21)
    {
      if (!v22) {
        goto LABEL_30;
      }
      uint64_t v62 = v18;
      uint64_t v23 = v13;
      uint64_t v24 = v7;
      uint64_t v25 = v5;
      uint64_t v26 = v9;
      uint64_t v27 = v4;
      sub_1000963CC(0, &qword_100909E68);
      id v28 = v22;
      id v29 = v21;
      char v30 = static NSObject.== infix(_:_:)();

      if ((v30 & 1) == 0) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v62 = v18;
      uint64_t v23 = v13;
      uint64_t v24 = v7;
      uint64_t v25 = v5;
      uint64_t v26 = v9;
      uint64_t v27 = v4;
      if (v22) {
        goto LABEL_30;
      }
    }
    uint64_t v31 = a1[4];
    uint64_t v32 = a2[4];
    if (v31)
    {
      uint64_t v33 = (uint64_t)v64;
      if (!v32) {
        goto LABEL_30;
      }
      uint64_t v34 = v27;
      uint64_t v35 = (uint64_t)v26;
      uint64_t v36 = v25;
      uint64_t v37 = v24;
      uint64_t v38 = (uint64_t)v23;
      uint64_t v39 = (uint64_t)v62;
      if (a1[3] != a2[3] || v31 != v32)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v20 = 0;
        if ((v40 & 1) == 0) {
          return v20 & 1;
        }
      }
    }
    else
    {
      uint64_t v34 = v27;
      uint64_t v35 = (uint64_t)v26;
      uint64_t v36 = v25;
      uint64_t v37 = v24;
      uint64_t v38 = (uint64_t)v23;
      uint64_t v39 = (uint64_t)v62;
      uint64_t v33 = (uint64_t)v64;
      if (v32) {
        goto LABEL_30;
      }
    }
    uint64_t v41 = a1[6];
    uint64_t v42 = a2[6];
    if (v41)
    {
      if (!v42) {
        goto LABEL_30;
      }
      if (a1[5] != a2[5] || v41 != v42)
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        char v20 = 0;
        if ((v43 & 1) == 0) {
          return v20 & 1;
        }
      }
    }
    else if (v42)
    {
      goto LABEL_30;
    }
    uint64_t v44 = type metadata accessor for RDPublicTemplate();
    if (static UUID.== infix(_:_:)())
    {
      sub_1000CAA4C((uint64_t)a1 + *(int *)(v44 + 36), v39);
      uint64_t v60 = v44;
      sub_1000CAA4C((uint64_t)a2 + *(int *)(v44 + 36), v33);
      uint64_t v45 = v35 + *(int *)(v63 + 48);
      sub_1000CAA4C(v39, v35);
      uint64_t v61 = v45;
      sub_1000CAA4C(v33, v45);
      uint64_t v46 = v39;
      BOOL v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      uint64_t v63 = v34;
      if (v47(v35, 1, v34) == 1)
      {
        sub_1000966BC((uint64_t)v64, (uint64_t *)&unk_100909A40);
        sub_1000966BC(v46, (uint64_t *)&unk_100909A40);
        if (v47(v61, 1, v63) == 1)
        {
          sub_1000966BC(v35, (uint64_t *)&unk_100909A40);
LABEL_33:
          uint64_t v53 = (_OWORD *)((char *)a1 + *(int *)(v60 + 40));
          long long v54 = v53[3];
          v65[2]  = v53[2];
          v65[3]  = v54;
          long long v55 = v53[1];
          v65[0]  = *v53;
          v65[1]  = v55;
          uint64_t v56 = (_OWORD *)((char *)a2 + *(int *)(v60 + 40));
          long long v57 = v56[3];
          v66[2]  = v56[2];
          v66[3]  = v57;
          long long v58 = v56[1];
          v66[0]  = *v56;
          v66[1]  = v58;
          char v20 = sub_1004E0730((uint64_t *)v65, (uint64_t *)v66);
          return v20 & 1;
        }
        goto LABEL_29;
      }
      uint64_t v62 = (char *)v46;
      sub_1000CAA4C(v35, v38);
      uint64_t v48 = v61;
      uint64_t v49 = v63;
      if (v47(v61, 1, v63) == 1)
      {
        sub_1000966BC((uint64_t)v64, (uint64_t *)&unk_100909A40);
        sub_1000966BC((uint64_t)v62, (uint64_t *)&unk_100909A40);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v49);
LABEL_29:
        sub_1000966BC(v35, (uint64_t *)&unk_10091C320);
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v37, v48, v49);
      sub_1000D6954((unint64_t *)&qword_100909F80, (void (*)(uint64_t))&type metadata accessor for Date);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v36 + 8);
      v52(v37, v49);
      sub_1000966BC((uint64_t)v64, (uint64_t *)&unk_100909A40);
      sub_1000966BC((uint64_t)v62, (uint64_t *)&unk_100909A40);
      v52((char *)v38, v49);
      sub_1000966BC(v35, (uint64_t *)&unk_100909A40);
      if (v51) {
        goto LABEL_33;
      }
    }
LABEL_30:
    char v20 = 0;
  }
  return v20 & 1;
}

void *sub_1000D50A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a3;
  uint64_t v44 = a2;
  uint64_t v43 = type metadata accessor for REMRemindersListDataView.SectionLite.SectionType();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  Class v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  BOOL v47 = (char *)v38 - v9;
  uint64_t v52 = type metadata accessor for REMRemindersListDataView.SectionLite();
  uint64_t v10 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v38[0]  = v3;
    uint64_t v53 = _swiftEmptyArrayStorage;
    uint64_t v48 = v12;
    sub_1001DE1E4(0, v13, 0);
    uint64_t v15 = v48;
    uint64_t v14 = v53;
    uint64_t v16 = *(void *)(type metadata accessor for UUID() - 8);
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v51 = *(void *)(v16 + 72);
    char v40 = v7 + 24;
    uint64_t v41 = v7;
    unsigned int v39 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectioned(_:);
    uint64_t v49 = (void (**)(void, void, void))(v5 + 104);
    unsigned int v46 = enum case for REMRemindersListDataView.SectionLite.SectionType.sectionless(_:);
    uint64_t v50 = v10 + 32;
    v38[1]  = 0x80000001007C8B30;
    uint64_t v19 = v43;
    uint64_t v18 = v44;
    do
    {
      if (*(void *)(v18 + 16) && (v20 = sub_100306EC4(v17), uint64_t v15 = v48, (v21 & 1) != 0))
      {
        uint64_t v22 = (uint64_t *)(*(void *)(v18 + 56) + 16 * v20);
        uint64_t v23 = *v22;
        uint64_t v24 = v22[1];
        uint64_t v25 = *(void *)(*(void *)v42 + 16);
        swift_bridgeObjectRetain();
        uint64_t v45 = v23;
        if (v25)
        {
          swift_bridgeObjectRetain();
          sub_100307194(v23, v24);
          if (v26) {
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
        }
        id v27 = objc_allocWithZone((Class)type metadata accessor for REMObjectID_Codable());
        isa  = UUID._bridgeToObjectiveC()().super.isa;
        NSString v29 = String._bridgeToObjectiveC()();
        id v30 = [v27 initWithUUID:isa entityName:v29];

        uint64_t v31 = v45;
        if (!v24) {
          uint64_t v31 = 0;
        }
        unint64_t v32 = 0xE000000000000000;
        if (v24) {
          unint64_t v32 = v24;
        }
        uint64_t v33 = v41;
        *uint64_t v41 = v30;
        v33[1]  = v31;
        void v33[2] = v32;
        uint64_t v34 = v40;
        *char v40 = 0;
        v34[1]  = 0;
        uint64_t v19 = v43;
        (*v49)(v33, v39, v43);
        uint64_t v15 = v48;
        REMRemindersListDataView.SectionLite.init(type:reminders:)();
        uint64_t v18 = v44;
      }
      else
      {
        (*v49)(v47, v46, v19);
        REMRemindersListDataView.SectionLite.init(type:reminders:)();
      }
      uint64_t v53 = v14;
      unint64_t v36 = v14[2];
      unint64_t v35 = v14[3];
      if (v36 >= v35 >> 1)
      {
        sub_1001DE1E4(v35 > 1, v36 + 1, 1);
        uint64_t v15 = v48;
        uint64_t v14 = v53;
      }
      v14[2]  = v36 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v36, v15, v52);
      v17 += v51;
      --v13;
    }
    while (v13);
  }
  return v14;
}

Class sub_1000D5500()
{
  v0._countAndFlagsBits  = UUID.uuidString.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  sub_1000963CC(0, (unint64_t *)&unk_100909E90);
  id v1 = (void *)static CKRecordZoneID.default.getter();
  id v2 = [v1 zoneName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v3 = [v1 ownerName];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = objc_allocWithZone((Class)CKRecordZoneID);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v4 initWithZoneName:v5 ownerName:v6 databaseScope:1];

  sub_1000963CC(0, &qword_100914310);
  v8._countAndFlagsBits  = 0x655463696C627550;
  v8._object  = (void *)0xEF2F6574616C706DLL;
  isa  = CKRecordID.init(recordName:zoneID:)(v8, (CKRecordZoneID)v7).super.isa;

  return isa;
}

unint64_t sub_1000D56A4()
{
  unint64_t result = qword_100909E88;
  if (!qword_100909E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100909E88);
  }
  return result;
}

uint64_t sub_1000D56F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedReminder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D575C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RDSavedReminder();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D57B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDSavedReminder();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000D581C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000D29E4(a1, *(void *)(v2 + 16), a2);
}

void sub_1000D583C()
{
}

uint64_t *sub_1000D585C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1  = *a2;
    a1[1]  = v7;
    uint64_t v9 = (void *)a2[2];
    uint64_t v8 = a2[3];
    a1[2]  = (uint64_t)v9;
    a1[3]  = v8;
    uint64_t v10 = a2[5];
    a1[4]  = a2[4];
    a1[5]  = v10;
    uint64_t v11 = a3[8];
    id v30 = (char *)a2 + v11;
    uint64_t v31 = (char *)a1 + v11;
    a1[6]  = a2[6];
    uint64_t v12 = type metadata accessor for UUID();
    int64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    id v14 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v31, v30, v12);
    uint64_t v15 = a3[9];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_100094134((uint64_t *)&unk_100909A40);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = a3[10];
    uint64_t v23 = (uint64_t *)((char *)v4 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1]  = v25;
    uint64_t v26 = v24[3];
    v23[2]  = v24[2];
    v23[3]  = v26;
    uint64_t v27 = v24[5];
    v23[4]  = v24[4];
    void v23[5] = v27;
    uint64_t v28 = v24[7];
    v23[6]  = v24[6];
    v23[7]  = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000D5AC8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 36);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000D5C2C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  uint64_t v8 = (void *)a2[2];
  uint64_t v7 = a2[3];
  a1[2]  = v8;
  a1[3]  = v7;
  uint64_t v9 = a2[5];
  a1[4]  = a2[4];
  a1[5]  = v9;
  uint64_t v10 = a3[8];
  uint64_t v28 = (char *)a2 + v10;
  NSString v29 = (char *)a1 + v10;
  a1[6]  = a2[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  id v13 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v29, v28, v11);
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = a3[10];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1]  = v23;
  uint64_t v24 = v22[3];
  v21[2]  = v22[2];
  v21[3]  = v24;
  uint64_t v25 = v22[5];
  void v21[4] = v22[4];
  v21[5]  = v25;
  uint64_t v26 = v22[7];
  v21[6]  = v22[6];
  v21[7]  = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000D5E48(void *a1, void *a2, int *a3)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)a1[2];
  uint64_t v7 = (void *)a2[2];
  a1[2]  = v7;
  id v8 = v7;

  a1[3]  = a2[3];
  a1[4]  = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[8];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v22);
  uint64_t v24 = (void *)((char *)a2 + v22);
  *(void *)((char *)a1 + v22)  = *(void *)((char *)a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[1]  = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[2]  = v24[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[3]  = v24[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[4]  = v24[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v23[5] = v24[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[6]  = v24[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[7]  = v24[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D6150(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24)  = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40)  = *(_OWORD *)(a2 + 40);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[10];
  uint64_t v17 = (_OWORD *)(a1 + v16);
  uint64_t v18 = (_OWORD *)(a2 + v16);
  long long v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1]  = v19;
  long long v20 = v18[3];
  v17[2]  = v18[2];
  v17[3]  = v20;
  return a1;
}

void *sub_1000D62F0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1  = *a2;
  a1[1]  = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)a1[2];
  a1[2]  = a2[2];

  uint64_t v8 = a2[4];
  a1[3]  = a2[3];
  a1[4]  = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[6];
  a1[5]  = a2[5];
  a1[6]  = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  long long v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = sub_100094134((uint64_t *)&unk_100909A40);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  *(void *)((char *)a1 + v23)  = *v25;
  swift_bridgeObjectRelease();
  v24[1]  = v25[1];
  swift_bridgeObjectRelease();
  v24[2]  = v25[2];
  swift_bridgeObjectRelease();
  v24[3]  = v25[3];
  swift_bridgeObjectRelease();
  v24[4]  = v25[4];
  swift_bridgeObjectRelease();
  void v24[5] = v25[5];
  swift_bridgeObjectRelease();
  v24[6]  = v25[6];
  swift_bridgeObjectRelease();
  v24[7]  = v25[7];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000D6584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6598);
}

uint64_t sub_1000D6598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4)  = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1000D66C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D66DC);
}

uint64_t sub_1000D66DC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100094134((uint64_t *)&unk_100909A40);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000D680C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1000D68FC();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1000D68FC()
{
  if (!qword_100909F30)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100909F30);
    }
  }
}

uint64_t sub_1000D6954(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000D699C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_100909F90);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_100909F90);
  if (qword_100907830 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009424D8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

Swift::Void __swiftcall RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.migrateStoreIfNeeded(_:metadata:)(NSPersistentStore _, NSMutableDictionary metadata)
{
  if (qword_100906E90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100909F90);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas: migrating if needed", v7, 2u);
    swift_slowDealloc();
  }

  *(void *)&v12[0]  = 0xD000000000000035;
  *((void *)&v12[0] + 1)  = 0x800000010077AB00;
  id v8 = [(objc_class *)metadata.super.super.isa __swift_objectForKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];
  swift_unknownObjectRelease();
  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_1000D6CBC((uint64_t)v12, (uint64_t)v13);
  if (!v13[3])
  {
    sub_1000966BC((uint64_t)v13, &qword_100908190);
LABEL_13:
    sub_1000D6DA0(_.super.isa);
    isa  = Int._bridgeToObjectiveC()().super.super.isa;
    v13[0]  = 0xD000000000000035;
    v13[1]  = 0x800000010077AB00;
    [(objc_class *)metadata.super.super.isa __swift_setObject:isa forKeyedSubscript:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return;
  }
  sub_1000963CC(0, (unint64_t *)&qword_100909FB0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  id v9 = [v11 integerValue];

  if ((uint64_t)v9 <= 0) {
    goto LABEL_13;
  }
}

uint64_t sub_1000D6CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100908190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000D6DA0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  if (qword_100906E90 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E2DC(v5, (uint64_t)qword_100909F90);
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    aBlock[0]  = ObjectType;
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v10 = String.init<A>(describing:)();
    aBlock[0]  = sub_1000C51B8(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12)  = 2082;
    id v12 = sub_1002ECF34();
    aBlock[0]  = sub_1000C51B8((uint64_t)v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: BEGIN {store: %{public}s}", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v14 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  id v15 = [v6 persistentStoreCoordinator];
  [v14 setPersistentStoreCoordinator:v15];

  [v14 setTransactionAuthor:RDStoreControllerRemoveObsoleteDueDateDeltasMigrationAuthor];
  [v14 setUndoManager:0];
  [v14 setRetainsRegisteredObjects:1];
  if (sub_1000D8980())
  {
    uint64_t v16 = (void *)swift_allocObject();
    v16[2]  = v14;
    v16[3]  = v2;
    void v16[4] = ObjectType;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16)  = sub_1000D8D18;
    *(void *)(v17 + 24)  = v16;
    aBlock[4]  = sub_10008F6F4;
    aBlock[5]  = v17;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = sub_1003B3260;
    void aBlock[3] = &unk_1008B8E50;
    uint64_t v18 = _Block_copy(aBlock);
    id v19 = v14;
    id v20 = v2;
    swift_retain();
    swift_release();
    [v19 performBlockAndWait:v18];

    _Block_release(v18);
    isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
    }
    else
    {
      sub_1000D719C(v6, ObjectType);
      swift_release();
    }
  }
  else
  {

    sub_1000D719C(v6, ObjectType);
  }
}

void sub_1000D719C(void *a1, uint64_t a2)
{
  if (qword_100906E90 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E2DC(v4, (uint64_t)qword_100909F90);
  id v12 = a1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = a2;
    *(_DWORD *)uint64_t v7 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v14 = sub_1000C51B8(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12)  = 2082;
    id v10 = sub_1002ECF34();
    uint64_t v14 = sub_1000C51B8((uint64_t)v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: END {store: %{public}s}", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1000D73BC(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v95 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  isa  = v4[-1].isa;
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v93 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v93 - v12;
  id v14 = sub_1000D8D4C();
  type metadata accessor for REMCDDueDateDeltaAlert();
  uint64_t v15 = NSManagedObjectContext.fetch<A>(_:)();
  uint64_t v101 = v13;
  v102  = v8;
  unint64_t v103 = v15;

  unint64_t v23 = v103;
  if (!(v103 >> 62))
  {
    uint64_t v24 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24) {
      goto LABEL_6;
    }
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  unint64_t v23 = v103;
  if (!v24) {
    goto LABEL_55;
  }
LABEL_6:
  v104  = v4;
  v94  = 0;
  uint64_t v25 = 0;
  unint64_t v99 = v23 & 0xC000000000000001;
  uint64_t v96 = (uint64_t)isa + 16;
  Class v97 = isa;
  uint64_t v26 = (void (**)(uint64_t, NSObject *))((char *)isa + 8);
  uint64_t v27 = _swiftEmptyDictionarySingleton;
  uint64_t v28 = 4;
  id v100 = a1;
  uint64_t v98 = v24;
  while (1)
  {
    id v33 = v99 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v23 + 8 * v28);
    uint64_t v34 = v33;
    uint64_t v35 = v28 - 3;
    if (__OFADD__(v28 - 4, 1)) {
      break;
    }
    id v36 = [v33 reminderIdentifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v37 = [v34 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100096314((uint64_t)v25);
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    long long v106 = v27;
    unint64_t v40 = sub_100306EC4((uint64_t)v11);
    Class v41 = v27[2].isa;
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = (uint64_t)v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_52;
    }
    char v44 = v39;
    if ((uint64_t)v27[3].isa >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100319418();
        uint64_t v27 = v106;
      }
    }
    else
    {
      sub_10031032C(v43, isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v106;
      unint64_t v45 = sub_100306EC4((uint64_t)v11);
      if ((v44 & 1) != (v46 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      unint64_t v40 = v45;
    }
    id v47 = v100;
    swift_bridgeObjectRelease();
    if (v44)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      v27[(v40 >> 6) + 8].isa  = (Class)((uint64_t)v27[(v40 >> 6) + 8].isa | (1 << v40));
      unint64_t v48 = (unint64_t)v27[6].isa + *((void *)v97 + 9) * v40;
      uint64_t v49 = (void (*)(unint64_t, char *, NSObject *))*((void *)v97 + 2);
      swift_bridgeObjectRetain();
      v49(v48, v11, v104);
      *((void *)v27[7].isa + v40)  = &_swiftEmptySetSingleton;
      Class v50 = v27[2].isa;
      BOOL v51 = __OFADD__(v50, 1);
      uint64_t v52 = (Class)((char *)v50 + 1);
      if (v51) {
        goto LABEL_53;
      }
      v27[2].isa  = v52;
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = (uint64_t)v101;
    sub_10031DEC0((uint64_t)v101, v102);
    id v30 = *v26;
    uint64_t v31 = v29;
    unint64_t v32 = v104;
    (*v26)(v31, v104);
    v30((uint64_t)v11, v32);
    [v47 deleteObject:v34];

    ++v28;
    uint64_t v25 = sub_1000D82A8;
    unint64_t v23 = v103;
    if (v35 == v98)
    {
      swift_bridgeObjectRelease();
      long long v54 = v95;
      if (qword_1009071C8 != -1) {
        swift_once();
      }
      uint64_t v55 = v94;
      if (!*(void *)(qword_1009420D0 + 16)
        || (sub_1001806F8(0xD000000000000016, 0x80000001007C6970), (v56 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        if (qword_100906E90 != -1) {
          swift_once();
        }
        uint64_t v67 = type metadata accessor for Logger();
        sub_10008E2DC(v67, (uint64_t)qword_100909F90);
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v68))
        {
          unint64_t v69 = (uint8_t *)swift_slowAlloc();
          uint64_t v105 = swift_slowAlloc();
          long long v106 = v54;
          *(_DWORD *)unint64_t v69 = 136315138;
          swift_getMetatypeMetadata();
          uint64_t v70 = String.init<A>(describing:)();
          long long v106 = sub_1000C51B8(v70, v71, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v68, "%s: Error getting dueDateDeltaCDValueKey", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
LABEL_49:

        return;
      }
      swift_bridgeObjectRetain();
      id v57 = sub_1000D8EA8((uint64_t)v27);
      swift_bridgeObjectRelease();
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      uint64_t v58 = NSManagedObjectContext.fetch<A>(_:)();
      if (v55)
      {
        swift_bridgeObjectRelease();

        if (qword_100906E90 != -1) {
          swift_once();
        }
        uint64_t v59 = type metadata accessor for Logger();
        sub_10008E2DC(v59, (uint64_t)qword_100909F90);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v60 = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = (void *)swift_slowAlloc();
          uint64_t v105 = swift_slowAlloc();
          long long v106 = v54;
          *(_DWORD *)uint64_t v62 = 136315394;
          swift_getMetatypeMetadata();
          uint64_t v64 = String.init<A>(describing:)();
          long long v106 = sub_1000C51B8(v64, v65, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v62 + 12)  = 2112;
          swift_errorRetain();
          uint64_t v66 = _swift_stdlib_bridgeErrorToNSError();
          long long v106 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v63 = v66;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s: Error fetching REMCDReminders: %@", (uint8_t *)v62, 0x16u);
          sub_100094134((uint64_t *)&unk_10090A040);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return;
        }
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        goto LABEL_49;
      }
      unint64_t v72 = v58;

      if (v72 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v73) {
          goto LABEL_59;
        }
LABEL_40:
        if (v73 >= 1)
        {
          for (i  = 0; i != v73; ++i)
          {
            if ((v72 & 0xC000000000000001) != 0) {
              id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v75 = *(id *)(v72 + 8 * i + 32);
            }
            uint64_t v76 = v75;
            [v75 setDueDateDeltaAlertsData:0];
            [v76 updateChangeCount];
            id v77 = [v76 resolutionTokenMap];
            if (v77)
            {
              uint64_t v78 = v77;
              NSString v79 = String._bridgeToObjectiveC()();
              [v78 updateForKey:v79];

              [v76 setResolutionTokenMap:v78];
            }
          }
          goto LABEL_59;
        }
        __break(1u);
      }
      else
      {
        uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v73) {
          goto LABEL_40;
        }
LABEL_59:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v80 = v100;
        if (([v100 hasChanges] & 1) == 0) {
          return;
        }
        long long v106 = 0;
        unsigned int v81 = [v80 save:&v106];
        uint64_t v82 = v106;
        if (v81)
        {
          v83  = v82;
          return;
        }
        v104  = v106;
        uint64_t v84 = v106;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_100906E90 == -1)
        {
LABEL_65:
          uint64_t v85 = type metadata accessor for Logger();
          sub_10008E2DC(v85, (uint64_t)qword_100909F90);
          swift_errorRetain();
          swift_errorRetain();
          uint64_t v86 = Logger.logObject.getter();
          v87  = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v86, v87))
          {
            uint64_t v88 = swift_slowAlloc();
            long long v89 = (void *)swift_slowAlloc();
            long long v106 = swift_slowAlloc();
            *(_DWORD *)uint64_t v88 = 136315394;
            uint64_t v90 = sub_1000D82B8();
            uint64_t v105 = sub_1000C51B8(v90, v91, (uint64_t *)&v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v88 + 12)  = 2112;
            swift_errorRetain();
            uint64_t v92 = _swift_stdlib_bridgeErrorToNSError();
            uint64_t v105 = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *long long v89 = v92;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "%s: Error saving: %@", (uint8_t *)v88, 0x16u);
            sub_100094134((uint64_t *)&unk_10090A040);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
          }
          else
          {
            swift_errorRelease();
            swift_errorRelease();
            swift_errorRelease();
          }
          return;
        }
      }
      swift_once();
      goto LABEL_65;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  swift_once();
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E2DC(v16, (uint64_t)qword_100909F90);
  swift_errorRetain();
  swift_errorRetain();
  v104  = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v104, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    id v19 = (void *)swift_slowAlloc();
    uint64_t v105 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    long long v106 = v95;
    swift_getMetatypeMetadata();
    uint64_t v20 = String.init<A>(describing:)();
    long long v106 = sub_1000C51B8(v20, v21, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12)  = 2112;
    swift_errorRetain();
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
    long long v106 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v19 = v22;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v104, v17, "%s: Error fetching REMCDDueDateDeltaAlerts: %@", (uint8_t *)v18, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v53 = v104;
  }
}

void sub_1000D82A8(void *a1@<X8>)
{
  *a1  = &_swiftEmptySetSingleton;
}

uint64_t sub_1000D82B8()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1000D82E8(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v43 = (char *)&v37 - v6;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(a1 + 16);
  unint64_t v48 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v11 = *(void *)(a1 + 64);
  char v44 = v10;
  uint64_t v45 = a1 + 64;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & v11;
  int64_t v46 = (unint64_t)(63 - v13) >> 6;
  uint64_t v47 = a1;
  if (v10)
  {
    uint64_t v41 = v8 + 16;
    BOOL v42 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    char v39 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v40 = v8 + 48;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    int64_t v16 = 0;
    while (1)
    {
      if (v14)
      {
        unint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v18 = v17 | (v16 << 6);
      }
      else
      {
        int64_t v19 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        if (v19 >= v46) {
          goto LABEL_54;
        }
        unint64_t v20 = *(void *)(v45 + 8 * v19);
        ++v16;
        if (!v20)
        {
          int64_t v16 = v19 + 1;
          if (v19 + 1 >= v46) {
            goto LABEL_54;
          }
          unint64_t v20 = *(void *)(v45 + 8 * v16);
          if (!v20)
          {
            int64_t v16 = v19 + 2;
            if (v19 + 2 >= v46) {
              goto LABEL_54;
            }
            unint64_t v20 = *(void *)(v45 + 8 * v16);
            if (!v20)
            {
              int64_t v16 = v19 + 3;
              if (v19 + 3 >= v46) {
                goto LABEL_54;
              }
              unint64_t v20 = *(void *)(v45 + 8 * v16);
              if (!v20)
              {
                int64_t v21 = v19 + 4;
                if (v21 >= v46) {
                  goto LABEL_54;
                }
                unint64_t v20 = *(void *)(v45 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v16 = v21 + 1;
                    if (__OFADD__(v21, 1)) {
                      break;
                    }
                    if (v16 >= v46) {
                      goto LABEL_54;
                    }
                    unint64_t v20 = *(void *)(v45 + 8 * v16);
                    ++v21;
                    if (v20) {
                      goto LABEL_22;
                    }
                  }
LABEL_52:
                  __break(1u);
                  goto LABEL_53;
                }
                int64_t v16 = v21;
              }
            }
          }
        }
LABEL_22:
        unint64_t v14 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v5, *(void *)(a1 + 48) + *(void *)(v8 + 72) * v18, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7);
      if (result == 1) {
        goto LABEL_55;
      }
      uint64_t v15 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v15 + 1);
      sub_1000963CC(0, (unint64_t *)&qword_10090B040);
      ObjCClassFromMetadata  = (void *)swift_getObjCClassFromMetadata();
      isa  = UUID._bridgeToObjectiveC()().super.isa;
      id v25 = [ObjCClassFromMetadata objectIDWithUUID:isa];

      (*v39)(v5, v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      a1  = v47;
      if (v15 == v44) {
        goto LABEL_27;
      }
    }
  }
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
LABEL_27:
  char v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  uint64_t v41 = v8 + 48;
  BOOL v42 = (uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v5 = (char *)(v8 + 8);
  if (!v14) {
    goto LABEL_29;
  }
LABEL_28:
  unint64_t v26 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  unint64_t v27 = v26 | (v16 << 6);
  uint64_t v28 = v47;
  uint64_t v29 = (uint64_t)v43;
  while (1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v29, *(void *)(v28 + 48) + *(void *)(v8 + 72) * v27, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v29, 1, v7) == 1) {
      goto LABEL_49;
    }
    id v33 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v38, v29, v7);
    sub_1000963CC(0, (unint64_t *)&qword_10090B040);
    uint64_t v34 = (void *)swift_getObjCClassFromMetadata();
    Class v35 = UUID._bridgeToObjectiveC()().super.isa;
    id v36 = [v34 objectIDWithUUID:v35];

    (*(void (**)(char *, uint64_t))v5)(v33, v7);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (v14) {
      goto LABEL_28;
    }
LABEL_29:
    int64_t v30 = v16 + 1;
    uint64_t v28 = v47;
    uint64_t v29 = (uint64_t)v43;
    if (__OFADD__(v16, 1)) {
      goto LABEL_51;
    }
    if (v30 >= v46)
    {
LABEL_48:
      (*v44)(v43, 1, 1, v7);
LABEL_49:
      swift_release();
      sub_1000966BC(v29, (uint64_t *)&unk_100909E50);
      return (uint64_t)v48;
    }
    unint64_t v31 = *(void *)(v45 + 8 * v30);
    ++v16;
    if (!v31)
    {
      int64_t v16 = v30 + 1;
      if (v30 + 1 >= v46) {
        goto LABEL_48;
      }
      unint64_t v31 = *(void *)(v45 + 8 * v16);
      if (!v31)
      {
        int64_t v16 = v30 + 2;
        if (v30 + 2 >= v46) {
          goto LABEL_48;
        }
        unint64_t v31 = *(void *)(v45 + 8 * v16);
        if (!v31)
        {
          int64_t v16 = v30 + 3;
          if (v30 + 3 >= v46) {
            goto LABEL_48;
          }
          unint64_t v31 = *(void *)(v45 + 8 * v16);
          if (!v31) {
            break;
          }
        }
      }
    }
LABEL_44:
    unint64_t v14 = (v31 - 1) & v31;
    unint64_t v27 = __clz(__rbit64(v31)) + (v16 << 6);
  }
  int64_t v32 = v30 + 4;
  if (v32 >= v46) {
    goto LABEL_48;
  }
  unint64_t v31 = *(void *)(v45 + 8 * v32);
  if (v31)
  {
    int64_t v16 = v32;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v16 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v16 >= v46) {
      goto LABEL_48;
    }
    unint64_t v31 = *(void *)(v45 + 8 * v16);
    ++v32;
    if (v31) {
      goto LABEL_44;
    }
  }
LABEL_53:
  __break(1u);
LABEL_54:
  uint64_t result = (*v42)(v5, 1, 1, v7);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_1000D8980()
{
  swift_getObjectType();
  NSManagedObjectContext.rem_performAndWait<A>(_:)();
  return v1;
}

id RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.init()()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas();
  return [super init];
}

id RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas.__deallocating_deinit()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas();
  return [super dealloc];
}

uint64_t type metadata accessor for RDStoreControllerMigrator_RemoveObsoleteDueDateDeltas()
{
  return self;
}

void sub_1000D8CBC(BOOL *a1@<X8>)
{
  sub_1004433A0(*(void **)(v1 + 16), a1);
}

uint64_t sub_1000D8CD8()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000D8D18()
{
  sub_1000D73BC(*(void **)(v0 + 16), *(void *)(v0 + 24), *(NSObject **)(v0 + 32));
}

uint64_t sub_1000D8D24()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D8D34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000D8D44()
{
  return swift_release();
}

id sub_1000D8D4C()
{
  uint64_t v0 = (void *)sub_1002F52FC(_swiftEmptyArrayStorage);
  type metadata accessor for REMCDDueDateDeltaAlert();
  id v1 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v2 = [(id)swift_getObjCClassFromMetadata() entity];
  [v1 setEntity:v2];

  [v1 setAffectedStores:0];
  [v1 setPredicate:v0];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16)  = xmmword_100776E40;
  *(void *)(v3 + 56)  = &type metadata for String;
  *(void *)(v3 + 32)  = 0xD000000000000012;
  *(void *)(v3 + 40)  = 0x80000001007C6B00;
  isa  = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v1 setPropertiesToFetch:isa];

  [v1 setFetchBatchSize:50];
  return v1;
}

id sub_1000D8EA8(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa(0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)uint64_t v4 = sub_1000D82E8(a1);
  v4[8]  = 1;
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (void *)sub_10038F1F0();
  sub_1000C6DAC((uint64_t)v4);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  sub_100094134((uint64_t *)&unk_10090A050);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16)  = xmmword_100776E30;
  *(void *)(v8 + 32)  = 0x696669746E656469;
  *(void *)(v8 + 40)  = 0xEA00000000007265;
  *(void *)(v8 + 56)  = &type metadata for String;
  *(void *)(v8 + 64)  = 0xD000000000000016;
  *(void *)(v8 + 72)  = 0x80000001007C6970;
  *(void *)(v8 + 8_Block_object_dispose(&STACK[0x260], 8) = &type metadata for String;
  strcpy((char *)(v8 + 96), "ckCloudState");
  *(unsigned char *)(v8 + 109)  = 0;
  *(_WORD *)(v8 + 110)  = -5120;
  *(void *)(v8 + 120)  = &type metadata for String;
  strcpy((char *)(v8 + 128), "ckIdentifier");
  *(unsigned char *)(v8 + 141)  = 0;
  *(_WORD *)(v8 + 142)  = -5120;
  *(void *)(v8 + 152)  = &type metadata for String;
  strcpy((char *)(v8 + 160), "ckDirtyFlags");
  *(unsigned char *)(v8 + 173)  = 0;
  *(_WORD *)(v8 + 174)  = -5120;
  *(void *)(v8 + 216)  = &type metadata for String;
  *(void *)(v8 + 184)  = &type metadata for String;
  *(void *)(v8 + 192)  = 0xD00000000000001ELL;
  *(void *)(v8 + 200)  = 0x80000001007C8BC0;
  isa  = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v6 setPropertiesToFetch:isa];

  [v6 setFetchBatchSize:50];
  return v6;
}

uint64_t sub_1000D9144()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090A060);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090A060);
  if (qword_1009077D8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423D0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000D93E4()
{
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16)  = xmmword_100776E80;
  uint64_t v3 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription);
  unint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription
                 + 8);
  *(void *)(v1 + 56)  = &type metadata for String;
  unint64_t v4 = sub_1000C5B38();
  uint64_t v5 = 7104878;
  if (v2) {
    uint64_t v5 = v3;
  }
  unint64_t v6 = 0xE300000000000000;
  if (v2) {
    unint64_t v6 = v2;
  }
  *(void *)(v1 + 32)  = v5;
  *(void *)(v1 + 40)  = v6;
  uint64_t v7 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID);
  uint64_t v8 = *(void *)(v0
                 + OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID
                 + 8);
  *(void *)(v1 + 96)  = &type metadata for String;
  *(void *)(v1 + 104)  = v4;
  *(void *)(v1 + 64)  = v4;
  *(void *)(v1 + 72)  = v7;
  *(void *)(v1 + 80)  = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return String.init(format:_:)();
}

uint64_t type metadata accessor for ChangeTrackingAccountProvider()
{
  return self;
}

id sub_1000D96A8()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget();
  return [super dealloc];
}

void sub_1000D96DC()
{
  sub_1000D9734();
}

void sub_1000D9734()
{
  id v0 = [self sharedBabysitter];
  if (v0)
  {
    uint64_t v1 = v0;
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 giveAccountWithIDAnotherChance:v2];

    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E2DC(v3, (uint64_t)qword_10090A060);
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 136446210;
      uint64_t v14 = v7;
      sub_100094134((uint64_t *)&unk_10090A4C0);
      uint64_t v8 = Optional.descriptionOrNil.getter();
      sub_1000C51B8(v8, v9, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "RDAssignmentNotificationEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  sub_1000DC074();
  swift_bridgeObjectRelease();
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090A060);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDAssignmentNotificationEngine: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).", v13, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000D9A10()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = v1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
  swift_beginAccess();
  sub_1000E5250(v9, (uint64_t)v4);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000E52B8((uint64_t)v4);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_release();

    sub_1000E52B8(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v1;
  }
  sub_1000E5318((uint64_t)v4, (uint64_t)v8);
  uint64_t v10 = *(void *)(v1 + 96);
  uint64_t v11 = *(os_unfair_lock_s **)(v10 + 40);
  os_unfair_lock_lock(v11);
  __chkstk_darwin(v12);
  *(void *)&v15[-16]  = v8;
  swift_beginAccess();
  uint64_t result = sub_1001EC244((uint64_t (*)(unint64_t))sub_1000E537C);
  uint64_t v14 = *(void *)(*(void *)(v10 + 48) + 16);
  if (v14 >= result)
  {
    sub_1001ECEB0(result, v14);
    swift_endAccess();
    os_unfair_lock_unlock(v11);
    sub_100094178((uint64_t)v8);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D9C90()
{
  sub_1000D9A10();

  return swift_deallocClassInstance();
}

uint64_t sub_1000D9CE8()
{
  return type metadata accessor for RDAssignmentNotificationEngine();
}

uint64_t type metadata accessor for RDAssignmentNotificationEngine()
{
  uint64_t result = qword_10090A160;
  if (!qword_10090A160) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000D9D3C()
{
  sub_1000DF350();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000D9E1C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 72);
  void *v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started) & 1) == 0)
  {
    sub_1000DA00C(v0);
    return;
  }
  if (qword_100906E98 != -1) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090A060);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAssignmentNotificationEngine.start() must be called exactly once", v10, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000DA00C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v62 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59);
  id v6 = (void *)((char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for DispatchTime();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  uint64_t v67 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  id v57 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v65 = (char *)v53 - v11;
  uint64_t v12 = sub_100094134((uint64_t *)&unk_10090A4B0);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)v53 - v16;
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v56 = sub_10008E2DC(v18, (uint64_t)qword_10090A060);
  int64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    int64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting RDAssignmentNotificationEngine", v21, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = sub_1000DC074();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_started)  = 1;
  if (*(unsigned char *)(a1 + 120)) {
    return swift_bridgeObjectRelease();
  }
  long long v54 = v22;
  uint64_t v55 = v2;
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_100776E40;
  id v25 = [self cdEntityName];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  *(void *)(inited + 32)  = v26;
  *(void *)(inited + 40)  = v28;
  Swift::Int v29 = sub_10032D9A0(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  int64_t v30 = *(void **)(a1 + 72);
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  v53[1]  = v30;
  sub_100401C48(v29, v30, (uint64_t)sub_1000E50E0, v31, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v32 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v17, 0, 1, v32);
  sub_1000E50E8((uint64_t)v17, (uint64_t)v15);
  uint64_t v33 = a1 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_storeControllerObservationToken;
  swift_beginAccess();
  sub_1000E5150((uint64_t)v15, v33);
  swift_endAccess();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.start}", v36, 2u);
    swift_slowDealloc();
  }

  uint64_t v37 = os_transaction_create();
  uint64_t v38 = v57;
  static DispatchTime.now()();
  void *v6 = 5;
  uint64_t v39 = v58;
  uint64_t v40 = v59;
  (*(void (**)(void *, void, uint64_t))(v58 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v59);
  + infix(_:_:)();
  (*(void (**)(void *, uint64_t))(v39 + 8))(v6, v40);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v67 + 8);
  v67 += 8;
  v41(v38, v66);
  BOOL v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v45 = v55;
  if (v44)
  {
    int64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int64_t v46 = 134217984;
    aBlock[0]  = 5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "RDAssignmentNotificationEngine: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}", v46, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v47 = (void *)swift_allocObject();
  unint64_t v48 = v54;
  v47[2]  = a1;
  v47[3]  = v48;
  v47[4]  = v37;
  aBlock[4]  = sub_1000E5200;
  aBlock[5]  = v47;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008B8FC8;
  uint64_t v49 = _Block_copy(aBlock);
  swift_retain();
  swift_unknownObjectRetain();
  Class v50 = v60;
  static DispatchQoS.unspecified.getter();
  aBlock[14]  = _swiftEmptyArrayStorage;
  sub_1000D1088();
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  BOOL v51 = v62;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v52 = v65;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v49);
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v45);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v63);
  v41(v52, v66);
  return swift_release();
}

void sub_1000DA8AC()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1000DA9DC();
    swift_release();
  }
  else
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E2DC(v1, (uint64_t)qword_10090A060);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received storeController changed notification after RDAssignmentNotificationEngine was deallocated", v4, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000DA9DC()
{
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090A060);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = os_transaction_create();
  uint64_t v5 = sub_1000DC074();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = v4;
  swift_unknownObjectRetain();
  sub_1000DB0D4((unint64_t)v5, 0, (void (*)(void))sub_1000E5248, v6);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1000DAB44()
{
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090A060);
  oslog  = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}", v2, 2u);
    swift_slowDealloc();
  }
}

void sub_1000DAC2C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16)  = a3;
  if (a2 >> 62)
  {
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      uint64_t v29 = v7 - 1;
      if (v7 < 1) {
        __break(1u);
      }
      uint64_t v27 = v6;
      uint64_t v28 = v5;
      uint64_t v8 = 0;
      char v31 = 0;
      unint64_t v9 = a2 & 0xC000000000000001;
      uint64_t v10 = &stru_1008F6000;
      uint64_t v30 = v7;
      if ((a2 & 0xC000000000000001) != 0) {
        goto LABEL_9;
      }
LABEL_10:
      for (i  = *(id *)(a2 + 32 + 8 * v8); ; i  = (id)specialized _ArrayBuffer._getElementSlowPath(_:)())
      {
        uint64_t v14 = i;
        if (v31)
        {
        }
        else
        {
          id v15 = [[objc_msgSend(i, (SEL)v10[111].imp) loggingDescription];
          swift_unknownObjectRelease();
          uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v18 = v17;

          id v32 = 0;
          uint64_t v33 = 0;
          if (![v14 compareCurrentChangeTokenToLastConsumedWithResult:&v33 error:&v32])
          {
            id v19 = v32;
            os_log_type_t v20 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            if (qword_100906E98 != -1) {
              swift_once();
            }
            uint64_t v21 = type metadata accessor for Logger();
            sub_10008E2DC(v21, (uint64_t)qword_10090A060);
            swift_errorRetain();
            swift_errorRetain();
            swift_bridgeObjectRetain();
            uint64_t v22 = Logger.logObject.getter();
            os_log_type_t v23 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v22, v23))
            {
              uint64_t v24 = swift_slowAlloc();
              uint64_t v33 = swift_slowAlloc();
              *(_DWORD *)uint64_t v24 = 136446466;
              swift_bridgeObjectRetain();
              *(void *)(v24 + 4)  = sub_1000C51B8(v16, v18, &v33);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v24 + 12)  = 2080;
              id v32 = v20;
              swift_errorRetain();
              sub_100094134((uint64_t *)&unk_10090ABB0);
              uint64_t v25 = String.init<A>(describing:)();
              *(void *)(v24 + 14)  = sub_1000C51B8(v25, v26, &v33);
              swift_bridgeObjectRelease();
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v22, v23, "RDAssignmentNotificationEngine: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}", (uint8_t *)v24, 0x16u);
              swift_arrayDestroy();
              uint64_t v7 = v30;
              swift_slowDealloc();
              swift_slowDealloc();

              swift_errorRelease();
            }
            else
            {
              swift_errorRelease();
              swift_bridgeObjectRelease_n();
              swift_errorRelease();
              swift_errorRelease();
            }
            unint64_t v9 = a2 & 0xC000000000000001;
            uint64_t v10 = &stru_1008F6000;
LABEL_7:
            if (v7 == ++v8)
            {
              swift_bridgeObjectRelease();
              uint64_t v5 = v28;
              goto LABEL_27;
            }
            if (!v9) {
              goto LABEL_10;
            }
            continue;
          }
          uint64_t v11 = v33;
          id v12 = v32;

          swift_bridgeObjectRelease();
          if (v11 != 4) {
            goto LABEL_7;
          }
        }
        if (v29 == v8)
        {
          swift_bridgeObjectRelease();
          sub_1000DB0D4(a2, 1, (void (*)(void))sub_1000E5244, v27);
          uint64_t v5 = v28;
          goto LABEL_28;
        }
        ++v8;
        char v31 = 1;
        if (!v9) {
          goto LABEL_10;
        }
LABEL_9:
        ;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_27:
  sub_1000E3C44();
LABEL_28:
  swift_release();
  swift_unknownObjectRelease();
}

void sub_1000DB0D4(unint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v12 = *(void **)(v4 + 72);
  void *v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_44;
  }
  if (a1 >> 62) {
    goto LABEL_43;
  }
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v15)
  {
LABEL_4:
    unint64_t v65 = a3;
    uint64_t v66 = a4;
    swift_bridgeObjectRetain();
    id v16 = [self sharedBabysitter];
    if (v16)
    {
      unint64_t v17 = v16;
      uint64_t v18 = *(void *)(v4 + 64);
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v20 = [v17 tokenByRegisteringAccount:v18 forOperationWithName:v19];

      if (v20)
      {
        id v21 = [self daemonUserDefaults];
        char v22 = [v21 enableAssignmentNotifications];

        v22 ^= 1u;
        id v23 = sub_1000DC758(a1, v22);
        if (v22)
        {
          uint64_t v28 = (uint64_t)v65;
          uint64_t v29 = v66;
          if (qword_100906E98 != -1) {
            swift_once();
          }
          uint64_t v50 = type metadata accessor for Logger();
          sub_10008E2DC(v50, (uint64_t)qword_10090A060);
          BOOL v51 = Logger.logObject.getter();
          os_log_type_t v52 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v51, v52)) {
            goto LABEL_39;
          }
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "RDAssignmentNotificationEngine: User has disabled assignment notifications.", v53, 2u);
        }
        else
        {
          sub_1000DBD40(0, 0xE000000000000000, (uint64_t)v23);
          unint64_t v26 = v25;
          uint64_t v27 = HIBYTE(v25) & 0xF;
          if ((v25 & 0x2000000000000000) == 0) {
            uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v28 = (uint64_t)v65;
          uint64_t v29 = v66;
          if (v27)
          {
            uint64_t v30 = v24;
            if (qword_100906E98 != -1) {
              swift_once();
            }
            uint64_t v31 = type metadata accessor for Logger();
            sub_10008E2DC(v31, (uint64_t)qword_10090A060);
            swift_bridgeObjectRetain();
            id v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc();
              uint64_t v64 = swift_slowAlloc();
              uint64_t v68 = v64;
              *(_DWORD *)uint64_t v34 = 136446210;
              swift_bridgeObjectRetain();
              uint64_t v67 = sub_1000C51B8(v30, v26, &v68);
              uint64_t v28 = (uint64_t)v65;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "RDAssignmentNotificationEngine: Assignments to notify in this change set {stats: %{public}s}", v34, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            uint64_t v29 = v66;
            goto LABEL_40;
          }
          swift_bridgeObjectRelease();
          if (qword_100906E98 != -1) {
            swift_once();
          }
          uint64_t v54 = type metadata accessor for Logger();
          sub_10008E2DC(v54, (uint64_t)qword_10090A060);
          BOOL v51 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v51, v55))
          {
LABEL_39:

LABEL_40:
            id v57 = (void *)swift_allocObject();
            v57[2]  = v20;
            v57[3]  = v28;
            v57[4]  = v29;
            id v58 = v20;
            sub_1000E4F30(v28);
            sub_1000DEFAC((uint64_t)v23, (uint64_t)sub_1000E5074, (uint64_t)v57);

            swift_bridgeObjectRelease();
            swift_release();
            return;
          }
          uint64_t v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v55, "RDAssignmentNotificationEngine: No assignment to notify in this change set", v56, 2u);
        }
        swift_slowDealloc();
        goto LABEL_39;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    os_log_type_t v35 = self;
    swift_bridgeObjectRetain();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v37 = [v35 babySatErrorWithOperationName:v36];

    sub_100094134((uint64_t *)&unk_10090DC70);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100776E40;
    *(void *)(inited + 32)  = 0x696669746E656469;
    *(void *)(inited + 40)  = 0xEA00000000007265;
    swift_bridgeObjectRetain();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v39;
    unint64_t v40 = sub_1002EDFE8(inited);
    type metadata accessor for Analytics();
    swift_bridgeObjectRetain();
    sub_10042085C(v40);
    swift_bridgeObjectRelease();
    id v41 = v37;
    static Analytics.postEvent(_:payload:error:performAutoBugCaptureOnError:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E2DC(v42, (uint64_t)qword_10090A060);
    swift_retain();
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.fault.getter();
    a3  = (void (*)(void))v44;
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136446210;
      uint64_t v67 = sub_1000C51B8(0xD000000000000039, 0x80000001007C8ED0, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)a3, "Babysitting RDAssignmentNotificationEngine because it failed too many times {waiterID: %{public}s}.", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    int64_t v46 = v65;
    if (v15 >= 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = 0;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v48 = *(id *)(a1 + 8 * v47 + 32);
        }
        uint64_t v49 = v48;
        ++v47;
        uint64_t v68 = (uint64_t)v48;
        sub_1000DBAA4((id *)&v68);
      }
      while (v15 != v47);
      swift_bridgeObjectRelease();
      if (v46) {
        v46(0);
      }

      return;
    }
    __break(1u);
    goto LABEL_51;
  }
LABEL_44:
  if (qword_100906E98 != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v59 = type metadata accessor for Logger();
  sub_10008E2DC(v59, (uint64_t)qword_10090A060);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v60, v61))
  {
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v62 = 0;
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "RDAssignmentNotificationEngine: No account eligible for assignment change tracking, no assignment to notify.", v62, 2u);
    swift_slowDealloc();
  }

  if (a3) {
    a3(0);
  }
}

void sub_1000DBAA4(id *a1)
{
  id v1 = *a1;
  id v2 = [objc_msgSend(*a1, "account") loggingDescription];
  swift_unknownObjectRelease();
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  [v1 markChangesConsumed:1];
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E2DC(v6, (uint64_t)qword_10090A060);
  id v7 = v1;
  swift_bridgeObjectRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v3, v5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12)  = 2082;
    id v11 = [v7 upToToken];
    sub_100094134(&qword_10090A4A8);
    uint64_t v12 = String.init<A>(describing:)();
    sub_1000C51B8(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RDAssignmentNotificationEngine: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1000DBD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 64);
  int64_t v26 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v27 = a3;
  swift_bridgeObjectRetain();
  for (i  = 0; ; i  = v28)
  {
    if (v6)
    {
      unint64_t v13 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v28 = i;
      unint64_t v14 = v13 | (i << 6);
      goto LABEL_24;
    }
    int64_t v15 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v15 >= v26) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v25 + 8 * v15);
    int64_t v17 = i + 1;
    if (!v16)
    {
      int64_t v17 = i + 2;
      if (i + 2 >= v26) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v25 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = i + 3;
        if (i + 3 >= v26) {
          goto LABEL_26;
        }
        unint64_t v16 = *(void *)(v25 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = i + 4;
          if (i + 4 >= v26) {
            goto LABEL_26;
          }
          unint64_t v16 = *(void *)(v25 + 8 * v17);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v16 - 1) & v16;
    int64_t v28 = v17;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_24:
    uint64_t v19 = 8 * v14;
    id v20 = *(void **)(*(void *)(v27 + 48) + v19);
    uint64_t v21 = *(void *)(*(void *)(v27 + 56) + v19);
    sub_100094134((uint64_t *)&unk_10090A430);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16)  = xmmword_100776E80;
    id v23 = v20;
    swift_bridgeObjectRetain();
    id v24 = [v23 objectID];
    *(void *)(v22 + 56)  = sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    *(void *)(v22 + 64)  = sub_1000E4F40(&qword_10090A4A0, (unint64_t *)&qword_10090A3B0);
    *(void *)(v22 + 32)  = v24;
    if ((v21 & 0xC000000000000001) != 0) {
      uint64_t v8 = __CocoaDictionary.count.getter();
    }
    else {
      uint64_t v8 = *(void *)(v21 + 16);
    }
    *(void *)(v22 + 96)  = &type metadata for Int;
    *(void *)(v22 + 104)  = &protocol witness table for Int;
    *(void *)(v22 + 72)  = v8;
    uint64_t v9 = String.init(format:_:)();
    id v11 = v10;
    swift_bridgeObjectRetain();
    v12._countAndFlagsBits  = v9;
    v12._object  = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = i + 5;
  if (i + 5 >= v26)
  {
LABEL_26:
    swift_release();
    return;
  }
  unint64_t v16 = *(void *)(v25 + 8 * v18);
  if (v16)
  {
    int64_t v17 = i + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v17 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v17 >= v26) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v25 + 8 * v17);
    ++v18;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1000DC074()
{
  id v1 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v0 + 104)];
  id v22 = 0;
  id v2 = [v1 fetchActiveCloudKitAccountObjectIDsWithFetchOption:2 error:&v22];
  id v3 = v22;
  if (!v2)
  {
    id v9 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10090A060);
    swift_errorRetain();
    swift_errorRetain();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      id v22 = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136446210;
      swift_getErrorValue();
      uint64_t v14 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v14, v15, (uint64_t *)&v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDAssignmentNotificationEngine: Failed to fetch CloudKit accounts. Not tracking changes. {error: %{public}s}", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRelease();
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = v2;
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v3;

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090A060);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "RDAssignmentNotificationEngine: Not tracking changes since there is no logged in or enabled CloudKit account.", v20, 2u);
      swift_slowDealloc();
    }

    return _swiftEmptyArrayStorage;
  }
LABEL_4:
  swift_retain();
  id v7 = v1;
  uint64_t v8 = sub_1000E3860(v5, v0, v7);
  swift_bridgeObjectRelease();
  swift_release();

  return v8;
}

void sub_1000DC46C(void **a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  id v35 = a2;
  NSString v36 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  id v9 = (char *)[objc_allocWithZone((Class)type metadata accessor for ChangeTrackingAccountProvider()) init];
  id v10 = [v8 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, v4);
  unint64_t v15 = (uint64_t *)&v9[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountID];
  *unint64_t v15 = v11;
  v15[1]  = v13;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void **)&v9[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_rem_accountObjectID];
  *(void *)&v9[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_rem_accountObjectID]  = v8;
  id v17 = v8;

  id v18 = [v17 uuid];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v19 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  v14(v7, v4);
  id v22 = (uint64_t *)&v9[OBJC_IVAR____TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider_accountDescription];
  *id v22 = v19;
  v22[1]  = v21;
  swift_bridgeObjectRelease();
  sub_100094134((uint64_t *)&unk_10090A490);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16)  = xmmword_100776E40;
  id v24 = self;
  uint64_t v25 = v9;
  id v26 = v35;
  id v27 = [v24 cdEntityName];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  *(void *)(v23 + 32)  = v28;
  *(void *)(v23 + 40)  = v30;
  id v31 = objc_allocWithZone((Class)REMDAChangeTrackingHelper);
  NSString v32 = String._bridgeToObjectiveC()();
  isa  = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v34 = [v31 initWithREMDAAccount:v25 clientName:v32 withREMStore:v26 entityNames:isa];

  *NSString v36 = v34;
}

id sub_1000DC758(unint64_t a1, char a2)
{
  id v5 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v2 + 104)];
  id v13 = &_swiftEmptyDictionarySingleton;
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_11:

    swift_bridgeObjectRelease();
    return &_swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRetain();
  id result = (id)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = (uint64_t)result;
  if (!result) {
    goto LABEL_11;
  }
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = 0;
    char v9 = a2 & 1;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v10 = *(id *)(a1 + 8 * v8 + 32);
      }
      uint64_t v11 = v10;
      ++v8;
      id v12 = v10;
      sub_1000DC8AC(&v12, v9, v5, v2, &v13);
    }
    while (v6 != v8);

    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void sub_1000DC8AC(id *a1, char a2, void *a3, uint64_t a4, id *a5)
{
  id v6 = *a1;
  id v7 = [objc_msgSend(*a1, "account") loggingDescription];
  swift_unknownObjectRelease();
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  id v11 = [v6 sinceToken];
  if (!v11)
  {
    if (qword_100906E98 != -1) {
      goto LABEL_54;
    }
    goto LABEL_9;
  }
  id v12 = v11;
  id v106 = v6;
  id v13 = [v6 upToToken];
  if (!v13)
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E2DC(v30, (uint64_t)qword_10090A060);
    id v31 = v12;
    swift_bridgeObjectRetain();
    id v32 = v31;
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      NSString v36 = (void *)swift_slowAlloc();
      id v111 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136446466;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v8, v10, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v35 + 12)  = 2114;
      uint64_t v110 = (uint64_t)v32;
      id v37 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v36 = v12;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDAssignmentNotificationEngine: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}", (uint8_t *)v35, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  uint64_t v14 = v13;
  if (a2)
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E2DC(v15, (uint64_t)qword_10090A060);
    id v16 = v12;
    id v17 = v14;
    swift_bridgeObjectRetain();
    id v18 = v16;
    id v19 = v17;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    type  = v18;
    if (os_log_type_enabled(v20, v21))
    {
      v94  = v14;
      uint64_t v22 = swift_slowAlloc();
      unint64_t v99 = v12;
      uint64_t v23 = (void *)swift_slowAlloc();
      id v111 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446722;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v8, v10, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12)  = 2114;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v99;

      *(_WORD *)(v22 + 22)  = 2114;
      uint64_t v110 = (uint64_t)v19;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v23[1]  = v94;

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDAssignmentNotificationEngine: User opts to not posting assignment notifications, mark change set as consumed right away {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v22, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    [v106 markChangesConsumed];

    return;
  }
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  sub_10008E2DC(v38, (uint64_t)qword_10090A060);
  id v39 = v12;
  id v40 = v14;
  swift_bridgeObjectRetain();
  id v41 = v39;
  id v96 = v40;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  id v100 = v12;
  uint64_t v93 = v41;
  uint64_t v95 = v14;
  if (os_log_type_enabled(v42, v43))
  {
    log  = v42;
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = v41;
    int64_t v46 = (void *)swift_slowAlloc();
    id v111 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136446722;
    swift_bridgeObjectRetain();
    sub_1000C51B8(v8, v10, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v44 + 12)  = 2114;
    id v47 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v46 = v12;

    *(_WORD *)(v44 + 22)  = 2114;
    id v48 = v96;
    uint64_t v110 = (uint64_t)v96;
    id v49 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v46[1]  = v14;

    _os_log_impl((void *)&_mh_execute_header, log, v43, "RDAssignmentNotificationEngine: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}", (uint8_t *)v44, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v50 = v106;
    id v41 = v93;
  }
  else
  {

    id v48 = v96;
    swift_bridgeObjectRelease_n();
    uint64_t v50 = v6;
  }
  sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
  id v51 = [v50 changedModelObjectsOfModelClass:swift_getObjCClassFromMetadata() ofChangeType:0];
  if (!v51)
  {
LABEL_44:
    id v77 = v41;
    id v78 = v48;
    NSString v79 = v77;
    id v80 = v78;
    unsigned int v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83  = swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      *(_DWORD *)v83  = 138543618;
      id v111 = v79;
      typea  = v82;
      uint64_t v85 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v84 = v100;

      *(_WORD *)(v83 + 12)  = 2114;
      id v111 = v80;
      id v86 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v84[1]  = v95;

      _os_log_impl((void *)&_mh_execute_header, v81, typea, "RDAssignmentNotificationEngine: No inserted assignments found in change {since: %{public}@, upTo: %{public}@}", (uint8_t *)v83, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unsigned int v81 = v79;
    }

    [v106 markChangesConsumed];
    return;
  }
  os_log_type_t v52 = v51;
  sub_100094134(&qword_10090A440);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v111 = &_swiftEmptyDictionarySingleton;
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
    if (v53) {
      goto LABEL_27;
    }
    goto LABEL_40;
  }
  uint64_t v53 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v53)
  {
LABEL_40:
    swift_bridgeObjectRelease_n();
    uint64_t v69 = (uint64_t)v111;
    if (*((void *)v111 + 2))
    {
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      sub_100094134(&qword_10090A448);
      sub_1000967F4(&qword_10090A450, &qword_10090A448);
      Sequence.elements<A>(ofType:)();
      isa  = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v111 = 0;
      id v71 = [a3 fetchRemindersWithObjectIDs:isa error:&v111];

      id v72 = v111;
      if (v71)
      {
        sub_1000963CC(0, &qword_1009168E0);
        sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
        unint64_t v73 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        id v74 = v72;

        sub_1000DDA74((uint64_t)&_swiftEmptyDictionarySingleton, v73);
        uint64_t v76 = v75;
        swift_bridgeObjectRelease();
      }
      else
      {
        v87  = v111;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = (uint8_t *)swift_slowAlloc();
          id v111 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v90 = 136315138;
          swift_getErrorValue();
          uint64_t v91 = Error.localizedDescription.getter();
          uint64_t v110 = sub_1000C51B8(v91, v92, (uint64_t *)&v111);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "RDAssignmentNotificationEngine: Error ocurred when fetching inserted assignments' reminders {error: %s}", v90, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v76 = &_swiftEmptyDictionarySingleton;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1000E3654((uint64_t)v76, a4, v69, a5);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      [v106 markChangesConsumed];

      return;
    }
    swift_bridgeObjectRelease();
    id v41 = v93;
    id v48 = v96;
    goto LABEL_44;
  }
LABEL_27:
  unint64_t v54 = v10 & 0xC000000000000001;
  uint64_t v8 = 4;
  uint64_t v97 = v53;
  unint64_t v98 = v10;
  while (1)
  {
    uint64_t v56 = v8 - 4;
    if (!v54) {
      break;
    }
    id v57 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v58 = v8 - 3;
    if (__OFADD__(v56, 1)) {
      goto LABEL_53;
    }
LABEL_35:
    self;
    uint64_t v59 = swift_dynamicCastObjCClass();
    if (v59)
    {
      os_log_type_t v55 = (void *)v59;
      uint64_t v110 = v59;
      swift_unknownObjectRetain();
      id v109 = [v55 reminderID];
      sub_100094134(&qword_10090A458);
      sub_1000967F4((unint64_t *)&unk_10090A460, (uint64_t *)&unk_100921C70);
      Dictionary<>.append(_:toCollectionUnderKey:)();
      swift_unknownObjectRelease_n();

      if (v58 == v53) {
        goto LABEL_40;
      }
    }
    else
    {
      swift_unknownObjectRetain_n();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        uint64_t v110 = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136315138;
        id v63 = [v57 description];
        loga  = v60;
        unint64_t v64 = v54;
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;

        uint64_t v68 = v65;
        unint64_t v54 = v64;
        *(void *)(v62 + 4)  = sub_1000C51B8(v68, v67, &v110);
        swift_unknownObjectRelease_n();
        unint64_t v10 = v98;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, loga, v61, "RDAssignmentNotificationEngine: Tracked insertion is not an REMAssignment, huh? {inserted: %s}", (uint8_t *)v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();

        uint64_t v53 = v97;
        if (v58 == v97) {
          goto LABEL_40;
        }
      }
      else
      {

        swift_unknownObjectRelease_n();
        if (v58 == v53) {
          goto LABEL_40;
        }
      }
    }
    ++v8;
  }
  id v57 = *(void **)(v10 + 8 * v8);
  swift_unknownObjectRetain();
  uint64_t v58 = v8 - 3;
  if (!__OFADD__(v56, 1)) {
    goto LABEL_35;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  swift_once();
LABEL_9:
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E2DC(v26, (uint64_t)qword_10090A060);
  swift_bridgeObjectRetain();
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    id v111 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136446210;
    swift_bridgeObjectRetain();
    uint64_t v110 = sub_1000C51B8(v8, v10, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAssignmentNotificationEngine: No since-token from change tracking {account: %{public}s}", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

void sub_1000DDA74(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    unint64_t v21 = 0;
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    unint64_t v4 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
    uint64_t v2 = ~v5;
    unint64_t v21 = a2 + 64;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v3 = v7 & *(void *)(a2 + 64);
    unint64_t v4 = a2;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v20 = (unint64_t)(v2 + 64) >> 6;
  if ((v4 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v3)
    {
      uint64_t v9 = (v3 - 1) & v3;
      unint64_t v10 = __clz(__rbit64(v3)) | (v8 << 6);
      uint64_t v11 = v8;
      goto LABEL_29;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v14 >= v20) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v21 + 8 * v14);
    uint64_t v11 = v8 + 1;
    if (!v15)
    {
      uint64_t v11 = v8 + 2;
      if (v8 + 2 >= v20) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v21 + 8 * v11);
      if (!v15)
      {
        uint64_t v11 = v8 + 3;
        if (v8 + 3 >= v20) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v21 + 8 * v11);
        if (!v15)
        {
          uint64_t v11 = v8 + 4;
          if (v8 + 4 >= v20) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v21 + 8 * v11);
          if (!v15)
          {
            uint64_t v11 = v8 + 5;
            if (v8 + 5 >= v20) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v21 + 8 * v11);
            if (!v15)
            {
              uint64_t v16 = v8 + 6;
              while (v20 != v16)
              {
                unint64_t v15 = *(void *)(v21 + 8 * v16++);
                if (v15)
                {
                  uint64_t v11 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_29:
    uint64_t v17 = 8 * v10;
    id v18 = *(void **)(*(void *)(v4 + 56) + v17);
    id v12 = *(id *)(*(void *)(v4 + 48) + v17);
    id v13 = v18;
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      id v23 = v13;
      id v19 = v13;
      id v22 = [v19 list];
      sub_100094134(&qword_10090A470);
      sub_1000967F4(&qword_10090A478, (uint64_t *)&unk_10090A480);
      Dictionary<>.append(_:toCollectionUnderKey:)();

      uint64_t v8 = v11;
      unint64_t v3 = v9;
      if ((v4 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaDictionary.Iterator.next()())
      {
        sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v23;
        swift_unknownObjectRelease();
        sub_1000963CC(0, &qword_1009168E0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v23;
        swift_unknownObjectRelease();
        uint64_t v11 = v8;
        uint64_t v9 = v3;
        if (v23) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1000DDDD8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v5 = *(void **)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a2
                 + OBJC_IVAR____TtC7remindd30RDAssignmentNotificationEngine_currentUserShareParticipantIDsOverrideByListID);
  if (v7)
  {
    swift_bridgeObjectRetain();
    id v8 = v5;
    swift_bridgeObjectRetain();
    id v9 = [v8 objectID];
    unint64_t v10 = v9;
    if (*(void *)(v7 + 16))
    {
      unint64_t v11 = sub_100306FE8((uint64_t)v9);
      if (v12)
      {
        id v13 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v11);
        uint64_t v15 = *v13;
        uint64_t v14 = v13[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();

        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v16 = v5;
    swift_bridgeObjectRetain();
  }
  id v17 = [v5 currentUserShareParticipantID];
  if (!v17)
  {
    swift_bridgeObjectRelease();
    if (qword_100906E98 == -1) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
  id v18 = v17;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v19;

LABEL_9:
  id v36 = &_swiftEmptyDictionarySingleton;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (v20) {
      goto LABEL_11;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)&_swiftEmptyDictionarySingleton;
    goto LABEL_24;
  }
  uint64_t v20 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v20) {
    goto LABEL_23;
  }
LABEL_11:
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v6 + 8 * v21 + 32);
      }
      id v23 = v22;
      ++v21;
      id v35 = v22;
      sub_1000DE218(&v35, a3, v15, v14, v5);
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = (uint64_t)v36;
LABEL_24:
    swift_bridgeObjectRelease();
    if ((v24 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = __CocoaDictionary.count.getter();
      swift_bridgeObjectRelease();
      if (v31)
      {
LABEL_26:
        id v32 = v5;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
        id v35 = *a4;
        *a4  = (id)0x8000000000000000;
        sub_1002C45F8(v24, v32, isUniquelyReferenced_nonNull_native);
        *a4  = v35;

        swift_bridgeObjectRelease();
LABEL_29:
        swift_bridgeObjectRelease();
        return;
      }
    }
    else if (*(void *)(v24 + 16))
    {
      goto LABEL_26;
    }

    goto LABEL_29;
  }
  __break(1u);
LABEL_31:
  swift_once();
LABEL_19:
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10090A060);
  id v26 = v5;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138543362;
    id v36 = [v26 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v30 = v36;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "RDAssignmentNotificationEngine: Current user is not participating the list of this inserted assignment {list: %{public}@}", v29, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1000DE218(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = *a1;
  if ([*a1 isCompleted])
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E2DC(v10, (uint64_t)qword_10090A060);
    unint64_t v11 = v9;
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      id v46 = [v11 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v46;

      id v16 = "RDAssignmentNotificationEngine: Reminder is already completed, skipping from showing assignment notification"
            " {reminder: %{public}@}";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, v13, v16, v14, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    goto LABEL_19;
  }
  id v17 = [v9 objectID];
  id v18 = v17;
  if (!*(void *)(a2 + 16) || (unint64_t v19 = sub_100306FE8((uint64_t)v17), (v20 & 1) == 0))
  {

    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E2DC(v27, (uint64_t)qword_10090A060);
    unint64_t v11 = v9;
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      id v48 = [v11 objectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v28 = v48;

      id v16 = "RDAssignmentNotificationEngine: Can't find the correspinding inserted assignments from the reminderID, how c"
            "ome? {reminder: %{public}@}";
      goto LABEL_18;
    }
LABEL_19:

    return;
  }
  unint64_t v21 = *(void *)(*(void *)(a2 + 56) + 8 * v19);
  swift_bridgeObjectRetain();

  swift_bridgeObjectRetain();
  id v22 = v9;
  unint64_t v23 = (unint64_t)sub_1000E34A0(v21, a3, a4, v22);
  swift_bridgeObjectRelease();

  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29 > 1)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      if (qword_100906E98 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E2DC(v25, (uint64_t)qword_10090A060);
      unint64_t v11 = v22;
      char v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        id v26 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 138543362;
        id v47 = [v11 objectID];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v26 = v47;

        id v16 = "RDAssignmentNotificationEngine: Should have selected only the ONE most recent current assignment, not mult"
              "iple {reminder: %{public}@}";
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    swift_bridgeObjectRetain();
    unint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24 > 1) {
      goto LABEL_10;
    }
  }
  if (!v24)
  {
    swift_bridgeObjectRelease();
    return;
  }
  if ((v23 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v30 = *(id *)(v23 + 32);
  }
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E2DC(v32, (uint64_t)qword_10090A060);
  os_log_type_t v33 = v22;
  id v34 = a5;
  id v35 = v31;
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    id v39 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 138543874;
    log  = v36;
    id v40 = v33;
    id v41 = [v34 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v39 = v41;

    *(_WORD *)(v38 + 12)  = 2114;
    id v42 = [v40 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v39[1]  = v42;

    *(_WORD *)(v38 + 22)  = 2114;
    id v49 = [v35 objectID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v39[2]  = v49;
    os_log_type_t v33 = v40;

    _os_log_impl((void *)&_mh_execute_header, log, v37, "RDAssignmentNotificationEngine: This is an inserted assignment we want to notify {list: %{public}@, reminder: %{public}@, assignment: %{public}@}", (uint8_t *)v38, 0x20u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  os_log_type_t v43 = v33;
  id v44 = v35;
  sub_1001A6B50((uint64_t)v43, (uint64_t)v44);
}

BOOL sub_1000DE960(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v38 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *a1;
  id v12 = [*a1 assigneeID];
  id v13 = [v12 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  id v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v39 = v7;
  uint64_t v18 = v7;
  unint64_t v19 = v17;
  v17(v10, v18);
  uint64_t v44 = v14;
  uint64_t v45 = v16;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  sub_1000E4FD8();
  uint64_t v20 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (v20) {
    return 0;
  }
  id v37 = v11;
  id v22 = [v11 originatorID];
  id v23 = [v22 uuid];

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  v19(v10, v39);
  uint64_t v44 = v24;
  uint64_t v45 = v26;
  uint64_t v42 = v40;
  uint64_t v43 = v41;
  uint64_t v27 = StringProtocol.caseInsensitiveCompare<A>(_:)();
  swift_bridgeObjectRelease();
  if (!v27) {
    return 0;
  }
  id v28 = [v38 assignmentContext];
  id v29 = v28;
  if (v28)
  {
    id v30 = [v28 currentAssignment];

    uint64_t v31 = v37;
    if (v30)
    {
      id v29 = [v30 objectID];
    }
    else
    {
      id v29 = 0;
    }
  }
  else
  {
    uint64_t v31 = v37;
  }
  id v32 = [v31 objectID];
  os_log_type_t v33 = v32;
  if (!v29)
  {
    if (!v32) {
      return 1;
    }
    goto LABEL_17;
  }
  if (!v32)
  {
    os_log_type_t v33 = v29;
LABEL_17:

    return 0;
  }
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  id v34 = v29;
  char v35 = static NSObject.== infix(_:_:)();

  return (v35 & 1) != 0;
}

void sub_1000DECA0(unint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    unint64_t v19 = 0;
    uint64_t v1 = 0;
    unint64_t v2 = 0;
    unint64_t v3 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v1 = ~v4;
    unint64_t v19 = a1 + 64;
    uint64_t v5 = -v4;
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v2 = v6 & *(void *)(a1 + 64);
    unint64_t v3 = a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  int64_t v18 = (unint64_t)(v1 + 64) >> 6;
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v2)
  {
    uint64_t v8 = (v2 - 1) & v2;
    unint64_t v9 = __clz(__rbit64(v2)) | (v7 << 6);
    uint64_t v10 = v7;
    goto LABEL_29;
  }
  int64_t v13 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v13 < v18)
    {
      unint64_t v14 = *(void *)(v19 + 8 * v13);
      uint64_t v10 = v7 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v7 + 2;
      if (v7 + 2 >= v18) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v7 + 3;
      if (v7 + 3 >= v18) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v10 = v7 + 4;
      if (v7 + 4 >= v18) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v19 + 8 * v10);
      if (v14)
      {
LABEL_28:
        uint64_t v8 = (v14 - 1) & v14;
        unint64_t v9 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_29:
        uint64_t v16 = 8 * v9;
        id v17 = *(void **)(*(void *)(v3 + 56) + v16);
        id v11 = *(id *)(*(void *)(v3 + 48) + v16);
        id v12 = v17;
        if (v11)
        {
          do
          {
            if (([v11 isOriginatorNullified] & 1) == 0) {
              break;
            }

            uint64_t v7 = v10;
            unint64_t v2 = v8;
            if ((v3 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaDictionary.Iterator.next()()) {
              break;
            }
            sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v11 = v20;
            swift_unknownObjectRelease();
            sub_1000963CC(0, &qword_1009168E0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v20;
            swift_unknownObjectRelease();
            uint64_t v10 = v7;
            uint64_t v8 = v2;
          }
          while (v20);
        }
        goto LABEL_33;
      }
      uint64_t v10 = v7 + 5;
      if (v7 + 5 < v18)
      {
        unint64_t v14 = *(void *)(v19 + 8 * v10);
        if (!v14)
        {
          uint64_t v15 = v7 + 6;
          while (v18 != v15)
          {
            unint64_t v14 = *(void *)(v19 + 8 * v15++);
            if (v14)
            {
              uint64_t v10 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_1000C1AF8();
    return;
  }
  __break(1u);
}

uint64_t sub_1000DEFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v26 = v10;
  __chkstk_darwin(v10);
  id v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v17 = *(void **)(v4 + 72);
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v24 = v17;
  LOBYTE(v17)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if (v17)
  {
    unint64_t v19 = dispatch_group_create();
    swift_retain();
    sub_1000E32B8(v23, v4, v19);
    swift_release();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16)  = a2;
    *(void *)(v20 + 24)  = a3;
    aBlock[4]  = sub_1000E4EFC;
    aBlock[5]  = v20;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = 1107296256;
    aBlock[2]  = sub_100236C78;
    void aBlock[3] = &unk_1008B8F00;
    unint64_t v21 = _Block_copy(aBlock);
    sub_1000E4F30(a2);
    static DispatchQoS.unspecified.getter();
    id v28 = _swiftEmptyArrayStorage;
    sub_1000D1088();
    sub_100094134((uint64_t *)&unk_10090AFD0);
    sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();

    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v26);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000DF350()
{
  if (!qword_10090A170)
  {
    type metadata accessor for RDStoreControllerNotificationCenter.Token(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090A170);
    }
  }
}

uint64_t type metadata accessor for RDAssignmentNotificationEngine.BabysitTarget()
{
  return self;
}

void sub_1000DF3CC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  v182  = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void **)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RDUserNotificationType();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  v181  = (void **)((char *)&v170 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = *(void *)(a1 + 8);
  id v13 = *(id *)a1;
  swift_bridgeObjectRetain();
  id v14 = [v13 shareeContext];
  if (!v14)
  {
    swift_bridgeObjectRelease();
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_10008E2DC(v50, (uint64_t)qword_10090A060);
    id v51 = v13;
    os_log_type_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v52, v53))
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v55 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v54 = 138543362;
      id v56 = [v51 objectID];
      v190  = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v55 = v56;

      _os_log_impl((void *)&_mh_execute_header, v52, v53, "RDAssignmentNotificationEngine: List has no sharee, huh? {listID: %{public}@}", v54, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  uint64_t v15 = v14;
  v177  = v10;
  v178  = v9;
  v176  = v8;
  v180  = a3;
  id v16 = [v14 sharees];

  sub_1000963CC(0, &qword_10090A3E8);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v188  = (void *)(v12 & 0xC000000000000001);
  if ((v12 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = __CocoaDictionary.count.getter();
    if (v18) {
      goto LABEL_4;
    }
LABEL_16:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v18 = *(void *)(v12 + 16);
  if (!v18) {
    goto LABEL_16;
  }
LABEL_4:
  v183  = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = v184;
  sub_1000E1C98(v12, v17);
  unint64_t v21 = v20;
  v189  = (uint64_t *)v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v190  = v21;
  sub_100094134(&qword_10090A3F0);
  sub_1000967F4(&qword_10090A3F8, &qword_10090A3F0);
  sub_1000E4F40((unint64_t *)&unk_10090A400, &qword_10090A3E8);
  unint64_t v22 = Sequence<>.unique()();
  swift_bridgeObjectRelease();
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void **)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = (uint64_t)v189;
  sub_1000DECA0((unint64_t)v189);
  uint64_t v27 = v19;
  id v28 = v183;
  if (!v25)
  {
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v58 = (void *)sub_1002B0FD0(v57);
    uint64_t v60 = v59;
    swift_bridgeObjectRelease();
    if (!v58)
    {
      if (qword_100906E98 == -1) {
        goto LABEL_53;
      }
      goto LABEL_65;
    }
    uint64_t v61 = qword_100906E98;
    uint64_t v62 = v58;
    id v63 = v60;
    if (v61 == -1)
    {
LABEL_20:
      uint64_t v64 = type metadata accessor for Logger();
      sub_10008E2DC(v64, (uint64_t)qword_10090A060);
      id v65 = (id)v62;
      unint64_t v66 = v63;
      id v28 = v28;
      id v67 = v65;
      v185  = v66;
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.info.getter();
      BOOL v70 = os_log_type_enabled(v68, v69);
      v187  = v28;
      v184  = v27;
      v175  = v5;
      v174  = v6;
      v179  = v18;
      v173  = v67;
      if (v70)
      {
        id v71 = v67;
        uint64_t v72 = v18;
        uint64_t v73 = swift_slowAlloc();
        id v74 = (void *)swift_slowAlloc();
        v172  = v74;
        v186  = (void *)swift_slowAlloc();
        v190  = v186;
        *(_DWORD *)uint64_t v73 = 138543874;
        id v75 = [v28 objectID];
        v192  = (uint64_t)v75;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v74 = v75;

        *(_WORD *)(v73 + 12)  = 2048;
        v192  = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v73 + 22)  = 2082;
        id v76 = [v71 description];
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v79 = v78;

        v192  = sub_1000C51B8(v77, v79, (uint64_t *)&v190);
        id v28 = v187;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v80 = v185;

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "RDAssignmentNotificationEngine: Populating assignment notification content with all nullified originators {listID: %{public}@, assignedCount: %ld, selected: %{public}s}", (uint8_t *)v73, 0x20u);
        sub_100094134((uint64_t *)&unk_10090A040);
        swift_arrayDestroy();
        uint64_t v24 = (uint64_t)v189;
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v188) {
          goto LABEL_22;
        }
      }
      else
      {

        id v80 = v185;
        if (v188)
        {
LABEL_22:
          uint64_t v81 = __CocoaDictionary.count.getter();
          if (v81)
          {
LABEL_23:
            v195  = _swiftEmptyArrayStorage;
            specialized ContiguousArray.reserveCapacity(_:)();
            v192  = sub_1000E16BC(v24);
            v193  = v82;
            v194  = v83 & 1;
            if ((v81 & 0x8000000000000000) == 0)
            {
              uint64_t v84 = v24 & 0xFFFFFFFFFFFFFF8;
              if (v24 < 0) {
                uint64_t v84 = v24;
              }
              v186  = (void *)v84;
              uint64_t v85 = (uint64_t)v189;
              do
              {
                uint64_t v92 = v192;
                uint64_t v93 = v193;
                v94  = v194;
                sub_1000E17A8(&v190, v192, v193, v194, v85, (unint64_t *)&unk_10090FFF0, (uint64_t)REMAssignment_ptr, (uint64_t (*)())sub_1003074AC);
                id v96 = v95;
                id v97 = v190;
                id v98 = [v190 objectID];

                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
                if (v188)
                {
                  if ((v94 & 1) == 0) {
                    goto LABEL_67;
                  }
                  if (__CocoaDictionary.Index.handleBitPattern.getter()) {
                    swift_isUniquelyReferenced_nonNull_native();
                  }
                  id v28 = v187;
                  sub_100094134(&qword_10090A418);
                  unint64_t v99 = (void (*)(id *, void))Dictionary.Index._asCocoa.modify();
                  __CocoaDictionary.formIndex(after:isUnique:)();
                  v99(&v190, 0);
                }
                else
                {
                  sub_1000E1454(v92, v93, v94, v85, (unint64_t *)&unk_10090FFF0, (uint64_t)REMAssignment_ptr, (void (*)())sub_1003074AC);
                  v87  = v86;
                  uint64_t v89 = v88;
                  char v91 = v90;
                  sub_1000E4EA4(v92, v93, v94);
                  v192  = v87;
                  v193  = v89;
                  v194  = v91 & 1;
                  id v28 = v187;
                }
                --v81;
              }
              while (v81);
              sub_1000E4EA4(v192, v193, v194);
              v135  = v195;
              swift_bridgeObjectRelease();
              id v80 = v185;
              goto LABEL_58;
            }
            __break(1u);
LABEL_65:
            swift_once();
LABEL_53:
            v136  = type metadata accessor for Logger();
            sub_10008E2DC(v136, (uint64_t)qword_10090A060);
            swift_bridgeObjectRetain();
            v137  = Logger.logObject.getter();
            v138  = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v137, v138))
            {
              v139  = (uint8_t *)swift_slowAlloc();
              v188  = (void *)swift_slowAlloc();
              v190  = v188;
              *(_DWORD *)v139  = 136315138;
              v187  = v139 + 4;
              sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
              sub_1000963CC(0, &qword_1009168E0);
              sub_1000E4F40(&qword_10090A410, (unint64_t *)&unk_10090FFF0);
              swift_bridgeObjectRetain();
              v140  = Dictionary.description.getter();
              v142  = v141;
              swift_bridgeObjectRelease();
              v192  = sub_1000C51B8(v140, v142, (uint64_t *)&v190);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v137, v138, "RDAssignmentNotificationEngine: Can't find any item to populate, this is not expected {map: %s}", v139, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            return;
          }
LABEL_57:
          swift_bridgeObjectRelease();
          v135  = _swiftEmptyArrayStorage;
LABEL_58:
          v122  = v181;
          *v181  = v135;
          v124  = v177;
          v123  = v178;
          (*(void (**)(void *, void, uint64_t))(v177 + 104))(v122, enum case for RDUserNotificationType.assignmentNotification(_:), v178);
          v143  = v28;
          swift_bridgeObjectRetain();
          v144  = sub_10026D9CC(0, v28, (unint64_t)v135);

          swift_bridgeObjectRelease();
          v127  = v173;
          v128  = v80;
          v129  = (uint64_t *)v144;
          v130  = v129;
          v131  = v127;
          v132  = v128;
          v133  = v179;
          v134  = 1;
LABEL_59:
          sub_1000E2EA8(v129, v131, v132, v133, v134);
          v189  = v130;

          (*(void (**)(void *, uint64_t))(v124 + 8))(v122, v123);
          dispatch_group_enter(v180);
          v145  = [v183 objectID];
          v146  = [v145 uuid];

          v147  = v176;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          v148  = UUID.uuidString.getter();
          v150  = v149;
          v151  = (void (*)(char *, uint64_t))v174[1];
          v152  = v175;
          v151(v147, v175);
          v190  = (id)0xD000000000000029;
          v191  = 0x80000001007C8F10;
          v153._countAndFlagsBits  = v148;
          v153._object  = v150;
          String.append(_:)(v153);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v154._countAndFlagsBits  = 46;
          v154._object  = (void *)0xE100000000000000;
          String.append(_:)(v154);
          swift_bridgeObjectRelease();
          v156  = v190;
          v155  = v191;
          UUID.init()();
          v157  = UUID.uuidString.getter();
          v159  = v158;
          v151(v147, v152);
          v190  = v156;
          v191  = v155;
          swift_bridgeObjectRetain();
          v160._countAndFlagsBits  = v157;
          v160._object  = v159;
          String.append(_:)(v160);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v162  = (uint64_t)v190;
          v161  = v191;
          v163  = v182;
          v164  = (void *)swift_allocObject();
          v165  = v183;
          v164[2]  = v163;
          v164[3]  = v165;
          v166  = v180;
          v164[4]  = v179;
          v164[5]  = v166;
          v167  = v165;
          v168  = v189;
          swift_retain();
          v169  = v166;
          sub_10050E738(v162, v161, v168, (uint64_t)sub_1000E4FCC, (uint64_t)v164);
          swift_bridgeObjectRelease();
          swift_release();

          return;
        }
      }
      uint64_t v81 = *(void *)(v24 + 16);
      if (v81) {
        goto LABEL_23;
      }
      goto LABEL_57;
    }
LABEL_63:
    swift_once();
    goto LABEL_20;
  }
  id v29 = v26;
  v173  = v23;
  uint64_t v30 = qword_100906E98;
  id v31 = v25;
  id v32 = v29;
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10008E2DC(v33, (uint64_t)qword_10090A060);
  id v34 = v31;
  id v35 = v32;
  id v28 = v28;
  id v36 = v34;
  uint64_t v24 = (uint64_t)v35;
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.info.getter();
  int v39 = v38;
  BOOL v40 = os_log_type_enabled(v37, v38);
  v187  = v28;
  v184  = v19;
  v175  = v5;
  v174  = v6;
  v179  = v18;
  v172  = v36;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc();
    v171  = v39;
    uint64_t v42 = v18;
    uint64_t v43 = v41;
    uint64_t v44 = (void *)swift_slowAlloc();
    v170  = v44;
    v185  = (void **)swift_slowAlloc();
    v190  = v185;
    *(_DWORD *)uint64_t v43 = 138544130;
    id v45 = [v28 objectID];
    v192  = (uint64_t)v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v44 = v45;

    uint64_t v27 = v36;
    *(_WORD *)(v43 + 12)  = 2048;
    v192  = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 22)  = 2048;
    v192  = (uint64_t)v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 32)  = 2082;
    uint64_t v5 = v43 + 34;
    id v46 = [v36 description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    v192  = sub_1000C51B8(v47, v49, (uint64_t *)&v190);
    id v28 = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v171, "RDAssignmentNotificationEngine: Populating assignment notification content {listID: %{public}@, assignedCount: %ld, originatorCount: %ld, selected: %{public}s}", (uint8_t *)v43, 0x2Au);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v62 = (uint64_t)v189;
  uint64_t v6 = (void *)v24;
  if (v188)
  {
    uint64_t v18 = __CocoaDictionary.count.getter();
    if (v18) {
      goto LABEL_37;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    v121  = _swiftEmptyArrayStorage;
LABEL_50:
    v122  = v181;
    *v181  = v121;
    v124  = v177;
    v123  = v178;
    (*(void (**)(void *, void, uint64_t))(v177 + 104))(v122, enum case for RDUserNotificationType.assignmentNotification(_:), v178);
    v125  = v28;
    swift_bridgeObjectRetain();
    v126  = sub_10026D9CC(0, v28, (unint64_t)v121);

    swift_bridgeObjectRelease();
    v127  = v172;
    v128  = v6;
    v129  = (uint64_t *)v126;
    v130  = v129;
    v131  = v127;
    v132  = v128;
    v133  = v179;
    v134  = (uint64_t)v173;
    goto LABEL_59;
  }
  uint64_t v18 = v189[2];
  if (!v18) {
    goto LABEL_49;
  }
LABEL_37:
  v195  = _swiftEmptyArrayStorage;
  id v63 = &v195;
  specialized ContiguousArray.reserveCapacity(_:)();
  v192  = sub_1000E16BC(v62);
  v193  = v100;
  v194  = v101 & 1;
  if (v18 < 0)
  {
    __break(1u);
    goto LABEL_63;
  }
  v102  = (void **)(v62 & 0xFFFFFFFFFFFFFF8);
  unint64_t v103 = (unint64_t *)&unk_10090FFF0;
  if (v62 < 0) {
    v102  = (void **)v62;
  }
  v185  = v102;
  v186  = (void *)v24;
  while (1)
  {
    while (1)
    {
      uint64_t v110 = v192;
      uint64_t v111 = v193;
      v112  = v194;
      v113  = (uint64_t)v189;
      sub_1000E17A8(&v190, v192, v193, v194, (uint64_t)v189, v103, (uint64_t)REMAssignment_ptr, (uint64_t (*)())sub_1003074AC);
      v115  = v114;
      v116  = v103;
      v117  = v190;
      v118  = [v190 objectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v188) {
        break;
      }
      sub_1000E1454(v110, v111, v112, v113, v116, (uint64_t)REMAssignment_ptr, (void (*)())sub_1003074AC);
      uint64_t v105 = v104;
      uint64_t v107 = v106;
      char v109 = v108;
      sub_1000E4EA4(v110, v111, v112);
      v192  = v105;
      v193  = v107;
      v194  = v109 & 1;
      uint64_t v6 = v186;
      id v28 = v187;
      unint64_t v103 = v116;
      if (!--v18) {
        goto LABEL_47;
      }
    }
    if ((v112 & 1) == 0) {
      break;
    }
    v119  = __CocoaDictionary.Index.handleBitPattern.getter();
    uint64_t v6 = v186;
    unint64_t v103 = v116;
    if (v119) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    id v28 = v187;
    sub_100094134(&qword_10090A418);
    v120  = (void (*)(id *, void))Dictionary.Index._asCocoa.modify();
    __CocoaDictionary.formIndex(after:isUnique:)();
    v120(&v190, 0);
    if (!--v18)
    {
LABEL_47:
      sub_1000E4EA4(v192, v193, v194);
      v121  = v195;
      swift_bridgeObjectRelease();
      goto LABEL_50;
    }
  }
  __break(1u);
LABEL_67:
  __break(1u);
}

void sub_1000E0864(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSObject *a5)
{
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (uint64_t *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v14 = *(void **)(a2 + 72);
  *id v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(a2)  = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((a2 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_4:
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E2DC(v16, (uint64_t)qword_10090A060);
    id v17 = a3;
    swift_errorRetain();
    id v18 = v17;
    swift_errorRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      id v36 = a5;
      uint64_t v23 = (void *)v22;
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315650;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v38 = sub_1000C51B8(v24, v25, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v21 + 12)  = 2114;
      id v26 = [v18 objectID];
      uint64_t v38 = (uint64_t)v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v26;

      *(_WORD *)(v21 + 22)  = 2048;
      uint64_t v38 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAssignmentNotificationEngine: Unable to post Assignment notification {error: %s, listID: %{public}@, count: %ld}", (uint8_t *)v21, 0x20u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      a5  = v36;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_13;
  }
  if (a1)
  {
    uint64_t v37 = a4;
    swift_errorRetain();
    if (qword_100906E98 == -1) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10008E2DC(v27, (uint64_t)qword_10090A060);
  id v28 = a3;
  id v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    id v32 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 138543618;
    id v33 = [v28 objectID];
    uint64_t v39 = (uint64_t)v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v32 = v33;

    *(_WORD *)(v31 + 12)  = 2048;
    uint64_t v39 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "RDAssignmentNotificationEngine: Posted Assignment notification {listID: %{public}@, count: %ld}", (uint8_t *)v31, 0x16u);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v29 = v28;
  }

  type metadata accessor for Analytics();
  sub_100094134((uint64_t *)&unk_10090A420);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_100776E40;
  *(void *)(inited + 32)  = 0x696669746E656449;
  *(void *)(inited + 40)  = 0xEA00000000007265;
  sub_1000963CC(0, (unint64_t *)&unk_100910040);
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = NSString.init(stringLiteral:)();
  sub_1002ED104(inited);
  static Analytics.postEvent(_:payload:duration:)();
  swift_bridgeObjectRelease();
LABEL_13:
  dispatch_group_leave(a5);
}

void sub_1000E0E4C(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090A060);
    id v5 = a3;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v6 = v5;
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315650;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v10 = String.init<A>(describing:)();
      sub_1000C51B8(v10, v11, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v9 + 12)  = 2080;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v12 = Array.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v12, v14, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 22)  = 2080;
      id v15 = [v6 actionIdentifier];
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      sub_1000C51B8(v16, v18, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "RDAssignmentNotificationEngine: Save error. Failed to save updates from notification response {error: %s , reminderIDs: %s, actionIdentifier: %s}", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E2DC(v19, (uint64_t)qword_10090A060);
    id v20 = a3;
    swift_bridgeObjectRetain_n();
    id v31 = v20;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      id v24 = [v31 actionIdentifier];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      sub_1000C51B8(v25, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12)  = 2080;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v28 = Array.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v28, v30, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "RDAssignmentNotificationEngine: Updated reminder successfully. {actionIdentifier: %s, reminderIDs: %s}", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void sub_1000E13D0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000E143C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t a6)
{
  return sub_1000E3E48(a2, a3, a4, a5, a6);
}

void sub_1000E1454(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, void (*a7)())
{
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }
    else if ((*(void *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1))
    {
      if (*(_DWORD *)(a4 + 36) == a2)
      {
        _HashTable.occupiedBucket(after:)();
        return;
      }
      goto LABEL_12;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (__CocoaDictionary.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  __CocoaDictionary.Index.key.getter();
  sub_1000E4EB0(a1, a2, 1);
  sub_1000963CC(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
  a7();
  char v12 = v11;

  if (v12)
  {
    __CocoaDictionary.Index.dictionary.getter();
    __CocoaDictionary.index(after:)();
    sub_1000E4EA4(a1, a2, 1);
    swift_unknownObjectRelease();
    return;
  }
LABEL_14:
  __break(1u);
}

void sub_1000E1604(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_1000E1634(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1000E16BC(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0) {
    return __CocoaDictionary.startIndex.getter();
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0;
    return __clz(__rbit64(v2)) + v3;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v1 = 1 << v5;
  if (v6 < 7) {
    return v1;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = 64;
    return __clz(__rbit64(v2)) + v3;
  }
  unint64_t v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v3 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v2 = v10;
    --v8;
    v3 += 64;
    if (v10) {
      return __clz(__rbit64(v2)) + v3;
    }
  }
  return v1;
}

void sub_1000E1780(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
}

void sub_1000E17A8(void *a1, uint64_t a2, int a3, char a4, uint64_t a5, unint64_t *a6, uint64_t a7, uint64_t (*a8)())
{
  uint64_t v10 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if (a4)
    {
      __CocoaDictionary.lookup(_:)();
      sub_1000963CC(0, a6);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_1000963CC(0, &qword_1009168E0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1  = v18;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if (a4)
  {
LABEL_10:
    if (__CocoaDictionary.Index.age.getter() == *(_DWORD *)(a5 + 36))
    {
      __CocoaDictionary.Index.key.getter();
      sub_1000963CC(0, a6);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      uint64_t v10 = a8();
      char v14 = v13;

      if (v14) {
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  id v15 = *(void **)(*(void *)(a5 + 48) + 8 * v10);
  uint64_t v16 = *(void **)(*(void *)(a5 + 56) + 8 * v10);
  *a1  = v16;
  v15;
  id v17 = v16;
}

void *sub_1000E19DC(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    uint64_t v5 = *(void *)(*(void *)(a5 + 48) + 16 * a2);
    unsigned int v6 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v6;
    swift_bridgeObjectRetain();
    id v7 = v6;
    return (void *)v5;
  }
LABEL_8:
  __break(1u);
  return result;
}

void sub_1000E1A6C(void *a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  unint64_t v6 = a2;
  if ((a5 & 0xC000000000000001) != 0)
  {
    if (a4)
    {
      __CocoaDictionary.lookup(_:)();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      sub_1000963CC(0, (unint64_t *)&unk_10090A3D8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1  = v13;
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_18;
  }
  if (a4)
  {
LABEL_10:
    if (__CocoaDictionary.Index.age.getter() == *(_DWORD *)(a5 + 36))
    {
      __CocoaDictionary.Index.key.getter();
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      unint64_t v6 = sub_100306FE8((uint64_t)v13);
      char v9 = v8;

      if (v9) {
        goto LABEL_12;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (((*(void *)(a5 + 8 * ((unint64_t)a2 >> 6) + 64) >> a2) & 1) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (*(_DWORD *)(a5 + 36) != a3)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_12:
  uint64_t v10 = *(void **)(*(void *)(a5 + 48) + 8 * v6);
  char v11 = *(void **)(*(void *)(a5 + 56) + 8 * v6);
  *a1  = v11;
  v10;
  id v12 = v11;
}

void sub_1000E1C98(unint64_t a1, unint64_t a2)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    unint64_t v31 = 0;
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v3 = ~v6;
    unint64_t v31 = a1 + 64;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 64);
    unint64_t v5 = a1;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  int64_t v30 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v33 = a2 & 0xFFFFFFFFFFFFFF8;
  unint64_t v35 = a2 & 0xC000000000000001;
  uint64_t v10 = &selRef_willSave;
  unint64_t v32 = v5;
  while (1)
  {
    if ((v5 & 0x8000000000000000) != 0)
    {
      if (!__CocoaDictionary.Iterator.nextKey()()) {
        goto LABEL_48;
      }
      sub_1000963CC(0, (unint64_t *)&unk_10090FFF0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      id v14 = v37;
      uint64_t v13 = v9;
      uint64_t v11 = v4;
      if (!v37) {
        goto LABEL_48;
      }
      goto LABEL_32;
    }
    if (!v4) {
      break;
    }
    uint64_t v11 = (v4 - 1) & v4;
    unint64_t v12 = __clz(__rbit64(v4)) | (v9 << 6);
    uint64_t v13 = v9;
LABEL_31:
    id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_48;
    }
LABEL_32:
    unint64_t v18 = v14;
    if ([v14 v10[112]])
    {

      uint64_t v9 = v13;
      unint64_t v4 = v11;
    }
    else
    {
      id v36 = v18;
      unint64_t v34 = v11;
      if (a2 >> 62)
      {
        id v29 = v18;
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        if (v19) {
          goto LABEL_35;
        }
LABEL_42:

        swift_bridgeObjectRelease();
        unint64_t v4 = v34;
        uint64_t v9 = v13;
        unint64_t v5 = v32;
        uint64_t v10 = &selRef_willSave;
      }
      else
      {
        uint64_t v19 = *(void *)(v33 + 16);
        id v20 = v18;
        swift_bridgeObjectRetain();
        if (!v19) {
          goto LABEL_42;
        }
LABEL_35:
        sub_1000963CC(0, (unint64_t *)&qword_10090C120);
        uint64_t v21 = 4;
        while (1)
        {
          if (v35) {
            id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v22 = *(id *)(a2 + 8 * v21);
          }
          uint64_t v23 = v22;
          uint64_t v24 = v21 - 3;
          if (__OFADD__(v21 - 4, 1))
          {
            __break(1u);
            goto LABEL_50;
          }
          unint64_t v25 = a2;
          id v26 = [v22 objectID];
          id v27 = [v36 originatorID];
          char v28 = static NSObject.== infix(_:_:)();

          if (v28) {
            break;
          }

          ++v21;
          a2  = v25;
          if (v24 == v19) {
            goto LABEL_42;
          }
        }

        a2  = v25;
        swift_bridgeObjectRelease();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        unint64_t v5 = v32;
        uint64_t v10 = &selRef_willSave;
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v9 = v13;
        unint64_t v4 = v34;
      }
    }
  }
  int64_t v15 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v15 >= v30) {
      goto LABEL_48;
    }
    unint64_t v16 = *(void *)(v31 + 8 * v15);
    uint64_t v13 = v9 + 1;
    if (!v16)
    {
      uint64_t v13 = v9 + 2;
      if (v9 + 2 >= v30) {
        goto LABEL_48;
      }
      unint64_t v16 = *(void *)(v31 + 8 * v13);
      if (!v16)
      {
        uint64_t v13 = v9 + 3;
        if (v9 + 3 >= v30) {
          goto LABEL_48;
        }
        unint64_t v16 = *(void *)(v31 + 8 * v13);
        if (!v16)
        {
          uint64_t v13 = v9 + 4;
          if (v9 + 4 >= v30) {
            goto LABEL_48;
          }
          unint64_t v16 = *(void *)(v31 + 8 * v13);
          if (!v16)
          {
            uint64_t v13 = v9 + 5;
            if (v9 + 5 >= v30) {
              goto LABEL_48;
            }
            unint64_t v16 = *(void *)(v31 + 8 * v13);
            if (!v16)
            {
              uint64_t v17 = v9 + 6;
              while (v30 != v17)
              {
                unint64_t v16 = *(void *)(v31 + 8 * v17++);
                if (v16)
                {
                  uint64_t v13 = v17 - 1;
                  goto LABEL_30;
                }
              }
LABEL_48:
              sub_1000C1AF8();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
    goto LABEL_31;
  }
LABEL_50:
  __break(1u);
}

void *sub_1000E2104(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      uint64_t v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      uint64_t v8 = v3;
      id v9 = [v5 objectID];
      id v10 = [a2 originatorID];
      char v11 = static NSObject.== infix(_:_:)();

      if (v11)
      {
        swift_bridgeObjectRelease();
        return v6;
      }

      ++v4;
      uint64_t v3 = v8;
      if (v7 == v8) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000E2290(void *a1, id a2)
{
  id v4 = [a2 list];
  if ([a1 isOriginatorNullified])
  {
LABEL_11:

    return 0;
  }
  id v5 = [v4 shareeContext];
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = v5;
  id v7 = [v5 sharees];

  sub_1000963CC(0, &qword_10090A3E8);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v9 = a1;
  id v10 = sub_1000E2104(v8, v9);
  swift_bridgeObjectRelease();

  if (!v10)
  {
LABEL_6:
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E2DC(v14, (uint64_t)qword_10090A060);
    id v15 = a1;
    id v16 = a2;
    id v17 = v15;
    id v18 = v16;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v37 = (void *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138543618;
      id v22 = [v18 remObjectID];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v22;

      *(_WORD *)(v21 + 12)  = 2082;
      id v23 = [v17 description];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      sub_1000C51B8(v24, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "RDAssignmentNotificationEngine: Couldn't match the sharee object of the originator and it is not nullified {reminderID: %{public}@, assignment: %{public}s}", (uint8_t *)v21, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_11;
  }
  id v11 = [v10 shortName];
  if (!v11)
  {
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E2DC(v28, (uint64_t)qword_10090A060);
    id v29 = v9;
    int64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)unint64_t v32 = 136446210;
      id v33 = [v29 description];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;

      sub_1000C51B8(v34, v36, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "RDAssignmentNotificationEngine: The originator has absolutely no hint of how to display a formatted name... {assignment: %{public}s}", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  unint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v13;
}

id sub_1000E27C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    if (a5 == 1 && a6 == 1)
    {
      swift_bridgeObjectRetain();
      id v13 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v14 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v45 = a1;
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16)  = xmmword_100776E40;
      *(void *)(v15 + 56)  = &type metadata for String;
      unint64_t v16 = sub_1000C5B38();
      *(void *)(v15 + 64)  = v16;
      *(void *)(v15 + 32)  = a7;
      *(void *)(v15 + 40)  = a8;
      id v17 = (id)static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16)  = xmmword_100776E80;
      *(void *)(v18 + 56)  = &type metadata for String;
      *(void *)(v18 + 64)  = v16;
      *(void *)(v18 + 32)  = a3;
      *(void *)(v18 + 40)  = a4;
      *(void *)(v18 + 96)  = &type metadata for String;
      *(void *)(v18 + 104)  = v16;
      *(void *)(v18 + 72)  = v45;
      *(void *)(v18 + 80)  = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_15:
      static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if (a5 >= 2 && a6 == 1)
    {
      swift_bridgeObjectRetain();
      id v24 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v25 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v26 = a1;
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16)  = xmmword_100776E80;
      *(void *)(v27 + 56)  = &type metadata for String;
      unint64_t v28 = sub_1000C5B38();
      *(void *)(v27 + 32)  = a7;
      *(void *)(v27 + 40)  = a8;
      *(void *)(v27 + 96)  = &type metadata for Int;
      *(void *)(v27 + 104)  = &protocol witness table for Int;
      *(void *)(v27 + 64)  = v28;
      *(void *)(v27 + 72)  = a5;
      id v17 = (id)static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16)  = xmmword_100776E40;
      *(void *)(v29 + 56)  = &type metadata for String;
      *(void *)(v29 + 64)  = v28;
      *(void *)(v29 + 32)  = v26;
      *(void *)(v29 + 40)  = a2;
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    uint64_t v46 = a1;
    if (a5 >= 2 && a6 >= 2) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v46 = a1;
    if (a5 >= 2 && a6 >= 2) {
      goto LABEL_14;
    }
    if (a5 == 1)
    {
      id v20 = (id)_REMGetLocalizedString();
      id v17 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v21 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16)  = xmmword_100776E80;
      *(void *)(v22 + 56)  = &type metadata for String;
      unint64_t v23 = sub_1000C5B38();
      *(void *)(v22 + 32)  = a3;
      *(void *)(v22 + 40)  = a4;
      *(void *)(v22 + 96)  = &type metadata for String;
      *(void *)(v22 + 104)  = v23;
      *(void *)(v22 + 64)  = v23;
      *(void *)(v22 + 72)  = v46;
      *(void *)(v22 + 80)  = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    if (a5 >= 2)
    {
LABEL_14:
      id v30 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v31 = (id)_REMGetLocalizedString();
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100094134((uint64_t *)&unk_10090A430);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16)  = xmmword_100776E40;
      *(void *)(v32 + 56)  = &type metadata for Int;
      *(void *)(v32 + 64)  = &protocol witness table for Int;
      *(void *)(v32 + 32)  = a5;
      id v17 = (id)static String.localizedStringWithFormat(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16)  = xmmword_100776E40;
      *(void *)(v33 + 56)  = &type metadata for String;
      *(void *)(v33 + 64)  = sub_1000C5B38();
      *(void *)(v33 + 32)  = v46;
      *(void *)(v33 + 40)  = a2;
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  uint64_t v35 = a5 | a6;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100094134(&qword_100908170);
  if (v35)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100776E40;
    *(void *)(inited + 32)  = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40)  = v40;
    *(void *)(inited + 72)  = &type metadata for String;
    unint64_t v38 = 0xD00000000000003CLL;
    uint64_t v39 = "Unknown combination of number of assignments and orignators.";
  }
  else
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16)  = xmmword_100776E40;
    *(void *)(inited + 32)  = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40)  = v37;
    *(void *)(inited + 72)  = &type metadata for String;
    unint64_t v38 = 0xD000000000000035;
    uint64_t v39 = "You must have at least 1 assignment and 1 originator.";
  }
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v38;
  *(void *)(inited + 56)  = (unint64_t)(v39 - 32) | 0x8000000000000000;
  sub_1001805C0(inited);
  id v17 = objc_allocWithZone((Class)NSError);
  NSString v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 initWithDomain:v41 code:-1 userInfo:isa];

  swift_willThrow();
  return v17;
}

void sub_1000E2EA8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7 = a2;
  id v8 = a3;
  id v30 = [v8 list];
  id v9 = [v8 titleAsString];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0xE000000000000000;
  }
  uint64_t v14 = sub_1000E2290(v7, v8);
  uint64_t v16 = v15;
  id v17 = [v30 groceryContext];
  unint64_t v28 = v7;
  if (v17)
  {
    uint64_t v18 = v17;
    unsigned __int8 v19 = [v17 shouldCategorizeGroceryItems];
  }
  else
  {
    unsigned __int8 v19 = 0;
  }
  id v20 = [v30 name];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  LOBYTE(v26)  = v19;
  sub_1000E27C4(v21, v23, v11, v13, a4, a5, v14, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setTitle:v24, v26];

  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setBody:v25];
}

void sub_1000E32B8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i  = v12 | (v11 << 6); ; i  = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = 8 * i;
    uint64_t v18 = *(void **)(*(void *)(a1 + 56) + v17);
    v21[0]  = *(id *)(*(void *)(a1 + 48) + v17);
    v21[1]  = v18;
    id v19 = v21[0];
    swift_bridgeObjectRetain();
    sub_1000DF3CC((uint64_t)v21, a2, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();

    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v22) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v22) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v22) {
        goto LABEL_26;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v20 = v11 + 4;
      if (v11 + 4 >= v22)
      {
LABEL_26:
        swift_release();
        return;
      }
      unint64_t v15 = *(void *)(v7 + 8 * v20);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v10 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v22) {
      goto LABEL_26;
    }
    unint64_t v15 = *(void *)(v7 + 8 * v11);
    ++v20;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1000E34A0(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8 = a1;
  uint64_t v21 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      unint64_t v10 = 0;
      uint64_t v18 = v8 & 0xFFFFFFFFFFFFFF8;
      unint64_t v19 = v8 & 0xC000000000000001;
      uint64_t v16 = a2;
      unint64_t v17 = v8;
      while (v19)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v12 = v11;
        unint64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_17;
        }
        id v20 = v11;
        BOOL v14 = sub_1000DE960(&v20, a2, a3, a4);
        if (v4)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return a4;
        }
        if (v14)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          a2  = v16;
          unint64_t v8 = v17;
        }
        else
        {
        }
        ++v10;
        if (v13 == v9)
        {
          a4  = v21;
          goto LABEL_20;
        }
      }
      if (v10 < *(void *)(v18 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_19;
      }
    }
    id v11 = *(id *)(v8 + 8 * v10 + 32);
    goto LABEL_9;
  }
LABEL_19:
  a4  = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return a4;
}

void sub_1000E3654(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v22 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v24 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v11) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i  = v13 | (v12 << 6); ; i  = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = 8 * i;
    unint64_t v19 = *(void **)(*(void *)(a1 + 56) + v18);
    v23[0]  = *(id *)(*(void *)(a1 + 48) + v18);
    v23[1]  = v19;
    id v20 = v23[0];
    swift_bridgeObjectRetain();
    sub_1000DDDD8((uint64_t)v23, a2, a3, a4);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();

      return;
    }
    swift_bridgeObjectRelease();

    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v24) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v24) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v24) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v24) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v17);
      if (v16)
      {
LABEL_14:
        int64_t v12 = v17;
        goto LABEL_15;
      }
      int64_t v21 = v12 + 4;
      if (v12 + 4 >= v24)
      {
LABEL_26:
        swift_release();
        return;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v21);
      v12 += 4;
      if (!v16) {
        break;
      }
    }
LABEL_15:
    unint64_t v11 = (v16 - 1) & v16;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v24) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v12);
    ++v21;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
}

void *sub_1000E3860(unint64_t a1, uint64_t a2, void *a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v5) {
      break;
    }
    unint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      unint64_t v11 = v8;
      sub_1000DC46C(&v11, a3, &v12);

      if (v3) {
        return (void *)swift_release();
      }
      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v5 == v7) {
        return v13;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1000E39D0(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  unint64_t v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v3 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    unint64_t v28 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_1000E16BC(v2);
    NSString v25 = result;
    uint64_t v26 = v5;
    char v27 = v6 & 1;
    if (v3 < 0)
    {
      __break(1u);
LABEL_17:
      __break(1u);
    }
    else
    {
      uint64_t v21 = v2;
      do
      {
        uint64_t v13 = (uint64_t)v25;
        uint64_t v14 = v26;
        char v15 = v27;
        sub_1000E17A8(v24, (uint64_t)v25, v26, v27, v2, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (uint64_t (*)())sub_100306FE8);
        int64_t v17 = v16;
        uint64_t v18 = (void *)v24[0];
        id v19 = [a2 updateReminder:v24[0]];

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        uint64_t result = (void *)specialized ContiguousArray._endMutation()();
        if (v23)
        {
          uint64_t v2 = v21;
          if ((v15 & 1) == 0) {
            goto LABEL_17;
          }
          if (__CocoaDictionary.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_100094134(&qword_10090A3D0);
          id v20 = (void (*)(void *, void))Dictionary.Index._asCocoa.modify();
          __CocoaDictionary.formIndex(after:isUnique:)();
          v20(v24, 0);
        }
        else
        {
          uint64_t v2 = v21;
          sub_1000E1454(v13, v14, v15, v21, (unint64_t *)&qword_10090A3B0, (uint64_t)REMObjectID_ptr, (void (*)())sub_100306FE8);
          uint64_t v8 = v7;
          uint64_t v10 = v9;
          char v12 = v11;
          sub_1000E4EA4(v13, v14, v15);
          NSString v25 = (void *)v8;
          uint64_t v26 = v10;
          char v27 = v12 & 1;
        }
        --v3;
      }
      while (v3);
      sub_1000E4EA4((uint64_t)v25, v26, v27);
      return v28;
    }
  }
  return result;
}

void sub_1000E3C44()
{
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090A060);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    sub_100094134((uint64_t *)&unk_10091DD70);
    uint64_t v4 = String.init<A>(describing:)();
    sub_1000C51B8(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RDAssignmentNotificationEngine: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.start}", v8, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000E3E48(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v98 = a5;
  unint64_t v99 = a4;
  uint64_t v95 = a3;
  uint64_t v7 = type metadata accessor for RDUserNotificationAction();
  uint64_t v96 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  v94  = (os_log_t)((char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  os_log_t v11 = (os_log_t)((char *)v90 - v10);
  uint64_t v12 = type metadata accessor for RDUserNotificationType();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v97 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)v90 - v17;
  __chkstk_darwin(v16);
  id v20 = (id *)((char *)v90 - v19);
  id v22 = (id)(v13 + 16);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21((char *)v90 - v19, a2, v12);
  int v23 = (*(uint64_t (**)(id *, uint64_t))(v13 + 88))(v20, v12);
  if (v23 == enum case for RDUserNotificationType.reminderAlarm(_:)
    || v23 == enum case for RDUserNotificationType.todayNotificationForSingleReminder(_:))
  {
LABEL_3:
    (*(void (**)(id *, uint64_t))(v13 + 8))(v20, v12);
LABEL_4:
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10090A060);
    v21(v18, a2, v12);
    NSString v25 = a1;
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v95 = (void *)swift_slowAlloc();
      uint64_t v96 = swift_slowAlloc();
      aBlock[0]  = (id)v96;
      *(_DWORD *)uint64_t v28 = 136315394;
      v94  = v26;
      v21(v97, (uint64_t)v18, v12);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v100 = sub_1000C51B8(v29, v30, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
      *(_WORD *)(v28 + 12)  = 2112;
      uint64_t v100 = (uint64_t)v25;
      id v31 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v95 = v25;

      os_log_t v32 = v94;
      _os_log_impl((void *)&_mh_execute_header, v94, v27, "RDAssignmentNotificationEngine doesn't expect to receive actions of this type. {type: %s, response: %@}", (uint8_t *)v28, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);

LABEL_11:
    goto LABEL_12;
  }
  if (v23 == enum case for RDUserNotificationType.caldavSharedList(_:))
  {
    (*(void (**)(id *, uint64_t))(v13 + 96))(v20, v12);

    goto LABEL_4;
  }
  if (v23 == enum case for RDUserNotificationType.assignmentNotification(_:))
  {
    (*(void (**)(id *, uint64_t))(v13 + 96))(v20, v12);
    id v22 = *v20;
    if (qword_100906E98 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v40 = sub_10008E2DC(v39, (uint64_t)qword_10090A060);
    id v41 = a1;
    swift_bridgeObjectRetain_n();
    uint64_t v42 = (char *)v41;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    BOOL v45 = os_log_type_enabled(v43, v44);
    id v97 = v42;
    if (v45)
    {
      uint64_t v46 = swift_slowAlloc();
      char v91 = (void *)swift_slowAlloc();
      aBlock[0]  = v91;
      *(_DWORD *)uint64_t v46 = 136315394;
      v90[1]  = v46 + 4;
      id v47 = [v42 actionIdentifier];
      uint64_t v92 = v40;
      id v48 = v22;
      unint64_t v49 = v42;
      id v50 = v47;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v53 = v52;

      uint64_t v100 = sub_1000C51B8(v51, v53, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12)  = 2080;
      sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
      swift_bridgeObjectRetain();
      uint64_t v54 = Array.description.getter();
      unint64_t v56 = v55;
      swift_bridgeObjectRelease();
      uint64_t v100 = sub_1000C51B8(v54, v56, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v22 = v48;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "RDAssignmentNotificationEngine: Processing assignment notification response {actionIdentifier:%s, reminderIDs: %s}", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v12 = (uint64_t)v95;
    uint64_t v57 = v96;
    id v20 = *(id **)(v96 + 16);
    ((void (*)(os_log_t, void *, uint64_t))v20)(v11, v95, v7);
    int v58 = (*(uint64_t (**)(os_log_t, uint64_t))(v57 + 88))(v11, v7);
    os_log_t v11 = v94;
    if (v58 == enum case for RDUserNotificationAction.defaultDismiss(_:)
      || v58 == enum case for RDUserNotificationAction.debugDismiss(_:)
      || v58 == enum case for RDUserNotificationAction.markAsCompleted(_:)
      || v58 == enum case for RDUserNotificationAction.snoozeForOneHour(_:)
      || v58 == enum case for RDUserNotificationAction.snoozeForOneDay(_:)
      || v58 == enum case for RDUserNotificationAction.snoozeToNextThirds(_:)
      || v58 == enum case for RDUserNotificationAction.snoozeToNextWeekend(_:)
      || v58 == enum case for RDUserNotificationAction.addToReminders(_:))
    {
      goto LABEL_57;
    }
    if (v58 == enum case for RDUserNotificationAction.viewAssignmentInList(_:))
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else
  {
    if (v23 == enum case for RDUserNotificationType.sharedListAddedReminderNotification(_:))
    {
      (*(void (**)(id *, uint64_t))(v13 + 96))(v20, v12);
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if (v23 == enum case for RDUserNotificationType.dueDateDeltaAlarm(_:)) {
      goto LABEL_3;
    }
    if (v23 == enum case for RDUserNotificationType.todayNotification(_:)
      || v23 == enum case for RDUserNotificationType.todayNotificationBadge(_:)
      || v23 == enum case for RDUserNotificationType.beforeFirstUnlock(_:))
    {
      goto LABEL_4;
    }
    int v58 = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
  }
  if (v58 == enum case for RDUserNotificationAction.declineAssignment(_:))
  {
    id v61 = [objc_allocWithZone((Class)REMStore) initWithDaemonController:*(void *)(v93 + 104)];
    sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
    isa  = Array._bridgeToObjectiveC()().super.isa;
    aBlock[0]  = 0;
    id v63 = [v61 fetchRemindersWithObjectIDs:isa error:aBlock];

    id v64 = aBlock[0];
    if (!v63)
    {
      id v77 = aBlock[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      NSString v25 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v78))
      {
        uint64_t v79 = swift_slowAlloc();
        aBlock[0]  = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v79 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v80 = Array.description.getter();
        unint64_t v82 = v81;
        swift_bridgeObjectRelease();
        uint64_t v100 = sub_1000C51B8(v80, v82, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v79 + 12)  = 2080;
        swift_getErrorValue();
        v83  = Error.localizedDescription.getter();
        uint64_t v100 = sub_1000C51B8(v83, v84, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v78, "RDAssignmentNotificationEngine: Error trying to retrieve reminder {reminderIDs: %s, error: %s}", (uint8_t *)v79, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        goto LABEL_12;
      }
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_11;
    }
    sub_1000963CC(0, &qword_1009168E0);
    sub_1000E4F40((unint64_t *)&qword_10090A3C0, (unint64_t *)&qword_10090A3B0);
    uint64_t v65 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v66 = v64;

    os_log_t v32 = (os_log_t)[objc_allocWithZone((Class)REMSaveRequest) initWithStore:v61];
    unint64_t v67 = (unint64_t)sub_1000E39D0(v65, v32);
    swift_bridgeObjectRelease();
    v90[0]  = v22;
    if (v67 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v68 = _CocoaArrayWrapper.endIndex.getter();
      if (v68) {
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v68 = *(void *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v68)
      {
LABEL_50:
        if (v68 < 1) {
          __break(1u);
        }
        uint64_t v69 = 0;
        do
        {
          if ((v67 & 0xC000000000000001) != 0) {
            id v70 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v70 = *(id *)(v67 + 8 * v69 + 32);
          }
          id v71 = v70;
          ++v69;
          id v72 = [v70 assignmentContext:v90[0]];
          [v72 removeAllAssignments];
        }
        while (v68 != v69);
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v85 = *(void *)(v93 + 72);
    uint64_t v86 = (void *)swift_allocObject();
    v87  = v97;
    v86[2]  = v90[0];
    v86[3]  = v87;
    aBlock[4]  = sub_1000E4E84;
    aBlock[5]  = v86;
    aBlock[0]  = _NSConcreteStackBlock;
    aBlock[1]  = (id)1107296256;
    aBlock[2]  = sub_1000E13D0;
    void aBlock[3] = &unk_1008B8EB0;
    uint64_t v88 = _Block_copy(aBlock);
    id v89 = v87;
    swift_release();
    [v32 saveWithQueue:v85 completion:v88];
    _Block_release(v88);

    goto LABEL_9;
  }
  if (v58 != enum case for RDUserNotificationAction.viewRemindersInList(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  ((void (*)(os_log_t, uint64_t, uint64_t))v20)(v11, v12, v7);
  os_log_t v32 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v32, v73))
  {
    (*(void (**)(os_log_t, uint64_t))(v96 + 8))(v11, v7);
    goto LABEL_9;
  }
  id v74 = (uint8_t *)swift_slowAlloc();
  aBlock[0]  = (id)swift_slowAlloc();
  *(_DWORD *)id v74 = 136315138;
  uint64_t v75 = RDUserNotificationAction.rawValue.getter();
  uint64_t v100 = sub_1000C51B8(v75, v76, (uint64_t *)aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  (*(void (**)(os_log_t, uint64_t))(v96 + 8))(v11, v7);
  _os_log_impl((void *)&_mh_execute_header, v32, v73, "RDAssignmentNotificationEngine: Unexpected action %s for notification type .assignmentNotification", v74, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_8:
  swift_slowDealloc();
LABEL_9:

LABEL_12:
  uint64_t v33 = v99;
  if (qword_100906E98 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_10008E2DC(v34, (uint64_t)qword_10090A060);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "RDAssignmentNotificationEngine: Completing action handler by calling completionHandler now.", v37, 2u);
    swift_slowDealloc();
  }

  return v33();
}

uint64_t sub_1000E4E44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000E4E84(uint64_t a1)
{
  sub_1000E0E4C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000E4E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000E4E9C()
{
  return swift_release();
}

uint64_t sub_1000E4EA4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000E4EB0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1000E4EBC()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E4EFC()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1) {
    return v1(1);
  }
  return result;
}

uint64_t sub_1000E4F30(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000E4F40(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000963CC(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000E4F84()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000E4FCC(uint64_t a1)
{
  sub_1000E0864(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40));
}

unint64_t sub_1000E4FD8()
{
  unint64_t result = qword_10090C000;
  if (!qword_10090C000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090C000);
  }
  return result;
}

uint64_t sub_1000E502C()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E5074()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 24);
  if (v1) {
    return v1(1);
  }
  return result;
}

uint64_t sub_1000E50A8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E50E0()
{
}

uint64_t sub_1000E50E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090A4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090A4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E51B8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000E5200()
{
  sub_1000DAC2C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000E520C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E5248()
{
}

uint64_t sub_1000E5250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_10090A4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E52B8(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_10090A4B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E5318(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RDStoreControllerNotificationCenter.Token(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E537C()
{
  return sub_100401E78() & 1;
}

uint64_t sub_1000E53B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090A4D0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090A4D0);
  if (qword_1009077E0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_1009423E8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000E5478(uint64_t a1, double a2)
{
  uint64_t v5 = sub_100094134((uint64_t *)&unk_100917CC0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134(&qword_10090A7C0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  *(void *)(v2 + 16)  = a1;
  *(double *)(v2 + 24)  = a2;
  *(void *)(v2 + 32)  = 0;
  *(void *)(v2 + 40)  = 0;
  DoubleStacksQueue.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements, v11, v8);
  v14((uint64_t)v7, 1, 1, v13);
  uint64_t v15 = v2 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire;
  swift_beginAccess();
  sub_1000E6DD0((uint64_t)v7, v15);
  swift_endAccess();
  return v2;
}

uint64_t sub_1000E5674()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_measurements;
  uint64_t v2 = sub_100094134(&qword_10090A7C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1000966BC(v0 + OBJC_IVAR____TtCC7remindd12RDDebouncing10LoadFactor_lastFire, (uint64_t *)&unk_100917CC0);

  return swift_deallocClassInstance();
}

id sub_1000E5770()
{
  return sub_1000E6B38(type metadata accessor for RDDebouncing);
}

uint64_t type metadata accessor for RDDebouncing()
{
  return self;
}

uint64_t sub_1000E57AC()
{
  return type metadata accessor for RDDebouncing.LoadFactor();
}

uint64_t type metadata accessor for RDDebouncing.LoadFactor()
{
  uint64_t result = qword_10090A538;
  if (!qword_10090A538) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E5800()
{
  sub_1000E58E0();
  if (v0 <= 0x3F)
  {
    sub_1000E5938();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000E58E0()
{
  if (!qword_10090A548)
  {
    unint64_t v0 = type metadata accessor for DoubleStacksQueue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090A548);
    }
  }
}

void sub_1000E5938()
{
  if (!qword_10090A550)
  {
    type metadata accessor for DispatchTime();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10090A550);
    }
  }
}

uint64_t sub_1000E5994()
{
  return swift_initClassMetadata2();
}

void sub_1000E5A30()
{
}

uint64_t sub_1000E5A74()
{
  swift_release();
  sub_1000E6BB8(*(void *)(v0 + qword_10090A668), *(void *)(v0 + qword_10090A668 + 8), *(void *)(v0 + qword_10090A668 + 16), *(void *)(v0 + qword_10090A668 + 24), *(unsigned char *)(v0 + qword_10090A668 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000E5B28(uint64_t a1)
{
  swift_release();
  sub_1000E6BB8(*(void *)(a1 + qword_10090A668), *(void *)(a1 + qword_10090A668 + 8), *(void *)(a1 + qword_10090A668 + 16), *(void *)(a1 + qword_10090A668 + 24), *(unsigned char *)(a1 + qword_10090A668 + 32));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RDDebouncer()
{
  return sub_1000E6FBC();
}

uint64_t sub_1000E5CA0(double a1)
{
  return sub_1000E6648(&OBJC_IVAR____TtC7remindd21RDDebouncerWithNumber_debouncer, a1);
}

void sub_1000E5DBC(uint64_t a1, uint64_t a2)
{
  sub_1000E6EE8();
  sub_1000E6F28(&qword_100917D50, 255, (void (*)(uint64_t))sub_1000E6EE8);
  isa  = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

void sub_1000E5F68(char a1, uint64_t a2, uint64_t a3)
{
  sub_1000E6EE8();
  sub_1000E6F28(&qword_100917D50, 255, (void (*)(uint64_t))sub_1000E6EE8);
  isa  = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, void, objc_class *))(a3 + 16))(a3, a1 & 1, isa);
}

id sub_1000E6040()
{
  return sub_1000E6B38(type metadata accessor for RDDebouncerWithNumber);
}

uint64_t type metadata accessor for RDDebouncerWithNumber()
{
  return self;
}

uint64_t sub_1000E61C4(uint64_t a1)
{
  sub_1000E6E80(a1, (uint64_t)v6);
  if (!v7)
  {
    sub_1000966BC((uint64_t)v6, &qword_100908190);
    goto LABEL_11;
  }
  type metadata accessor for RDDebounceableCKDatabaseNotification();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    char v3 = 0;
    return v3 & 1;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_databaseScope) != *(void *)&v5[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_databaseScope])
  {

    goto LABEL_11;
  }
  if (*(void *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName) == *(void *)&v5[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName]
    && *(void *)(v1
                 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName
                 + 8) == *(void *)&v5[OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName
                                      + 8])
  {

    char v3 = 1;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v3 & 1;
}

uint64_t sub_1000E640C()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(55);
  v2._object  = (void *)0x80000001007C9400;
  v2._countAndFlagsBits  = 0xD000000000000010;
  String.append(_:)(v2);
  id v3 = (id)CKDatabaseScopeString();
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v7._countAndFlagsBits  = v4;
  v7._object  = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits  = 0xD000000000000023;
  v8._object  = (void *)0x80000001007C9420;
  String.append(_:)(v8);
  uint64_t v9 = v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName;
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC7remindd36RDDebounceableCKDatabaseNotification_subscriptionOwnerUserRecordName);
  os_log_t v11 = *(void **)(v9 + 8);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits  = v10;
  v12._object  = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0;
}

id sub_1000E654C()
{
  return sub_1000E6B38(type metadata accessor for RDDebounceableCKDatabaseNotification);
}

uint64_t type metadata accessor for RDDebounceableCKDatabaseNotification()
{
  return self;
}

uint64_t sub_1000E663C(double a1)
{
  return sub_1000E6648(&OBJC_IVAR____TtC7remindd37RDDebouncerWithCKDatabaseNotification_debouncer, a1);
}

uint64_t sub_1000E6648(void *a1, double a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void *)(v2 + *a1);
  uint64_t v10 = *(void **)(v9 + qword_10090A658);
  *Swift::String v8 = v10;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10)  = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v8, v5);
  if (v10)
  {
    uint64_t v13 = v9 + qword_10090A668;
    char v14 = *(unsigned char *)(v9 + qword_10090A668 + 33);
    uint64_t v15 = *(void *)(v9 + qword_10090A668);
    uint64_t v16 = *(void *)(v9 + qword_10090A668 + 8);
    uint64_t v17 = *(void *)(v9 + qword_10090A668 + 16);
    uint64_t v18 = *(void *)(v9 + qword_10090A668 + 24);
    char v19 = *(unsigned char *)(v9 + qword_10090A668 + 32);
    *(double *)uint64_t v13 = a2;
    *(void *)(v13 + 16)  = 0;
    *(void *)(v13 + 24)  = 0;
    *(void *)(v13 + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(unsigned char *)(v13 + 32)  = 0;
    *(unsigned char *)(v13 + 33)  = v14;
    return sub_1000E6BB8(v15, v16, v17, v18, v19);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000E68B4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RDDebounceableCKDatabaseNotification();
  sub_1000E6F28(&qword_100914630, v3, (void (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification);
  isa  = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

void sub_1000E6A50(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RDDebounceableCKDatabaseNotification();
  sub_1000E6F28(&qword_100914630, v5, (void (*)(uint64_t))type metadata accessor for RDDebounceableCKDatabaseNotification);
  isa  = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, void, objc_class *))(a3 + 16))(a3, a1 & 1, isa);
}

id sub_1000E6B20()
{
  return sub_1000E6B38(type metadata accessor for RDDebouncerWithCKDatabaseNotification);
}

id sub_1000E6B38(uint64_t (*a1)(void))
{
  v3.receiver  = v1;
  v3.super_class  = (Class)a1();
  [super dealloc];
}

uint64_t type metadata accessor for RDDebouncerWithCKDatabaseNotification()
{
  return self;
}

uint64_t sub_1000E6BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000E6BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1000E6BA4(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1  = v4;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v5;
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = v7;
  *(unsigned char *)(a1 + 32)  = v8;
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t assignWithCopy for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  sub_1000E6BA4(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1  = v4;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v5;
  *(void *)(a1 + 16)  = v6;
  *(void *)(a1 + 24)  = v7;
  *(unsigned char *)(a1 + 32)  = v8;
  sub_1000E6BB8(v9, v10, v11, v12, v13);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  return a1;
}

__n128 initializeWithTake for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32)  = *(_WORD *)(a2 + 32);
  *(__n128 *)a1  = result;
  *(_OWORD *)(a1 + 16)  = v3;
  return result;
}

uint64_t assignWithTake for RDDebouncing.Policy(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v10;
  *(unsigned char *)(a1 + 32)  = v4;
  sub_1000E6BB8(v5, v6, v7, v8, v9);
  *(unsigned char *)(a1 + 33)  = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDebouncing.Policy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDebouncing.Policy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(_WORD *)(result + 32)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32)  = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDDebouncing.Policy()
{
  return &type metadata for RDDebouncing.Policy;
}

uint64_t sub_1000E6DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100917CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E6E38()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E6E70(char a1, uint64_t a2)
{
  sub_1000E6A50(a1, a2, *(void *)(v2 + 16));
}

void sub_1000E6E78(uint64_t a1)
{
  sub_1000E68B4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000E6E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_100908190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000E6EE8()
{
  unint64_t result = qword_100909FB0;
  if (!qword_100909FB0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100909FB0);
  }
  return result;
}

uint64_t sub_1000E6F28(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000E6F7C(char a1, uint64_t a2)
{
  sub_1000E5F68(a1, a2, *(void *)(v2 + 16));
}

void sub_1000E6F84(uint64_t a1)
{
  sub_1000E5DBC(a1, *(void *)(v1 + 16));
}

void sub_1000E6F8C()
{
}

uint64_t sub_1000E6FBC()
{
  return swift_getGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for RDSavedAlarmTriggers(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1  = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s7remindd12RDDebouncingC6PolicyV8IntervalOwxx_0(uint64_t a1)
{
  return sub_1000E6BB8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1000E6BA4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1  = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  return a1;
}

uint64_t assignWithCopy for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1000E6BA4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1  = v3;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  *(void *)(a1 + 16)  = v5;
  *(void *)(a1 + 24)  = v6;
  *(unsigned char *)(a1 + 32)  = v7;
  sub_1000E6BB8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 initializeWithTake for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32)  = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1  = result;
  *(_OWORD *)(a1 + 16)  = v3;
  return result;
}

uint64_t assignWithTake for RDDebouncing.Policy.Interval(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1  = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16)  = v9;
  *(unsigned char *)(a1 + 32)  = v3;
  sub_1000E6BB8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RDDebouncing.Policy.Interval(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDDebouncing.Policy.Interval(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(unsigned char *)(result + 32)  = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33)  = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33)  = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32)  = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000E71FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1000E7204(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32)  = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for RDDebouncing.Policy.Interval()
{
  return &type metadata for RDDebouncing.Policy.Interval;
}

BOOL sub_1000E7230(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000E7248()
{
  Hasher._combine(_:)(*v0);
}

unint64_t sub_1000E7278()
{
  unint64_t result = 0x6769725465746164;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x54656C6369686576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E7328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E8FB0(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000E7350(unsigned char *a1@<X8>)
{
  *a1  = 4;
}

uint64_t sub_1000E735C(uint64_t a1)
{
  unint64_t v2 = sub_1000EB7AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7398(uint64_t a1)
{
  unint64_t v2 = sub_1000EB7AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E73D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a3;
  uint64_t v17 = a5;
  uint64_t v9 = sub_100094134(&qword_10090A8C8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1000EB7AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v19 = a2;
  char v18 = 0;
  sub_100094134(&qword_10090A868);
  sub_1000EBA4C(&qword_10090A8D0, &qword_10090A868, (void (*)(void))sub_1000EB950);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v13 = v17;
    uint64_t v19 = v16;
    char v18 = 1;
    sub_100094134(&qword_10090A880);
    sub_1000EBA4C(&qword_10090A8E0, &qword_10090A880, (void (*)(void))sub_1000EB9A4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = a4;
    char v18 = 2;
    sub_100094134(&qword_10090A898);
    sub_1000EBA4C(&qword_10090A8F0, &qword_10090A898, (void (*)(void))sub_1000EB9F8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v19 = v13;
    char v18 = 3;
    sub_100094134(&qword_10090A8B0);
    sub_1000EBA4C(&qword_10090A900, &qword_10090A8B0, (void (*)(void))sub_1000EBAB8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

unint64_t sub_1000E76F8(char a1)
{
  unint64_t result = 0x73736572646461;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4C746361746E6F63;
      break;
    case 2:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 3:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 4:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 5:
      unint64_t result = 0x614874694B70616DLL;
      break;
    case 6:
      unint64_t result = 0x74696D69786F7270;
      break;
    case 7:
      unint64_t result = 0x737569646172;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0x676E6974756F72;
      break;
    case 10:
      unint64_t result = 0x656C746974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000E786C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100094134(&qword_10090A828);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000C0DE0(a1, a1[3]);
  sub_1000EB5F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0]  = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v11[0]  = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0]  = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0]  = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0]  = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_1000EB69C(v3 + 64, (uint64_t)v12);
    sub_1000EB69C((uint64_t)v12, (uint64_t)v11);
    v10[15]  = 5;
    sub_1000EB704();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[0]  = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0]  = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0]  = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0]  = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[0]  = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000E7B5C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000E919C(a1);
  if (!v2)
  {
    *a2  = result;
    a2[1]  = v5;
    a2[2]  = v6;
    a2[3]  = v7;
  }
  return result;
}

uint64_t sub_1000E7B8C(void *a1)
{
  return sub_1000E73D4(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_1000E7BAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = (void *)a1[3];
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v6 = (void *)a2[3];
  if (!sub_1003508F4(*a1, *a2) || (sub_1003508F8(v2, v5) & 1) == 0 || !sub_1003508F4(v4, v7)) {
    return 0;
  }

  return sub_100350808(v3, v6);
}

unint64_t sub_1000E7C50()
{
  return 0xD000000000000010;
}

uint64_t sub_1000E7C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E95F4(a1, a2);
  *a3  = result & 1;
  return result;
}

void sub_1000E7C98(unsigned char *a1@<X8>)
{
  *a1  = 1;
}

uint64_t sub_1000E7CA4(uint64_t a1)
{
  unint64_t v2 = sub_1000EB758();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7CE0(uint64_t a1)
{
  unint64_t v2 = sub_1000EB758();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E7D1C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000E81A0(a1, &qword_10090A840, (void (*)(void))sub_1000EB758, a2);
}

uint64_t sub_1000E7D58(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8350(a1, a2, a3, &qword_10090A850, (void (*)(void))sub_1000EB758);
}

BOOL sub_1000E7D94(double *a1, double *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000E7DA8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000E7DF0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_1000E7E34()
{
  return sub_1000E76F8(*v0);
}

uint64_t sub_1000E7E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E967C(a1, a2);
  *a3  = result;
  return result;
}

void sub_1000E7E64(unsigned char *a1@<X8>)
{
  *a1  = 11;
}

uint64_t sub_1000E7E70(uint64_t a1)
{
  unint64_t v2 = sub_1000EB5F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E7EAC(uint64_t a1)
{
  unint64_t v2 = sub_1000EB5F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1000E7EE8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E9B34(a1, v8);
  if (!v2)
  {
    long long v5 = v8[7];
    *(_OWORD *)(a2 + 96)  = v8[6];
    *(_OWORD *)(a2 + 112)  = v5;
    *(_OWORD *)(a2 + 12_Block_object_dispose(&STACK[0x260], 8) = v8[8];
    long long v6 = v8[3];
    *(_OWORD *)(a2 + 32)  = v8[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x260], 8) = v6;
    long long v7 = v8[5];
    *(_OWORD *)(a2 + 64)  = v8[4];
    *(_OWORD *)(a2 + 80)  = v7;
    __n128 result = (__n128)v8[1];
    *(_OWORD *)a2  = v8[0];
    *(__n128 *)(a2 + 16)  = result;
  }
  return result;
}

uint64_t sub_1000E7F44(void *a1)
{
  return sub_1000E786C(a1);
}

uint64_t sub_1000E7F98(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v11[6]  = a1[6];
  v11[7]  = v2;
  v11[8]  = a1[8];
  long long v3 = a1[3];
  v11[2]  = a1[2];
  v11[3]  = v3;
  long long v4 = a1[5];
  void v11[4] = a1[4];
  void v11[5] = v4;
  long long v5 = a1[1];
  v11[0]  = *a1;
  v11[1]  = v5;
  long long v6 = a2[7];
  v12[6]  = a2[6];
  v12[7]  = v6;
  v12[8]  = a2[8];
  long long v7 = a2[3];
  v12[2]  = a2[2];
  v12[3]  = v7;
  long long v8 = a2[5];
  void v12[4] = a2[4];
  v12[5]  = v8;
  long long v9 = a2[1];
  v12[0]  = *a2;
  v12[1]  = v9;
  return sub_1000E8CF0((uint64_t)v11, (uint64_t)v12) & 1;
}

uint64_t sub_1000E801C()
{
  return 0x65746E49656D6974;
}

uint64_t sub_1000E803C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65746E49656D6974 && a2 == 0xEC0000006C617672)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1000E80EC(uint64_t a1)
{
  unint64_t v2 = sub_1000EB5A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8128(uint64_t a1)
{
  unint64_t v2 = sub_1000EB5A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E8164@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1000E81A0(a1, &qword_10090A7F8, (void (*)(void))sub_1000EB5A0, a2);
}

uint64_t sub_1000E81A0@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, void *a4@<X8>)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100094134(a2);
  uint64_t v14 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v4) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  *uint64_t v13 = v11;
  return result;
}

uint64_t sub_1000E8314(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000E8350(a1, a2, a3, &qword_10090A808, (void (*)(void))sub_1000EB5A0);
}

uint64_t sub_1000E8350(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = sub_100094134(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1000E8494()
{
  return 0x746E657665;
}

uint64_t sub_1000E84A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3  = v7 & 1;
  return result;
}

uint64_t sub_1000E8538(uint64_t a1)
{
  unint64_t v2 = sub_1000EB54C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E8574(uint64_t a1)
{
  unint64_t v2 = sub_1000EB54C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E85B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_10090A7E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1000EB54C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  *a2  = v9;
  return result;
}

uint64_t sub_1000E870C(void *a1)
{
  uint64_t v2 = sub_100094134(&qword_10090A7F0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000C0DE0(a1, a1[3]);
  sub_1000EB54C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1000E8840(id *a1, void **a2, void **a3, void **a4, void **a5)
{
  id v10 = *a1;
  id v11 = [*a1 trigger];
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    id v14 = v11;
    double v15 = sub_1000EA2E8(v13);

    if (!v5)
    {
      uint64_t v16 = *a2;
      isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
      *a2  = v16;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v16 = sub_100309C88(0, v16[2] + 1, 1, v16);
        *a2  = v16;
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        uint64_t v16 = sub_100309C88((void *)(v18 > 1), v19 + 1, 1, v16);
      }
      v16[2]  = v19 + 1;
      *(double *)&v16[v19 + 4]  = v15;
      *a2  = v16;
    }
LABEL_26:

    return;
  }

  id v20 = [v10 trigger];
  self;
  uint64_t v21 = swift_dynamicCastObjCClass();
  if (v21)
  {
    id v22 = (void *)v21;
    id v14 = v20;
    sub_1000EA7E4(v22, (uint64_t *)v53);
    int v23 = *a3;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    *a3  = v23;
    if ((v24 & 1) == 0)
    {
      int v23 = sub_100309B5C(0, v23[2] + 1, 1, v23);
      *a3  = v23;
    }
    unint64_t v26 = v23[2];
    unint64_t v25 = v23[3];
    if (v26 >= v25 >> 1)
    {
      int v23 = sub_100309B5C((void *)(v25 > 1), v26 + 1, 1, v23);
      *a3  = v23;
    }
    v23[2]  = v26 + 1;
    os_log_type_t v27 = &v23[18 * v26];
    void v27[2] = v53[0];
    long long v28 = v53[1];
    long long v29 = v53[2];
    long long v30 = v53[4];
    void v27[5] = v53[3];
    v27[6]  = v30;
    v27[3]  = v28;
    void v27[4] = v29;
    long long v31 = v53[5];
    long long v32 = v53[6];
    long long v33 = v53[8];
    v27[9]  = v53[7];
    v27[10]  = v33;
    v27[7]  = v31;
    v27[8]  = v32;
    goto LABEL_26;
  }

  id v14 = [v10 trigger];
  self;
  uint64_t v34 = (void *)swift_dynamicCastObjCClass();
  if (v34)
  {
    [v34 timeInterval];
    uint64_t v36 = v35;
    uint64_t v37 = *a4;
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    *a4  = v37;
    if ((v38 & 1) == 0)
    {
      uint64_t v37 = sub_100309B50(0, v37[2] + 1, 1, v37);
      *a4  = v37;
    }
    unint64_t v40 = v37[2];
    unint64_t v39 = v37[3];
    if (v40 >= v39 >> 1) {
      uint64_t v37 = sub_100309B50((void *)(v39 > 1), v40 + 1, 1, v37);
    }
    v37[2]  = v40 + 1;
    v37[v40 + 4]  = v36;
    *a4  = v37;
    goto LABEL_26;
  }

  id v14 = [v10 trigger];
  self;
  id v41 = (void *)swift_dynamicCastObjCClass();
  if (v41)
  {
    id v42 = [v41 event];
    uint64_t v43 = *a5;
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    *a5  = v43;
    if ((v44 & 1) == 0)
    {
      uint64_t v43 = sub_100309A40(0, v43[2] + 1, 1, v43);
      *a5  = v43;
    }
    unint64_t v46 = v43[2];
    unint64_t v45 = v43[3];
    if (v46 >= v45 >> 1) {
      uint64_t v43 = sub_100309A40((void *)(v45 > 1), v46 + 1, 1, v43);
    }
    v43[2]  = v46 + 1;
    v43[v46 + 4]  = v42;
    *a5  = v43;
    goto LABEL_26;
  }

  _StringGuts.grow(_:)(74);
  v47._object  = (void *)0x80000001007C9590;
  v47._countAndFlagsBits  = 0xD000000000000047;
  String.append(_:)(v47);
  id v48 = [v10 trigger:0, 0xE000000000000000];
  swift_getObjectType();

  v49._countAndFlagsBits  = _typeName(_:qualified:)();
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits  = 125;
  v50._object  = (void *)0xE100000000000000;
  String.append(_:)(v50);
  uint64_t v51 = self;
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v51 internalErrorWithDebugDescription:v52];

  swift_willThrow();
}

uint64_t sub_1000E8CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!v4)
  {
    if (v5) {
      return 0;
    }
    goto LABEL_10;
  }
  if (!v5) {
    return 0;
  }
  BOOL v6 = *(void *)a1 == *(void *)a2 && v4 == v5;
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
LABEL_10:
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a2 + 24);
    if (v9)
    {
      if (!v10) {
        return 0;
      }
      if (*(void *)(a1 + 16) != *(void *)(a2 + 16) || v9 != v10)
      {
        char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v11 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v10)
    {
      return 0;
    }
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a2 + 48);
    if (v12)
    {
      if (!v13) {
        return 0;
      }
      if (*(void *)(a1 + 40) != *(void *)(a2 + 40) || v12 != v13)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((v14 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v13)
    {
      return 0;
    }
    if (*(double *)(a1 + 56) != *(double *)(a2 + 56)) {
      return 0;
    }
    uint64_t v15 = *(void *)(a1 + 64);
    unint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a2 + 64);
    unint64_t v18 = *(void *)(a2 + 72);
    if (v16 >> 60 == 15)
    {
      if (v18 >> 60 == 15)
      {
LABEL_32:
        if (*(void *)(a1 + 80) != *(void *)(a2 + 80) || *(double *)(a1 + 88) != *(double *)(a2 + 88)) {
          return 0;
        }
        uint64_t v20 = *(void *)(a1 + 104);
        uint64_t v21 = *(void *)(a2 + 104);
        if (v20)
        {
          if (!v21) {
            return 0;
          }
          if (*(void *)(a1 + 96) != *(void *)(a2 + 96) || v20 != v21)
          {
            char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t result = 0;
            if ((v22 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v21)
        {
          return 0;
        }
        uint64_t v23 = *(void *)(a1 + 120);
        uint64_t v24 = *(void *)(a2 + 120);
        if (v23)
        {
          if (!v24) {
            return 0;
          }
          if (*(void *)(a1 + 112) != *(void *)(a2 + 112) || v23 != v24)
          {
            char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t result = 0;
            if ((v25 & 1) == 0) {
              return result;
            }
          }
        }
        else if (v24)
        {
          return 0;
        }
        uint64_t v26 = *(void *)(a1 + 136);
        uint64_t v27 = *(void *)(a2 + 136);
        if (v26)
        {
          if (v27
            && (*(void *)(a1 + 128) == *(void *)(a2 + 128) && v26 == v27
             || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            return 1;
          }
        }
        else if (!v27)
        {
          return 1;
        }
        return 0;
      }
    }
    else if (v18 >> 60 != 15)
    {
      sub_100097E24(*(void *)(a1 + 64), *(void *)(a1 + 72));
      sub_100097E24(v17, v18);
      char v19 = sub_10014D900(v15, v16, v17, v18);
      sub_100097F20(v17, v18);
      sub_100097F20(v15, v16);
      if ((v19 & 1) == 0) {
        return 0;
      }
      goto LABEL_32;
    }
    sub_100097E24(*(void *)(a1 + 64), *(void *)(a1 + 72));
    sub_100097E24(v17, v18);
    sub_100097F20(v15, v16);
    sub_100097F20(v17, v18);
    return 0;
  }
  return result;
}

uint64_t sub_1000E8FB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6769725465746164 && a2 == 0xEC00000073726567;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001007C9660 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007C9680 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x54656C6369686576 && a2 == 0xEF73726567676972)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000E919C(void *a1)
{
  uint64_t v3 = sub_100094134(&qword_10090A858);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_1000C0DE0(a1, v7);
  sub_1000EB7AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100094134(&qword_10090A868);
    char v10 = 0;
    sub_1000EBA4C(&qword_10090A870, &qword_10090A868, (void (*)(void))sub_1000EB800);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v11;
    sub_100094134(&qword_10090A880);
    char v10 = 1;
    sub_1000EBA4C(&qword_10090A888, &qword_10090A880, (void (*)(void))sub_1000EB854);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100094134(&qword_10090A898);
    char v10 = 2;
    sub_1000EBA4C(&qword_10090A8A0, &qword_10090A898, (void (*)(void))sub_1000EB8A8);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100094134(&qword_10090A8B0);
    char v10 = 3;
    sub_1000EBA4C(&qword_10090A8B8, &qword_10090A8B0, (void (*)(void))sub_1000EB8FC);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_1000E95F4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001007C9640)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1000E967C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73736572646461 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C746361746E6F63 && a2 == 0xEC0000006C656261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEB00000000444955 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614874694B70616DLL && a2 == 0xEC000000656C646ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x74696D69786F7270 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001007C9620 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x676E6974756F72 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 10;
    }
    else {
      return 11;
    }
  }
}

uint64_t sub_1000E9B34@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = sub_100094134(&qword_10090A810);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  NSString v52 = a1;
  sub_1000C0DE0(a1, v9);
  sub_1000EB5F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
  }
  uint64_t v10 = v6;
  LOBYTE(v62)  = 0;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  unint64_t v13 = v12;
  LOBYTE(v62)  = 1;
  swift_bridgeObjectRetain();
  uint64_t v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v49 = v11;
  LOBYTE(v62)  = 2;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v51 = v15;
  uint64_t v17 = v16;
  LOBYTE(v62)  = 3;
  uint64_t v47 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v62)  = 4;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v50 = v19;
  uint64_t v21 = v20;
  LOBYTE(v53)  = 5;
  sub_1000EB648();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v22 = v62;
  unint64_t v23 = v63;
  LOBYTE(v62)  = 6;
  uint64_t v46 = v22;
  sub_100097E24(v22, v63);
  uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v62)  = 7;
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v41 = v24;
  LOBYTE(v62)  = 8;
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v62)  = 9;
  uint64_t v44 = v25;
  swift_bridgeObjectRetain();
  uint64_t v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v43 = v26;
  char v80 = 10;
  swift_bridgeObjectRetain();
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v39 = v28;
  uint64_t v29 = v27;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  *(void *)&long long v53 = v49;
  *((void *)&v53 + 1)  = v13;
  *(void *)&long long v54 = v48;
  *((void *)&v54 + 1)  = v51;
  *(void *)&long long v55 = v17;
  uint64_t v30 = v46;
  *((void *)&v55 + 1)  = v47;
  *(void *)&long long v56 = v50;
  *((void *)&v56 + 1)  = v21;
  *(void *)&long long v57 = v46;
  *((void *)&v57 + 1)  = v23;
  *(void *)&long long v58 = v45;
  uint64_t v31 = v41;
  *((void *)&v58 + 1)  = v41;
  *(void *)&long long v59 = v42;
  *((void *)&v59 + 1)  = v44;
  *(void *)&long long v60 = v40;
  *((void *)&v60 + 1)  = v43;
  *(void *)&long long v61 = v29;
  *((void *)&v61 + 1)  = v39;
  sub_100097D94((uint64_t)&v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100097F20(v30, v23);
  swift_bridgeObjectRelease();
  uint64_t v32 = v51;
  swift_bridgeObjectRelease();
  uint64_t v33 = v50;
  swift_bridgeObjectRelease();
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)v52);
  uint64_t v62 = v49;
  unint64_t v63 = v13;
  uint64_t v64 = v48;
  uint64_t v65 = v32;
  uint64_t v66 = v17;
  uint64_t v67 = v47;
  uint64_t v68 = v33;
  uint64_t v69 = v21;
  uint64_t v70 = v30;
  unint64_t v71 = v23;
  uint64_t v72 = v45;
  uint64_t v73 = v31;
  uint64_t v74 = v42;
  uint64_t v75 = v44;
  uint64_t v76 = v40;
  uint64_t v77 = v43;
  uint64_t v78 = v29;
  uint64_t v79 = v39;
  uint64_t result = sub_100097E90((uint64_t)&v62);
  long long v35 = v60;
  a2[6]  = v59;
  a2[7]  = v35;
  a2[8]  = v61;
  long long v36 = v56;
  a2[2]  = v55;
  a2[3]  = v36;
  long long v37 = v58;
  a2[4]  = v57;
  a2[5]  = v37;
  long long v38 = v54;
  *a2  = v53;
  a2[1]  = v38;
  return result;
}

double sub_1000EA2E8(void *a1)
{
  uint64_t v3 = sub_100094134((uint64_t *)&unk_100909A40);
  __chkstk_darwin(v3 - 8);
  uint64_t v45 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for TimeZone();
  uint64_t v5 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateComponents();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  long long v38 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  long long v37 = (char *)&v37 - v15;
  uint64_t v16 = self;
  id v42 = a1;
  id v17 = [a1 dateComponents];
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  isa  = DateComponents._bridgeToObjectiveC()().super.isa;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v40 = v9 + 8;
  uint64_t v41 = v8;
  uint64_t v39 = v19;
  v19(v11, v8);
  static TimeZone.current.getter();
  Class v20 = TimeZone._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v43);
  id v21 = [v16 rem_dateWithDateComponents:isa timeZone:v20];

  if (!v21)
  {
    uint64_t v24 = (uint64_t)v45;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v45, 1, 1, v44);
    goto LABEL_5;
  }
  uint64_t v22 = v38;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v24 = (uint64_t)v45;
  uint64_t v25 = v22;
  uint64_t v26 = v44;
  v23(v45, v25, v44);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v24, 1, v26) == 1)
  {
LABEL_5:
    sub_1000EACF4(v24);
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v29._object  = (void *)0x80000001007C95E0;
    v29._countAndFlagsBits  = 0xD00000000000003DLL;
    String.append(_:)(v29);
    id v30 = [v42 dateComponents];
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000EAD54();
    uint64_t v31 = v41;
    v32._countAndFlagsBits  = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v39(v11, v31);
    v33._countAndFlagsBits  = 125;
    v33._object  = (void *)0xE100000000000000;
    String.append(_:)(v33);
    uint64_t v34 = self;
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v34 internalErrorWithDebugDescription:v35];

    swift_willThrow();
    return v1;
  }
  uint64_t v27 = v37;
  v23(v37, (char *)v24, v26);
  Date.timeIntervalSinceReferenceDate.getter();
  double v1 = v28;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v26);
  return v1;
}

void sub_1000EA7E4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = [a1 structuredLocation];
  id v5 = [v4 address];

  if (v5)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v53 = v7;
    uint64_t v54 = v6;
  }
  else
  {
    uint64_t v53 = 0;
    uint64_t v54 = 0;
  }
  id v8 = [a1 structuredLocation];
  id v9 = [v8 contactLabel];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v51 = v11;
    uint64_t v52 = v10;
  }
  else
  {
    uint64_t v51 = 0;
    uint64_t v52 = 0;
  }
  id v12 = [a1 structuredLocation];
  [v12 latitude];
  uint64_t v14 = v13;

  id v15 = [a1 structuredLocation];
  id v16 = [v15 locationUID];

  if (v16)
  {
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v18;
    uint64_t v50 = v17;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  id v19 = [a1 structuredLocation];
  [v19 longitude];
  uint64_t v21 = v20;

  id v22 = [a1 structuredLocation];
  id v23 = [v22 mapKitHandle];

  if (v23)
  {
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v25;
    uint64_t v47 = v24;
  }
  else
  {
    unint64_t v45 = 0xF000000000000000;
    uint64_t v47 = 0;
  }
  id v26 = [a1 proximity:v45, v47];
  id v27 = [a1 structuredLocation];
  [v27 radius];
  uint64_t v29 = v28;

  id v30 = [a1 structuredLocation];
  id v31 = [v30 referenceFrameString];

  if (v31)
  {
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v34 = v33;
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v34 = 0;
  }
  id v35 = [a1 structuredLocation];
  id v36 = [v35 routing];

  if (v36)
  {
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = v38;
  }
  else
  {
    uint64_t v37 = 0;
    uint64_t v39 = 0;
  }
  id v40 = [a1 structuredLocation];
  id v41 = [v40 title];

  if (v41)
  {
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
  }
  else
  {

    uint64_t v42 = 0;
    uint64_t v44 = 0;
  }
  *a2  = v54;
  a2[1]  = v53;
  a2[2]  = v52;
  a2[3]  = v51;
  a2[4]  = v14;
  a2[5]  = v50;
  a2[6]  = v49;
  a2[7]  = v21;
  a2[8]  = v48;
  a2[9]  = v46;
  a2[10]  = (uint64_t)v26;
  a2[11]  = v29;
  a2[12]  = v32;
  a2[13]  = v34;
  a2[14]  = v37;
  a2[15]  = v39;
  a2[16]  = v42;
  a2[17]  = v44;
}

void *sub_1000EAB78(unint64_t a1)
{
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v11 = _swiftEmptyArrayStorage;
  id v12 = _swiftEmptyArrayStorage;
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i  = 4; ; ++i)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * i);
      uint64_t v6 = v5;
      uint64_t v7 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v9 = v5;
      sub_1000E8840(&v9, &v13, &v12, &v11, &v10);
      if (v1)
      {
        swift_bridgeObjectRelease_n();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease_n();
        return v13;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease_n();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000EACF4(uint64_t a1)
{
  uint64_t v2 = sub_100094134((uint64_t *)&unk_100909A40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000EAD54()
{
  unint64_t result = qword_10090A7D8;
  if (!qword_10090A7D8)
  {
    type metadata accessor for DateComponents();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A7D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmVehicleTrigger()
{
  return &type metadata for RDSavedAlarmVehicleTrigger;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTimeIntervalTrigger()
{
  return &type metadata for RDSavedAlarmTimeIntervalTrigger;
}

uint64_t destroy for RDSavedAlarmLocationTrigger(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >> 60 != 15) {
    sub_100097F34(*(void *)(a1 + 64), v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for RDSavedAlarmLocationTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1  = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x260], 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16)  = *(void *)(a2 + 16);
  *(void *)(a1 + 24)  = v5;
  *(_OWORD *)(a1 + 32)  = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(void *)(a2 + 48);
  *(void *)(a1 + 56)  = v6;
  uint64_t v7 = (uint64_t *)(a2 + 64);
  unint64_t v8 = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v8 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64)  = *(_OWORD *)v7;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_100097E38(*v7, v8);
    *(void *)(a1 + 64)  = v9;
    *(void *)(a1 + 72)  = v8;
  }
  *(_OWORD *)(a1 + 80)  = *(_OWORD *)(a2 + 80);
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a1 + 96)  = *(void *)(a2 + 96);
  *(void *)(a1 + 104)  = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112)  = *(void *)(a2 + 112);
  *(void *)(a1 + 120)  = v11;
  uint64_t v12 = *(void *)(a2 + 128);
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x260], 8) = v12;
  *(void *)(a1 + 136)  = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDSavedAlarmLocationTrigger(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  a1[5]  = a2[5];
  a1[6]  = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7]  = a2[7];
  uint64_t v4 = a2 + 8;
  unint64_t v5 = a2[9];
  if (a1[9] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100097E38(*v4, a2[9]);
      uint64_t v8 = a1[8];
      unint64_t v9 = a1[9];
      a1[8]  = v7;
      a1[9]  = v5;
      sub_100097F34(v8, v9);
      goto LABEL_8;
    }
    sub_1000EB0AC((uint64_t)(a1 + 8));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 4)  = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_100097E38(*v4, a2[9]);
  a1[8]  = v6;
  a1[9]  = v5;
LABEL_8:
  a1[10]  = a2[10];
  a1[11]  = a2[11];
  a1[12]  = a2[12];
  a1[13]  = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14]  = a2[14];
  a1[15]  = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[16]  = a2[16];
  a1[17]  = a2[17];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000EB0AC(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for RDSavedAlarmLocationTrigger(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1  = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x260], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64)  = v4;
  *(_OWORD *)(a1 + 16)  = v2;
  *(_OWORD *)(a1 + 32)  = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112)  = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x260], 8) = v7;
  *(__n128 *)(a1 + 80)  = result;
  *(_OWORD *)(a1 + 96)  = v6;
  return result;
}

void *assignWithTake for RDSavedAlarmLocationTrigger(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1  = *a2;
  a1[1]  = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v5;
  swift_bridgeObjectRelease();
  a1[4]  = a2[4];
  uint64_t v6 = a2[6];
  a1[5]  = a2[5];
  a1[6]  = v6;
  swift_bridgeObjectRelease();
  a1[7]  = a2[7];
  long long v7 = a2 + 8;
  unint64_t v8 = a1[9];
  if (v8 >> 60 != 15)
  {
    unint64_t v9 = a2[9];
    if (v9 >> 60 != 15)
    {
      uint64_t v10 = a1[8];
      a1[8]  = *v7;
      a1[9]  = v9;
      sub_100097F34(v10, v8);
      goto LABEL_6;
    }
    sub_1000EB0AC((uint64_t)(a1 + 8));
  }
  *((_OWORD *)a1 + 4)  = *(_OWORD *)v7;
LABEL_6:
  a1[10]  = a2[10];
  a1[11]  = a2[11];
  uint64_t v11 = a2[13];
  a1[12]  = a2[12];
  a1[13]  = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[15];
  a1[14]  = a2[14];
  a1[15]  = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = a2[17];
  a1[16]  = a2[16];
  a1[17]  = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmLocationTrigger(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmLocationTrigger(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 136)  = 0;
    *(_OWORD *)(result + 120)  = 0u;
    *(_OWORD *)(result + 104)  = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x260], 8) = 0u;
    *(_OWORD *)(result + 72)  = 0u;
    *(_OWORD *)(result + 56)  = 0u;
    *(_OWORD *)(result + 40)  = 0u;
    *(_OWORD *)(result + 24)  = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 144)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 144)  = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmLocationTrigger()
{
  return &type metadata for RDSavedAlarmLocationTrigger;
}

ValueMetadata *type metadata accessor for RDSavedAlarmDateTrigger()
{
  return &type metadata for RDSavedAlarmDateTrigger;
}

uint64_t destroy for RDSavedAlarmTriggers()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RDSavedAlarmTriggers(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  uint64_t v4 = a2[3];
  a1[2]  = a2[2];
  a1[3]  = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RDSavedAlarmTriggers(void *a1, void *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2]  = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3]  = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for RDSavedAlarmTriggers(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1  = *(_OWORD *)a2;
  a1[1]  = v3;
  return result;
}

_OWORD *assignWithTake for RDSavedAlarmTriggers(_OWORD *a1, _OWORD *a2)
{
  *a1  = *a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  a1[1]  = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmTriggers(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2)  = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RDSavedAlarmTriggers(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16)  = 0;
    *(void *)(result + 24)  = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32)  = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32)  = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTriggers()
{
  return &type metadata for RDSavedAlarmTriggers;
}

unint64_t sub_1000EB54C()
{
  unint64_t result = qword_10090A7E8;
  if (!qword_10090A7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A7E8);
  }
  return result;
}

unint64_t sub_1000EB5A0()
{
  unint64_t result = qword_10090A800;
  if (!qword_10090A800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A800);
  }
  return result;
}

unint64_t sub_1000EB5F4()
{
  unint64_t result = qword_10090A818;
  if (!qword_10090A818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A818);
  }
  return result;
}

unint64_t sub_1000EB648()
{
  unint64_t result = qword_10090A820;
  if (!qword_10090A820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A820);
  }
  return result;
}

uint64_t sub_1000EB69C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134(&qword_10090A830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000EB704()
{
  unint64_t result = qword_10090A838;
  if (!qword_10090A838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A838);
  }
  return result;
}

unint64_t sub_1000EB758()
{
  unint64_t result = qword_10090A848;
  if (!qword_10090A848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A848);
  }
  return result;
}

unint64_t sub_1000EB7AC()
{
  unint64_t result = qword_10090A860;
  if (!qword_10090A860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A860);
  }
  return result;
}

unint64_t sub_1000EB800()
{
  unint64_t result = qword_10090A878;
  if (!qword_10090A878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A878);
  }
  return result;
}

unint64_t sub_1000EB854()
{
  unint64_t result = qword_10090A890;
  if (!qword_10090A890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A890);
  }
  return result;
}

unint64_t sub_1000EB8A8()
{
  unint64_t result = qword_10090A8A8;
  if (!qword_10090A8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A8A8);
  }
  return result;
}

unint64_t sub_1000EB8FC()
{
  unint64_t result = qword_10090A8C0;
  if (!qword_10090A8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A8C0);
  }
  return result;
}

unint64_t sub_1000EB950()
{
  unint64_t result = qword_10090A8D8;
  if (!qword_10090A8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A8D8);
  }
  return result;
}

unint64_t sub_1000EB9A4()
{
  unint64_t result = qword_10090A8E8;
  if (!qword_10090A8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A8E8);
  }
  return result;
}

unint64_t sub_1000EB9F8()
{
  unint64_t result = qword_10090A8F8;
  if (!qword_10090A8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A8F8);
  }
  return result;
}

uint64_t sub_1000EBA4C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100096058(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000EBAB8()
{
  unint64_t result = qword_10090A908;
  if (!qword_10090A908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A908);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for RDSavedAlarmTriggers.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmTriggers.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDSavedAlarmTriggers.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EBC74);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1000EBC9C(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000EBCA4(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTriggers.CodingKeys()
{
  return &type metadata for RDSavedAlarmTriggers.CodingKeys;
}

ValueMetadata *type metadata accessor for RDSavedAlarmDateTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmDateTrigger.CodingKeys;
}

uint64_t getEnumTagSinglePayload for RDSavedAlarmLocationTrigger.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RDSavedAlarmLocationTrigger.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1]  = v6;
        break;
      case 2:
        *(_WORD *)(result + 1)  = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EBE30);
      case 4:
        *(_DWORD *)(result + 1)  = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1]  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1)  = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1)  = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmLocationTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmLocationTrigger.CodingKeys;
}

ValueMetadata *type metadata accessor for RDSavedAlarmTimeIntervalTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmTimeIntervalTrigger.CodingKeys;
}

unsigned char *_s7remindd23RDSavedAlarmDateTriggerV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000EBF14);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for RDSavedAlarmVehicleTrigger.CodingKeys()
{
  return &type metadata for RDSavedAlarmVehicleTrigger.CodingKeys;
}

unint64_t sub_1000EBF50()
{
  unint64_t result = qword_10090A910;
  if (!qword_10090A910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A910);
  }
  return result;
}

unint64_t sub_1000EBFA8()
{
  unint64_t result = qword_10090A918;
  if (!qword_10090A918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A918);
  }
  return result;
}

unint64_t sub_1000EC000()
{
  unint64_t result = qword_10090A920;
  if (!qword_10090A920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A920);
  }
  return result;
}

unint64_t sub_1000EC058()
{
  unint64_t result = qword_10090A928;
  if (!qword_10090A928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A928);
  }
  return result;
}

unint64_t sub_1000EC0B0()
{
  unint64_t result = qword_10090A930;
  if (!qword_10090A930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A930);
  }
  return result;
}

unint64_t sub_1000EC108()
{
  unint64_t result = qword_10090A938;
  if (!qword_10090A938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A938);
  }
  return result;
}

unint64_t sub_1000EC160()
{
  unint64_t result = qword_10090A940;
  if (!qword_10090A940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A940);
  }
  return result;
}

unint64_t sub_1000EC1B8()
{
  unint64_t result = qword_10090A948;
  if (!qword_10090A948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A948);
  }
  return result;
}

unint64_t sub_1000EC210()
{
  unint64_t result = qword_10090A950;
  if (!qword_10090A950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A950);
  }
  return result;
}

unint64_t sub_1000EC268()
{
  unint64_t result = qword_10090A958;
  if (!qword_10090A958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A958);
  }
  return result;
}

unint64_t sub_1000EC2C0()
{
  unint64_t result = qword_10090A960;
  if (!qword_10090A960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A960);
  }
  return result;
}

unint64_t sub_1000EC318()
{
  unint64_t result = qword_10090A968;
  if (!qword_10090A968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A968);
  }
  return result;
}

unint64_t sub_1000EC370()
{
  unint64_t result = qword_10090A970;
  if (!qword_10090A970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A970);
  }
  return result;
}

unint64_t sub_1000EC3C8()
{
  unint64_t result = qword_10090A978;
  if (!qword_10090A978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A978);
  }
  return result;
}

unint64_t sub_1000EC420()
{
  unint64_t result = qword_10090A980;
  if (!qword_10090A980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A980);
  }
  return result;
}

unint64_t sub_1000EC48C()
{
  unint64_t v1 = v0;
  uint64_t v2 = _s10PredicatesOMa_1();
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  long long v55 = v4;
  uint64_t v5 = (void *)sub_100535B3C();
  sub_1000963CC(0, (unint64_t *)&qword_100909AD0);
  id v6 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v7 = [(id)swift_getObjCClassFromMetadata() entity];
  [v6 setEntity:v7];

  [v6 setAffectedStores:0];
  [v6 setPredicate:v5];

  if (qword_100907888 != -1) {
    goto LABEL_75;
  }
  while (1)
  {
    sub_1000963CC(0, (unint64_t *)&qword_100910DE0);
    isa  = Array._bridgeToObjectiveC()().super.isa;
    [v6 setSortDescriptors:isa];

    uint64_t v9 = NSManagedObjectContext.fetch<A>(_:)();
    if (v1)
    {

      sub_1000ECFE0((uint64_t)v55);
      return v1;
    }
    unint64_t v1 = v9;
    uint64_t v54 = 0;
    uint64_t v81 = v9;
    sub_100094134(&qword_100910160);
    sub_1000ED03C();
    unint64_t v10 = Sequence.elements<A>(ofType:)();
    swift_bridgeObjectRelease();

    uint64_t v81 = (uint64_t)_swiftEmptyArrayStorage;
    if (!(v10 >> 62))
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v11) {
        break;
      }
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11) {
      break;
    }
LABEL_6:
    unint64_t v12 = 0;
    unint64_t v13 = v10 & 0xC000000000000001;
    uint64_t v57 = v10 & 0xFFFFFFFFFFFFFF8;
    unint64_t v56 = v10 + 32;
    uint64_t v14 = &selRef_intersectsSet_;
    uint64_t v65 = (char *)&type metadata for Swift.AnyObject + 8;
    unint64_t v60 = v10;
    uint64_t v59 = v11;
    unint64_t v58 = v10 & 0xC000000000000001;
    while (1)
    {
      if (v13)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v12 >= *(void *)(v57 + 16)) {
          goto LABEL_74;
        }
        id v15 = *(id *)(v56 + 8 * v12);
      }
      unint64_t v1 = (unint64_t)v15;
      if (__OFADD__(v12++, 1)) {
        break;
      }
      id v17 = [v15 v14[446]];
      if (!v17)
      {

        goto LABEL_8;
      }
      id v64 = v17;
      id v18 = [(id)v1 sharees];
      id v19 = (void *)v1;
      if (!v18)
      {

        goto LABEL_8;
      }
      uint64_t v20 = v18;
      id v61 = v19;
      unint64_t v62 = v12;
      uint64_t v21 = sub_1000963CC(0, (unint64_t *)&qword_100909AF8);
      sub_1000ED098((unint64_t *)&unk_100913900, (unint64_t *)&qword_100909AF8);
      uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v75 = (unint64_t)&_swiftEmptySetSingleton;
      uint64_t v67 = v21;
      if ((v22 & 0xC000000000000001) != 0)
      {
        __CocoaSet.makeIterator()();
        Set.Iterator.init(_cocoa:)();
        uint64_t v22 = v76;
        uint64_t v71 = v77;
        uint64_t v23 = v78;
        uint64_t v24 = v79;
        unint64_t v1 = v80;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = -1 << *(unsigned char *)(v22 + 32);
        uint64_t v26 = *(void *)(v22 + 56);
        uint64_t v71 = v22 + 56;
        uint64_t v27 = ~v25;
        uint64_t v28 = -v25;
        if (v28 < 64) {
          uint64_t v29 = ~(-1 << v28);
        }
        else {
          uint64_t v29 = -1;
        }
        unint64_t v1 = v29 & v26;
        uint64_t v23 = v27;
      }
      id v30 = &selRef_willSave;
      uint64_t v63 = v23;
      uint64_t v69 = v22 & 0x7FFFFFFFFFFFFFFFLL;
      int64_t v70 = (unint64_t)(v23 + 64) >> 6;
      uint64_t v68 = v22;
      while (v22 < 0)
      {
        uint64_t v34 = __CocoaSet.Iterator.next()();
        if (!v34) {
          goto LABEL_62;
        }
        uint64_t v73 = v34;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v6 = v74;
        swift_unknownObjectRelease();
        uint64_t v33 = v24;
        uint64_t v31 = v1;
        if (!v6) {
          goto LABEL_62;
        }
LABEL_47:
        unint64_t v72 = v31;
        id v38 = [v6 v30[133]];
        if (v38)
        {
          uint64_t v39 = v38;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
          uint64_t v40 = REMContactRepresentation.init(address:)();
          if (v40)
          {
            unint64_t v1 = v40;
            id v41 = [v66 commonSharees];
            unint64_t v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v42 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v43)
              {
LABEL_51:
                if (v43 < 1) {
                  goto LABEL_72;
                }
                for (i  = 0; i != v43; ++i)
                {
                  if ((v42 & 0xC000000000000001) != 0) {
                    id v45 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  }
                  else {
                    id v45 = *(id *)(v42 + 8 * i + 32);
                  }
                  uint64_t v46 = v45;
                  if ([v45 matchesContactRepresentation:v1])
                  {
                    sub_10031EC34(&v74, v46);
                  }
                  else
                  {
                  }
                }
              }
            }
            else
            {
              uint64_t v43 = *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v43) {
                goto LABEL_51;
              }
            }

            swift_bridgeObjectRelease();
            id v30 = &selRef_willSave;
            uint64_t v22 = v68;
          }
        }

        uint64_t v24 = v33;
        unint64_t v1 = v72;
      }
      if (v1)
      {
        uint64_t v31 = (v1 - 1) & v1;
        unint64_t v32 = __clz(__rbit64(v1)) | (v24 << 6);
        uint64_t v33 = v24;
        goto LABEL_46;
      }
      int64_t v35 = v24 + 1;
      if (__OFADD__(v24, 1))
      {
        __break(1u);
LABEL_72:
        __break(1u);
        break;
      }
      if (v35 >= v70) {
        goto LABEL_62;
      }
      unint64_t v36 = *(void *)(v71 + 8 * v35);
      uint64_t v33 = v24 + 1;
      if (v36) {
        goto LABEL_45;
      }
      uint64_t v33 = v24 + 2;
      if (v24 + 2 >= v70) {
        goto LABEL_62;
      }
      unint64_t v36 = *(void *)(v71 + 8 * v33);
      if (v36) {
        goto LABEL_45;
      }
      uint64_t v33 = v24 + 3;
      if (v24 + 3 >= v70) {
        goto LABEL_62;
      }
      unint64_t v36 = *(void *)(v71 + 8 * v33);
      if (v36) {
        goto LABEL_45;
      }
      uint64_t v33 = v24 + 4;
      if (v24 + 4 >= v70) {
        goto LABEL_62;
      }
      unint64_t v36 = *(void *)(v71 + 8 * v33);
      if (v36)
      {
LABEL_45:
        uint64_t v31 = (v36 - 1) & v36;
        unint64_t v32 = __clz(__rbit64(v36)) + (v33 << 6);
LABEL_46:
        id v6 = *(id *)(*(void *)(v22 + 48) + 8 * v32);
        if (!v6) {
          goto LABEL_62;
        }
        goto LABEL_47;
      }
      uint64_t v37 = v24 + 5;
      while (v70 != v37)
      {
        unint64_t v36 = *(void *)(v71 + 8 * v37++);
        if (v36)
        {
          uint64_t v33 = v37 - 1;
          goto LABEL_45;
        }
      }
LABEL_62:
      sub_1000C1AF8();
      unint64_t v1 = v75;
      if ((v75 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v47 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v47 = *(void *)(v75 + 16);
      }
      uint64_t v11 = v59;
      unint64_t v12 = v62;
      unint64_t v13 = v58;
      uint64_t v14 = &selRef_intersectsSet_;
      if (v47)
      {
        id v48 = objc_allocWithZone((Class)REMFamilyChecklistSharedGroceryList);
        sub_1000963CC(0, (unint64_t *)&unk_10090D5F0);
        id v6 = (id)sub_1000ED098(&qword_10090A998, (unint64_t *)&unk_10090D5F0);
        id v49 = v64;
        Class v50 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        unint64_t v1 = (unint64_t)[v48 initWithListID:v49 participants:v50];

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v81 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
LABEL_8:
      if (v12 == v11) {
        goto LABEL_77;
      }
    }
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    swift_once();
  }
LABEL_77:
  swift_bridgeObjectRelease();
  id v51 = objc_allocWithZone((Class)REMFamilyChecklistSharedGroceryListInvocationResult);
  sub_1000963CC(0, &qword_10090A990);
  Class v52 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v1 = (unint64_t)[v51 initWithSharedGroceryLists:v52];

  sub_1000ECFE0((uint64_t)v55);
  return v1;
}

unint64_t sub_1000ECDD0()
{
  return sub_1000EC48C();
}

uint64_t sub_1000ECDF4(uint64_t a1)
{
  unsigned int v4 = self;
  id v5 = [self sharedInstance];
  id v6 = [v4 unsafeUntilSystemReady_primaryCloudKitAccountInContext:a1 appleAccountUtilities:v5];

  if (v6 && [v6 didChooseToMigrate]) {
    unsigned int v7 = [v6 didFinishMigration] ^ 1;
  }
  else {
    unsigned int v7 = 1;
  }
  id v8 = [v1 localeIdentifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  type metadata accessor for REMGroceryDummyModel();
  char v9 = static REMGroceryDummyModel.isSupported(localeIdentifier:)();
  if (v2)
  {

    return swift_bridgeObjectRelease();
  }
  char v11 = v9;
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    if (v6) {
      uint64_t v12 = 272;
    }
    else {
      uint64_t v12 = 20;
    }
    if ((v7 & 1) == 0)
    {
      uint64_t v13 = 0;
      uint64_t v12 = 16;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  if (v6) {
    uint64_t v12 = 256;
  }
  else {
    uint64_t v12 = 4;
  }
  if (v7)
  {
LABEL_17:
    uint64_t v13 = 0;
    goto LABEL_19;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 1;
LABEL_19:
  id v14 = [objc_allocWithZone((Class)REMFamilyChecklistFamilyGroceryListEligibility) initWithIsEligible:v13 ineligibilityReasons:v12];
  id v15 = [objc_allocWithZone((Class)REMFamilyChecklistFamilyGroceryListEligibilityInvocationResult) initWithFamilyGroceryListEligibility:v14];

  return (uint64_t)v15;
}

uint64_t sub_1000ECFBC(uint64_t a1)
{
  return sub_1000ECDF4(a1);
}

uint64_t sub_1000ECFE0(uint64_t a1)
{
  uint64_t v2 = _s10PredicatesOMa_1();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000ED03C()
{
  unint64_t result = qword_10090A988;
  if (!qword_10090A988)
  {
    sub_100096058(&qword_100910160);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A988);
  }
  return result;
}

uint64_t sub_1000ED098(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000963CC(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000ED0E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for REMRemindersListDataView.SortingDirection();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  char v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))(v14, a2, v10, v12);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v14, v10);
  if (v15 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    uint64_t v38 = a1;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    goto LABEL_3;
  }
  if (v15 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v11 + 96))(v14, v10);
    swift_bridgeObjectRelease();
  }
  else if (v15 != enum case for REMRemindersListDataView.ShowCompleted.off(_:))
  {
    uint64_t v38 = a1;
    if (v15 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
    {
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      goto LABEL_29;
    }
LABEL_3:
    unint64_t v16 = (unint64_t)sub_1000ED5F0(a3);
    id v14 = v17;
    id v18 = *(void (**)(void))(v7 + 104);
    unsigned int v37 = enum case for REMRemindersListDataView.SortingDirection.ascending(_:);
    unint64_t v36 = (void (*)(char *, void, uint64_t))v18;
    v18(v9);
    sub_1000ED598();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v20 = v39;
    uint64_t v19 = v40;
    uint64_t v11 = *(void *)(v7 + 8);
    ((void (*)(char *, uint64_t))v11)(v9, v6);
    if (v19 == v20) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 1;
    }
    if ((v16 & 0x8000000000000000) == 0 && (v16 & 0x4000000000000000) == 0)
    {
      uint64_t v21 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
LABEL_9:
      uint64_t v40 = v21;
      sub_1000EDC04(&v40, v10);
      swift_bridgeObjectRelease();
      uint64_t v22 = v40;
      v36(v9, v37, v6);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v24 = v39;
      uint64_t v23 = v40;
      ((void (*)(char *, uint64_t))v11)(v9, v6);
      if (v23 == v24) {
        uint64_t v25 = -1;
      }
      else {
        uint64_t v25 = 1;
      }
      if (((unint64_t)v14 & 0x8000000000000000) != 0 || ((unint64_t)v14 & 0x4000000000000000) != 0)
      {
        unint64_t v34 = swift_bridgeObjectRetain();
        uint64_t v26 = (uint64_t)sub_1002099C0(v34);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v26 = (unint64_t)v14 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
      }
      uint64_t v40 = v26;
      sub_1000EDC04(&v40, v25);
      swift_bridgeObjectRelease();
      unint64_t v27 = v40;
      uint64_t v40 = v22;
      sub_100201318(v27);
      return v40;
    }
LABEL_29:
    unint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v21 = (uint64_t)sub_1002099C0(v33);
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for REMRemindersListDataView.SortingDirection.ascending(_:), v6);
  sub_1000ED598();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v30 = v39;
  uint64_t v29 = v40;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (v29 == v30) {
    uint64_t v31 = -1;
  }
  else {
    uint64_t v31 = 1;
  }
  if ((a3 & 0x8000000000000000) != 0 || (a3 & 0x4000000000000000) != 0)
  {
    unint64_t v35 = swift_bridgeObjectRetain();
    uint64_t v32 = (uint64_t)sub_1002099C0(v35);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  uint64_t v40 = v32;
  sub_1000EDC04(&v40, v31);
  return v40;
}

unint64_t sub_1000ED598()
{
  unint64_t result = qword_10090A9A0;
  if (!qword_10090A9A0)
  {
    type metadata accessor for REMRemindersListDataView.SortingDirection();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A9A0);
  }
  return result;
}

void *sub_1000ED5F0(unint64_t a1)
{
  unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    unint64_t result = (void *)swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  unint64_t result = (void *)_CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = (uint64_t)result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (i  = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      unsigned int v7 = [v5 completed:v9];
      id v8 = v6;
      if (v7)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

id sub_1000ED7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100094134(&qword_100914420);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v38 = (char *)v36 - v10;
  uint64_t v11 = type metadata accessor for REMRemindersListDataView.ShowCompleted();
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = __chkstk_darwin(v11);
  int v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v12 + 16))(v15, a2, v11, v13);
  int v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v15, v11);
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.after(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    goto LABEL_3;
  }
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.allowlist(_:))
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v15, v11);
    swift_bridgeObjectRelease();
LABEL_21:
    sub_1000EEC08();
    return (id)Array<A>.sorted(by:)();
  }
  if (v16 == enum case for REMRemindersListDataView.ShowCompleted.off(_:)) {
    goto LABEL_21;
  }
  if (v16 != enum case for REMRemindersListDataView.ShowCompleted.on(_:))
  {
    id result = (id)_diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
LABEL_3:
  uint64_t v17 = *(void *)(a3 + 16);
  if (v17)
  {
    unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v36[1]  = a1;
    unint64_t v37 = v18;
    uint64_t v19 = a3 + v18;
    uint64_t v20 = *(void *)(v7 + 72);
    uint64_t v21 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v22 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v36[0]  = a3;
    swift_bridgeObjectRetain();
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t v24 = _swiftEmptyArrayStorage;
    do
    {
      REMSortableElement.element.getter();
      id v27 = v40;
      unsigned int v28 = [v40 completed];

      uint64_t v29 = *v21;
      if (v28)
      {
        v29(v38, v19, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v23 = (void *)sub_1003091D0(0, v23[2] + 1, 1, (unint64_t)v23);
        }
        unint64_t v31 = v23[2];
        unint64_t v30 = v23[3];
        unint64_t v32 = v31 + 1;
        if (v31 >= v30 >> 1)
        {
          uint64_t v25 = sub_1003091D0(v30 > 1, v31 + 1, 1, (unint64_t)v23);
          uint64_t v26 = v38;
          uint64_t v23 = (void *)v25;
        }
        else
        {
          uint64_t v25 = (uint64_t)v23;
          uint64_t v26 = v38;
        }
      }
      else
      {
        v29(v39, v19, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = (void *)sub_1003091D0(0, v24[2] + 1, 1, (unint64_t)v24);
        }
        unint64_t v31 = v24[2];
        unint64_t v33 = v24[3];
        unint64_t v32 = v31 + 1;
        if (v31 < v33 >> 1)
        {
          uint64_t v25 = (uint64_t)v24;
          uint64_t v26 = v39;
        }
        else
        {
          uint64_t v25 = sub_1003091D0(v33 > 1, v31 + 1, 1, (unint64_t)v24);
          uint64_t v26 = v39;
          uint64_t v24 = (void *)v25;
        }
      }
      *(void *)(v25 + 16)  = v32;
      (*v22)(v25 + v37 + v31 * v20, v26, v6);
      v19 += v20;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  sub_1000EEC08();
  unint64_t v35 = (void *)Array<A>.sorted(by:)();
  swift_bridgeObjectRelease();
  id v40 = v35;
  sub_100201330((uint64_t)v23);
  return v40;
}

uint64_t sub_1000EDC04(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  *a1  = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v4 = sub_1001F8BC8(v4);
    *a1  = v4;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0]  = v4 + 32;
  v8[1]  = v6;
  sub_1000EDC88(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1000EDC88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v5);
  if (result < v5)
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 >= -1)
    {
      Swift::Int v8 = result;
      char v108 = a1;
      if (v5 < 2)
      {
        uint64_t v11 = (char *)_swiftEmptyArrayStorage;
        v122  = (uint64_t)_swiftEmptyArrayStorage;
        __dst  = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        if (v5 != 1)
        {
          unint64_t v14 = _swiftEmptyArrayStorage[2];
          if (v14 < 2) {
            goto LABEL_124;
          }
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v9 = v7 >> 1;
        sub_1000EEBC8();
        uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)  = v9;
        __dst  = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
        v122  = v10;
      }
      Swift::Int v12 = 0;
      uint64_t v13 = *a1;
      uint64_t v110 = *a1 + 16;
      Swift::Int v111 = v8;
      uint64_t v109 = *a1 - 8;
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
      v115  = v5;
      v120  = *a1;
      while (1)
      {
        Swift::Int v15 = v12++;
        v116  = v15;
        if (v12 < v5)
        {
          v112  = v11;
          int v16 = *(void **)(v13 + 8 * v15);
          id v17 = *(id *)(v13 + 8 * v12);
          id v18 = v16;
          id v19 = [v17 title];
          if (v19)
          {
            uint64_t v20 = v19;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          id v21 = [v18 title];
          if (v21)
          {
            uint64_t v22 = v21;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          sub_1000E4FD8();
          v117  = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          Swift::Int v12 = v15 + 2;
          if (v15 + 2 < v5)
          {
            uint64_t v23 = (id *)(v110 + 8 * v15);
            while (1)
            {
              uint64_t v24 = *(v23 - 1);
              id v25 = *v23;
              id v26 = v24;
              id v27 = [v25 title];
              if (v27)
              {
                unsigned int v28 = v27;
                static String._unconditionallyBridgeFromObjectiveC(_:)();
              }
              id v29 = [v26 title];
              if (v29)
              {
                unint64_t v30 = v29;
                static String._unconditionallyBridgeFromObjectiveC(_:)();
              }
              uint64_t v31 = StringProtocol.localizedStandardCompare<A>(_:)();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v117 == a2) == (v31 != a2)) {
                break;
              }
              ++v12;
              ++v23;
              Swift::Int v5 = v115;
              if (v115 == v12)
              {
                Swift::Int v12 = v115;
                goto LABEL_30;
              }
            }
            Swift::Int v5 = v115;
LABEL_30:
            Swift::Int v15 = v116;
          }
          uint64_t v13 = v120;
          uint64_t v11 = v112;
          if (v117 == a2)
          {
            if (v12 < v15) {
              goto LABEL_148;
            }
            if (v15 < v12)
            {
              unint64_t v32 = (uint64_t *)(v109 + 8 * v12);
              Swift::Int v33 = v12;
              Swift::Int v34 = v15;
              unint64_t v35 = (uint64_t *)(v120 + 8 * v15);
              do
              {
                if (v34 != --v33)
                {
                  if (!v120) {
                    goto LABEL_153;
                  }
                  uint64_t v36 = *v35;
                  *unint64_t v35 = *v32;
                  *unint64_t v32 = v36;
                }
                ++v34;
                --v32;
                ++v35;
              }
              while (v34 < v33);
            }
          }
        }
        if (v12 < v5)
        {
          if (__OFSUB__(v12, v15)) {
            goto LABEL_146;
          }
          if (v12 - v15 < v111)
          {
            if (__OFADD__(v15, v111)) {
              goto LABEL_149;
            }
            if (v15 + v111 >= v5) {
              Swift::Int v37 = v5;
            }
            else {
              Swift::Int v37 = v15 + v111;
            }
            if (v37 < v15)
            {
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              break;
            }
            if (v12 != v37)
            {
              v113  = v11;
              v114  = v37;
              uint64_t v38 = v109 + 8 * v12;
              do
              {
                uint64_t v39 = *(void **)(v13 + 8 * v12);
                v118  = v38;
                while (1)
                {
                  id v40 = *(void **)v38;
                  id v41 = v39;
                  id v42 = v40;
                  id v43 = [v41 title];
                  if (v43)
                  {
                    uint64_t v44 = v43;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  id v45 = [v42 title];
                  if (v45)
                  {
                    uint64_t v46 = v45;
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  sub_1000E4FD8();
                  uint64_t v47 = StringProtocol.localizedStandardCompare<A>(_:)();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v47 != a2) {
                    break;
                  }
                  uint64_t v13 = v120;
                  if (!v120) {
                    goto LABEL_151;
                  }
                  id v48 = *(void **)v38;
                  uint64_t v39 = *(void **)(v38 + 8);
                  *(void *)uint64_t v38 = v39;
                  *(void *)(v38 + _Block_object_dispose(&STACK[0x260], 8) = v48;
                  v38 -= 8;
                  if (v12 == ++v15) {
                    goto LABEL_51;
                  }
                }
                uint64_t v13 = v120;
LABEL_51:
                ++v12;
                Swift::Int v15 = v116;
                uint64_t v38 = v118 + 8;
              }
              while (v12 != v114);
              Swift::Int v12 = v114;
              uint64_t v11 = v113;
            }
          }
        }
        if (v12 < v15) {
          goto LABEL_141;
        }
        id v49 = v11;
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v11 = v49;
        }
        else {
          uint64_t v11 = sub_1001F3D80(0, *((void *)v49 + 2) + 1, 1, v49);
        }
        unint64_t v51 = *((void *)v11 + 2);
        unint64_t v50 = *((void *)v11 + 3);
        unint64_t v14 = v51 + 1;
        uint64_t v13 = v120;
        if (v51 >= v50 >> 1)
        {
          uint64_t v100 = sub_1001F3D80((char *)(v50 > 1), v51 + 1, 1, v11);
          uint64_t v13 = v120;
          uint64_t v11 = v100;
        }
        *((void *)v11 + 2)  = v14;
        Class v52 = v11 + 32;
        uint64_t v53 = &v11[16 * v51 + 32];
        *(void *)uint64_t v53 = v116;
        *((void *)v53 + 1)  = v12;
        if (v51)
        {
          while (1)
          {
            unint64_t v54 = v14 - 1;
            if (v14 >= 4)
            {
              uint64_t v59 = &v52[16 * v14];
              uint64_t v60 = *((void *)v59 - 8);
              uint64_t v61 = *((void *)v59 - 7);
              BOOL v65 = __OFSUB__(v61, v60);
              uint64_t v62 = v61 - v60;
              if (v65) {
                goto LABEL_130;
              }
              uint64_t v64 = *((void *)v59 - 6);
              uint64_t v63 = *((void *)v59 - 5);
              BOOL v65 = __OFSUB__(v63, v64);
              uint64_t v57 = v63 - v64;
              char v58 = v65;
              if (v65) {
                goto LABEL_131;
              }
              unint64_t v66 = v14 - 2;
              uint64_t v67 = &v52[16 * v14 - 32];
              uint64_t v69 = *(void *)v67;
              uint64_t v68 = *((void *)v67 + 1);
              BOOL v65 = __OFSUB__(v68, v69);
              uint64_t v70 = v68 - v69;
              if (v65) {
                goto LABEL_133;
              }
              BOOL v65 = __OFADD__(v57, v70);
              uint64_t v71 = v57 + v70;
              if (v65) {
                goto LABEL_136;
              }
              if (v71 >= v62)
              {
                id v89 = &v52[16 * v54];
                uint64_t v91 = *(void *)v89;
                uint64_t v90 = *((void *)v89 + 1);
                BOOL v65 = __OFSUB__(v90, v91);
                uint64_t v92 = v90 - v91;
                if (v65) {
                  goto LABEL_140;
                }
                BOOL v82 = v57 < v92;
                goto LABEL_99;
              }
            }
            else
            {
              if (v14 != 3)
              {
                v83  = *((void *)v11 + 4);
                uint64_t v84 = *((void *)v11 + 5);
                BOOL v65 = __OFSUB__(v84, v83);
                uint64_t v76 = v84 - v83;
                char v77 = v65;
                goto LABEL_93;
              }
              uint64_t v56 = *((void *)v11 + 4);
              uint64_t v55 = *((void *)v11 + 5);
              BOOL v65 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              char v58 = v65;
            }
            if (v58) {
              goto LABEL_132;
            }
            unint64_t v66 = v14 - 2;
            unint64_t v72 = &v52[16 * v14 - 32];
            uint64_t v74 = *(void *)v72;
            uint64_t v73 = *((void *)v72 + 1);
            BOOL v75 = __OFSUB__(v73, v74);
            uint64_t v76 = v73 - v74;
            char v77 = v75;
            if (v75) {
              goto LABEL_135;
            }
            uint64_t v78 = &v52[16 * v54];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v65 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v65) {
              goto LABEL_138;
            }
            if (__OFADD__(v76, v81)) {
              goto LABEL_139;
            }
            if (v76 + v81 >= v57)
            {
              BOOL v82 = v57 < v81;
LABEL_99:
              if (v82) {
                unint64_t v54 = v66;
              }
              goto LABEL_101;
            }
LABEL_93:
            if (v77) {
              goto LABEL_134;
            }
            uint64_t v85 = &v52[16 * v54];
            v87  = *(void *)v85;
            uint64_t v86 = *((void *)v85 + 1);
            BOOL v65 = __OFSUB__(v86, v87);
            uint64_t v88 = v86 - v87;
            if (v65) {
              goto LABEL_137;
            }
            if (v88 < v76) {
              goto LABEL_14;
            }
LABEL_101:
            unint64_t v93 = v54 - 1;
            if (v54 - 1 >= v14)
            {
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
              goto LABEL_150;
            }
            if (!v13) {
              goto LABEL_152;
            }
            v94  = v11;
            uint64_t v95 = &v52[16 * v93];
            uint64_t v96 = *(void *)v95;
            id v97 = &v52[16 * v54];
            uint64_t v98 = *((void *)v97 + 1);
            sub_1000EE770((void **)(v13 + 8 * *(void *)v95), (id *)(v13 + 8 * *(void *)v97), v13 + 8 * v98, __dst, a2);
            if (v2) {
              goto LABEL_124;
            }
            if (v98 < v96) {
              goto LABEL_127;
            }
            if (v54 > *((void *)v94 + 2)) {
              goto LABEL_128;
            }
            *(void *)uint64_t v95 = v96;
            *(void *)&v52[16 * v93 + 8]  = v98;
            unint64_t v99 = *((void *)v94 + 2);
            if (v54 >= v99) {
              goto LABEL_129;
            }
            unint64_t v14 = v99 - 1;
            memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
            uint64_t v11 = v94;
            *((void *)v94 + 2)  = v99 - 1;
            uint64_t v13 = v120;
            if (v99 <= 2) {
              goto LABEL_14;
            }
          }
        }
        unint64_t v14 = 1;
LABEL_14:
        Swift::Int v5 = v115;
        if (v12 >= v115)
        {
          uint64_t v3 = v2;
          if (v14 < 2)
          {
LABEL_124:
            swift_bridgeObjectRelease();
            *(void *)((v122 & 0xFFFFFFFFFFFFFF8) + 0x10)  = 0;
            specialized Array._endMutation()();
            return swift_bridgeObjectRelease();
          }
LABEL_112:
          uint64_t v101 = *v108;
          while (1)
          {
            v102  = v14 - 2;
            if (v14 < 2) {
              goto LABEL_142;
            }
            if (!v101) {
              goto LABEL_154;
            }
            unint64_t v103 = v11;
            v104  = *(void *)&v11[16 * v102 + 32];
            uint64_t v105 = *(void *)&v11[16 * v14 + 24];
            sub_1000EE770((void **)(v101 + 8 * v104), (id *)(v101 + 8 * *(void *)&v11[16 * v14 + 16]), v101 + 8 * v105, __dst, a2);
            if (v3) {
              goto LABEL_124;
            }
            if (v105 < v104) {
              goto LABEL_143;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v103 = sub_1001F433C((uint64_t)v103);
            }
            if (v102 >= *((void *)v103 + 2)) {
              goto LABEL_144;
            }
            uint64_t v106 = &v103[16 * v102 + 32];
            *(void *)uint64_t v106 = v104;
            *((void *)v106 + 1)  = v105;
            unint64_t v107 = *((void *)v103 + 2);
            if (v14 > v107) {
              goto LABEL_145;
            }
            memmove(&v103[16 * v14 + 16], &v103[16 * v14 + 32], 16 * (v107 - v14));
            uint64_t v11 = v103;
            *((void *)v103 + 2)  = v107 - 1;
            unint64_t v14 = v107 - 1;
            if (v107 <= 2) {
              goto LABEL_124;
            }
          }
        }
      }
    }
    Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v5 < 0) {
    goto LABEL_147;
  }
  if (v5) {
    return sub_1000EE5C8(0, v5, 1, a1, a2);
  }
  return result;
}

uint64_t sub_1000EE5C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v20 = result;
  if (a3 != a2)
  {
    uint64_t v23 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
    uint64_t v6 = &selRef_stringFromDate_;
LABEL_5:
    uint64_t v7 = *(void **)(v23 + 8 * a3);
    uint64_t v8 = v20;
    uint64_t v21 = v5;
    uint64_t v24 = a3;
    while (1)
    {
      uint64_t v9 = *(void **)v5;
      id v10 = v7;
      id v11 = v9;
      id v12 = [v10 v6[69]];
      if (v12)
      {
        uint64_t v13 = v12;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      unint64_t v14 = v6;
      id v15 = [v11 v6[69]];
      if (v15)
      {
        int v16 = v15;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      sub_1000E4FD8();
      uint64_t v17 = StringProtocol.localizedStandardCompare<A>(_:)();

      swift_bridgeObjectRelease();
      Swift::Int result = swift_bridgeObjectRelease();
      uint64_t v6 = v14;
      if (v17 != a5)
      {
LABEL_4:
        a3  = v24 + 1;
        uint64_t v5 = v21 + 8;
        if (v24 + 1 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v23) {
        break;
      }
      id v18 = *(void **)v5;
      uint64_t v7 = *(void **)(v5 + 8);
      *(void *)uint64_t v5 = v7;
      *(void *)(v5 + _Block_object_dispose(&STACK[0x260], 8) = v18;
      v5 -= 8;
      if (v24 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EE770(void **__src, id *a2, unint64_t a3, void **__dst, uint64_t a5)
{
  uint64_t v5 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v47 = __src;
  uint64_t v46 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v24 = &v5[v13];
      id v45 = v24;
      uint64_t v47 = v6;
      uint64_t v39 = v7;
      if (v7 < v6 && v11 >= 8)
      {
        id v25 = (id *)(a3 - 8);
        id v26 = v6;
        uint64_t v38 = v5;
        do
        {
          unint64_t v42 = (unint64_t)v24;
          id v27 = v24 - 1;
          unsigned int v28 = *--v26;
          id v29 = *(v24 - 1);
          id v30 = v28;
          id v31 = [v29 title];
          uint64_t v44 = v6;
          if (v31)
          {
            unint64_t v32 = v31;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          id v33 = [v30 title];
          if (v33)
          {
            Swift::Int v34 = v33;
            static String._unconditionallyBridgeFromObjectiveC(_:)();
          }
          unint64_t v35 = v25 + 1;
          sub_1000E4FD8();
          uint64_t v36 = StringProtocol.localizedStandardCompare<A>(_:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v36 == a5)
          {
            uint64_t v24 = (void **)v42;
            if (v35 != v44 || v25 >= v44) {
              *id v25 = *v26;
            }
            uint64_t v47 = v26;
          }
          else
          {
            id v45 = v27;
            if ((unint64_t)v35 < v42 || (unint64_t)v25 >= v42 || v35 != (id *)v42) {
              *id v25 = *v27;
            }
            id v26 = v44;
            uint64_t v24 = v27;
          }
          if (v26 <= v39) {
            break;
          }
          --v25;
          uint64_t v6 = v26;
        }
        while (v24 > v38);
      }
      goto LABEL_51;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    id v41 = &v5[v10];
    id v45 = v41;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        unint64_t v14 = *v5;
        id v15 = *v6;
        id v16 = v14;
        id v17 = [v15 title];
        if (v17)
        {
          id v18 = v17;
          id v19 = v6;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          id v19 = v6;
        }
        id v20 = [v16 title];
        if (v20)
        {
          uint64_t v21 = v20;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        sub_1000E4FD8();
        uint64_t v22 = StringProtocol.localizedStandardCompare<A>(_:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v22 == a5)
        {
          uint64_t v23 = v19 + 1;
          if (v7 < v19 || v7 >= v23 || v7 != v19) {
            void *v7 = *v19;
          }
        }
        else
        {
          if (v7 != v5) {
            void *v7 = *v5;
          }
          uint64_t v46 = ++v5;
          uint64_t v23 = v19;
        }
        ++v7;
        if (v5 >= v41) {
          break;
        }
        uint64_t v6 = v23;
      }
      while ((unint64_t)v23 < a3);
      uint64_t v47 = v7;
    }
LABEL_51:
    sub_1001F3F4C(&v47, &v46, &v45);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1000EEBC8()
{
  unint64_t result = qword_10090B040;
  if (!qword_10090B040)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10090B040);
  }
  return result;
}

unint64_t sub_1000EEC08()
{
  unint64_t result = qword_10090A9A8;
  if (!qword_10090A9A8)
  {
    sub_100096058(&qword_100914420);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10090A9A8);
  }
  return result;
}

uint64_t sub_1000EEC64()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090A9B0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090A9B0);
  if (qword_1009077F8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942430);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t *sub_1000EED2C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v86 = a4;
  v87  = a3;
  v94  = a1;
  uint64_t v95 = a2;
  uint64_t v89 = *v4;
  uint64_t v77 = sub_100094134((uint64_t *)&unk_10090DD20);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  BOOL v75 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100094134((uint64_t *)&unk_1009081D0);
  uint64_t v80 = *(void *)(v6 - 8);
  uint64_t v81 = v6;
  __chkstk_darwin(v6);
  uint64_t v78 = (char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10090DD30);
  uint64_t v82 = *(void *)(v8 - 8);
  v83  = v8;
  __chkstk_darwin(v8);
  uint64_t v79 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v10 - 8);
  uint64_t v74 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = (void *)sub_100094134(&qword_10090AAA8);
  uint64_t v69 = (void (**)(char *, void *))*(v70 - 1);
  __chkstk_darwin(v70);
  uint64_t v90 = (char *)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100094134((uint64_t *)&unk_10090AAB0);
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v71 = (char *)v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v92 = *(void *)(v14 - 8);
  uint64_t v93 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v68 = (char *)v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v91 = (char *)v66 - v17;
  uint64_t v88 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v18 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  id v20 = (char *)v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v21);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v22 - 8);
  v4[2]  = 0xD000000000000033;
  v4[3]  = 0x80000001007C9870;
  uint64_t v85 = v4 + 4;
  swift_unknownObjectWeakInit();
  uint64_t v84 = (uint64_t)(v4 + 5);
  v4[6]  = 0;
  swift_unknownObjectWeakInit();
  v4[7]  = 0;
  uint64_t v23 = sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  static DispatchQoS.utility.getter();
  uint64_t v96 = _swiftEmptyArrayStorage;
  sub_1000F3DDC((unint64_t *)&qword_10090AAC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100094134((uint64_t *)&unk_10090DDA0);
  sub_1000967F4((unint64_t *)&qword_10090AAD0, (uint64_t *)&unk_10090DDA0);
  uint64_t v24 = v4;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v88);
  uint64_t v88 = v23;
  id v25 = v86;
  v4[11]  = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  swift_unknownObjectWeakAssign();
  v4[6]  = (uint64_t)v87;
  swift_unknownObjectWeakAssign();
  if (v25) {
    id v26 = v25;
  }
  else {
    id v26 = [self sharedInstance];
  }
  v4[9]  = (uint64_t)_swiftEmptyArrayStorage;
  v4[12]  = (uint64_t)v26;
  *((unsigned char *)v4 + 64)  = 1;
  v4[10]  = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v85 = v4 + 10;
  uint64_t v27 = qword_100906EA8;
  id v28 = v25;
  uint64_t v30 = v92;
  uint64_t v29 = v93;
  id v31 = v90;
  unint64_t v32 = v91;
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_10008E2DC(v33, (uint64_t)qword_10090A9B0);
  Swift::Int v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "os_transaction INIT {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}", v36, 2u);
    id v31 = v90;
    swift_slowDealloc();
  }

  uint64_t v37 = os_transaction_create();
  if (v37)
  {
    uint64_t v90 = (char *)v37;
    sub_1000963CC(0, &qword_10090AAD8);
    id v38 = (id)v24[11];
    v87  = (void *)sub_1005A838C(v38);

    sub_1000963CC(0, &qword_10090AAE0);
    uint64_t v39 = sub_1005A840C();
    id v41 = v40;
    id v42 = [self defaultCenter];
    if (qword_100907568 != -1) {
      swift_once();
    }
    id v86 = v28;
    NSNotificationCenter.publisher(for:object:)();

    uint64_t v96 = v87;
    uint64_t v97 = v39;
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v68, v32, v29);
    swift_retain();
    swift_retain();
    sub_100094134(&qword_10090AAE8);
    uint64_t v84 = v39;
    sub_1000967F4((unint64_t *)&unk_10090AAF0, &qword_10090AAE8);
    sub_1000F3DDC((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
    Publishers.Zip3.init(_:_:_:)();
    if (qword_1009070D8 != -1) {
      swift_once();
    }
    id v43 = (void *)qword_100942078;
    uint64_t v96 = (void *)qword_100942078;
    uint64_t v44 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    uint64_t v68 = (char *)(v45 + 56);
    uint64_t v46 = (uint64_t)v74;
    v67(v74, 1, 1, v44);
    sub_1000967F4((unint64_t *)&unk_10090AB00, &qword_10090AAA8);
    v66[1]  = sub_100096654();
    id v47 = v43;
    id v48 = v71;
    id v49 = v70;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC(v46, (uint64_t *)&unk_1009081C0);

    v69[1](v31, v49);
    uint64_t v50 = swift_allocObject();
    unint64_t v51 = v90;
    *(void *)(v50 + 16)  = v41;
    *(void *)(v50 + 24)  = v51;
    uint64_t v69 = (void (**)(char *, void *))&protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
    sub_1000967F4((unint64_t *)&unk_10090AB70, (uint64_t *)&unk_10090AAB0);
    uint64_t v70 = v41;
    swift_unknownObjectRetain();
    uint64_t v52 = v73;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v52);
    swift_beginAccess();
    uint64_t v73 = sub_100094134(&qword_100908218);
    sub_1000967F4((unint64_t *)&unk_100908220, &qword_100908218);
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v96 = (void *)sub_100407054((void *)0x53434168637845, 0xE700000000000000, 0);
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16)  = sub_1000EFF3C;
    *(void *)(v53 + 24)  = 0;
    sub_100094134((uint64_t *)&unk_1009081E0);
    sub_100094134((uint64_t *)&unk_10090AB80);
    sub_1000967F4((unint64_t *)&unk_1009081F0, (uint64_t *)&unk_1009081E0);
    unint64_t v54 = v75;
    Publisher.map<A>(_:)();
    swift_release();
    sub_1000967F4((unint64_t *)&unk_10090AB90, (uint64_t *)&unk_10090DD20);
    uint64_t v55 = v78;
    uint64_t v56 = v77;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v54, v56);
    swift_release();
    uint64_t v57 = (void *)qword_100942078;
    uint64_t v96 = (void *)qword_100942078;
    v67((char *)v46, 1, 1, v44);
    sub_1000967F4((unint64_t *)&unk_100908200, (uint64_t *)&unk_1009081D0);
    id v58 = v57;
    uint64_t v59 = v79;
    uint64_t v60 = v81;
    Publisher.receive<A>(on:options:)();
    sub_1000966BC(v46, (uint64_t *)&unk_1009081C0);

    (*(void (**)(char *, uint64_t))(v80 + 8))(v55, v60);
    sub_1000967F4(&qword_100908210, (uint64_t *)&unk_10090DD30);
    uint64_t v61 = v83;
    Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
    (*(void (**)(char *, uint64_t))(v82 + 8))(v59, v61);
    swift_beginAccess();
    AnyCancellable.store<A>(in:)();
    swift_endAccess();
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    swift_release();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v91, v93);
  }
  else
  {
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "ExchACS: Couldn't create os_transaction_t for waiting pendingSystemAvailable", v64, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
  }
  return v24;
}

void sub_1000EFCFC()
{
  sub_1000EFDEC();
  if (qword_100906EA8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090A9B0);
  oslog  = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "os_transaction RELEASE {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000EFDEC()
{
  uint64_t v1 = v0;
  *(unsigned char *)(v0 + 64)  = 0;
  if (qword_100906EA8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E2DC(v2, (uint64_t)qword_10090A9B0);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ExchACS: Done waiting for system to become available upon daemon launch, now trying to observe for primary CK account PersonIDSalt changes", v5, 2u);
    swift_slowDealloc();
  }

  sub_1000F0198();
  swift_beginAccess();
  *(void *)(v1 + 72)  = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v7 = *(void *)(v1 + 48);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1000EFF3C(void *a1)
{
  return [a1 isExchange];
}

void sub_1000EFF5C()
{
}

void sub_1000EFF80()
{
  if ((*(unsigned char *)(v0 + 64) & 1) == 0)
  {
    uint64_t v1 = v0;
    if (qword_100906EA8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E2DC(v2, (uint64_t)qword_10090A9B0);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      if (*(void *)(v0 + 56))
      {
        uint64_t v6 = UUID.uuidString.getter();
        unint64_t v8 = v7;
      }
      else
      {
        unint64_t v8 = 0xE300000000000000;
        uint64_t v6 = 7104878;
      }
      sub_1000C51B8(v6, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "ExchACS: Received 'ExchangeAccountDidChange', gonna reset the personIDSaltObserver {observer: %{public}s}", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v9 = *(void *)(v1 + 56);
      if (!v9) {
        goto LABEL_14;
      }
    }
    else
    {

      swift_release_n();
      uint64_t v9 = *(void *)(v0 + 56);
      if (!v9)
      {
LABEL_14:
        sub_1000F0F58();
        return;
      }
    }
    Strong  = (void *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v11 = Strong;
      [Strong unobservePrimaryCloudKitAccountPersonIDSaltChanges:v9];
    }
    uint64_t v12 = *(void **)(v1 + 56);
    *(void *)(v1 + 56)  = 0;

    goto LABEL_14;
  }
}

void sub_1000F0198()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(char *, uint64_t))(v2 - 8);
  uint64_t v4 = *((void *)v3 + 8);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v76 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v76 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v76 - v13;
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_100906EA8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E2DC(v21, (uint64_t)qword_10090A9B0);
    v87  = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v22, "ExchACS: StoreController is nil when observePrimaryCloudKitAccountPersonIDSaltChanges() is invoked", v23, 2u);
      swift_slowDealloc();
    }
    goto LABEL_30;
  }
  char v16 = *(unsigned char *)(v1 + 64);
  v87  = Strong;
  if (v16)
  {
    if (qword_100906EA8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090A9B0);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "ExchACS: Trying to call observePrimaryCloudKitAccountPersonIDSaltChanges() while still pending system to be available", v20, 2u);
      swift_slowDealloc();
    }

    goto LABEL_30;
  }
  if (!*(void *)(v1 + 56))
  {
    uint64_t v31 = swift_unknownObjectWeakLoadStrong();
    if (!v31) {
      goto LABEL_30;
    }
    unint64_t v32 = (void *)v31;
    id v86 = v3;
    NSString v33 = String._bridgeToObjectiveC()();
    id v34 = [v32 newBackgroundContextWithAuthor:v33];

    if (!v34) {
      goto LABEL_30;
    }
    v94  = 0;
    os_log_type_t v35 = (void *)swift_allocObject();
    void v35[2] = &v94;
    v35[3]  = v1;
    void v35[4] = v34;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16)  = sub_1000F3F6C;
    *(void *)(v36 + 24)  = v35;
    uint64_t v84 = v35;
    uint64_t v92 = sub_10008F6F4;
    uint64_t v93 = (void (*)(char *, char *, uint64_t))v36;
    uint64_t aBlock = (void (*)(void, void, void))_NSConcreteStackBlock;
    uint64_t v89 = 1107296256;
    uint64_t v90 = sub_1003B3260;
    uint64_t v91 = &unk_1008B9800;
    uint64_t v37 = _Block_copy(&aBlock);
    uint64_t v85 = v93;
    swift_retain();
    id v38 = v34;
    swift_retain();
    swift_release();
    [v38 performBlockAndWait:v37];
    _Block_release(v37);
    LOBYTE(v37)  = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v37)
    {
      __break(1u);
    }
    else
    {
      if (v94 != 1)
      {
        if (qword_100906EA8 != -1) {
          swift_once();
        }
        uint64_t v64 = type metadata accessor for Logger();
        sub_10008E2DC(v64, (uint64_t)qword_10090A9B0);
        id v25 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v25, v65))
        {
          unint64_t v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v66 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v65, "ExchACS is not observing primary CK account personIDSalt changes this time as we have no exchange account right now", v66, 2u);
          swift_slowDealloc();
          uint64_t v67 = v38;
        }
        else
        {
          uint64_t v67 = v25;
          id v25 = v87;
          v87  = v38;
        }
        swift_release();

        goto LABEL_35;
      }
      v83  = v38;
      UUID.init()();
      if (qword_1009070D8 == -1)
      {
LABEL_23:
        id v82 = (id)qword_100942078;
        uint64_t v81 = swift_allocObject();
        swift_weakInit();
        uint64_t v39 = v86;
        id v40 = (char *)v86 + 16;
        uint64_t v85 = (void (*)(char *, char *, uint64_t))*((void *)v86 + 2);
        v85(v12, v14, v2);
        uint64_t v41 = *((unsigned __int8 *)v39 + 80);
        uint64_t v79 = ((v41 + 24) & ~v41) + v4;
        uint64_t v80 = (v41 + 24) & ~v41;
        uint64_t v42 = v80;
        uint64_t v78 = v41 | 7;
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16)  = v81;
        uint64_t v77 = (void (*)(uint64_t, char *, uint64_t))*((void *)v39 + 4);
        v77(v43 + v42, v12, v2);
        uint64_t v92 = sub_1000F3FDC;
        uint64_t v93 = (void (*)(char *, char *, uint64_t))v43;
        uint64_t aBlock = (void (*)(void, void, void))_NSConcreteStackBlock;
        uint64_t v89 = 1107296256;
        uint64_t v90 = sub_100742F60;
        uint64_t v91 = &unk_1008B9878;
        uint64_t v81 = (uint64_t)_Block_copy(&aBlock);
        id v82 = v82;
        swift_release();
        uint64_t v44 = swift_allocObject();
        swift_weakInit();
        v76[1]  = v40;
        v85(v12, v14, v2);
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16)  = v44;
        v77(v45 + v80, v12, v2);
        uint64_t v92 = sub_1000F4130;
        uint64_t v93 = (void (*)(char *, char *, uint64_t))v45;
        uint64_t aBlock = (void (*)(void, void, void))_NSConcreteStackBlock;
        uint64_t v89 = 1107296256;
        uint64_t v90 = sub_100742FE8;
        uint64_t v91 = &unk_1008B98C8;
        uint64_t v46 = _Block_copy(&aBlock);
        swift_release();
        id v47 = (const void *)v81;
        id v48 = v82;
        id v49 = [v87 observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:v82 successHandler:v81 errorHandler:v46];
        _Block_release(v46);
        _Block_release(v47);

        uint64_t v50 = *(void **)(v1 + 56);
        *(void *)(v1 + 56)  = v49;

        if (*(void *)(v1 + 56))
        {
          unint64_t v51 = v83;
          if (qword_100906EA8 != -1) {
            swift_once();
          }
          uint64_t v52 = type metadata accessor for Logger();
          sub_10008E2DC(v52, (uint64_t)qword_10090A9B0);
          v85(v6, v14, v2);
          swift_retain_n();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = swift_slowAlloc();
            uint64_t v85 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
            uint64_t aBlock = (void (*)(void, void, void))v85;
            *(_DWORD *)uint64_t v55 = 136446466;
            uint64_t v56 = UUID.uuidString.getter();
            uint64_t v95 = sub_1000C51B8(v56, v57, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            id v58 = (void (*)(char *, uint64_t))*((void *)v86 + 1);
            v58(v6, v2);
            *(_WORD *)(v55 + 12)  = 2082;
            uint64_t v59 = *(void *)(v1 + 56);
            id v86 = v58;
            if (v59)
            {
              uint64_t v60 = UUID.uuidString.getter();
              unint64_t v62 = v61;
            }
            else
            {
              uint64_t v60 = 7104878;
              unint64_t v62 = 0xE300000000000000;
            }
            uint64_t v95 = sub_1000C51B8(v60, v62, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "ExchACS is now observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s, observer: %{public}s}", (uint8_t *)v55, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v86(v14, v2);
            goto LABEL_51;
          }
          swift_release_n();

          BOOL v75 = (void (*)(char *, uint64_t))*((void *)v86 + 1);
          v75(v6, v2);
        }
        else
        {
          if (qword_100906EA8 != -1) {
            swift_once();
          }
          uint64_t v68 = type metadata accessor for Logger();
          sub_10008E2DC(v68, (uint64_t)qword_10090A9B0);
          v85(v9, v14, v2);
          uint64_t v69 = Logger.logObject.getter();
          os_log_type_t v70 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v69, v70))
          {
            uint64_t v71 = (uint8_t *)swift_slowAlloc();
            uint64_t aBlock = (void (*)(void, void, void))swift_slowAlloc();
            *(_DWORD *)uint64_t v71 = 136446210;
            uint64_t v72 = UUID.uuidString.getter();
            uint64_t v95 = sub_1000C51B8(v72, v73, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v74 = (void (*)(char *, uint64_t))*((void *)v86 + 1);
            v74(v9, v2);
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "ExchACS failed to start observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s}", v71, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v74(v14, v2);
LABEL_51:
            swift_release();
            return;
          }

          BOOL v75 = (void (*)(char *, uint64_t))*((void *)v86 + 1);
          v75(v9, v2);
        }
        v75(v14, v2);
        goto LABEL_51;
      }
    }
    swift_once();
    goto LABEL_23;
  }
  if (qword_100906EA8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E2DC(v24, (uint64_t)qword_10090A9B0);
  swift_retain_n();
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    uint64_t aBlock = (void (*)(void, void, void))swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136446210;
    if (*(void *)(v1 + 56))
    {
      uint64_t v28 = UUID.uuidString.getter();
      unint64_t v30 = v29;
    }
    else
    {
      uint64_t v28 = 7104878;
      unint64_t v30 = 0xE300000000000000;
    }
    uint64_t v95 = sub_1000C51B8(v28, v30, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "ExchACS is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}s}", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_35:

    return;
  }

  swift_release_n();
LABEL_30:
  os_log_type_t v63 = v87;
}

uint64_t sub_1000F0F58()
{
  uint64_t v19 = *v0;
  uint64_t v1 = sub_100094134((uint64_t *)&unk_1009081C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100094134((uint64_t *)&unk_10091A450);
  uint64_t v17 = *(void *)(v8 - 8);
  uint64_t v18 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultCenter];
  if (qword_100907568 != -1) {
    swift_once();
  }
  NSNotificationCenter.publisher(for:object:)();

  if (qword_1009070D8 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_100942078;
  id v20 = (id)qword_100942078;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 1, 1, v13);
  sub_1000963CC(0, (unint64_t *)&qword_10090F370);
  sub_1000F3DDC((unint64_t *)&qword_10091A460, (void (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher);
  sub_100096654();
  id v14 = v12;
  Publisher.receive<A>(on:options:)();
  sub_1000966BC((uint64_t)v3, (uint64_t *)&unk_1009081C0);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000967F4((unint64_t *)&qword_10090ABA0, (uint64_t *)&unk_10091A450);
  uint64_t v15 = v18;
  Publisher.sink<A>(weakTarget:receiveValue:receiveCompletion:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
  swift_beginAccess();
  sub_100094134(&qword_100908218);
  sub_1000967F4((unint64_t *)&unk_100908220, &qword_100908218);
  AnyCancellable.store<A>(in:)();
  swift_endAccess();
  return swift_release();
}

void sub_1000F138C()
{
  if (qword_100906EA8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E2DC(v0, (uint64_t)qword_10090A9B0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ExchACS: Received DidCompleteInitializeAllAccountsNotification", v3, 2u);
    swift_slowDealloc();
  }

  sub_1000F0198();
}

uint64_t sub_1000F1470(BOOL *a1)
{
  unint64_t v2 = sub_1000F41C4();
  if (v2 >> 62) {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a1  = v3 != 0;
  return result;
}

void sub_1000F14E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (qword_100906EA8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E2DC(v11, (uint64_t)qword_10090A9B0);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      void v19[2] = a2;
      uint64_t v15 = (uint8_t *)v14;
      uint64_t v20 = swift_slowAlloc();
      v19[1]  = a1;
      *(_DWORD *)uint64_t v15 = 136446210;
      v19[0]  = v15 + 4;
      uint64_t v16 = UUID.uuidString.getter();
      v19[3]  = sub_1000C51B8(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "ExchACS received a primary CK account personIDSalt change or initial value {debugTrackingUUID: %{public}s}", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }

    isa  = Data._bridgeToObjectiveC()().super.isa;
    sub_1000F179C(isa);
    swift_release();
  }
}

void sub_1000F179C(void *a1)
{
  uint64_t v2 = v1;
  id v3 = a1;
  uint64_t v4 = NSData.startIndex.getter();
  uint64_t v5 = NSData.endIndex.getter();

  if (v4 != v5)
  {
    Strong  = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = (void *)Strong;
      NSString v8 = String._bridgeToObjectiveC()();
      id v9 = [v7 newBackgroundContextWithAuthor:v8];

      if (v9)
      {
        uint64_t v10 = (void *)swift_allocObject();
        v10[2]  = v2;
        v10[3]  = v9;
        void v10[4] = v3;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16)  = sub_1000F44D8;
        *(void *)(v11 + 24)  = v10;
        void v15[4] = sub_100097240;
        void v15[5] = v11;
        v15[0]  = _NSConcreteStackBlock;
        v15[1]  = 1107296256;
        v15[2]  = sub_1003B3260;
        v15[3]  = &unk_1008B99B8;
        uint64_t v12 = _Block_copy(v15);
        id v13 = v3;
        swift_retain();
        id v14 = v9;
        swift_retain();
        swift_release();
        [v14 performBlockAndWait:v12];

        _Block_release(v12);
        LOBYTE(v14)  = swift_isEscapingClosureAtFileLocation();
        swift_release();
        swift_release();
        if (v14) {
          __break(1u);
        }
      }
    }
  }
}

void sub_1000F1974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_1000963CC(0, (unint64_t *)&qword_10090C120);
    NSString v8 = (void *)_convertErrorToNSError(_:)();
    if (qword_100907920 != -1) {
      swift_once();
    }
    char v9 = static NSObject.== infix(_:_:)();

    if (v9)
    {
      swift_release();
    }
    else
    {
      if (qword_100906EA8 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10008E2DC(v10, (uint64_t)qword_10090A9B0);
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      int v13 = v12;
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v24 = v22;
        *(_DWORD *)uint64_t v14 = 136446466;
        int v21 = v13;
        uint64_t v15 = UUID.uuidString.getter();
        uint64_t v23 = sub_1000C51B8(v15, v16, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        *(_WORD *)(v14 + 12)  = 2082;
        swift_getErrorValue();
        uint64_t v17 = Error.rem_errorDescription.getter();
        uint64_t v23 = sub_1000C51B8(v17, v18, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v21, "ExchACS received a primary CK account personIDSalt error {debugTrackingUUID: %{public}s, saltError: %{public}s}", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v19 = (void *)_convertErrorToNSError(_:)();
      sub_1000F1D1C(v19);
      swift_release();
    }
  }
}

void sub_1000F1D1C(void *a1)
{
  Strong  = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 newBackgroundContextWithAuthor:v5];

    if (v6)
    {
      uint64_t v7 = (void *)swift_allocObject();
      v7[2]  = v1;
      v7[3]  = v6;
      void v7[4] = a1;
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16)  = sub_1000F41A8;
      *(void *)(v8 + 24)  = v7;
      void v13[4] = sub_100097240;
      v13[5]  = v8;
      v13[0]  = _NSConcreteStackBlock;
      v13[1]  = 1107296256;
      void v13[2] = sub_1003B3260;
      v13[3]  = &unk_1008B9940;
      char v9 = _Block_copy(v13);
      swift_retain();
      id v10 = v6;
      id v11 = a1;
      swift_retain();
      swift_release();
      [v10 performBlockAndWait:v9];

      _Block_release(v9);
      isEscapingClosureAtFileLocation  = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000F1ED0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F41C4();
  unint64_t v7 = v6;
  uint64_t v52 = _swiftEmptyArrayStorage;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
LABEL_33:
    swift_once();
LABEL_17:
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E2DC(v24, (uint64_t)qword_10090A9B0);
    swift_errorRetain();
    swift_errorRetain();
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446466;
      swift_beginAccess();
      uint64_t v28 = v52;
      int64_t v29 = v52[2];
      if (v29)
      {
        os_log_type_t v48 = v26;
        unint64_t v51 = v25;
        swift_bridgeObjectRetain();
        sub_1001DE058(0, v29, 0);
        unint64_t v30 = v28 + 6;
        do
        {
          uint64_t v31 = (void *)*(v30 - 2);
          if (v31)
          {
            swift_bridgeObjectRetain();
            id v32 = v31;
            id v33 = [v32 description];
            uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v36 = v35;
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v36 = 0xE300000000000000;
            uint64_t v34 = 7104878;
          }
          unint64_t v38 = _swiftEmptyArrayStorage[2];
          unint64_t v37 = _swiftEmptyArrayStorage[3];
          if (v38 >= v37 >> 1) {
            sub_1001DE058(v37 > 1, v38 + 1, 1);
          }
          _swiftEmptyArrayStorage[2]  = v38 + 1;
          uint64_t v39 = &_swiftEmptyArrayStorage[2 * v38];
          void v39[4] = v34;
          v39[5]  = v36;
          v30 += 3;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
        id v25 = v51;
        os_log_type_t v26 = v48;
      }
      uint64_t v42 = Array.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v42, v44, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12)  = 2080;
      swift_getErrorValue();
      uint64_t v45 = Error.rem_errorDescription.getter();
      sub_1000C51B8(v45, v46, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "ExchACS failed to saved account personID {accountIDs: %{public}s, saveError: %s}", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v9 = 0;
  do
  {
    if ((v7 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v7 + 8 * v9 + 32);
    }
    id v11 = v10;
    ++v9;
    v53[0]  = v10;
    sub_1000F2458(v53, a1, a3, &v52);
  }
  while (v8 != v9);
LABEL_10:
  swift_bridgeObjectRelease_n();
  v53[0]  = 0;
  if (([a2 save:v53] & 1) == 0)
  {
    id v23 = v53[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906EA8 == -1) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  os_log_type_t v12 = v52;
  uint64_t v13 = v52[2];
  if (!v13)
  {
    id v41 = v53[0];
    return swift_bridgeObjectRelease();
  }
  id v14 = v53[0];
  swift_bridgeObjectRetain();
  uint64_t v47 = a1;
  uint64_t v15 = v12 + 6;
  do
  {
    uint64_t v17 = (void *)*(v15 - 2);
    uint64_t v16 = *(v15 - 1);
    uint64_t v18 = *v15;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v19 = a3;
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t ObjectType = swift_getObjectType();
      id v49 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 24);
      id v50 = v17;
      swift_bridgeObjectRetain();
      uint64_t v22 = v20;
      a3  = v19;
      v49(v17, v16, v18, v19, ObjectType, v22);
      a1  = v47;
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
    }
    v15 += 3;
    --v13;
  }
  while (v13);
  return swift_bridgeObjectRelease_n();
}

void sub_1000F2458(id *a1, uint64_t a2, uint64_t a3, void **a4)
{
  id v6 = *a1;
  id v7 = [*a1 personID];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v11 = 0;
  }
  uint64_t v12 = (uint64_t)sub_1000F2AB0(v6, a3);
  if (v13)
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    uint64_t v16 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v16 = v12 & 0xFFFFFFFFFFFFLL;
    }
    if (v16)
    {
      if (v11 && (v9 == v12 && v11 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        NSString v28 = String._bridgeToObjectiveC()();
        [v6 setPersonID:v28];

        id v29 = [v6 remObjectID];
        unint64_t v30 = *a4;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
        *a4  = v30;
        uint64_t v50 = v9;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v30 = sub_100309DA0(0, v30[2] + 1, 1, v30);
          *a4  = v30;
        }
        unint64_t v33 = v30[2];
        unint64_t v32 = v30[3];
        if (v33 >= v32 >> 1)
        {
          unint64_t v30 = sub_100309DA0((void *)(v32 > 1), v33 + 1, 1, v30);
          *a4  = v30;
        }
        v30[2]  = v33 + 1;
        uint64_t v34 = &v30[3 * v33];
        void v34[4] = v29;
        void v34[5] = v14;
        v34[6]  = v15;
        if (qword_100906EA8 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_10008E2DC(v35, (uint64_t)qword_10090A9B0);
        swift_bridgeObjectRetain();
        id v36 = v6;
        swift_bridgeObjectRetain();
        id v37 = v36;
        unint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        log  = v38;
        if (os_log_type_enabled(v38, v39))
        {
          os_log_type_t v49 = v39;
          uint64_t v40 = swift_slowAlloc();
          uint64_t v52 = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136446722;
          id v41 = [v37 remObjectID];
          if (v41)
          {
            uint64_t v42 = v41;
            id v43 = [v41 description];

            uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v46 = v45;
          }
          else
          {
            uint64_t v44 = 7104878;
            unint64_t v46 = 0xE300000000000000;
          }
          sub_1000C51B8(v44, v46, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12)  = 2080;
          swift_bridgeObjectRetain();
          sub_1000C51B8(v14, v15, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v40 + 22)  = 2080;
          if (v11) {
            uint64_t v47 = v50;
          }
          else {
            uint64_t v47 = 7104878;
          }
          if (v11) {
            unint64_t v48 = v11;
          }
          else {
            unint64_t v48 = 0xE300000000000000;
          }
          swift_bridgeObjectRetain();
          sub_1000C51B8(v47, v48, &v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v49, "ExchACS will save update to account personID {accountIDs: %{public}s, newPersonID: %s, oldPersonID: %s}", (uint8_t *)v40, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100906EA8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_10008E2DC(v17, (uint64_t)qword_10090A9B0);
  id v18 = v6;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    int v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)int v21 = 136446210;
    id v22 = [v18 remObjectID];
    if (v22)
    {
      id v23 = v22;
      id v24 = [v22 description];

      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;
    }
    else
    {
      uint64_t v25 = 7104878;
      unint64_t v27 = 0xE300000000000000;
    }
    sub_1000C51B8(v25, v27, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "ExchACS failed to generate a hashed personID from the salt {accountID: %{public}s}", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

id sub_1000F2AB0(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100094134((uint64_t *)&unk_100909E50);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  unint64_t v13 = (char *)v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)v72 - v14;
  id v16 = [a1 remObjectID];
  v72[1]  = a2;
  if (v16)
  {
    uint64_t v17 = v16;
    if (swift_unknownObjectWeakLoadStrong())
    {
      v72[0]  = v3;
      uint64_t v18 = *(void *)(v3 + 48);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v20 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 40))(v17, ObjectType, v18);
      unint64_t v22 = v21;
      swift_unknownObjectRelease();

LABEL_4:
      if (qword_100906EA8 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E2DC(v23, (uint64_t)qword_10090A9B0);
      id v24 = a1;
      swift_bridgeObjectRetain_n();
      id v25 = v24;
      unint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 136315394;
        id v29 = [v25 remObjectID];
        if (v29)
        {
          unint64_t v30 = v29;
          id v31 = [v29 description];

          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v34 = v33;
        }
        else
        {
          unint64_t v34 = 0xE300000000000000;
          uint64_t v32 = 7104878;
        }
        uint64_t v73 = sub_1000C51B8(v32, v34, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 12)  = 2080;
        swift_bridgeObjectRetain();
        uint64_t v73 = sub_1000C51B8(v20, v22, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "ExchACS: hashedAccountPersonID: account: %s, nonNilUsername  = %s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v49 = [self daemonUserDefaults];
      unsigned int v50 = [v49 enableHashingUserIdentifiablesWithPersonIDSalt];

      uint64_t v51 = v72[0];
      if (v50)
      {
        Strong  = swift_unknownObjectWeakLoadStrong();
        if (Strong)
        {
          uint64_t v53 = Strong;
          uint64_t v54 = *(void *)(v51 + 48);
          uint64_t v55 = swift_getObjectType();
          uint64_t v74 = v53;
          uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v58 = v57;
          uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(void *)(v54 + 8) + 8))(v20, v22, v56, v57, v55);
          swift_bridgeObjectRelease();
          sub_100097F34(v56, v58);
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v61 = v60;
          uint64_t v20 = String.base64EncodedHMACString(using:)();
          sub_100097F34(v59, v61);
          swift_bridgeObjectRelease();
        }
      }
      return (id)v20;
    }
  }
  id v35 = [a1 identifier];
  if (v35)
  {
    id v36 = v35;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, 1, 1, v6);
  }
  sub_1000F44F4((uint64_t)v13, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6))
  {
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v15, v6);
  sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  id v37 = [*(id *)(v3 + 96) accountStore];
  NSString v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v39 = [v37 accountWithIdentifier:v38];

  if (!v39) {
    return 0;
  }
  v72[0]  = v3;
  id result = [v39 accountType];
  if (!result)
  {
    __break(1u);
    goto LABEL_49;
  }
  id v41 = result;
  id v42 = [result identifier];

  if (!v42)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_33;
  }
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v44;

  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v45)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  if (v43 == v46 && v45 == v47) {
    goto LABEL_39;
  }
  char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48) {
    goto LABEL_40;
  }
LABEL_34:
  id result = [v39 accountType];
  if (result)
  {
    unint64_t v62 = result;
    id v63 = [result identifier];

    if (v63)
    {
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;

      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v66)
      {
        if (v64 != v67 || v66 != v68)
        {
          char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v71 & 1) == 0)
          {

            return 0;
          }
LABEL_40:
          id v69 = [v39 username];
          if (v69)
          {
            uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v22 = v70;

            goto LABEL_4;
          }

          return 0;
        }
LABEL_39:
        swift_bridgeObjectRelease_n();
        goto LABEL_40;
      }
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }

    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1000F32E4(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = sub_1000F41C4();
  unint64_t v6 = v5;
  unint64_t v58 = _swiftEmptyArrayStorage;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (v7 < 1)
  {
    __break(1u);
LABEL_33:
    swift_once();
LABEL_17:
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E2DC(v22, (uint64_t)qword_10090A9B0);
    id v23 = a3;
    swift_errorRetain();
    id v24 = v23;
    swift_errorRetain();
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v54 = v24;
      os_log_type_t v56 = v26;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446722;
      swift_beginAccess();
      uint64_t v28 = v58;
      int64_t v29 = v58[2];
      if (v29)
      {
        uint64_t v52 = v25;
        swift_bridgeObjectRetain();
        sub_1001DE058(0, v29, 0);
        unint64_t v30 = v28 + 6;
        do
        {
          id v31 = (void *)*(v30 - 2);
          if (v31)
          {
            swift_bridgeObjectRetain();
            id v32 = v31;
            id v33 = [v32 description];
            uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v36 = v35;
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v36 = 0xE300000000000000;
            uint64_t v34 = 7104878;
          }
          unint64_t v38 = _swiftEmptyArrayStorage[2];
          unint64_t v37 = _swiftEmptyArrayStorage[3];
          if (v38 >= v37 >> 1) {
            sub_1001DE058(v37 > 1, v38 + 1, 1);
          }
          _swiftEmptyArrayStorage[2]  = v38 + 1;
          id v39 = &_swiftEmptyArrayStorage[2 * v38];
          void v39[4] = v34;
          v39[5]  = v36;
          v30 += 3;
          --v29;
        }
        while (v29);
        swift_bridgeObjectRelease();
        id v25 = v52;
      }
      uint64_t v42 = Array.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      sub_1000C51B8(v42, v44, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12)  = 2082;
      id v45 = v54;
      id v46 = [v45 description];
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      sub_1000C51B8(v47, v49, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 22)  = 2080;
      swift_errorRetain();
      sub_100094134((uint64_t *)&unk_10090ABB0);
      uint64_t v50 = String.init<A>(describing:)();
      sub_1000C51B8(v50, v51, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v56, "ExchACS failed to reset account personID to nil {accountIDs: %{public}s, saltError: %{public}s, saveError: %s}", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = 0;
  do
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v6 + 8 * v8 + 32);
    }
    uint64_t v10 = v9;
    ++v8;
    v59[0]  = v9;
    sub_1000F3904(v59, &v58, a3);
  }
  while (v7 != v8);
LABEL_10:
  swift_bridgeObjectRelease_n();
  v59[0]  = 0;
  if (([a2 save:v59] & 1) == 0)
  {
    id v21 = v59[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100906EA8 == -1) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  uint64_t v11 = v58;
  uint64_t v12 = v58[2];
  if (!v12)
  {
    id v41 = v59[0];
    return swift_bridgeObjectRelease();
  }
  uint64_t v53 = a3;
  id v13 = v59[0];
  swift_bridgeObjectRetain();
  uint64_t v14 = v11 + 6;
  do
  {
    id v16 = (void *)*(v14 - 2);
    uint64_t v15 = *(v14 - 1);
    uint64_t v17 = *v14;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v20 = *(void (**)(void *, uint64_t, uint64_t, void *, uint64_t, uint64_t))(v18 + 32);
      id v57 = v16;
      swift_bridgeObjectRetain();
      v20(v16, v15, v17, v53, ObjectType, v18);
      swift_bridgeObjectRelease();

      swift_unknownObjectRelease();
    }
    v14 += 3;
    --v12;
  }
  while (v12);
  return swift_bridgeObjectRelease_n();
}

void sub_1000F3904(id *a1, void **a2, void *a3)
{
  id v5 = *a1;
  id v6 = [*a1 personID];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    [v5 setPersonID:0];
    id v11 = [v5 remObjectID];
    uint64_t v12 = *a2;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    *a2  = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v12 = sub_100309DA0(0, v12[2] + 1, 1, v12);
      *a2  = v12;
    }
    unint64_t v15 = v12[2];
    unint64_t v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      uint64_t v12 = sub_100309DA0((void *)(v14 > 1), v15 + 1, 1, v12);
      *a2  = v12;
    }
    v12[2]  = v15 + 1;
    id v16 = &v12[3 * v15];
    void v16[4] = v11;
    void v16[5] = v8;
    uint64_t v36 = v8;
    v16[6]  = v10;
    if (qword_100906EA8 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E2DC(v17, (uint64_t)qword_10090A9B0);
    id v18 = v5;
    id v19 = a3;
    swift_bridgeObjectRetain();
    id v20 = v18;
    id v21 = v19;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446722;
      id v25 = [v20 remObjectID];
      if (v25)
      {
        os_log_type_t v26 = v25;
        id v27 = [v25 description];

        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v30 = v29;
      }
      else
      {
        unint64_t v30 = 0xE300000000000000;
        uint64_t v28 = 7104878;
      }
      sub_1000C51B8(v28, v30, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12)  = 2080;
      swift_bridgeObjectRetain();
      sub_1000C51B8(v36, v10, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 22)  = 2082;
      id v31 = v21;
      id v32 = [v31 description];
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;

      sub_1000C51B8(v33, v35, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "ExchACS will reset account personID to nil {accountID: %{public}s, origPersonID: %s, saltError: %{public}s}", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

id *sub_1000F3D04()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  sub_1000F3DB4((uint64_t)(v0 + 5));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1000F3D5C()
{
  sub_1000F3D04();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RDExchangeAccountComplimentaryService()
{
  return self;
}

uint64_t sub_1000F3DB4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F3DDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F3E24()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000F3E64()
{
}

uint64_t sub_1000F3E6C@<X0>(uint64_t (*a1)(id)@<X1>, uint64_t *a2@<X8>)
{
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000F4724(v4, a1);
  uint64_t result = swift_release();
  *a2  = v5;
  return result;
}

BOOL sub_1000F3ED8(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 16) != 0;
}

uint64_t sub_1000F3EEC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F3F24@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000F3E6C(*(uint64_t (**)(id))(v1 + 16), a1);
}

uint64_t sub_1000F3F2C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F3F6C()
{
  return sub_1000F1470(*(BOOL **)(v0 + 16));
}

uint64_t sub_1000F3F78()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F3F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32)  = *(void *)(a2 + 32);
  *(void *)(a1 + 40)  = v2;
  return swift_retain();
}

uint64_t sub_1000F3F98()
{
  return swift_release();
}

uint64_t sub_1000F3FA0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000F3FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_1000F14E0(a1, a2, v6, v7);
}

uint64_t sub_1000F4064()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000F4130(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000F1974(a1, v4, v5);
}

uint64_t sub_1000F41A8()
{
  return sub_1000F32E4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000F41B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F41C4()
{
  uint64_t v0 = (void *)sub_1003AD42C(1uLL, 0, 7);
  sub_100094134((uint64_t *)&unk_10090AF20);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_10077B710;
  *(void *)(inited + 32)  = swift_getKeyPath();
  *(void *)(inited + 40)  = swift_getKeyPath();
  specialized Array._endMutation()();
  uint64_t v2 = (void *)sub_1003BC0CC(inited, 0, 0, (uint64_t)v0);
  swift_bridgeObjectRelease();

  sub_1000963CC(0, &qword_10090ABC0);
  uint64_t v3 = NSManagedObjectContext.fetch<A>(_:)();

  return v3;
}

const char *sub_1000F4478()
{
  return "personID";
}

uint64_t sub_1000F4490()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F44D8()
{
  return sub_1000F1ED0(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000F44E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F44F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100094134((uint64_t *)&unk_100909E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000F455C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  uint64_t v22 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v16 >= v23) {
      goto LABEL_22;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v23) {
        goto LABEL_22;
      }
      unint64_t v17 = *(void *)(v24 + 8 * v6);
      if (!v17) {
        break;
      }
    }
LABEL_18:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(a3 + 48) + 24 * v11;
    id v13 = *(void **)(v12 + 16);
    id v14 = *(id *)(v12 + 8);
    id v15 = v13;
    LOBYTE(v13)  = a4(v14);

    if (v13)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
LABEL_22:
        swift_retain();
        sub_10023FC68(a1, a2, v22, a3);
        return;
      }
    }
  }
  int64_t v18 = v16 + 2;
  if (v18 >= v23) {
    goto LABEL_22;
  }
  unint64_t v17 = *(void *)(v24 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v23) {
      goto LABEL_22;
    }
    unint64_t v17 = *(void *)(v24 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }
LABEL_24:
  __break(1u);
}

uint64_t sub_1000F4724(uint64_t a1, uint64_t (*a2)(id))
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  isStackAllocationSafe  = swift_retain_n();
  if (v7 <= 0xD || (isStackAllocationSafe  = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    sub_1000F455C((unint64_t *)((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    uint64_t v12 = v11;
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    id v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    sub_1000F455C((unint64_t *)v13, v8, a1, a2);
    uint64_t v12 = v14;
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v12;
}

Swift::Int sub_1000F491C()
{
  return Hasher._finalize()();
}

void sub_1000F4960()
{
}

Swift::Int sub_1000F4988()
{
  return Hasher._finalize()();
}

unsigned __int16 *sub_1000F49C8@<X0>(unsigned __int16 *result@<X0>, BOOL *a2@<X8>)
{
  *a2  = *result != 1;
  return result;
}

void sub_1000F49DC(_WORD *a1@<X8>)
{
  *a1  = 1;
}

uint64_t sub_1000F49E8()
{
  uint64_t v56 = *v0;
  swift_bridgeObjectRetain();
  unint64_t v1 = sub_1002EE218((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v53 = (void *)v1;
  uint64_t v2 = *(void *)(v56 + 16);
  if (v2)
  {
    unint64_t v49 = v0;
    uint64_t v3 = v0[2];
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(v56 + 40);
    uint64_t v50 = v3;
    while (1)
    {
      if (*(void *)(v3 + 16))
      {
        uint64_t v6 = *(v4 - 1);
        uint64_t v5 = *v4;
        swift_bridgeObjectRetain_n();
        unint64_t v7 = sub_1001806F8(v6, v5);
        if (v8)
        {
          size_t v9 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v7);
          uint64_t v10 = *v9;
          uint64_t v11 = v9[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!v53[2]
            || (swift_bridgeObjectRetain(),
                sub_1001806F8(v10, v11),
                char v13 = v12,
                swift_bridgeObjectRelease(),
                (v13 & 1) == 0))
          {
            sub_100094134((uint64_t *)&unk_10090A490);
            uint64_t v22 = swift_allocObject();
            *(_OWORD *)(v22 + 16)  = xmmword_100776E40;
            *(void *)(v22 + 32)  = v6;
            *(void *)(v22 + 40)  = v5;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
            v57[0]  = v53;
            uint64_t v52 = v10;
            unint64_t v25 = sub_1001806F8(v10, v11);
            uint64_t v26 = v53[2];
            BOOL v27 = (v24 & 1) == 0;
            uint64_t v28 = v26 + v27;
            if (__OFADD__(v26, v27))
            {
              __break(1u);
LABEL_36:
              __break(1u);
            }
            char v29 = v24;
            if (v53[3] >= v28)
            {
              if (isUniquelyReferenced_nonNull_native)
              {
                id v32 = v57[0];
                if ((v24 & 1) == 0) {
                  goto LABEL_25;
                }
              }
              else
              {
                sub_100319638();
                id v32 = v57[0];
                if ((v29 & 1) == 0) {
                  goto LABEL_25;
                }
              }
            }
            else
            {
              sub_100310668(v28, isUniquelyReferenced_nonNull_native);
              unint64_t v30 = sub_1001806F8(v52, v11);
              if ((v29 & 1) != (v31 & 1))
              {
                uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return result;
              }
              unint64_t v25 = v30;
              id v32 = v57[0];
              if ((v29 & 1) == 0)
              {
LABEL_25:
                v32[(v25 >> 6) + 8] |= 1 << v25;
                unint64_t v34 = (uint64_t *)(v32[6] + 16 * v25);
                *unint64_t v34 = v52;
                v34[1]  = v11;
                *(void *)(v32[7] + 8 * v25)  = v22;
                uint64_t v35 = v32[2];
                BOOL v36 = __OFADD__(v35, 1);
                uint64_t v37 = v35 + 1;
                if (v36) {
                  goto LABEL_36;
                }
                v32[2]  = v37;
                swift_bridgeObjectRetain();
LABEL_27:
                uint64_t v53 = v32;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_28:
                swift_bridgeObjectRelease();
                uint64_t v3 = v50;
                goto LABEL_4;
              }
            }
            uint64_t v33 = v32[7];
            swift_bridgeObjectRelease();
            *(void *)(v33 + 8 * v25)  = v22;
            goto LABEL_27;
          }
          uint64_t v14 = sub_1001EE49C(v57, v10, v11);
          uint64_t v16 = *v15;
          if (*v15)
          {
            unint64_t v17 = v15;
            unint64_t v51 = v14;
            swift_bridgeObjectRetain();
            char v18 = swift_isUniquelyReferenced_nonNull_native();
            *unint64_t v17 = v16;
            if ((v18 & 1) == 0)
            {
              uint64_t v16 = sub_100308F88(0, v16[2] + 1, 1, v16);
              *unint64_t v17 = v16;
            }
            unint64_t v20 = v16[2];
            unint64_t v19 = v16[3];
            if (v20 >= v19 >> 1)
            {
              uint64_t v16 = sub_100308F88((void *)(v19 > 1), v20 + 1, 1, v16);
              *unint64_t v17 = v16;
            }
            v16[2]  = v20 + 1;
            id v21 = &v16[2 * v20];
            void v21[4] = v6;
            v21[5]  = v5;
            ((void (*)(id *, void))v51)(v57, 0);
            swift_bridgeObjectRelease();
            goto LABEL_28;
          }
          ((void (*)(id *, void))v14)(v57, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
LABEL_4:
      v4 += 2;
      if (!--v2)
      {
        sub_1000F5C48((uint64_t)&v56);
        unint64_t v38 = v53;
        uint64_t v0 = v49;
        goto LABEL_31;
      }
    }
  }
  unint64_t v38 = (void *)v1;
LABEL_31:
  sub_1000F5C48((uint64_t)&v56);
  sub_100094134(&qword_100908170);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16)  = xmmword_100778370;
  *(void *)(inited + 32)  = 0xD000000000000012;
  *(void *)(inited + 40)  = 0x80000001007C9960;
  uint64_t v40 = sub_100094134((uint64_t *)&unk_10090AFB0);
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x260], 8) = v56;
  *(void *)(inited + 72)  = v40;
  *(void *)(inited + 80)  = 0xD00000000000002BLL;
  *(void *)(inited + 8_Block_object_dispose(&STACK[0x260], 8) = 0x80000001007C9980;
  uint64_t v55 = v0[1];
  uint64_t v41 = sub_100094134(&qword_10090ABD8);
  *(void *)(inited + 96)  = v55;
  *(void *)(inited + 120)  = v41;
  *(void *)(inited + 12_Block_object_dispose(&STACK[0x260], 8) = 0xD00000000000001FLL;
  *(void *)(inited + 136)  = 0x80000001007C99B0;
  *(void *)(inited + 144)  = v38;
  *(void *)(inited + 16_Block_object_dispose(&STACK[0x260], 8) = v41;
  *(void *)(inited + 176)  = 0xD000000000000019;
  *(void *)(inited + 184)  = 0x80000001007C99D0;
  uint64_t v42 = v0[3];
  uint64_t v54 = v42;
  *(void *)(inited + 216)  = sub_100094134(&qword_10090F3B0);
  *(void *)(inited + 192)  = v42;
  sub_1000F5C74((uint64_t)&v56);
  sub_1000F5C74((uint64_t)&v55);
  sub_1000F5C74((uint64_t)&v54);
  sub_1001805C0(inited);
  unint64_t v43 = self;
  isa  = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v57[0]  = 0;
  id v45 = [v43 dataWithJSONObject:isa options:0 error:v57];

  id v46 = v57[0];
  if (v45)
  {
    uint64_t v47 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v47 = v46;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return (uint64_t)v47;
}

uint64_t sub_1000F4F84@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  char v8 = (void *)sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = a3 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v14 = 0;
  uint64_t v51 = a4;
  uint64_t v52 = a1;
  uint64_t v49 = a3 + 64;
  uint64_t v50 = a3;
  int64_t v48 = v13;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i  = v15 | (v14 << 6); ; i  = __clz(__rbit64(v20)) + (v14 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(a3 + 56) + 8 * i);
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      unint64_t v53 = v12;
      int64_t v54 = v14;
      uint64_t v22 = (uint64_t *)(*(void *)(a3 + 48) + 16 * i);
      uint64_t v23 = v22[1];
      uint64_t v55 = *v22;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      char v24 = (uint64_t *)(v17 + 40);
      do
      {
        uint64_t v27 = *(v24 - 1);
        uint64_t v26 = *v24;
        swift_bridgeObjectRetain_n();
        uint64_t v28 = v23;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v31 = sub_1001806F8(v27, v26);
        uint64_t v32 = v8[2];
        BOOL v33 = (v30 & 1) == 0;
        uint64_t v34 = v32 + v33;
        if (__OFADD__(v32, v33))
        {
          __break(1u);
LABEL_44:
          __break(1u);
          goto LABEL_45;
        }
        char v35 = v30;
        if (v8[3] >= v34)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_100318A14();
          }
        }
        else
        {
          sub_10030E654(v34, isUniquelyReferenced_nonNull_native);
          unint64_t v36 = sub_1001806F8(v27, v26);
          if ((v35 & 1) != (v37 & 1)) {
            goto LABEL_47;
          }
          unint64_t v31 = v36;
        }
        uint64_t v23 = v28;
        if (v35)
        {
          unint64_t v25 = (void *)(v8[7] + 16 * v31);
          swift_bridgeObjectRelease();
          *unint64_t v25 = v55;
          v25[1]  = v28;
        }
        else
        {
          v8[(v31 >> 6) + 8] |= 1 << v31;
          unint64_t v38 = (uint64_t *)(v8[6] + 16 * v31);
          *unint64_t v38 = v27;
          v38[1]  = v26;
          id v39 = (void *)(v8[7] + 16 * v31);
          *id v39 = v55;
          v39[1]  = v28;
          uint64_t v40 = v8[2];
          BOOL v19 = __OFADD__(v40, 1);
          uint64_t v41 = v40 + 1;
          if (v19) {
            goto LABEL_44;
          }
          v8[2]  = v41;
          swift_bridgeObjectRetain();
        }
        v24 += 2;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      a4  = v51;
      a1  = v52;
      uint64_t v9 = v49;
      a3  = v50;
      int64_t v13 = v48;
      unint64_t v12 = v53;
      int64_t v14 = v54;
      if (v53) {
        goto LABEL_4;
      }
    }
    else if (v12)
    {
      goto LABEL_4;
    }
LABEL_7:
    BOOL v19 = __OFADD__(v14++, 1);
    if (v19)
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v14 >= v13) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v14);
    if (!v20) {
      break;
    }
LABEL_21:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v14 + 1;
  if (v14 + 1 >= v13) {
    goto LABEL_40;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v14 + 2;
  if (v14 + 2 >= v13) {
    goto LABEL_40;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v14 + 3;
  if (v14 + 3 >= v13) {
    goto LABEL_40;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v14 + 4;
  if (v14 + 4 >= v13) {
    goto LABEL_40;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20) {
    goto LABEL_20;
  }
  int64_t v21 = v14 + 5;
  if (v14 + 5 >= v13)
  {
LABEL_40:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v42 = swift_bridgeObjectRetain();
    uint64_t v43 = sub_1001261C0(v42);
    uint64_t result = (uint64_t)sub_1000F535C(a1, (uint64_t)v8, v43);
    if (v47)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      *a5  = a1;
      a5[1]  = a2;
      a5[2]  = v8;
      a5[3]  = a4;
      a5[4]  = v43;
    }
    return result;
  }
  unint64_t v20 = *(void *)(v9 + 8 * v21);
  if (v20)
  {
LABEL_20:
    int64_t v14 = v21;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v14 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v14 >= v13) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v14);
    ++v21;
    if (v20) {
      goto LABEL_21;
    }
  }
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1000F535C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v7 = result[4];
    uint64_t v6 = result[5];
    if (*(void *)(a2 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v9 = sub_1001806F8(v7, v6);
      if (v10)
      {
        uint64_t v11 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v9);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        swift_bridgeObjectRetain();
        if ((sub_1001CBC20(v13, v12, a3) & 1) == 0)
        {
LABEL_16:
          swift_bridgeObjectRelease();
          sub_100094134(&qword_10090ABE0);
          sub_1000F5BEC();
          swift_allocError();
          *(void *)uint64_t v21 = v13;
          *(void *)(v21 + _Block_object_dispose(&STACK[0x260], 8) = v12;
          *(unsigned char *)(v21 + 16)  = 1;
          swift_willThrow();
          return (void *)swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v3 - 1;
        if (!v14) {
          return (void *)swift_bridgeObjectRelease();
        }
        unint64_t v15 = v5 + 7;
        while (1)
        {
          uint64_t v7 = *(v15 - 1);
          uint64_t v6 = *v15;
          uint64_t v16 = *(void *)(a2 + 16);
          swift_bridgeObjectRetain();
          if (!v16) {
            break;
          }
          unint64_t v17 = sub_1001806F8(v7, v6);
          if ((v18 & 1) == 0) {
            break;
          }
          BOOL v19 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v17);
          uint64_t v13 = *v19;
          uint64_t v12 = v19[1];
          swift_bridgeObjectRetain();
          if ((sub_1001CBC20(v13, v12, a3) & 1) == 0) {
            goto LABEL_16;
          }
          v15 += 2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!--v14) {
            return (void *)swift_bridgeObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_100094134(&qword_10090ABE0);
    sub_1000F5BEC();
    swift_allocError();
    *(void *)uint64_t v20 = v7;
    *(void *)(v20 + _Block_object_dispose(&STACK[0x260], 8) = v6;
    *(unsigned char *)(v20 + 16)  = 0;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t sub_1000F553C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = self;
  isa  = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v31 = 0;
  id v9 = [v7 JSONObjectWithData:isa options:0 error:&v31];

  if (!v9)
  {
    id v20 = (id)v31;
    _convertNSErrorToError(_:)();

LABEL_18:
    swift_willThrow();
    return sub_100097F34(a1, a2);
  }
  id v10 = (id)v31;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_100094134((uint64_t *)&unk_100917670);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000F6114(0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    sub_1000F60D0(&qword_10090ABD0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    swift_allocError();
    *uint64_t v21 = 0;
    v21[1]  = 0;
    goto LABEL_18;
  }
  if (!v28[2]
    || (unint64_t v11 = sub_1001806F8(0xD000000000000012, 0x80000001007C9960), (v12 & 1) == 0)
    || (sub_10009A1B0(v28[7] + 32 * v11, (uint64_t)&v31),
        sub_100094134((uint64_t *)&unk_10090AFB0),
        (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_1000F6114(0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    sub_1000F60D0(&qword_10090ABD0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    swift_allocError();
    *uint64_t v22 = 0xD000000000000012;
    v22[1]  = 0x80000001007C9960;
    goto LABEL_18;
  }
  uint64_t v13 = "secondaryLevelElementIDsByTopLevelElementID";
  if (!v28[2]
    || (unint64_t v14 = sub_1001806F8(0xD00000000000002BLL, 0x80000001007C9980), (v15 & 1) == 0)
    || (sub_10009A1B0(v28[7] + 32 * v14, (uint64_t)&v31), sub_100094134(&qword_10090ABD8), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F6114(0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    sub_1000F60D0(&qword_10090ABD0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    swift_allocError();
    unint64_t v25 = 0xD00000000000002BLL;
LABEL_21:
    uint64_t v26 = v13 - 32;
LABEL_22:
    *char v24 = v25;
    v24[1]  = (unint64_t)v26 | 0x8000000000000000;
    goto LABEL_18;
  }
  uint64_t v13 = "topLevelElementIDsByContainerID";
  if (!v28[2]
    || (unint64_t v16 = sub_1001806F8(0xD00000000000001FLL, 0x80000001007C99B0), (v17 & 1) == 0)
    || (sub_10009A1B0(v28[7] + 32 * v16, (uint64_t)&v31), (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F6114(0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    sub_1000F60D0(&qword_10090ABD0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    swift_allocError();
    unint64_t v25 = 0xD00000000000001FLL;
    goto LABEL_21;
  }
  if (v28[2] && (unint64_t v18 = sub_1001806F8(0xD000000000000019, 0x80000001007C99D0), (v19 & 1) != 0))
  {
    sub_10009A1B0(v28[7] + 32 * v18, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v32 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000F5B8C((uint64_t)&v31);
LABEL_32:
    sub_1000F6114(0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    sub_1000F60D0(&qword_10090ABD0, &qword_10090ABC8, (uint64_t (*)(void))_s24DataDeserializationErrorOMa);
    swift_allocError();
    unint64_t v25 = 0xD000000000000019;
    uint64_t v26 = "topLevelElementIDsByContainerID";
    goto LABEL_22;
  }
  sub_100094134(&qword_10090F3B0);
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  sub_1000F4F84(v28, (uint64_t)v28, (uint64_t)v28, (uint64_t)v28, v29);
  uint64_t result = sub_100097F34(a1, a2);
  if (!v3)
  {
    long long v27 = v29[1];
    *(_OWORD *)a3  = v29[0];
    *(_OWORD *)(a3 + 16)  = v27;
    *(void *)(a3 + 32)  = v30;
  }
  return result;
}

uint64_t _s24DataDeserializationErrorOMa()
{
  return sub_1000E6FBC();
}

uint64_t sub_1000F5B8C(uint64_t a1)
{
  uint64_t v2 = sub_100094134(&qword_100908190);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000F5BEC()
{
  unint64_t result = qword_10090ABE8[0];
  if (!qword_10090ABE8[0])
  {
    sub_100096058(&qword_10090ABE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10090ABE8);
  }
  return result;
}

uint64_t sub_1000F5C48(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F5C74(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F5CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 0);
}

void *initializeBufferWithCopyOfBuffer for RDSavedTemplateSection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RDSavedTemplateSection()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for RDSavedTemplateSection(void *a1, void *a2)
{
  *a1  = *a2;
  a1[1]  = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for RDSavedTemplateSection(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1  = *a2;
  a1[1]  = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F5D58(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3)  = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F5DA8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16)  = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16)  = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(&STACK[0x260], 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1000F5DFC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1)  = -1;
  }
  return (v1 + 1);
}

void *sub_1000F5E14(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1]  = 0;
  }
  else if (a2)
  {
    result[1]  = (a2 - 1);
  }
  return result;
}

_WORD *sub_1000F5E34(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t sub_1000F5E40(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t sub_1000F5EB0(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2)  = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2)  = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2)  = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2)  = 0;
      break;
    case 2:
      *(_WORD *)(result + 2)  = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000F5F64);
    case 4:
      *(_DWORD *)(result + 2)  = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s22DataSerializationErrorOMa()
{
  return sub_1000E6FBC();
}

unsigned char *sub_1000F5FA4(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000F6040);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s24DataSerializationVersionOMa()
{
  return sub_1000E6FBC();
}

uint64_t sub_1000F6080()
{
  return sub_1000F60D0(&qword_10090AD70, &qword_10090AD78, (uint64_t (*)(void))_s24DataSerializationVersionOMa);
}

uint64_t sub_1000F60D0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000F6114(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000F6114(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1000F6160()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090AD80);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090AD80);
  if (qword_100907840 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942508);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1000F6228(uint64_t a1)
{
  id v3 = [*v1 objectIDs];
  sub_1000963CC(0, (unint64_t *)&qword_10090A3B0);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = sub_1000F65B4(a1, v4, 128, 0);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1000F62CC(uint64_t a1)
{
  id v3 = [*v1 listObjectID];
  if (qword_100907908 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_1000F65B4(a1, (unint64_t)v3, 1, (objc_class *)qword_100942578);

  return v4;
}

id sub_1000F6374()
{
  id v2 = v1;
  id v3 = [v0 listObjectID];
  uint64_t v4 = (void *)sub_100586050((unint64_t)v3, 1);
  type metadata accessor for REMCDListSection();
  id v5 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v6 = [(id)swift_getObjCClassFromMetadata() entity];
  [v5 setEntity:v6];

  [v5 setAffectedStores:0];
  [v5 setPredicate:v4];

  uint64_t v7 = NSManagedObjectContext.count<A>(for:)();
  if (!v1)
  {
    uint64_t v8 = v7;
    id v2 = [objc_allocWithZone((Class)REMStoreInvocationResult) init];
    id v9 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v8];
    [v2 storeProperty:v9 forKey:REMListSectionsDataViewFetchSectionsCountResultKey];

    id v3 = v5;
    id v5 = v9;
  }

  return v2;
}

id sub_1000F64FC()
{
  return sub_1000F6374();
}

id sub_1000F6520@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  type metadata accessor for REMListSectionStorageCDIngestor();
  swift_initStackObject();
  id result = sub_100358A2C(v4);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

NSObject *sub_1000F6584@<X0>(void **a1@<X0>, NSObject **a2@<X8>)
{
  id result = sub_1005DFE88(*a1);
  if (!v2) {
    *a2  = result;
  }
  return result;
}

uint64_t sub_1000F65B4(uint64_t a1, unint64_t a2, char a3, objc_class *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v54 - v12;
  unint64_t v14 = (objc_class *)sub_1005868C0();
  char v15 = (objc_class *)sub_100586DE0();
  uint64_t v16 = v67;
  unint64_t v17 = sub_10058707C(a2, a3, a1, a4, v14, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16) {
    return (uint64_t)v13;
  }
  unint64_t v62 = v11;
  uint64_t v18 = v66;
  if (qword_100906EB0 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_10008E2DC(v8, (uint64_t)qword_10090AD80);
  id v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v59 = v19;
  uint64_t v60 = v18 + 16;
  uint64_t v65 = v8;
  unint64_t v58 = v20;
  uint64_t v21 = ((uint64_t (*)(char *))v20)(v13);
  unint64_t v68 = v17;
  __chkstk_darwin(v21);
  *(&v54 - 2)  = (uint64_t)v13;
  sub_100094134(&qword_100921A50);
  uint64_t v22 = sub_1000963CC(0, (unint64_t *)&qword_10090AD98);
  sub_1000BFEAC(&qword_10090ADA0, &qword_100921A50);
  uint64_t v61 = v22;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v24 = Sequence.map<A>(skippingError:_:)();
  long long v27 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v26 = v18 + 8;
  unint64_t v25 = v27;
  v27(v13, v65);
  unint64_t v68 = (unint64_t)_swiftEmptyArrayStorage;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v28 = result;
  }
  else
  {
    uint64_t v28 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  uint64_t v66 = v26;
  uint64_t v64 = v24;
  id v57 = v25;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = _swiftEmptyArrayStorage;
LABEL_19:
    unint64_t v68 = (unint64_t)v34;
    sub_100094134(&qword_100910160);
    uint64_t v35 = sub_1000BFEAC((unint64_t *)&qword_10090A988, &qword_100910160);
    sub_1000ED098(&qword_10090ADA8, (unint64_t *)&qword_100909AD0);
    unint64_t v36 = Sequence<>.unique()();
    swift_bridgeObjectRelease();
    char v37 = sub_10053ACE4(v36);
    uint64_t v63 = 0;
    uint64_t v67 = v35;
    unint64_t v55 = v38;
    uint64_t v56 = v37;
    swift_bridgeObjectRelease();
    unint64_t v68 = (unint64_t)_swiftEmptyArrayStorage;
    if (v28)
    {
      swift_bridgeObjectRetain();
      for (i  = 0; i != v28; ++i)
      {
        if ((v17 & 0xC000000000000001) != 0) {
          id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v40 = *(id *)(v17 + 8 * i + 32);
        }
        uint64_t v41 = v40;
        id v42 = [v40 list];

        if (v42)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = (void *)v68;
      uint64_t v43 = v65;
    }
    else
    {
      uint64_t v43 = v65;
    }
    swift_bridgeObjectRelease();
    unint64_t v68 = (unint64_t)v23;
    uint64_t v44 = Sequence<>.unique()();
    swift_bridgeObjectRelease();
    id v45 = v62;
    uint64_t v46 = v58(v62, v59, v43);
    unint64_t v68 = v44;
    __chkstk_darwin(v46);
    *(&v54 - 2)  = (uint64_t)v45;
    sub_1000963CC(0, (unint64_t *)&unk_100914440);
    uint64_t v47 = v63;
    uint64_t v48 = Sequence.map<A>(skippingError:_:)();
    if (v47)
    {
      swift_errorRelease();
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
    else
    {
      uint64_t v49 = (void *)v48;
    }
    v57(v45, v65);
    swift_bridgeObjectRelease();
    unint64_t v68 = (unint64_t)v49;
    sub_100201C64(v55);
    sub_100094134(&qword_1009100B0);
    sub_1000BFEAC(&qword_10090ADB0, &qword_1009100B0);
    sub_1000ED098(&qword_10090ADB8, (unint64_t *)&unk_100914440);
    Sequence<>.unique()();
    swift_bridgeObjectRelease();
    id v50 = objc_allocWithZone((Class)REMListSectionsDataViewInvocationResult);
    sub_1000963CC(0, &qword_100910180);
    isa  = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v52 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v53 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v13 = (char *)[v50 initWithAccountStorages:isa listStorages:v52 listSectionStorages:v53];

    return (uint64_t)v13;
  }
  if (v28 >= 1)
  {
    for (j  = 0; j != v28; ++j)
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v31 = *(id *)(v17 + 8 * j + 32);
      }
      long long v32 = v31;
      id v33 = [v31 list];

      if (v33)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v34 = (void *)v68;
    uint64_t v23 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  __break(1u);
  __break(1u);
  return result;
}

uint64_t sub_1000F6D80()
{
  return sub_1003E9348();
}

uint64_t sub_1000F6D8C()
{
  return sub_10016D718();
}

void *sub_1000F6D94(unint64_t a1, id *a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v5) {
      break;
    }
    uint64_t v13 = _swiftEmptyArrayStorage;
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v7 = 0;
    while (v5 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      uint64_t v9 = v8;
      id v11 = v8;
      sub_1001084F8(&v11, a2, &v10, &v12);

      if (v2) {
        return (void *)swift_release();
      }
      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v5 == v7) {
        return v13;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000F6F00()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10008E278(v0, qword_10090ADC0);
  uint64_t v1 = sub_10008E2DC(v0, (uint64_t)qword_10090ADC0);
  if (qword_1009077A0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E2DC(v0, (uint64_t)qword_100942328);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

id sub_1000F6FF8()
{
  v2.receiver  = v0;
  v2.super_class  = (Class)type metadata accessor for RDXPCDebugPerformer();
  return [super dealloc];
}

uint64_t sub_1000F725C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for REMAccountSnapshotSummary();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 40) != 1)
  {
    unint64_t v10 = *(void *)(v1 + 8);
    unint64_t v11 = *(void *)(*(void *)v1 + 16);
    if (v10 == v11)
    {
LABEL_9:
      *(unsigned char *)(v1 + 40)  = 1;
      uint64_t v16 = sub_100094134(&qword_10090B058);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
    }
    if (v10 >= v11)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v4 + 16);
      unint64_t v13 = *(void *)v1
          + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
          + *(void *)(v4 + 72) * v10;
      *(void *)(v1 + _Block_object_dispose(&STACK[0x260], 8) = v10 + 1;
      uint64_t result = v12(v7, v13, v3);
      uint64_t v14 = *(void *)(v1 + 24);
      uint64_t v15 = *(void *)(v1 + 32);
      if (v15 == v14)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        goto LABEL_9;
      }
      uint64_t v17 = *(void *)(v1 + 16);
      if (v14 >= v17)
      {
        if (v15 >= v17)
        {
          if (v15 < v14)
          {
            *(void *)(v1 + 32)  = v15 + 1;
            uint64_t v18 = sub_100094134(&qword_10090B058);
            uint64_t v19 = *(int *)(v18 + 48);
            (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
            *(void *)(a1 + v19)  = v15;
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a1, 0, 1, v18);
          }
LABEL_18:
          __break(1u);
          return result;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = sub_100094134(&qword_10090B058);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(a1, 1, 1, v8);
}

void sub_1000F74E0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2]  = a2;
  v8[3]  = a3;
  void v8[4] = a4;
  void v11[4] = sub_10011EE04;
  void v11[5] = v8;
  v11[0]  = _NSConcreteStackBlock;
  v11[1]  = 1107296256;
  v11[2]  = sub_1000F7B34;
  v11[3]  = &unk_1008BAAE0;
  uint64_t v9 = _Block_copy(v11);
  id v10 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  [a1 statusReportWithCompletionBlock:v9];
  _Block_release(v9);
}

void sub_1000F75E0(uint64_t a1, dispatch_group_t group, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    dispatch_group_leave(group);
    return;
  }
  uint64_t v4 = (void *)(a3 + 16);
  uint64_t v65 = (unsigned char *)(a4 + 16);
  uint64_t v57 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v61 = v6 & *(void *)(a1 + 64);
  int64_t v58 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
LABEL_7:
  if (!v61)
  {
    int64_t v11 = v7 + 1;
    uint64_t v10 = a1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_64;
    }
    if (v11 >= v58) {
      goto LABEL_60;
    }
    unint64_t v12 = *(void *)(v57 + 8 * v11);
    int64_t v13 = v7 + 1;
    if (!v12)
    {
      int64_t v13 = v7 + 2;
      if (v7 + 2 >= v58) {
        goto LABEL_60;
      }
      unint64_t v12 = *(void *)(v57 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v7 + 3;
        if (v7 + 3 >= v58) {
          goto LABEL_60;
        }
        unint64_t v12 = *(void *)(v57 + 8 * v13);
        if (!v12)
        {
          uint64_t v14 = v7 + 4;
          if (v7 + 4 < v58)
          {
            unint64_t v12 = *(void *)(v57 + 8 * v14);
            if (v12)
            {
              int64_t v13 = v7 + 4;
              goto LABEL_22;
            }
            while (1)
            {
              int64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_65;
              }
              if (v13 >= v58) {
                break;
              }
              unint64_t v12 = *(void *)(v57 + 8 * v13);
              ++v14;
              if (v12) {
                goto LABEL_22;
              }
            }
          }
LABEL_60:
          swift_release();
          dispatch_group_leave(group);
          return;
        }
      }
    }
LABEL_22:
    int64_t v60 = v13;
    unint64_t v61 = (v12 - 1) & v12;
    unint64_t v9 = __clz(__rbit64(v12)) + (v13 << 6);
    goto LABEL_23;
  }
  unint64_t v8 = __clz(__rbit64(v61));
  int64_t v60 = v7;
  v61 &= v61 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  uint64_t v10 = a1;
LABEL_23:
  uint64_t v15 = *(void *)(v10 + 56);
  uint64_t v16 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v9);
  uint64_t v17 = (void *)v16[1];
  uint64_t v64 = *v16;
  uint64_t v18 = *(void *)(v15 + 8 * v9);
  uint64_t v62 = v18 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v18 + 32);
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & *(void *)(v18 + 64);
  uint64_t v66 = v17;
  swift_bridgeObjectRetain();
  uint64_t v67 = v18;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v22 = 0;
  int64_t v63 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      int64_t v68 = v22;
      unint64_t v25 = v24 | (v22 << 6);
    }
    else
    {
      int64_t v26 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        goto LABEL_62;
      }
      if (v26 >= v63)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        swift_release();
        int64_t v7 = v60;
        goto LABEL_7;
      }
      unint64_t v27 = *(void *)(v62 + 8 * v26);
      int64_t v28 = v22 + 1;
      if (!v27)
      {
        int64_t v28 = v22 + 2;
        if (v22 + 2 >= v63) {
          goto LABEL_6;
        }
        unint64_t v27 = *(void *)(v62 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v22 + 3;
          if (v22 + 3 >= v63) {
            goto LABEL_6;
          }
          unint64_t v27 = *(void *)(v62 + 8 * v28);
          if (!v27)
          {
            uint64_t v29 = v22 + 4;
            if (v22 + 4 >= v63) {
              goto LABEL_6;
            }
            unint64_t v27 = *(void *)(v62 + 8 * v29);
            if (!v27)
            {
              while (1)
              {
                int64_t v28 = v29 + 1;
                if (__OFADD__(v29, 1)) {
                  goto LABEL_63;
                }
                if (v28 >= v63) {
                  goto LABEL_6;
                }
                unint64_t v27 = *(void *)(v62 + 8 * v28);
                ++v29;
                if (v27) {
                  goto LABEL_44;
                }
              }
            }
            int64_t v28 = v22 + 4;
          }
        }
      }
LABEL_44:
      unint64_t v21 = (v27 - 1) & v27;
      int64_t v68 = v28;
      unint64_t v25 = __clz(__rbit64(v27)) + (v28 << 6);
    }
    uint64_t v30 = 16 * v25;
    id v31 = (uint64_t *)(*(void *)(v67 + 48) + v30);
    uint64_t v32 = *v31;
    id v33 = (void *)v31[1];
    uint64_t v34 = (uint64_t *)(*(void *)(v67 + 56) + v30);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits  = v64;
    v37._object  = v66;
    String.append(_:)(v37);
    v38._countAndFlagsBits  = 46;
    v38._object  = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v39._countAndFlagsBits  = v32;
    v39._object  = v33;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = (void *)*v4;
    id v69 = (void *)*v4;
    void *v4 = 0x8000000000000000;
    unint64_t v43 = sub_1001806F8(0x7474697379626162, 0xEB000000002E7265);
    uint64_t v44 = v41[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45))
    {
      __break(1u);
      goto LABEL_60;
    }
    char v47 = v42;
    if (v41[3] >= v46)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v50 = v69;
        if (v42) {
          goto LABEL_27;
        }
      }
      else
      {
        sub_100318A14();
        id v50 = v69;
        if (v47) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      sub_10030E654(v46, isUniquelyReferenced_nonNull_native);
      unint64_t v48 = sub_1001806F8(0x7474697379626162, 0xEB000000002E7265);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_66;
      }
      unint64_t v43 = v48;
      id v50 = v69;
      if (v47)
      {
LABEL_27:
        uint64_t v23 = (void *)(v50[7] + 16 * v43);
        swift_bridgeObjectRelease();
        *uint64_t v23 = v35;
        v23[1]  = v36;
        goto LABEL_28;
      }
    }
    v50[(v43 >> 6) + 8] |= 1 << v43;
    uint64_t v51 = (void *)(v50[6] + 16 * v43);
    *uint64_t v51 = 0x7474697379626162;
    v51[1]  = 0xEB000000002E7265;
    Class v52 = (void *)(v50[7] + 16 * v43);
    *Class v52 = v35;
    v52[1]  = v36;
    uint64_t v53 = v50[2];
    BOOL v54 = __OFADD__(v53, 1);
    uint64_t v55 = v53 + 1;
    if (v54) {
      break;
    }
    v50[2]  = v55;
    swift_bridgeObjectRetain();
LABEL_28:
    void *v4 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    *uint64_t v65 = 0;
    int64_t v22 = v68;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_1000F7B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    sub_100094134(&qword_10090B068);
    uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000F7BD8(void *a1@<X0>, unint64_t *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7 = *a2;
  id v8 = a1;
  id v9 = a3;
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10010E7EC((uint64_t)_swiftEmptyDictionarySingleton, v7, v8);
  swift_bridgeObjectRelease();

  if (!v4) {
    *a4  = v10;
  }
}

void sub_1000F7C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v10 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v11 = [(id)swift_getObjCClassFromMetadata() entity];
  [v10 setEntity:v11];

  [v10 setAffectedStores:0];
  [v10 setPredicate:a3];
  [v10 setAffectedStores:0];
  uint64_t v12 = NSManagedObjectContext.count<A>(for:)();

  if (!v5 && v12 > 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = v14;
    isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *a5;
    *a5  = 0x8000000000000000;
    sub_1002C3F10(v13, v15, a1, a2, isUniquelyReferenced_nonNull_native);
    *a5  = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1000F8250(uint64_t a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)_convertErrorToNSError(_:)();
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E2DC(v7, (uint64_t)qword_10090ADC0);
  id v8 = v6;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = a2;
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)id v11 = 138412290;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "RDXPCDebugPerformer: Failed testInitialSync {error: %@}", v11, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    a2  = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = self;
  id v15 = v8;
  uint64_t v16 = (void *)_convertErrorToNSError(_:)();

  id v17 = [v14 errorSanitizedForXPCFromError:v16];
  swift_beginAccess();
  uint64_t v18 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  id v19 = v17;
  a2(0, v18, v17);

  swift_bridgeObjectRelease();
}

uint64_t sub_1000F84B4(uint64_t a1, void (*a2)(uint64_t, uint64_t, void), uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  a2(a1, v7, 0);
  return swift_bridgeObjectRelease();
}

void sub_1000F852C(void *a1, unint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v101 = a4;
  uint64_t v97 = a8;
  uint64_t v98 = a7;
  uint64_t v96 = a6;
  uint64_t v99 = a5;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v100 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v100 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v88 - v15;
  id v17 = (void *)sub_1003AD42C(a2, a3, 0);
  sub_1000963CC(0, &qword_10090ABC0);
  id v18 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v19 = [(id)swift_getObjCClassFromMetadata() entity];
  [v18 setEntity:v19];

  [v18 setAffectedStores:0];
  [v18 setPredicate:v17];
  uint64_t v20 = v102;
  uint64_t v21 = NSManagedObjectContext.fetch<A>(_:)();
  if (v20)
  {

    return;
  }
  unint64_t v22 = v21;
  v102  = 0;
  uint64_t v23 = v13;
  uint64_t v95 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24 < 2)
    {
      uint64_t v25 = v23;
      swift_bridgeObjectRetain();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v76) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
LABEL_24:
    uint64_t aBlock = 0;
    v104  = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v79._countAndFlagsBits  = 0xD000000000000034;
    v79._object  = (void *)0x80000001007CAC90;
    String.append(_:)(v79);
    uint64_t v109 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v80 = 0;
    do
    {
      if ((v22 & 0xC000000000000001) != 0) {
        id v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v81 = *(id *)(v22 + 8 * v80 + 32);
      }
      id v82 = v81;
      ++v80;
      v83  = [v81 remObjectID];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v24 != v80);
    swift_bridgeObjectRelease();
    uint64_t v84 = self;
    sub_100094134((uint64_t *)&unk_100914BC0);
    v85._countAndFlagsBits  = Array.description.getter();
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v86._countAndFlagsBits  = 125;
    v86._object  = (void *)0xE100000000000000;
    String.append(_:)(v86);
    v87  = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v84 internalErrorWithDebugDescription:v87];

    goto LABEL_30;
  }
  uint64_t v24 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v25 = v23;
  if ((unint64_t)v24 >= 2) {
    goto LABEL_24;
  }
  if (!v24)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v77 = self;
    NSString v78 = String._bridgeToObjectiveC()();
    [v77 internalErrorWithDebugDescription:v78];

LABEL_30:
    swift_willThrow();
    return;
  }
LABEL_6:
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v26 = *(id *)(v22 + 32);
  }
  swift_bridgeObjectRelease();
  id v27 = [v26 remObjectID];
  if (!v27)
  {
    id v40 = self;
    NSString v41 = String._bridgeToObjectiveC()();
    [v40 internalErrorWithDebugDescription:v41];

    swift_willThrow();
    return;
  }
  int64_t v28 = v27;
  id v29 = [v26 accountTypeHost];
  unsigned __int8 v30 = [v29 isCloudKit];

  if ((v30 & 1) == 0)
  {
    char v42 = self;
    uint64_t aBlock = 0;
    v104  = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    uint64_t aBlock = (void **)0xD000000000000025;
    v104  = 0x80000001007CACF0;
    id v43 = [v28 description];
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v46 = v45;

    v47._countAndFlagsBits  = v44;
    v47._object  = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits  = 125;
    v48._object  = (void *)0xE100000000000000;
    String.append(_:)(v48);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v39 = [v42 internalErrorWithDebugDescription:v38];
    goto LABEL_15;
  }
  if ([v26 inactive])
  {
    id v31 = self;
    uint64_t aBlock = 0;
    v104  = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    uint64_t aBlock = (void **)0xD000000000000020;
    v104  = 0x80000001007CAD20;
    id v32 = [v28 description];
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    v36._countAndFlagsBits  = v33;
    v36._object  = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits  = 125;
    v37._object  = (void *)0xE100000000000000;
    String.append(_:)(v37);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v39 = [v31 internalErrorWithDebugDescription:v38];
LABEL_15:
    v39;

    swift_willThrow();
    return;
  }
  char v49 = *(void **)&v101[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController];
  id v50 = (char *)[v49 cloudContext];
  if (!v50)
  {
    uint64_t v73 = self;
    NSString v38 = String._bridgeToObjectiveC()();
    id v39 = [v73 internalErrorWithDebugDescription:v38];
    goto LABEL_15;
  }
  uint64_t v51 = v50;
  if ([v49 supportsSyncingToCloudKit])
  {
    v102  = a9;
    [v51 setDisabled:1];
    Date.init()();
    uint64_t v52 = v100;
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v100 + 16);
    v94  = v12;
    v53(v95, v16, v12);
    uint64_t v54 = *(unsigned __int8 *)(v52 + 80);
    uint64_t v93 = v28;
    uint64_t v55 = (v54 + 24) & ~v54;
    unint64_t v92 = (v25 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    id v90 = v26;
    unint64_t v91 = (v92 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v56 = (v91 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v89 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v58 = (v89 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v59 = swift_allocObject();
    int64_t v60 = v51;
    uint64_t v101 = v51;
    uint64_t v61 = v59;
    *(void *)(v59 + 16)  = v99;
    (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v59 + v55, v95, v94);
    *(void *)(v61 + v92)  = a1;
    uint64_t v62 = v90;
    *(void *)(v61 + v91)  = v90;
    *(void *)(v61 + v56)  = v60;
    int64_t v63 = (void *)(v61 + v57);
    uint64_t v64 = v98;
    *int64_t v63 = v96;
    v63[1]  = v64;
    uint64_t v65 = v93;
    *(void *)(v61 + v89)  = v93;
    uint64_t v66 = (void *)(v61 + v58);
    uint64_t v67 = v102;
    *uint64_t v66 = v97;
    v66[1]  = v67;
    unint64_t v107 = sub_10011E8C4;
    uint64_t v108 = v61;
    uint64_t aBlock = _NSConcreteStackBlock;
    v104  = 1107296256;
    uint64_t v105 = sub_100236C78;
    uint64_t v106 = &unk_1008BA928;
    int64_t v68 = _Block_copy(&aBlock);
    swift_retain();
    id v69 = a1;
    id v70 = v62;
    char v71 = v101;
    swift_retain();
    id v72 = v65;
    swift_retain();
    swift_release();
    [v71 cancelEverythingWithCompletionHandler:v68];
    _Block_release(v68);

    (*(void (**)(char *, uint64_t))(v100 + 8))(v16, v94);
  }
  else
  {
    uint64_t v74 = self;
    NSString v75 = String._bridgeToObjectiveC()();
    [v74 internalErrorWithDebugDescription:v75];

    swift_willThrow();
  }
}

void sub_1000F8F48(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v39 = a7;
  id v40 = a8;
  uint64_t v37 = a10;
  uint64_t v38 = a6;
  uint64_t v36 = a9;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16)  = xmmword_100776E40;
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  *(void *)(v18 + 56)  = &type metadata for Double;
  *(void *)(v18 + 64)  = &protocol witness table for Double;
  *(void *)(v18 + 32)  = v20;
  uint64_t v21 = String.init(format:_:)();
  uint64_t v23 = v22;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = *(void *)(a1 + 16);
  *(void *)(a1 + 16)  = 0x8000000000000000;
  sub_1002C3F10(v21, v23, 0xD00000000000001FLL, 0x80000001007CAD70, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 16)  = v42;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2]  = a4;
  v25[3]  = a3;
  id v26 = a3;
  void v25[4] = a1;
  void v25[5] = a5;
  uint64_t v27 = v39;
  v25[6]  = v38;
  v25[7]  = v27;
  int64_t v28 = v40;
  uint64_t v29 = v36;
  uint64_t v30 = v37;
  v25[8]  = v40;
  v25[9]  = v29;
  v25[10]  = v30;
  aBlock[4]  = sub_10011EA00;
  aBlock[5]  = v25;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008BA978;
  id v31 = _Block_copy(aBlock);
  id v32 = a4;
  id v33 = v26;
  swift_retain();
  id v34 = a5;
  swift_retain();
  id v35 = v28;
  swift_retain();
  swift_release();
  [v33 performBlock:v31];
  _Block_release(v31);
}

uint64_t sub_1000F9220(void *a1, void *a2, uint64_t a3, void *a4, void (*a5)(uint64_t), void (*a6)(uint64_t), void *a7, uint64_t a8, char *a9)
{
  v130  = a7;
  v131  = a8;
  v137  = a6;
  v138  = a5;
  v132  = a4;
  v133  = a3;
  v136  = a2;
  uint64_t v10 = type metadata accessor for Date();
  v134  = *(void *)(v10 - 8);
  unint64_t v11 = *(void *)(v134 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v116 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v116 - v17;
  __chkstk_darwin(v16);
  v135  = (char *)&v116 - v19;
  KeyPath  = swift_getKeyPath();
  id v21 = a1;
  uint64_t v22 = (void *)sub_10032F5FC(KeyPath, a1);
  swift_release();

  uint64_t v23 = sub_1005518A0((uint64_t)v22);
  v128  = v15;
  v124  = v11;
  v125  = (char *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126  = v21;
  v127  = v18;
  v129  = v10;
  id v24 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v23];
  [v24 setResultType:2];
  uint64_t v25 = v135;
  Date.init()();
  *(void *)&long long aBlock = 0;
  id v26 = [v136 executeRequest:v24 error:&aBlock];
  uint64_t v27 = (void *)v23;
  int64_t v28 = (void *)aBlock;
  if (!v26)
  {
    id v36 = (id)aBlock;
    uint64_t v37 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v38 = v37;

    (*(void (**)(char *, uint64_t))(v134 + 8))(v25, v129);
LABEL_8:
    NSString v41 = v138;
LABEL_9:
    v41(v38);
    return swift_errorRelease();
  }
  uint64_t v29 = v26;
  uint64_t v30 = sub_1000963CC(0, (unint64_t *)&unk_100916F40);
  *((void *)&v141 + 1)  = v30;
  *(void *)&long long aBlock = v29;
  uint64_t v31 = sub_1000963CC(0, (unint64_t *)&unk_10090B030);
  id v32 = v28;
  id v33 = v29;
  throwingCast<A>(_:as:failureMessage:)();
  uint64_t v34 = v129;
  uint64_t v35 = v134;
  v123  = v33;
  v122  = v30;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  id v39 = v139;
  if ([v139 result])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long aBlock = 0u;
    v141  = 0u;
  }
  uint64_t v40 = v133;
  throwingCast<A>(_:as:failureMessage:)();
  v120  = v31;
  id v43 = (id *)(v40 + 16);
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  *(void *)&long long aBlock = v139;
  v121  = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v45 = v44;
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  v139  = *(char **)(v40 + 16);
  *(void *)(v40 + 16)  = 0x8000000000000000;
  sub_1002C3F10(v121, v45, 0xD00000000000001ELL, 0x80000001007CAD90, isUniquelyReferenced_nonNull_native);
  *(void *)(v40 + 16)  = v139;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v119  = sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v47 = swift_allocObject();
  v118  = xmmword_100776E40;
  *(_OWORD *)(v47 + 16)  = xmmword_100776E40;
  Swift::String v48 = v127;
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v50 = v49;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v35 + 8);
  v51(v48, v34);
  *(void *)(v47 + 56)  = &type metadata for Double;
  *(void *)(v47 + 64)  = &protocol witness table for Double;
  *(void *)(v47 + 32)  = v50;
  v121  = String.init(format:_:)();
  uint64_t v53 = v52;
  swift_beginAccess();
  char v54 = swift_isUniquelyReferenced_nonNull_native();
  v139  = (char *)*v43;
  *id v43 = (id)0x8000000000000000;
  sub_1002C3F10(v121, v53, 0xD00000000000001FLL, 0x80000001007CADB0, v54);
  *id v43 = v139;
  swift_bridgeObjectRelease();
  swift_endAccess();

  v51(v135, v34);
  uint64_t v55 = sub_1005518C8(0);
  id v56 = v136;
  unint64_t v57 = v128;
  unint64_t v58 = (void *)v55;
  v117  = v51;
  uint64_t v59 = (char *)(v35 + 8);
  id v60 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v55];
  [v60 setResultType:2];
  Date.init()();
  *(void *)&long long aBlock = 0;
  id v61 = [v56 executeRequest:v60 error:&aBlock];
  uint64_t v62 = (void *)aBlock;
  if (!v61)
  {
    id v67 = (id)aBlock;
    uint64_t v68 = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v38 = v68;

    v117(v57, v129);
    goto LABEL_8;
  }
  int64_t v63 = v61;
  *((void *)&v141 + 1)  = v122;
  *(void *)&long long aBlock = v61;
  id v64 = v62;
  id v65 = v63;
  throwingCast<A>(_:as:failureMessage:)();
  uint64_t v66 = v129;
  _s7remindd37RDStaledFileAttachmentCleanupActivityC40RDStaledFileAttachmentCleanupRateReducerVwxx_0((uint64_t)&aBlock);
  id v69 = v139;
  id v70 = [v139 result];
  v135  = v69;
  if (v70)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long aBlock = 0u;
    v141  = 0u;
  }
  char v71 = v43;
  throwingCast<A>(_:as:failureMessage:)();
  sub_1000966BC((uint64_t)&aBlock, &qword_100908190);
  *(void *)&long long aBlock = v139;
  uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v74 = v73;
  swift_beginAccess();
  char v75 = swift_isUniquelyReferenced_nonNull_native();
  v139  = (char *)*v43;
  *id v43 = (id)0x8000000000000000;
  sub_1002C3F10(v72, v74, 0xD000000000000020, 0x80000001007CADD0, v75);
  *id v43 = v139;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16)  = v118;
  uint64_t v77 = v127;
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v79 = v78;
  uint64_t v80 = v117;
  v117(v77, v66);
  *(void *)(v76 + 56)  = &type metadata for Double;
  *(void *)(v76 + 64)  = &protocol witness table for Double;
  *(void *)(v76 + 32)  = v79;
  uint64_t v81 = String.init(format:_:)();
  v83  = v82;
  swift_beginAccess();
  char v84 = swift_isUniquelyReferenced_nonNull_native();
  v139  = (char *)*v71;
  *char v71 = (id)0x8000000000000000;
  sub_1002C3F10(v81, v83, 0xD000000000000023, 0x80000001007CAE00, v84);
  *char v71 = v139;
  swift_bridgeObjectRelease();
  swift_endAccess();

  Swift::String v85 = v59;
  v80(v128, v66);
  id v86 = v126;
  [v126 setCkUserRecordName:0];
  [v86 setListIDsMergeableOrdering:0];
  [v86 setListIDsMergeableOrdering_v2:0];
  [v86 setCkServerChangeTokens:0];
  [v86 setCkSharedObjectOwnerNames:0];
  [v86 setLists:0];
  [v86 setReminders:0];
  *(void *)&long long aBlock = 0;
  v87  = [v136 save:&aBlock];
  uint64_t v88 = (void *)aBlock;
  if (!v87)
  {
    v114  = (id)aBlock;
    v115  = _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v38 = v115;
    NSString v41 = v138;
    goto LABEL_9;
  }
  v128  = a9;
  swift_beginAccess();
  id v89 = v88;
  uint64_t v90 = v133;
  char v91 = swift_isUniquelyReferenced_nonNull_native();
  v139  = *(char **)(v90 + 16);
  *(void *)(v90 + 16)  = 0x8000000000000000;
  sub_1002C3F10(1702195828, 0xE400000000000000, 0xD00000000000001CLL, 0x80000001007CAE30, v91);
  *(void *)(v90 + 16)  = v139;
  swift_bridgeObjectRelease();
  swift_endAccess();
  id v92 = v132;
  [v132 setDisabled:0];
  uint64_t v93 = v127;
  Date.init()();
  v123  = @"TestInitialSync";
  v135  = v85;
  v94  = v134;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v125, v93, v66);
  unint64_t v95 = (*(unsigned __int8 *)(v94 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  v124  = (v124 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v96 = (v124 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v97 = (v96 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v98 = (v97 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v99 = (v98 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 16)  = v133;
  (*(void (**)(unint64_t, char *, uint64_t))(v94 + 32))(v100 + v95, v125, v66);
  *(void *)(v100 + v124)  = v92;
  uint64_t v101 = (void (**)(uint64_t))(v100 + v96);
  v102  = v137;
  *uint64_t v101 = v138;
  v101[1]  = v102;
  id v103 = v136;
  *(void *)(v100 + v97)  = v136;
  v104  = v126;
  *(void *)(v100 + v9_Block_object_dispose(&STACK[0x260], 8) = v126;
  uint64_t v106 = v130;
  uint64_t v105 = v131;
  *(void *)(v100 + v99)  = v130;
  unint64_t v107 = (void *)(v100 + ((v99 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v108 = v128;
  *unint64_t v107 = v105;
  v107[1]  = v108;
  v142  = sub_10011EBD8;
  v143  = v100;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1)  = 1107296256;
  *(void *)&v141  = sub_1000E13D0;
  *((void *)&v141 + 1)  = &unk_1008BA9C8;
  uint64_t v109 = _Block_copy(&aBlock);
  id v110 = v104;
  swift_retain();
  id v111 = v132;
  swift_retain();
  v112  = v103;
  v113  = v106;
  swift_retain();
  swift_release();
  [v111 syncWithReason:v123 discretionary:0 completionHandler:v109];
  _Block_release(v109);
  return ((uint64_t (*)(char *, uint64_t))v117)(v127, v129);
}

void sub_1000F9FF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11)
{
  char v84 = a7;
  Swift::String v85 = a8;
  id v86 = a5;
  v87  = a6;
  uint64_t v88 = a1;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100094134((uint64_t *)&unk_10090A430);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16)  = xmmword_100776E40;
  Date.init()();
  Date.timeIntervalSince(_:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  *(void *)(v17 + 56)  = &type metadata for Double;
  *(void *)(v17 + 64)  = &protocol witness table for Double;
  *(void *)(v17 + 32)  = v19;
  uint64_t v20 = String.init(format:_:)();
  uint64_t v22 = v21;
  id v92 = (void *)(a2 + 16);
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native  = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v99 = *(void **)(a2 + 16);
  *(void *)(a2 + 16)  = 0x8000000000000000;
  sub_1002C3F10(v20, v22, 0xD000000000000012, 0x80000001007CAE50, isUniquelyReferenced_nonNull_native);
  *(void *)(a2 + 16)  = v99;
  swift_bridgeObjectRelease();
  swift_endAccess();
  id v24 = [a4 lastSyncMetrics];
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = [v24 dictionaryRepresentation];

    unint64_t v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v27 = sub_1002ED5C0((uint64_t)_swiftEmptyArrayStorage);
  }
  int64_t v28 = 0;
  uint64_t v81 = a10;
  uint64_t v82 = a9;
  v83  = a11;
  uint64_t v29 = *(void *)(v27 + 64);
  unint64_t v89 = v27 + 64;
  uint64_t v30 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & v29;
  int64_t v90 = (unint64_t)(v30 + 63) >> 6;
  while (1)
  {
    if (v32)
    {
      unint64_t v34 = __clz(__rbit64(v32));
      v32 &= v32 - 1;
      int64_t v91 = v28;
      unint64_t v35 = v34 | (v28 << 6);
      goto LABEL_25;
    }
    int64_t v36 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      goto LABEL_41;
    }
    if (v36 >= v90) {
      break;
    }
    unint64_t v37 = *(void *)(v89 + 8 * v36);
    int64_t v38 = v28 + 1;
    if (!v37)
    {
      int64_t v38 = v28 + 2;
      if (v28 + 2 >= v90) {
        break;
      }
      unint64_t v37 = *(void *)(v89 + 8 * v38);
      if (!v37)
      {
        int64_t v38 = v28 + 3;
        if (v28 + 3 >= v90) {
          break;
        }
        unint64_t v37 = *(void *)(v89 + 8 * v38);
        if (!v37)
        {
          uint64_t v39 = v28 + 4;
          if (v28 + 4 >= v90) {
            break;
          }
          unint64_t v37 = *(void *)(v89 + 8 * v39);
          if (!v37)
          {
            while (1)
            {
              int64_t v38 = v39 + 1;
              if (__OFADD__(v39, 1)) {
                goto LABEL_42;
              }
              if (v38 >= v90) {
                goto LABEL_36;
              }
              unint64_t v37 = *(void *)(v89 + 8 * v38);
              ++v39;
              if (v37) {
                goto LABEL_24;
              }
            }
          }
          int64_t v38 = v28 + 4;
        }
      }
    }
LABEL_24:
    unint64_t v32 = (v37 - 1) & v37;
    int64_t v91 = v38;
    unint64_t v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_25:
    uint64_t v40 = 16 * v35;
    uint64_t v41 = *(void *)(v27 + 56);
    unint64_t v42 = v27;
    id v43 = (uint64_t *)(*(void *)(v27 + 48) + v40);
    uint64_t v44 = *v43;
    uint64_t v45 = (void *)v43[1];
    uint64_t v46 = (uint64_t *)(v41 + v40);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[1];
    uint64_t aBlock = 0x2E636E7973;
    v94  = 0xE500000000000000;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits  = v44;
    v49._object  = v45;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    uint64_t v51 = aBlock;
    uint64_t v50 = v94;
    uint64_t v52 = v92;
    swift_beginAccess();
    char v53 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v99 = (void *)*v52;
    char v54 = v99;
    *uint64_t v52 = 0x8000000000000000;
    unint64_t v56 = sub_1001806F8(v51, v50);
    uint64_t v57 = v54[2];
    BOOL v58 = (v55 & 1) == 0;
    uint64_t v59 = v57 + v58;
    if (__OFADD__(v57, v58))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return;
    }
    char v60 = v55;
    if (v54[3] >= v59)
    {
      if (v53)
      {
        int64_t v63 = v99;
        if (v55) {
          goto LABEL_7;
        }
      }
      else
      {
        sub_100318A14();
        int64_t v63 = v99;
        if (v60) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      sub_10030E654(v59, v53);
      unint64_t v61 = sub_1001806F8(v51, v50);
      if ((v60 & 1) != (v62 & 1)) {
        goto LABEL_43;
      }
      unint64_t v56 = v61;
      int64_t v63 = v99;
      if (v60)
      {
LABEL_7:
        id v33 = (void *)(v63[7] + 16 * v56);
        swift_bridgeObjectRelease();
        *id v33 = v47;
        v33[1]  = v48;
        goto LABEL_8;
      }
    }
    v63[(v56 >> 6) + 8] |= 1 << v56;
    id v64 = (uint64_t *)(v63[6] + 16 * v56);
    *id v64 = v51;
    v64[1]  = v50;
    id v65 = (void *)(v63[7] + 16 * v56);
    *id v65 = v47;
    v65[1]  = v48;
    uint64_t v66 = v63[2];
    BOOL v67 = __OFADD__(v66, 1);
    uint64_t v68 = v66 + 1;
    if (v67) {
      goto LABEL_40;
    }
    v63[2]  = v68;
    swift_bridgeObjectRetain();
LABEL_8:
    void *v92 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    unint64_t v27 = v42;
    int64_t v28 = v91;
  }
LABEL_36:
  swift_release();
  uint64_t v69 = v88;
  if (v88)
  {
    swift_errorRetain();
    v86(v69);
    swift_errorRelease();
  }
  else
  {
    id v70 = (void *)swift_allocObject();
    char v71 = v84;
    uint64_t v72 = v85;
    v70[2]  = v84;
    v70[3]  = v72;
    uint64_t v73 = v81;
    uint64_t v74 = v82;
    v70[4]  = v82;
    v70[5]  = v73;
    char v75 = v86;
    uint64_t v76 = v87;
    v70[6]  = v83;
    v70[7]  = v75;
    v70[8]  = v76;
    unint64_t v97 = sub_10011ED18;
    unint64_t v98 = v70;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    v94  = 1107296256;
    unint64_t v95 = sub_100236C78;
    unint64_t v96 = &unk_1008BAA18;
    uint64_t v77 = _Block_copy(&aBlock);
    id v78 = v71;
    id v79 = v72;
    id v80 = v74;
    swift_retain();
    swift_retain();
    swift_release();
    [v78 performBlock:v77];
    _Block_release(v77);
  }
}

void sub_1000FA65C(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t))
{
  uint64_t v8 = _s10PredicatesOMa(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 refreshObject:a2 mergeChanges:0];
  *(void *)uint64_t v10 = a3;
  v10[8]  = 2;
  swift_storeEnumTagMultiPayload();
  id v11 = a3;
  uint64_t v12 = (void *)sub_10038F1F0();
  sub_10011C774((uint64_t)v10, _s10PredicatesOMa);
  sub_1000963CC(0, (unint64_t *)&qword_10090B040);
  id v13 = [objc_allocWithZone((Class)NSFetchRequest) init];
  id v14 = [(id)swift_getObjCClassFromMetadata() entity];
  [v13 setEntity:v14];

  [v13 setAffectedStores:0];
  [v13 setPredicate:v12];

  uint64_t v15 = NSManagedObjectContext.count<A>(for:)();
  a4(v15);
}

void sub_1000FA864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    v7.super.isa  = Dictionary._bridgeToObjectiveC()().super.isa;
    if (a3)
    {
LABEL_3:
      uint64_t v8 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v7.super.isa  = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_6:
  id v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, Class))(a4 + 16))(a4, a1, v7.super.isa);
}

void sub_1000FA914(uint64_t a1, void (*a2)(void))
{
  uint64_t v2 = a2;
  if (a1)
  {
    uint64_t v3 = (void *)_convertErrorToNSError(_:)();
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E2DC(v4, (uint64_t)qword_10090ADC0);
    id v5 = v3;
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = v2;
      id v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      id v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v9 = v5;

      _os_log_impl((void *)&_mh_execute_header, v6, v7, "RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}", v8, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      uint64_t v2 = v16;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v11 = self;
    id v12 = v5;
    id v13 = (void *)_convertErrorToNSError(_:)();

    id v14 = [v11 errorSanitizedForXPCFromError:v13];
    id v15 = v14;
    ((void (*)(id))v2)(v14);
  }
  else
  {
    a2();
  }
}

uint64_t sub_1000FAB44(char a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, char *a7, uint64_t a8, void *a9, uint64_t a10, NSObject *a11)
{
  uint64_t v81 = a8;
  Swift::String v85 = a7;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  id v86 = (uint64_t *)(a4 + 16);
  v83  = v18;
  uint64_t v84 = __chkstk_darwin(v17);
  uint64_t v82 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = v19;
  if ((a1 & 1) != 0 || !a2)
  {
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E2DC(v31, (uint64_t)qword_10090ADC0);
    id v32 = a3;
    id v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v79 = a6;
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      int64_t v36 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 138412290;
      aBlock[0]  = (uint64_t)v32;
      id v37 = v32;
      a6  = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v36 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "RDXPCDebugPerformer: testReinitializeCloudKit: Done ACAccont migration flags unset {acAccount: %@}", v35, 0xCu);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    int64_t v38 = v86;
  }
  else
  {
    swift_errorRetain();
    if (qword_100906EB8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E2DC(v20, (uint64_t)qword_10090ADC0);
    swift_errorRetain();
    id v21 = a3;
    swift_errorRetain();
    id v22 = v21;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc();
      unint64_t v27 = (void *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      aBlock[0]  = v79;
      *(_DWORD *)uint64_t v26 = 138412546;
      LODWORD(v7_Block_object_dispose(&STACK[0x260], 8) = v25;
      uint64_t v88 = (uint64_t)v22;
      os_log_t v77 = v23;
      id v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v27 = v22;

      *(_WORD *)(v26 + 12)  = 2080;
      swift_getErrorValue();
      uint64_t v29 = Error.rem_errorDescription.getter();
      uint64_t v88 = sub_1000C51B8(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      uint64_t v23 = v77;
      _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "RDXPCDebugPerformer: testReinitializeCloudKit: ERROR unsetting ACAccount migration flags {acAccount: %@, error: %s}", (uint8_t *)v26, 0x16u);
      sub_100094134((uint64_t *)&unk_10090A040);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    int64_t v38 = v86;
    swift_beginAccess();
    *int64_t v38 = a2;
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t v39 = *v38;
  if (v39)
  {
    swift_errorRetain();
    ((void (*)(uint64_t))a5)(v39);
    return swift_errorRelease();
  }
  uint64_t v40 = *(void **)&v85[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_storeController];
  uint64_t v41 = (char *)[v40 cloudContext];
  if (!v41)
  {
    uint64_t v68 = self;
    NSString v69 = String._bridgeToObjectiveC()();
    id v70 = [v68 internalErrorWithDebugDescription:v69];

    swift_willThrow();
LABEL_28:
    swift_errorRetain();
    ((void (*)(id))a5)(v70);
    swift_errorRelease();
    return swift_errorRelease();
  }
  unint64_t v42 = v41;
  id v43 = [v40 accountUtils];
  if (!v43)
  {
    char v71 = self;
    NSString v72 = String._bridgeToObjectiveC()();
    id v70 = [v71 internalErrorWithDebugDescription:v72];

    swift_willThrow();
    goto LABEL_28;
  }
  id v44 = v43;
  if (([v40 supportsSyncingToCloudKit] & 1) == 0)
  {
    uint64_t v73 = self;
    NSString v74 = String._bridgeToObjectiveC()();
    id v70 = [v73 internalErrorWithDebugDescription:v74];

    swift_willThrow();
    swift_release();
    goto LABEL_28;
  }
  [v42 setDisabled:1];
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  id v78 = v44;
  Swift::String v85 = v42;
  id v86 = a5;
  uint64_t v79 = a6;
  os_log_t v77 = a11;
  uint64_t v75 = a10;
  uint64_t v76 = a9;
  uint64_t v45 = type metadata accessor for Logger();
  sub_10008E2DC(v45, (uint64_t)qword_10090ADC0);
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit disabled.", v48, 2u);
    swift_slowDealloc();
  }

  uint64_t v50 = v83;
  uint64_t v49 = v84;
  uint64_t v51 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v82, v81, v84);
  unint64_t v52 = (*(unsigned __int8 *)(v50 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
  unint64_t v53 = (v80 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v57 + v52, v51, v49);
  BOOL v58 = (uint64_t **)(v57 + v53);
  uint64_t v59 = v85;
  uint64_t v60 = v79;
  void *v58 = v86;
  v58[1]  = (uint64_t *)v60;
  *(void *)(v57 + v54)  = v59;
  *(void *)(v57 + v55)  = v78;
  unint64_t v61 = v76;
  *(void *)(v57 + v56)  = v76;
  char v62 = (void *)(v57 + ((v56 + 15) & 0xFFFFFFFFFFFFFFF8));
  os_log_t v63 = v77;
  *char v62 = v75;
  v62[1]  = v63;
  aBlock[4]  = (uint64_t)sub_10011E58C;
  aBlock[5]  = v57;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_100236C78;
  void aBlock[3] = (uint64_t)&unk_1008BA810;
  id v64 = _Block_copy(aBlock);
  swift_retain();
  id v65 = v59;
  swift_retain();
  id v66 = v61;
  swift_bridgeObjectRetain();
  swift_release();
  [v65 cancelEverythingWithCompletionHandler:v64];
  _Block_release(v64);

  return swift_release();
}

void sub_1000FB4D0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E2DC(v11, (uint64_t)qword_10090ADC0);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit cancelEverything completed.", v14, 2u);
    swift_slowDealloc();
  }

  id v15 = self;
  isa  = UUID._bridgeToObjectiveC()().super.isa;
  id v17 = [v15 objectIDWithUUID:isa];

  id v18 = [objc_allocWithZone((Class)REMStore) init];
  id v19 = [objc_allocWithZone((Class)REMSaveRequest) initWithStore:v18];
  id v43 = 0;
  id v20 = [v18 fetchAccountWithObjectID:v17 error:&v43];
  if (!v20)
  {
    uint64_t v31 = v43;
    uint64_t v32 = _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_11:

    swift_errorRetain();
    a2(v32);
    swift_errorRelease();
    swift_errorRelease();

    return;
  }
  id v21 = v20;
  id v22 = v43;
  id v23 = [v19 updateAccount:v21];
  [v23 removeFromStore];
  id v43 = 0;
  if (![v19 saveSynchronouslyWithError:&v43])
  {
    id v33 = a2;
    os_log_type_t v34 = v43;
    uint64_t v32 = _convertNSErrorToError(_:)();

    a2  = v33;
    swift_willThrow();

    id v19 = v23;
    goto LABEL_11;
  }
  os_log_type_t v24 = v43;

  [a4 setDisabled:0];
  int v25 = v17;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  uint64_t v40 = a2;
  if (os_log_type_enabled(v26, v27))
  {
    id v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)id v28 = 138412290;
    id v43 = v25;
    unint64_t v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v29 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "RDXPCDebugPerformer: testReinitializeCloudKit: REM account removed from DB. CloudKit re-enabled. {objectID: %@}", v28, 0xCu);
    sub_100094134((uint64_t *)&unk_10090A040);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v26 = v25;
  }

  uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v37 = v36;
  if (qword_1009070C0 != -1) {
    swift_once();
  }
  int64_t v38 = (void *)qword_100942060;
  uint64_t v39 = (void *)swift_allocObject();
  v39[2]  = a7;
  v39[3]  = a8;
  void v39[4] = v40;
  v39[5]  = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1005F3574(v35, v37, 1, v38, (uint64_t)sub_10011E694, (uint64_t)v39);

  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_1000FB9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t))
{
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E2DC(v10, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315906;
    swift_bridgeObjectRetain();
    sub_1000C51B8(a4, a5, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12)  = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 1_Block_object_dispose(&STACK[0x260], 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 24)  = 2080;
    if (a3)
    {
      swift_getErrorValue();
      uint64_t v14 = Error.rem_errorDescription.getter();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE300000000000000;
      uint64_t v14 = 7104878;
    }
    sub_1000C51B8(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "RDXPCDebugPerformer: testReinitializeCloudKit: Completed updateState() for accountIdentifier: %s, didAddAccount: %{BOOL}d, didUpdateAccount: %{BOOL}d, updateAccountError: %s", (uint8_t *)v13, 0x22u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }
  return a6(a3);
}

void sub_1000FBCE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11)
{
  uint64_t v43 = a7;
  uint64_t v46 = a3;
  uint64_t v47 = a1;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_10008E2DC(v19, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  id v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v45 = a8;
  if (v22)
  {
    uint64_t v40 = a4;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v41 = a5;
    os_log_type_t v24 = (uint8_t *)v23;
    uint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v24 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_1000C51B8(v47, a2, &aBlock);
    a4  = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "RDXPCDebugPerformer: fireDebugNotification initiated with text: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (a4)
    {
LABEL_5:
      uint64_t v25 = a4;
      goto LABEL_8;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (a4) {
      goto LABEL_5;
    }
  }
  UUID.init()();
  uint64_t v46 = UUID.uuidString.getter();
  uint64_t v25 = v26;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v16);
LABEL_8:
  id v27 = objc_allocWithZone((Class)UNMutableNotificationContent);
  swift_bridgeObjectRetain();
  id v28 = [v27 init];
  NSString v29 = String._bridgeToObjectiveC()();
  [v28 setBody:v29];

  if (a6)
  {
    NSString v30 = String._bridgeToObjectiveC()();
    [v28 setCategoryIdentifier:v30];
  }
  if (v45)
  {
    uint64_t v31 = *(void **)(v44 + OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_notificationCenter);
    if (a9)
    {
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16)  = a10;
      *(void *)(v32 + 24)  = a11;
      swift_retain();
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = String._bridgeToObjectiveC()();
      unint64_t v53 = sub_10011E21C;
      uint64_t v54 = v32;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v50 = 1107296256;
      uint64_t v51 = sub_1000E13D0;
      unint64_t v52 = &unk_1008BA680;
      uint64_t v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v31 releaseNotificationWithIdentifier:v33 reference:v34 completion:v35];
      _Block_release(v35);
    }
    else
    {
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16)  = a10;
      *(void *)(v37 + 24)  = a11;
      swift_retain();
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = String._bridgeToObjectiveC()();
      unint64_t v53 = sub_10011FBC4;
      uint64_t v54 = v37;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v50 = 1107296256;
      uint64_t v51 = sub_1000E13D0;
      unint64_t v52 = &unk_1008BA630;
      int64_t v38 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v31 retainNotificationWithIdentifier:v33 reference:v34 content:v28 skipBanner:0 completion:v38];
      _Block_release(v38);
    }
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16)  = a10;
    *(void *)(v36 + 24)  = a11;
    swift_retain();
    sub_10050E738(v46, v25, v28, (uint64_t)sub_10011FBC4, v36);
    swift_release();

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000FC3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  os_log_type_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E2DC(v13, (uint64_t)qword_10090ADC0);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v24 = v12;
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "RDXPCDebugPerformer: Debug: fetchGeofences", v16, 2u);
    os_log_type_t v12 = v24;
    swift_slowDealloc();
  }

  uint64_t v17 = *(void **)(*(void *)&v3[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2]  = v3;
  v18[3]  = a1;
  void v18[4] = a2;
  aBlock[4]  = sub_10011E210;
  aBlock[5]  = v18;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = &unk_1008BA590;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  os_log_type_t v21 = v3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_1000FC7E0(uint64_t a1, void (*a2)(void *))
{
  uint64_t v2 = sub_1004F1028();
  uint64_t v3 = v2;
  unint64_t v30 = v2 & 0xC000000000000001;
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_21:
    a2(v8);
    return swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v35 = _swiftEmptyArrayStorage;
  sub_1001DE058(0, v4 & ~(v4 >> 63), 0);
  if (v30)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    uint64_t result = sub_1003CA790(v3);
    unsigned __int8 v7 = v9 & 1;
  }
  uint64_t v32 = result;
  uint64_t v33 = v6;
  unsigned __int8 v34 = v7;
  if ((v4 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        uint64_t v16 = v32;
        uint64_t v15 = v33;
        uint64_t v17 = v34;
        sub_1003CA470(v32, v33, v34, v3);
        uint64_t v19 = v18;
        id v20 = [v18 debugDescription];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;

        os_log_type_t v24 = v35;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1001DE058(0, v24[2] + 1, 1);
          os_log_type_t v24 = v35;
        }
        unint64_t v26 = v24[2];
        unint64_t v25 = v24[3];
        if (v26 >= v25 >> 1)
        {
          uint64_t result = sub_1001DE058(v25 > 1, v26 + 1, 1);
          os_log_type_t v24 = v35;
        }
        v24[2]  = v26 + 1;
        id v27 = &v24[2 * v26];
        void v27[4] = v21;
        void v27[5] = v23;
        if (v30) {
          break;
        }
        uint64_t v10 = sub_1003C9E34(v16, v15, v17, v3);
        uint64_t v12 = v11;
        char v14 = v13;
        sub_1000E4EA4(v16, v15, v17);
        uint64_t v32 = v10;
        uint64_t v33 = v12;
        unsigned __int8 v34 = v14 & 1;
        if (!--v4) {
          goto LABEL_20;
        }
      }
      if ((v17 & 1) == 0) {
        goto LABEL_23;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_100094134(&qword_10090B020);
      id v28 = (void (*)(char *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v28(v31, 0);
      --v4;
    }
    while (v4);
LABEL_20:
    sub_1000E4EA4(v32, v33, v34);
    swift_bridgeObjectRelease();
    uint64_t v8 = v35;
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1000FCB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unsigned __int8 v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = UUID.uuidString.getter();
  unint64_t v13 = v12;
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E2DC(v14, (uint64_t)qword_10090ADC0);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v27 = v5;
    uint64_t v17 = swift_slowAlloc();
    NSString v29 = v7;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = a3;
    aBlock[0]  = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    swift_bridgeObjectRetain();
    unsigned __int8 v34 = (void *)sub_1000C51B8(v11, v13, aBlock);
    uint64_t v5 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "RDXPCDebugPerformer: Debug: removeGeofence {UUID=%s}", v18, 0xCu);
    swift_arrayDestroy();
    a3  = v28;
    swift_slowDealloc();
    unsigned __int8 v7 = v29;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v20 = v31;
  uint64_t v21 = *(void **)(*(void *)&v31[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  uint64_t v22 = (void *)swift_allocObject();
  v22[2]  = v20;
  v22[3]  = v11;
  void v22[4] = v13;
  v22[5]  = a2;
  v22[6]  = a3;
  aBlock[4]  = (uint64_t)sub_10011E124;
  aBlock[5]  = (uint64_t)v22;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_100236C78;
  void aBlock[3] = (uint64_t)&unk_1008BA518;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v21;
  id v25 = v20;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unsigned __int8 v34 = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

uint64_t sub_1000FD0EC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v64 = a3;
  uint64_t v61 = a2;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v69 = *(void *)(v10 - 8);
  uint64_t v70 = v10;
  __chkstk_darwin(v10);
  BOOL v67 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for DispatchQoS();
  uint64_t v66 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  id v65 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100094134((uint64_t *)&unk_100909E50);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v60 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v53 - v21;
  __chkstk_darwin(v20);
  id v24 = (char *)&v53 - v23;
  sub_1000BF710(a1, (uint64_t)v15, (uint64_t *)&unk_100909E50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    UUID.init()();
    sub_1000966BC((uint64_t)v15, (uint64_t *)&unk_100909E50);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v24, v15, v16);
  }
  if (qword_100906EB8 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E2DC(v25, (uint64_t)qword_10090ADC0);
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  static REMCDRecurrenceRule.shouldAttemptLocalObjectMerge()();
  unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  char v62 = v24;
  v26(v22, v24, v16);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v57 = v26;
    uint64_t v31 = v30;
    uint64_t v56 = swift_slowAlloc();
    aBlock[0]  = v56;
    *(_DWORD *)uint64_t v31 = 68159234;
    LODWORD(v71)  = 4;
    int v55 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + _Block_object_dispose(&STACK[0x260], 8) = 2048;
    double v71 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v54 = v16;
    *(_WORD *)(v31 + 1_Block_object_dispose(&STACK[0x260], 8) = 1040;
    LODWORD(v71)  = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 24)  = 2048;
    double v71 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 34)  = 1040;
    LODWORD(v71)  = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 40)  = 2048;
    double v71 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v31 + 50)  = 2080;
    uint64_t v32 = UUID.uuidString.getter();
    double v71 = COERCE_DOUBLE(sub_1000C51B8(v32, v33, aBlock));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unsigned __int8 v34 = *(void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v58 = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v35 = v54;
    uint64_t v59 = v34;
    v34(v22, v54);
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v55, "RDXPCDebugPerformer: Debug: addGeofence {center=(%.*f,%.*f), r=%.*f, UUID=%s}", (uint8_t *)v31, 0x3Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v26 = v57;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v58 = (v17 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v59 = v36;
    v36(v22, v16);

    uint64_t v35 = v16;
  }
  int64_t v38 = v62;
  uint64_t v37 = v63;
  uint64_t v39 = *(void **)(*(void *)&v63[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  uint64_t v40 = v60;
  v26(v60, v62, v35);
  unint64_t v41 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v42 = (v18 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = (double *)swift_allocObject();
  v43[2]  = a4;
  void v43[3] = a5;
  v43[4]  = a6;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v43 + v41, v40, v35);
  *(void *)((char *)v43 + v42)  = v37;
  uint64_t v44 = (void *)((char *)v43 + ((v42 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v45 = v64;
  *uint64_t v44 = v61;
  v44[1]  = v45;
  aBlock[4]  = (uint64_t)sub_10011E038;
  aBlock[5]  = (uint64_t)v43;
  aBlock[0]  = (uint64_t)_NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = (uint64_t)sub_100236C78;
  void aBlock[3] = (uint64_t)&unk_1008BA4A0;
  uint64_t v46 = _Block_copy(aBlock);
  id v47 = v39;
  id v48 = v37;
  swift_retain();
  uint64_t v49 = v65;
  static DispatchQoS.unspecified.getter();
  double v71 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  uint64_t v50 = v67;
  uint64_t v51 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v46);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v49, v68);
  v59(v38, v35);
  return swift_release();
}

void sub_1000FD910(double a1, double a2, double a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  UUID.uuidString.getter();
  id v11 = objc_allocWithZone((Class)CLCircularRegion);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v11 initWithCenter:v12 radius:a1 identifier:a2];

  [v13 setNotifyOnEntry:1];
  [v13 setNotifyOnExit:1];
  sub_1004F07AC((uint64_t)v13);
  a6();
}

uint64_t sub_1000FDCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  v26[1]  = a5;
  uint64_t v27 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  CLLocationCoordinate2D v15 = CLLocationCoordinate2DMake(37.3318, 122.0312);
  id v16 = objc_allocWithZone((Class)CLCircularRegion);
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v16 initWithCenter:v17 radius:v15.latitude identifier:v15.longitude];

  uint64_t v19 = *(void **)(*(void *)&v7[OBJC_IVAR____TtC7remindd19RDXPCDebugPerformer_locationManager]
                 + OBJC_IVAR____TtC7remindd17RDLocationManager_queue);
  uint64_t v20 = (void *)swift_allocObject();
  v20[2]  = v7;
  v20[3]  = v18;
  v20[4]  = v27;
  void v20[5] = a4;
  aBlock[4]  = v28;
  aBlock[5]  = v20;
  aBlock[0]  = _NSConcreteStackBlock;
  aBlock[1]  = 1107296256;
  aBlock[2]  = sub_100236C78;
  void aBlock[3] = v29;
  uint64_t v21 = _Block_copy(aBlock);
  id v22 = v19;
  uint64_t v23 = v7;
  id v24 = v18;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_10011D8CC((unint64_t *)&qword_100908150, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100094134((uint64_t *)&unk_10090AFD0);
  sub_1000967F4((unint64_t *)&qword_100908160, (uint64_t *)&unk_10090AFD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v30);
  return swift_release();
}

void sub_1000FE2E0(void *a1, void *a2, char a3)
{
  id v6 = a2;
  unsigned __int8 v7 = sub_100693E40(v6);
  if (!v3)
  {
    uint64_t v8 = v7;
    uint64_t v9 = sub_1005513E4(v7, 0);
    if (v9)
    {
      if ((a3 & 1) == 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v16 = v10;
        swift_bridgeObjectRetain();
        v11._object  = (void *)0x80000001007CA880;
        v11._countAndFlagsBits  = 0xD000000000000038;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [a1 setTransactionAuthor:v12 v15 v16];
      }
      uint64_t v13 = self;
      NSString v14 = String._bridgeToObjectiveC()();
      [v13 internalErrorWithDebugDescription:v14];

      swift_willThrow();
      uint64_t v8 = (void *)v9;
    }
    else
    {
      [self noSuchObjectErrorWithObjectID:v6];
      swift_willThrow();
    }
  }
}

void sub_1000FE4A0(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(id, uint64_t, id, void *))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a3;
  id v12 = a1;
  a6(v11, a4, v12, v10);
  _Block_release(v10);
  _Block_release(v10);
}

void sub_1000FE544(void *a1, void *a2, char a3, double a4)
{
  id v8 = a2;
  uint64_t v9 = sub_100695D30(v8);
  if (!v4)
  {
    uint64_t v10 = v9;
    id v11 = sub_100551418(v9, 0);
    id v12 = v11;
    if (v11)
    {
      [v11 setDueDateResolutionTokenAsNonce:a4];
      if (a3)
      {
        [v12 updateChangeCount];
      }
      else
      {
        [v12 setCkDirtyFlags:0];
        id v13 = [v12 trigger];
        if (v13)
        {
          NSString v14 = v13;
          [v13 setCkDirtyFlags:0];
        }
      }
      if (![a1 hasChanges]) {
        goto LABEL_19;
      }
      id v31 = 0;
      if (![a1 save:&v31])
      {
        id v27 = v31;
        _convertNSErrorToError(_:)();

        swift_willThrow();
LABEL_19:

        goto LABEL_20;
      }
      uint64_t v15 = qword_100906EB8;
      id v16 = v31;
      if (v15 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E2DC(v17, (uint64_t)qword_10090ADC0);
      id v18 = v12;
      id v12 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v19))
      {
        os_log_type_t v30 = v19;
        uint64_t v20 = swift_slowAlloc();
        id v31 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136446466;
        id v21 = [v18 remObjectID];
        if (v21)
        {
          id v22 = v21;
          id v23 = [v21 description];

          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;
        }
        else
        {
          unint64_t v26 = 0xE300000000000000;
          uint64_t v24 = 7104878;
        }
        sub_1000C51B8(v24, v26, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v20 + 12)  = 2082;
        uint64_t v28 = Bool.yesno.getter();
        sub_1000C51B8(v28, v29, (uint64_t *)&v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v30, "RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID: Saved changes {alarmID: %{public}s, shouldSetDirtyFlags: %{public}s}", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_19;
      }
    }
    else
    {
      [self noSuchObjectErrorWithObjectID:v8];
      swift_willThrow();
    }
LABEL_20:
  }
}