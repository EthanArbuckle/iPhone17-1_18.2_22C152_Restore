void sub_1000054EC(uint64_t a1)
{
  id *v2;
  id *v3;
  id v4;
  Class *v5;
  NSObject *v6;
  void ***v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  BOOL v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  signed int v18;
  NSObject *v19;
  BOOL v20;
  NSObject *v21;
  BOOL v22;
  NSObject *v23;
  void **v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  void *v27;
  id v28;
  NSObject *v29;
  id v30;
  id location;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  void *v35;
  __int16 v36;
  uint64_t v37;

  v2 = (id *)(a1 + 32);
  v3 = (id *)(a1 + 40);
  v4 = [*(id *)(a1 + 32) scanForEntitlementsWithConnection:*(void *)(a1 + 40)];
  v5 = (Class *)*v2;
  if (v4 || !*((unsigned char *)v5 + 88))
  {
    v6 = [objc_alloc(v5[12]) initWithConnection:*v3 delegate:*v2 xpcTarget:*((void *)*v2 + 9) entitlementBitmask:v4];
    if (v6)
    {
      [*((id *)*v2 + 5) addObject:v6];
      objc_initWeak(&location, *v2);
      v24 = _NSConcreteStackBlock;
      v25 = 3221225472;
      v26 = sub_1000058C4;
      v27 = &unk_1001654E0;
      v28 = *v2;
      objc_copyWeak(&v30, &location);
      v6 = v6;
      v29 = v6;
      v7 = objc_retainBlock(&v24);
      [*v3 setInvalidationHandler:v7, v24, v25, v26, v27, v28];
      [*v3 setInterruptionHandler:v7];
      v8 = *((void *)*v2 + 2);
      if (!v8)
      {
        v9 = [(id)objc_opt_class() serverExportedInterface];
        v10 = (void *)*((void *)*v2 + 2);
        *((void *)*v2 + 2) = v9;

        v8 = *((void *)*v2 + 2);
      }
      [*v3 setExportedInterface:v8];
      if (!*((void *)*v2 + 3))
      {
        v11 = [(id)objc_opt_class() serverRemoteObjectInterface];
        v12 = (void *)*((void *)*v2 + 3);
        *((void *)*v2 + 3) = v11;
      }
      [*v3 setExportedObject:v6];
      if (*((void *)*v2 + 3)) {
        [*v3 setRemoteObjectInterface:];
      }
      v13 = nr_daemon_log();
      v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

      if (v14)
      {
        v15 = nr_daemon_log();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *((void *)*v2 + 4);
          v17 = [v6 appPath];
          v18 = [v6 pid];
          *(_DWORD *)buf = 138412802;
          v33 = v16;
          v34 = 2114;
          v35 = v17;
          v36 = 2048;
          v37 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "NRXPCServer: %@ connection from %{public}@.%ld accepted", buf, 0x20u);
        }
      }
      if (objc_opt_respondsToSelector()) {
        [*((id *)*v2 + 8) xpcServer:*v2 proxyWillConnect:v6];
      }
      [*v3 _setQueue:*((void *)*v2 + 14)];
      [*v3 resume];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;

      objc_destroyWeak(&v30);
      objc_destroyWeak(&location);
    }
    else
    {
      v21 = nr_daemon_log();
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);

      if (v22)
      {
        v23 = nr_daemon_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_1000F5F14((uint64_t)v2, v2 + 1, v23);
        }
      }
    }
  }
  else
  {
    v19 = nr_daemon_log();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);

    if (!v20) {
      return;
    }
    v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000F5FBC((uint64_t)v2, v2 + 1, v6);
    }
  }
}

void sub_100005898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000058C4(uint64_t a1)
{
  v2 = *(NSObject **)(*(void *)(a1 + 32) + 120);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100005978;
  v3[3] = &unk_1001654B8;
  objc_copyWeak(&v5, (id *)(a1 + 48));
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, v3);

  objc_destroyWeak(&v5);
}

void sub_100005978(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _proxyDidDisconnect:*(void *)(a1 + 32)];
}

id sub_100005C90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _addAppToMonitorWithProxy:*(void *)(a1 + 40)];
}

id sub_100005C9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAppFromMonitorWithProxy:*(void *)(a1 + 40)];
}

void sub_100005FEC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setStateDescriptor:v3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10000608C;
  v5[3] = &unk_100165558;
  v5[4] = *(void *)(a1 + 40);
  [v4 setUpdateHandler:v5];
}

id sub_10000608C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _updatedFromMonitor:a2 forProcess:a3 withUpdate:a4];
}

void sub_1000060A0(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v2 = a2;
  uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
  [v2 setPredicates:v3, v4];
}

void sub_100006420(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v2 = a2;
  uint64_t v3 = +[NSArray arrayWithObjects:&v4 count:1];
  [v2 setPredicates:v3, v4];
}

void sub_100006734(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = *(unsigned __int8 *)(a1 + 48);
        v8 = NSStringFromRBSTaskState();
        int v13 = 138412802;
        uint64_t v14 = v6;
        __int16 v15 = 1024;
        int v16 = v7;
        __int16 v17 = 2112;
        v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "NRXPCServer: Notifying of application: %@; running: %{BOOL}d; state: %@",
          (uint8_t *)&v13,
          0x1Cu);
      }
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (objc_opt_respondsToSelector()) {
        [*(id *)(*(void *)(a1 + 32) + 64) xpcServer:*(void *)(a1 + 32) proxyDidResume:v2];
      }
    }
    else if (objc_opt_respondsToSelector())
    {
      [*(id *)(*(void *)(a1 + 32) + 64) xpcServer:*(void *)(a1 + 32) proxyDidSuspend:v2];
    }
  }
  else if (v4)
  {
    v9 = nr_daemon_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = *(unsigned __int8 *)(a1 + 48);
      v12 = NSStringFromRBSTaskState();
      int v13 = 138412802;
      uint64_t v14 = v10;
      __int16 v15 = 1024;
      int v16 = v11;
      __int16 v17 = 2112;
      v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "NRXPCServer: Ignoring notification of application: %@; running: %{BOOL}d; state: %@",
        (uint8_t *)&v13,
        0x1Cu);
    }
  }
}

id sub_100006C44(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resume];
}

id sub_100006CC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _suspend];
}

void sub_100006D80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 90))
  {
    *(unsigned char *)(v1 + 90) = 1;
    [*(id *)(a1 + 32) _suspend];
    [*(id *)(*(void *)(a1 + 32) + 8) invalidate];
    id v3 = [*(id *)(*(void *)(a1 + 32) + 40) copy];
    [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v4 = v3;
    id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          [*(id *)(*((void *)&v9 + 1) + 8 * (void)v8) _invalidate:v9];
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

uint64_t sub_100007024()
{
  qword_1001A1038 = objc_opt_new();

  return _objc_release_x1();
}

void sub_100007340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_100007378(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100007388(uint64_t a1)
{
}

void sub_100007390(void *a1)
{
  *(unsigned char *)(a1[4] + 28) = 1;
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 16));
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 8));
  uint64_t v4 = a1[4];
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = 0;
}

void sub_100007644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

void sub_10000767C(void *a1)
{
  *(unsigned char *)(a1[4] + 28) = 0;
  objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), *(id *)(a1[4] + 16));
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 8));
  uint64_t v4 = a1[4];
  id v5 = *(void **)(v4 + 8);
  *(void *)(v4 + 8) = 0;
}

void sub_10000787C(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (![v3 isPaired] || !objc_msgSend(v3, "isActive"))
  {
    v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);

    if (v9)
    {
      long long v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000F609C(v10);
      }
    }
    id v5 = *(void **)(a1 + 40);
    goto LABEL_10;
  }
  unsigned int v4 = [v3 isAltAccount];
  id v5 = *(void **)(a1 + 40);
  if (v4)
  {
LABEL_10:
    long long v11 = [v5 delegate];
    [v11 transactionDidComplete:*(void *)(a1 + 40)];

    goto LABEL_11;
  }
  id v6 = objc_opt_class();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100007A00;
  v13[3] = &unk_100165690;
  int8x16_t v12 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v12.i64[0];
  int8x16_t v14 = vextq_s8(v12, v12, 8uLL);
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  [v6 whatKindOfSyncIsNeededForPairingID:v7 block:v13];

LABEL_11:
}

void sub_100007A00(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(a1 + 32) + 24) = a2;
  id v3 = +[NRQueue registryDaemonQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100007AD8;
  v5[3] = &unk_100165668;
  unsigned int v4 = *(void **)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v3 dispatchAsync:v5];
}

void sub_100007AD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[3])
  {
    +[EPSagaTransactionPairedSyncTransaction _syncTypeString:](EPSagaTransactionPairedSyncTransaction, "_syncTypeString:");
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    v20 = +[EPSagaTransactionPairedSyncTransaction _operationTypeStringFromSyncType:*(void *)(*(void *)(a1 + 32) + 24)];
    id v3 = objc_opt_new();
    v19 = [EPRoutingSlipEntry alloc];
    uint64_t v18 = objc_opt_class();
    v23[0] = @"nrDeviceIdentifier";
    unsigned int v4 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 40)];
    v24[0] = v4;
    v23[1] = @"pairedSyncTypeKey";
    id v5 = [[EPSagaOperandString alloc] initWithString:v20];
    v24[1] = v5;
    v23[2] = @"extensiblePairingShouldFilePairingReport";
    id v6 = [EPSagaOperandNumber alloc];
    id v7 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"extensiblePairingShouldFilePairingReport"];
    id v8 = [(EPSagaOperandNumber *)v6 initWithNumber:v7];
    v24[2] = v8;
    v23[3] = @"extensiblePairingGizmoPairingVersion";
    BOOL v9 = [EPSagaOperandNumber alloc];
    long long v10 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"extensiblePairingGizmoPairingVersion"];
    long long v11 = [(EPSagaOperandNumber *)v9 initWithNumber:v10];
    v24[3] = v11;
    int8x16_t v12 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:4];
    int v13 = [(EPRoutingSlipEntry *)v19 initWithName:v21 transactionClass:v18 operands:v12];
    [v3 setEntry:v13];

    [v3 setRunningStatusCode:2];
    [v3 setNotUnrollable:1];
    [v3 setTargetPairingID:*(void *)(a1 + 40)];
    [v3 setOperationType:v20];
    if (v20 == @"initialSync")
    {
      int8x16_t v14 = [*(id *)(a1 + 56) serviceFromClass:objc_opt_class()];
      id v15 = [v14 pairingClientProxy];
      [v3 setUserInfo:v15];
    }
    id v16 = [*(id *)(a1 + 56) serviceFromClass:objc_opt_class()];
    [v16 addTransaction:v3];
    [*(id *)(a1 + 32) _addWaitForIsSetupTransactionIfNeeded];
    __int16 v17 = [*(id *)(a1 + 32) delegate];
    [v17 transactionDidComplete:*(void *)(a1 + 32)];
  }
  else
  {
    id v22 = [v2 delegate];
    [v22 transactionDidComplete:*(void *)(a1 + 32)];
  }
}

void sub_100007F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007FA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100007FB8(uint64_t a1)
{
}

void sub_100007FC0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000F60E0();
    }
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v9 + 8);
  long long v11 = *(void **)(v10 + 40);
  if (v5 || (a2 & 1) == 0)
  {
    *(void *)(v10 + 40) = 0;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100008124;
    v13[3] = &unk_100165708;
    uint64_t v16 = v9;
    uint64_t v12 = *(void *)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    id v14 = *(id *)(a1 + 32);
    [v11 requestInitialSyncStateForPairingIdentifier:v12 completion:v13];
  }
}

void sub_100008124(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

  if (v7)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000F6148();
    }
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(v9 + 8);
  long long v11 = *(void **)(v10 + 40);
  if (v5 || (a2 & 1) == 0)
  {
    *(void *)(v10 + 40) = 0;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100008274;
    v13[3] = &unk_1001656E0;
    uint64_t v15 = v9;
    uint64_t v12 = *(void *)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    [v11 requestSyncStateForPairingIdentifier:v12 completion:v13];
  }
}

void sub_100008274(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

  if (v6)
  {
    BOOL v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000F61B0();
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = 0;

  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000084A0(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 32);
  id v4 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  unsigned int v5 = [v4 isSetup];
  if (v4)
  {
    if (!v5)
    {
      uint64_t v12 = +[NRQueue registryDaemonQueue];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_100008670;
      v15[3] = &unk_100165530;
      int v13 = *(id *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v16 = v13;
      uint64_t v17 = v14;
      [v12 dispatchAsync:v15];

      uint64_t v8 = v16;
LABEL_10:

      goto LABEL_11;
    }
    BOOL v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      uint64_t v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [*v3 UUIDString];
        *(_DWORD *)buf = 138412290;
        v19 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %@ already has isSetup flag set", buf, 0xCu);
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = nr_daemon_log();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);

    if (v11)
    {
      uint64_t v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000F6218(v3, v8);
      }
      goto LABEL_10;
    }
  }
LABEL_11:
}

void sub_100008670(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = [*(id *)(a1 + 32) UUIDString];
      *(_DWORD *)buf = 138412290;
      v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding a transaction to wait for isSetup flag for device ID %@", buf, 0xCu);
    }
  }
  id v6 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v7 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&off_100176730];
  id v8 = [v6 initWithDiff:v7 andChangeType:1];

  id v9 = objc_alloc((Class)NRDeviceDiff);
  uint64_t v27 = NRDevicePropertyIsSetup;
  id v28 = v8;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  id v11 = [v9 initWithDiffPropertyDiffs:v10];

  id v12 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v11 andChangeType:1];
  id v13 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v25 = *(void *)(a1 + 32);
  id v26 = v12;
  uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  id v15 = [v13 initWithDeviceCollectionDiffDeviceDiffs:v14];

  uint64_t v16 = objc_opt_new();
  uint64_t v17 = [EPRoutingSlipEntry alloc];
  uint64_t v18 = objc_opt_class();
  v19 = [[EPSagaOperandDiff alloc] initWithDiff:v15, @"deviceCollectionWaitingTransactionDiff"];
  v24 = v19;
  v20 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
  id v21 = [(EPRoutingSlipEntry *)v17 initWithName:@"waitForIsSetup" transactionClass:v18 operands:v20];
  [v16 setEntry:v21];

  [v16 setRunningStatusCode:2];
  [v16 setOperationType:@"pair"];
  [v16 setTargetPairingID:*(void *)(a1 + 32)];
  id v22 = [*(id *)(*(void *)(a1 + 40) + 8) serviceFromClass:objc_opt_class()];
  [v22 addTransaction:v16];
}

void sub_100008A08(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100008A84(id a1)
{
  v3[0] = @"unpair";
  v3[1] = @"initialSync";
  v4[0] = &off_100176748;
  v4[1] = &off_100176760;
  v3[2] = @"migration";
  v3[3] = @"pair";
  v4[2] = &off_100176778;
  v4[3] = &off_100176790;
  void v3[4] = @"externalSwitch";
  v3[5] = @"reunionSync";
  v4[4] = &off_1001767A8;
  v4[5] = &off_1001767C0;
  v3[6] = @"storeUnpair";
  v4[6] = &off_1001767D8;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:7];
  uint64_t v2 = (void *)qword_1001A1048;
  qword_1001A1048 = v1;
}

void sub_100009054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000906C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000907C(uint64_t a1)
{
}

void sub_100009084(uint64_t a1)
{
  v5[0] = @"unpair";
  v5[1] = @"migration";
  v6[0] = &off_1001767F0;
  v6[1] = &off_100176808;
  v5[2] = @"pair";
  v5[3] = @"externalSwitch";
  v6[2] = &off_100176820;
  v6[3] = &off_100176838;
  v5[4] = @"initialSync";
  void v5[5] = @"reunionSync";
  v6[4] = &off_100176850;
  v6[5] = &off_100176850;
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:6];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100009560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 40) compare:a3 to:a2 withActivePairingID:*(void *)(a1 + 32)];
}

void sub_100009FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100009FBC(uint64_t a1)
{
}

void sub_10000A0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A100(uint64_t a1)
{
}

void sub_10000A270(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 32);
  if (v2 == v4)
  {
LABEL_4:
    unsigned int v5 = *(void **)(v3 + 40);
    if (*(void **)(a1 + 48) == v5 || (objc_msgSend(v5, "isEqual:") & 1) != 0) {
      return;
    }
    goto LABEL_7;
  }
  if (objc_msgSend(v4, "isEqual:"))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    goto LABEL_4;
  }
LABEL_7:
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), *(id *)(a1 + 32));
  id v6 = *(void **)(a1 + 48);
  id v7 = (id *)(*(void *)(a1 + 40) + 40);

  objc_storeStrong(v7, v6);
}

id sub_10000A548(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCollectionCache:];
}

id sub_10000A550(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateCollectionCache:a2];
}

uint64_t sub_10000D27C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v6 = WeakRetained;
    id v3 = [WeakRetained requestSetResumable:0 userInfo:*(void *)(a1 + 32) forRunningOperationType:*(void *)(a1 + 40)];
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4) {
      (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v3, v6);
    }
  }

  return _objc_release_x2();
}

void sub_10000E6E0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

id sub_10000EF6C(uint64_t a1, void *a2)
{
  return [a2 peripheral:*(void *)(a1 + 32) didDiscoverServices:*(void *)(a1 + 40)];
}

id sub_10000F058(void *a1, void *a2)
{
  return [a2 peripheral:a1[4] didDiscoverCharacteristicsForService:a1[5] error:a1[6]];
}

id sub_10000F148(void *a1, void *a2)
{
  return [a2 peripheral:a1[4] didWriteValueForCharacteristic:a1[5] error:a1[6]];
}

id sub_10000F2A8(void *a1, void *a2)
{
  return [a2 peripheral:a1[4] didUpdateValueForCharacteristic:a1[5] error:a1[6]];
}

id sub_10000F5C0(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: kSBSLockStateNotifyKey received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

void sub_10000F8E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1000A3CF0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (!v3)
  {
    if (v5)
    {
      id v7 = sub_1000A3CF0();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: updateCompatibilityIndexAsset completed successfully", (uint8_t *)&v9, 2u);
      }
    }
    id v8 = *(void **)(a1 + 32);
    id v6 = +[NSDate date];
    [v8 setLastAssetUpdateCheckDate:v6];
    goto LABEL_10;
  }
  if (v5)
  {
    id v6 = sub_1000A3CF0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138543362;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: updateCompatibilityIndexAsset failed with error: %{public}@", (uint8_t *)&v9, 0xCu);
    }
LABEL_10:
  }
}

void sub_10000FE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000FE60(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000FE70(uint64_t a1)
{
}

void sub_10000FE78(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 64);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10000FF50;
  v7[3] = &unk_100165A20;
  id v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  char v11 = *(unsigned char *)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 56);
  [v3 downloadAssetCatalogFor:@"com.apple.MobileAsset.NanoRegistryPairingCompatibilityIndex" userInitiated:v2 withCompletion:v7];
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

void sub_10000FF50(uint64_t a1, void *a2)
{
  id v3 = a2;
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3032000000;
  v15[3] = sub_10000FE60;
  void v15[4] = sub_10000FE70;
  id v16 = [objc_alloc((Class)MAAssetQuery) initWithType:*(void *)(a1 + 32)];
  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x3032000000;
  v13[3] = sub_10000FE60;
  void v13[4] = sub_10000FE70;
  id v14 = 0;
  uint64_t v5 = *(void *)(a1 + 32);
  id v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000100F8;
  v7[3] = &unk_1001659F8;
  uint64_t v9 = v13;
  uint64_t v10 = v15;
  void v7[4] = v4;
  char v12 = *(unsigned char *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 48);
  id v6 = v3;
  id v8 = v6;
  [v4 queryAndGetLatestAssetForAssetType:v5 installedAssetsOnly:0 withCompletion:v7];

  _Block_object_dispose(v13, 8);
  _Block_object_dispose(v15, 8);
}

void sub_1000100D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000100F8(uint64_t a1, void *a2)
{
  id v4 = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  uint64_t v5 = (uint64_t)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) state];
  id v6 = nr_framework_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v5 < 2)
  {
    if (v7)
    {
      uint64_t v11 = nr_framework_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        char v12 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) assetId];
        *(_DWORD *)buf = 138543362;
        id v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: Newest available asset %{public}@ is not present; starting download",
          buf,
          0xCu);
      }
    }
    id v13 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v14 = [*(id *)(a1 + 32) mobileAssetDownloadOptionsUserInitiated:*(unsigned __int8 *)(a1 + 72)];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100010360;
    v17[3] = &unk_1001659D0;
    long long v19 = *(_OWORD *)(a1 + 56);
    long long v16 = *(_OWORD *)(a1 + 40);
    id v15 = (id)v16;
    long long v18 = v16;
    [v13 startDownload:v14 completionWithError:v17];

    id v8 = v18;
    goto LABEL_10;
  }
  if (v7)
  {
    id v8 = nr_framework_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) assetId];
      uint64_t v10 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) getLocalFileUrl];
      *(_DWORD *)buf = 138543618;
      id v21 = v9;
      __int16 v22 = 2114;
      uint64_t v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: Newest available asset %{public}@ is already downloaded and located at %{public}@", buf, 0x16u);
    }
LABEL_10:
  }
}

void sub_100010360(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    id v6 = nr_framework_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (!v7) {
      goto LABEL_25;
    }
    id v8 = nr_framework_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v34 = a2;
      __int16 v35 = 2114;
      id v36 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: Download of newest asset failed with result %lu and error %{public}@", buf, 0x16u);
    }
  }
  else
  {
    uint64_t v9 = [*(id *)(*(void *)(a1[5] + 8) + 40) getLocalFileUrl];
    uint64_t v10 = nr_framework_log();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      char v12 = nr_framework_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [*(id *)(*(void *)(a1[5] + 8) + 40) assetId];
        *(_DWORD *)buf = 138543618;
        v34 = v13;
        __int16 v35 = 2114;
        id v36 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: Newest available asset %{public}@ downloaded to %{public}@", buf, 0x16u);
      }
    }
    CFPreferencesSetAppValue(NRCompatibilityIndexLatestAssetURLKey, [v9 absoluteString:v9, v5], @"com.apple.nanoregistryd");
    CFPreferencesAppSynchronize(@"com.apple.nanoregistryd");
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v14 = [*(id *)(*(void *)(a1[6] + 8) + 40) results];
    id v15 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v29;
      do
      {
        for (i = 0; i != v16; i = (char *)i + 1)
        {
          if (*(void *)v29 != v17) {
            objc_enumerationMutation(v14);
          }
          long long v19 = *(void **)(*((void *)&v28 + 1) + 8 * i);
          if ((uint64_t)[v19 state] >= 2 && v19 != *(void **)(*(void *)(a1[5] + 8) + 40))
          {
            v20 = nr_framework_log();
            BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

            if (v21)
            {
              __int16 v22 = nr_framework_log();
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = [v19 assetId];
                *(_DWORD *)buf = 138543362;
                v34 = v23;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "EPMobileAssetAutoTrigger: Purging now out-of-date asset, %{public}@", buf, 0xCu);
              }
            }
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472;
            v27[2] = sub_100010724;
            v27[3] = &unk_1001659A8;
            v27[4] = v19;
            [v19 purgeWithError:v27];
          }
        }
        id v16 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v16);
    }

    id v8 = v25;
    id v5 = v26;
  }

LABEL_25:
  if (a1[4]) {
    v24 = (void *)a1[4];
  }
  else {
    v24 = v5;
  }
  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v24);
}

void sub_100010724(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = nr_framework_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (a2)
  {
    if (v7)
    {
      id v8 = nr_framework_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [*(id *)(a1 + 32) assetId];
        int v13 = 138543874;
        id v14 = v9;
        __int16 v15 = 2048;
        uint64_t v16 = a2;
        __int16 v17 = 2114;
        id v18 = v5;
        uint64_t v10 = "EPMobileAssetAutoTrigger: Asset %{public}@ failed to be purged with result %lu and error %{public}@";
        BOOL v11 = v8;
        uint32_t v12 = 32;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v13, v12);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v7)
  {
    id v8 = nr_framework_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = [*(id *)(a1 + 32) assetId];
      int v13 = 138543362;
      id v14 = v9;
      uint64_t v10 = "EPMobileAssetAutoTrigger: Asset %{public}@ purged successfully";
      BOOL v11 = v8;
      uint32_t v12 = 12;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_100010A28(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = nr_framework_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (a2)
  {
    if (!v7) {
      goto LABEL_10;
    }
    id v8 = nr_framework_log();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543874;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    uint64_t v20 = a2;
    __int16 v21 = 2114;
    id v22 = v5;
    uint64_t v10 = "EPMobileAssetAutoTrigger: Asset catalog download for %{public}@ completed with result %lu and error %{public}@";
    BOOL v11 = v8;
    uint32_t v12 = 32;
    goto LABEL_8;
  }
  if (!v7) {
    goto LABEL_10;
  }
  id v8 = nr_framework_log();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    uint64_t v18 = v13;
    uint64_t v10 = "EPMobileAssetAutoTrigger: Asset catalog download for %{public}@ completed successfully";
    BOOL v11 = v8;
    uint32_t v12 = 12;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
  }
LABEL_9:

LABEL_10:
  if (*(void *)(a1 + 40))
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100010C00;
    v14[3] = &unk_100165A70;
    id v16 = *(id *)(a1 + 40);
    id v15 = v5;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v14);
  }
}

uint64_t sub_100010C00(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100010DD4(uint64_t a1)
{
  [*(id *)(a1 + 32) getLatestAssetFromQueryResults:*(void *)(a1 + 40)];
  objc_claimAutoreleasedReturnValue();
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }

  return _objc_release_x1();
}

uint64_t sub_10001130C(uint64_t a1)
{
  qword_1001A1060 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

id sub_1000116E4(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 24))
  {
    [@"com.apple.nanoregistryd" UTF8String];
    uint64_t v2 = os_transaction_create();
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = v2;

    [(id)objc_opt_class() createKeepAliveFile];
    id v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      BOOL v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "NROSTransaction master os_transaction created", v9, 2u);
      }
    }
  }
  [*(id *)(*(void *)(a1 + 32) + 8) setObject:*(void *)(a1 + 48) forKeyedSubscript:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) dumpTransactions:*(void *)(a1 + 40) isAdded:1];
}

void sub_100011884(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (v2)
  {
    [*(id *)(a1 + 32) dumpTransactions:*(void *)(a1 + 40) isAdded:0];
    [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
    if (![*(id *)(*(void *)(a1 + 32) + 8) count])
    {
      [(id)objc_opt_class() deleteKeepAliveFile];
      uint64_t v3 = nr_daemon_log();
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

      if (v4)
      {
        id v5 = nr_daemon_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "NROSTransaction master os_transaction dropped", v8, 2u);
        }
      }
      uint64_t v6 = *(void *)(a1 + 32);
      BOOL v7 = *(void **)(v6 + 24);
      *(void *)(v6 + 24) = 0;
    }
  }
}

void sub_100012080(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100012098(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100012128;
  block[3] = &unk_1001655F8;
  block[4] = *(void *)(a1 + 40);
  dispatch_async(v2, block);
}

void sub_100012128(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 8);
  *(void *)(v2 + 8) = 0;

  id v4 = [*(id *)(a1 + 32) delegate];
  [v4 transactionDidComplete:*(void *)(a1 + 32)];
}

Class sub_100012204(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1001A1078)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_100012348;
    v4[4] = &unk_100165618;
    v4[5] = v4;
    long long v5 = off_100165AE0;
    uint64_t v6 = 0;
    qword_1001A1078 = _sl_dlopen();
    uint64_t v2 = (void *)v4[0];
    if (!qword_1001A1078)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("NPKCompanionAgentConnection");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    uint64_t v2 = (void *)sub_1000F67D4();
LABEL_8:
    free(v2);
  }
  qword_1001A1070 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100012348()
{
  uint64_t result = _sl_dlopen();
  qword_1001A1078 = result;
  return result;
}

void sub_1000125A4(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v12 = 600;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionSetUpTinkerHealthSyncZones: Timeout of %d triggered", buf, 8u);
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 8));
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 16))
  {
    long long v5 = [*(id *)(a1 + 40) errors];
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    CFStringRef v10 = @"Setting up shared Tinker HealthKit sync zones timed out";
    uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    BOOL v7 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionSetUpTinkerHealthSyncZonesError" code:0 userInfo:v6];
    [v5 addObject:v7];

    id v8 = [*(id *)(a1 + 32) delegate];
    [v8 transactionDidComplete:*(void *)(a1 + 32)];

    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  }
}

void sub_100012744(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = nr_daemon_log();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

  if (v8)
  {
    NSErrorUserInfoKey v9 = nr_daemon_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionSetUpTinkerHealthSyncZones: Family circle lookup finished with error: %@", (uint8_t *)&buf, 0xCu);
    }
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v50 = 0x3032000000;
  v51 = sub_100012D1C;
  v52 = sub_100012D2C;
  id v53 = 0;
  uint64_t v43 = 0;
  v44 = &v43;
  uint64_t v45 = 0x3032000000;
  v46 = sub_100012D1C;
  v47 = sub_100012D2C;
  id v48 = 0;
  if (v6) {
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  CFStringRef v10 = [v5 members];
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100012D34;
  v39[3] = &unk_100165B00;
  v41 = &v43;
  id v40 = *(id *)(a1 + 32);
  p_long long buf = &buf;
  [v10 enumerateObjectsUsingBlock:v39];

  if (!*(void *)(*((void *)&buf + 1) + 40)) {
    goto LABEL_12;
  }
  if (v44[5])
  {
    id v36 = objc_opt_new();
    id v35 = [objc_alloc((Class)HKSecondaryDevicePairingAgent) initWithHealthStore:v36];
    uint64_t v11 = *(void *)(a1 + 40);
    int v12 = [*(id *)(*((void *)&buf + 1) + 40) firstName];
    uint64_t v13 = [*(id *)(*((void *)&buf + 1) + 40) lastName];
    id v14 = +[HKSecondaryPairedDeviceConfiguration secondaryPairedDeviceConfigurationWithNanoRegistryDeviceUUID:v11 setupType:1 firstName:v12 lastName:v13];

    id v15 = [*(id *)(*((void *)&buf + 1) + 40) dsid];
    [v14 setDsid:v15];

    [v14 setDateOfBirth:0];
    id v16 = [*(id *)(*((void *)&buf + 1) + 40) dictionary];
    __int16 v17 = [v16 objectForKey:@"member-date-of-birth"];

    if (v17)
    {
      [v17 doubleValue];
      __int16 v19 = +[NSDate dateWithTimeIntervalSince1970:v18 / 1000.0];
      id v20 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
      __int16 v21 = [v20 components:28 fromDate:v19];
      id v22 = +[NSCalendar calendarWithIdentifier:NSCalendarIdentifierGregorian];
      [v21 setCalendar:v22];

      [v14 setDateOfBirth:v21];
    }
    uint64_t v23 = [(id)v44[5] firstName];
    [v14 setGuardianFirstName:v23];

    v24 = [(id)v44[5] lastName];
    [v14 setGuardianLastName:v24];

    uint64_t v25 = [(id)v44[5] dsid];
    [v14 setGuardianDSID:v25];

    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_100012ED0;
    v38[3] = &unk_100165B28;
    v38[4] = *(void *)(a1 + 48);
    [v35 setupHealthSharingForSecondaryPairedDeviceWithConfiguration:v14 completion:v38];
  }
  else
  {
LABEL_12:
    id v26 = nr_daemon_log();
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);

    if (v27)
    {
      long long v28 = nr_daemon_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionSetUpTinkerHealthSyncZones: Member not found, skipping health sync zone setup.", v37, 2u);
      }
    }
    long long v29 = *(NSObject **)(*(void *)(a1 + 48) + 8);
    if (v29)
    {
      dispatch_source_cancel(v29);
      uint64_t v30 = *(void *)(a1 + 48);
      long long v31 = *(void **)(v30 + 8);
      *(void *)(v30 + 8) = 0;
    }
    v32 = +[NRRepeatingAlertEngine sharedInstance];
    [v32 setEnabled:1 withName:@"HealthSyncSetupFailed"];

    v33 = *(unsigned char **)(a1 + 48);
    if (!v33[16])
    {
      v34 = [v33 delegate];
      [v34 transactionDidComplete:*(void *)(a1 + 48)];

      *(unsigned char *)(*(void *)(a1 + 48) + 16) = 1;
    }
  }
  _Block_object_dispose(&v43, 8);

  _Block_object_dispose(&buf, 8);
}

void sub_100012CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100012D1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100012D2C(uint64_t a1)
{
}

void sub_100012D34(void *a1, void *a2)
{
  id v4 = a2;
  if ([v4 isOrganizer])
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    id v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      BOOL v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        BOOL v8 = "EPSagaTransactionSetUpTinkerHealthSyncZones: Found organizer";
        NSErrorUserInfoKey v9 = v7;
        uint32_t v10 = 2;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v16, v10);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = [v4 appleID];
    unsigned int v12 = [v11 isEqualToString:a1[4]];

    if (v12)
    {
      objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a2);
      uint64_t v13 = nr_daemon_log();
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

      if (v14)
      {
        BOOL v7 = nr_daemon_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = a1[4];
          int v16 = 138412290;
          uint64_t v17 = v15;
          BOOL v8 = "EPSagaTransactionSetUpTinkerHealthSyncZones: Found member matching %@!";
          NSErrorUserInfoKey v9 = v7;
          uint32_t v10 = 12;
          goto LABEL_9;
        }
LABEL_10:
      }
    }
  }
}

void sub_100012ED0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    BOOL v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 138412290;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionSetUpTinkerHealthSyncZones: setupHealthSharingForSecondaryPairedDeviceWithNRUUID finished with error: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  BOOL v8 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  if (v8)
  {
    dispatch_source_cancel(v8);
    uint64_t v9 = *(void *)(a1 + 32);
    uint32_t v10 = *(void **)(v9 + 8);
    *(void *)(v9 + 8) = 0;
  }
  if (v4)
  {
    uint64_t v11 = +[NRRepeatingAlertEngine sharedInstance];
    [v11 setEnabled:1 withName:@"HealthSyncSetupFailed"];
  }
  unsigned int v12 = *(unsigned char **)(a1 + 32);
  if (!v12[16])
  {
    uint64_t v13 = [v12 delegate];
    [v13 transactionDidComplete:*(void *)(a1 + 32)];

    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  }
}

id sub_100013218(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _synchronize];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = (_BYTE)result;
  return result;
}

uint64_t sub_100013380(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013390(uint64_t a1)
{
}

uint64_t sub_100013398(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) _objectForKeyedSubscript:*(void *)(a1 + 40)];

  return _objc_release_x1();
}

id sub_1000134DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setObject:*(void *)(a1 + 40) forKeyedSubscript:*(void *)(a1 + 48)];
}

id sub_100013630(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setDomain:*(void *)(a1 + 40)];
}

id sub_10001381C(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)8)
  {
    uint64_t v2 = [v1 substringWithRange:0, 5];
    BOOL v3 = [v1 substringWithRange:5, 1];
    uint64_t v4 = sub_100013B4C(v3);

    id v5 = [v1 substringWithRange:NSMakeRange(6, 1)];
    uint64_t v6 = sub_100013B4C(v5);

    BOOL v7 = [v1 substringWithRange:7, 1];
    uint64_t v8 = sub_100013B4C(v7);

    if ([v2 length] == (id)5
      && v4 != 0x7FFFFFFFFFFFFFFFLL
      && v6 != 0x7FFFFFFFFFFFFFFFLL
      && v8 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v32[0] = v2;
      v31[0] = @"n";
      v31[1] = @"v";
      uint64_t v9 = +[NSNumber numberWithInteger:v4];
      v32[1] = v9;
      v31[2] = @"m";
      uint32_t v10 = +[NSNumber numberWithInteger:v6];
      v32[2] = v10;
      v31[3] = @"s";
      uint64_t v11 = +[NSNumber numberWithInteger:v8];
      v32[3] = v11;
      unsigned int v12 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:4];

LABEL_14:
LABEL_16:

      goto LABEL_18;
    }
    id v15 = nr_daemon_log();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);

    if (v16)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        double v18 = +[NSNumber numberWithInteger:v4];
        __int16 v19 = +[NSNumber numberWithInteger:v6];
        id v20 = +[NSNumber numberWithInteger:v8];
        int v21 = 138413314;
        id v22 = v1;
        __int16 v23 = 2112;
        v24 = v2;
        __int16 v25 = 2112;
        id v26 = v18;
        __int16 v27 = 2112;
        long long v28 = v19;
        __int16 v29 = 2112;
        uint64_t v30 = v20;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Invalid Advertising Payload %@ - %@ %@ %@ %@", (uint8_t *)&v21, 0x34u);
      }
      unsigned int v12 = 0;
      goto LABEL_14;
    }
LABEL_15:
    unsigned int v12 = 0;
    goto LABEL_16;
  }
  uint64_t v13 = nr_daemon_log();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);

  if (v14)
  {
    uint64_t v2 = nr_daemon_log();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1000F67FC((uint64_t)v1, v2);
    }
    goto LABEL_15;
  }
  unsigned int v12 = 0;
LABEL_18:

  return v12;
}

uint64_t sub_100013B4C(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)1)
  {
    uint64_t v2 = (uint64_t)[@"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890" rangeOfString:v1];
  }
  else
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000F6874(v5);
      }
    }
    uint64_t v2 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v2;
}

uint64_t sub_100013C90(uint64_t a1)
{
  qword_1001A1088 = (uint64_t)objc_alloc_init(*(Class *)(a1 + 32));

  return _objc_release_x1();
}

void sub_10001469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2 == 1)
  {
    id v15 = objc_begin_catch(exception_object);
    (*(void (**)(uint64_t, id))(a15 + 16))(a15, v15);

    objc_end_catch();
    JUMPOUT(0x100014690);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1000146F8(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsAltAccount];
  if ([v3 BOOLValue])
  {
    BOOL v4 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsArchived];
    unsigned int v5 = [v4 BOOLValue] ^ 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

BOOL sub_100014780(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  BOOL v3 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsAltAccount];
  unsigned __int8 v4 = [v3 BOOLValue];

  if (v4)
  {
LABEL_13:
    BOOL v14 = 0;
    goto LABEL_14;
  }
  uint64_t v5 = NRDevicePropertyIsActive;
  uint64_t v6 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsActive];
  if ([v6 BOOLValue])
  {
  }
  else
  {
    BOOL v7 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsArchived];
    unsigned int v8 = [v7 BOOLValue];

    if (!v8)
    {
      BOOL v14 = 1;
      goto LABEL_14;
    }
  }
  uint64_t v9 = nr_framework_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    uint64_t v11 = nr_framework_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 138412290;
      id v20 = v2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %@ is active", (uint8_t *)&v19, 0xCu);
    }
  }
  unsigned int v12 = nr_framework_log();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

  BOOL v14 = 0;
  if (v13)
  {
    id v15 = nr_framework_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v16 = [(NRDevice *)v2 valueForProperty:v5];
      unsigned int v17 = [v16 BOOLValue];
      int v19 = 67109120;
      LODWORD(v20) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Bool answer: %d", (uint8_t *)&v19, 8u);
    }
    goto LABEL_13;
  }
LABEL_14:

  return v14;
}

void sub_100014984(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = nr_framework_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_framework_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Send block called with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100014A70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100014A80(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = nr_framework_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_framework_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Send block called with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100014B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100014B7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = nr_framework_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_framework_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Send block called with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100014C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100014FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  BOOL v5 = [v4 value];

  if (v3 && [v3 isActive] && v5)
  {
    uint64_t v6 = nr_framework_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      id v8 = nr_framework_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 136315138;
        v24 = "-[NRTermsAcknowledgementRegistryService checkForAcknowledgement:forDeviceID:withCompletion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s:Device active and has a BTUUID", (uint8_t *)&v23, 0xCu);
      }
    }
    uint64_t v9 = [*(id *)(a1 + 32) termsAcknowledgementServiceGetRemoteObject];
    unsigned int v10 = [v9 isIDSConnected];
    uint64_t v11 = nr_framework_log();
    unsigned int v12 = v11;
    if (v10)
    {
      BOOL v13 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

      if (v13)
      {
        BOOL v14 = nr_framework_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 136315138;
          v24 = "-[NRTermsAcknowledgementRegistryService checkForAcknowledgement:forDeviceID:withCompletion:]_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s:Connected.  Sending checkTermsEvent to watch", (uint8_t *)&v23, 0xCu);
        }
      }
      [v9 checkTermsEvent:*(void *)(a1 + 40) toIDSBTUUID:v5 withResponseBlock:*(void *)(a1 + 48)];
    }
    else
    {
      BOOL v19 = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);

      if (v19)
      {
        id v20 = nr_framework_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1000F693C(v20);
        }
      }
      uint64_t v21 = *(void *)(a1 + 48);
      id v22 = +[NRTermsAcknowledgementRegistry errorWithEnum:9];
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v22);
    }
  }
  else
  {
    id v15 = nr_framework_log();
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);

    if (v16)
    {
      unsigned int v17 = nr_framework_log();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1000F68B8(v17);
      }
    }
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v9 = +[NRTermsAcknowledgementRegistry errorWithEnum:8];
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v9);
  }
}

void sub_1000156D0(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDevice];
  unsigned __int8 v4 = [v3 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  BOOL v5 = [v4 value];

  uint64_t v6 = [*(id *)(a1 + 32) queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000157BC;
  v9[3] = &unk_100165530;
  uint64_t v7 = *(void *)(a1 + 40);
  id v10 = v5;
  uint64_t v11 = v7;
  id v8 = v5;
  dispatch_async(v6, v9);
}

void sub_1000157BC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) BOOLValue])
  {
    uint64_t v2 = +[EPKeychain storeKey:@"watchgraduation" keychainGroup:@"com.apple.nanoregistry.watchgraduation"];
    if (v2)
    {
      id v3 = nr_framework_log();
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

      if (v4)
      {
        BOOL v5 = nr_framework_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_1000F69C0(v5);
        }
      }
    }
  }
  uint64_t v6 = [*(id *)(a1 + 40) delegate];
  [v6 transactionDidComplete:*(void *)(a1 + 40)];
}

void sub_100015A10(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_100015BD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 40));
  BOOL v5 = [WeakRetained queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100015C9C;
  v7[3] = &unk_100165530;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_100015C9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) processDiff:*(void *)(a1 + 40)];
}

void sub_100015ECC(uint64_t a1, void *a2)
{
  id v3 = [a2 copy];
  BOOL v4 = [v3 applyDiff:*(void *)(a1 + 32)];

  if (!v4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 32));
    id v6 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100015F9C;
    block[3] = &unk_1001655F8;
    block[4] = *(void *)(a1 + 40);
    dispatch_async(v6, block);
  }
}

id sub_100015F9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

void sub_1000160F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) timer];
  [v2 invalidate];

  [*(id *)(a1 + 32) setTimer:0];
  NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
  CFStringRef v8 = @"Timeout";
  id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  BOOL v4 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionWaitForDeviceCollectionChanges" code:0 userInfo:v3];

  BOOL v5 = [*(id *)(a1 + 32) routingSlipEntry];
  id v6 = [v5 errors];
  [v6 addObject:v4];

  [*(id *)(a1 + 32) transactionDidComplete];
}

void sub_100016940(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_100016968(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = [WeakRetained registry];
    NSErrorUserInfoKey v7 = [v6 collection];
    CFStringRef v8 = [v7 activeDeviceID];

    if (v8)
    {
      uint64_t v9 = [v3 allPairingIDs];
      unsigned int v10 = [v9 containsObject:v8];

      if (v10)
      {
        uint64_t v11 = [v3 objectForKeyedSubscript:v8];
        unsigned int v12 = [v11 diff];
        BOOL v13 = [v12 objectForKeyedSubscript:NRDevicePropertyIsPaired];
        BOOL v14 = [v13 diff];
        id v15 = [v14 value];

        LOBYTE(v14) = [v15 BOOLValue];
        BOOL v16 = [v12 objectForKeyedSubscript:_NRDevicePropertyCapabilities];
        unsigned int v17 = +[NRQueue registryDaemonQueue];
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        v27[2] = sub_100016C60;
        v27[3] = &unk_100165C98;
        char v31 = (char)v14;
        id v28 = v16;
        id v29 = v5;
        id v30 = v8;
        id v18 = v8;
        id v19 = v16;
        [v17 dispatchAsync:v27];

        CFStringRef v8 = v11;
LABEL_7:

        goto LABEL_8;
      }
      id v20 = +[NRQueue registryDaemonQueue];
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      v24[2] = sub_100016D24;
      v24[3] = &unk_100165530;
      id v25 = v5;
      id v26 = v8;
      [v20 dispatchAsync:v24];
    }
    uint64_t v21 = _NRDevicePropertyCapabilities;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100016DE4;
    v22[3] = &unk_100165CC0;
    id v23 = v5;
    +[NRMutableDeviceCollection parseDiff:v3 forPropertyChange:v21 withBlock:v22];
    unsigned int v12 = v23;
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100016C60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56) || *(void *)(a1 + 32))
  {
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      BOOL v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Looks like the device registry has updated the pairing state- going to check if we need to push the key", v5, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 11) = 1;
    [*(id *)(a1 + 40) update];
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), *(id *)(a1 + 48));
}

id *sub_100016D24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(void **)(a1 + 40);
  BOOL v5 = *(void **)(v2 + 56);
  id result = (id *)(v2 + 56);
  if (v5 != v3)
  {
    objc_storeStrong(result, v3);
    id v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      CFStringRef v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Looks like the device registry has updated the active state- going to check if we need to push the key", v9, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 11) = 1;
    return (id *)[*(id *)(a1 + 32) update];
  }
  return result;
}

void sub_100016DE4(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Looks like the device registry has updated the capabilities- going to check if we need to push the key", buf, 2u);
    }
  }
  BOOL v5 = +[NRQueue registryDaemonQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100016EF4;
  v6[3] = &unk_1001655F8;
  id v7 = *(id *)(a1 + 32);
  [v5 dispatchAsync:v6];
}

id sub_100016EF4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 11) = 1;
  return [*(id *)(a1 + 32) update];
}

id sub_100016F08(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100017130(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: kSBSLockStateNotifyKey received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

id sub_1000171CC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: kMobileKeyBagLockStatusNotifyToken received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

void sub_10001766C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v3 = +[NSArray arrayWithObjects:&v6 count:1];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100017758;
  v4[3] = &unk_100165D10;
  id v5 = *(id *)(a1 + 48);
  [v2 tagInBluetoothWatches:v3 withCompletion:v4];
}

uint64_t sub_100017758(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

void sub_100017CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 200), 8);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  _Block_object_dispose((const void *)(v35 - 136), 8);
  _Block_object_dispose((const void *)(v35 - 104), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100017D58(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100017D68(uint64_t a1)
{
}

void sub_100017D70(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 activeDevice];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 isPaired];
  uint64_t v4 = [v3 pairingID];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  id v7 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"119C9267-C24D-4FC3-8FE9-2D394943F2E6"];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v3 supportsCapability:v7];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [*(id *)(a1 + 32) shouldConfirmKeyForWatch:*(void *)(*(void *)(*(void *)(a1 + 48) + 8)+ 40)];
  CFStringRef v8 = [v3 objectForKeyedSubscript:_NRDevicePropertyMigrationKeyRevision];
  uint64_t v9 = [v8 value];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = [v9 integerValue] != 0;
  unsigned int v10 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  uint64_t v11 = [v10 value];
  uint64_t v12 = *(void *)(*(void *)(a1 + 80) + 8);
  BOOL v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    BOOL v14 = nr_daemon_log();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);

    if (v15)
    {
      BOOL v16 = nr_daemon_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Checking if the keychain has a new key to push to the watch (once a day)", buf, 2u);
      }
    }
  }
  unsigned int v17 = +[NRQueue registryDaemonQueue];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100017FF0;
  v23[3] = &unk_100165D88;
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v26 = v19;
  int8x16_t v27 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
  char v31 = *(unsigned char *)(a1 + 96);
  __int16 v32 = *(_WORD *)(a1 + 97);
  void v23[4] = v18;
  id v24 = v9;
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v28 = *(void *)(a1 + 80);
  uint64_t v29 = v20;
  uint64_t v30 = v21;
  id v22 = v9;
  [v17 dispatchAsync:v23];
}

void sub_100017FF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) keychainSyncStatusManager];
  unsigned int v3 = [v2 enabled];

  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)
    || !*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24))
  {
    goto LABEL_23;
  }
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
  {
    if (v3) {
      goto LABEL_10;
    }
LABEL_23:
    *(unsigned char *)(*(void *)(a1 + 32) + 11) = 0;
    uint64_t v18 = *(void *)(*(void *)(a1 + 96) + 8);
    uint64_t v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = 0;

    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
    id v22 = *(void **)(a1 + 32);
    [v22 unregisterForNotifications];
    return;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
    char v4 = v3;
  }
  else {
    char v4 = 0;
  }
  if ((v4 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_10:
  uint64_t v5 = [*(id *)(a1 + 32) keyChannel];

  if (!v5) {
    goto LABEL_23;
  }
  [*(id *)(a1 + 32) registerForNotifications];
  uint64_t v6 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v6 + 11))
  {
    *(unsigned char *)(v6 + 11) = 0;
    id v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
LABEL_16:

        goto LABEL_17;
      }
      *(_WORD *)long long buf = 0;
      unsigned int v10 = "EPMigrationKeyPusher: Pushing migration key because something changed in the registry";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
      goto LABEL_16;
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(unsigned char *)(a1 + 105)) {
        goto LABEL_35;
      }
      id v23 = nr_daemon_log();
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);

      if (!v24) {
        goto LABEL_17;
      }
      uint64_t v9 = nr_daemon_log();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unsigned int v10 = "EPMigrationKeyPusher: Pushing migration key because there is no passcode and we've become UI Unlocked";
      goto LABEL_15;
    }
    if (!*(unsigned char *)(a1 + 106)) {
      goto LABEL_35;
    }
    uint64_t v25 = nr_daemon_log();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

    if (v26)
    {
      uint64_t v9 = nr_daemon_log();
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_16;
      }
      *(_WORD *)long long buf = 0;
      unsigned int v10 = "EPMigrationKeyPusher: Pushing migration key because the phone has become unlocked";
      goto LABEL_15;
    }
  }
LABEL_17:
  uint64_t v11 = nr_daemon_log();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

  if (v12)
  {
    BOOL v13 = nr_daemon_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Trying to grab the key", buf, 2u);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(void *)(v6 + 40))
  {
    BOOL v14 = [(id)v6 keymaster];
    id v15 = [v14 newResourceWithDelegate:*(void *)(a1 + 32)];
    uint64_t v16 = *(void *)(a1 + 32);
    unsigned int v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    uint64_t v6 = *(void *)(a1 + 32);
  }
LABEL_35:
  if ([*(id *)(v6 + 40) availability] != (id)1)
  {
    if ([*(id *)(*(void *)(a1 + 32) + 40) availability] != (id)2)
    {
      v42 = nr_daemon_log();
      BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);

      if (v43)
      {
        v44 = nr_daemon_log();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Haven't gotten the unlock assertion yet", buf, 2u);
        }
      }
      return;
    }
    uint64_t v27 = *(void *)(a1 + 32);
LABEL_46:
    v39 = *(void **)(v27 + 40);
    *(void *)(v27 + 40) = 0;

    goto LABEL_47;
  }
  uint64_t v27 = *(void *)(a1 + 32);
  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)) {
    goto LABEL_46;
  }
  if (*(unsigned char *)(v27 + 10)) {
    return;
  }
  *(unsigned char *)(v27 + 10) = 1;
  uint64_t v28 = nr_daemon_log();
  BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);

  if (v29)
  {
    uint64_t v30 = nr_daemon_log();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = (int)[*(id *)(a1 + 40) intValue];
      __int16 v32 = [*(id *)(*(void *)(a1 + 32) + 40) key];
      int v33 = sub_10001D530((uint64_t)v32);
      *(_DWORD *)long long buf = 134218240;
      uint64_t v53 = v31;
      __int16 v54 = 2048;
      uint64_t v55 = v33;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Watch has key %lx. Keychain key version is %lx", buf, 0x16u);
    }
  }
  id v34 = [*(id *)(a1 + 40) integerValue];
  uint64_t v35 = [*(id *)(*(void *)(a1 + 32) + 40) key];
  int v36 = sub_10001D530((uint64_t)v35);

  if (v34 == (id)v36)
  {
    uint64_t v37 = *(void *)(a1 + 32);
    v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
    [*(id *)(a1 + 32) didConfirmKeyForWatch:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
LABEL_47:
    uint64_t v40 = *(void *)(*(void *)(a1 + 96) + 8);
    v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 40) = 0;

    return;
  }
  uint64_t v45 = nr_daemon_log();
  BOOL v46 = os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT);

  if (v46)
  {
    v47 = nr_daemon_log();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "EPMigrationKeyPusher: Version mismatch; sending the key",
        buf,
        2u);
    }
  }
  id v48 = *(void **)(a1 + 32);
  uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_1000185C8;
  v50[3] = &unk_100165D60;
  v50[4] = v48;
  long long v51 = *(_OWORD *)(a1 + 88);
  [v48 sendMessageToWatch:v49 withCompletion:v50];
}

void sub_1000185C8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 10) = 0;
  if (a2) {
    [*(id *)(a1 + 32) didConfirmKeyForWatch:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_100018788(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1000187B0(id a1, CBPeripheral *a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    uint64_t v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = [(CBPeripheral *)v2 identifier];
      id v7 = [v6 UUIDString];
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Tagging peripheral (%@) as Apple Watch", (uint8_t *)&v8, 0xCu);
    }
  }
  [(CBPeripheral *)v2 tag:@"IsAppleWatch"];
}

void sub_1000188BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  unsigned int v3 = +[NRQueue registryDaemonQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100018990;
  v6[3] = &unk_1001655F8;
  id v4 = WeakRetained;
  id v7 = v4;
  [v3 dispatchAfter:v6 withBlock:5.0];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

id sub_100018990(uint64_t a1)
{
  return [*(id *)(a1 + 32) forceSecureBackup];
}

void sub_100018AF4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 48) backupWithInfo:0];
  unsigned int v3 = nr_daemon_log();
  id v4 = v3;
  if (v2)
  {
    BOOL v5 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v5)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000F6C9C((uint64_t)v2, v6, v7, v8, v9, v10, v11, v12);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v13 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v13)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Secure backup successfully forced", buf, 2u);
      }
      goto LABEL_8;
    }
  }
  BOOL v14 = +[NRQueue registryDaemonQueue];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100018C50;
  v15[3] = &unk_1001655F8;
  void v15[4] = *(void *)(a1 + 32);
  [v14 dispatchAsync:v15];
}

void sub_100018C50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = 0;
}

uint64_t sub_100018F24(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadString();
      BOOL v13 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000190CC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1000195F8(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = [*(id *)(a1 + 32) _deviceCollection:a2 diffToUpdateBluetoothId:*(void *)(a1 + 40) ofDevice:*(void *)(a1 + 48)];
  if (v3)
  {
    char v4 = [[EPSagaOperandDiff alloc] initWithDiff:v3];
    unsigned int v5 = [*(id *)(a1 + 56) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100019760;
    block[3] = &unk_100165868;
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = v4;
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v6 = v4;
    dispatch_async(v5, block);
  }
  else
  {
    unint64_t v7 = [*(id *)(a1 + 56) queue];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000197EC;
    v8[3] = &unk_1001655F8;
    v8[4] = *(void *)(a1 + 32);
    dispatch_async(v7, v8);
  }
}

void sub_100019760(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned int v3 = [*(id *)(a1 + 32) operands];
  [v3 setObject:v2 forKeyedSubscript:@"transactionDiff"];

  [*(id *)(a1 + 32) persist];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8));
  [WeakRetained transactionDidComplete:*(void *)(a1 + 48)];
}

void sub_1000197EC(uint64_t a1)
{
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Missing operand";
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  unsigned int v3 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionUpdateNRDeviceWithNewBluetoothDevice" code:0 userInfo:v2];

  char v4 = [*(id *)(a1 + 32) routingSlipEntry];
  unsigned int v5 = [v4 errors];
  [v5 addObject:v3];

  unint64_t v6 = [*(id *)(a1 + 32) routingSlipEntry];
  [v6 persist];

  unint64_t v7 = [*(id *)(a1 + 32) delegate];
  [v7 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001999C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  [WeakRetained transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_100019EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location)
{
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v13 - 88));
  _Unwind_Resume(a1);
}

void sub_100019EEC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned int v3 = WeakRetained;
  if (WeakRetained)
  {
    if (*(void *)(a1 + 32))
    {
      dispatch_time_t v4 = dispatch_time(0, 5000000000);
      unsigned int v5 = [*(id *)(a1 + 40) queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100019FC8;
      block[3] = &unk_1001655F8;
      void block[4] = v3;
      dispatch_after(v4, v5, block);
    }
    else
    {
      [WeakRetained transactionDidComplete];
    }
  }
}

id sub_100019FC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

void sub_10001A0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001A114(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    unsigned int v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      unsigned int v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000F6D08(v5);
      }
    }
    id v6 = objc_loadWeakRetained(v1);
    [v6 transactionDidComplete];
  }
}

void sub_10001A6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10001A708(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = nr_daemon_log();
  id v6 = v5;
  if (v4)
  {
    BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      NSErrorUserInfoKey v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000F6D4C((uint64_t)v4, v8);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v9 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      NSErrorUserInfoKey v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKHealthStore forceNanoSyncWithPullRequest completed", v11, 2u);
      }
      goto LABEL_8;
    }
  }
  id v10 = [*(id *)(a1 + 32) delegate];
  [v10 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001A804(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  unsigned int v5 = nr_daemon_log();
  id v6 = v5;
  if (v4)
  {
    BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      NSErrorUserInfoKey v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000F6DC4((uint64_t)v4, v8);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v9 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      NSErrorUserInfoKey v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HKHealthStore waitForLastChanceSyncWithDevicePairingID completed", v11, 2u);
      }
      goto LABEL_8;
    }
  }
  id v10 = [*(id *)(a1 + 32) delegate];
  [v10 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001A940(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("HKHealthStore");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001A1090 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_1000F6E3C();
    sub_10001A998();
  }
}

void sub_10001A998()
{
  v1[0] = 0;
  if (!qword_1001A1098)
  {
    v1[1] = _NSConcreteStackBlock;
    v1[2] = 3221225472;
    v1[3] = sub_10001AA94;
    v1[4] = &unk_100165618;
    v1[5] = v1;
    long long v2 = off_100165E88;
    uint64_t v3 = 0;
    qword_1001A1098 = _sl_dlopen();
  }
  v0 = (void *)v1[0];
  if (!qword_1001A1098)
  {
    v0 = (void *)abort_report_np();
    goto LABEL_7;
  }
  if (v1[0]) {
LABEL_7:
  }
    free(v0);
}

uint64_t sub_10001AA94()
{
  uint64_t result = _sl_dlopen();
  qword_1001A1098 = result;
  return result;
}

void sub_10001AB08(uint64_t a1)
{
  sub_10001A998();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = objc_getClass("HKNanoSyncControl");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    qword_1001A10A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  else
  {
    long long v2 = (EPSagaTransactionPairIDSDevice *)sub_1000F6E64();
    [(EPSagaTransactionPairIDSDevice *)v2 beginTransactionWithRoutingSlipEntry:v4 serviceRegistry:v5];
  }
}

id sub_10001AEA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) idsTimerTimedOut];
}

void sub_10001AEB0(id *a1)
{
  long long v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingStopForDevice %@", buf, 0xCu);
    }
  }
  id v6 = a1[4];
  id v7 = a1[6];
  id v8 = a1[7];
  id v9 = a1[8];
  id v10 = a1[9];
  id v11 = a1[10];
  IDSLocalPairingStopForDevice();
}

void sub_10001B058(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      BOOL v8 = *(void *)(a1 + 40) != 0;
      *(_DWORD *)long long buf = 138412802;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      id v15 = v3;
      __int16 v16 = 1024;
      BOOL v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingStopForDevice %@ completed with error %@, calling IDSLocalPairingAddPairedDeviceWithInfo with key = %{BOOL}d", buf, 0x1Cu);
    }
  }
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 72);
  IDSLocalPairingAddPairedDeviceWithInfo();
}

void sub_10001B1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      uint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F6E8C();
      }
    }
    BOOL v8 = [*(id *)(a1 + 40) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10001B464;
    block[3] = &unk_100165668;
    id v9 = &v25;
    id v25 = *(id *)(a1 + 40);
    id v10 = (id *)v26;
    id v11 = v3;
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *(void **)(a1 + 56);
    v26[0] = v11;
    v26[1] = v12;
    __int16 v14 = &v27;
    id v27 = v13;
    dispatch_async(v8, block);
  }
  else
  {
    BOOL v15 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v15)
    {
      __int16 v16 = nr_daemon_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingAddPairedDeviceWithInfo %@ completed, calling IDSLocalPairingConnectPairedDevice", buf, 0xCu);
      }
    }
    id v9 = &v21;
    id v21 = *(id *)(a1 + 32);
    id v10 = (id *)v22;
    id v18 = *(id *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v20 = *(void **)(a1 + 56);
    v22[0] = v18;
    v22[1] = v19;
    __int16 v14 = &v23;
    id v23 = v20;
    BOOL v8 = [[*(id *)(a1 + 40) queue:_NSConcreteStackBlock withPriority:3221225472 usingBlock:sub_10001B574] waitUntilFinished:&unk_100165EB0];
    IDSLocalPairingConnectPairedDevice();
  }
}

id sub_10001B464(uint64_t a1)
{
  long long v2 = [*(id *)(a1 + 32) errors];
  NSErrorUserInfoKey v7 = NSLocalizedDescriptionKey;
  id v3 = [*(id *)(a1 + 40) description];
  BOOL v8 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
  BOOL v5 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionPairIDSDevice" code:0 userInfo:v4];
  [v2 addObject:v5];

  [*(id *)(a1 + 32) persist];
  return [*(id *)(a1 + 48) beginRollbackWithRoutingSlipEntry:*(void *)(a1 + 32) serviceRegistry:*(void *)(a1 + 56)];
}

void sub_10001B574(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      NSErrorUserInfoKey v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F6EF8();
      }
    }
    BOOL v8 = [*(id *)(a1 + 40) errors];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    id v9 = [v3 description];
    id v18 = v9;
    id v10 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    id v11 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionPairIDSDevice" code:1 userInfo:v10];
    [v8 addObject:v11];

    [*(id *)(a1 + 40) persist];
    [*(id *)(a1 + 48) beginRollbackWithRoutingSlipEntry:*(void *)(a1 + 40) serviceRegistry:*(void *)(a1 + 56)];
  }
  else
  {
    BOOL v12 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v12)
    {
      uint64_t v13 = nr_daemon_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        int v15 = 138412290;
        uint64_t v16 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingConnectPairedDevice %@ completed", (uint8_t *)&v15, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 48) + 10) = 1;
    [*(id *)(a1 + 48) checkIfIDSIsPaired];
  }
}

void sub_10001BC8C(id *a1)
{
  long long v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingUnpairStartForDevice %@", buf, 0xCu);
    }
  }
  id v6 = a1[4];
  objc_copyWeak(&v9, a1 + 7);
  id v7 = a1[5];
  id v8 = a1[6];
  IDSLocalPairingUnpairStartForDevice();

  objc_destroyWeak(&v9);
}

void sub_10001BE18(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10001BE34(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (!v6) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000F6FFC((uint64_t)a1);
    }
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (!v8) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingUnpairStartForDevice %@ completed", buf, 0xCu);
    }
  }

LABEL_9:
  id v10 = nr_daemon_log();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

  if (v11)
  {
    BOOL v12 = nr_daemon_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingStopForDevice %@", buf, 0xCu);
    }
  }
  id v14 = a1[4];
  objc_copyWeak(&v17, a1 + 7);
  id v15 = a1[5];
  id v16 = a1[6];
  IDSLocalPairingDeletePairedDevice();

  objc_destroyWeak(&v17);
}

void sub_10001C09C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10001C0B8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (!v6) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000F7090((uint64_t)a1);
    }
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (!v8) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingDeletePairedDevice %@ completed", buf, 0xCu);
    }
  }

LABEL_9:
  id v10 = nr_daemon_log();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

  if (v11)
  {
    BOOL v12 = nr_daemon_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingStopForDevice %@", buf, 0xCu);
    }
  }
  id v14 = a1[4];
  objc_copyWeak(&v16, a1 + 7);
  id v15 = a1[5];
  IDSLocalPairingStopForDevice();

  objc_destroyWeak(&v16);
}

void sub_10001C30C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10001C328(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (!v6) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1000F7124((uint64_t)a1);
    }
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (!v8) {
      goto LABEL_9;
    }
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingStopForDevice %@ completed", buf, 0xCu);
    }
  }

LABEL_9:
  id v10 = nr_daemon_log();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

  if (v11)
  {
    BOOL v12 = nr_daemon_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingUnpairForDevice %@", buf, 0xCu);
    }
  }
  id v15 = a1[4];
  objc_copyWeak(&v16, a1 + 6);
  id v14 = [a1[5] queue:_NSConcreteStackBlock withPriority:3221225472 usingBlock:sub_10001C598];
  IDSLocalPairingUnpairForDevice();

  objc_destroyWeak(&v16);
}

void sub_10001C57C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10001C598(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F71B8(a1);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [*(id *)(a1 + 32) UUIDString];
        int v12 = 138412290;
        uint64_t v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingUnpairForDevice %@ completed", (uint8_t *)&v12, 0xCu);
      }
      goto LABEL_8;
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  BOOL v11 = [WeakRetained delegate];
  [v11 transactionDidComplete:WeakRetained];
}

void sub_10001C798(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_10001C7D0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10001C7F4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

id sub_10001C8A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

id sub_10001C9A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

void sub_10001CA98(id a1)
{
  uint64_t v1 = objc_alloc_init(NRVolatilePreferences);
  long long v2 = (void *)qword_1001A10A8;
  qword_1001A10A8 = (uint64_t)v1;

  id v3 = (void *)qword_1001A10A8;

  [v3 setDomain:@"com.apple.NanoRegistry.NRLaunchNotificationController.volatile"];
}

uint64_t sub_10001CF0C(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10001D088(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_30;
        }
        v14 += 7;
        BOOL v9 = v15++ >= 9;
        if (v9)
        {
          LODWORD(v16) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v16) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadData();
      uint64_t v13 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10001D354(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_10001D51C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10001D530(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

id sub_10001D73C(uint64_t a1, uint64_t a2)
{
  char v4 = objc_opt_class();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001D7C8;
  v7[3] = &unk_1001655F8;
  uint64_t v5 = *(void *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  return [v4 enableDaemons:a2 serviceRegistry:v5 completion:v7];
}

void sub_10001D7C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001D81C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

id sub_10001DA54(uint64_t a1, uint64_t a2)
{
  char v4 = objc_opt_class();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10001DAE0;
  v7[3] = &unk_1001655F8;
  uint64_t v5 = *(void *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  return [v4 enableDaemons:a2 serviceRegistry:v5 completion:v7];
}

void sub_10001DAE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001DB34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10001DC9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(void *)(a1 + 32)) {
    [v5 objectForKeyedSubscript:];
  }
  else {
  unint64_t v7 = [v5 activeDevice];
  }
  char v8 = [v7 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  BOOL v9 = [v8 value];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v10 = v5;
  id v11 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v27;
    while (2)
    {
      char v14 = 0;
      do
      {
        if (*(void *)v27 != v13) {
          objc_enumerationMutation(v10);
        }
        unsigned int v15 = [v10 objectForKeyedSubscript:*(void *)(*((void *)&v26 + 1) + 8 * (void)v14)];
        if ([v15 isPaired] && (objc_msgSend(v15, "isArchived") & 1) == 0)
        {

          char v16 = 1;
          goto LABEL_15;
        }

        char v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [v10 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v12) {
        continue;
      }
      break;
    }
  }
  char v16 = 0;
LABEL_15:

  unint64_t v17 = [*(id *)(a1 + 40) queue];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10001DEE8;
  v20[3] = &unk_100166030;
  char v24 = v16;
  char v25 = *(unsigned char *)(a1 + 56);
  id v21 = v7;
  id v22 = v9;
  id v23 = *(id *)(a1 + 48);
  id v18 = v9;
  id v19 = v7;
  dispatch_async(v17, v20);
}

uint64_t sub_10001DEE8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (!*(unsigned char *)(a1 + 57))
    {
      unsigned int v2 = 0;
LABEL_8:
      if ([*(id *)(a1 + 32) isPaired]) {
        v2 |= [*(id *)(a1 + 32) isActive];
      }
      unsigned int v3 = [*(id *)(a1 + 40) BOOLValue];
      char v4 = nr_daemon_log();
      BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

      if (v3 || !v2)
      {
        if (v5)
        {
          char v8 = nr_daemon_log();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 136315138;
            char v14 = "+[EPSagaTransactionSetDaemonsEnabled getNormalDaemonValueWith:serviceRegistry:forceEnableWhenPairedOrA"
                  "ctive:completion:]_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s: Setting daemons to NRDaemonEnableAltAccountDaemons", (uint8_t *)&v13, 0xCu);
          }
        }
        unint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
      }
      else
      {
        if (v5)
        {
          id v6 = nr_daemon_log();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            int v13 = 136315138;
            char v14 = "+[EPSagaTransactionSetDaemonsEnabled getNormalDaemonValueWith:serviceRegistry:forceEnableWhenPairedOrA"
                  "ctive:completion:]_block_invoke_2";
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s: Setting daemons to NRDaemonEnableNanoLaunchAndAltAccountDaemons", (uint8_t *)&v13, 0xCu);
          }
        }
        unint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
      }
      return v7();
    }
LABEL_5:
    if ([*(id *)(a1 + 32) isPaired]) {
      unsigned int v2 = 1;
    }
    else {
      unsigned int v2 = [*(id *)(a1 + 32) isActive];
    }
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 57)) {
    goto LABEL_5;
  }
  BOOL v9 = nr_daemon_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    id v11 = nr_daemon_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315138;
      char v14 = "+[EPSagaTransactionSetDaemonsEnabled getNormalDaemonValueWith:serviceRegistry:forceEnableWhenPairedOrActive:"
            "completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: Setting daemons to NRDaemonEnableNone", (uint8_t *)&v13, 0xCu);
    }
  }
  unint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
  return v7();
}

uint64_t sub_10001E230(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001E7CC(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a1[4];
  id v7 = a3;
  char v8 = [v5 objectForKeyedSubscript:v6];
  BOOL v9 = [v5 objectForKeyedSubscript:a1[4]];
  BOOL v10 = [v9 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  id v11 = [v10 value];

  id v12 = [v5 objectForKeyedSubscript:a1[4]];
  int v13 = [v12 objectForKeyedSubscript:_NRDevicePropertyMigrationIDSCloudIdentifier];
  char v14 = [v13 value];

  unsigned int v15 = [v7 securePropertyForID:v14];

  char v16 = [v5 activeDeviceID];
  unint64_t v17 = [v5 objectForKeyedSubscript:a1[4]];
  id v18 = [v17 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  id v19 = [v18 value];

  if (v19 && [v19 BOOLValue])
  {
    uint64_t v20 = [v5 objectForKeyedSubscript:a1[4]];
    id v21 = [v20 objectForKeyedSubscript:_NRDevicePropertyAltAccountIdentifier];
    [v21 value];
    id v22 = v34 = v14;

    id v23 = [a1[5] registry];
    char v24 = [v23 secureProperties];
    [v24 objectForKeyedSubscript:v22];
    int v33 = v11;
    v26 = char v25 = v8;

    unsigned int v15 = (void *)v26;
    char v8 = v25;
    id v11 = v33;
    char v14 = v34;
  }
  long long v27 = [a1[6] queue:v33];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001EAD4;
  block[3] = &unk_100166080;
  id v36 = a1[4];
  id v37 = v19;
  id v38 = v15;
  id v39 = v11;
  id v40 = v16;
  id v41 = v8;
  id v42 = a1[5];
  id v43 = a1[7];
  id v28 = v8;
  id v29 = v16;
  id v30 = v11;
  id v31 = v15;
  id v32 = v19;
  dispatch_async(v27, block);
}

void sub_10001EAD4(void *a1)
{
  v115 = +[NSMutableArray array];
  unsigned int v2 = [EPRoutingSlipEntry alloc];
  uint64_t v3 = objc_opt_class();
  v148[0] = @"switchToNRDeviceUUID";
  char v4 = [[EPSagaOperandUUID alloc] initWithUUID:a1[4]];
  v149[0] = v4;
  v148[1] = @"shouldWaitForConnectivity";
  id v5 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  v149[1] = v5;
  v148[2] = @"destinationIsAltAccount";
  id v6 = [EPSagaOperandNumber alloc];
  if (a1[5]) {
    id v7 = (void *)a1[5];
  }
  else {
    id v7 = &__kCFBooleanFalse;
  }
  char v8 = [(EPSagaOperandNumber *)v6 initWithNumber:v7];
  v149[2] = v8;
  BOOL v9 = +[NSDictionary dictionaryWithObjects:v149 forKeys:v148 count:3];
  BOOL v10 = [(EPRoutingSlipEntry *)v2 initWithName:@"assertion" transactionClass:v3 operands:v9];

  [v115 addObject:v10];
  id v11 = [EPRoutingSlipEntry alloc];
  uint64_t v12 = objc_opt_class();
  v146[0] = @"idsDeviceIdentifier";
  int v13 = [[EPSagaOperandString alloc] initWithString:a1[6]];
  v146[1] = @"destinationIsAltAccount";
  v147[0] = v13;
  char v14 = [[EPSagaOperandNumber alloc] initWithNumber:a1[5]];
  v147[1] = v14;
  unsigned int v15 = +[NSDictionary dictionaryWithObjects:v147 forKeys:v146 count:2];
  char v16 = [(EPRoutingSlipEntry *)v11 initWithName:@"startAdvertising" transactionClass:v12 operands:v15];

  [v115 addObject:v16];
  if (CFPreferencesGetAppBooleanValue(@"AlwaysFailMigration", @"com.apple.nanoregistryd", 0))
  {
    unint64_t v17 = sub_1000A3CF0();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      id v19 = sub_1000A3CF0();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Always Fail migration set", buf, 2u);
      }
    }
    uint64_t v20 = [[EPRoutingSlipEntry alloc] initWithName:@"FakeError" transactionClass:objc_opt_class() operands:&__NSDictionary0__struct];

    [v115 addObject:v20];
    char v16 = v20;
  }
  id v21 = [EPRoutingSlipEntry alloc];
  uint64_t v22 = objc_opt_class();
  v144[0] = @"iAmACompanionDevice";
  id v23 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  v145[0] = v23;
  v144[1] = @"discoverableCoreBluetoothID";
  char v24 = [[EPSagaOperandUUID alloc] initWithUUID:a1[7]];
  v145[1] = v24;
  +[NSDictionary dictionaryWithObjects:v145 forKeys:v144 count:2];
  char v25 = v116 = a1;
  uint64_t v26 = [(EPRoutingSlipEntry *)v21 initWithName:@"pairBluetooth" transactionClass:v22 operands:v25];

  [v115 addObject:v26];
  long long v27 = [EPRoutingSlipEntry alloc];
  uint64_t v28 = objc_opt_class();
  v142[0] = @"setDaemonsEnabled";
  id v29 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176880];
  v143[0] = v29;
  v142[1] = @"setDaemonsEnabledRollbackNormalizeDeviceID";
  id v30 = [[EPSagaOperandUUID alloc] initWithUUID:a1[8]];
  v143[1] = v30;
  id v31 = +[NSDictionary dictionaryWithObjects:v143 forKeys:v142 count:2];
  id v32 = [(EPRoutingSlipEntry *)v27 initWithName:@"disableDaemons" transactionClass:v28 operands:v31];

  [v115 addObject:v32];
  int v33 = [EPRoutingSlipEntry alloc];
  uint64_t v34 = objc_opt_class();
  CFStringRef v140 = @"nrDeviceIdentifier";
  uint64_t v35 = [[EPSagaOperandUUID alloc] initWithUUID:a1[4]];
  v141 = v35;
  id v36 = +[NSDictionary dictionaryWithObjects:&v141 forKeys:&v140 count:1];
  id v37 = [(EPRoutingSlipEntry *)v33 initWithName:@"quarantine" transactionClass:v34 operands:v36];

  [v115 addObject:v37];
  id v38 = [EPRoutingSlipEntry alloc];
  uint64_t v39 = objc_opt_class();
  v138[0] = @"coreBluetoothID";
  id v40 = [[EPSagaOperandDynamic alloc] initWithEntryName:@"pairBluetooth" operandName:@"newlyPairedCoreBluetoothID"];
  v138[1] = @"nrDeviceIdentifier";
  v139[0] = v40;
  id v41 = [[EPSagaOperandUUID alloc] initWithUUID:a1[4]];
  v139[1] = v41;
  id v42 = +[NSDictionary dictionaryWithObjects:v139 forKeys:v138 count:2];
  id v43 = [(EPRoutingSlipEntry *)v38 initWithName:@"createUpdateDiff" transactionClass:v39 operands:v42];

  [v115 addObject:v43];
  v44 = [EPRoutingSlipEntry alloc];
  uint64_t v45 = objc_opt_class();
  CFStringRef v136 = @"transactionDiff";
  BOOL v46 = [[EPSagaOperandDynamic alloc] initWithEntryName:@"createUpdateDiff" operandName:@"transactionDiff"];
  v137 = v46;
  v47 = +[NSDictionary dictionaryWithObjects:&v137 forKeys:&v136 count:1];
  id v48 = [(EPRoutingSlipEntry *)v44 initWithName:@"updateDevice" transactionClass:v45 operands:v47];

  [v115 addObject:v48];
  uint64_t v49 = [EPRoutingSlipEntry alloc];
  uint64_t v50 = objc_opt_class();
  v134[0] = @"coreBluetoothID";
  long long v51 = [[EPSagaOperandDynamic alloc] initWithEntryName:@"pairBluetooth" operandName:@"newlyPairedCoreBluetoothID"];
  v135[0] = v51;
  v134[1] = @"destinationIsAltAccount";
  v52 = [[EPSagaOperandNumber alloc] initWithNumber:a1[5]];
  v135[1] = v52;
  v134[2] = @"supportsDirectIPSecPairing";
  uint64_t v53 = [EPSagaOperandNumber alloc];
  __int16 v54 = (void *)a1[9];
  id v55 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6B4C8BB6-D411-406E-BD9B-9CA0F2296C96"];
  v56 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v54 supportsCapability:v55]);
  v57 = [(EPSagaOperandNumber *)v53 initWithNumber:v56];
  v135[2] = v57;
  v58 = +[NSDictionary dictionaryWithObjects:v135 forKeys:v134 count:3];
  v59 = [(EPRoutingSlipEntry *)v49 initWithName:@"pairIDS" transactionClass:v50 operands:v58];

  [v115 addObject:v59];
  v60 = [EPRoutingSlipEntry alloc];
  uint64_t v61 = objc_opt_class();
  v132[0] = @"notificationName";
  v62 = [[EPSagaOperandString alloc] initWithString:@"EPSagaTransactionMigrationCompletionRequestNotification"];
  v133[0] = v62;
  v132[1] = @"isDarwinNotification";
  v63 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanFalse];
  v133[1] = v63;
  v132[2] = @"notificationTimeoutSeconds";
  v64 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176898];
  v133[2] = v64;
  v65 = +[NSDictionary dictionaryWithObjects:v133 forKeys:v132 count:3];
  v66 = [(EPRoutingSlipEntry *)v60 initWithName:@"wait4Watch2Pair" transactionClass:v61 operands:v65];

  [v115 addObject:v66];
  uint64_t v67 = [(id)v116[10] _deviceCollectionDiffWithPairingID:v116[4]];
  v68 = [EPRoutingSlipEntry alloc];
  uint64_t v69 = objc_opt_class();
  CFStringRef v130 = @"transactionDiff";
  v114 = (void *)v67;
  v70 = [[EPSagaOperandDiff alloc] initWithDiff:v67];
  v131 = v70;
  v71 = +[NSDictionary dictionaryWithObjects:&v131 forKeys:&v130 count:1];
  v72 = [(EPRoutingSlipEntry *)v68 initWithName:@"pair" transactionClass:v69 operands:v71];

  [v115 addObject:v72];
  v73 = [EPRoutingSlipEntry alloc];
  uint64_t v74 = objc_opt_class();
  CFStringRef v128 = @"nrDeviceIdentifier";
  v75 = [[EPSagaOperandUUID alloc] initWithUUID:v116[4]];
  v129 = v75;
  v76 = +[NSDictionary dictionaryWithObjects:&v129 forKeys:&v128 count:1];
  v77 = [(EPRoutingSlipEntry *)v73 initWithName:@"delete" transactionClass:v74 operands:v76];

  [v115 addObject:v77];
  if (CFPreferencesGetAppBooleanValue(@"SleepAfterIDS", @"com.apple.nanoregistryd", 0))
  {
    v78 = sub_1000A3CF0();
    BOOL v79 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);

    if (v79)
    {
      v80 = sub_1000A3CF0();
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Waiting 5 minutes to allow for metric testing", buf, 2u);
      }
    }
    v81 = [[EPRoutingSlipEntry alloc] initWithName:@"SleepAfterIDS" transactionClass:objc_opt_class() operands:&__NSDictionary0__struct];

    [v115 addObject:v81];
    v77 = v81;
  }
  v82 = [EPRoutingSlipEntry alloc];
  uint64_t v83 = objc_opt_class();
  v126[0] = @"setDaemonsEnabledNormalizeDeviceID";
  v84 = [[EPSagaOperandUUID alloc] initWithUUID:v116[4]];
  v127[0] = v84;
  v126[1] = @"setDaemonsEnabledRollback";
  v85 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176880];
  v127[1] = v85;
  v126[2] = @"forceEnableIfPairedOrActive";
  v86 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  v127[2] = v86;
  v87 = +[NSDictionary dictionaryWithObjects:v127 forKeys:v126 count:3];
  v88 = [(EPRoutingSlipEntry *)v82 initWithName:@"enableDaemons" transactionClass:v83 operands:v87];

  [v115 addObject:v88];
  v89 = [EPRoutingSlipEntry alloc];
  uint64_t v90 = objc_opt_class();
  CFStringRef v124 = @"timeoutDuration";
  v91 = [[EPSagaOperandNumber alloc] initWithNumber:&off_1001774E0];
  v125 = v91;
  v92 = +[NSDictionary dictionaryWithObjects:&v125 forKeys:&v124 count:1];
  v93 = [(EPRoutingSlipEntry *)v89 initWithName:@"wallClockWaitForDaemonsToEnable" transactionClass:v90 operands:v92];

  [v115 addObject:v93];
  if ([(id)v116[5] BOOLValue])
  {
    p_info = (__objc2_class_ro **)(NRPBMigrationSetKeyResponse + 32);
    v95 = NSCountedSet_ptr;
    p_superclass = (__objc2_class **)(EPSagaOperandNumber + 8);
  }
  else
  {
    v97 = [EPRoutingSlipEntry alloc];
    uint64_t v98 = objc_opt_class();
    CFStringRef v122 = @"nrDeviceIdentifier";
    p_info = NRPBMigrationSetKeyResponse.info;
    v99 = [[EPSagaOperandUUID alloc] initWithUUID:v116[4]];
    v123 = v99;
    v100 = +[NSDictionary dictionaryWithObjects:&v123 forKeys:&v122 count:1];
    v101 = [(EPRoutingSlipEntry *)v97 initWithName:@"pairedsync" transactionClass:v98 operands:v100];

    [v115 addObject:v101];
    v93 = v101;
    v95 = NSCountedSet_ptr;
    p_superclass = EPSagaOperandNumber.superclass;
  }
  if (objc_msgSend((id)v116[5], "BOOLValue", @"idsDeviceIdentifier"))
  {
    id v102 = objc_alloc((Class)(p_superclass + 184));
    uint64_t v103 = objc_opt_class();
    v120[0] = @"nrDeviceIdentifier";
    id v104 = [objc_alloc((Class)(p_info + 506)) initWithUUID:v116[4]];
    v120[1] = v113;
    v121[0] = v104;
    v105 = [[EPSagaOperandString alloc] initWithString:v116[6]];
    v121[1] = v105;
    v106 = +[NSDictionary dictionaryWithObjects:v121 forKeys:v120 count:2];
    v107 = (EPRoutingSlipEntry *)[v102 initWithName:@"healthSharingSetup" transactionClass:v103 operands:v106];

    v95 = NSCountedSet_ptr;
    p_info = (__objc2_class_ro **)(NRPBMigrationSetKeyResponse + 32);

    [v115 addObject:v107];
    v93 = v107;
  }
  id v108 = objc_alloc((Class)(p_superclass + 184));
  uint64_t v109 = objc_opt_class();
  CFStringRef v118 = @"nrDeviceIdentifier";
  id v110 = [objc_alloc((Class)(p_info + 506)) initWithUUID:v116[4]];
  id v119 = v110;
  v111 = [v95[5] dictionaryWithObjects:&v119 forKeys:&v118 count:1];
  id v112 = [v108 initWithName:@"tellIDSLocalPairingSetupCompleted" transactionClass:v109 operands:v111];

  [v115 addObject:v112];
  (*(void (**)(void))(v116[11] + 16))();
}

uint64_t sub_10001FC4C(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 12) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10001FDA8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10002011C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_100020250(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init((Class)NRPBTermsEvent);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (NRPBTermsEventReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100020450(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_10002055C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_100020840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020880(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _notifyClients];
}

void sub_1000208C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _notifyClients];
}

BOOL sub_100020900(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  char v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000209D0;
  v3[3] = &unk_100165840;
  void v3[4] = a1;
  v3[5] = &v4;
  [a1 performUnderCollectionLock:v3];
  BOOL v1 = *((unsigned char *)v5 + 24) != 0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000209B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000209D0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

id sub_1000209EC(id result, char a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100020A64;
    v2[3] = &unk_1001660F8;
    v2[4] = result;
    char v3 = a2;
    return [result performUnderCollectionLock:v2];
  }
  return result;
}

uint64_t sub_100020A64(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 8) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_100020A7C(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100020B44;
  v3[3] = &unk_100165840;
  void v3[4] = a1;
  v3[5] = &v4;
  [a1 performUnderCollectionLock:v3];
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100020B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100020B44(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 16);
  return result;
}

void *sub_100020B60(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int v2 = [result history];
    unint64_t v3 = (unint64_t)[v2 nextIndex];

    uint64_t v4 = [v1 history];
    unsigned int v5 = [v4 deviceCollection];
    uint64_t v6 = [v5 count] == 0;

    uint64_t v7 = [v1 secureProperties];
    uint64_t v8 = v7 != 0;

    return (void *)(v3 | (v6 << 63) | (v8 << 62));
  }
  return result;
}

id sub_100020C00(id result, uint64_t a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100020C74;
    v2[3] = &unk_100166120;
    v2[4] = result;
    void v2[5] = a2;
    return [result performUnderCollectionLock:v2];
  }
  return result;
}

uint64_t sub_100020C74(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 16) = *(void *)(result + 40);
  return result;
}

void sub_100020EC8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) invalidate];
  unsigned int v2 = [[objc_msgSend((id)objc_opt_class(), "proxyClass") machServiceName];
  unint64_t v3 = nr_framework_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    unsigned int v5 = nr_framework_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      BOOL v9 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopped listening to %@", buf, 0xCu);
    }
  }
  uint64_t v6 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100021018;
  v7[3] = &unk_1001655F8;
  void v7[4] = v6;
  [v6 enqueueAsync:v7];
}

uint64_t sub_100021018(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(*(void *)(a1 + 32) + 12);
  if (result != -1)
  {
    uint64_t result = notify_cancel(result);
    *(_DWORD *)(*(void *)(a1 + 32) + 12) = -1;
  }
  return result;
}

void sub_1000210F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = a3;
  id v10 = [a2 deviceCollection];
  id v7 = [v10 copyWithZone:0];
  id v8 = [v6 copyWithZone:0];

  uint64_t v9 = sub_100020A7C(*(void **)(a1 + 32));
  (*(void (**)(uint64_t, id, id, uint64_t, void))(v5 + 16))(v5, v7, v8, v9, 0);
}

void sub_1000213F0(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  uint64_t v6 = sub_100020A7C(*(void **)(a1 + 32));
  unint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = v7 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v9 = (v7 >> 62) & 1;
  if ((v6 & 0x4000000000000000) != 0) {
    char v10 = v9;
  }
  else {
    char v10 = 1;
  }
  id v11 = [v18 nextIndex];
  if ((unint64_t)v11 <= v8)
  {
    if (v11 == (id)v8)
    {
      char v14 = *(unsigned char *)(a1 + 56) ? v10 : 1;
      if ((v14 & 1) == 0)
      {
        unint64_t v15 = [*(id *)(a1 + 32) _dumpSecureProperties:v5 propertyIDList:0];
        unsigned int v13 = 0;
        goto LABEL_24;
      }
    }
    unsigned int v13 = 0;
  }
  else
  {
    if (v11 == (id)(v8 + 1))
    {
      id v12 = [v18 objectAtIndexedSubscript:v8];
      unsigned int v13 = [v12 diff];
    }
    else
    {
      if (v8)
      {
        id v12 = [v18 objectAtIndexedSubscript:v8 - 1];
      }
      else
      {
        id v12 = 0;
      }
      char v16 = [v12 state];
      unint64_t v17 = [v18 deviceCollection];
      unsigned int v13 = +[NRMutableDeviceCollection diffFrom:v16 to:v17];
    }
    if (*(unsigned char *)(a1 + 56))
    {
      if (v10) {
        [(id)objc_opt_class() getReferencedSecureProperties:v5 fromDiff:v13];
      }
      else {
      unint64_t v15 = [*(id *)(a1 + 32) _dumpSecureProperties:v5 propertyIDList:0];
      }
      goto LABEL_24;
    }
  }
  unint64_t v15 = 0;
LABEL_24:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000216B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (a3)
  {
    id v6 = [*(id *)(a1 + 32) _dumpSecureProperties:a3 propertyIDList:*(void *)(a1 + 40)];
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v6);
  }
  else
  {
    BOOL v4 = *(void (**)(uint64_t, void))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 48);
    v4(v5, 0);
  }
}

void sub_1000217E4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 copyWithZone:0];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000218D8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 24) managementQueue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100021988;
  v4[3] = &unk_100166210;
  id v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_sync(v2, v4);
}

void sub_100021988(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100021A54;
  v5[3] = &unk_1001661E8;
  id v6 = v2;
  id v4 = v2;
  [v3 enumerateClientProxies:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100021A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = (id)objc_opt_new();
  id v4 = [v3 appPath];

  [v5 setProcessName:v4];
  [*(id *)(a1 + 32) addObject:v5];
}

uint64_t sub_100021BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([*(id *)(a1 + 32) count])
  {
    if (!v6)
    {
      id v8 = [v5 applyDiff:*(void *)(a1 + 40)];
      uint64_t v9 = *(void *)(a1 + 48);
      NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
      CFStringRef v14 = @"secure data unavailable";
      char v10 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
      id v11 = +[NSError errorWithDomain:@"com.apple.nanoregistry.registry" code:1 userInfo:v10];
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v11);

      goto LABEL_6;
    }
    [v6 forceImportSecureProperties:*(void *)(a1 + 32)];
  }
  id v7 = [v5 applyDiff:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_6:

  return 0;
}

void sub_100021DC0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v6 = 0;
  id v4 = [a2 deviceIDAtSwitchIndex:v3 date:&v6];
  id v5 = v6;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_100021EFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v8 = [v7 objectForKeyedSubscript:NRDevicePropertyIsArchived];
  uint64_t v9 = [v8 value];

  LODWORD(v8) = [v9 BOOLValue];
  if (v8)
  {
    char v10 = nr_daemon_log();
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      id v12 = nr_daemon_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(a1 + 48);
        CFStringRef v14 = [*(id *)(a1 + 32) UUIDString];
        *(_DWORD *)long long buf = 67109378;
        int v73 = v13;
        __int16 v74 = 2114;
        v75 = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "xpcSetMigrationConsented: Setting migration consent to %{BOOL}d for device ID %{public}@", buf, 0x12u);
      }
    }
    if (*(void *)(a1 + 32))
    {
      uint64_t v71 = *(void *)(a1 + 32);
      unint64_t v15 = +[NSArray arrayWithObjects:&v71 count:1];
    }
    else
    {
      unint64_t v15 = +[NSMutableArray array];
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      id v17 = v5;
      id v18 = [v17 countByEnumeratingWithState:&v63 objects:v70 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v64;
        do
        {
          for (i = 0; i != v19; i = (char *)i + 1)
          {
            if (*(void *)v64 != v20) {
              objc_enumerationMutation(v17);
            }
            [v15 addObject:*(void *)(*((void *)&v63 + 1) + 8 * i)];
          }
          id v19 = [v17 countByEnumeratingWithState:&v63 objects:v70 count:16];
        }
        while (v19);
      }
    }
    id v50 = v6;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    id obj = v15;
    id v58 = [obj countByEnumeratingWithState:&v59 objects:v69 count:16];
    if (v58)
    {
      v56 = 0;
      uint64_t v22 = *(void *)v60;
      uint64_t v57 = NRDevicePropertyMigrationConsent;
      uint64_t v51 = NRDevicePropertyMigrationConsentDate;
      uint64_t v52 = *(void *)v60;
      id v53 = v5;
      uint64_t v54 = a1;
      do
      {
        for (j = 0; j != v58; j = (char *)j + 1)
        {
          if (*(void *)v60 != v22) {
            objc_enumerationMutation(obj);
          }
          char v24 = *(void **)(*((void *)&v59 + 1) + 8 * (void)j);
          char v25 = nr_daemon_log();
          BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

          if (v26)
          {
            long long v27 = nr_daemon_log();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              int v28 = *(unsigned __int8 *)(a1 + 48);
              id v29 = [v24 UUIDString];
              *(_DWORD *)long long buf = 67109378;
              int v73 = v28;
              __int16 v74 = 2114;
              v75 = v29;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "setMigrationConsent: Setting migration consent to %{BOOL}d for device ID %{public}@", buf, 0x12u);
            }
          }
          id v30 = [v5 objectForKeyedSubscript:v24];
          id v31 = v30;
          if (v30)
          {
            id v32 = [v30 objectForKeyedSubscript:v57];
            int v33 = [v32 value];
            unsigned int v34 = [v33 BOOLValue];

            if (*(unsigned char *)(a1 + 48) || v34)
            {
              if (*(unsigned char *)(a1 + 48)) {
                id v35 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
              }
              else {
                id v35 = 0;
              }
              id v36 = objc_alloc((Class)NRDevicePropertyDiffType);
              if (v35) {
                uint64_t v37 = 1;
              }
              else {
                uint64_t v37 = 2;
              }
              id v38 = [v36 initWithDiff:v35 andChangeType:v37];
              id v39 = objc_alloc((Class)NRDevicePropertyDiff);
              id v40 = +[NSDate date];
              id v41 = [v39 initWithValue:v40];

              id v42 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v41 andChangeType:1];
              id v43 = objc_alloc((Class)NRDeviceDiff);
              v67[0] = v57;
              v67[1] = v51;
              v68[0] = v38;
              v68[1] = v42;
              v44 = +[NSDictionary dictionaryWithObjects:v68 forKeys:v67 count:2];
              id v45 = [v43 initWithDiffPropertyDiffs:v44];

              BOOL v46 = v56;
              if (!v56)
              {
                BOOL v46 = +[NSMutableDictionary dictionary];
              }
              id v47 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v45 andChangeType:1];
              v56 = v46;
              [v46 setObject:v47 forKeyedSubscript:v24];

              id v5 = v53;
              a1 = v54;
              uint64_t v22 = v52;
            }
          }
        }
        id v58 = [obj countByEnumeratingWithState:&v59 objects:v69 count:16];
      }
      while (v58);
    }
    else
    {
      v56 = 0;
    }

    id v6 = v50;
    char v16 = v56;
  }
  else
  {
    char v16 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if ([v16 count]) {
    id v48 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v16];
  }
  else {
    id v48 = 0;
  }

  return v48;
}

uint64_t sub_100022558(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 switchIndex];
  id v4 = *(uint64_t (**)(uint64_t, id))(v2 + 16);

  return v4(v2, v3);
}

uint64_t sub_100022AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDeviceID];
  id v5 = [*(id *)(a1 + 32) _makeActiveDeviceCollection:v3 diffWithPairingID:v3 activate:v3];
  id v6 = [v3 applyDiff:v5];
  id v7 = [*(id *)(a1 + 48) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100022BC8;
  block[3] = &unk_100165868;
  id v11 = *(id *)(a1 + 48);
  id v12 = v4;
  uint64_t v13 = *(void *)(a1 + 32);
  id v8 = v4;
  dispatch_async(v7, block);

  return 0;
}

void sub_100022BC8(uint64_t a1)
{
  uint64_t v2 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) operands];
  [v3 setObject:v2 forKeyedSubscript:@"nrDeviceIdentifier"];

  [*(id *)(a1 + 32) persist];
  id v4 = [*(id *)(a1 + 48) delegate];
  [v4 transactionDidComplete:*(void *)(a1 + 48)];
}

BOOL sub_100022E14(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
      return v3 == 0;
    }
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error))
    {
      int v3 = 1;
      return v3 == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        LOBYTE(v6) = 0;
        int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v3 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LOBYTE(v6) = 0;
    }
LABEL_13:
    if (v3) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = (v6 & 7) == 4;
    }
    if (v10) {
      return v3 == 0;
    }
    if ((PBReaderSkipValueWithTag() & 1) == 0) {
      return 0;
    }
  }
}

uint64_t sub_100023108(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_30:
      *(unsigned char *)(a1 + 8) = v14 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10002351C(id a1)
{
  qword_1001A10B8 = objc_alloc_init(NRPairingDaemon);

  _objc_release_x1();
}

void sub_100023848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  objc_destroyWeak((id *)(v18 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_100023880(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100023890(uint64_t a1)
{
}

void sub_100023898(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v8 = *(void *)(a1 + 32);
  BOOL v9 = *(void **)(v8 + 472);
  *(void *)(v8 + 472) = v7;

  [*(id *)(a1 + 32) updateMirrorWithCollection:v5];
  [*(id *)(a1 + 32) pairingCompatibilityVersionInitWithCollection:v5];
  int v10 = +[NRQueue registryDaemonQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000239D8;
  v11[3] = &unk_100166328;
  id v12 = *(id *)(a1 + 32);
  objc_copyWeak(&v14, (id *)(a1 + 48));
  uint64_t v13 = *(void *)(a1 + 40);
  [v10 dispatchAsync:v11];

  objc_destroyWeak(&v14);
}

void sub_1000239C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000239D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100023AA0;
  v5[3] = &unk_100166378;
  objc_copyWeak(&v8, (id *)(a1 + 48));
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 preFirstUnlockInitCompletion:v5];

  objc_destroyWeak(&v8);
}

void sub_100023A8C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100023AA0(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100023B9C;
  v9[3] = &unk_100166350;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v5 = WeakRetained;
  id v10 = v5;
  objc_copyWeak(&v12, v2);
  id v6 = [v4 addSecurePropertiesObserverWithReadBlock:v9];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;

  objc_destroyWeak(&v12);
}

void sub_100023B88(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100023B9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = +[NROSTransaction transactionWithName:@"preFirstUnlockInit"];
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 32) removeSecurePropertiesObserver:v9];
  uint64_t v13 = sub_10005F168();
  +[NRRegistry fixSecurePropertiesWithCollection:v7 secureProperties:v8 insecurePropertyNames:v13];

  id v14 = +[NRQueue registryDaemonQueue];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100023D14;
  v15[3] = &unk_100166328;
  id v16 = *(id *)(a1 + 32);
  objc_copyWeak(&v18, (id *)(a1 + 48));
  uint64_t v17 = *(void *)(a1 + 40);
  [v14 dispatchAsync:v15];

  objc_destroyWeak(&v18);
}

void sub_100023D00(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100023D14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100023DCC;
  v3[3] = &unk_100166300;
  objc_copyWeak(&v4, (id *)(a1 + 48));
  void v3[4] = *(void *)(a1 + 40);
  [v2 postFirstUnlockInitBlock:v3];
  objc_destroyWeak(&v4);
}

void sub_100023DB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100023DCC(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    uint64_t v2 = [WeakRetained[18] serviceFromClass:objc_opt_class()];
    [v2 resume];
    id v3 = +[NRQueue xpcPairingQueue];
    [v3 resume];

    id v4 = [WeakRetained[18] serviceFromClass:objc_opt_class()];
    [v4 addObserver:WeakRetained];
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = 0;
}

void sub_100024148(id a1)
{
  if (notify_register_check((const char *)[NRPairedDeviceRegistryWatchDidBecomeActiveDarwinNotification UTF8String], &dword_10019FD98))
  {
    uint64_t v1 = nr_daemon_log();
    BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);

    if (v2)
    {
      id v3 = nr_daemon_log();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        sub_1000F7258();
      }
    }
  }
}

uint64_t sub_10002427C(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 72) = *(void *)(result + 40);
  return result;
}

void sub_10002436C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100024384(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 72);
  return result;
}

void sub_10002444C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100024468(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v47 = a4;
  id v48 = a5;
  uint64_t v11 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained updateMirrorWithCollection:v10];
  v93[0] = 0;
  v93[1] = v93;
  v93[2] = 0x3032000000;
  v93[3] = sub_100023880;
  v93[4] = sub_100023890;
  id v94 = +[NROSTransaction transactionWithName:@"diffProcessing"];
  if (WeakRetained)
  {
    uint64_t v13 = nr_daemon_log();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

    if (v14)
    {
      unint64_t v15 = nr_daemon_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v9;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "State change: %{public}@", (uint8_t *)&buf, 0xCu);
      }
    }
    uint64_t v16 = NRDevicePropertyChipID;
    v90[0] = _NSConcreteStackBlock;
    v90[1] = 3221225472;
    v90[2] = sub_100024ED8;
    v90[3] = &unk_1001663E8;
    id v17 = v10;
    id v91 = v17;
    id v18 = WeakRetained;
    id v92 = v18;
    uint64_t v46 = v16;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v16 withBlock:v90];
    uint64_t v19 = _NRDevicePropertyBluetoothIdentifier;
    v88[0] = _NSConcreteStackBlock;
    v88[1] = 3221225472;
    v88[2] = sub_100024FB4;
    v88[3] = &unk_100165CC0;
    id v20 = v18;
    id v89 = v20;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v19 withBlock:v88];
    uint64_t v21 = NRDevicePropertyModelNumber;
    v85[0] = _NSConcreteStackBlock;
    v85[1] = 3221225472;
    v85[2] = sub_1000250F4;
    v85[3] = &unk_1001663E8;
    id v22 = v20;
    id v86 = v22;
    id v23 = v17;
    id v87 = v23;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v21 withBlock:v85];
    v83[0] = 0;
    v83[1] = v83;
    v83[2] = 0x2020000000;
    char v84 = 0;
    uint64_t v79 = 0;
    v80 = &v79;
    uint64_t v81 = 0x2020000000;
    char v82 = 0;
    uint64_t v24 = NRDevicePropertyIsPaired;
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472;
    v74[2] = sub_100025104;
    v74[3] = &unk_100166410;
    v77 = &v79;
    v78 = v83;
    id v25 = v23;
    id v75 = v25;
    id v26 = v22;
    id v76 = v26;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v24 withBlock:v74];
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v96 = 0x3032000000;
    v97 = sub_100023880;
    uint64_t v98 = sub_100023890;
    id v99 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = &v70;
    uint64_t v72 = 0x2020000000;
    char v73 = 0;
    uint64_t v27 = NRDevicePropertyIsActive;
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472;
    v65[2] = sub_100025304;
    v65[3] = &unk_100166410;
    v68 = &v70;
    p_long long buf = &buf;
    id v28 = v26;
    id v66 = v28;
    id v29 = v25;
    id v67 = v29;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v27 withBlock:v65];
    if (*((unsigned char *)v71 + 24))
    {
      uint64_t v30 = *(void *)(*((void *)&buf + 1) + 40);
      if (v30)
      {
        id v31 = [v29 objectForKeyedSubscript:];
        id v32 = [v31 objectForKeyedSubscript:v46];
        int v33 = [v32 value];

        [v28 broadcastActiveDeviceChipID:v33 from:@"New device became active"];
        if (*(void *)(*((void *)&buf + 1) + 40)) {
          uint64_t v30 = [v31 isArchived] ^ 1;
        }
        else {
          uint64_t v30 = 0;
        }
      }
      else
      {
        id v31 = 0;
      }
      +[NRPairingDaemon updateActiveFlag:v30 andPost:0];
      uint64_t v34 = *(void *)(*((void *)&buf + 1) + 40);
      if (v34)
      {
        [v28 _updateCompatibilityStateForDeviceID:v34 withDeviceCollection:v29];
        [v28 _setBridgeBadgeWithCollection:v29];
      }
    }
    uint64_t v61 = 0;
    long long v62 = &v61;
    uint64_t v63 = 0x2020000000;
    char v64 = 0;
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472;
    v60[2] = sub_1000253AC;
    v60[3] = &unk_100166438;
    v60[4] = &v61;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:NRDevicePropertyIsArchived withBlock:v60];
    if (*((unsigned char *)v80 + 24) || *((unsigned char *)v71 + 24) || *((unsigned char *)v62 + 24))
    {
      [v28 _updateActiveFlag:v29 andPost:0];
      +[NRPairingDaemon updatePingMyWatchControlCenterModuleVisibility:v29];
    }
    uint64_t v35 = NRDevicePropertyMaxPairingCompatibilityVersion;
    v57[0] = _NSConcreteStackBlock;
    v57[1] = 3221225472;
    v57[2] = sub_1000253C0;
    v57[3] = &unk_1001663E8;
    id v36 = v28;
    id v58 = v36;
    id v37 = v29;
    id v59 = v37;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v35 withBlock:v57];
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472;
    v55[2] = sub_1000253D0;
    v55[3] = &unk_100166460;
    objc_copyWeak(&v56, v11);
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:NRDevicePropertySystemBuildVersion withBlock:v55];
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:_NRDevicePropertyCapabilities withBlock:&stru_1001664A0];
    uint64_t v38 = _NRDevicePropertyCompatibilityState;
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472;
    v52[2] = sub_100025560;
    v52[3] = &unk_1001663E8;
    id v39 = v37;
    id v53 = v39;
    id v40 = v36;
    id v54 = v40;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v38 withBlock:v52];
    uint64_t v41 = _NRDevicePropertyRemoteUnpairingStarted;
    v50[0] = _NSConcreteStackBlock;
    v50[1] = 3221225472;
    v50[2] = sub_100025710;
    v50[3] = &unk_100165CC0;
    id v42 = v39;
    id v51 = v42;
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:v41 withBlock:v50];
    LODWORD(v36) = [v40 _hasUpdateModeDevicesInCollection:v42];
    id v43 = +[NRRepeatingAlertEngine sharedInstance];
    v44 = v43;
    if (v36)
    {
      [v43 setEnabled:[v40 _isBridgeForeground] ^ 1 withName:@"PairedWatchIsIncompatible"];
      [v44 presentAlertIfEnabledWithName:@"PairedWatchIsIncompatible"];
    }
    else
    {
      [v43 resetStateForAlertWithName:@"PairedWatchIsIncompatible"];
    }
    +[NRMutableDeviceCollection parseDiff:v9 forPropertyChange:NRDevicePropertyMDMManagementState withBlock:&stru_1001664C0];
    id v45 = +[NRQueue registryDaemonQueue];
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3221225472;
    v49[2] = sub_1000257F4;
    v49[3] = &unk_1001657F0;
    v49[4] = v93;
    [v45 dispatchAsync:v49];

    objc_destroyWeak(&v56);
    _Block_object_dispose(&v61, 8);

    _Block_object_dispose(&v70, 8);
    _Block_object_dispose(&buf, 8);

    _Block_object_dispose(&v79, 8);
    _Block_object_dispose(v83, 8);
  }
  _Block_object_dispose(v93, 8);
}

void sub_100024E2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_100024ED8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v11 = a2;
  id v6 = a4;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v11];
  id v8 = [v7 objectForKeyedSubscript:NRDevicePropertyIsActive];
  id v9 = [v8 value];
  unsigned int v10 = [v9 isEqual:&__kCFBooleanTrue];

  if (v10) {
    [*(id *)(a1 + 40) broadcastActiveDeviceChipID:v6 from:@"chipID property change in active device"];
  }
  [*(id *)(a1 + 40) _updateCompatibilityStateForDeviceID:v11 withDeviceCollection:*(void *)(a1 + 32)];
}

void sub_100024FB4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    id v8 = +[NRQueue registryDaemonQueue];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000250A8;
    v9[3] = &unk_100165868;
    id v10 = *(id *)(a1 + 32);
    id v11 = v7;
    id v12 = v6;
    [v8 dispatchAsync:v9];
  }
}

id sub_1000250A8(void *a1)
{
  [*(id *)(a1[4] + 208) setObject:a1[6] forKeyedSubscript:a1[5]];
  uint64_t v2 = (void *)a1[4];

  return [v2 refreshPropertyCache];
}

id sub_1000250F4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateCompatibilityStateForDeviceID:a2 withDeviceCollection:*(void *)(a1 + 40)];
}

uint64_t sub_100025104(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = v6;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  if (a4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v6 != 0;
    id v19 = v6;
    if ([a4 BOOLValue])
    {
      id v8 = [*(id *)(*(void *)(a1 + 40) + 144) serviceFromClass:objc_opt_class()];
      [v8 clearRecoveryFlagWithQueue:0 completion:0];
      notify_post((const char *)[NRPairedDeviceRegistryDeviceDidPairDarwinNotification cStringUsingEncoding:4]);
      [*(id *)(a1 + 40) _updateCompatibilityStateForDeviceID:v19 withDeviceCollection:*(void *)(a1 + 32)];
      id v9 = [*(id *)(a1 + 32) objectForKeyedSubscript:v19];
      id v10 = +[NetworkRelayAgent sharedInstance];
      id v11 = v10;
      if (v9)
      {
        id v12 = [v9 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
        uint64_t v13 = [v12 value];

        if (v13) {
          [v11 startMonitoringDeviceWithBluetoothUUID:v13];
        }
      }
      else
      {
        [v10 stopMonitoring];
      }
      uint64_t v16 = *(void **)(a1 + 40);
      id v17 = [*(id *)(a1 + 32) objectForKeyedSubscript:v19];
      [v16 _updateIsSetupPropertyForNewlyPairedDevice:v17];
    }
    else
    {
      BOOL v14 = [*(id *)(a1 + 32) objectForKeyedSubscript:v19];
      unint64_t v15 = [v14 objectForKeyedSubscript:_NRDevicePropertyLastPairingError];
      id v8 = [v15 value];

      if (!v8) {
        notify_post((const char *)[NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification cStringUsingEncoding:4]);
      }
    }

    id v6 = [*(id *)(a1 + 40) _updateNetworkRelayIdentifierForDevicesInCollection:*(void *)(a1 + 32)];
    id v7 = v19;
  }

  return _objc_release_x1(v6, v7);
}

void sub_100025304(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  if ([a4 BOOLValue])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a2);
    [*(id *)(a1 + 32) setStatusCode:InCollection:[*(id *)(a1 + 32) lastStatusCodeCache] InCollection:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) updatePairingSessionIdIfNeededForActiveDevice];
  }
}

uint64_t sub_1000253AC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

id sub_1000253C0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateCompatibilityStateForDeviceID:a2 withDeviceCollection:*(void *)(a1 + 40)];
}

void sub_1000253D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  notify_post((const char *)[NRPairedDeviceRegistryPairedDeviceDidChangeVersionDarwinNotification UTF8String]);
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v4);
  [WeakRetained updatePairingSessionIdIfNeededForActiveDevice];

  id v6 = objc_loadWeakRetained(v4);
  id v7 = [v6 collection];
  id v8 = [v7 objectForKeyedSubscript:v3];

  id v9 = nr_daemon_log();
  LODWORD(v7) = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    id v10 = nr_daemon_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "NRDevicePropertySystemBuildVersion changed to for device %@ - checking if we should mark as isSetup", (uint8_t *)&v12, 0xCu);
    }
  }
  id v11 = objc_loadWeakRetained(v4);
  [v11 _markDeviceIsSetupWhereApplicable:v8 bypassIsSetupNoCheck:0];
}

void sub_10002552C(id a1, NSUUID *a2, unint64_t a3, NSObject *a4)
{
  id v4 = (const char *)[NRPairedDeviceRegistryPairedDeviceDidChangeCapabilitiesDarwinNotification UTF8String];

  notify_post(v4);
}

void sub_100025560(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if ([v7 integerValue] == (id)3)
  {
    id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
    id v9 = [v8 objectForKeyedSubscript:NRDevicePropertyIsPaired];
    id v10 = [v9 value];

    if (!v10 || ([v10 BOOLValue] & 1) == 0) {
      notify_post((const char *)[NRPairedDeviceRegistryDeviceIsPairingLinkIsUpDarwinNotification cStringUsingEncoding:4]);
    }
  }
  uint64_t v11 = [*(id *)(a1 + 32) activeDeviceID];
  if (v11)
  {
    int v12 = (void *)v11;
    id v13 = [*(id *)(a1 + 32) activeDeviceID];
    unsigned int v14 = [v13 isEqual:v6];

    if (v14)
    {
      unint64_t v15 = +[NRQueue registryDaemonQueue];
      uint64_t v16 = _NSConcreteStackBlock;
      uint64_t v17 = 3221225472;
      id v18 = sub_100025704;
      id v19 = &unk_100165530;
      id v20 = *(id *)(a1 + 40);
      id v21 = v7;
      [v15 dispatchAsync:&v16];
    }
  }
  [*(id *)(a1 + 40) _setBridgeBadgeWithCollection:*(void *)(a1 + 32), v16, v17, v18, v19];
}

id sub_100025704(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIDSTrafficClassifiersForActiveDeviceWithNewCompatibilityState:*(void *)(a1 + 40)];
}

void sub_100025710(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v10 = a2;
  id v6 = a4;
  id v7 = v6;
  if (v6)
  {
    if ([v6 BOOLValue])
    {
      id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v10];
      unsigned int v9 = [v8 isPaired];

      if (v9) {
        notify_post((const char *)[NRPairedDeviceRegistryRemoteUnpairingBeginningDarwinNotification cStringUsingEncoding:4]);
      }
    }
  }
}

void sub_1000257C0(id a1, NSUUID *a2, unint64_t a3, NSObject *a4)
{
  id v4 = (const char *)[NRPairedDeviceRegistryPairedDeviceDidChangeMDMManagementStateDarwinNotification UTF8String];

  notify_post(v4);
}

void sub_1000257F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_100026B14(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3)
  {
    unsigned __int8 v5 = [v3 isAltAccount];
    id v6 = +[NRQueue registryDaemonQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100026C98;
    v14[3] = &unk_1001664E8;
    id v7 = &v15;
    id v15 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = *(void **)(a1 + 56);
    id v16 = v8;
    uint64_t v17 = v9;
    unsigned __int8 v19 = v5;
    id v18 = v10;
    [v6 dispatchAsync:v14];

    uint64_t v11 = v16;
  }
  else
  {
    uint64_t v11 = +[NRQueue registryDaemonQueue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100026E20;
    v12[3] = &unk_100165D10;
    id v7 = &v13;
    id v13 = *(id *)(a1 + 56);
    [v11 dispatchAsync:v12];
  }
}

void sub_100026C98(uint64_t a1)
{
  id v10 = (id)objc_opt_new();
  [v10 setClientProxy:*(void *)(a1 + 32)];
  [v10 setPairingID:*(void *)(a1 + 40)];
  uint64_t v2 = objc_opt_new();
  [v2 setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
  id v3 = +[NSDate date];
  id v4 = [v2 stringFromDate:v3];

  unsigned __int8 v5 = objc_opt_new();
  id v6 = [v5 UUIDString];
  id v7 = +[NSString stringWithFormat:@"%@.%@", v4, v6];
  [v10 setAssertionID:v7];

  id v8 = [*(id *)(*(void *)(a1 + 48) + 144) serviceFromClass:objc_opt_class()];
  uint64_t v9 = [v8 assertionWithPairingID:*(void *)(a1 + 40) isAltAccount:*(unsigned __int8 *)(a1 + 64) delegate:*(void *)(a1 + 48)];
  [v10 setAssertion:v9];
  [v10 setClientBlock:*(void *)(a1 + 56)];
  [*(id *)(a1 + 48) saveAssertionInfo:v10];
}

void sub_100026E20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    nrGetPairingError();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, id, void))(v1 + 16))(v1, v2, 0);
  }
}

void sub_1000270A8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  id v6 = 0;
  id v4 = [a2 deviceIDAtSwitchIndex:v3 date:&v6];
  id v5 = v6;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000272CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  id v5 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:0 andChangeType:2];
  [v4 setObject:v5 forKeyedSubscript:*(void *)(a1 + 32)];

  id v6 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v4];
  id v7 = [v3 applyDiff:v6];

  return 0;
}

void sub_100027CC4(_Unwind_Exception *a1)
{
}

void sub_10002879C(id a1, EPRoutingSlip *a2)
{
  id v2 = [(EPRoutingSlip *)a2 getLastFirstError];

  if (!v2)
  {
    id v3 = +[NRRepeatingAlertEngine sharedInstance];
    [v3 resetStateForAlertWithName:@"PairedWatchIsIncompatible"];
  }
}

uint64_t sub_1000290B8(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) UUIDString];
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingDeletePairedDevice %@", (uint8_t *)&v7, 0xCu);
    }
  }
  return IDSLocalPairingDeletePairedDevice();
}

void sub_100029608(id a1)
{
  uint64_t v1 = +[NRRepeatingAlertEngine sharedInstance];
  [v1 resetStateForAlertWithName:@"SamePhone"];

  id v2 = +[NRRepeatingAlertEngine sharedInstance];
  [v2 setEnabled:1 withName:@"SamePhone"];

  id v3 = +[NRRepeatingAlertEngine sharedInstance];
  [v3 presentAlertIfEnabledWithName:@"SamePhone"];
}

void sub_100029740(uint64_t a1)
{
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = sub_100023880;
  void v23[4] = sub_100023890;
  id v2 = (id *)(a1 + 32);
  id v24 = [*(id *)(a1 + 32) _migrationReporter];
  unsigned int v3 = [*v2 managedConfigurationWatchDisabled];
  unsigned int v4 = [*(id *)(a1 + 32) didRestoreFromBackup];
  id v5 = objc_opt_new();
  id v6 = +[NSDate date];
  int v7 = nr_daemon_log();
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

  if (v8)
  {
    uint64_t v9 = nr_daemon_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = [v5 UDIDChanged];
      *(_DWORD *)long long buf = 67109632;
      unsigned int v26 = v3;
      __int16 v27 = 1024;
      unsigned int v28 = v4;
      __int16 v29 = 1024;
      unsigned int v30 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion -- MC allowed: %{BOOL}d; restored from backup: %{BOOL}d; UDID changed: %{BOOL}d",
        buf,
        0x14u);
    }
  }
  uint64_t v11 = *(void **)(a1 + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000299BC;
  v15[3] = &unk_1001666E0;
  id v12 = v6;
  uint64_t v13 = *(void *)(a1 + 32);
  id v16 = v12;
  uint64_t v17 = v13;
  id v20 = v23;
  char v21 = v3;
  char v22 = v4;
  id v14 = v5;
  id v18 = v14;
  id v19 = *(id *)(a1 + 40);
  [v11 grabHistoryWithReadBlock:v15];

  _Block_object_dispose(v23, 8);
}

void sub_100029988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000299BC(uint64_t a1, void *a2)
{
  id v114 = a2;
  unsigned int v3 = [v114 deviceCollection];
  unsigned int v4 = [v3 allPairingIDs];
  id v5 = +[NSSet setWithArray:v4];
  id v6 = [v5 mutableCopy];

  if ([v6 count])
  {
    id v109 = objc_alloc_init((Class)NSMutableDictionary);
    v101 = +[NSMutableSet set];
    v107 = +[NSMutableSet set];
    long long v125 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    id v100 = v6;
    id obj = v6;
    id v113 = [obj countByEnumeratingWithState:&v125 objects:v131 count:16];
    if (!v113) {
      goto LABEL_110;
    }
    uint64_t v111 = NRDevicePropertyLastInactiveDate;
    uint64_t v112 = *(void *)v126;
    uint64_t v110 = NRDevicePropertyLocalPairingDataStorePath;
    uint64_t v105 = NRDevicePropertyMDMManagementState;
    uint64_t v103 = _NRDevicePropertyKeychainTurnedOff;
    uint64_t v102 = _NRDevicePropertyMigrationKeyRevision;
    while (1)
    {
      int v7 = 0;
      do
      {
        if (*(void *)v126 != v112) {
          objc_enumerationMutation(obj);
        }
        BOOL v8 = *(void **)(*((void *)&v125 + 1) + 8 * (void)v7);
        uint64_t v9 = nr_daemon_log();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = nr_daemon_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)CFStringRef v130 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Checking %{public}@", buf, 0xCu);
          }
        }
        id v12 = [v114 deviceCollection];
        uint64_t v13 = [v12 objectForKeyedSubscript:v8];

        id v14 = [v13 objectForKeyedSubscript:v111];
        id v15 = [v14 value];

        id v16 = [v13 objectForKeyedSubscript:v110];
        uint64_t v17 = [v16 value];

        if (!v17)
        {
          id v18 = nr_daemon_log();
          BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

          if (v19)
          {
            id v20 = nr_daemon_log();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)CFStringRef v130 = v8;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: device %{public}@ does not have a data store. Inferring corruption and unpairing the device", buf, 0xCu);
            }
          }
          [v107 addObject:v8];
        }
        if ([v13 isArchived])
        {
          BOOL v21 = 0;
          if (([v13 isAltAccount] & 1) == 0 && v15)
          {
            [*(id *)(a1 + 32) timeIntervalSinceDate:v15];
            BOOL v21 = fabs(v22) > 691200.0;
          }
        }
        else
        {
          BOOL v21 = 0;
        }
        unsigned int v23 = [*(id *)(a1 + 40) _deviceIsInSetupBasedOnIsSetupValue:v13];
        id v24 = nr_daemon_log();
        BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);

        if (v25)
        {
          unsigned int v26 = nr_daemon_log();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v27 = [v8 UUIDString];
            *(_DWORD *)long long buf = 138543618;
            *(void *)CFStringRef v130 = v27;
            *(_WORD *)&v130[8] = 1024;
            *(_DWORD *)&v130[10] = v23;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "device %{public}@, is in setup %{BOOL}d", buf, 0x12u);
          }
        }
        if (v21)
        {
          unsigned int v28 = nr_daemon_log();
          BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);

          if (v29)
          {
            unsigned int v30 = nr_daemon_log();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              id v31 = [v8 UUIDString];
              *(_DWORD *)long long buf = 138543362;
              *(void *)CFStringRef v130 = v31;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "unpairStaleArchivedDevicesWithCompletion: Archived device %{public}@ is stale, removing", buf, 0xCu);
            }
          }
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) fileEarlyMigrationFailure:3 withDeviceHistory:v114 forPairingID:v8];
          id v32 = +[NSNull null];
          goto LABEL_32;
        }
        if (*(unsigned char *)(a1 + 72))
        {
          int v33 = +[NSNull null];
          [v109 setObject:v33 forKeyedSubscript:v8];

          id v32 = +[NRQueue registryDaemonQueue];
          [(NRPairingReport *)v32 dispatchAsync:&stru_1001665D0];
          goto LABEL_35;
        }
        if (v23)
        {
          uint64_t v34 = nr_daemon_log();
          BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);

          if (v35)
          {
            id v36 = nr_daemon_log();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              id v37 = [v8 UUIDString];
              *(_DWORD *)long long buf = 138412290;
              *(void *)CFStringRef v130 = v37;
              _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "unpairStaleArchivedDevicesWithCompletion: device %@ appears to have been in setup while NR restarted, flagging to unpair", buf, 0xCu);
            }
          }
          id v32 = objc_alloc_init(NRPairingReport);
          uint64_t v38 = nrGetPairingError();
          [(NRPairingReport *)v32 setOriginalError:v38];

LABEL_32:
          [v109 setObject:v32 forKeyedSubscript:v8];
LABEL_35:

          goto LABEL_36;
        }
        if (*(unsigned char *)(a1 + 73) || [*(id *)(a1 + 48) UDIDChanged])
        {
          id v39 = [v13 objectForKeyedSubscript:v105];
          id v32 = [v39 value];

          if (v32) {
            BOOL v106 = [(NRPairingReport *)v32 integerValue] != 0;
          }
          else {
            BOOL v106 = 0;
          }
          id v40 = nr_daemon_log();
          BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);

          if (v41)
          {
            id v42 = nr_daemon_log();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 67109378;
              *(_DWORD *)CFStringRef v130 = v106;
              *(_WORD *)&v130[4] = 2112;
              *(void *)&v130[6] = v32;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "mdmManaged %{BOOL}d (%@)", buf, 0x12u);
            }
          }
          unsigned int v43 = [*(id *)(a1 + 48) UDIDChanged];
          v44 = nr_daemon_log();
          BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);

          if (v43)
          {
            if (v45)
            {
              uint64_t v46 = nr_daemon_log();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Phone changed.", buf, 2u);
              }
            }
            if ([v13 isArchived])
            {
              id v47 = nr_daemon_log();
              BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);

              if (v48)
              {
                uint64_t v49 = nr_daemon_log();
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)CFStringRef v130 = v8;
                  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Pairing %{public}@ is archived.", buf, 0xCu);
                }
              }
              id v50 = +[NSNull null];
              [v109 setObject:v50 forKeyedSubscript:v8];
              goto LABEL_80;
            }
            long long v62 = [v13 objectForKeyedSubscript:v103];
            uint64_t v63 = [v62 value];

            char v64 = [v13 objectForKeyedSubscript:v102];
            id v104 = [v64 value];

            if (!v63)
            {
              id v65 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"119C9267-C24D-4FC3-8FE9-2D394943F2E6"];
              if ([v13 supportsCapability:v65])
              {
                if ([v104 integerValue]) {
                  char v66 = v106;
                }
                else {
                  char v66 = 1;
                }

                if ((v66 & 1) == 0)
                {
                  id v67 = nr_daemon_log();
                  BOOL v68 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);

                  if (v68)
                  {
                    uint64_t v69 = nr_daemon_log();
                    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 138543362;
                      *(void *)CFStringRef v130 = v8;
                      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "Adding %{public}@ to migration list.", buf, 0xCu);
                    }
                  }
                  [v101 addObject:v8];
                  goto LABEL_108;
                }
              }
              else
              {
              }
            }
            char v73 = nr_daemon_log();
            BOOL v74 = os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);

            if (v74)
            {
              id v75 = nr_daemon_log();
              if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)CFStringRef v130 = v8;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Unable to migrate %{public}@.", buf, 0xCu);
              }
            }
            if (v106) {
              uint64_t v76 = 4;
            }
            else {
              uint64_t v76 = 2 * (v63 != 0);
            }
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) fileEarlyMigrationFailure:v76 withDeviceHistory:v114 forPairingID:v8];
            v77 = +[NSNull null];
            [v109 setObject:v77 forKeyedSubscript:v8];

            v78 = @"WatchUnexpectedlyUnpaired";
            if (v106)
            {
              uint64_t v79 = @"MigrationNotSupportedForMDMWatch";

              v78 = v79;
            }
            v80 = +[NRQueue registryDaemonQueue];
            v123[0] = _NSConcreteStackBlock;
            v123[1] = 3221225472;
            v123[2] = sub_10002AAE0;
            v123[3] = &unk_1001655F8;
            CFStringRef v124 = v78;
            uint64_t v81 = v78;
            [v80 dispatchAsync:v123];

LABEL_108:
          }
          else
          {
            if (v45)
            {
              id v51 = nr_daemon_log();
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Restored from backup.", buf, 2u);
              }
            }
            if (+[NRDataFileHistoryHelpersMigration hasClassAFile](NRDataFileHistoryHelpersMigration, "hasClassAFile")&& (v52 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"119C9267-C24D-4FC3-8FE9-2D394943F2E6"], unsigned int v53 = objc_msgSend(v13, "supportsCapability:", v52), v52, ((v53 ^ 1 | v106) & 1) == 0))
            {
              uint64_t v70 = nr_daemon_log();
              BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);

              if (v71)
              {
                uint64_t v72 = nr_daemon_log();
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)CFStringRef v130 = v8;
                  _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Adding %{public}@ to migration list.", buf, 0xCu);
                }
              }
              [v101 addObject:v8];
            }
            else
            {
              id v54 = nr_daemon_log();
              BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);

              if (v55)
              {
                id v56 = nr_daemon_log();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)CFStringRef v130 = v8;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Unable to migrate %{public}@.", buf, 0xCu);
                }
              }
              if (v106) {
                uint64_t v57 = 4;
              }
              else {
                uint64_t v57 = 1;
              }
              [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) fileEarlyMigrationFailure:v57 withDeviceHistory:v114 forPairingID:v8];
              id v58 = +[NSNull null];
              [v109 setObject:v58 forKeyedSubscript:v8];

              id v59 = @"WatchUnexpectedlyUnpaired";
              if (v106)
              {
                long long v60 = @"MigrationNotSupportedForMDMWatch";

                id v59 = v60;
              }
              uint64_t v61 = +[NRQueue registryDaemonQueue];
              v121[0] = _NSConcreteStackBlock;
              v121[1] = 3221225472;
              void v121[2] = sub_10002AB3C;
              v121[3] = &unk_1001655F8;
              CFStringRef v122 = v59;
              id v50 = v59;
              [v61 dispatchAsync:v121];

LABEL_80:
            }
          }
          goto LABEL_35;
        }
LABEL_36:

        int v7 = (char *)v7 + 1;
      }
      while (v113 != v7);
      id v82 = [obj countByEnumeratingWithState:&v125 objects:v131 count:16];
      id v113 = v82;
      if (!v82)
      {
LABEL_110:

        id v83 = objc_alloc((Class)NSSet);
        char v84 = [v109 allKeys];
        id v85 = [v83 initWithArray:v84];

        [v101 minusSet:v85];
        [v107 minusSet:v101];
        id v6 = v100;
        if ([v107 count])
        {
          id v86 = nr_daemon_log();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_FAULT)) {
            sub_1000F7588(v107, v86);
          }

          v119[0] = _NSConcreteStackBlock;
          v119[1] = 3221225472;
          v119[2] = sub_10002AB98;
          v119[3] = &unk_1001665F8;
          id v120 = v109;
          [v107 enumerateObjectsUsingBlock:v119];
          id v87 = +[NRQueue registryDaemonQueue];
          [v87 dispatchAsync:&stru_100166618];
        }
        unsigned int v88 = [*(id *)(a1 + 48) UDIDChanged];
        id v89 = nr_daemon_log();
        BOOL v90 = os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT);

        if (v88)
        {
          if (v90)
          {
            id v91 = nr_daemon_log();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)CFStringRef v130 = v101;
              _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Archiving devices %{public}@", buf, 0xCu);
            }
          }
          id v92 = *(void **)(a1 + 40);
          v93 = [v114 deviceCollection];
          [v92 _archiveDevices:v101 withCollection:v93];
        }
        else
        {
          if (v90)
          {
            v95 = nr_daemon_log();
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)CFStringRef v130 = v101;
              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Forcing migration sync for %{public}@", buf, 0xCu);
            }
          }
          uint64_t v96 = *(void **)(a1 + 40);
          v93 = [v114 deviceCollection];
          [v96 _forceMigrationSync:v101 withCollection:v93];
        }

        v97 = +[NRQueue registryDaemonQueue];
        v115[0] = _NSConcreteStackBlock;
        v115[1] = 3221225472;
        v115[2] = sub_10002AC98;
        v115[3] = &unk_1001666B8;
        uint64_t v98 = *(void **)(a1 + 48);
        v115[4] = *(void *)(a1 + 40);
        id v116 = v109;
        id v117 = v98;
        id v118 = *(id *)(a1 + 56);
        id v99 = v109;
        [v97 dispatchAsync:v115];

        goto LABEL_128;
      }
    }
  }
  [*(id *)(a1 + 40) setDidRestoreFromBackup:0];
  +[NRDataFileHistoryHelpersMigration createClassAFile];
  [*(id *)(a1 + 48) cacheUDID];
  uint64_t v94 = *(void *)(a1 + 56);
  if (v94) {
    (*(void (**)(void))(v94 + 16))();
  }
LABEL_128:
}

void sub_10002AA88(id a1)
{
  id v1 = +[NRRepeatingAlertEngine sharedInstance];
  [v1 setEnabled:1 withName:@"WatchesUnpairedProhibited"];
}

void sub_10002AAE0(uint64_t a1)
{
  id v2 = +[NRRepeatingAlertEngine sharedInstance];
  [v2 setEnabled:1 withName:*(void *)(a1 + 32)];
}

void sub_10002AB3C(uint64_t a1)
{
  id v2 = +[NRRepeatingAlertEngine sharedInstance];
  [v2 setEnabled:1 withName:*(void *)(a1 + 32)];
}

void sub_10002AB98(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSNull null];
  [*(id *)(a1 + 32) setObject:v4 forKeyedSubscript:v3];
}

void sub_10002AC10(id a1)
{
  id v1 = +[NRRepeatingAlertEngine sharedInstance];
  [v1 setEnabled:1 withName:@"WatchUnexpectedlyUnpaired"];

  id v2 = +[NRRepeatingAlertEngine sharedInstance];
  [v2 setEnabled:1 withName:@"WatchUnexpectedlyUnpairedBridge"];
}

void sub_10002AC98(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10002AD54;
  v3[3] = &unk_1001660A8;
  void v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  [v2 grabRegistryWithReadBlockAsync:v3];
}

void sub_10002AD54(id *a1, void *a2, void *a3)
{
  id v4 = a2;
  id v59 = a3;
  id v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    int v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = [v4 allPairingIDs];
      *(_DWORD *)long long buf = 138543362;
      id v82 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Updating NetworkRelay Identifier for devices in %{public}@", buf, 0xCu);
    }
  }
  [a1[4] _updateNetworkRelayIdentifierForDevicesInCollection:v4];
  uint64_t v9 = nr_daemon_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    uint64_t v11 = nr_daemon_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v4 allPairingIDs];
      *(_DWORD *)long long buf = 138543362;
      id v82 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Finding duplicate devices in %{public}@", buf, 0xCu);
    }
  }
  uint64_t v13 = +[NSMutableDictionary dictionary];
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  id v14 = v4;
  id v15 = [v14 countByEnumeratingWithState:&v77 objects:v88 count:16];
  uint64_t v61 = v14;
  if (v15)
  {
    id v16 = v15;
    uint64_t v63 = *(void *)v78;
    uint64_t v62 = NRDevicePropertyBluetoothMACAddress;
    do
    {
      uint64_t v17 = 0;
      do
      {
        if (*(void *)v78 != v63) {
          objc_enumerationMutation(v14);
        }
        id v18 = *(void **)(*((void *)&v77 + 1) + 8 * (void)v17);
        BOOL v19 = [v14 objectForKeyedSubscript:v18];
        id v20 = [v19 objectForKeyedSubscript:v62];
        BOOL v21 = [v20 value];

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v22 = [v59 securePropertyForID:v21];
        }
        else
        {
          id v22 = v21;
        }
        unsigned int v23 = v22;
        if (v22)
        {
          id v24 = [v13 objectForKeyedSubscript:v22];
          BOOL v25 = v24;
          if (v24)
          {
            id v26 = v24;
          }
          else
          {
            id v26 = +[NSSet set];
          }
          id v36 = v26;

          id v32 = [v36 setByAddingObject:v18];

          id v33 = v13;
          uint64_t v34 = v32;
          BOOL v35 = v23;
LABEL_28:
          [v33 setObject:v34 forKeyedSubscript:v35];
LABEL_29:

          goto LABEL_30;
        }
        __int16 v27 = +[NRSystemProperties sharedInstance];
        unsigned int v28 = [v27 isBluetoothCapable];

        BOOL v29 = nr_daemon_log();
        BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);

        if (v28)
        {
          id v14 = v61;
          if (v30)
          {
            id v31 = nr_daemon_log();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              id v82 = v18;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: marking a device missing Bluetooh MAC for removal: pairing ID %{public}@", buf, 0xCu);
            }
          }
          id v32 = +[NSNull null];
          id v33 = a1[5];
          uint64_t v34 = v32;
          BOOL v35 = v18;
          goto LABEL_28;
        }
        id v14 = v61;
        if (v30)
        {
          id v32 = nr_daemon_log();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            id v82 = v18;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: not marking a device missing Bluetooh MAC for removal (BT not supported): pairing ID %{public}@", buf, 0xCu);
          }
          goto LABEL_29;
        }
LABEL_30:

        uint64_t v17 = (char *)v17 + 1;
      }
      while (v16 != v17);
      id v37 = [v14 countByEnumeratingWithState:&v77 objects:v88 count:16];
      id v16 = v37;
    }
    while (v37);
  }

  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  id v38 = v13;
  id v39 = [v38 countByEnumeratingWithState:&v73 objects:v87 count:16];
  if (v39)
  {
    id v41 = v39;
    uint64_t v42 = *(void *)v74;
    *(void *)&long long v40 = 138543874;
    long long v58 = v40;
    do
    {
      for (i = 0; i != v41; i = (char *)i + 1)
      {
        if (*(void *)v74 != v42) {
          objc_enumerationMutation(v38);
        }
        v44 = *(void **)(*((void *)&v73 + 1) + 8 * i);
        BOOL v45 = [v38 objectForKeyedSubscript:v44, v58];
        if ((unint64_t)[v45 count] >= 2)
        {
          uint64_t v46 = [v45 allObjects];
          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472;
          v71[2] = sub_10002B550;
          v71[3] = &unk_100166640;
          id v72 = v61;
          id v47 = [v46 sortedArrayUsingComparator:v71];

          BOOL v48 = nr_daemon_log();
          BOOL v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);

          if (v49)
          {
            id v50 = nr_daemon_log();
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412546;
              id v82 = v45;
              __int16 v83 = 2112;
              char v84 = v47;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Sorting NRDevices to find duplicates. IN: %@ OUT: %@", buf, 0x16u);
            }
          }
          id v51 = [v47 firstObject];
          id v52 = nr_daemon_log();
          BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);

          if (v53)
          {
            id v54 = nr_daemon_log();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = v58;
              id v82 = v45;
              __int16 v83 = 2112;
              char v84 = v44;
              __int16 v85 = 2114;
              id v86 = v51;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Found duplicate NRDevices %{public}@ for BTMAC %@ keeping %{public}@", buf, 0x20u);
            }
          }
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472;
          v69[2] = sub_10002B6A0;
          v69[3] = &unk_100166668;
          id v70 = a1[5];
          [v47 enumerateObjectsUsingBlock:v69];
        }
      }
      id v41 = [v38 countByEnumeratingWithState:&v73 objects:v87 count:16];
    }
    while (v41);
  }

  BOOL v55 = +[NRQueue registryDaemonQueue];
  v64[0] = _NSConcreteStackBlock;
  v64[1] = 3221225472;
  v64[2] = sub_10002B720;
  v64[3] = &unk_1001666B8;
  id v56 = a1[5];
  id v57 = a1[4];
  id v65 = v56;
  id v66 = v57;
  id v67 = a1[6];
  id v68 = a1[7];
  [v55 dispatchAsync:v64];
}

uint64_t sub_10002B550(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  int v7 = [v5 objectForKeyedSubscript:a2];
  BOOL v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];

  if ([v7 isPaired] && !objc_msgSend(v8, "isPaired"))
  {
    uint64_t v9 = -1;
  }
  else if (([v7 isPaired] & 1) != 0 {
         || ([v8 isPaired] & 1) == 0)
  }
  {
    uint64_t v10 = NRDevicePropertyLastActiveDate;
    uint64_t v11 = [v7 objectForKeyedSubscript:NRDevicePropertyLastActiveDate];
    id v12 = [v11 value];

    uint64_t v13 = [v8 objectForKeyedSubscript:v10];
    id v14 = [v13 value];

    if (v12) {
      BOOL v15 = v14 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15)
    {
      if (v12) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v14 == 0;
      }
      uint64_t v17 = !v16;
      if (v12) {
        BOOL v18 = v14 == 0;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18) {
        uint64_t v9 = -1;
      }
      else {
        uint64_t v9 = v17;
      }
    }
    else
    {
      uint64_t v9 = (uint64_t)[v14 compare:v12];
    }
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_10002B6A0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = +[NSNull null];
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v4];
  }
}

uint64_t sub_10002B720(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      id v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v5 = [*(id *)(a1 + 32) allKeys];
        *(_DWORD *)long long buf = 138543362;
        uint64_t v10 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "createUnpairTransactionsWithCompletion: Unpairing %{public}@", buf, 0xCu);
      }
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10002B894;
    v8[3] = &unk_100166690;
    id v6 = *(void **)(a1 + 32);
    v8[4] = *(void *)(a1 + 40);
    [v6 enumerateKeysAndObjectsUsingBlock:v8];
  }
  [*(id *)(a1 + 40) setDidRestoreFromBackup:0];
  +[NRDataFileHistoryHelpersMigration createClassAFile];
  [*(id *)(a1 + 48) cacheUDID];
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002B894(uint64_t a1, void *a2, void *a3)
{
  id v8 = a3;
  id v5 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v6 = 0;
  }
  else {
    id v6 = v8;
  }
  LOBYTE(v7) = 0;
  [*(id *)(a1 + 32) unpairDeviceWithPairingID:v5 obliterationString:@"createUnpairTransactionsWithCompletion" shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanFalse pairingReport:v6 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v7];
}

void sub_10002BDD4(uint64_t a1)
{
}

void sub_10002BEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002BF04(uint64_t a1)
{
}

void sub_10002C2F4(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 208), *(id *)(a1 + 40));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 56));
  *(unsigned char *)(*(void *)(a1 + 32) + 33) = *(unsigned char *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  if (*(void *)(v2 + 112) != v3)
  {
    *(void *)(v2 + 112) = v3;
    id v4 = *(void **)(*(void *)(a1 + 32) + 152);
    [v4 pollProperties];
  }
}

void sub_10002C778(id a1)
{
  Boolean keyExistsAndHasValidFormat = 0;
  qword_1001A1120 = CFPreferencesGetAppIntegerValue(@"pairedMinCompatibilityVersion", @"com.apple.ids", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    byte_1001A10D0 = 1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  qword_1001A1128 = CFPreferencesGetAppIntegerValue(@"pairedMaxCompatibilityVersion", @"com.apple.ids", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    byte_1001A10D0 = 1;
  }
}

void sub_10002C8E4(uint64_t a1)
{
  signal(15, (void (__cdecl *)(int))1);
  dispatch_source_t v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  uint64_t v3 = (void *)qword_1001A10E0;
  qword_1001A10E0 = (uint64_t)v2;

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10002CA48;
  handler[3] = &unk_1001655F8;
  handler[4] = *(void *)(a1 + 32);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1001A10E0, handler);
  dispatch_resume((dispatch_object_t)qword_1001A10E0);
  signal(30, (void (__cdecl *)(int))1);
  dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1EuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  id v5 = (void *)qword_1001A10E8;
  qword_1001A10E8 = (uint64_t)v4;

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10002CA50;
  v6[3] = &unk_1001655F8;
  void v6[4] = *(void *)(a1 + 32);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1001A10E8, v6);
  dispatch_resume((dispatch_object_t)qword_1001A10E8);
}

id sub_10002CA48(uint64_t a1)
{
  return [*(id *)(a1 + 32) sigTerm];
}

id sub_10002CA50(uint64_t a1)
{
  return [*(id *)(a1 + 32) sigUsr1];
}

void sub_10002CAA8(id a1)
{
  id v1 = +[NRRepeatingAlertEngine sharedInstance];
  [v1 sigTerm];
}

void sub_10002D008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002D030(uint64_t a1)
{
  id v2 = objc_alloc(*(Class *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_source_t v4 = +[NRQueue registryDaemonQueue];
  id v5 = [v4 queue];
  id v6 = [v2 initWithDelegate:v3 andQueue:v5];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = +[NRQueue registryDaemonQueue];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10002D150;
  v12[3] = &unk_100166770;
  void v12[4] = *(void *)(a1 + 32);
  long long v11 = *(_OWORD *)(a1 + 40);
  id v10 = (id)v11;
  long long v13 = v11;
  [v9 dispatchAsync:v12];
}

uint64_t sub_10002D150(void *a1)
{
  [*(id *)(a1[4] + 144) addService:*(void *)(*(void *)(a1[6] + 8) + 40)];
  [*(id *)(*(void *)(a1[6] + 8) + 40) setDisconnected:0];
  uint64_t result = a1[5];
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_10002D1D0(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setDisconnected:0];
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

void sub_10002D490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

id sub_10002D4D0(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10002D4FC(uint64_t a1)
{
}

void sub_10002D504(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v22 = 0;
  unsigned int v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  dispatch_source_t v4 = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 40) + 8) + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  uint64_t v16 = sub_10002D750;
  uint64_t v17 = &unk_1001667E8;
  long long v19 = *(_OWORD *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 64);
  id v5 = v3;
  id v18 = v5;
  id v20 = &v22;
  id v6 = v15;
  os_unfair_lock_lock_with_options();
  v16(v6);

  os_unfair_lock_unlock(v4);
  if (*((unsigned char *)v23 + 24))
  {
    uint64_t v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        long long v11 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 134218242;
        id v27 = v10;
        __int16 v28 = 2112;
        BOOL v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --done--", buf, 0x16u);
      }
    }
    uint64_t v12 = +[NRQueue registryDaemonQueue];
    [v12 dispatchAsync:*(void *)(a1 + 32)];

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;
  }
  _Block_object_dispose(&v22, 8);
}

void sub_10002D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002D750(void *a1)
{
  --*(void *)(*(void *)(a1[5] + 8) + 24);
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    dispatch_source_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = objc_retainBlock(*(id *)(*(void *)(a1[6] + 8) + 40));
      id v6 = +[NSNumber numberWithInteger:a1[8]];
      uint64_t v7 = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1[5] + 8) + 24)];
      uint64_t v8 = a1[4];
      int v9 = 134218754;
      id v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --%@:%@--", (uint8_t *)&v9, 0x2Au);
    }
  }
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = *(void *)(*(void *)(a1[5] + 8) + 24) == 0;
}

void sub_10002D980(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002DA10;
  v2[3] = &unk_100166888;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 areWePairedOrPairing:v2];
}

void sub_10002DA10(uint64_t a1, int a2)
{
  dispatch_source_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (a2)
  {
    if (v5)
    {
      id v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Paired, updating traffic class", buf, 2u);
      }
    }
    uint64_t v7 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10002DB78;
    v10[3] = &unk_100166860;
    v10[4] = v7;
    id v11 = *(id *)(a1 + 40);
    [v7 grabRegistryWithReadBlockAsync:v10];
  }
  else
  {
    if (v5)
    {
      uint64_t v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not paired, not updating traffic class", buf, 2u);
      }
    }
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(void))(v9 + 16))();
    }
  }
}

void sub_10002DB78(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_source_t v4 = [v3 activeDeviceID];

  if (v4)
  {
    BOOL v5 = [v3 activeDevice];
    id v6 = [v5 objectForKeyedSubscript:_NRDevicePropertyCompatibilityState];
    uint64_t v7 = [v6 value];

    uint64_t v8 = +[NRQueue registryDaemonQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10002DD1C;
    v14[3] = &unk_100166838;
    uint64_t v9 = *(void **)(a1 + 40);
    void v14[4] = *(void *)(a1 + 32);
    id v15 = v7;
    id v16 = v9;
    id v10 = v7;
    [v8 dispatchAsync:v14];
  }
  else
  {
    id v11 = +[NRQueue registryDaemonQueue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10002DD74;
    v12[3] = &unk_100165D10;
    id v13 = *(id *)(a1 + 40);
    [v11 dispatchAsync:v12];

    id v10 = v13;
  }
}

uint64_t sub_10002DD1C(uint64_t a1)
{
  [*(id *)(a1 + 32) setIDSTrafficClassifiersForActiveDeviceWithNewCompatibilityState:*(void *)(a1 + 40)];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_10002DD74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10002DE98(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_source_t v4 = +[NRQueue registryDaemonQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002DF60;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchAsync:v7];
}

void sub_10002DF60(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) activeDevice];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, [v2 isPaired]);
}

uint64_t sub_10002E278(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    dispatch_source_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Polling IDS for paired devices", v6, 2u);
    }
  }
  [*(id *)(a1 + 32) _isIDSReady];
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10002E328(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E358(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E370(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002E388(uint64_t a1, int a2)
{
  if (a2)
  {
    BOOL v3 = objc_opt_class();
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10002E564;
    v16[3] = &unk_100165D10;
    id v17 = *(id *)(a1 + 40);
    dispatch_source_t v4 = [v3 countdown:2 toCompletion:v16];
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = objc_opt_class();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10002E57C;
    v14[3] = &unk_100165D10;
    id v7 = v4;
    id v15 = v7;
    [v5 initIDSService:v6 block:v14];
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = objc_opt_class();
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10002E594;
    v12[3] = &unk_100165D10;
    id v13 = v7;
    id v10 = v7;
    [v8 initIDSService:v9 block:v12];
  }
  else
  {
    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v11();
  }
}

uint64_t sub_10002E564(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E57C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002E594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10002E98C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10002E9BC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 144) optionalServiceFromClass:objc_opt_class()];
  if (v2)
  {
    BOOL v3 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v5 = v2;
    dispatch_source_t v4 = [v2 description];
    [v3 appendString:v4];

    id v2 = v5;
  }
}

void sub_10002EA54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) history];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v2 nextIndex];

  uint64_t v3 = *(void *)(a1 + 56);
  if (v3 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) == v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;
  }
  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appendString:@"Registry Current State:\n"];
    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v7 = [*(id *)(a1 + 32) history];
    id v8 = [v7 deviceCollection];
    uint64_t v9 = [v8 description];
    [v6 appendString:v9];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appendFormat:@"History Index: %lu\n", *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)];
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appendString:@"History:\n"];
    id v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v11 = [*(id *)(a1 + 32) history];
    uint64_t v12 = [v11 description];
    [v10 appendString:v12];

    if (!_NRIsInternalInstall()) {
      return;
    }
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appendString:@"Secure properties (internal builds only):\n"];
    id v13 = [*(id *)(a1 + 32) secureProperties];

    if (!v13) {
      return;
    }
    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v16 = [*(id *)(a1 + 32) secureProperties];
    id v15 = [v16 description];
    [v14 appendString:v15];

    id v5 = v16;
  }
}

void sub_10002F000(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002F090;
  v2[3] = &unk_100166210;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 initializeTrafficClassBlock:v2];
}

uint64_t sub_10002F090(uint64_t a1)
{
  id v2 = +[EPNanoRegistryStatusCodeElection sharedInstance];
  id v3 = [v2 newStatusCodeVote:2];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 184);
  *(void *)(v4 + 184) = v3;

  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v7 = *(uint64_t (**)(void))(result + 16);
    return v7();
  }
  return result;
}

id sub_10002F114(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) dumpStateGivenCachedHistoryIndex:a2];
}

uint64_t sub_10002F120(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002F138(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002F150(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 _updateActiveFlag:v4 andPost:1];
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = [v4 activeDeviceID];
  [v5 _updateCompatibilityStateForDeviceID:v6 withDeviceCollection:v4];

  [*(id *)(a1 + 32) _onRestartMarkPairedDevicesIsSetup:v4];
  +[NRPairingDaemon updatePingMyWatchControlCenterModuleVisibility:v4];

  id v7 = [*(id *)(*(void *)(a1 + 32) + 144) instantiateServiceByClass:objc_opt_class()];
  id v8 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v8();
}

void sub_10002FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id location)
{
}

void sub_10002FAA4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 144) instantiateServiceByClass:objc_opt_class()];
  id v3 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
  [v3 addObserver:*(void *)(a1 + 32)];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 144) instantiateServiceByClass:objc_opt_class()];
  id v5 = +[NRQueue delayPairingRequestQueue];
  [v5 resume];

  [*(id *)(a1 + 32) syncPairingClientCrashMonitoringCache];
  [*(id *)(a1 + 32) setPairingQueueIsSuspended:0];
  uint64_t v6 = *(void **)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10002FBF8;
  v7[3] = &unk_100166860;
  void v7[4] = v6;
  id v8 = *(id *)(a1 + 40);
  [v6 grabRegistryWithReadBlockAsync:v7];
}

void sub_10002FBF8(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDeviceID];
  id v4 = +[NRQueue registryDaemonQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10002FCCC;
  v8[3] = &unk_100166838;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  [v4 dispatchAsync:v8];
}

uint64_t sub_10002FCCC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_opt_new();
    id v3 = [EPRoutingSlipEntry alloc];
    uint64_t v4 = [*(id *)(a1 + 32) UUIDString];
    uint64_t v5 = (void *)v4;
    if (v4) {
      CFStringRef v6 = (const __CFString *)v4;
    }
    else {
      CFStringRef v6 = @"none";
    }
    id v7 = [@"checkForSyncOnFirstUnlock-" stringByAppendingString:v6];
    uint64_t v8 = objc_opt_class();
    CFStringRef v20 = @"nrDeviceIdentifier";
    id v9 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
    uint64_t v21 = v9;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    id v11 = [(EPRoutingSlipEntry *)v3 initWithName:v7 transactionClass:v8 operands:v10];
    [v2 setEntry:v11];

    [v2 setRunningStatusCode:2];
    [v2 setOperationType:@"reunionSync"];
    [v2 setTargetPairingID:*(void *)(a1 + 32)];
    uint64_t v12 = [*(id *)(*(void *)(a1 + 40) + 144) serviceFromClass:objc_opt_class()];
    [v12 addTransaction:v2];
  }
  id v13 = nr_daemon_log();
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

  if (v14)
  {
    id v15 = nr_daemon_log();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v18 = 138412290;
      uint64_t v19 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Post first unlock active device %@", (uint8_t *)&v18, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_10002FF18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002FF30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002FF48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002FF60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10002FF78(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained) {
    id v3 = [WeakRetained mirrorOfIsPaired];
  }
  else {
    id v3 = 0;
  }

  return v3;
}

void sub_10002FFC0(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = [*(id *)(a1 + 32) _hasUpdateModeDevicesInCollection:a2];
  id v4 = +[NRRepeatingAlertEngine sharedInstance];
  if (v3)
  {
    [v4 setEnabled:[*(id *)(a1 + 32) _isBridgeForeground] ^ 1 withName:@"PairedWatchIsIncompatible"];
    [v4 presentAlertsIfNeeded];
  }
  else
  {
    [v4 resetStateForAlertWithName:@"PairedWatchIsIncompatible"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10003007C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100030094(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = [v3 activeDeviceID];
  id v4 = [v3 objectForKeyedSubscript:];

  uint64_t v5 = [v4 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  CFStringRef v6 = [v5 value];

  if (v6) {
    [*(id *)(a1 + 32) startMonitoringDeviceWithBluetoothUUID:v6];
  }
}

void sub_1000301FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 allPairingIDs];
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_100030848;
  v60[3] = &unk_100166978;
  id v8 = v5;
  id v61 = v8;
  char v62 = *(unsigned char *)(a1 + 40);
  id v9 = [v7 sortedArrayUsingComparator:v60];

  if ([v9 count])
  {
    id v42 = v6;
    uint64_t v43 = a1;
    long long v40 = v9;
    id v41 = v8;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v56 objects:v65 count:16];
    if (v11)
    {
      id v12 = v11;
      id v13 = 0;
      uint64_t v14 = *(void *)v57;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v57 != v14) {
            objc_enumerationMutation(v10);
          }
          uint64_t v16 = *(void **)(*((void *)&v56 + 1) + 8 * i);
          if (v13)
          {
            id v17 = [*(id *)(*((void *)&v56 + 1) + 8 * i) UUIDString];
            [v13 appendString:v17];
          }
          else
          {
            id v13 = [@"[" mutableCopy];
            int v18 = [v16 UUIDString];
            [v13 appendString:v18];

            [v13 appendString:@"]"];
          }
          [v13 appendString:@", "];
        }
        id v12 = [v10 countByEnumeratingWithState:&v56 objects:v65 count:16];
      }
      while (v12);
    }
    else
    {
      id v13 = 0;
    }

    CFStringRef v20 = nr_daemon_log();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

    id v8 = v41;
    uint64_t v22 = v43;
    if (v21)
    {
      unsigned int v23 = nr_daemon_log();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        id v64 = v13;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Device to make active: %{public}@", buf, 0xCu);
      }
    }
    uint64_t v24 = [v10 firstObject];
    if ([v41 allAltAccount] && !*(unsigned char *)(v43 + 40))
    {
      id v37 = [v41 activeDeviceID];

      id v38 = +[NRQueue registryDaemonQueue];
      if (v37)
      {
        v54[0] = _NSConcreteStackBlock;
        v54[1] = 3221225472;
        v54[2] = sub_100030A9C;
        v54[3] = &unk_100165D10;
        id v55 = *(id *)(v43 + 32);
        [v38 dispatchAsync:v54];

        id v36 = v55;
      }
      else
      {
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_100030AB8;
        v52[3] = &unk_100165D10;
        id v53 = *(id *)(v43 + 32);
        [v38 dispatchAsync:v52];

        id v36 = v53;
      }
      goto LABEL_30;
    }
    char v25 = [v41 objectForKeyedSubscript:v24];
    if ([v25 isPaired])
    {
      id v26 = [v41 objectForKeyedSubscript:v24];
      id v27 = [v26 objectForKeyedSubscript:NRDevicePropertyName];
      uint64_t v28 = [v27 value];
      if (v28)
      {
        BOOL v29 = (void *)v28;
        BOOL v30 = [v41 activeDeviceID];
        unsigned __int8 v31 = [v24 isEqual:v30];

        uint64_t v22 = v43;
        if ((v31 & 1) == 0)
        {
          id v32 = [v41 objectForKeyedSubscript:v24];
          id v33 = [v32 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
          uint64_t v34 = [v33 value];

          BOOL v35 = +[NRQueue registryDaemonQueue];
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_100030AD4;
          v48[3] = &unk_1001669A0;
          id v51 = *(id *)(v43 + 32);
          id v49 = v24;
          id v50 = v34;
          id v36 = v34;
          [v35 dispatchAsync:v48];

LABEL_30:
          id v6 = v42;

          id v9 = v40;
          goto LABEL_31;
        }
LABEL_29:
        id v39 = +[NRQueue registryDaemonQueue];
        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472;
        v46[2] = sub_100030AF0;
        v46[3] = &unk_100165D10;
        id v47 = *(id *)(v22 + 32);
        [v39 dispatchAsync:v46];

        id v36 = v47;
        goto LABEL_30;
      }

      uint64_t v22 = v43;
    }

    goto LABEL_29;
  }
  uint64_t v19 = +[NRQueue registryDaemonQueue];
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_100030B0C;
  v44[3] = &unk_100165D10;
  id v45 = *(id *)(a1 + 32);
  [v19 dispatchAsync:v44];

  id v13 = v45;
LABEL_31:
}

uint64_t sub_100030848(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:a2];
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];

  if ([v7 isPaired] && !objc_msgSend(v8, "isPaired")) {
    goto LABEL_13;
  }
  if (([v7 isPaired] & 1) == 0 && (objc_msgSend(v8, "isPaired") & 1) != 0
    || [v7 isAltAccount]
    && ([v8 isAltAccount] & 1) == 0
    && !*(unsigned char *)(a1 + 40))
  {
    goto LABEL_24;
  }
  if (([v7 isAltAccount] & 1) == 0
    && [v8 isAltAccount]
    && !*(unsigned char *)(a1 + 40))
  {
    goto LABEL_13;
  }
  uint64_t v9 = NRDevicePropertyName;
  id v10 = [v7 objectForKeyedSubscript:NRDevicePropertyName];
  uint64_t v11 = [v10 value];
  if (v11)
  {
    id v12 = (void *)v11;
    id v13 = [v8 objectForKeyedSubscript:v9];
    uint64_t v14 = [v13 value];

    if (!v14)
    {
LABEL_13:
      uint64_t v15 = -1;
      goto LABEL_32;
    }
  }
  else
  {
  }
  uint64_t v16 = [v7 objectForKeyedSubscript:v9];
  id v17 = [v16 value];
  if (v17)
  {

    goto LABEL_17;
  }
  unsigned int v23 = [v8 objectForKeyedSubscript:v9];
  uint64_t v24 = [v23 value];

  if (v24)
  {
LABEL_24:
    uint64_t v15 = 1;
    goto LABEL_32;
  }
LABEL_17:
  uint64_t v18 = NRDevicePropertyLastActiveDate;
  uint64_t v19 = [v7 objectForKeyedSubscript:NRDevicePropertyLastActiveDate];
  CFStringRef v20 = [v19 value];

  BOOL v21 = [v8 objectForKeyedSubscript:v18];
  uint64_t v22 = [v21 value];

  if (v20 && v22)
  {
    uint64_t v15 = (uint64_t)[v22 compare:v20];
  }
  else if (!v20 || v22)
  {
    if (v20) {
      BOOL v25 = 1;
    }
    else {
      BOOL v25 = v22 == 0;
    }
    uint64_t v15 = !v25;
  }
  else
  {
    uint64_t v15 = -1;
  }

LABEL_32:
  return v15;
}

uint64_t sub_100030A9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100030AB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100030AD4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5], 0);
}

uint64_t sub_100030AF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100030B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100030BBC(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  id v6 = a2;
  uint64_t v7 = [*(id *)(a1 + 32) lastActivePairingIDThatFailed];
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = [*(id *)(a1 + 32) lastActivePairingIDThatFailed];
    unsigned int v10 = [v9 isEqual:v6];

    if (v10)
    {

      id v6 = 0;
    }
  }
  if (v6 || a4)
  {
    uint64_t v11 = objc_opt_new();
    id v12 = [EPRoutingSlipEntry alloc];
    uint64_t v13 = [v6 UUIDString];
    uint64_t v14 = (void *)v13;
    if (v13) {
      CFStringRef v15 = (const __CFString *)v13;
    }
    else {
      CFStringRef v15 = @"none";
    }
    uint64_t v16 = [@"switchToLastActive-" stringByAppendingString:v15];
    uint64_t v17 = objc_opt_class();
    CFStringRef v28 = @"switchToNRDeviceUUID";
    uint64_t v18 = [[EPSagaOperandUUID alloc] initWithUUID:v6];
    BOOL v29 = v18;
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    CFStringRef v20 = [(EPRoutingSlipEntry *)v12 initWithName:v16 transactionClass:v17 operands:v19];
    [v11 setEntry:v20];

    [v11 setRunningStatusCode:3];
    [v11 setOperationType:@"externalSwitch"];
    [v11 setTargetPairingID:v6];
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100030E60;
    v25[3] = &unk_1001669F0;
    id v21 = v6;
    uint64_t v22 = *(void *)(a1 + 32);
    id v26 = v21;
    uint64_t v27 = v22;
    [v11 setDidEnd:v25];
    unsigned int v23 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
    [v23 addTransaction:v11];
  }
  uint64_t v24 = *(void *)(a1 + 40);
  if (v24) {
    (*(void (**)(uint64_t, BOOL))(v24 + 16))(v24, v6 != 0);
  }
}

void sub_100030E60(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = v3;
  if (*(void *)(a1 + 32)
    && ([v3 getLastFirstError], id v4 = objc_claimAutoreleasedReturnValue(), v4, v4))
  {
    uint64_t v5 = *(void *)(a1 + 32);
  }
  else
  {
    uint64_t v5 = 0;
  }
  [*(id *)(a1 + 40) setLastActivePairingIDThatFailed:v5];
}

void sub_100031198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000311B4(uint64_t a1, char a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 40);
    [v3 resume];
  }
  else
  {
    id v4 = objc_opt_class();
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_100031408;
    v22[3] = &unk_1001668D8;
    id v5 = *(id *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    id v23 = v5;
    uint64_t v24 = v6;
    uint64_t v7 = [v4 countdown:3 toCompletion:v22];
    id v8 = *(void **)(a1 + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_100031450;
    v20[3] = &unk_100165D10;
    id v9 = v7;
    id v21 = v9;
    [v8 purgeDiscoveredDevices:v20];
    unsigned int v10 = +[NRRepeatingAlertEngine sharedInstance];
    [v10 presentAlertsIfNeeded];

    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(v11 + 144);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100031468;
    v18[3] = &unk_100166A40;
    v18[4] = v11;
    id v13 = v9;
    id v19 = v13;
    +[EPSagaTransactionSetDaemonsEnabled getNormalDaemonValueWith:0 serviceRegistry:v12 forceEnableWhenPairedOrActive:0 completion:v18];
    uint64_t v14 = *(void **)(a1 + 32);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100031534;
    v16[3] = &unk_100166A68;
    void v16[4] = v14;
    id v17 = v13;
    id v15 = v13;
    [v14 grabRegistryWithWriteBlockAsync:v16];
  }
}

void sub_100031408(uint64_t a1)
{
  [*(id *)(a1 + 32) resume];
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

uint64_t sub_100031450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100031468(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 144);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10003151C;
  v4[3] = &unk_100165D10;
  id v5 = *(id *)(a1 + 40);
  +[EPSagaTransactionSetDaemonsEnabled enableDaemons:a2 serviceRegistry:v3 completion:v4];
}

uint64_t sub_10003151C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100031534(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDevice];
  id v5 = v4;
  if (v4 && [v4 isPaired])
  {
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = [v3 activeDeviceID];
    [v6 _updateCompatibilityStateForDeviceID:v7 withDeviceCollection:v3];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

  return 0;
}

uint64_t sub_100031718(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v18;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v11 = [v5 objectForKeyedSubscript:v10];
        if (([v11 isActive] & 1) == 0
          && ([v11 isPaired] & 1) == 0
          && ([v11 isArchived] & 1) == 0)
        {
          id v12 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:0 andChangeType:2];
          [v4 setObject:v12 forKeyedSubscript:v10];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }

  id v13 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v4];
  id v14 = [v5 applyDiff:v13];
  if (*(void *)(a1 + 32))
  {
    id v15 = +[NRQueue registryDaemonQueue];
    [v15 dispatchAsync:*(void *)(a1 + 32)];
  }
  return 0;
}

void sub_100031C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Block_object_dispose((const void *)(v33 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100031CCC(void *a1)
{
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = *(unsigned char *)(a1[4] + 45);
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), *(id *)(a1[4] + 488));
  uint64_t v2 = a1[4];
  id v3 = *(void **)(v2 + 488);
  *(void *)(v2 + 488) = 0;

  objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), *(id *)(a1[4] + 496));
  uint64_t v4 = a1[4];
  id v5 = *(void **)(v4 + 496);
  *(void *)(v4 + 496) = 0;

  *(unsigned char *)(a1[4] + 46) = 1;
}

id sub_100031D78(uint64_t a1)
{
  [*(id *)(a1 + 32) proxyRequestsSuspensionOfCrashMonitoring:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100031E0C;
  v4[3] = &unk_1001657F0;
  void v4[4] = *(void *)(a1 + 48);
  return [v2 xpcSuspendPairingClientCrashMonitoring:v4];
}

void sub_100031E0C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

id sub_100031E20(uint64_t a1)
{
  [*(id *)(a1 + 32) proxyRequestsResumptionOfCrashMonitoring:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100031EB4;
  v4[3] = &unk_1001657F0;
  void v4[4] = *(void *)(a1 + 48);
  return [v2 xpcResumePairingClientCrashMonitoring:v4];
}

void sub_100031EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0;
}

void sub_1000320B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000320D8(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 46))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    *(unsigned char *)(*(void *)(a1 + 32) + 45) = *(unsigned char *)(a1 + 56);
    int v2 = *(unsigned __int8 *)(a1 + 56);
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v2)
    {
      if (!v4) {
        goto LABEL_11;
      }
      id v5 = nr_daemon_log();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_10;
      }
      __int16 v12 = 0;
      id v6 = "Caching suspend crash monitoring";
      id v7 = (uint8_t *)&v12;
    }
    else
    {
      if (!v4) {
        goto LABEL_11;
      }
      id v5 = nr_daemon_log();
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
LABEL_10:

LABEL_11:
        objc_storeStrong((id *)(*(void *)(a1 + 32) + 496), *(id *)(a1 + 40));
        if (!*(void *)(*(void *)(a1 + 32) + 488))
        {
          uint64_t v8 = +[NROSTransaction transactionWithName:@"crashWaitMKB"];
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v10 = *(void **)(v9 + 488);
          *(void *)(v9 + 488) = v8;
        }
        return;
      }
      __int16 v11 = 0;
      id v6 = "Caching resume crash monitoring";
      id v7 = (uint8_t *)&v11;
    }
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
    goto LABEL_10;
  }
}

void sub_1000322C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = +[NSMutableArray array];
  id v16 = [v3 nextIndex];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v5 = [v3 deviceCollection];
  id v6 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v20;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v20 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v19 + 1) + 8 * (void)v9);
        __int16 v11 = [v3 deviceCollection];
        __int16 v12 = [v11 objectForKeyedSubscript:v10];

        if (([v12 isActive] & 1) != 0
          || ([v12 isPaired] & 1) != 0
          || [v12 isArchived])
        {
          [v4 addObject:v10];
        }

        uint64_t v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v7);
  }

  id v13 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
  id v14 = +[NRQueue registryDaemonQueue];
  id v15 = [v14 queue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10003251C;
  v17[3] = &unk_100165C20;
  id v18 = *(id *)(a1 + 40);
  [v13 cleanupPairedStoreWithUUIDs:v4 withIndex:v16 withQueue:v15 withCompletion:v17];
}

uint64_t sub_10003251C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100032894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000328B8(void *a1)
{
  int v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = "-[NRPairingDaemon debounceOnQueue:block:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: Debouncer timed out- calling block", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v5 = a1[4];
  id v6 = *(void **)(v5 + 512);
  *(void *)(v5 + 512) = 0;

  (*(void (**)(void))(a1[5] + 16))();
  uint64_t v7 = *(void *)(a1[6] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0;
}

void sub_100032BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032C18(uint64_t a1)
{
  sleep(1u);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  BOOL v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_100032C60(uint64_t a1, void *a2)
{
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, _xpc_event_key_name);
  if (string)
  {
    uint64_t v5 = string;
    size_t v6 = strlen(string);
    if (!strncmp("com.apple.purplebuddy.setupexited", v5, v6))
    {
      long long v17 = nr_daemon_log();
      BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

      if (v18)
      {
        long long v19 = nr_daemon_log();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Buddy setup done notification received", buf, 2u);
        }
      }
      if (!CFPreferencesGetAppBooleanValue(@"DisplayGraduationUnpairInstructions", @"com.apple.Bridge", 0))[*(id *)(a1 + 32) checkForWatchNeedsGraduation:&stru_100166B98]; {
      *(void *)long long buf = 0;
      }
      uint64_t v24 = buf;
      uint64_t v25 = 0x3032000000;
      id v26 = sub_100023880;
      uint64_t v27 = sub_100023890;
      id v28 = +[NROSTransaction transactionWithName:@"processLaunchEvents"];
      long long v20 = +[NRQueue registryDaemonQueue];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_100033028;
      v22[3] = &unk_1001657F0;
      void v22[4] = buf;
      [v20 dispatchAfter:v22 withBlock:30.0];

      _Block_object_dispose(buf, 8);
    }
    else
    {
      uint64_t v7 = (const char *)[MCSettingsChangedNotification UTF8String];
      size_t v8 = strlen(v5);
      if (!strncmp(v7, v5, v8)
        || (int v9 = (const char *)[MCRestrictionChangedNotification UTF8String],
            size_t v10 = strlen(v5),
            !strncmp(v9, v5, v10))
        || (__int16 v11 = (const char *)[MCEffectiveSettingsChangedNotification UTF8String],
            size_t v12 = strlen(v5),
            !strncmp(v11, v5, v12)))
      {
        id v13 = nr_daemon_log();
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

        if (v14)
        {
          id v15 = nr_daemon_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received managed configuration change notification", buf, 2u);
          }
        }
        id v16 = *(void **)(a1 + 32);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100033084;
        v21[3] = &unk_100166BC0;
        v21[4] = v16;
        [v16 grabHistoryWithReadBlock:v21];
      }
    }
  }
}

void sub_100032F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100032F9C(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = +[NRRepeatingAlertEngine sharedInstance];
  [v3 setEnabled:v2 withName:@"TinkerWatchFoundInAccount"];

  id v4 = +[NRRepeatingAlertEngine sharedInstance];
  [v4 presentAlertIfEnabledWithName:@"TinkerWatchFoundInAccount"];
}

void sub_100033028(uint64_t a1)
{
  BOOL v2 = +[NRRepeatingAlertEngine sharedInstance];
  [v2 presentAlertsIfNeeded];

  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_100033084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = +[NRQueue registryDaemonQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100033120;
    v5[3] = &unk_1001655F8;
    void v5[4] = *(void *)(a1 + 32);
    [v4 dispatchAsync:v5];
  }
}

void sub_100033120(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[NRQueue registryDaemonQueue];
  id v4 = [v3 queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000331D8;
  v5[3] = &unk_1001655F8;
  void v5[4] = *(void *)(a1 + 32);
  [v2 debounceOnQueue:v4 block:v5];
}

id sub_1000331D8(uint64_t a1)
{
  BOOL v2 = +[EPNanoRegistryStatusCodeElection sharedInstance];
  id v3 = [v2 statusCode];

  id result = [*(id *)(a1 + 32) managedConfigurationWatchDisabled];
  if (v3 == (id)2 && result != 0)
  {
    size_t v6 = *(void **)(a1 + 32);
    return [v6 createUnpairTransactionsWithCompletion:0];
  }
  return result;
}

uint64_t sub_100033614(uint64_t a1)
{
  BOOL v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138412546;
      uint64_t v9 = v5;
      __int16 v10 = 2048;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Updating token %@ with value %lld", (uint8_t *)&v8, 0x16u);
    }
  }
  notify_set_state(*(_DWORD *)(a1 + 48), *(void *)(a1 + 40));
  return notify_post((const char *)[*(id *)(a1 + 32) UTF8String]);
}

uint64_t sub_1000338F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100033B94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 deviceCollection];
  uint64_t v5 = [v4 activeDevice];
  uint64_t v6 = [v5 objectForKeyedSubscript:NRDevicePropertyIsPaired];
  uint64_t v7 = [v6 value];
  uint64_t v27 = a1;
  if ([v7 BOOLValue])
  {
    int v8 = [v3 deviceCollection];
    uint64_t v9 = [v8 activeDevice];
    uint64_t v10 = NRDevicePropertyPairingID;
    uint64_t v11 = [v9 objectForKeyedSubscript:NRDevicePropertyPairingID];
    size_t v12 = [v11 value];
    uint64_t v13 = v12 != 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v10 = NRDevicePropertyPairingID;
  }

  BOOL v14 = [v3 deviceCollection];
  id v15 = [v14 activeDevice];
  id v16 = [v15 objectForKeyedSubscript:v10];
  long long v17 = [v16 value];
  id v28 = v3;
  if (v17)
  {
    BOOL v18 = [v3 deviceCollection];
    long long v19 = [v18 activeDevice];
    long long v20 = [v19 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
    long long v21 = [v20 value];
    unsigned int v22 = [v21 BOOLValue];

    if (v22) {
      uint64_t v13 = 2;
    }
  }

  id v23 = [*(id *)(*(void *)(v27 + 32) + 144) serviceFromClass:objc_opt_class()];
  id v24 = [v23 enableNanoDaemons:v13 didEnable:0];
  if (*(void *)(v27 + 40))
  {
    uint64_t v25 = +[NRQueue registryDaemonQueue];
    id v26 = [v25 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100033E44;
    block[3] = &unk_100165D10;
    id v30 = *(id *)(v27 + 40);
    dispatch_async(v26, block);
  }
}

uint64_t sub_100033E44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100033F9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned int v7 = [v5 paired];
  if (!v7)
  {
    int v8 = 0;
    goto LABEL_24;
  }
  int v8 = [v5 activeDeviceID];
  if (!v8)
  {
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v9 = [v5 objectForKeyedSubscript:v8];
  uint64_t v10 = [v9 objectForKeyedSubscript:NRDevicePropertyIsPaired];
  uint64_t v11 = [v10 value];

  if (([v11 BOOLValue] & 1) == 0)
  {
LABEL_7:
    unsigned int v35 = v7;
    long long v40 = v8;
    uint64_t v36 = a1;
    id v37 = v6;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v38 = v5;
    id v12 = v5;
    id v13 = [v12 countByEnumeratingWithState:&v45 objects:v53 count:16];
    if (v13)
    {
      id v14 = v13;
      id v15 = 0;
      uint64_t v41 = *(void *)v46;
      uint64_t v16 = NRDevicePropertyIsPaired;
      uint64_t v39 = NRDevicePropertyLastActiveDate;
      do
      {
        long long v17 = 0;
        BOOL v18 = v11;
        do
        {
          if (*(void *)v46 != v41) {
            objc_enumerationMutation(v12);
          }
          long long v19 = *(void **)(*((void *)&v45 + 1) + 8 * (void)v17);
          long long v20 = [v12 objectForKeyedSubscript:v19];
          long long v21 = [v20 objectForKeyedSubscript:v16];
          uint64_t v11 = [v21 value];

          if ([v11 BOOLValue])
          {
            unsigned int v22 = [v12 objectForKeyedSubscript:v19];
            id v23 = [v22 objectForKeyedSubscript:v39];
            id v24 = [v23 value];

            if (!v15 || v24 && [v24 compare:v15] == (id)1)
            {
              id v25 = v24;

              id v26 = v19;
              id v15 = v25;
              long long v40 = v26;
            }
          }
          long long v17 = (char *)v17 + 1;
          BOOL v18 = v11;
        }
        while (v14 != v17);
        id v14 = [v12 countByEnumeratingWithState:&v45 objects:v53 count:16];
      }
      while (v14);
    }
    else
    {
      id v15 = 0;
    }

    id v6 = v37;
    id v5 = v38;
    a1 = v36;
    int v8 = v40;
    unsigned int v7 = v35;
  }

LABEL_24:
  uint64_t v27 = nr_daemon_log();
  BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);

  if (v28)
  {
    BOOL v29 = nr_daemon_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v30 = "YES";
      }
      else {
        id v30 = "NO";
      }
      unsigned __int8 v31 = [v8 UUIDString];
      *(_DWORD *)long long buf = 136315394;
      id v50 = v30;
      __int16 v51 = 2112;
      id v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "ensureActiveDevice: deviceCollection.isPaired=%s MRUDeviceID=%@", buf, 0x16u);
    }
  }
  id v32 = +[NRQueue registryDaemonQueue];
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_100034384;
  v42[3] = &unk_100165A70;
  id v33 = *(id *)(a1 + 32);
  id v43 = v8;
  id v44 = v33;
  id v34 = v8;
  [v32 dispatchAsync:v42];
}

uint64_t sub_100034384(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100034538(id a1, NRMutableDeviceCollection *a2, NRSecureDevicePropertyStore *a3)
{
}

void sub_100034938(uint64_t a1, void *a2)
{
  id v3 = [a2 remoteObjectProxy];
  [v3 xpcDeviceID:*(void *)(a1 + 32) needsPasscode:*(void *)(a1 + 40)];
}

void sub_1000350A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000350D0(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    *(void *)long long buf = 0;
    id v13 = buf;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_100023880;
    uint64_t v16 = sub_100023890;
    id v17 = 0;
    id v4 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10003529C;
    v11[3] = &unk_100166D08;
    void v11[4] = buf;
    [v4 grabRegistryWithReadBlock:v11];
    if (([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) isEqual:*((void *)v13 + 5)] & a2) == 1)
    {
      id v5 = (id *)*(id *)(a1 + 40);
      id v6 = v5;
      if (v5)
      {
        unsigned int v7 = [v5[18] serviceFromClass:objc_opt_class()];
        [v7 propertiesSent];
      }
    }
    _Block_object_dispose(buf, 8);
  }
  else if ((a2 & 1) == 0)
  {
    int v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      uint64_t v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Property update failed to send", buf, 2u);
      }
    }
  }
}

void sub_100035280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003529C(uint64_t a1, void *a2)
{
  id v7 = [a2 activeDevice];
  id v3 = [v7 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  uint64_t v4 = [v3 value];
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t sub_10003540C(uint64_t a1, void *a2, void *a3)
{
  id v28 = a2;
  id v29 = a3;
  uint64_t v5 = +[NSMutableDictionary dictionary];
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v31 = a1;
  id obj = *(id *)(a1 + 32);
  id v6 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v35;
    uint64_t v9 = NRDevicePropertyPairedDate;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v35 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v12 = [[*(id *)(v31 + 32) objectForKeyedSubscript:v11, v28];
        if ([v11 isEqual:v9])
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [v12 doubleValue];
            uint64_t v13 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");

            id v12 = (void *)v13;
          }
        }
        if (sub_10005F74C(v11))
        {
          id v14 = 0;
        }
        else
        {
          id v14 = [v29 storeSecureProperty:v12];

          id v12 = v14;
        }
        id v15 = +[NSNull null];
        unsigned __int8 v16 = [v12 isEqual:v15];

        if (v16)
        {
          id v17 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:0 andChangeType:2];
          [v5 setObject:v17 forKeyedSubscript:v11];
        }
        else
        {
          id v17 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v12];
          id v18 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v17 andChangeType:1];
          [v5 setObject:v18 forKeyedSubscript:v11];
        }
      }
      id v7 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
    }
    while (v7);
  }

  id v19 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v5];
  id v20 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v19 andChangeType:1];
  id v21 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v38 = *(void *)(v31 + 40);
  id v39 = v20;
  unsigned int v22 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
  id v23 = [v21 initWithDeviceCollectionDiffDeviceDiffs:v22];

  id v24 = [v28 applyDiff:v23];
  id v25 = +[NRQueue registryDaemonQueue];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1000357CC;
  v32[3] = &unk_100166210;
  id v26 = *(void **)(v31 + 56);
  void v32[4] = *(void *)(v31 + 48);
  id v33 = v26;
  [v25 dispatchAsync:v32];

  return 0;
}

uint64_t sub_1000357CC(uint64_t a1)
{
  --*(void *)(*(void *)(a1 + 32) + 272);
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 272))
  {
    id v3 = *(void **)(v2 + 264);
    *(void *)(v2 + 264) = 0;
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(result + 16);
    return v5();
  }
  return result;
}

void sub_100035994(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v30 = +[NSMutableArray array];
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    uint64_t v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      id v40 = [v2 count];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Checking %lu devices in the registry for any unexpected devices", buf, 0xCu);
    }
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v6 = v2;
  id v7 = [v6 countByEnumeratingWithState:&v35 objects:v45 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v31 = *(void *)v36;
    uint64_t v9 = _NRDevicePropertyCompatibilityState;
    uint64_t v10 = _NRDevicePropertyBluetoothIdentifier;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v36 != v31) {
          objc_enumerationMutation(v6);
        }
        id v12 = [v6 objectForKeyedSubscript:*(void *)(*((void *)&v35 + 1) + 8 * (void)v11)];
        uint64_t v13 = [v12 objectForKeyedSubscript:v9];
        id v14 = [v13 value];

        id v15 = [v12 objectForKeyedSubscript:v10];
        unsigned __int8 v16 = [v15 value];

        if (([v12 isPaired] & 1) != 0 || objc_msgSend(v14, "integerValue"))
        {
          id v17 = nr_daemon_log();
          BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

          if (v18)
          {
            id v19 = nr_daemon_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v40 = v16;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Not removing UUID: %@", buf, 0xCu);
            }
          }
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            [v30 addObject:v16];
          }
        }
        else
        {
          id v20 = nr_daemon_log();
          BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

          if (v21)
          {
            unsigned int v22 = nr_daemon_log();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              unsigned int v23 = [v12 isPaired];
              id v24 = [v14 integerValue];
              *(_DWORD *)long long buf = 138412802;
              id v40 = v16;
              __int16 v41 = 1024;
              unsigned int v42 = v23;
              __int16 v43 = 2048;
              id v44 = v24;
              _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Unexpected device with UUID %@ (isPaired = %{BOOL}d, compatibilityStateNumber = %ld), leaving out of known devices.", buf, 0x1Cu);
            }
          }
        }

        uint64_t v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      id v25 = [v6 countByEnumeratingWithState:&v35 objects:v45 count:16];
      id v8 = v25;
    }
    while (v25);
  }

  id v26 = +[NRQueue registryDaemonQueue];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_100035DAC;
  v32[3] = &unk_100166838;
  uint64_t v27 = *(void **)(a1 + 40);
  void v32[4] = *(void *)(a1 + 32);
  id v33 = v30;
  id v34 = v27;
  id v28 = v30;
  [v26 dispatchAsync:v32];
}

void sub_100035DAC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  BOOL v4 = +[NRQueue registryDaemonQueue];
  uint64_t v5 = [v4 queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100035E7C;
  v6[3] = &unk_100166D80;
  id v7 = *(id *)(a1 + 48);
  [v2 purgeIDSPairedDevicesExceptFor:v3 withQueue:v5 andCompletion:v6];
}

uint64_t sub_100035E7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000360E8(void *a1)
{
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)(a1[6] + 8) + 40), 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = (void *)a1[5];
    if (v1)
    {
      id v2 = a1[4];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100036194;
      block[3] = &unk_100165D10;
      id v4 = v1;
      dispatch_async(v2, block);
    }
  }
}

uint64_t sub_100036194(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000361A8(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v23 = a3;
  uint64_t v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "purgeIDSPairedDevicesExceptFor: IDSDeleterBlock", buf, 2u);
    }
  }
  if (v23)
  {
    id v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);

    if (v9)
    {
      uint64_t v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000F79D8(v23, v10);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    BOOL v21 = +[NSMutableSet setWithArray:v22];
    uint64_t v11 = +[NSSet setWithArray:*(void *)(a1 + 32)];
    [v21 minusSet:v11];

    if ([v21 count])
    {
      *(void *)long long buf = 0;
      id v34 = buf;
      uint64_t v35 = 0x3020000000;
      unsigned int v36 = 0;
      unsigned int v36 = [v21 count];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id obj = v21;
      id v12 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v30;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v30 != v13) {
              objc_enumerationMutation(obj);
            }
            id v15 = *(void **)(*((void *)&v29 + 1) + 8 * i);
            unsigned __int8 v16 = nr_daemon_log();
            BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

            if (v17)
            {
              BOOL v18 = nr_daemon_log();
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                id v19 = [v15 UUIDString];
                *(_DWORD *)long long v37 = 138543362;
                long long v38 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "purgeIDSPairedDevicesExceptFor: Deleting unwanted IDS device %{public}@", v37, 0xCu);
              }
            }
            id v20 = *(NSObject **)(a1 + 40);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_100036580;
            block[3] = &unk_100166DF8;
            void block[4] = v15;
            id v28 = buf;
            id v27 = *(id *)(a1 + 56);
            id v26 = *(id *)(a1 + 48);
            dispatch_async(v20, block);
          }
          id v12 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
        }
        while (v12);
      }

      _Block_object_dispose(buf, 8);
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
}

void sub_100036550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_100036580(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  id v1 = (id)v2;
  IDSLocalPairingDeletePairedDevice();
}

void sub_100036624(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int add = atomic_fetch_add((atomic_uint *volatile)(*(void *)(*(void *)(a1 + 48) + 8) + 40), 0xFFFFFFFF);
  if (v3)
  {
    uint64_t v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F7A68(v3, a1);
      }
    }
  }
  if (add == 1) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1000366E0()
{
  IDSLocalPairingGetPairedDevicesWithCompletionBlock();

  return IDSLocalPairingGetPairingDevicesWithCompletionBlock();
}

void sub_100036980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000369A8(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_100036BC8(uint64_t a1, uint64_t a2)
{
  return 0;
}

void sub_10003757C(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDeviceID];
  id v4 = [*(id *)(a1 + 32) pairingID];
  unsigned int v5 = [v3 isEqual:v4];

  if (v5)
  {
    BOOL v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      id v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v24 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sync after software update for device %@", buf, 0xCu);
      }
    }
    uint64_t v10 = objc_opt_new();
    uint64_t v11 = [EPRoutingSlipEntry alloc];
    uint64_t v12 = [v3 UUIDString];
    uint64_t v13 = (void *)v12;
    if (v12) {
      CFStringRef v14 = (const __CFString *)v12;
    }
    else {
      CFStringRef v14 = @"none";
    }
    id v15 = [@"checkForSyncAfterSoftwareUpdate-" stringByAppendingString:v14];
    uint64_t v16 = objc_opt_class();
    BOOL v17 = [[EPSagaOperandUUID alloc] initWithUUID:v3, @"nrDeviceIdentifier"];
    id v22 = v17;
    BOOL v18 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    id v19 = [(EPRoutingSlipEntry *)v11 initWithName:v15 transactionClass:v16 operands:v18];
    [v10 setEntry:v19];

    [v10 setRunningStatusCode:2];
    [v10 setOperationType:@"reunionSync"];
    [v10 setTargetPairingID:v3];
    id v20 = [*(id *)(*(void *)(a1 + 40) + 144) serviceFromClass:objc_opt_class()];
    [v20 addTransaction:v10];
  }
}

void sub_1000378B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NRQueue registryDaemonQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100037978;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 32);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 dispatchAsync:v7];
}

uint64_t sub_100037978(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100037A30(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[NSMutableDictionary dictionary];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v22;
    uint64_t v8 = NRDevicePropertyAdvertisedName;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v11 = [v4 objectForKeyedSubscript:v10];
        uint64_t v12 = [v11 objectForKeyedSubscript:v8];
        uint64_t v13 = [v12 value];

        if (v13)
        {
          CFStringRef v14 = [*(id *)(*(void *)(a1 + 32) + 472) objectForKeyedSubscript:v13];
          if (v14)
          {
            if (([v11 isActive] & 1) == 0
              && ([v11 isPaired] & 1) == 0
              && ([v11 isArchived] & 1) == 0)
            {
              [v14 timeIntervalSinceNow];
              if (v15 > 65.0 || v15 < -65.0)
              {
                id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:0 andChangeType:2];
                [v3 setObject:v19 forKeyedSubscript:v10];
              }
            }
          }
        }
        id v16 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v3];
        id v17 = [v4 applyDiff:v16];
      }
      id v6 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v6);
  }

  return 0;
}

uint64_t sub_100037D14(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[NSMutableDictionary dictionary];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    uint64_t v8 = NRDevicePropertyAdvertisedName;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        uint64_t v11 = [v4 objectForKeyedSubscript:v10];
        uint64_t v12 = [v11 objectForKeyedSubscript:v8];
        uint64_t v13 = [v12 value];

        if (v13
          && [v13 isEqual:*(void *)(a1 + 32)]
          && ([v11 isActive] & 1) == 0
          && ([v11 isPaired] & 1) == 0
          && ([v11 isArchived] & 1) == 0)
        {
          id v14 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:0 andChangeType:2];
          [v3 setObject:v14 forKeyedSubscript:v10];
        }
        id v15 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v3];
        id v16 = [v4 applyDiff:v15];
      }
      id v6 = [v4 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v6);
  }

  return 0;
}

void sub_10003815C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = *(void **)(*(void *)(a1 + 32) + 472);
  id v6 = a2;
  [v5 setObject:v3 forKeyedSubscript:v4];
  uint64_t v7 = [v6 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 248)];

  uint64_t v8 = [v7 objectForKeyedSubscript:NRDevicePropertyPairingID];
  id v9 = [v8 value];

  uint64_t v10 = [v7 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
  uint64_t v11 = [v10 value];

  uint64_t v12 = [v7 objectForKeyedSubscript:_NRDevicePropertyRSSI];
  uint64_t v13 = [v12 value];

  id v14 = *(void **)(a1 + 40);
  if (!v14 || ![v14 isEqual:v11])
  {
    id v16 = nr_daemon_log();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

    if (v17)
    {
      BOOL v18 = nr_daemon_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v19;
        __int16 v22 = 2114;
        long long v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "advertised name %@ from Bluetooth doesn't match device we're looking for %{public}@ (ignoring)", (uint8_t *)&v20, 0x16u);
      }
    }
    goto LABEL_11;
  }
  if (([*(id *)(*(void *)(a1 + 32) + 216) containsObject:*(void *)(a1 + 40)] & 1) != 0
    && v13
    && !sub_10009C5F8((uint64_t)[v13 integerValue], (uint64_t)objc_msgSend(*(id *)(a1 + 56), "integerValue")))
  {
LABEL_11:
    id v15 = 0;
    goto LABEL_12;
  }
  id v15 = v9;
LABEL_12:
  [*(id *)(a1 + 32) _upsertDeviceDiscoveredBy:1 pairingID:v15 advertisedName:*(void *)(a1 + 40) bluetoothDeviceID:*(void *)(a1 + 64) rssiValue:*(void *)(a1 + 80) withBlock:*(void *)(a1 + 72)];
}

void sub_1000383AC(uint64_t a1, void *a2)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    uint64_t v7 = NRDevicePropertyAdvertisedName;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v18 != v6) {
        objc_enumerationMutation(v3);
      }
      id v9 = *(void **)(*((void *)&v17 + 1) + 8 * v8);
      uint64_t v10 = [v3 objectForKeyedSubscript:v9];
      uint64_t v11 = [v10 objectForKeyedSubscript:v7];
      uint64_t v12 = [v11 value];

      if (([v10 isPaired] & 1) == 0
        && ([v12 isEqual:*(void *)(a1 + 32)] & 1) != 0)
      {
        break;
      }

      if (v5 == (id)++v8)
      {
        id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }
    id v14 = v9;
    id v15 = [v10 objectForKeyedSubscript:_NRDevicePropertyRSSI];
    uint64_t v13 = [v15 value];

    if (!v14) {
      goto LABEL_16;
    }
    if (([*(id *)(*(void *)(a1 + 40) + 216) containsObject:*(void *)(a1 + 32)] & 1) != 0
      && v13
      && !sub_10009C5F8((uint64_t)[v13 integerValue], (uint64_t)objc_msgSend(*(id *)(a1 + 48), "integerValue")))
    {
      id v16 = 0;
    }
    else
    {
      id v14 = v14;
      id v16 = v14;
    }
  }
  else
  {
LABEL_10:

    uint64_t v13 = 0;
LABEL_16:
    id v16 = +[NSUUID UUID];
    id v14 = 0;
  }
  [*(id *)(a1 + 40) _upsertDeviceDiscoveredBy:1 pairingID:v16 advertisedName:*(void *)(a1 + 32) bluetoothDeviceID:*(void *)(a1 + 56) rssiValue:*(void *)(a1 + 72) withBlock:*(void *)(a1 + 64)];
}

void sub_100038704(uint64_t a1, void *a2)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    uint64_t v7 = NRDevicePropertyAdvertisedName;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v16 != v6) {
        objc_enumerationMutation(v3);
      }
      id v9 = *(void **)(*((void *)&v15 + 1) + 8 * v8);
      uint64_t v10 = [v3 objectForKeyedSubscript:v9];
      uint64_t v11 = [v10 objectForKeyedSubscript:v7];
      uint64_t v12 = [v11 value];

      if (([v10 isPaired] & 1) == 0
        && ([v12 isEqual:*(void *)(a1 + 32)] & 1) != 0)
      {
        break;
      }

      if (v5 == (id)++v8)
      {
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_10;
      }
    }
    id v13 = v9;

    if (!v13) {
      goto LABEL_14;
    }
    if ([*(id *)(*(void *)(a1 + 40) + 216) containsObject:*(void *)(a1 + 32)])
    {
      id v14 = 0;
    }
    else
    {
      id v13 = v13;
      id v14 = v13;
    }
  }
  else
  {
LABEL_10:

LABEL_14:
    id v14 = +[NSUUID UUID];
    id v13 = 0;
  }
  [*(id *)(a1 + 40) _upsertDeviceDiscoveredBy:2 pairingID:v14 advertisedName:*(void *)(a1 + 32) bluetoothDeviceID:*(void *)(a1 + 48) rssiValue:*(void *)(a1 + 64) withBlock:*(void *)(a1 + 56)];
}

uint64_t sub_100038B60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100038B74(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(*(void *)(a1 + 32) + 216) addObject:*(void *)(a1 + 40)];
  id v4 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v5 = objc_alloc((Class)NRDevicePropertyDiff);
  uint64_t v6 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  id v7 = [v5 initWithValue:v6];
  id v59 = [v4 initWithDiff:v7 andChangeType:1];

  uint64_t v8 = objc_opt_new();
  [v8 timeIntervalSinceReferenceDate];
  double v10 = v9;

  id v11 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v12 = objc_alloc((Class)NRDevicePropertyDiff);
  id v13 = +[NSNumber numberWithDouble:v10];
  id v14 = [v12 initWithValue:v13];
  id v58 = [v11 initWithDiff:v14 andChangeType:1];

  id v15 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 40)];
  id v17 = [v15 initWithDiff:v16 andChangeType:1];

  id v18 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v19 = objc_alloc((Class)NRDevicePropertyDiff);
  long long v20 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 80)];
  id v21 = [v19 initWithValue:v20];
  id v22 = [v18 initWithDiff:v21 andChangeType:1];

  id v23 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v24 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 48)];
  id v25 = [v23 initWithDiff:v24 andChangeType:1];

  id v26 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v27 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 56)];
  id v28 = [v26 initWithDiff:v27 andChangeType:1];

  id v29 = objc_alloc((Class)NSMutableDictionary);
  id v55 = v28;
  long long v56 = v25;
  long long v57 = v17;
  id v30 = [v29 initWithObjectsAndKeys:v17, NRDevicePropertyAdvertisedName, v25, _NRDevicePropertyBluetoothIdentifier, v28, NRDevicePropertyPairingID, v22, _NRDevicePropertyDiscoveryMechanism, 0];
  long long v31 = [v3 objectForKeyedSubscript:*(void *)(a1 + 56)];
  uint64_t v32 = _NRDevicePropertyRSSI;
  id v33 = [v31 objectForKeyedSubscript:_NRDevicePropertyRSSI];
  id v34 = [v33 value];

  uint64_t v35 = [v3 objectForKeyedSubscript:*(void *)(a1 + 56)];
  uint64_t v36 = _NRDevicePropertyLastRSSIUpdate;
  long long v37 = [v35 objectForKeyedSubscript:_NRDevicePropertyLastRSSIUpdate];
  long long v38 = [v37 value];

  uint64_t v39 = *(void *)(a1 + 72);
  id v40 = [v34 integerValue];
  [v38 doubleValue];
  if (sub_10009C5CC(v39, (uint64_t)v40, v10, v41))
  {
    unsigned int v42 = nr_daemon_log();
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);

    if (v43)
    {
      id v44 = nr_daemon_log();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v54 = *(void *)(a1 + 40);
        long long v45 = [*(id *)(a1 + 56) UUIDString];
        *(_DWORD *)long long buf = 138543618;
        uint64_t v66 = v54;
        __int16 v67 = 2114;
        id v68 = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Updating or creating device %{public}@ %{public}@", buf, 0x16u);
      }
    }
    [v30 setObject:v59 forKeyedSubscript:v32];
    [v30 setObject:v58 forKeyedSubscript:v36];
  }
  id v46 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v30];
  id v47 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v63 = *(void *)(a1 + 56);
  id v48 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v46 andChangeType:0];
  id v64 = v48;
  id v49 = +[NSDictionary dictionaryWithObjects:&v64 forKeys:&v63 count:1];
  id v50 = [v47 initWithDeviceCollectionDiffDeviceDiffs:v49];

  id v51 = [v3 applyDiff:v50];
  id v52 = +[NRQueue registryDaemonQueue];
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_100039138;
  v60[3] = &unk_100165A70;
  id v62 = *(id *)(a1 + 64);
  id v61 = *(id *)(a1 + 56);
  [v52 dispatchAsync:v60];

  return 0;
}

uint64_t sub_100039138(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_100039334(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v4 = [v3 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
  id v5 = [v4 value];

  uint64_t v6 = nr_daemon_log();
  LODWORD(v4) = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      double v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "advertisedName=%@", (uint8_t *)&v8, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

unsigned char *sub_10003969C(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 248), *(id *)(a1 + 40));
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)double v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Making the call to Bluetooth central scanForPeripheralsWithServices", v10, 2u);
    }
  }
  id v5 = *(void **)(*(void *)(a1 + 32) + 120);
  uint64_t v6 = +[CBUUID UUIDWithString:@"9AA4730F-B25C-4CC3-B821-C931559FC196"];
  id v13 = v6;
  id v7 = +[NSArray arrayWithObjects:&v13 count:1];
  id v11 = CBCentralManagerScanOptionAllowDuplicatesKey;
  id v12 = &__kCFBooleanTrue;
  int v8 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
  [v5 scanForPeripheralsWithServices:v7 options:v8];

  *(unsigned char *)(*(void *)(a1 + 32) + 38) = 1;
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (result[32]) {
    return [result _beginNetworkRelayDiscovery];
  }
  return result;
}

uint64_t sub_10003984C(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) _cleanUpDiscoveredDevicesWithCollection:a2];
  BOOL v3 = +[NRQueue registryDaemonQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100039900;
  v5[3] = &unk_100165D10;
  id v6 = *(id *)(a1 + 40);
  [v3 dispatchAsync:v5];

  return 0;
}

uint64_t sub_100039900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100039B3C(uint64_t a1, void *a2)
{
  id v3 = [a2 remoteObjectProxy];
  [v3 xpcHasNewOOBKey:*(void *)(a1 + 32)];
}

void sub_10003A35C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDevice];
  id v5 = [v4 objectForKeyedSubscript:_NRDevicePropertyCompatibilityState];
  id v6 = [v5 value];

  id v7 = nr_daemon_log();
  int v8 = v7;
  if (v6)
  {
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      double v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = [v3 activeDevice];
        id v12 = [v11 pairingID];
        *(_DWORD *)long long buf = 136446722;
        long long v20 = "-[NRPairingDaemon updateTrafficClass]_block_invoke";
        __int16 v21 = 2114;
        id v22 = v12;
        __int16 v23 = 2112;
        id v24 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s: Setting compatibility state for %{public}@ to %@", buf, 0x20u);
      }
    }
    id v13 = +[NRQueue registryDaemonQueue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_10003A598;
    v16[3] = &unk_100165868;
    void v16[4] = *(void *)(a1 + 32);
    id v17 = v6;
    id v18 = *(id *)(a1 + 40);
    [v13 dispatchAsync:v16];
  }
  else
  {
    BOOL v14 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v14)
    {
      id v15 = nr_daemon_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1000F7B14(v3);
      }
    }
  }
}

void sub_10003A598(id *a1)
{
  [a1[4] getTrafficClassifiersForCompatibilityState:(unsigned __int16)[a1[5] integerValue]];
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = objc_opt_new();
  [v2 setTrafficClasses:v3];
  [a1[6] updateTrafficClassesWithClasses:v2];
}

void sub_10003A7A8(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDeviceID];
  if (v3)
  {
    id v4 = objc_opt_new();
    [v4 submitPairingReportWithRegistry:*(void *)(a1 + 32) deviceID:v3];
  }
  else
  {
    id v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (!v6) {
      goto LABEL_4;
    }
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Albert pairing reporter submission requested from pairtool but no active device is present", v7, 2u);
    }
  }

LABEL_4:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10003AAA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_7;
  }
  id v7 = [v5 objectForKeyedSubscript:];
  if (![v7 isAltAccount])
  {

LABEL_7:
    id v25 = +[NRQueue registryDaemonQueue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10003AE20;
    v27[3] = &unk_100165D10;
    id v28 = *(id *)(a1 + 56);
    [v25 dispatchAsync:v27];

    id v7 = v28;
    goto LABEL_8;
  }
  int v8 = +[NSMutableDictionary dictionary];
  BOOL v9 = [*(id *)(a1 + 40) lowercaseString];
  double v10 = [v6 storeSecureProperty:v9];

  id v11 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v12 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v10];
  id v13 = [v11 initWithDiff:v12 andChangeType:1];
  [v8 setObject:v13 forKeyedSubscript:_NRDevicePropertyPairingParentAccountIdentifier];

  if (*(void *)(a1 + 48))
  {
    BOOL v14 = [v6 storeSecureProperty:];
    id v15 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v14];
    id v17 = [v15 initWithDiff:v16 andChangeType:1];
    [v8 setObject:v17 forKeyedSubscript:_NRDevicePropertyPairingParentAltDSID];
  }
  id v18 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v8];
  id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v18 andChangeType:1];
  id v20 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v31 = *(void *)(a1 + 32);
  id v32 = v19;
  __int16 v21 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
  id v22 = [v20 initWithDeviceCollectionDiffDeviceDiffs:v21];

  id v23 = [v5 applyDiff:v22];
  id v24 = +[NRQueue registryDaemonQueue];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10003AE0C;
  v29[3] = &unk_100165D10;
  id v30 = *(id *)(a1 + 56);
  [v24 dispatchAsync:v29];

LABEL_8:
  return 0;
}

uint64_t sub_10003AE0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003AE20(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003AF3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_7;
  }
  id v7 = [v5 objectForKeyedSubscript:];
  if (![v7 isAltAccount])
  {

LABEL_7:
    id v25 = +[NRQueue registryDaemonQueue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_10003B2B4;
    v27[3] = &unk_100165D10;
    id v28 = *(id *)(a1 + 56);
    [v25 dispatchAsync:v27];

    id v7 = v28;
    goto LABEL_8;
  }
  int v8 = +[NSMutableDictionary dictionary];
  BOOL v9 = [*(id *)(a1 + 40) lowercaseString];
  double v10 = [v6 storeSecureProperty:v9];

  id v11 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v12 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v10];
  id v13 = [v11 initWithDiff:v12 andChangeType:1];
  [v8 setObject:v13 forKeyedSubscript:_NRDevicePropertyAltAccountIdentifier];

  if (*(void *)(a1 + 48))
  {
    BOOL v14 = [v6 storeSecureProperty:];
    id v15 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v14];
    id v17 = [v15 initWithDiff:v16 andChangeType:1];
    [v8 setObject:v17 forKeyedSubscript:_NRDevicePropertyAltAccountAltDSID];
  }
  id v18 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v8];
  id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v18 andChangeType:1];
  id v20 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v31 = *(void *)(a1 + 32);
  id v32 = v19;
  __int16 v21 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
  id v22 = [v20 initWithDeviceCollectionDiffDeviceDiffs:v21];

  id v23 = [v5 applyDiff:v22];
  id v24 = +[NRQueue registryDaemonQueue];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_10003B2A0;
  v29[3] = &unk_100165D10;
  id v30 = *(id *)(a1 + 56);
  [v24 dispatchAsync:v29];

LABEL_8:
  return 0;
}

uint64_t sub_10003B2A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003B2B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003B450(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10003BB98(uint64_t a1, int a2)
{
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (a2)
  {
    if (v5)
    {
      id v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "xpcWatchBuddyCompletedSetupSteps removing proxy from pairing client", buf, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 47) = 0;
    *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
    [*(id *)(*(void *)(a1 + 32) + 376) removeAllObjects];
  }
  else if (v5)
  {
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "xpcWatchBuddyCompletedSetupSteps skipping update", v9, 2u);
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_10003BCCC(uint64_t a1, void *a2)
{
  id v7 = [a2 activeDevice];
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6F13FF03-6511-4180-BBF3-4C231C10D458"];
  unsigned int v4 = [v7 supportsCapability:v3];

  if (v4)
  {
    BOOL v5 = [v7 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
    id v6 = [v5 value];

    *(unsigned char *)(*(void *)(a1 + 32) + 34) = v6 == 0;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  [*(id *)(a1 + 32) _queueMarkDeviceIsSetup:v7];
}

uint64_t sub_10003BF34(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (v4)
  {
    BOOL v5 = +[NSMutableDictionary dictionary];
    uint64_t v6 = NRDevicePropertyWatchBuddyStage;
    id v7 = [v4 objectForKeyedSubscript:NRDevicePropertyWatchBuddyStage];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    unsigned int v9 = 0;
    if ((isKindOfClass & 1) != 0 && v7) {
      unsigned int v9 = [v7 unsignedIntValue];
    }
    uint64_t v10 = *(_DWORD *)(a1 + 40) | v9;
    id v11 = nr_daemon_log();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

    if (v12)
    {
      id v13 = nr_daemon_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        id v28 = "-[NRPairingDaemon xpcUpdateWatchBuddyStage:forPairingID:]_block_invoke";
        __int16 v29 = 1026;
        int v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s updating effective value: %{public}x", buf, 0x12u);
      }
    }
    BOOL v14 = +[NSNumber numberWithUnsignedInt:v10];
    id v15 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v14];
    id v17 = [v15 initWithDiff:v16 andChangeType:1];
    [v5 setObject:v17 forKeyedSubscript:v6];

    id v18 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v5];
    id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v18 andChangeType:1];
    id v20 = objc_alloc((Class)NRDeviceCollectionDiff);
    uint64_t v25 = *(void *)(a1 + 32);
    id v26 = v19;
    __int16 v21 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    id v22 = [v20 initWithDeviceCollectionDiffDeviceDiffs:v21];

    id v23 = [v3 applyDiff:v22];
  }

  return 0;
}

id sub_10003CE30(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginDiscovery:1 withDeviceIDToDiscover:*(void *)(*(void *)(a1 + 32) + 248)];
}

uint64_t sub_10003D028(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10003D2DC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 392) removeObject:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 408) removeObject:*(void *)(a1 + 40)];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 removeAssertionsForProxy:v3];
}

void sub_10003D618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003D644(id *a1)
{
  id v2 = a1[4];
  [*((id *)a1[5] + 49) removeObject:v2];
  uint64_t v3 = (void *)*((void *)a1[5] + 47);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10003D810;
  v8[3] = &unk_100166FF0;
  objc_copyWeak(&v10, a1 + 6);
  void v8[4] = a1[5];
  id v4 = v2;
  id v9 = v4;
  [v3 removeObject:v4 withCleanupBlock:v8];
  BOOL v5 = (void *)*((void *)a1[5] + 48);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003D984;
  v6[3] = &unk_100167018;
  objc_copyWeak(&v7, a1 + 6);
  void v6[4] = a1[5];
  [v5 removeObject:v4 withCleanupBlock:v6];
  [*((id *)a1[5] + 51) removeObject:v4];
  [a1[5] removeAssertionsForProxy:v4];
  objc_destroyWeak(&v7);

  objc_destroyWeak(&v10);
}

void sub_10003D7E8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10003D810(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    if (WeakRetained)
    {
      id v4 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
      BOOL v5 = [v4 getResumableForRunningOperationType:@"pair"];
      unsigned int v6 = [v5 BOOLValue];
      id v7 = nr_daemon_log();
      BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

      if (v6)
      {
        if (v8)
        {
          id v9 = nr_daemon_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "XPC interruption on connection to pairing client, app monitoring disabled, doing nothing", buf, 2u);
          }
        }
      }
      else
      {
        if (v8)
        {
          id v10 = nr_daemon_log();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id v11 = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XPC interruption on connection to pairing client, possibly unpairing", v11, 2u);
          }
        }
        [WeakRetained handleDeadPairingClient:*(void *)(a1 + 40)];
      }
    }
  }
}

void sub_10003D984(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained && a2)
  {
    BOOL v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "XPC interruption on connection to switching client, canceling associated switch", v10, 2u);
      }
    }
    BOOL v8 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
    id v9 = nrGetPairingError();
    [v8 cancelWithOperationType:@"tinkerExternalSwitch" error:v9];
  }
}

uint64_t sub_10003DC38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 520);
  *(void *)(v2 + 520) = 0;

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

void sub_10003DD54(uint64_t a1)
{
  id v1 = *(NSObject **)(*(void *)(a1 + 32) + 520);
  if (v1)
  {
    dispatch_source_cancel(v1);
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

    if (v3)
    {
      id v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        sub_1000F7D34(v4, v5, v6, v7, v8, v9, v10, v11);
      }
    }
  }
}

void sub_10003E3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
  objc_destroyWeak(v12);
  objc_destroyWeak(v11);
  objc_destroyWeak(v10);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v13 - 112));
  _Unwind_Resume(a1);
}

void sub_10003E430(uint64_t a1, void *a2)
{
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [*(id *)(a1 + 32) updateShouldMonitorProxy:v4];
  }
}

void sub_10003E494(id a1)
{
  id v1 = +[NetworkRelayAgent sharedInstance];
  [v1 setHasPairingClients:1];
}

void sub_10003E4E0(id a1)
{
  id v1 = +[NetworkRelayAgent sharedInstance];
  [v1 setHasPairingClients:0];
  [v1 invalidatePairingManagerIfIdle];
}

void sub_10003E534(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained startPushing];
}

void sub_10003E574(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained stopPushing];
}

void sub_10003E5B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained forceEndDiscovery];
}

void sub_10003E5F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained forceEndAdvertising];
}

void sub_10003E7F4(id a1)
{
  id v1 = nr_daemon_log();
  BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    BOOL v3 = nr_daemon_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Checking for standalone mode...", buf, 2u);
    }
  }
  id v4 = (void *)CFPreferencesCopyAppValue(@"Magnet", @"com.apple.MobileBluetooth.debug");
  id v5 = [v4 mutableCopy];

  uint64_t v6 = [v5 objectForKeyedSubscript:@"DisableWatchConnection"];
  if (v6)
  {
    uint64_t v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Standalone mode found, disabling.", v13, 2u);
      }
    }
    [v5 removeObjectForKey:@"DisableWatchConnection"];
    CFPreferencesSetAppValue(@"Magnet", v5, @"com.apple.MobileBluetooth.debug");
    CFPreferencesAppSynchronize(@"com.apple.MobileBluetooth.debug");
    uint64_t v10 = +[NRRepeatingAlertEngine sharedInstance];
    [v10 resetStateForAlertWithName:@"StandAloneMode"];

    uint64_t v11 = +[NRRepeatingAlertEngine sharedInstance];
    [v11 setEnabled:1 withName:@"StandAloneMode"];

    BOOL v12 = +[NRRepeatingAlertEngine sharedInstance];
    [v12 presentAlertsIfNeeded];

    +[NRUnixProcessSignaler signalProcessNamed:@"bluetoothd" withSignal:9];
  }
}

void sub_10003EBE4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = +[NRQueue registryDaemonQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10003ECB4;
  v9[3] = &unk_1001670F0;
  id v7 = *(id *)(a1 + 32);
  char v12 = a2;
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  [v6 dispatchAsync:v9];
}

uint64_t sub_10003ECB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_10003EEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10003EF38(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    id v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 136315650;
      id v10 = "-[NRPairingDaemon _xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:completion:]_block_invoke";
      __int16 v11 = 2114;
      uint64_t v12 = v8;
      __int16 v13 = 2114;
      id v14 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s %{public}@ returning %{public}@", (uint8_t *)&v9, 0x20u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10003F054(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    goto LABEL_34;
  }
  BOOL v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    id v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      id v27 = "-[NRPairingDaemon _xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:completion:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: If the pusher is running right now, use that one", buf, 0xCu);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  id v2 = *(id *)(*(void *)(a1 + 32) + 320);
  if (!v2)
  {
LABEL_34:
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      id v2 = 0;
      if (![0 invalidated]) {
        goto LABEL_18;
      }
LABEL_17:
      [*(id *)(a1 + 32) stopPushing];

      goto LABEL_18;
    }
    BOOL v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      uint64_t v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        id v27 = "-[NRPairingDaemon _xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%s: If the pusher was not running, try checking the previous one", buf, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    id v2 = *(id *)(*(void *)(a1 + 32) + 328);
  }
  if ([v2 invalidated]) {
    goto LABEL_17;
  }
  if (v2)
  {
LABEL_30:
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10003F484;
    v19[3] = &unk_1001671B8;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 72);
    v19[4] = v15;
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 80);
    id v20 = v17;
    uint64_t v22 = v18;
    [v2 waitForWatchPairingExtendedMetadataForAdvertisedName:v16 completion:v19];

    goto LABEL_31;
  }
LABEL_18:
  if (!*(void *)(*(void *)(a1 + 32) + 320) && !*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    uint64_t v12 = nr_daemon_log();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

    if (v13)
    {
      id v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        id v27 = "-[NRPairingDaemon _xpcWaitForWatchPairingExtendedMetadataForAdvertisedName:completion:]_block_invoke";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s: Okay- make a new pusher and wait for results from it", buf, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
    [*(id *)(a1 + 32) startPushing];
    id v2 = *(id *)(*(void *)(a1 + 32) + 320);
    if (v2) {
      goto LABEL_30;
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
    [*(id *)(a1 + 32) stopPushing];
  }
  int v9 = +[NRQueue registryDaemonQueue];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10003F42C;
  v23[3] = &unk_100167168;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 80);
  id v24 = v10;
  uint64_t v25 = v11;
  [v9 dispatchAsync:v23];

  id v2 = v24;
LABEL_31:
}

void sub_10003F42C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  BOOL v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_10003F484(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  BOOL v6 = v5;
  if (a2)
  {
    if (v5)
    {
      id v7 = (id)objc_opt_new();
      uint64_t v8 = sub_100088034((uint64_t)v6);
      [v7 setProductType:v8];

      [v7 setChipID:(int)sub_100088048((uint64_t)v6)];
      [v7 setPairingVersion:sub_100088078((uint64_t)v6)];
      [v7 setIsCellularEnabled:sub_10008808C((BOOL)v6)];
      [v7 setEncodedSystemVersion:sub_1000880A8((uint64_t)v6)];
      if ((_NRIsAutomated() & 1) == 0) {
        [v7 setPostFailsafeObliteration:sub_10008805C((BOOL)v6)];
      }
    }
    else
    {
      id v7 = 0;
    }
    BOOL v9 = sub_100087158((BOOL)v6);
    id v10 = +[NRQueue registryDaemonQueue];
    uint64_t v11 = v10;
    if (v9)
    {
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_10003F704;
      v17[3] = &unk_100167190;
      void v17[4] = *(void *)(a1 + 32);
      long long v14 = *(_OWORD *)(a1 + 40);
      id v12 = (id)v14;
      long long v19 = v14;
      id v7 = v7;
      uint64_t v13 = *(void *)(a1 + 56);
      id v18 = v7;
      uint64_t v20 = v13;
      [v11 dispatchAsync:v17];
    }
    else
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10003F770;
      v16[3] = &unk_1001657F0;
      void v16[4] = *(void *)(a1 + 56);
      [v10 dispatchAsync:v16];
    }
  }
  else
  {
    id v7 = +[NRQueue registryDaemonQueue];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_10003F788;
    v15[3] = &unk_1001657F0;
    void v15[4] = *(void *)(a1 + 56);
    [v7 dispatchAsync:v15];
  }
}

void sub_10003F704(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    [*(id *)(a1 + 32) stopPushing];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v2 = *(void *)(*(void *)(a1 + 64) + 8);
  BOOL v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

uint64_t sub_10003F770(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))();
}

uint64_t sub_10003F788(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) + 16))();
}

void sub_10003FA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003FA4C(id *a1, int a2)
{
  BOOL v4 = nr_daemon_log();
  id v5 = v4;
  if (a2)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = a1[4];
        id v9 = a1[5];
        *(_DWORD *)long long buf = 138543618;
        id v35 = v8;
        __int16 v36 = 2114;
        id v37 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "xpcCompanionOOBDiscoverAndPairWithName: advertisedName=%{public}@ options=%{public}@ Starting", buf, 0x16u);
      }
    }
    id WeakRetained = objc_loadWeakRetained(a1 + 9);
    uint64_t v11 = WeakRetained;
    if (WeakRetained)
    {
      [WeakRetained resetPhoneStateForNewPairing];
      [v11 checkAndDisableStandAloneMode];
      [v11 logIfVersionsAreOverridden];
      id v12 = +[NRDataCollector createSharedInstance];
      if ([v11 managedConfigurationWatchDisabled])
      {
        uint64_t v13 = nrGetPairingError();
        long long v14 = nr_daemon_log();
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

        if (v15)
        {
          uint64_t v16 = nr_daemon_log();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
            sub_1000F7DE0();
          }
        }
        id v17 = (void *)v11[47];
        id v18 = a1[6];
        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472;
        v31[2] = sub_10003FD9C;
        v31[3] = &unk_100167208;
        id v19 = a1[8];
        id v32 = v13;
        id v33 = v19;
        id v20 = v13;
        [v17 removeObject:v18 withCleanupBlock:v31];
      }
      else
      {
        v24[0] = _NSConcreteStackBlock;
        v24[1] = 3221225472;
        v24[2] = sub_10003FDB0;
        v24[3] = &unk_100167230;
        uint64_t v25 = v11;
        id v26 = a1[6];
        id v27 = a1[4];
        id v28 = a1[7];
        id v29 = a1[5];
        id v30 = a1[8];
        [v25 getCanPairAnotherDeviceWithCompletion:v24];

        id v20 = v25;
      }
    }
  }
  else
  {
    BOOL v21 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v21)
    {
      uint64_t v22 = nr_daemon_log();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        sub_1000F7E14();
      }
    }
    id v23 = (void (**)(id, void *))a1[8];
    uint64_t v11 = nrGetPairingError();
    v23[2](v23, v11);
  }
}

uint64_t sub_10003FD9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10003FDB0(uint64_t a1, int a2)
{
  if (a2)
  {
    [*(id *)(a1 + 32) removeAssertionsForProxy:*(void *)(a1 + 40)];
    id v3 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
    if (*(void *)(a1 + 48)) {
      CFStringRef v4 = *(const __CFString **)(a1 + 48);
    }
    else {
      CFStringRef v4 = @"none";
    }
    id v5 = [@"OOBPairTo-" stringByAppendingString:v4];
    if (([v3 hasTransactionType:@"pair"] & 1) == 0)
    {
      [*(id *)(a1 + 32) clearMagicSwitchAdvertisingIdentifierSeedIfNeeded];
      if (_NRIsAutomated())
      {
        id v6 = 0;
      }
      else
      {
        long long v14 = [*(id *)(a1 + 40) appPath];
        BOOL v15 = [v14 lowercaseString];
        id v6 = [v15 containsString:@"bridge"];
      }
      id v30 = [[EPOOBKey alloc] initWithData:*(void *)(a1 + 56)];
      id v29 = [*(id *)(a1 + 64) objectForKeyedSubscript:NRPairOptionGizmoPairingVersion];
      id v28 = [*(id *)(a1 + 64) objectForKeyedSubscript:NRPairOptionIsAltAccountGizmo];
      [*(id *)(*(void *)(a1 + 32) + 144) addService:v30];
      uint64_t v16 = objc_opt_new();
      id v26 = [EPRoutingSlipEntry alloc];
      uint64_t v25 = objc_opt_class();
      v37[0] = @"extensiblePairingPairingType";
      id v27 = [[EPSagaOperandString alloc] initWithString:@"extensiblePairingTypeDiscoverAndPairWithName"];
      v38[0] = v27;
      v37[1] = @"extensiblePairingAdvertisedName";
      id v24 = [[EPSagaOperandString alloc] initWithString:*(void *)(a1 + 48)];
      v38[1] = v24;
      v37[2] = @"extensiblePairingShouldFilePairingReport";
      id v17 = [EPSagaOperandNumber alloc];
      id v18 = +[NSNumber numberWithBool:v6];
      id v19 = [(EPSagaOperandNumber *)v17 initWithNumber:v18];
      v38[2] = v19;
      v37[3] = @"extensiblePairingGizmoPairingVersion";
      id v20 = [[EPSagaOperandNumber alloc] initWithNumber:v29];
      v38[3] = v20;
      uint8_t v37[4] = @"isAltAccountGizmo";
      BOOL v21 = [[EPSagaOperandNumber alloc] initWithNumber:v28];
      v38[4] = v21;
      uint64_t v22 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:5];
      id v23 = [(EPRoutingSlipEntry *)v26 initWithName:v5 transactionClass:v25 operands:v22];
      [v16 setEntry:v23];

      [v16 setRunningStatusCode:1];
      [v16 setUserInfo:*(void *)(a1 + 40)];
      [v16 setOperationType:@"pair"];
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_1000402B0;
      v34[3] = &unk_1001669F0;
      id v35 = *(id *)(a1 + 32);
      id v36 = *(id *)(a1 + 40);
      [v16 setDidEnd:v34];
      [v3 addTransaction:v16];
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v7 = nrGetPairingError();
    id v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);

    if (v9)
    {
      id v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000F7E48();
      }
    }
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(*(void *)(a1 + 32) + 376);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_10004053C;
    v31[3] = &unk_100167208;
    id v13 = *(id *)(a1 + 72);
    id v32 = v7;
    id v33 = v13;
    id v3 = v7;
    [v12 removeObject:v11 withCleanupBlock:v31];

    id v5 = v33;
  }
}

void sub_1000402B0(uint64_t a1, void *a2)
{
  id v3 = [a2 getLastFirstError];

  if (!v3)
  {
    CFStringRef v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      id v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed NewWatchPairing.", (uint8_t *)&v19, 2u);
      }
    }
    [*(id *)(a1 + 32) updatePairingSessionIdIfNeededForActiveDevice];
  }
  unsigned int v7 = [*(id *)(a1 + 32) supportsEarlyPairedSync];
  id v8 = nr_daemon_log();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    if (v9)
    {
      id v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CompanionOOB: Deferring pairing client proxy removal.", (uint8_t *)&v19, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 47) = 1;
  }
  else
  {
    if (v9)
    {
      uint64_t v11 = nr_daemon_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CompanionOOB: removing pairing client proxy.", (uint8_t *)&v19, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeObject:*(void *)(a1 + 40) withCleanupBlock:0];
  }
  id v12 = nr_daemon_log();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

  if (v13)
  {
    long long v14 = nr_daemon_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = [*(id *)(a1 + 32) mirrorOfActiveDeviceID];
      int v19 = 138477827;
      id v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending report for %{private}@", (uint8_t *)&v19, 0xCu);
    }
  }
  uint64_t v16 = objc_opt_new();
  id v17 = *(void **)(a1 + 32);
  id v18 = [v17 mirrorOfActiveDeviceID];
  [v16 submitPairingReportWithRegistry:v17 deviceID:v18];
}

uint64_t sub_10004053C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100040708(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_10004072C(id *a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    CFStringRef v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F7F1C((uint64_t)a1);
    }
  }
  id WeakRetained = objc_loadWeakRetained(a1 + 8);
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained resetPhoneStateForNewPairing];
    [v6 checkAndDisableStandAloneMode];
    [v6 logIfVersionsAreOverridden];
    id v7 = +[NRDataCollector createSharedInstance];
    if ([v6 managedConfigurationWatchDisabled])
    {
      id v8 = nrGetPairingError();
      BOOL v9 = nr_daemon_log();
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);

      if (v10)
      {
        uint64_t v11 = nr_daemon_log();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1000F7DE0();
        }
      }
      id v12 = (void *)v6[47];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      void v22[2] = sub_100040990;
      v22[3] = &unk_100167208;
      id v13 = a1[6];
      id v14 = a1[7];
      id v23 = v8;
      id v24 = v14;
      id v15 = v8;
      [v12 removeObject:v13 withCleanupBlock:v22];
    }
    else
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_1000409A4;
      v16[3] = &unk_1001672D0;
      id v17 = v6;
      id v18 = a1[4];
      id v19 = a1[6];
      id v21 = a1[7];
      id v20 = a1[5];
      [v17 getCanPairAnotherDeviceWithCompletion:v16];

      id v15 = v17;
    }
  }
}

uint64_t sub_100040990(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000409A4(id *a1, int a2)
{
  if (a2)
  {
    [a1[4] clearMagicSwitchAdvertisingIdentifierSeedIfNeeded];
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_100040B7C;
    v15[3] = &unk_1001672A8;
    id v3 = a1[4];
    id v16 = a1[5];
    id v17 = a1[4];
    id v18 = a1[6];
    id v20 = a1[8];
    id v19 = a1[7];
    [v3 grabRegistryWithReadBlock:v15];

    id v4 = v16;
  }
  else
  {
    BOOL v5 = nrGetPairingError();
    id v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      id v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000F7E48();
      }
    }
    BOOL v9 = (void *)*((void *)a1[4] + 47);
    id v10 = a1[6];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004147C;
    v12[3] = &unk_100167208;
    id v11 = a1[8];
    id v13 = v5;
    id v14 = v11;
    id v4 = v5;
    [v9 removeObject:v10 withCleanupBlock:v12];
  }
}

void sub_100040B7C(id *a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:a1[4]];
  id v4 = [v3 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
  BOOL v5 = [v4 value];

  id v6 = +[NRQueue registryDaemonQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100040CE4;
  v8[3] = &unk_100167280;
  BOOL v15 = v3 != 0;
  id v9 = a1[5];
  id v10 = a1[6];
  id v14 = a1[8];
  id v11 = v5;
  id v12 = a1[7];
  id v13 = a1[4];
  id v7 = v5;
  [v6 dispatchAsync:v8];
}

void sub_100040CE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    id v2 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
    if (*(void *)(a1 + 48)) {
      CFStringRef v3 = *(const __CFString **)(a1 + 48);
    }
    else {
      CFStringRef v3 = @"none";
    }
    id v4 = [@"PasscodePairTo-" stringByAppendingString:v3];
    if (([v2 hasTransactionType:@"pair"] & 1) == 0)
    {
      if (_NRIsAutomated())
      {
        id v5 = 0;
      }
      else
      {
        id v13 = [*(id *)(a1 + 40) appPath];
        id v14 = [v13 lowercaseString];
        id v5 = [v14 containsString:@"bridge"];
      }
      id v29 = [*(id *)(a1 + 56) objectForKeyedSubscript:NRPairOptionGizmoPairingVersion];
      id v27 = [*(id *)(a1 + 56) objectForKeyedSubscript:NRPairOptionIsAltAccountGizmo];
      BOOL v15 = objc_opt_new();
      id v26 = [EPRoutingSlipEntry alloc];
      uint64_t v24 = objc_opt_class();
      v36[0] = @"extensiblePairingPairingType";
      id v28 = [[EPSagaOperandString alloc] initWithString:@"extensiblePairingTypeDiscoverAndPairWithDeviceID"];
      v37[0] = v28;
      v36[1] = @"extensiblePairingAdvertisedName";
      uint64_t v25 = [[EPSagaOperandString alloc] initWithString:*(void *)(a1 + 48)];
      v37[1] = v25;
      v36[2] = @"nrDeviceIdentifier";
      id v23 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 64)];
      v37[2] = v23;
      v36[3] = @"extensiblePairingShouldFilePairingReport";
      id v16 = [EPSagaOperandNumber alloc];
      id v17 = +[NSNumber numberWithBool:v5];
      id v18 = [(EPSagaOperandNumber *)v16 initWithNumber:v17];
      v37[3] = v18;
      v36[4] = @"extensiblePairingGizmoPairingVersion";
      id v19 = [[EPSagaOperandNumber alloc] initWithNumber:v29];
      uint8_t v37[4] = v19;
      v36[5] = @"isAltAccountGizmo";
      id v20 = [[EPSagaOperandNumber alloc] initWithNumber:v27];
      void v37[5] = v20;
      id v21 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:6];
      uint64_t v22 = [(EPRoutingSlipEntry *)v26 initWithName:v4 transactionClass:v24 operands:v21];
      [v15 setEntry:v22];

      [v15 setRunningStatusCode:1];
      [v15 setUserInfo:*(void *)(a1 + 40)];
      [v15 setOperationType:@"pair"];
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1000411F0;
      v30[3] = &unk_1001669F0;
      id v31 = *(id *)(a1 + 32);
      id v32 = *(id *)(a1 + 40);
      [v15 setDidEnd:v30];
      [v2 addTransaction:v15];
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    id v6 = nrGetPairingError();
    id v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      id v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000F7FB4();
      }
    }
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(*(void *)(a1 + 32) + 376);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_1000411DC;
    v33[3] = &unk_100167208;
    id v12 = *(id *)(a1 + 72);
    id v34 = v6;
    id v35 = v12;
    id v2 = v6;
    [v11 removeObject:v10 withCleanupBlock:v33];

    id v4 = v35;
  }
}

uint64_t sub_1000411DC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000411F0(uint64_t a1, void *a2)
{
  CFStringRef v3 = [a2 getLastFirstError];

  if (!v3)
  {
    id v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      id v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Completed CompanionPasscode NewWatchPairing.", (uint8_t *)&v19, 2u);
      }
    }
    [*(id *)(a1 + 32) updatePairingSessionIdIfNeededForActiveDevice];
  }
  unsigned int v7 = [*(id *)(a1 + 32) supportsEarlyPairedSync];
  BOOL v8 = nr_daemon_log();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    if (v9)
    {
      uint64_t v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CompanionPasscode: Deferring pairing client proxy removal.", (uint8_t *)&v19, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 47) = 1;
  }
  else
  {
    if (v9)
    {
      id v11 = nr_daemon_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v19) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CompanionPasscode: removing pairing client proxy.", (uint8_t *)&v19, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeObject:*(void *)(a1 + 40) withCleanupBlock:0];
  }
  id v12 = nr_daemon_log();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

  if (v13)
  {
    id v14 = nr_daemon_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v15 = [*(id *)(a1 + 32) mirrorOfActiveDeviceID];
      int v19 = 138477827;
      id v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sending report for %{private}@", (uint8_t *)&v19, 0xCu);
    }
  }
  id v16 = objc_opt_new();
  id v17 = *(void **)(a1 + 32);
  id v18 = [v17 mirrorOfActiveDeviceID];
  [v16 submitPairingReportWithRegistry:v17 deviceID:v18];
}

uint64_t sub_10004147C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10004152C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100041544(uint64_t a1, void *a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        BOOL v8 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v11 + 1) + 8 * i)];
        if ([v8 isPaired])
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  BOOL v9 = +[NRQueue registryDaemonQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000416D8;
  v10[3] = &unk_1001657F0;
  v10[4] = *(void *)(a1 + 32);
  [v9 dispatchAsync:v10];
}

void *sub_1000416D8(void *result)
{
  if (*(unsigned char *)(*(void *)(result[4] + 8) + 24)) {
    return +[NRMagicSwitchHelper clearCompanionSeed];
  }
  return result;
}

void sub_100041888(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000418AC(id *a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8050((uint64_t)a1, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  long long v12 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained resetWatchStateForNewPairing];
    [v12 logIfVersionsAreOverridden];
    long long v13 = [v12[18] optionalServiceFromClass:objc_opt_class()];
    long long v14 = v13;
    if (v13)
    {
      [v13 setAdvertisedName:a1[4]];
      [v14 setPairingMode:3];
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_100041A50;
      v15[3] = &unk_1001660A8;
      id v16 = v12;
      id v17 = a1[4];
      id v18 = a1[5];
      id v19 = a1[6];
      [v16 grabRegistryWithReadBlockAsync:v15];
    }
  }
}

void sub_100041A50(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NRQueue registryDaemonQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100041B58;
  v6[3] = &unk_100167320;
  id v7 = v3;
  id v8 = a1[4];
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = a1[7];
  id v5 = v3;
  [v4 dispatchAsync:v6];
}

void sub_100041B58(uint64_t a1)
{
  if ([*(id *)(a1 + 32) paired])
  {
    uint64_t v2 = *(void *)(a1 + 64);
    nrGetPairingError();
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v2 + 16))(v2);
  }
  else
  {
    id v3 = [*(id *)(*(void *)(a1 + 40) + 144) serviceFromClass:objc_opt_class()];
    if (*(void *)(a1 + 48)) {
      CFStringRef v4 = *(const __CFString **)(a1 + 48);
    }
    else {
      CFStringRef v4 = @"none";
    }
    id v5 = [@"OOBPairTo-" stringByAppendingString:v4];
    if (([v3 hasTransactionType:@"pair"] & 1) == 0)
    {
      uint64_t v6 = objc_opt_new();
      id v7 = [EPRoutingSlipEntry alloc];
      uint64_t v8 = objc_opt_class();
      v23[0] = @"extensiblePairingPairingType";
      id v9 = [[EPSagaOperandString alloc] initWithString:@"extensiblePairingTypeAdvertiseAndOOBPair"];
      v24[0] = v9;
      v23[1] = @"extensiblePairingAdvertisedName";
      id v10 = [[EPSagaOperandString alloc] initWithString:*(void *)(a1 + 48)];
      v24[1] = v10;
      id v11 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:2];
      long long v12 = [(EPRoutingSlipEntry *)v7 initWithName:v5 transactionClass:v8 operands:v11];
      [v6 setEntry:v12];

      [v6 setRunningStatusCode:1];
      [v6 setUserInfo:*(void *)(a1 + 56)];
      [v6 setOperationType:@"pair"];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100041EF8;
      v20[3] = &unk_1001669F0;
      id v21 = *(id *)(a1 + 40);
      id v22 = *(id *)(a1 + 56);
      [v6 setDidEnd:v20];
      long long v13 = +[NRQueue registryDaemonQueue];
      long long v14 = [v13 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100042014;
      block[3] = &unk_100165530;
      id v18 = v3;
      id v19 = v6;
      id v15 = v6;
      dispatch_async(v14, block);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100041EF8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) supportsEarlyPairedSync];
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GizmoOOB: Deferring pairing client proxy removal.", buf, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 47) = 1;
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GizmoOOB: Removing pairing client proxy.", v7, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeObject:*(void *)(a1 + 40) withCleanupBlock:0];
  }
}

id sub_100042014(uint64_t a1)
{
  return [*(id *)(a1 + 32) addTransaction:*(void *)(a1 + 40)];
}

void sub_1000420E0(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  BOOL v4 = [v3 objectForKeyedSubscript:NRDevicePropertyMigrationConsent];
  id v5 = [v4 value];

  uint64_t v6 = +[NRQueue registryDaemonQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000421F8;
  v11[3] = &unk_1001666B8;
  id v12 = v5;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(a1 + 48);
  id v13 = v7;
  uint64_t v14 = v8;
  id v15 = v9;
  id v10 = v5;
  [v6 dispatchAsync:v11];
}

void sub_1000421F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) BOOLValue])
  {
    id v2 = +[NRDataCollector createSharedInstance];
    id v3 = +[NSProgress progressWithTotalUnitCount:1];
    BOOL v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = [*(id *)(a1 + 40) UUIDString];
        *(_DWORD *)long long buf = 138412290;
        id v18 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "xpcBeginMigrationWithDeviceID:completion: Starting migration to %@", buf, 0xCu);
      }
    }
    uint64_t v8 = [*(id *)(*(void *)(a1 + 48) + 144) serviceFromClass:objc_opt_class()];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10004245C;
    v12[3] = &unk_100167370;
    int8x16_t v11 = *(int8x16_t *)(a1 + 40);
    id v9 = (id)v11.i64[0];
    int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
    id v14 = *(id *)(a1 + 56);
    [v8 beginMigrationToDevice:v9 progress:v3 completion:v12];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"Consent not given for migration";
    id v3 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v8 = +[NSError errorWithDomain:@"com.apple.NanoRegistry" code:1100 userInfo:v3];
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v8);
  }
}

void sub_10004245C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v3 nr_safeDescription];
      *(_DWORD *)long long buf = 138543362;
      id v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "xpcBeginMigrationWithDeviceID:completion: Migration done- error %{public}@", buf, 0xCu);
    }
  }
  if ([v3 code] == (id)8)
  {
    uint64_t v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      uint64_t v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "xpcBeginMigrationWithDeviceID:completion: Migration done- watch returned fatal error, unpairing", buf, 2u);
      }
    }
    LOBYTE(v15) = 1;
    [*(id *)(a1 + 32) unpairDeviceWithPairingID:*(void *)(a1 + 40) obliterationString:0 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanFalse pairingReport:0 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v15];
  }
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 352);
  *(void *)(v11 + 352) = 0;

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + 368);
  *(void *)(v13 + 368) = 0;
}

void sub_100042A14(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100042A38(id *a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8128((uint64_t)a1, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  id v12 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained resetWatchStateForNewPairing];
    [v12 logIfVersionsAreOverridden];
    uint64_t v13 = [v12[18] optionalServiceFromClass:objc_opt_class()];
    id v14 = v13;
    if (v13)
    {
      [v13 setAdvertisedName:a1[4]];
      [v14 setPairingMode:4];
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_100042BDC;
      v15[3] = &unk_1001660A8;
      CFStringRef v16 = v12;
      id v17 = a1[4];
      id v18 = a1[5];
      id v19 = a1[6];
      [v16 grabRegistryWithReadBlockAsync:v15];
    }
  }
}

void sub_100042BDC(uint64_t a1, void *a2)
{
  if ([a2 paired])
  {
    uint64_t v3 = *(void *)(a1 + 56);
    nrGetPairingError();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v3 + 16))(v3);
  }
  else
  {
    BOOL v4 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
    if (*(void *)(a1 + 40)) {
      CFStringRef v5 = *(const __CFString **)(a1 + 40);
    }
    else {
      CFStringRef v5 = @"none";
    }
    uint64_t v6 = [@"PasscodePairTo-" stringByAppendingString:v5];
    if (([v4 hasTransactionType:@"pair"] & 1) == 0)
    {
      uint64_t v7 = objc_opt_new();
      uint64_t v8 = [EPRoutingSlipEntry alloc];
      uint64_t v9 = objc_opt_class();
      v24[0] = @"extensiblePairingPairingType";
      uint64_t v10 = [[EPSagaOperandString alloc] initWithString:@"extensiblePairingTypeAdvertiseAndPasscodePair"];
      v25[0] = v10;
      v24[1] = @"extensiblePairingAdvertisedName";
      uint64_t v11 = [[EPSagaOperandString alloc] initWithString:*(void *)(a1 + 40)];
      v25[1] = v11;
      id v12 = +[NSDictionary dictionaryWithObjects:v25 forKeys:v24 count:2];
      uint64_t v13 = [(EPRoutingSlipEntry *)v8 initWithName:v6 transactionClass:v9 operands:v12];
      [v7 setEntry:v13];

      [v7 setRunningStatusCode:1];
      [v7 setUserInfo:*(void *)(a1 + 48)];
      [v7 setOperationType:@"pair"];
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100042F7C;
      v21[3] = &unk_1001669F0;
      id v22 = *(id *)(a1 + 32);
      id v23 = *(id *)(a1 + 48);
      [v7 setDidEnd:v21];
      id v14 = +[NRQueue registryDaemonQueue];
      uint64_t v15 = [v14 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100043098;
      block[3] = &unk_100165530;
      id v19 = v4;
      id v20 = v7;
      id v16 = v7;
      dispatch_async(v15, block);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100042F7C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) supportsEarlyPairedSync];
  uint64_t v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      CFStringRef v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GizmoPasscode: Deferring pairing client proxy removal.", buf, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 47) = 1;
  }
  else
  {
    if (v4)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GizmoPasscode: removing pairing client proxy.", v7, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeObject:*(void *)(a1 + 40) withCleanupBlock:0];
  }
}

id sub_100043098(uint64_t a1)
{
  return [*(id *)(a1 + 32) addTransaction:*(void *)(a1 + 40)];
}

void sub_100043280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000432A4(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained)
  {
    uint64_t v3 = [a1[4] collection];
    BOOL v4 = [v3 activeDevice];

    CFStringRef v5 = [*((id *)a1[4] + 18) optionalServiceFromClass:objc_opt_class()];
    uint64_t v6 = v5;
    if (v5) {
      id v7 = v5;
    }
    else {
      id v7 = (id)objc_opt_new();
    }
    uint64_t v10 = v7;

    if (([v10 isErrorSet] & 1) == 0)
    {
      uint64_t v11 = nrGetPairingError();
      [v10 setOriginalError:v11];
    }
    id v12 = a1[4];
    uint64_t v13 = [v4 pairingID];
    id v14 = [a1[5] appPath];
    uint64_t v15 = [@"unpair-" stringByAppendingString:v14];
    LOBYTE(v16) = 1;
    [v12 unpairDeviceWithPairingID:v13 obliterationString:v15 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanTrue pairingReport:v10 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v16];

LABEL_11:
    goto LABEL_12;
  }
  uint64_t v8 = nr_daemon_log();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);

  if (v9)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8198();
    }
    goto LABEL_11;
  }
LABEL_12:
}

void sub_100043780(uint64_t a1)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
  unsigned int v2 = nrGetPairingError();
  [v4 cancelWithOperationType:@"pair" error:v2];

  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1000438D0(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v4 = [v3 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  CFStringRef v5 = [v4 value];

  uint64_t v6 = +[NRQueue registryDaemonQueue];
  id v7 = [v6 queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000439E4;
  block[3] = &unk_100165868;
  uint64_t v8 = *(void **)(a1 + 32);
  void block[4] = *(void *)(a1 + 40);
  id v11 = v5;
  id v12 = v8;
  id v9 = v5;
  dispatch_async(v7, block);
}

id sub_1000439E4(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  unsigned int v3 = [*(id *)(a1 + 40) BOOLValue];
  uint64_t v4 = *(void *)(a1 + 48);
  if (v3) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = 4;
  }

  return [v2 enterCompatibilityState:v5 withDeviceID:v4 withCompletion:0];
}

void sub_100043D70(uint64_t a1, char a2)
{
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_enterCompatibilityState: deferring cleanup of pairing clients", v10, 2u);
      }
    }
  }
  else
  {
    if (v5)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_enterCompatibilityState: cleaning up pairing clients", buf, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeAllObjects];
  }
  uint64_t v8 = [*(id *)(*(void *)(a1 + 32) + 144) optionalServiceFromClass:objc_opt_class()];
  [v8 filePairingReport];
  [*(id *)(*(void *)(a1 + 32) + 528) addObject:*(void *)(a1 + 40)];
  id v9 = +[NSNotificationCenter defaultCenter];
  [v9 postNotificationName:@"NRNotificationWaitForBridgeComplete" object:*(void *)(a1 + 32)];
}

void sub_100043EE0(uint64_t a1, void *a2)
{
  id v6 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6F13FF03-6511-4180-BBF3-4C231C10D458"];
  if ([v6 supportsCapability:v3])
  {
    unsigned __int8 v4 = [v6 isAltAccount];

    if ((v4 & 1) == 0)
    {
      BOOL v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
      goto LABEL_6;
    }
  }
  else
  {
  }
  BOOL v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_6:
  v5();
}

void sub_10004451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10004455C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 deviceCollection];
  BOOL v5 = [v4 objectForKeyedSubscript:*(void *)(a1 + 32)];

  id v6 = [*(id *)(a1 + 40) _resolveIsSetupNumberForDevice:v5];
  if (v5)
  {
    id v7 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6F13FF03-6511-4180-BBF3-4C231C10D458"];
    if ([v5 supportsCapability:v7])
    {
      unsigned __int8 v8 = [v6 BOOLValue];

      if ((v8 & 1) == 0)
      {
        id v9 = nr_daemon_log();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          id v11 = nr_daemon_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v21) = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unpairing a device with unset isSetup flag.", (uint8_t *)&v21, 2u);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
      }
    }
    else
    {
    }
  }
  id v12 = [*(id *)(a1 + 48) appPath];
  uint64_t v13 = [v12 lastPathComponent];
  unsigned int v14 = [v13 isEqualToString:@"nanoregistryd"];

  if (v5 && (([v5 isArchived] ^ 1 | v14) & 1) == 0)
  {
    id v17 = [*(id *)(a1 + 40) _migrationReporter];
    [v17 fileEarlyMigrationFailure:5 withDeviceHistory:v3 forPairingID:*(void *)(a1 + 32)];
LABEL_20:

    goto LABEL_21;
  }
  if (v14)
  {
    if ([v5 isArchived])
    {
      uint64_t v15 = nr_daemon_log();
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);

      if (v16)
      {
        id v17 = nr_daemon_log();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = [*(id *)(a1 + 32) UUIDString];
          id v19 = (void *)v18;
          CFStringRef v20 = @"(nil)";
          if (v18) {
            CFStringRef v20 = (const __CFString *)v18;
          }
          int v21 = 138412290;
          CFStringRef v22 = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "nanoregistryd called NanoRegistry to unpair this archived deviceID: %@", (uint8_t *)&v21, 0xCu);
        }
        goto LABEL_20;
      }
    }
  }
LABEL_21:
}

uint64_t sub_1000447E4(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    id v1 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      id v1 = nr_daemon_log();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Removing all objects from _pairingClients", buf, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 376) removeAllObjects];
  }
  unsigned __int8 v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 80);
  if (*(unsigned char *)(a1 + 80))
  {
    id v1 = [*(id *)(a1 + 48) appPath];
    id v7 = [@"unpair-" stringByAppendingString:v1];
  }
  else
  {
    id v7 = 0;
  }
  unsigned __int8 v8 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 81)];
  id v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 82)];
  BOOL v10 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 83)];
  LOBYTE(v12) = 1;
  [v4 unpairDeviceWithPairingID:v5 obliterationString:v7 shouldBrick:v8 storeUnpair:v9 migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:v10 pairingReport:*(void *)(a1 + 56) remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v12];

  if (v6)
  {
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_100044B54(uint64_t a1)
{
  unsigned int v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    unsigned __int8 v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting client requested suspend flag", v5, 2u);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 1;
}

void sub_100044DA8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_100044DC8(uint64_t a1, int a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    BOOL v3 = [WeakRetained pairingClients];
    [v3 addObject:*(void *)(a1 + 32)];
  }
}

void sub_100044E30(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    unsigned __int8 v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Resetting client requested flag", v5, 2u);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
}

void sub_100044FE4(uint64_t a1, void *a2)
{
  id v2 = a2;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    char v6 = 0;
    uint64_t v7 = *(void *)v22;
    uint64_t v8 = NRDevicePropertyMaxPairingCompatibilityVersion;
    uint64_t v9 = NRDevicePropertyPairingCompatibilityVersion;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v2);
        }
        id v11 = [v2 objectForKeyedSubscript:*(void *)(*((void *)&v21 + 1) + 8 * i)];
        if ([v11 isPaired])
        {
          uint64_t v12 = [v11 objectForKeyedSubscript:v8];
          uint64_t v13 = [v12 value];

          if (!v13)
          {
            unsigned int v14 = [v11 objectForKeyedSubscript:v9];
            uint64_t v13 = [v14 value];
          }
          if ([v13 integerValue] > v5) {
            id v5 = [v13 integerValue];
          }

          char v6 = 1;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v4);
  }
  else
  {
    id v5 = 0;
    char v6 = 0;
  }
  uint64_t v15 = +[NRQueue registryDaemonQueue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100045224;
  v17[3] = &unk_100167438;
  char v20 = v6 & 1;
  id v18 = *(id *)(a1 + 40);
  id v19 = v5;
  void v17[4] = *(void *)(a1 + 32);
  [v15 dispatchAsync:v17];
}

uint64_t sub_100045224(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    id v2 = +[NRPairingCompatibilityVersionInfo systemVersions];
    id v3 = [*(id *)(a1 + 32) chipIDOfActiveDevice];
    [v2 minQuickSwitchPairingCompatibilityVersionForChipID:v3];

    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
  }

  return v4();
}

void sub_100045614(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDeviceID];

  if (v4)
  {
    id v5 = [v3 activeDevice];
    char v6 = [v5 objectForKeyedSubscript:_NRDevicePropertyCompatibilityState];
    uint64_t v7 = [v6 value];

    uint64_t v8 = +[NRQueue registryDaemonQueue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100045750;
    v10[3] = &unk_100165530;
    v10[4] = *(void *)(a1 + 32);
    id v11 = v7;
    id v9 = v7;
    [v8 dispatchAsync:v10];
  }
  else
  {
    [*(id *)(*(void *)(a1 + 32) + 296) setConnected:0];
    [*(id *)(a1 + 32) startIDSConnectivityTimeout];
  }
}

id sub_100045750(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIDSTrafficClassifiersForActiveDeviceWithNewCompatibilityState:*(void *)(a1 + 40)];
}

uint64_t sub_10004575C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDevice];
  id v5 = v4;
  if (v4 && [v4 isPaired])
  {
    char v6 = *(void **)(a1 + 32);
    uint64_t v7 = [v3 activeDeviceID];
    [v6 _updateCompatibilityStateForDeviceID:v7 withDeviceCollection:v3];
  }
  return 0;
}

void sub_100045A4C(uint64_t a1, void *a2)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    uint64_t v7 = _NRDevicePropertyBluetoothIdentifier;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8 * i);
        BOOL v10 = [v3 objectForKeyedSubscript:v9];
        if ([v10 isPaired])
        {
          id v11 = [v10 objectForKeyedSubscript:v7];
          uint64_t v12 = [v11 value];

          if ([v12 isEqual:*(void *)(a1 + 32)])
          {
            id v13 = v9;

            goto LABEL_13;
          }
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v13 = 0;
LABEL_13:

  unsigned int v14 = +[NRQueue registryDaemonQueue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100045C58;
  v17[3] = &unk_100165A70;
  id v15 = *(id *)(a1 + 40);
  id v18 = v13;
  id v19 = v15;
  id v16 = v13;
  [v14 dispatchAsync:v17];
}

uint64_t sub_100045C58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100045DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100045E14(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001A1110;
  qword_1001A1110 = v1;

  _objc_release_x1(v1, v2);
}

void sub_100045E50(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    char v6 = 0;
    int v7 = 0;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v3);
        }
        BOOL v10 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v13 + 1) + 8 * i)];
        if ([v10 isPaired] && (objc_msgSend(v10, "isArchived") & 1) == 0)
        {
          v7 |= [v10 isActive];
          char v6 = 1;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
  else
  {
    char v6 = 0;
    LOBYTE(v7) = 0;
  }
  [(id)qword_1001A1110 setLaunchEvent:@"com.apple.security.secureobjectsync.viewschanged" enable:v6 & 1];
  [(id)qword_1001A1110 setLaunchEvent:@"AppleLanguagePreferencesChangedNotification" enable:v7 & 1];
  [(id)qword_1001A1110 setLaunchEvent:MCSettingsChangedNotification enable:v7 & 1];
  [(id)qword_1001A1110 setLaunchEvent:MCRestrictionChangedNotification enable:v7 & 1];
  [(id)qword_1001A1110 setLaunchEvent:MCEffectiveSettingsChangedNotification enable:v7 & 1];
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;
}

uint64_t sub_100046720(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (([v2 hasPrefix:@"12S"] & 1) != 0
    || ([v2 hasPrefix:@"13S"] & 1) != 0)
  {
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = (uint64_t)[v2 hasPrefix:@"13V"];
  }

  return v3;
}

uint64_t sub_10004684C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = (id *)(a1 + 32);
  int v7 = *(void **)(a1 + 32);
  if (v7)
  {
    id v9 = *(void **)(a1 + 40);
    BOOL v10 = [v7 nsuuid];
    uint64_t v11 = [v9 _deviceFromIDSBTUUID:v10];

    if (v11)
    {
      uint64_t v12 = nr_daemon_log();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

      v123 = v5;
      id v120 = v6;
      if (v13)
      {
        long long v14 = nr_daemon_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          long long v15 = [*v8 modelIdentifier];
          long long v16 = [*v8 productName];
          [*v8 productVersion];
          id v17 = v124 = v11;
          id v18 = [*v8 productBuildVersion];
          [*v8 name];
          id v19 = v121 = a1;
          long long v20 = [*v8 deviceColor];
          long long v21 = [*v8 enclosureColor];
          id v118 = [*v8 minCompatibilityVersion];
          id v22 = [*v8 maxCompatibilityVersion];
          id v23 = [*v8 pairingProtocolVersion];
          *(_DWORD *)long long buf = 138545666;
          v132 = v15;
          __int16 v133 = 2114;
          v134 = v16;
          __int16 v135 = 2114;
          CFStringRef v136 = v17;
          __int16 v137 = 2114;
          v138 = v18;
          __int16 v139 = 2112;
          CFStringRef v140 = v19;
          __int16 v141 = 2114;
          v142 = v20;
          __int16 v143 = 2114;
          v144 = v21;
          __int16 v145 = 2048;
          id v146 = v118;
          __int16 v147 = 2048;
          id v148 = v22;
          __int16 v149 = 2048;
          id v150 = v23;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "IDSDevice properties: modelIdentifier=%{public}@ productName=%{public}@ productVersion=%{public}@ productBuildVersion=%{public}@ name=%@ deviceColor=%{public}@ enclosureColor=%{public}@ compatibilityVersion=%lld-%lld ppv=%lld", buf, 0x66u);

          a1 = v121;
          uint64_t v11 = v124;
        }
      }
      long long v24 = +[NSMutableDictionary dictionary];
      uint64_t v25 = [*v8 productName];

      if (v25)
      {
        id v26 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v27 = objc_alloc((Class)NRDevicePropertyDiff);
        id v28 = [*v8 productName];
        id v29 = [v27 initWithValue:v28];
        id v30 = [v26 initWithDiff:v29 andChangeType:1];
        [v24 setObject:v30 forKeyedSubscript:NRDevicePropertySystemName];
      }
      id v31 = [*v8 productVersion];

      if (v31)
      {
        id v32 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v33 = objc_alloc((Class)NRDevicePropertyDiff);
        id v34 = [*v8 productVersion];
        id v35 = [v33 initWithValue:v34];
        id v36 = [v32 initWithDiff:v35 andChangeType:1];
        [v24 setObject:v36 forKeyedSubscript:NRDevicePropertySystemVersion];
      }
      uint64_t v37 = NRDevicePropertySystemBuildVersion;
      long long v38 = [v11 objectForKeyedSubscript:NRDevicePropertySystemBuildVersion];
      uint64_t v39 = [v38 value];

      long long v125 = [*v8 productBuildVersion];
      if (v125 && [*v8 isConnected])
      {
        id v40 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v41 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v125];
        id v42 = [v40 initWithDiff:v41 andChangeType:1];
        [v24 setObject:v42 forKeyedSubscript:v37];
      }
      BOOL v43 = [*v8 deviceColor];

      if (v43)
      {
        id v44 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v45 = objc_alloc((Class)NRDevicePropertyDiff);
        id v46 = [*v8 deviceColor];
        id v47 = [v45 initWithValue:v46];
        id v48 = [v44 initWithDiff:v47 andChangeType:1];
        [v24 setObject:v48 forKeyedSubscript:NRDevicePropertyColor];
      }
      id v49 = [*v8 enclosureColor];

      if (v49)
      {
        id v50 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v51 = objc_alloc((Class)NRDevicePropertyDiff);
        id v52 = [*v8 enclosureColor];
        id v53 = [v51 initWithValue:v52];
        id v54 = [v50 initWithDiff:v53 andChangeType:1];
        [v24 setObject:v54 forKeyedSubscript:NRDevicePropertyEnclosureColor];
      }
      id v55 = [*(id *)(*(void *)(a1 + 40) + 144) optionalServiceFromClass:objc_opt_class()];
      long long v56 = [*(id *)(a1 + 32) nsuuid];
      id v119 = v55;
      long long v57 = [v55 idsDeviceIdentifierForBTUUID:v56];

      CFStringRef v122 = v39;
      if (v57)
      {
        id v58 = [*(id *)(a1 + 40) secureProperties];

        if (v58)
        {
          uint64_t v59 = _NRDevicePropertyMigrationIDSCloudIdentifier;
          long long v60 = [v11 objectForKeyedSubscript:_NRDevicePropertyMigrationIDSCloudIdentifier];
          id v61 = [v60 value];

          id v62 = [*(id *)(a1 + 40) secureProperties];
          uint64_t v63 = [v62 objectForKeyedSubscript:v61];

          if (([v63 isEqual:v57] & 1) == 0)
          {
            id v64 = [*(id *)(a1 + 40) secureProperties];
            uint64_t v65 = [v64 storeSecureProperty:v57];

            id v66 = objc_alloc((Class)NRDevicePropertyDiffType);
            id v67 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v65];
            id v68 = [v66 initWithDiff:v67 andChangeType:1];
            [v24 setObject:v68 forKeyedSubscript:v59];

            id v61 = (void *)v65;
            uint64_t v39 = v122;
          }
        }
      }
      v126[0] = _NSConcreteStackBlock;
      v126[1] = 3221225472;
      v126[2] = sub_100047590;
      void v126[3] = &unk_1001674A8;
      id v69 = v11;
      id v127 = v69;
      id v70 = v24;
      long long v128 = v70;
      BOOL v71 = objc_retainBlock(v126);
      if ([*v8 maxCompatibilityVersion] != (id)0x7FFFFFFFFFFFFFFFLL
        && [*v8 maxCompatibilityVersion]
        && [*v8 isConnected])
      {
        id v117 = v71;
        id v72 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v73 = objc_alloc((Class)NRDevicePropertyDiff);
        long long v74 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*v8 maxCompatibilityVersion]);
        id v75 = [v73 initWithValue:v74];
        id v76 = [v72 initWithDiff:v75 andChangeType:1];
        [v70 setObject:v76 forKeyedSubscript:NRDevicePropertyPairingCompatibilityVersion];

        id v77 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v78 = objc_alloc((Class)NRDevicePropertyDiff);
        long long v79 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*v8 maxCompatibilityVersion]);
        id v80 = [v78 initWithValue:v79];
        id v81 = [v77 initWithDiff:v80 andChangeType:1];
        [v70 setObject:v81 forKeyedSubscript:NRDevicePropertyMaxPairingCompatibilityVersion];

        id v82 = [*v8 maxCompatibilityVersion];
      }
      else
      {
        if ([*v8 maxCompatibilityVersion]
          || [*v8 pairingProtocolVersion] == (id)0x7FFFFFFFFFFFFFFFLL
          || ![*v8 isConnected])
        {
LABEL_36:
          if (objc_msgSend(*v8, "minCompatibilityVersion", v117) != (id)0x7FFFFFFFFFFFFFFFLL
            && [*v8 minCompatibilityVersion]
            && [*v8 isConnected])
          {
            v95 = v71;
            id v96 = objc_alloc((Class)NRDevicePropertyDiffType);
            id v97 = objc_alloc((Class)NRDevicePropertyDiff);
            id v98 = [*v8 minCompatibilityVersion];
          }
          else
          {
            if ([*v8 minCompatibilityVersion]
              || [*v8 pairingProtocolVersion] == (id)0x7FFFFFFFFFFFFFFFLL
              || ![*v8 isConnected])
            {
              goto LABEL_45;
            }
            v95 = v71;
            id v96 = objc_alloc((Class)NRDevicePropertyDiffType);
            id v97 = objc_alloc((Class)NRDevicePropertyDiff);
            id v98 = [*v8 pairingProtocolVersion];
          }
          id v99 = +[NSNumber numberWithInteger:v98];
          id v100 = [v97 initWithValue:v99];
          id v101 = [v96 initWithDiff:v100 andChangeType:1];
          [v70 setObject:v101 forKeyedSubscript:NRDevicePropertyMinPairingCompatibilityVersion];

          BOOL v71 = v95;
LABEL_45:
          id v102 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v70];
          id v103 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v102 andChangeType:1];
          id v104 = [v69 objectForKeyedSubscript:NRDevicePropertyPairingID];
          uint64_t v105 = [v104 value];

          if (v105)
          {
            id v117 = v57;
            BOOL v106 = v71;
            id v107 = objc_alloc((Class)NRDeviceCollectionDiff);
            v129 = v105;
            id v130 = v103;
            id v108 = +[NSDictionary dictionaryWithObjects:&v130 forKeys:&v129 count:1];
            id v109 = [v107 initWithDeviceCollectionDiffDeviceDiffs:v108];

            uint64_t v39 = v122;
            id v110 = [v123 applyDiff:v109];
            unsigned int v111 = [v69 isPaired];
            if (v125 && v111 && v122 && ([v122 isEqualToString:v125] & 1) == 0)
            {
              [*(id *)(a1 + 40) presentWatchWasUpdatedAlertIfNeededForNewBuildVersion:v125 oldBuildVersion:v122];
              uint64_t v112 = nr_daemon_log();
              BOOL v113 = os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT);

              if (v113)
              {
                id v114 = nr_daemon_log();
                if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138412546;
                  v132 = v122;
                  __int16 v133 = 2112;
                  v134 = v125;
                  _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "Build version changed from %@ to %@, checking if we should mark is Setup", buf, 0x16u);
                }
              }
              [*(id *)(a1 + 40) _markDeviceIsSetupWhereApplicable:v69 bypassIsSetupNoCheck:0 v117];
              uint64_t v39 = v122;
            }

            BOOL v71 = v106;
            long long v57 = v117;
          }

          id v5 = v123;
          id v6 = v120;
          goto LABEL_57;
        }
        id v117 = v71;
        id v85 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v86 = objc_alloc((Class)NRDevicePropertyDiff);
        id v87 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*v8 pairingProtocolVersion]);
        id v88 = [v86 initWithValue:v87];
        id v89 = [v85 initWithDiff:v88 andChangeType:1];
        [v70 setObject:v89 forKeyedSubscript:NRDevicePropertyPairingCompatibilityVersion];

        id v90 = objc_alloc((Class)NRDevicePropertyDiffType);
        id v91 = objc_alloc((Class)NRDevicePropertyDiff);
        id v92 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*v8 pairingProtocolVersion]);
        id v93 = [v91 initWithValue:v92];
        id v94 = [v90 initWithDiff:v93 andChangeType:1];
        [v70 setObject:v94 forKeyedSubscript:NRDevicePropertyMaxPairingCompatibilityVersion];

        id v82 = [*v8 pairingProtocolVersion];
      }
      BOOL v71 = v117;
      ((void (*)(void *, id))v117[2])(v117, v82);
      uint64_t v39 = v122;
      goto LABEL_36;
    }
  }
  __int16 v83 = nr_daemon_log();
  BOOL v84 = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);

  if (!v84)
  {
    id v69 = 0;
    goto LABEL_59;
  }
  id v70 = nr_daemon_log();
  if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
    sub_1000F81CC((id *)(a1 + 32), v70);
  }
  id v69 = 0;
LABEL_57:

LABEL_59:
  v115 = +[NRQueue registryDaemonQueue];
  [v115 dispatchAsync:*(void *)(a1 + 48)];

  return 0;
}

void sub_100047590(uint64_t a1, id a2)
{
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:NRDevicePropertyMaxPairingCompatibilityVersion];
  id v8 = [v4 value];

  id v5 = v8;
  if (v8)
  {
    BOOL v6 = [v8 integerValue] == a2;
    id v5 = v8;
    if (!v6)
    {
      id v7 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:0 andChangeType:2];
      [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:NRDevicePropertyMarketingVersion];

      id v5 = v8;
    }
  }
}

void sub_1000478C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000478E8(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  uint64_t v3 = [*(id *)(a1 + 32) _deviceFromIDSBTUUID:*(void *)(a1 + 40)];
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
    BOOL v6 = [v5 value];

    id v7 = [v4 pairingID];
    unsigned __int8 v8 = [v4 isPaired];
    id v9 = +[NRQueue registryDaemonQueue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100047AD0;
    v16[3] = &unk_1001674D0;
    id v17 = v6;
    id v10 = *(id *)(a1 + 48);
    unsigned __int8 v25 = v8;
    uint64_t v24 = *(void *)(a1 + 80);
    __int16 v26 = *(_WORD *)(a1 + 88);
    uint64_t v11 = *(void *)(a1 + 32);
    id v18 = v10;
    uint64_t v19 = v11;
    id v20 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    id v22 = v7;
    id v23 = *(id *)(a1 + 72);
    id v12 = v7;
    BOOL v13 = v6;
    [v9 dispatchAsync:v16];

LABEL_6:
    goto LABEL_7;
  }
  long long v14 = nr_daemon_log();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

  if (v15)
  {
    BOOL v13 = nr_daemon_log();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1000F8274(v2, v13);
    }
    goto LABEL_6;
  }
LABEL_7:
}

void sub_100047AD0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:*(void *)(a1 + 40)])
  {
    if (*(unsigned char *)(a1 + 96)) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
    }
    id v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      id v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 88) + 8) + 24);
        int v6 = *(unsigned __int8 *)(a1 + 97);
        int v7 = *(unsigned __int8 *)(a1 + 98);
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 67109890;
        int v26 = v5;
        __int16 v27 = 1024;
        int v28 = v6;
        __int16 v29 = 1024;
        int v30 = v7;
        __int16 v31 = 2114;
        uint64_t v32 = v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "shouldObliterate: %{BOOL}d, shouldBrick: %{BOOL}d, shouldPreserveESim: %{BOOL}d, advertised name: %{public}@", buf, 0x1Eu);
      }
    }
    id v9 = [*(id *)(*(void *)(a1 + 48) + 144) optionalServiceFromClass:objc_opt_class()];
    id v10 = *(void **)(a1 + 56);
    if (v10)
    {
      id v11 = [v10 unsignedIntegerValue];
      id v12 = nr_daemon_log();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

      if (v13)
      {
        long long v14 = nr_daemon_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000F8304();
        }
      }
      if (([v9 isErrorSet] & 1) == 0)
      {
        if (!v9) {
          id v9 = objc_opt_new();
        }
        [v9 setPairingReportErrorForRemoteError:v11 withReason:*(void *)(a1 + 64)];
      }
    }
    BOOL v15 = *(void **)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 72);
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
      CFStringRef v17 = @"remoteUnpair";
    }
    else {
      CFStringRef v17 = 0;
    }
    id v18 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 97)];
    uint64_t v19 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 98)];
    id v20 = objc_alloc((Class)NSUUID);
    id v21 = [*(id *)(a1 + 80) context];
    id v22 = [v21 outgoingResponseIdentifier];
    id v23 = [v20 initWithUUIDString:v22];
    LOBYTE(v24) = 1;
    [v15 unpairDeviceWithPairingID:v16 obliterationString:v17 shouldBrick:v18 storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:v19 pairingReport:v9 remoteUnpairRequestUUID:v23 shouldConnectionWithDevice:v24];
  }
}

void sub_100048104(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  BOOL v3 = [*(id *)(a1 + 32) _deviceFromIDSBTUUID:*(void *)(a1 + 40)];
  id v4 = v3;
  if (v3)
  {
    int v5 = [v3 objectForKeyedSubscript:NRDevicePropertyPairingID];
    int v6 = [v5 value];

    if (v6)
    {
      int v7 = +[NRQueue registryDaemonQueue];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100048278;
      v11[3] = &unk_100165C98;
      void v11[4] = *(void *)(a1 + 32);
      id v12 = v6;
      id v13 = *(id *)(a1 + 48);
      char v14 = *(unsigned char *)(a1 + 56);
      uint64_t v8 = v6;
      [v7 dispatchAsync:v11];

LABEL_7:
      goto LABEL_8;
    }
  }
  id v9 = nr_daemon_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);

  if (v10)
  {
    uint64_t v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1000F83CC(v2, v8);
    }
    goto LABEL_7;
  }
LABEL_8:
}

void sub_100048278(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 264))
  {
    uint64_t v3 = +[NROSTransaction transactionWithName:@"unsavedreceivedproperties"];
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 264);
    *(void *)(v4 + 264) = v3;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  ++*(void *)(v2 + 272);
  int v6 = +[NRQueue firstUnlockQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100048390;
  v8[3] = &unk_100165C98;
  int v7 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v7;
  id v10 = *(id *)(a1 + 48);
  char v11 = *(unsigned char *)(a1 + 56);
  [v6 dispatchAsync:v8];
}

id sub_100048390(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100048410;
  v5[3] = &unk_1001660F8;
  char v6 = *(unsigned char *)(a1 + 56);
  void v5[4] = v2;
  return [v2 updateDeviceID:v1 withProperties:v3 withCompletion:v5];
}

void sub_100048410(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      int v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Full set of properties received from remote device", buf, 2u);
      }
    }
    kdebug_trace();
    char v6 = [*(id *)(*(void *)(a1 + 32) + 144) optionalServiceFromClass:objc_opt_class()];
    [v6 propertiesReceived];
    uint64_t v7 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v7 + 32))
    {
      uint64_t v8 = +[NRNetworkRelayPair sharedInstance];
      [v8 propertiesReceived];

      uint64_t v7 = *(void *)(a1 + 32);
    }
    id v9 = [*(id *)(v7 + 144) optionalServiceFromClass:objc_opt_class()];
    [v9 propertiesReceived];

LABEL_9:
    return;
  }
  if (v4)
  {
    char v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Property update received from remote device (partial properties)", v10, 2u);
    }
    goto LABEL_9;
  }
}

void sub_100048B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100048B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  int v5 = [v3 deviceCollection];
  char v6 = [v5 activeDeviceID];
  unsigned int v7 = [v4 isEqual:v6];

  uint64_t v8 = +[NRQueue registryDaemonQueue];
  if (v7)
  {
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100048CE0;
    v14[3] = &unk_1001655F8;
    id v9 = &v15;
    id v15 = *(id *)(a1 + 32);
    [v8 dispatchAsync:v14];
  }
  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100048D68;
    v10[3] = &unk_100167590;
    id v9 = &v11;
    id v11 = *(id *)(a1 + 32);
    id v12 = v3;
    long long v13 = *(_OWORD *)(a1 + 40);
    [v8 dispatchAsync:v10];

    uint64_t v8 = v12;
  }
}

void sub_100048CE0(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) clientBlock];
  if (v3)
  {
    [*(id *)(a1 + 32) setClientBlock:0];
    int v2 = [*(id *)(a1 + 32) assertionID];
    v3[2](v3, 0, v2);
  }
}

void sub_100048D68(uint64_t a1)
{
  int v2 = objc_opt_new();
  id v3 = [EPRoutingSlipEntry alloc];
  uint64_t v4 = [*(id *)(a1 + 32) assertionID];
  int v5 = (void *)v4;
  if (v4) {
    CFStringRef v6 = (const __CFString *)v4;
  }
  else {
    CFStringRef v6 = @"none";
  }
  unsigned int v7 = [@"switchTo-" stringByAppendingString:v6];
  uint64_t v8 = objc_opt_class();
  CFStringRef v30 = @"switchToNRDeviceUUID";
  id v9 = [EPSagaOperandUUID alloc];
  id v10 = [*(id *)(a1 + 32) pairingID];
  id v11 = [(EPSagaOperandUUID *)v9 initWithUUID:v10];
  __int16 v31 = v11;
  id v12 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
  long long v13 = [(EPRoutingSlipEntry *)v3 initWithName:v7 transactionClass:v8 operands:v12];
  [v2 setEntry:v13];

  [v2 setRunningStatusCode:3];
  char v14 = [*(id *)(a1 + 32) clientProxy];
  [v2 setUserInfo:v14];

  id v15 = [*(id *)(a1 + 32) pairingID];
  [v2 setTargetPairingID:v15];

  uint64_t v16 = [*(id *)(a1 + 40) deviceCollection];
  CFStringRef v17 = [*(id *)(a1 + 32) pairingID];
  id v18 = [v16 deviceForPairingID:v17];

  unsigned int v19 = [v18 isAltAccount];
  id v20 = &off_100165788;
  if (v19) {
    id v20 = &off_1001657A0;
  }
  [v2 setOperationType:*v20];
  if ([v18 isAltAccount])
  {
    id v21 = *(void **)(*(void *)(a1 + 48) + 384);
    id v22 = [*(id *)(a1 + 32) clientProxy];
    [v21 addObject:v22 withAllocationBlock:&stru_100167540];
  }
  uint64_t v24 = _NSConcreteStackBlock;
  uint64_t v25 = 3221225472;
  int v26 = sub_10004916C;
  __int16 v27 = &unk_100167568;
  id v28 = *(id *)(a1 + 32);
  long long v29 = *(_OWORD *)(a1 + 48);
  [v2 setDidEnd:&v24];
  id v23 = [*(id *)(*(void *)(a1 + 48) + 144) serviceFromClass:objc_opt_class() v24, v25, v26, v27];
  [v23 addTransaction:v2];
}

void sub_100049088(id a1, BOOL a2)
{
  BOOL v2 = a2;
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    int v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v6 = @"Failed";
      if (v2) {
        CFStringRef v6 = @"Success";
      }
      int v7 = 138412290;
      CFStringRef v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Add to switching proxy (%@).", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_10004916C(uint64_t a1, void *a2)
{
  id v16 = a2;
  id v3 = [*(id *)(a1 + 32) clientBlock];
  BOOL v4 = *(void **)(*(void *)(a1 + 40) + 384);
  int v5 = [*(id *)(a1 + 32) clientProxy];
  [v4 removeObject:v5 withCleanupBlock:0];

  CFStringRef v6 = [v16 getLastFirstError];
  if (v6)
  {

    goto LABEL_8;
  }
  int v7 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v8 = [*(id *)(a1 + 40) lastActivePairingIDThatFailed];
  if (v7 == (void *)v8)
  {

    goto LABEL_7;
  }
  id v9 = (void *)v8;
  id v10 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  id v11 = [*(id *)(a1 + 40) lastActivePairingIDThatFailed];
  LODWORD(v10) = [v10 isEqual:v11];

  if (v10)
  {
LABEL_7:
    [*(id *)(a1 + 40) setLastActivePairingIDThatFailed:0];
    [*(id *)(a1 + 40) updatePairingSessionIdIfNeededForActiveDevice];
  }
LABEL_8:
  if (v3)
  {
    [*(id *)(a1 + 32) setClientBlock:0];
    id v12 = [v16 getLastFirstError];
    long long v13 = [v16 getLastFirstError];
    if (v13)
    {
      ((void (**)(void, void *, void))v3)[2](v3, v12, 0);
    }
    else
    {
      char v14 = [*(id *)(a1 + 32) assertionID];
      ((void (**)(void, void *, void *))v3)[2](v3, v12, v14);
    }
  }
  id v15 = [*(id *)(a1 + 40) history];
  +[NRCoreAnalyticsReporter reportDeviceSwitchTelemetryWithCollectionHistory:v15];
}

void sub_1000496C0(int8x16_t *a1, void *a2)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v2 = a2;
  id v3 = [v2 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v30;
    uint64_t v7 = NRDevicePropertyAdvertisedName;
    *(void *)&long long v4 = 138412290;
    long long v23 = v4;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v30 != v6) {
          objc_enumerationMutation(v2);
        }
        id v9 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        id v10 = [v2 objectForKeyedSubscript:v9, v23];
        id v11 = [v10 objectForKeyedSubscript:v7];
        id v12 = [v11 value];

        long long v13 = nr_daemon_log();
        BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

        if (v14)
        {
          id v15 = nr_daemon_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v23;
            id v34 = v12;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Testing for matching device: %@", buf, 0xCu);
          }
        }
        if ([v12 isEqual:a1[2].i64[0]])
        {
          CFStringRef v17 = nr_daemon_log();
          BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

          if (v18)
          {
            unsigned int v19 = nr_daemon_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = v23;
              id v34 = v12;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "receivedMigratedAwayWithAdvertisedName:%@ Device match found, unpairing (lite!)", buf, 0xCu);
            }
          }
          id v16 = v9;

          goto LABEL_19;
        }
      }
      id v5 = [v2 countByEnumeratingWithState:&v29 objects:v35 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v16 = 0;
LABEL_19:

  id v20 = +[NRQueue registryDaemonQueue];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_1000499C0;
  v26[3] = &unk_100165868;
  id v27 = v16;
  int8x16_t v25 = a1[2];
  id v21 = (id)v25.i64[0];
  int8x16_t v28 = vextq_s8(v25, v25, 8uLL);
  id v22 = v16;
  [v20 dispatchAsync:v26];
}

void sub_1000499C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    LOBYTE(v7) = 1;
    [*(id *)(a1 + 40) unpairDeviceWithPairingID:v2 obliterationString:0 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanTrue shouldPreserveESim:&__kCFBooleanFalse pairingReport:0 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v7];
  }
  else
  {
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v9 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "receivedMigratedAwayWithAdvertisedName: No match found to %@", buf, 0xCu);
      }
    }
  }
}

void sub_100049B78(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _bluetoothIDOfActiveDevice];
  id v3 = +[NRQueue registryDaemonQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100049C5C;
  v6[3] = &unk_1001675E0;
  int v10 = *(_DWORD *)(a1 + 56);
  BOOL v4 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  [v3 dispatchAsync:v6];
}

void sub_100049C5C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 144) serviceFromClass:objc_opt_class()];
  [v2 sendPingRequestType:0 withMessagePriority:*(int *)(a1 + 64) withMessageSize:*(void *)(a1 + 56) withTimeout:*(void *)(a1 + 40) toIDSBTUUID:*(void *)(a1 + 48) withResponseBlock:120.0];
}

void sub_10004A2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A2FC(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 32) == a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 1;
  }
  return result;
}

void sub_10004A474(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  BOOL v4 = [v3 objectForKeyedSubscript:NRDevicePropertyIsArchived];
  id v5 = [v4 value];

  uint64_t v6 = +[NRQueue registryDaemonQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10004A5A4;
  v10[3] = &unk_1001664E8;
  id v11 = v5;
  char v14 = *(unsigned char *)(a1 + 56);
  int8x16_t v9 = *(int8x16_t *)(a1 + 32);
  id v7 = (id)v9.i64[0];
  int8x16_t v12 = vextq_s8(v9, v9, 8uLL);
  id v13 = *(id *)(a1 + 48);
  id v8 = v5;
  [v6 dispatchAsync:v10];
}

void sub_10004A5A4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) BOOLValue])
  {
    id v2 = [*(id *)(*(void *)(a1 + 40) + 144) serviceFromClass:objc_opt_class()];
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 64)) {
          CFStringRef v6 = @"YES";
        }
        else {
          CFStringRef v6 = @"NO";
        }
        id v7 = [*(id *)(a1 + 48) UUIDString];
        *(_DWORD *)long long buf = 138412546;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "xpcSetMigrationConsented: Setting migration consent to %@ for device ID %@", buf, 0x16u);
      }
    }
    [v2 setMigrationConsent:*(unsigned __int8 *)(a1 + 64) forDeviceID:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
  }
  else
  {
    id v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      int v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = [*(id *)(a1 + 48) UUIDString];
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "xpcSetMigrationConsented: Device with ID %{public}@ is not archived yet, adding observer for isArchived", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    objc_initWeak(&location, *(id *)(a1 + 40));
    int8x16_t v12 = +[NSDate date];
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v24 = sub_100023880;
    int8x16_t v25 = sub_100023890;
    id v26 = 0;
    id v13 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10004A8EC;
    v17[3] = &unk_100167680;
    objc_copyWeak(&v21, &location);
    id v18 = *(id *)(a1 + 48);
    id v14 = v12;
    id v19 = v14;
    id v20 = buf;
    uint64_t v15 = [v13 addDiffObserverWithWriteBlock:v17];
    id v16 = *(void **)(*(void *)&buf[8] + 40);
    *(void *)(*(void *)&buf[8] + 40) = v15;

    _Block_object_dispose(buf, 8);
    objc_destroyWeak(&v21);

    objc_destroyWeak(&location);
  }
}

void sub_10004A8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004A8EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    uint64_t v8 = NRDevicePropertyIsArchived;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10004AA0C;
    v11[3] = &unk_100167658;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    id v14 = v6;
    id v9 = WeakRetained;
    uint64_t v10 = *(void *)(a1 + 48);
    id v15 = v9;
    uint64_t v16 = v10;
    +[NRMutableDeviceCollection parseDiff:v5 forPropertyChange:v8 withBlock:v11];
  }
}

void sub_10004AA0C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if ([v6 isEqual:*(void *)(a1 + 32)] && objc_msgSend(v7, "BOOLValue"))
  {
    uint64_t v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      uint64_t v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a1 + 40);
        int v22 = 138543618;
        id v23 = v6;
        __int16 v24 = 2114;
        uint64_t v25 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device with ID %{public}@ is now archived, setting cached consent given at %{public}@", (uint8_t *)&v22, 0x16u);
      }
    }
    id v12 = +[NSMutableDictionary dictionary];
    id v13 = +[NSMutableDictionary dictionary];
    id v14 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
    id v15 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v14 andChangeType:1];
    [v13 setObject:v15 forKeyedSubscript:NRDevicePropertyMigrationConsent];
    id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 40)];

    id v17 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v16 andChangeType:1];
    [v13 setObject:v17 forKeyedSubscript:NRDevicePropertyMigrationConsentDate];

    id v18 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v13];
    id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v18 andChangeType:1];
    [v12 setObject:v19 forKeyedSubscript:v6];
    id v20 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v12];
    id v21 = [*(id *)(a1 + 48) applyDiff:v20];
    [*(id *)(a1 + 56) removeDiffObserver:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  }
}

id sub_10004B2C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = +[NSMutableDictionary dictionary];
  id v5 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
  id v6 = objc_alloc((Class)NRDevicePropertyDiffType);
  int v22 = v5;
  if (*(unsigned char *)(a1 + 32)) {
    id v7 = 0;
  }
  else {
    id v7 = v5;
  }
  id v8 = [v6 initWithDiff:v7 andChangeType:2 * *(unsigned __int8 *)(a1 + 32)];
  id v9 = objc_alloc((Class)NRDeviceDiff);
  uint64_t v28 = _NRDevicePropertyKeychainTurnedOff;
  id v29 = v8;
  uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
  id v11 = [v9 initWithDiffPropertyDiffs:v10];

  id v12 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v11 andChangeType:0];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v13 = v3;
  id v14 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v24;
    do
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v24 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        id v19 = [v13 objectForKeyedSubscript:v18];
        if ([v19 isPaired] && (objc_msgSend(v19, "isArchived") & 1) == 0) {
          [v4 setObject:v12 forKeyedSubscript:v18];
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v15);
  }

  if ([v4 count]) {
    id v20 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v4];
  }
  else {
    id v20 = 0;
  }

  return v20;
}

id sub_10004B684(uint64_t a1)
{
  return [*(id *)(a1 + 32) idsConnectivityTimeout];
}

void sub_10004B76C(uint64_t a1, void *a2)
{
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v22;
    uint64_t v7 = _NRDevicePropertyBluetoothIdentifier;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        uint64_t v10 = [v3 objectForKeyedSubscript:v9];
        id v11 = [v10 objectForKeyedSubscript:v7];
        id v12 = [v11 value];

        id v13 = *(void **)(a1 + 32);
        if (v13 == v12 || [v13 isEqual:v12])
        {
          id v14 = v9;

          goto LABEL_13;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v21 objects:v25 count:16];
      id v14 = 0;
      if (v5) {
        continue;
      }
      break;
    }
  }
  else
  {
    id v14 = 0;
  }
LABEL_13:

  id v15 = +[NRQueue registryDaemonQueue];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10004B97C;
  v18[3] = &unk_100165A70;
  id v16 = *(id *)(a1 + 40);
  id v19 = v14;
  id v20 = v16;
  id v17 = v14;
  [v15 dispatchAsync:v18];
}

uint64_t sub_10004B97C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10004BA54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 activeDeviceID];

  if (v4)
  {
    id v5 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v6 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
    id v7 = [v5 initWithDiff:v6 andChangeType:0];

    id v8 = objc_alloc((Class)NRDeviceDiff);
    uint64_t v21 = _NRDevicePropertyRemoteUnpairingStarted;
    id v22 = v7;
    id v9 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    id v10 = [v8 initWithDiffPropertyDiffs:v9];

    id v11 = objc_alloc((Class)NRDeviceCollectionDiff);
    id v12 = [v3 activeDeviceID];
    id v19 = v12;
    id v13 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v10 andChangeType:1];
    id v20 = v13;
    id v14 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v15 = [v11 initWithDeviceCollectionDiffDeviceDiffs:v14];

    id v16 = [v3 applyDiff:v15];
  }
  id v17 = +[NRQueue registryDaemonQueue];
  [v17 dispatchAsync:*(void *)(a1 + 32)];

  return 0;
}

void sub_10004BE84(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v7 = [v6 copyWithZone:0];

  if (v7)
  {
    id v8 = objc_opt_new();
    id v9 = +[NRMutableDevice diffFrom:v8 to:v7];
    id v10 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v9 andChangeType:0];
    id v11 = objc_alloc((Class)NRDeviceCollectionDiff);
    uint64_t v23 = *(void *)(a1 + 32);
    id v24 = v10;
    id v12 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    id v13 = [v11 initWithDeviceCollectionDiffDeviceDiffs:v12];

    id v14 = +[NRRegistry getReferencedSecureProperties:v5 fromDiff:v13];
  }
  else
  {
    id v14 = 0;
  }
  id v15 = +[NRQueue registryDaemonQueue];
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10004C09C;
  v19[3] = &unk_1001669A0;
  id v16 = *(id *)(a1 + 40);
  id v21 = v14;
  id v22 = v16;
  id v20 = v7;
  id v17 = v14;
  id v18 = v7;
  [v15 dispatchAsync:v19];
}

uint64_t sub_10004C09C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10004C170(uint64_t a1, void *a2)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    uint64_t v7 = _NRDevicePropertyBluetoothIdentifier;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v10 = [v3 objectForKeyedSubscript:v9];
        id v11 = [v10 objectForKeyedSubscript:v7];
        id v12 = [v11 value];

        if ([*(id *)(a1 + 32) isEqual:v12])
        {
          id v13 = +[NRQueue registryDaemonQueue];
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          void v15[2] = sub_10004C350;
          v15[3] = &unk_100165A70;
          id v14 = *(id *)(a1 + 40);
          void v15[4] = v9;
          id v16 = v14;
          [v13 dispatchAsync:v15];

          goto LABEL_11;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

uint64_t sub_10004C350(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10004D248(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    [*(id *)(a1 + 32) setLastCaller:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) xpcInvalidateSwitchAssertionWithIdentifier:v5 block:&stru_1001676C0];
  }
}

uint64_t sub_10004D3B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004DA28(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int8 *)(a1 + 32);
      int v10 = 138413058;
      CFStringRef v11 = @"com.apple.PingMyWatchControlCenterUI";
      __int16 v12 = 1024;
      int v13 = v9;
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%@ setVisibility completed: visibility=%{BOOL}d success=%{BOOL}d error=%@", (uint8_t *)&v10, 0x22u);
    }
  }
}

void sub_10004E92C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_10004E98C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_10004E9B0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_10004EA08(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void sub_10004EA28(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x3Eu);
}

uint64_t sub_10004EA48(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_10004FA5C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      uint64_t v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v6 = [v2 nr_safeDescription];
        sub_1000F8608(v6, (uint64_t)va, v5);
      }
    }
    objc_end_catch();
    JUMPOUT(0x10004FA18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10004FD28(uint64_t a1)
{
  if (!qword_1001A1130)
  {
    uint64_t v1 = (__SecIdentity *)[*(id *)(a1 + 32) _copyPhoneIdentity];
    if (v1)
    {
      id v2 = v1;
      SecIdentityCopyCertificate(v1, (SecCertificateRef *)&qword_1001A1130);
      CFRelease(v2);
    }
    if (!qword_1001A1130)
    {
      id v3 = nr_daemon_log();
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

      if (v4)
      {
        uint64_t v5 = nr_daemon_log();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          sub_1000F868C();
        }
      }
    }
  }
}

void sub_100050354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005036C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005037C(uint64_t a1)
{
}

void sub_100050384(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v8 = [[NRAlbertPairingReportData alloc] initWithDevice:v7 andSecurePropertyStore:v6];
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  BOOL v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) == 0;
  __int16 v12 = nr_daemon_log();
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

  if (!v11)
  {
    if (v13)
    {
      __int16 v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1000F88FC();
      }
    }
    int v15 = [[NRAlbertPairingReportWrapper alloc] initWithAlbertPairingReportData:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    __int16 v16 = nr_daemon_log();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);

    if (v15)
    {
      if (v17)
      {
        long long v18 = nr_daemon_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          sub_1000F88C8();
        }
      }
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 16), *(id *)(a1 + 48));
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 24), *(id *)(a1 + 32));
      long long v19 = [(NRAlbertPairingReportWrapper *)v15 xmlDictionary];
      long long v20 = +[NSPropertyListSerialization dataWithPropertyList:v19 format:100 options:0 error:0];

      if (v20)
      {
        id v21 = nr_daemon_log();
        BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);

        if (v22)
        {
          uint64_t v23 = nr_daemon_log();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v26 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending Albert pairing report", v26, 2u);
          }
        }
        [*(id *)(a1 + 40) _sendPairingActivityData:v20];
      }
      else
      {
        id v24 = nr_daemon_log();
        BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);

        if (!v25) {
          goto LABEL_27;
        }
        long long v20 = nr_daemon_log();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          sub_1000F8894();
        }
      }
    }
    else
    {
      if (!v17) {
        goto LABEL_27;
      }
      long long v20 = nr_daemon_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1000F8860();
      }
    }

LABEL_27:
    goto LABEL_28;
  }
  if (v13)
  {
    nr_daemon_log();
    int v15 = (NRAlbertPairingReportWrapper *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v15->super, OS_LOG_TYPE_ERROR)) {
      sub_1000F882C();
    }
    goto LABEL_27;
  }
LABEL_28:
}

void sub_100050708(_Unwind_Exception *a1)
{
}

void sub_10005077C(id a1)
{
  id v3 = (id)CFPreferencesCopyAppValue(@"albertURL", @"com.apple.NanoRegistry");
  if ([v3 length]) {
    CFStringRef v1 = (const __CFString *)v3;
  }
  else {
    CFStringRef v1 = @"https://albert.apple.com/deviceservices/activity/pairing";
  }
  id v2 = (void *)qword_1001A1138;
  qword_1001A1138 = (uint64_t)v1;
}

void sub_1000509E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100050A00(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  if (v5)
  {
    id v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      id v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000F8930(v5, v8);
      }
    }
    [*(id *)(a1 + 32) invalidateAndCancel];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = 0;
  }
  else
  {
    BOOL v11 = *(void **)(*(void *)(a1 + 40) + 16);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100050B18;
    v14[3] = &unk_1001677B8;
    id v12 = *(id *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 48);
    id v15 = v12;
    uint64_t v16 = v13;
    [v11 grabRegistryWithReadBlock:v14];
    uint64_t v10 = v15;
  }
}

void sub_100050B18(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidateAndCancel];
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

uint64_t sub_100050EF8(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8AB8(a1, v4, v5);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100050F84(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Accepting server connection", v6, 2u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100051030(uint64_t a1)
{
  uint64_t v2 = *(__SecTrust **)(a1 + 56);
  BOOL v3 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10005114C;
  v13[3] = &unk_100167808;
  id v14 = *(id *)(a1 + 40);
  id v15 = *(id *)(a1 + 48);
  OSStatus v4 = SecTrustEvaluateAsyncWithError(v2, v3, v13);
  if (v4)
  {
    int v5 = v4;
    id v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      id v12 = nr_daemon_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_1000F8B2C(v5, v12);
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v8, v9, v10, v11);
  }
}

void sub_10005114C(uint64_t a1, SecTrustRef trust, int a3, uint64_t a4)
{
  if (a3)
  {
    CFDictionaryRef v5 = SecTrustCopyResult(trust);
    id v6 = nr_daemon_log();
    BOOL v7 = v6;
    if (v5)
    {
      BOOL v8 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

      if (v8)
      {
        uint64_t v9 = nr_daemon_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = 138412290;
          CFDictionaryRef v27 = v5;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Trust result information: %@", (uint8_t *)&v26, 0xCu);
        }
      }
      uint64_t v10 = [(__CFDictionary *)v5 objectForKeyedSubscript:kSecTrustExtendedValidation];
      unsigned int v11 = [v10 BOOLValue];
      id v12 = nr_daemon_log();
      uint64_t v13 = v12;
      if (v11)
      {
        BOOL v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

        if (v14)
        {
          id v15 = nr_daemon_log();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v26) = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Extended Validation certificate confirmed", (uint8_t *)&v26, 2u);
          }
        }
        uint64_t v16 = a1 + 32;
      }
      else
      {
        BOOL v24 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

        if (v24)
        {
          BOOL v25 = nr_daemon_log();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            sub_1000F8BD8();
          }
        }
        uint64_t v16 = a1 + 40;
      }
      (*(void (**)(void))(*(void *)v16 + 16))();
    }
    else
    {
      BOOL v22 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

      if (v22)
      {
        uint64_t v23 = nr_daemon_log();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          sub_1000F8BA4();
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  else
  {
    long long v18 = nr_daemon_log();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);

    if (v19)
    {
      long long v20 = nr_daemon_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_1000F8C0C(a4, v20, v21);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100051A80(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_100051B60(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_100051BF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    CFDictionaryRef v5 = *(void **)(a1 + 16);
    id v9 = v4;
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableArray);
      BOOL v7 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v6;

      CFDictionaryRef v5 = *(void **)(a1 + 16);
    }
    id v3 = [v5 addObject:v9];
    id v4 = v9;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_100051C7C(uint64_t result, double a2)
{
  if (result)
  {
    *(unsigned char *)(result + 28) |= 1u;
    *(double *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100051F58(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v13 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v21 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
      }
      else
      {
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        uint64_t v21 = 0;
      }
      *(void *)(a1 + 8) = v21;
    }
    else if (v13 == 2)
    {
      id v22 = objc_alloc_init((Class)NRPBProperty);
      sub_100051BF4(a1, v22);
      if (!PBReaderPlaceMark() || (NRPBPropertyReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else if (v13 == 1)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v18 = v17 + 1;
        if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
        v16 |= (unint64_t)(v19 & 0x7F) << v14;
        if ((v19 & 0x80) == 0) {
          goto LABEL_36;
        }
        v14 += 7;
        BOOL v10 = v15++ >= 9;
        if (v10)
        {
          uint64_t v16 = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v16 = 0;
      }
LABEL_38:
      *(unsigned char *)(a1 + 24) = v16 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_1000526C0(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 24) != 0;
  }
  return result;
}

uint64_t sub_1000526DC(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_1000526F0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void sub_100052704(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100052784(id a1)
{
  CFStringRef v1 = objc_alloc_init(NRFeatureFlags);
  uint64_t v2 = qword_1001A1148;
  qword_1001A1148 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100052944(uint64_t a1, void *a2, void *a3)
{
  char v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = a2;
  id v7 = objc_alloc((Class)NSString);
  unsigned int v8 = [v5 BOOLValue];

  char v9 = "disabled";
  if (v8) {
    char v9 = "enabled";
  }
  id v10 = [v7 initWithFormat:@"%@:%s", v6, v9];

  [v4 addObject:v10];
}

unint64_t sub_100052B40(unint64_t result)
{
  if (result >= 5) {
    return 3;
  }
  return result;
}

CFStringRef sub_100052B50(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"NRPairingStrategyUnknown";
  }
  else {
    return off_100167898[a1 - 1];
  }
}

id sub_100052E20(uint64_t a1)
{
  return [*(id *)(a1 + 32) idsTimerTimedOut];
}

uint64_t sub_100052E28(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v7 = v3;
    id v5 = [v4[3] errors];
    [v5 addObject:v7];

    [*(id *)(*(void *)(a1 + 32) + 24) persist];
    char v4 = (id *)[*(id *)(a1 + 32) rollback];
LABEL_3:
    id v3 = v7;
    goto LABEL_5;
  }
  if (!*((unsigned char *)v4 + 49))
  {
    id v7 = 0;
    char v4 = (id *)[v4 transactionDidComplete];
    goto LABEL_3;
  }
LABEL_5:

  return _objc_release_x1(v4, v3);
}

void sub_100052F78(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 32);
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = [*(id *)(*(void *)(a1 + 32) + 32) UUIDString];
        *(_DWORD *)long long buf = 138412290;
        char v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingSwitchActivePairedDevice %@", buf, 0xCu);
      }
    }
    id v12 = *(id *)(a1 + 40);
    id v7 = [*(id *)(*(void *)(a1 + 32) + 24) queue];
    IDSLocalPairingSwitchActivePairedDevice();

    unsigned int v8 = v12;
  }
  else
  {
    if (v4)
    {
      char v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingDisconnectActivePairedDevice", buf, 2u);
      }
    }
    id v11 = *(id *)(a1 + 40);
    id v10 = [*(id *)(*(void *)(a1 + 32) + 24) queue];
    IDSLocalPairingDisconnectActivePairedDevice();

    unsigned int v8 = v11;
  }
}

void sub_1000531B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  id v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F8CC0(a1, (uint64_t)v3, v7);
      }
    }
    if (_NRIsInternalInstall())
    {
      if ([v3 code] == (id)4)
      {
        unsigned int v8 = [v3 domain];
        unsigned int v9 = [v8 isEqualToString:IDSLocalPairingErrorDomain];

        if (v9)
        {
          id v10 = [*(id *)(*(void *)(a1 + 32) + 40) serviceFromClass:objc_opt_class()];
          id v11 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:@"nrDeviceIdentifier"];
          LOBYTE(v22) = 0;
          [v10 unpairDeviceWithPairingID:v11 obliterationString:0 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanFalse pairingReport:0 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v22];
          id v12 = nr_daemon_log();
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

          if (v13)
          {
            char v14 = nr_daemon_log();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
              sub_1000F8C7C(v14);
            }
          }
          unsigned int v15 = [*(id *)(*(void *)(a1 + 32) + 40) serviceFromClass:objc_opt_class()];
          [v15 resetStateForAlertWithName:@"InternalIDSPairingLost"];
          [v15 setEnabled:1 withName:@"InternalIDSPairingLost"];
          [v15 presentAlertsIfNeeded];
        }
      }
    }
    if (*(void *)(a1 + 40))
    {
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      uint64_t v16 = [v3 description];
      int v26 = v16;
      uint64_t v17 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      unint64_t v18 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionSetActiveIDSDevice" code:0 userInfo:v17];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  else
  {
    BOOL v19 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v19)
    {
      unint64_t v20 = nr_daemon_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = [*(id *)(*(void *)(a1 + 32) + 32) UUIDString];
        *(_DWORD *)long long buf = 138412290;
        BOOL v24 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingSwitchActivePairedDevice %@ completed", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100053504(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  id v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F8D78((uint64_t)v3, v7);
      }
    }
    if (*(void *)(a1 + 32))
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      unsigned int v8 = [v3 description];
      unsigned int v15 = v8;
      unsigned int v9 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
      id v10 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionSetActiveIDSDevice" code:2 userInfo:v9];

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else
  {
    BOOL v11 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      id v12 = nr_daemon_log();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingDisconnectActivePairedDevice completed", v13, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_100053CA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) idsTimerTimedOut];
}

uint64_t sub_100053CAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(id **)(a1 + 32);
  if (v3)
  {
    id v7 = v3;
    id v5 = [v4[3] errors];
    [v5 addObject:v7];

    BOOL v4 = *(id **)(a1 + 32);
LABEL_3:
    BOOL v4 = (id *)[v4 transactionDidComplete];
    id v3 = v7;
    goto LABEL_5;
  }
  if (!*((unsigned char *)v4 + 49))
  {
    id v7 = 0;
    goto LABEL_3;
  }
LABEL_5:

  return _objc_release_x1(v4, v3);
}

void sub_100054C50(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100054C6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained cancelDiscoveryCounter];
  WeakRetained[5] = 2;
  [WeakRetained update];
}

uint64_t sub_100054FE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 56);
  *(void *)(v2 + 56) = 0;

  BOOL v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

id sub_100055174(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100055250(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100055820(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100055964(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000567D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    BOOL v4 = [*(id *)(a1 + 32) errors];
    [v4 addObject:v3];

    BOOL v6 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = [*(id *)(a1 + 32) queue];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000568E0;
    v11[3] = &unk_1001678E8;
    id v8 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 56);
    id v12 = v8;
    uint64_t v13 = v9;
    [v6 unquarantineDataWithStoreUUID:v5 services:0 queue:v7 completion:v11];
  }
  else
  {
    id v10 = [*(id *)(a1 + 56) delegate];
    [v10 transactionDidComplete:*(void *)(a1 + 56)];
  }
}

void sub_1000568E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = a2;
    uint64_t v5 = [v3 errors];
    [v5 addObject:v4];
  }
  id v6 = [*(id *)(a1 + 40) delegate];
  [v6 transactionDidComplete:*(void *)(a1 + 40)];
}

void sub_100056A8C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = [*(id *)(a1 + 32) errors];
    [v3 addObject:v4];
  }
  else
  {
    id v3 = [*(id *)(a1 + 40) delegate];
    [v3 transactionDidComplete:*(void *)(a1 + 40)];
  }
}

void sub_100056BE8(id a1)
{
  if (_NRIsDemoModeEnabled()) {
    char v1 = 1;
  }
  else {
    char v1 = MGGetBoolAnswer();
  }
  byte_1001A1158 = v1;
}

void sub_100056C48(id a1)
{
  char v1 = objc_alloc_init(NRVolatilePreferences);
  uint64_t v2 = (void *)qword_1001A1170;
  qword_1001A1170 = (uint64_t)v1;

  id v3 = (void *)qword_1001A1170;

  [v3 setDomain:@"com.apple.NanoRegistry.NRRootCommander.volatile"];
}

void sub_100056D30()
{
  if ([(id)objc_opt_class() _supportsWatchCompanionCapability])
  {
    id v0 = [objc_alloc((Class)NSXPCConnection) initWithMachServiceName:@"com.apple.nano.nanoregistry.nanoregistrylaunchd" options:4096];
    char v1 = (void *)qword_1001A1178;
    qword_1001A1178 = (uint64_t)v0;

    [(id)qword_1001A1178 setInvalidationHandler:&stru_100167948];
    [(id)qword_1001A1178 setInterruptionHandler:&stru_100167968];
    id v2 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NRLaunchDaemonXPCDaemonDelegate];
    [(id)qword_1001A1178 setRemoteObjectInterface:v2];
    [(id)qword_1001A1178 resume];
  }
}

void sub_100056E04(id a1)
{
  char v1 = (void *)qword_1001A1178;
  qword_1001A1178 = 0;

  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8DF0();
    }
  }
}

void sub_100056E78(id a1)
{
  char v1 = nr_daemon_log();
  BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_ERROR);

  if (v2)
  {
    BOOL v3 = nr_daemon_log();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1000F8E24();
    }
  }
}

void sub_100056FCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000F8E58(a1, v3);
    }
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

void sub_100057154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000F8EEC(a1, v3);
    }
  }
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(void))(v7 + 16))();
  }
}

void sub_100057668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1000576CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000576DC(uint64_t a1)
{
}

void sub_1000576E4(uint64_t a1)
{
  [(id)qword_1001A1170 setObject:&off_1001769D0 forKeyedSubscript:@"daemonsEnabled"];
  [(id)qword_1001A1170 synchronize];
  BOOL v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  uint64_t v5 = nrGetPairingError();
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_100057798(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_4;
  }
  uint64_t v6 = [v4 domain];
  if ([v6 isEqualToString:@"com.apple.nanoregistry.pairingerror"])
  {
    id v7 = [v5 code];

    if (v7 == (id)5)
    {
LABEL_4:
      id v8 = +[NSNumber numberWithInt:(*(_DWORD *)(a1 + 56) + 1)];
      [(id)qword_1001A1170 setObject:v8 forKeyedSubscript:@"daemonsEnabled"];

      [(id)qword_1001A1170 synchronize];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      goto LABEL_11;
    }
  }
  else
  {
  }
  [(id)qword_1001A1170 setObject:&off_1001769D0 forKeyedSubscript:@"daemonsEnabled"];
  [(id)qword_1001A1170 synchronize];
  uint64_t v9 = nr_daemon_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);

  if (v10)
  {
    BOOL v11 = nr_daemon_log();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1000F8FB4(v5);
    }
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
LABEL_11:
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

id sub_100057A08(uint64_t a1)
{
  return [*(id *)(a1 + 32) _deletePairedStoreWithUUID:*(void *)(a1 + 40) withQueue:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
}

void sub_100057DA4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100057DC4(uint64_t a1)
{
  BOOL v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  uint64_t v5 = *(void (***)(void, void))(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 32);
    if (v6)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100057ED4;
      block[3] = &unk_100165D10;
      uint64_t v9 = v5;
      dispatch_async(v6, block);
      id v7 = v9;
    }
    else
    {
      id v7 = nrGetPairingError();
      ((void (**)(void, void *))v5)[2](v5, v7);
    }
  }
}

void sub_100057ED4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100057F34(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void (**)(void, void))a1[5];
  if (v4)
  {
    uint64_t v5 = a1[4];
    if (v5)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100058018;
      v8[3] = &unk_100165A70;
      BOOL v10 = v4;
      id v9 = v3;
      dispatch_async(v5, v8);
    }
    else
    {
      ((void (**)(void, id))v4)[2](v4, v3);
    }
  }
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

uint64_t sub_100058018(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_10005802C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000585DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000585FC(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  uint64_t v5 = *(void (***)(void, void))(a1 + 40);
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 32);
    if (v6)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10005870C;
      block[3] = &unk_100165D10;
      id v9 = v5;
      dispatch_async(v6, block);
      id v7 = v9;
    }
    else
    {
      id v7 = nrGetPairingError();
      ((void (**)(void, void *))v5)[2](v5, v7);
    }
  }
}

void sub_10005870C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10005876C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSNumber numberWithUnsignedLongLong:a1[7] + 1];
  [(id)qword_1001A1170 setObject:v4 forKeyedSubscript:@"cleanupIndex"];

  [(id)qword_1001A1170 synchronize];
  if (v3)
  {
    uint64_t v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000F9038(v3);
      }
    }
  }
  id v8 = (void (**)(void, void))a1[5];
  if (v8)
  {
    id v9 = a1[4];
    if (v9)
    {
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_1000588E0;
      v12[3] = &unk_100165A70;
      NSErrorUserInfoKey v14 = v8;
      id v13 = v3;
      dispatch_async(v9, v12);
    }
    else
    {
      ((void (**)(void, id))v8)[2](v8, v3);
    }
  }
  uint64_t v10 = *(void *)(a1[6] + 8);
  BOOL v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

uint64_t sub_1000588E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000588F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100058908(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100058BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100058BF0(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    BOOL v6 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100058CD4;
    block[3] = &unk_100165D10;
    id v8 = v5;
    dispatch_async(v6, block);
  }
}

void sub_100058CD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100058D34(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v5)
    {
      BOOL v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000F90BC(v3);
      }
    }
  }
  id v7 = (void *)a1[5];
  if (v7)
  {
    id v8 = a1[4];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100058E50;
    v11[3] = &unk_100165A70;
    id v13 = v7;
    id v12 = v3;
    dispatch_async(v8, v11);
  }
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
}

uint64_t sub_100058E50(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100058E64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100059134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005914C(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  BOOL v5 = *(void **)(a1 + 40);
  if (v5)
  {
    BOOL v6 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100059230;
    block[3] = &unk_100165D10;
    id v8 = v5;
    dispatch_async(v6, block);
  }
}

void sub_100059230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100059290(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v5)
    {
      BOOL v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000F9140(v3);
      }
    }
  }
  id v7 = (void *)a1[5];
  if (v7)
  {
    id v8 = a1[4];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_1000593AC;
    v11[3] = &unk_100165A70;
    id v13 = v7;
    id v12 = v3;
    dispatch_async(v8, v11);
  }
  uint64_t v9 = *(void *)(a1[6] + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
}

uint64_t sub_1000593AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000593C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  nrGetPairingError();
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10005967C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100059694(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F8F80();
    }
  }
  BOOL v5 = *(void **)(a1 + 40);
  if (v5)
  {
    BOOL v6 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100059778;
    block[3] = &unk_100165D10;
    id v8 = v5;
    dispatch_async(v6, block);
  }
}

uint64_t sub_100059778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100059788(void *a1)
{
  id v2 = (void *)a1[5];
  if (v2)
  {
    BOOL v3 = a1[4];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100059830;
    block[3] = &unk_100165D10;
    id v7 = v2;
    dispatch_async(v3, block);
  }
  uint64_t v4 = *(void *)(a1[6] + 8);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;
}

uint64_t sub_100059830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100059840(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100059B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100059BEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    BOOL v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000F91C4(v3);
    }
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
}

void sub_100059C7C(void *a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  if (a3)
  {
    id v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000F8F80();
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a2);
    uint64_t v10 = *(void *)(a1[6] + 8);
    BOOL v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = 0;
  }
}

uint64_t sub_100059DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100059E88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10005ADDC(id a1)
{
  uint64_t v1 = (void *)CFPreferencesCopyAppValue(@"MinimumRSSIValue", @"com.apple.Preferences");
  if (v1)
  {
    id v2 = v1;
    qword_1001A05E0 = (uint64_t)[v1 integerValue];
    uint64_t v1 = v2;
  }
}

void sub_10005AE78(id a1)
{
  uint64_t v1 = (void *)CFPreferencesCopyAppValue(@"MinimumProxRSSIValue", @"com.apple.Preferences");
  if (v1)
  {
    id v2 = v1;
    qword_1001A05E8 = (uint64_t)[v1 integerValue];
    uint64_t v1 = v2;
  }
}

void sub_10005BE9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) delegate];
  if (v2)
  {
    char v4 = objc_opt_respondsToSelector();

    if ((v4 & 1) == 0) {
      return;
    }
    id v6 = [*(id *)(a1 + 40) delegate];
    [v6 devicePairingFailure:*(void *)(a1 + 40)];
  }
  else
  {
    uint64_t v5 = objc_opt_respondsToSelector();

    if ((v5 & 1) == 0) {
      return;
    }
    id v6 = [*(id *)(a1 + 40) delegate];
    [v6 devicePairingSuccess:*(void *)(a1 + 40)];
  }
}

void sub_10005C098(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 120);
  *(void *)(v2 + 120) = 0;

  id v4 = +[NSError errorWithDomain:@"com.apple.NanoRegistry.CoreBluetooth" code:123 userInfo:&off_100177A78];
  [*(id *)(a1 + 32) cancelPairingWithError:v4];
}

id sub_10005C4A4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isPairing];
  if ((result & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 updateAndEnterState:&off_100176A00];
  }
  return result;
}

id sub_10005C664(uint64_t a1)
{
  return [*(id *)(a1 + 32) pairer:*(void *)(a1 + 40) requestWithType:0 passkey:0];
}

id sub_10005D4F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancelPairingWithError:*(void *)(a1 + 40)];
}

id sub_10005D500(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancelPairingWithError:*(void *)(*(void *)(a1 + 32) + 112)];
}

id sub_10005D50C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAndEnterState:&off_100176A18];
}

id sub_10005D51C(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAndEnterState:&off_100176A30];
}

void sub_10005D52C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairers];
  [v2 pairer:0 requestWithType:*(void *)(*(void *)(a1 + 32) + 128) passkey:*(void *)(*(void *)(a1 + 32) + 136)];
}

id sub_10005D588(uint64_t a1)
{
  return [*(id *)(a1 + 32) cancelPairingWithError:*(void *)(a1 + 40)];
}

id sub_10005E160(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) pairerDidBeginToPair:];
}

id sub_10005E590(uint64_t a1)
{
  return [*(id *)(a1 + 32) pairer:0 completedWithError:0];
}

uint64_t sub_10005EC88(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 12) |= 1u;
    *(unsigned char *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_10005EDE4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_30:
      *(unsigned char *)(a1 + 8) = v14 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_10005F168()
{
  if (qword_1001A11A0 != -1) {
    dispatch_once(&qword_1001A11A0, &stru_100167B10);
  }
  id v0 = (void *)qword_1001A1198;

  return v0;
}

void sub_10005F1BC(id a1)
{
  v4[0] = NRDevicePropertyPairingID;
  v4[1] = NRDevicePropertyIsPaired;
  v4[2] = NRDevicePropertyIsActive;
  v4[3] = NRDevicePropertyIsSetup;
  void v4[4] = NRDevicePropertyAdvertisedName;
  void v4[5] = NRDevicePropertyName;
  void v4[6] = NRDevicePropertyColor;
  void v4[7] = NRDevicePropertySystemVersion;
  v4[8] = NRDevicePropertyProductType;
  v4[9] = NRDevicePropertyChipID;
  v4[10] = NRDevicePropertyHomeButtonType;
  v4[11] = NRDevicePropertySystemName;
  v4[12] = NRDevicePropertyMarketingProductName;
  v4[13] = NRDevicePropertySystemBuildVersion;
  v4[14] = NRDevicePropertyLocalPairingDataStorePath;
  v4[15] = NRDevicePropertyLocalizedModel;
  v4[16] = NRDevicePropertyRegionCode;
  v4[17] = NRDevicePropertyRegionInfo;
  v4[18] = NRDevicePropertyModelNumber;
  v4[19] = NRDevicePropertyHWModelString;
  v4[20] = NRDevicePropertyScreenSize;
  v4[21] = NRDevicePropertyClass;
  v4[22] = NRDevicePropertyEnclosureColor;
  v4[23] = NRDevicePropertyEnclosureMaterial;
  v4[24] = NRDevicePropertyBuildType;
  v4[25] = NRDevicePropertyDmin;
  v4[26] = NRDevicePropertyDeviceBrand;
  v4[27] = NRDevicePropertyDeviceSubBrand;
  v4[28] = NRDevicePropertyGreenTeaDevice;
  v4[29] = NRDevicePropertySigningFuse;
  v4[30] = NRDevicePropertyScreenScale;
  v4[31] = NRDevicePropertyPairingCompatibilityVersion;
  v4[32] = NRDevicePropertyMaxPairingCompatibilityVersion;
  v4[33] = NRDevicePropertyMinPairingCompatibilityVersion;
  v4[34] = _NRDevicePropertyBluetoothIdentifier;
  v4[35] = _NRDevicePropertyNetworkRelayIdentifier;
  v4[36] = NRDevicePropertyDeviceNameString;
  v4[37] = NRDevicePropertyCurrentUserLocale;
  v4[38] = NRDevicePropertyPreferredLanguages;
  v4[39] = NRDevicePropertyPairedDate;
  v4[40] = NRDevicePropertyMarketingVersion;
  v4[41] = NRDevicePropertyMainScreenWidth;
  v4[42] = NRDevicePropertyMainScreenHeight;
  v4[43] = _NRDevicePropertyCapabilities;
  v4[44] = NRDevicePropertyIsInternalInstall;
  v4[45] = _NRDevicePropertyStatusCode;
  v4[46] = _NRDevicePropertyCompatibilityState;
  v4[47] = _NRDevicePropertyLastPairingError;
  v4[48] = _NRDevicePropertyPairingStatusBluetoothPaired;
  v4[49] = _NRDevicePropertyRemoteUnpairingStarted;
  v4[50] = NRDevicePropertyTotalStorage;
  v4[51] = NRDevicePropertyLastActiveDate;
  v4[52] = NRDevicePropertyLastInactiveDate;
  v4[53] = NRDevicePropertyRegulatoryModelNumber;
  v4[54] = _NRDevicePropertyAdvertisingIdentifierSeed;
  v4[55] = _NRDevicePropertyRSSI;
  v4[56] = NRDevicePropertyPairedDeviceCount;
  v4[57] = NRDevicePropertyBasebandRegionSKURadioTechnology;
  v4[58] = NRDevicePropertyWifiAntennaSKUVersion;
  v4[59] = NRDevicePropertyHasSEP;
  v4[60] = NRDevicePropertyHasSecureElement;
  v4[61] = NRDevicePropertyDeviceCoverGlassColor;
  v4[62] = NRDevicePropertyDeviceHousingColor;
  v4[63] = NRDevicePropertyDeviceBackingColor;
  v4[64] = NRDevicePropertyAbsoluteDepthLimit;
  v4[65] = NRDevicePropertyIsArchived;
  v4[66] = NRDevicePropertyMigrationConsent;
  v4[67] = NRDevicePropertyMigrationConsentDate;
  v4[68] = NRDevicePropertyFractionCompleted;
  v4[69] = _NRDevicePropertyMigrationCount;
  v4[70] = _NRDevicePropertyMigrationKeyRevision;
  v4[71] = NRDevicePropertyCPUType;
  v4[72] = NRDevicePropertyCPUSubType;
  v4[73] = NRDevicePropertyMainScreenClass;
  v4[74] = _NRDevicePropertyLastRSSIUpdate;
  v4[75] = _NRDevicePropertyKeychainTurnedOff;
  v4[76] = NRDevicePropertyIsAltAccount;
  v4[77] = NRDevicePropertyDeviceInDemoMode;
  v4[78] = NRDevicePropertyCellularEnabled;
  v4[79] = NRDevicePropertyCompatibleDeviceFallback;
  v4[80] = NRDevicePropertyArtworkTraits;
  v4[81] = _NRDevicePropertyDiscoveryMechanism;
  v4[82] = _NRDevicePropertySupportedPairingStrategy;
  v4[83] = _NRDevicePropertyPairedWithStrategy;
  v4[84] = NRDevicePropertyWatchBuddyStage;
  v4[85] = NRDevicePropertyMDMManagementState;
  v4[86] = NRDevicePropertyMedicationScheduleCompatibilityVersion;
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:87];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_1001A1198;
  qword_1001A1198 = v2;
}

id sub_10005F74C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_10005F168();
  id v3 = [v2 containsObject:v1];

  return v3;
}

uint64_t sub_10005F93C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      break;
    }
    unint64_t v13 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      char v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = 0;
      *(unsigned char *)(a1 + 28) |= 2u;
      while (1)
      {
        uint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v20 = v19 + 1;
        if (v19 == -1 || v20 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0) {
          goto LABEL_34;
        }
        v16 += 7;
        BOOL v10 = v17++ >= 9;
        if (v10)
        {
          LODWORD(v18) = 0;
          goto LABEL_36;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_34:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v18) = 0;
      }
LABEL_36:
      *(_DWORD *)(a1 + 24) = v18;
    }
    else if (v13 == 2)
    {
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v22 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v23 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 8;
      }
      else
      {
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
        uint64_t v23 = 0;
      }
      *(void *)(a1 + 8) = v23;
    }
    else if (v13 == 1)
    {
      uint64_t v14 = PBReaderReadData();
      unint64_t v15 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100060674(void *a1)
{
  uint64_t v2 = (*(void (**)(void))(a1[5] + 16))();
  id v3 = [v2 objectForKeyedSubscript:@"NROSLogStateHistoryIndex"];
  id v4 = [v3 unsignedLongLongValue];

  if (!a1[6])
  {
    unsigned int v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      uint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1[4] + 16);
        char v9 = "stale";
        if (v8 == v4) {
          char v9 = "fresh";
        }
        int v19 = 136315650;
        unint64_t v20 = v9;
        __int16 v21 = 2048;
        unint64_t v22 = v8;
        __int16 v23 = 2048;
        id v24 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cached state dump is %s:- cached history index %lu; current history index %lu",
          (uint8_t *)&v19,
          0x20u);
      }
    }
  }
  uint64_t v10 = a1[4];
  if (*(id *)(v10 + 16) != v4)
  {
    uint64_t v11 = [v2 objectForKeyedSubscript:@"NROSLogStateStateString"];
    uint64_t v12 = a1[4];
    unint64_t v13 = *(void **)(v12 + 8);
    *(void *)(v12 + 8) = v11;

    *(void *)(a1[4] + 16) = v4;
    uint64_t v10 = a1[4];
  }
  unint64_t v14 = 15872 * a1[6];
  if (v14 >= (unint64_t)[*(id *)(v10 + 8) length])
  {
    unsigned int v17 = 0;
  }
  else
  {
    unint64_t v15 = (char *)[*(id *)(a1[4] + 8) length];
    if (v14 + 15872 >= (unint64_t)v15) {
      char v16 = v15;
    }
    else {
      char v16 = (char *)(v14 + 15872);
    }
    unsigned int v17 = [[*(id *)(a1[4] + 8) substringWithRange:v14, &v16[-v14]];
  }

  return v17;
}

_DWORD *sub_10006093C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) != 3) {
    return 0;
  }
  id v3 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  if (v3)
  {
    id v4 = +[NSPropertyListSerialization dataWithPropertyList:v3 format:200 options:0 error:0];
    unsigned int v5 = malloc_type_calloc(1uLL, (size_t)[v4 length] + 200, 0x170F22EAuLL);
    *unsigned int v5 = 1;
    v5[1] = [v4 length];
    [*(id *)(a1 + 32) UTF8String];
    __strlcpy_chk();
    id v6 = v4;
    memcpy(v5 + 50, [v6 bytes], (size_t)[v6 length]);
  }
  else
  {
    unsigned int v5 = 0;
  }

  return v5;
}

uint64_t sub_100060DE0(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 40) |= 8u;
    *(_DWORD *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_100060E08(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 40) |= 1u;
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100060E30(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 40) |= 2u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_100060E58(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 40) |= 4u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_100060E80(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 40) |= 0x10u;
    *(unsigned char *)(result + 36) = a2;
  }
  return result;
}

uint64_t sub_100061110(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 8u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_57;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_59;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_57:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_59:
        uint64_t v37 = 32;
        goto LABEL_72;
      case 2u:
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v21 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              BOOL v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_63;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_63:
        uint64_t v37 = 8;
        goto LABEL_72;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 2u;
        while (2)
        {
          unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              BOOL v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_67:
        uint64_t v37 = 12;
        goto LABEL_72;
      case 4u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 40) |= 4u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_71:
        uint64_t v37 = 16;
LABEL_72:
        *(_DWORD *)(a1 + v37) = v14;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 40) |= 0x10u;
        break;
      case 6u:
        uint64_t v35 = PBReaderReadString();
        id v36 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v35;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
      v32 |= (unint64_t)(v34 & 0x7F) << v30;
      if ((v34 & 0x80) == 0) {
        goto LABEL_74;
      }
      v30 += 7;
      BOOL v9 = v31++ >= 9;
      if (v9)
      {
        uint64_t v32 = 0;
        goto LABEL_76;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_74:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v32 = 0;
    }
LABEL_76:
    *(unsigned char *)(a1 + 36) = v32 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100061744(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

uint64_t sub_100061AD0(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

uint64_t sub_100061AE4(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

uint64_t sub_100061AF8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_100061D74(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadString();
      unsigned int v13 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100062010(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_100062270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062288(uint64_t a1, void *a2)
{
  id v6 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6F13FF03-6511-4180-BBF3-4C231C10D458"];
  if ([v6 supportsCapability:v3])
  {
    unsigned __int8 v4 = [v6 isAltAccount];

    if ((v4 & 1) == 0)
    {
      char v5 = 1;
      goto LABEL_6;
    }
  }
  else
  {
  }
  char v5 = 0;
LABEL_6:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
}

void sub_100062914(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 activeDeviceID];
  char v5 = v4;
  if (v4 && [v4 isEqual:*(void *)(*(void *)(a1 + 32) + 48)])
  {
    id v6 = [v3 activeDevice];
    unint64_t v7 = [v6 objectForKeyedSubscript:NRDevicePropertyIsPaired];
    char v8 = [v7 value];

    BOOL v9 = [v3 activeDevice];
    int v10 = [v9 objectForKeyedSubscript:_NRDevicePropertyCompatibilityState];
    uint64_t v11 = [v10 value];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    unsigned int v13 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100062BE0;
    block[3] = &unk_100165668;
    uint64_t v14 = *(void *)(a1 + 32);
    id v24 = v11;
    uint64_t v25 = v14;
    id v26 = v8;
    id v27 = v5;
    id v15 = v8;
    id v16 = v11;
    dispatch_async(v13, block);
  }
  else
  {
    unsigned int v17 = nr_daemon_log();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      unsigned int v19 = nr_daemon_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v29 = v20;
        __int16 v30 = 2112;
        unsigned int v31 = v5;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Pairing ID dont match. Transaction is for %@, but active device is %@. Not starting sync.", buf, 0x16u);
      }
    }
    id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
    char v21 = [v16 queue];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_100062FAC;
    v22[3] = &unk_1001655F8;
    void v22[4] = *(void *)(a1 + 32);
    dispatch_async(v21, v22);
  }
}

id sub_100062BE0(id *a1)
{
  if ([a1[4] integerValue] == (id)2)
  {
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      unsigned __int8 v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v27) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Watch needs an update. Not starting a paired sync.", (uint8_t *)&v27, 2u);
      }
    }
    return [a1[5] forceSyncCompleteAndFinishTransaction];
  }
  if ([a1[4] integerValue] == (id)4)
  {
    unsigned int v6 = [a1[6] BOOLValue];
    unint64_t v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      if (v8)
      {
        BOOL v9 = nr_daemon_log();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v27) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device is paired. Starting paired sync.", (uint8_t *)&v27, 2u);
        }
      }
      objc_storeStrong((id *)a1[5] + 6, a1[7]);
      IDSInitialLocalSyncStartedForServices();
      [a1[5] updatePairedSyncNotifyToken:1 shouldPost:1];
      int v10 = a1[5];
      if (!v10[3])
      {
        id v11 = [objc_alloc((Class)PSYInitialSyncStateObserver) initWithDelegate:a1[5]];
        uint64_t v12 = a1[5];
        unsigned int v13 = (void *)v12[3];
        v12[3] = v11;

        int v10 = a1[5];
      }
      if (!v10[4])
      {
        uint64_t v14 = objc_opt_new();
        id v15 = a1[5];
        id v16 = (void *)v15[4];
        void v15[4] = v14;

        [*((id *)a1[5] + 4) setDelegate:];
        [*((id *)a1[5] + 4) startObservingSyncSessionsWithCompletion:&stru_100167BB8];
        int v10 = a1[5];
      }
      return [v10 querySyncStateForActiveDevice];
    }
    if (v8)
    {
      char v21 = nr_daemon_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v27) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Device is NOT paired. NOT Starting paired sync.", (uint8_t *)&v27, 2u);
      }
    }
    [a1[5] updatePairedSyncNotifyToken:0 shouldPost:0];
    id WeakRetained = objc_loadWeakRetained((id *)a1[5] + 1);
    unsigned int v23 = [WeakRetained errors];
    id v24 = +[NSError errorWithDomain:@"pairedSyncErrorDomain" code:0 userInfo:0];
    [v23 addObject:v24];

    uint64_t v20 = objc_loadWeakRetained((id *)a1[5] + 1);
    [v20 persist];
    goto LABEL_27;
  }
  id v17 = [a1[4] integerValue];
  BOOL v18 = nr_daemon_log();
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

  if (v17 == (id)5)
  {
    if (!v19) {
      return [a1[5] doneWaitingForPairedSync];
    }
    uint64_t v20 = nr_daemon_log();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v27) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Device is Tinker paired. NOT Starting paired sync.", (uint8_t *)&v27, 2u);
    }
LABEL_27:

    return [a1[5] doneWaitingForPairedSync];
  }
  if (v19)
  {
    uint64_t v25 = nr_daemon_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      id v26 = a1[4];
      int v27 = 138412290;
      id v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Can't sync when updating or still pairing. Forcing fake sync completion. (Compatibility state %@)", (uint8_t *)&v27, 0xCu);
    }
  }
  [a1[5] updatePairedSyncNotifyToken:0 shouldPost:0];
  return [a1[5] forceSyncStartAndEndWithError];
}

id sub_100062FAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  BOOL v3 = [WeakRetained errors];
  unsigned __int8 v4 = +[NSError errorWithDomain:@"pairedSyncErrorDomain" code:0 userInfo:0];
  [v3 addObject:v4];

  id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  [v5 persist];

  unsigned int v6 = *(void **)(a1 + 32);

  return [v6 doneWaitingForPairedSync];
}

void sub_100063414(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  unint64_t v7 = [WeakRetained queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000634EC;
  block[3] = &unk_100167BE0;
  uint64_t v8 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v8;
  char v13 = a2;
  id v9 = v5;
  dispatch_async(v7, block);
}

void *sub_1000634EC(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  if (*(void *)(a1 + 32))
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000F95B4(v2, v5);
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8));
    unint64_t v7 = [WeakRetained errors];
    [v7 addObject:*(void *)(a1 + 32)];

    id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8));
    [v8 persist];

    return [*(id *)(a1 + 40) doneWaitingForPairedSync];
  }
  else
  {
    uint64_t result = *(void **)(a1 + 40);
    if (*(unsigned char *)(a1 + 48))
    {
      return [result doneWaitingForPairedSync];
    }
    else if (!result[10])
    {
      uint64_t v10 = +[NRPowerAssertionActivity activityWithName:@"syncActive"];
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(v11 + 80);
      *(void *)(v11 + 80) = v10;
      return (void *)_objc_release_x1(v10, v12);
    }
  }
  return result;
}

void sub_100063704(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Done forcing fake sync start.", buf, 2u);
    }
  }
  dispatch_time_t v5 = dispatch_time(0, 10000000000);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  unint64_t v7 = [WeakRetained queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100063830;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_after(v5, v7, block);
}

id sub_100063830(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000638A0;
  v3[3] = &unk_100165980;
  void v3[4] = v1;
  return [v1 forceSyncComplete:v3];
}

void sub_1000638A0(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Done forcing fake sync completion. Set error and return.", buf, 2u);
    }
  }
  dispatch_time_t v5 = dispatch_time(0, 10000000000);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
  unint64_t v7 = [WeakRetained queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000639CC;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_after(v5, v7, block);
}

id sub_1000639CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  BOOL v3 = [WeakRetained errors];
  BOOL v4 = +[NSError errorWithDomain:@"pairedSyncErrorDomain" code:2 userInfo:0];
  [v3 addObject:v4];

  id v5 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8));
  [v5 persist];

  unsigned int v6 = *(void **)(a1 + 32);

  return [v6 doneWaitingForPairedSync];
}

id sub_100063C88(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100063CF8;
  v3[3] = &unk_100165980;
  void v3[4] = v1;
  return [v1 forceSyncComplete:v3];
}

void sub_100063CF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    unsigned int v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "forceSyncCompleteAndFinishTransaction: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  [*(id *)(a1 + 32) doneWaitingForPairedSync];
}

id sub_100063E98(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 48) isEqual:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 doneWaitingForPairedSync];
  }
  return result;
}

id sub_100063FA8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 48) isEqual:*(void *)(a1 + 40)];
  if (result)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 doneWaitingForPairedSync];
  }
  return result;
}

id sub_100064098(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateWhetherToStartSync];
}

void sub_100064294(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id v3 = [*(id *)(a1 + 40) pairingIdentifier];
  LODWORD(v2) = [v2 isEqual:v3];

  if (v2)
  {
    BOOL v4 = objc_opt_class();
    BOOL v5 = [*(id *)(a1 + 40) activities];
    id v7 = [v4 currentActivityLabel:v5];

    unsigned int v6 = v7;
    if (v7)
    {
      +[NRPowerAssertionActivity renameAssertionWithSuffix:v7];
      unsigned int v6 = v7;
    }
  }
}

void sub_100064424(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id v3 = [*(id *)(a1 + 40) updatedSession];
  BOOL v4 = [v3 pairingIdentifier];
  LODWORD(v2) = [v2 isEqual:v4];

  if (v2)
  {
    BOOL v5 = objc_opt_class();
    unsigned int v6 = [*(id *)(a1 + 40) updatedSession];
    id v7 = [v6 activities];
    id v9 = [v5 currentActivityLabel:v7];

    id v8 = v9;
    if (v9)
    {
      +[NRPowerAssertionActivity renameAssertionWithSuffix:v9];
      id v8 = v9;
    }
  }
}

void sub_1000645D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48);
  id v3 = [*(id *)(a1 + 40) pairingIdentifier];
  LODWORD(v2) = [v2 isEqual:v3];

  if (v2)
  {
    BOOL v4 = *(void **)(a1 + 32);
    [v4 doneWaitingForPairedSync];
  }
}

uint64_t sub_100064BB0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(unsigned __int8 *)(result + 40);
  if (*(unsigned __int8 *)(v1 + 96) != v2) {
    *(unsigned char *)(v1 + 96) = v2;
  }
  return result;
}

void sub_100064C40(uint64_t a1)
{
  int v2 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(unsigned __int8 **)(a1 + 32);
    int v4 = v3[64];
    int v5 = v3[65];
    int v6 = v3[96];
    LODWORD(v3) = v3[66];
    int v10 = 136316162;
    uint64_t v11 = "-[NetworkRelayAgent invalidatePairingManagerIfIdle]_block_invoke";
    __int16 v12 = 1024;
    int v13 = v4;
    __int16 v14 = 1024;
    int v15 = v5;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: scanning: %{BOOL}d, pushing: %{BOOL}d, pairingClients: %{BOOL}d, pairing: %{BOOL}d", (uint8_t *)&v10, 0x24u);
  }

  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 64) && !*(unsigned char *)(v7 + 65) && !*(unsigned char *)(v7 + 66) && !*(unsigned char *)(v7 + 96))
  {
    [*(id *)(v7 + 40) invalidate];
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;

    [*(id *)(a1 + 32) reset];
  }
}

id sub_100064E10(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) addObject:*(void *)(a1 + 40)];
}

id sub_100064EC4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) removeObject:*(void *)(a1 + 40)];
}

void sub_100064FB8(uint64_t a1)
{
  id v2 = +[NRDeviceIdentifier newDeviceIdentifierWithBluetoothUUID:*(void *)(a1 + 32)];
  if (v2)
  {
    id v3 = [objc_alloc((Class)NRDeviceMonitor) initWithDeviceIdentifier:v2 delegate:*(void *)(a1 + 40) queue:*(void *)(*(void *)(a1 + 40) + 8)];
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *(void **)(v4 + 24);
    *(void *)(v4 + 24) = v3;

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 16), *(id *)(a1 + 32));
    int v6 = link_monitor_log_handle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      id v16 = v2;
      uint64_t v8 = "Started monitoring device with bluetooth UUID %@, NetworkRelay ID %@";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, v11);
    }
  }
  else
  {
    int v6 = link_monitor_log_handle();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v12;
      uint64_t v8 = "Failed to create NRDeviceIdentifier for bluetooth UUID %@";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
      goto LABEL_6;
    }
  }
}

void sub_10006518C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 24);
  *(void *)(v2 + 24) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;

  int v6 = link_monitor_log_handle();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Stopped monitoring device", v7, 2u);
  }
}

void sub_100065580(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 96));
  _Unwind_Resume(a1);
}

void sub_1000655DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Candidate discovered: %@", buf, 0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v6 = [v3 identifier];
    if (v6)
    {
      [WeakRetained[6] setObject:v3 forKeyedSubscript:v6];
      uint64_t v7 = networkrelay_pairing_log_handle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id v8 = WeakRetained[6];
        *(_DWORD *)long long buf = 138412290;
        id v29 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "_identifierCandidateMap: %@", buf, 0xCu);
      }

      if (*((unsigned char *)WeakRetained + 65))
      {
        id v9 = networkrelay_pairing_log_handle();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138412290;
          id v29 = v3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Pushing a newly discovered candidate %@", buf, 0xCu);
        }

        [WeakRetained[5] requestAuthMethodForDevice:v3 authMethod:1 withCompletion:&stru_100167C00];
      }
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      char v22 = WeakRetained;
      id v10 = WeakRetained[11];
      id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v24;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v24 != v13) {
              objc_enumerationMutation(v10);
            }
            __int16 v15 = *(void **)(*((void *)&v23 + 1) + 8 * i);
            if (objc_opt_respondsToSelector())
            {
              id v16 = [v3 cbUUID];
              int v17 = [v3 metadata];
              [v15 discoveredCandidateIdentifier:v6 bluetoothIdentifier:v16 metadata:v17];
            }
          }
          id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
        }
        while (v12);
      }

      id WeakRetained = v22;
      id v18 = v22[9];
      if (v18)
      {
        int v19 = [v3 identifier];
        unsigned int v20 = [v18 isEqual:v19];

        if (v20)
        {
          char v21 = networkrelay_pairing_log_handle();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Newly discovered candidate identifier matches with pending candidate, pairing now", buf, 2u);
          }

          [v22 _pairWithCandidate:v3 withPreSharedAuthData:v22[10]];
        }
      }
    }
  }
}

void sub_100065918(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Requested authentication method completed with error = %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000659C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Candidate lost: %@", buf, 0xCu);
  }

  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v6 = [v3 identifier];
    if (v6)
    {
      [WeakRetained[6] setObject:0 forKeyedSubscript:v6];
      uint64_t v7 = networkrelay_pairing_log_handle();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        id v8 = WeakRetained[6];
        *(_DWORD *)long long buf = 138412290;
        id v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "_identifierCandidateMap: %@", buf, 0xCu);
      }

      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v9 = WeakRetained[11];
      id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v16;
        do
        {
          uint64_t v13 = 0;
          do
          {
            if (*(void *)v16 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v13);
            if (objc_opt_respondsToSelector()) {
              [v14 lostCandidateWithIdentifier:v6];
            }
            uint64_t v13 = (char *)v13 + 1;
          }
          while (v11 != v13);
          id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }
        while (v11);
      }
    }
  }
}

void sub_100065BD4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    int v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Scanning manager invalidated with %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100065C80(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    int v4 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to activate NRDevicePairingManager with error %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    int v4 = WeakRetained;
    if (WeakRetained) {
      [WeakRetained _startScanningForCandidates];
    }
  }
}

void sub_100065D68(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = networkrelay_pairing_log_handle();
  int v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = 138543362;
      id v10 = v2;
      int v5 = "Start discovery failed with error %{public}@";
      int v6 = v4;
      os_log_type_t v7 = OS_LOG_TYPE_ERROR;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&v9, v8);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    int v5 = "Discovery started";
    int v6 = v4;
    os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_100066054(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 65))
  {
    uint64_t v2 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Already pushing candidates, no-op.", buf, 2u);
    }
  }
  else
  {
    *(unsigned char *)(v1 + 65) = 1;
    int v4 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 48);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    os_log_type_t v7 = *(void **)(v6 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000661B8;
    v8[3] = &unk_100167CD8;
    void v8[4] = v6;
    void v8[5] = 1;
    [v7 enumerateKeysAndObjectsUsingBlock:v8];
  }
}

void sub_1000661B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 134218242;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[Push] Calling requestAuthMethodForDevice with method %lu on %@", (uint8_t *)&v7, 0x16u);
  }

  [*(id *)(*(void *)(a1 + 32) + 40) requestAuthMethodForDevice:v4 authMethod:*(void *)(a1 + 40) withCompletion:&stru_100167CB0];
}

void sub_100066298(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    uint64_t v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Push] requestAuthMethodForDevice completed with error = %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100066444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 65))
  {
    *(unsigned char *)(v1 + 65) = 0;
  }
  else
  {
    uint64_t v2 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Not currently pushing candidates, no-op.", v3, 2u);
    }
  }
}

void sub_100066604(id *a1)
{
  uint64_t v2 = a1[4];
  id v3 = (void *)v2[9];
  v2[9] = 0;

  int v4 = a1[4];
  uint64_t v5 = (void *)v4[10];
  v4[10] = 0;

  uint64_t v6 = (id *)a1[4];
  if (!*((unsigned char *)v6 + 64))
  {
    [v6 startScanningForCandidates];
    uint64_t v6 = (id *)a1[4];
  }
  if (!*((unsigned char *)v6 + 66))
  {
    *((unsigned char *)v6 + 66) = 1;
    uint64_t v6 = (id *)a1[4];
  }
  int v7 = [v6[6] objectForKeyedSubscript:a1[5]];
  if (v7)
  {
    [a1[4] _pairWithCandidate:v7 withPreSharedAuthData:a1[6]];
  }
  else
  {
    uint64_t v8 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = a1[5];
      int v10 = 138543362;
      id v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Did not find a candidate for pairing using pre-shared auth data with with identifier = %{public}@, marked as pending.", (uint8_t *)&v10, 0xCu);
    }

    objc_storeStrong((id *)a1[4] + 9, a1[5]);
    objc_storeStrong((id *)a1[4] + 10, a1[6]);
  }
}

void sub_1000668AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(a1 + 32) identifier];
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543874;
    uint64_t v8 = v5;
    __int16 v9 = 2114;
    uint64_t v10 = v6;
    __int16 v11 = 2114;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Pairing using pre-shared auth data with candidate with identifier = %{public}@ (%{public}@) started with error %{public}@", (uint8_t *)&v7, 0x20u);
  }
  if (v3) {
    [*(id *)(a1 + 40) _networkRelayAgentPairingCompletedWithIdentifier:0 error:v3];
  }
}

void sub_1000669A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "startPairingDevice result:- error %@, device %@", (uint8_t *)&v11, 0x16u);
  }

  if (v5)
  {
    uint64_t v8 = 0;
  }
  else
  {
    __int16 v9 = [v6 device];
    uint64_t v10 = [v9 candidate];
    uint64_t v8 = [v10 cbUUID];
  }
  [*(id *)(a1 + 32) _networkRelayAgentPairingCompletedWithIdentifier:v8 error:v5];
}

void sub_100066BF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 66))
  {
    *(unsigned char *)(v2 + 66) = 1;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  id v3 = [*(id *)(v2 + 48) objectForKeyedSubscript:*(void *)(a1 + 40)];
  int v4 = networkrelay_pairing_log_handle();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218242;
      uint64_t v15 = 2;
      __int16 v16 = 2112;
      long long v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Calling requestAuthMethodForDevice with method %lu on %@", buf, 0x16u);
    }

    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(void **)(v6 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100066DD8;
    v12[3] = &unk_1001678E8;
    void v12[4] = v6;
    id v13 = *(id *)(a1 + 40);
    [v7 requestAuthMethodForDevice:v3 authMethod:2 withCompletion:v12];
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to call requestAuthMethodForDevice on an unknown candidate with identifier %@", buf, 0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(v9 + 56);
    *(void *)(v9 + 56) = 0;

    int v11 = nrGetPairingError();
    [*(id *)(a1 + 32) _networkRelayAgentPairingCompletedWithIdentifier:0 error:v11];
  }
}

void sub_100066DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[PIN] requestAuthMethodForDevice completed with error = %{public}@", (uint8_t *)&v7, 0xCu);
  }

  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(v5 + 56);
    *(void *)(v5 + 56) = 0;

    [*(id *)(a1 + 32) _networkRelayAgentPairingCompletedWithIdentifier:0 error:v3];
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), *(id *)(a1 + 40));
  }
}

void sub_10006700C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 66))
  {
    *(unsigned char *)(v1 + 66) = 1;
    uint64_t v1 = *(void *)(a1 + 32);
  }
  uint64_t v2 = *(void **)(v1 + 48);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000670B4;
  v3[3] = &unk_100167D28;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 40);
  [v2 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_1000670B4(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  int v7 = [v6 identifier];
  unsigned int v8 = [v7 isEqual:*(void *)(*(void *)(a1 + 32) + 56)];

  if (v8)
  {
    id v9 = objc_alloc_init((Class)NRDevicePairingTarget);
    [v9 setCandidate:v6];
    [v9 setAuthMethod:2];
    [v9 setAuthData:*(void *)(a1 + 40)];
    uint64_t v10 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Calling startPairingDevice with pairing target %@", buf, 0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(v11 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100067278;
    v14[3] = &unk_100165980;
    void v14[4] = v11;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100067344;
    v13[3] = &unk_100167D00;
    void v13[4] = v11;
    [v12 startPairingDevice:v9 withCompletion:v14 resultBlock:v13];
    *a4 = 1;
  }
}

void sub_100067278(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "startPairingDevice completed with error %@", (uint8_t *)&v5, 0xCu);
  }

  if (v3) {
    [*(id *)(a1 + 32) _networkRelayAgentPairingCompletedWithIdentifier:0 error:v3];
  }
}

void sub_100067344(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412546;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "startPairingDevice result:- error %@, device %@", (uint8_t *)&v11, 0x16u);
  }

  if (v5)
  {
    unsigned int v8 = 0;
  }
  else
  {
    id v9 = [v6 device];
    uint64_t v10 = [v9 candidate];
    unsigned int v8 = [v10 cbUUID];
  }
  [*(id *)(a1 + 32) _networkRelayAgentPairingCompletedWithIdentifier:v8 error:v5];
}

void sub_10006770C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 32) nrDeviceIdentifier];
    id v6 = [v5 UUIDString];
    int v7 = 138543618;
    unsigned int v8 = v6;
    __int16 v9 = 2114;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unpairing NetworkRelay device with Network Relay Identifier %{public}@ completed with error %{public}@", (uint8_t *)&v7, 0x16u);
  }
  [*(id *)(a1 + 40) _notifyDelegatesOfUnpairingCompletionWithError:v3];
}

void sub_100067988(id a1)
{
  uint64_t v1 = objc_alloc_init(NetworkRelayAgent);
  uint64_t v2 = qword_1001A11A8;
  qword_1001A11A8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_100068DF0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:v3];
  id v6 = [*(id *)(a1 + 40) _makeIsSetupNoDeviceCollection:v4 diffWithPairingID:*(void *)(a1 + 32)];
  id v7 = [v5 applyDiff:v6];
  unsigned int v8 = [*(id *)(a1 + 40) _makeIsPairedDeviceCollection:v4 diffWithPairingID:*(void *)(a1 + 32) pair:*(unsigned __int8 *)(a1 + 56)];

  id v9 = [v5 applyDiff:v8];
  id v10 = [*(id *)(a1 + 48) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100068F14;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v10, block);

  return 0;
}

void sub_100068F14(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_1000690E8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = [v4 objectForKeyedSubscript:v3];
  id v6 = [*(id *)(a1 + 40) _makeIsPairedDeviceCollection:v4 diffWithPairingID:*(void *)(a1 + 32) pair:*(unsigned char *)(a1 + 56) == 0];

  id v7 = [v5 applyDiff:v6];
  unsigned int v8 = [*(id *)(a1 + 48) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000691E0;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v8, block);

  return 0;
}

void sub_1000691E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000697B8(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) registry];
  LOBYTE(v2) = 1;
  [v3 unpairDeviceWithPairingID:*(void *)(a1 + 40) obliterationString:0 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanTrue pairingReport:*(void *)(a1 + 48) remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v2];
}

void sub_100069C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v30 = a3;
  id v6 = [v5 deviceCollection];
  id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 32)];

  unsigned int v29 = [v5 switchIndex];
  unsigned int v8 = [v5 deviceCollection];
  unsigned int v9 = [v8 count];

  id v10 = [v7 objectForKeyedSubscript:NRDevicePropertyHWModelString];
  int v11 = [v10 value];

  id v12 = [v7 objectForKeyedSubscript:NRDevicePropertyEnclosureMaterial];
  __int16 v13 = [v12 value];
  int v14 = (int)v13;

  uint64_t v15 = [v7 objectForKeyedSubscript:NRDevicePropertyBuildType];
  id v16 = [v15 value];

  if (_NRIsInternalInstall()
    && ([v7 objectForKeyedSubscript:NRDevicePropertyIsInternalInstall],
        long long v17 = objc_claimAutoreleasedReturnValue(),
        [v17 value],
        long long v18 = objc_claimAutoreleasedReturnValue(),
        unsigned int v19 = [v18 BOOLValue],
        v18,
        v17,
        v19))
  {
    unsigned int v20 = [v7 objectForKeyedSubscript:NRDevicePropertySerialNumber];
    id v21 = [v20 value];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v22 = [v30 securePropertyForID:v21];

      id v21 = (void *)v22;
    }
    id v23 = v21;
  }
  else
  {
    id v23 = 0;
  }
  objc_initWeak(&location, *(id *)(a1 + 40));
  long long v24 = [*(id *)(a1 + 40) serviceRegistry];
  long long v25 = [v24 queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100069F64;
  block[3] = &unk_100167D98;
  objc_copyWeak(&v35, &location);
  unsigned int v36 = v29;
  unsigned int v37 = v9;
  id v32 = v11;
  id v33 = v23;
  id v34 = v16;
  int v38 = v14;
  id v26 = v16;
  id v27 = v23;
  id v28 = v11;
  dispatch_async(v25, block);

  objc_destroyWeak(&v35);
  objc_destroyWeak(&location);
}

void sub_100069F50(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_100069F64(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v2 = [WeakRetained serviceRegistry];
  id v3 = [v2 serviceFromClass:objc_opt_class()];

  id v4 = [WeakRetained pairingReport];
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  uint64_t v6 = *(unsigned int *)(a1 + 68);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = [v3 pairingClientPhase];
  BYTE4(v11) = 0;
  LODWORD(v11) = *(_DWORD *)(a1 + 72);
  [v4 submitPairingReportWithPairingAttemptCounter:0 andSwitchCounter:v5 andPairedDeviceCount:v6 andGizmoHardware:v7 andGizmoSerial:v8 andBuildType:v9 screenName:v10 idsDisconnectCounter:0 pairingStartTime:0 andEnclosureMaterial:v11 shouldLogOnly:0];
}

uint64_t sub_10006A360(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

void sub_10006A5BC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  sub_10009DA34(a1[6]);
  id v12 = (id)objc_claimAutoreleasedReturnValue();
  if (sub_10009CDE4(a1[6])) {
    BOOL v4 = sub_10009DA48(a1[6]);
  }
  else {
    BOOL v4 = 0;
  }
  if (sub_10009CE64(a1[6])) {
    BOOL v5 = sub_10009DA8C(a1[6]);
  }
  else {
    BOOL v5 = 0;
  }
  if (sub_10009CEA4(a1[6])) {
    BOOL v6 = sub_10009DAA8(a1[6]);
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = sub_10009CE24(a1[6]);
  if (v7)
  {
    uint64_t v8 = +[NSNumber numberWithInt:sub_10009DA64(a1[6])];
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = sub_10009DA78(a1[6]);
  id v10 = (void *)a1[7];
  uint64_t v11 = [v10 idsBTUUID];
  [v2 remoteObject:v3 receivedUnpairRequestWithAdvertisedName:v12 shouldObliterate:v4 shouldBrick:v5 shouldPreserveESim:v6 withPairingFailureCode:v8 withAbortReason:v9 withRequestIdentifier:v10 fromIDSBTUUID:v11];

  if (v7) {
}
  }

uint64_t sub_10006AA68(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10006AA80(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(void))(result + 16))();
    }
  }
  return result;
}

uint64_t sub_10006AA9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10006AC8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    long long v18 = v3;
    BOOL v5 = [NRPBPingResponse alloc];
    BOOL v6 = [v18 protobuf];
    int v7 = [v6 data];
    uint64_t v8 = [(NRPBPingResponse *)v5 initWithData:v7];

    double v9 = sub_1000A42FC((uint64_t)v8);
    double v10 = *(double *)(a1 + 40);
    uint64_t v11 = +[NSDate date];
    [v11 timeIntervalSinceReferenceDate];
    double v13 = v12;
    double v14 = sub_1000A42FC((uint64_t)v8);

    uint64_t v15 = *(void *)(a1 + 32);
    if (v15) {
      (*(void (**)(uint64_t, uint64_t, double, double))(v15 + 16))(v15, 1, v9 - v10, v13 - v14);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 32);
    if (!v16) {
      goto LABEL_8;
    }
    long long v18 = 0;
    uint64_t v16 = (*(uint64_t (**)(uint64_t, void, double, double))(v16 + 16))(v16, 0, 0.0, 0.0);
  }
  id v4 = v18;
LABEL_8:

  return _objc_release_x1(v16, v4);
}

id sub_10006AFEC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = sub_1000ECBB0(*(void *)(a1 + 40));

  return [v1 receivedPingRequestOfType:v2];
}

id sub_10006B200(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (int)sub_10002011C(*(void *)(a1 + 40));

  return [v1 remoteObjectReceivedWatchMigrationCompletion:v2];
}

void sub_10006B420(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  sub_1000D4F78(*(void *)(a1 + 40));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v1 remoteObjectReveivedWatchMigrationMetricSessionID:v2];
}

void sub_10006B578(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) clientQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10006B644;
    v5[3] = &unk_100166210;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    dispatch_async(v4, v5);
  }
}

uint64_t sub_10006B644(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) == 0);
}

void sub_10006B76C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) clientQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10006B838;
    v5[3] = &unk_100166210;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    dispatch_async(v4, v5);
  }
}

uint64_t sub_10006B838(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) == 0);
}

void sub_10006B960(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) clientQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10006BA2C;
    v5[3] = &unk_100166210;
    id v6 = v3;
    id v7 = *(id *)(a1 + 40);
    dispatch_async(v4, v5);
  }
}

uint64_t sub_10006BA2C(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) == 0);
}

void sub_10006BA98(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.NanoRegistry.WakingTimerScheduler", 0);
  uint64_t v2 = qword_1001A11B8;
  qword_1001A11B8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_10006BEE8(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dispatch timer fired", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) evaluateTimers];
}

id sub_10006BF84(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received time zone notification: (com.apple.system.timezone)", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) handleTimeEvent];
}

id sub_10006C020(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received clock set notification: (com.apple.system.clock_set)", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) handleTimeEvent];
}

uint64_t sub_10006C160(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001A11C8;
  qword_1001A11C8 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

id sub_10006C250(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(void **)(a1 + 32);
      id v6 = [v5 identifier];
      int v15 = 134218242;
      uint64_t v16 = v5;
      __int16 v17 = 2112;
      long long v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scheduling timer (%p) with identifier: (%@)", (uint8_t *)&v15, 0x16u);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 24) addObject:*(void *)(a1 + 32)];
  id v7 = [(id)objc_opt_class() now];
  [*(id *)(a1 + 32) setStartTime:v7];
  uint64_t v8 = *(void **)(a1 + 32);
  double v9 = (double)(unint64_t)[v8 startTime];
  [*(id *)(a1 + 32) delay];
  [v8 setEarliestFireTime:(unint64_t)(v9 + v10 * 1000000000.0)];
  uint64_t v11 = *(void **)(a1 + 32);
  double v12 = (double)(unint64_t)[v11 earliestFireTime];
  [*(id *)(a1 + 32) gracePeriod];
  [v11 setDeadline:(unint64_t)(v12 + v13 * 1000000000.0)];
  return [*(id *)(a1 + 40) evaluateTimers:v7];
}

void sub_10006C48C(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 134217984;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cancelling timer (%p)", buf, 0xCu);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 24) removeObject:*(void *)(a1 + 32)];
  uint64_t v6 = *(void *)(a1 + 40);
  if (*(void *)(v6 + 32) == *(void *)(a1 + 32)) {
    *(void *)(v6 + 32) = 0;
  }
  id v7 = +[WakingTimerScheduler timerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006C5E8;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v7, block);
}

id sub_10006C5E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateTimers];
}

void sub_10006C958(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v14;
    *(void *)&long long v4 = 134217984;
    long long v12 = v4;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v7);
        double v9 = nr_daemon_log();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = nr_daemon_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = v12;
            long long v18 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Firing timer (%p)", buf, 0xCu);
          }
        }
        [v8 fireTimer:v12 withBlock:v13];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v5);
  }

  sub_1000DA034(*(_DWORD *)(a1 + 40));
}

void sub_10006ECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

id sub_10006ECEC(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10006ED18(uint64_t a1)
{
}

void sub_10006ED20(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  long long v4 = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 40) + 8) + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  uint64_t v16 = sub_10006EF6C;
  uint64_t v17 = &unk_1001667E8;
  long long v19 = *(_OWORD *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 64);
  id v5 = v3;
  id v18 = v5;
  unsigned int v20 = &v22;
  uint64_t v6 = v15;
  os_unfair_lock_lock_with_options();
  v16(v6);

  os_unfair_lock_unlock(v4);
  if (*((unsigned char *)v23 + 24))
  {
    id v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      double v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        uint64_t v11 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 134218242;
        id v27 = v10;
        __int16 v28 = 2112;
        unsigned int v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --done--", buf, 0x16u);
      }
    }
    uint64_t v12 = +[NRQueue registryDaemonQueue];
    [v12 dispatchAsync:*(void *)(a1 + 32)];

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;
  }
  _Block_object_dispose(&v22, 8);
}

void sub_10006EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006EF6C(void *a1)
{
  --*(void *)(*(void *)(a1[5] + 8) + 24);
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    long long v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = objc_retainBlock(*(id *)(*(void *)(a1[6] + 8) + 40));
      uint64_t v6 = +[NSNumber numberWithInteger:a1[8]];
      id v7 = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1[5] + 8) + 24)];
      uint64_t v8 = a1[4];
      int v9 = 134218754;
      id v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --%@:%@--", (uint8_t *)&v9, 0x2Au);
    }
  }
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = *(void *)(*(void *)(a1[5] + 8) + 24) == 0;
}

id sub_10006F3B8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 56) containsObject:*(void *)(a1 + 40)];
  BOOL v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v2)
  {
    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 32);
        uint64_t v7 = *(void *)(v6 + 8);
        uint64_t v8 = *(void *)(v6 + 56);
        int v18 = 138543618;
        uint64_t v19 = v7;
        __int16 v20 = 2114;
        uint64_t v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionWaitForConnectivity: Device %{public}@ IS paired in IDS %{public}@", (uint8_t *)&v18, 0x16u);
      }
    }
    uint64_t v9 = [*(id *)(a1 + 48) serviceFromClass:objc_opt_class()];
    uint64_t v10 = *(void *)(a1 + 32);
    __int16 v11 = *(void **)(v10 + 24);
    *(void *)(v10 + 24) = v9;

    [*(id *)(*(void *)(a1 + 32) + 24) addConnectivityObserver:];
    uint64_t v12 = *(void **)(a1 + 56);
    if (v12)
    {
      [v12 doubleValue];
      [*(id *)(a1 + 32) setTimeout:];
    }
    return [*(id *)(a1 + 32) checkForConnectivity];
  }
  else
  {
    if (v4)
    {
      uint64_t v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v17 = *(void *)(v15 + 56);
        int v18 = 138543618;
        uint64_t v19 = v16;
        __int16 v20 = 2114;
        uint64_t v21 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionWaitForConnectivity: Device %{public}@ IS NOT paired in IDS %{public}@", (uint8_t *)&v18, 0x16u);
      }
    }
    return [*(id *)(a1 + 32) transactionDidComplete];
  }
}

void sub_10006F580(uint64_t a1)
{
  unsigned int v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingGetPairedDevicesWithCompletionBlock", buf, 2u);
    }
  }
  id v9 = *(id *)(a1 + 48);
  id v5 = [*(id *)(a1 + 40) queue];
  IDSLocalPairingGetPairedDevicesWithCompletionBlock();

  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  uint64_t v6 = [*(id *)(a1 + 40) queue:_NSConcreteStackBlock withPriority:3221225472 usingBlock:sub_10006F764 notifyWhenScheduled:unk_100167EA8];
  IDSLocalPairingGetPairingDevicesWithCompletionBlock();
}

uint64_t sub_10006F70C(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(*(void *)(a1 + 32) + 56) addObjectsFromArray:a2];
  }
  BOOL v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_10006F764(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(*(void *)(a1 + 32) + 56) addObjectsFromArray:a2];
  }
  BOOL v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

id sub_10006F898(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

id sub_10006FB08(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkForConnectivity];
}

void sub_1000700EC(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100070334(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100070654(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_100070AC4(uint64_t a1, int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  long long v9 = sub_1000A3CF0();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    __int16 v11 = sub_1000A3CF0();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = "NO";
      if (a2) {
        uint64_t v14 = "YES";
      }
      *(_DWORD *)long long buf = 134219010;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      uint64_t v25 = v13;
      __int16 v26 = 2080;
      id v27 = v14;
      __int16 v28 = 2112;
      id v29 = v7;
      __int16 v30 = 2112;
      id v31 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPWatchPusher[%p]: For advertisedName=\"%@\" calling completion(\"%s\", \"%@\") (Message: %@)", buf, 0x34u);
    }
  }
  uint64_t v15 = +[EPFactory queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100070C8C;
  block[3] = &unk_1001670F0;
  id v16 = *(id *)(a1 + 48);
  char v21 = a2;
  id v19 = v7;
  id v20 = v16;
  id v17 = v7;
  dispatch_async(v15, block);
}

uint64_t sub_100070C8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

id sub_100070CA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _waitTimeoutWithAdvertisedName:*(void *)(a1 + 40)];
}

BOOL sub_100070F04(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 16;
LABEL_21:
        uint64_t v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadData();
    uint64_t v13 = 8;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100071138(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_100071150(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_1000712D4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_1000712E8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

id sub_1000716E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

id sub_1000716E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

id sub_100071C94(uint64_t a1)
{
  return [*(id *)(a1 + 32) transactionDidComplete];
}

void sub_100071FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071FF0(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDeviceID];
  if (v3)
  {
    char v4 = [*(id *)(a1 + 32) serviceFromClass:objc_opt_class()];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v4 shouldWaitForBridgeNotificationForPairingID:v3];
    unsigned int v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      unint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        int v11 = 136315394;
        uint64_t v12 = "-[EPSagaTransactionNotification _shouldWaitForCurrentNotification:]_block_invoke";
        __int16 v13 = 1024;
        int v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%s: should wait: %{BOOL}d", (uint8_t *)&v11, 0x12u);
      }
    }
LABEL_9:

    goto LABEL_10;
  }
  long long v9 = nr_daemon_log();
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);

  if (v10)
  {
    char v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1000F98BC(v4);
    }
    goto LABEL_9;
  }
LABEL_10:
}

uint64_t start()
{
  _set_user_dir_suffix();
  if (_NRIsInternalInstall())
  {
    id v1 = +[NSMutableDictionary dictionaryWithContentsOfFile:@"/var/mobile/Library/DeviceRegistry.state/tests.plist"];
    id v2 = v1;
    if (v1)
    {
      id v3 = [v1 objectForKeyedSubscript:@"BootSleepDuration"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && (uint64_t)[v3 integerValue] >= 1)
      {
        char v4 = nr_daemon_log();
        BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

        if (v5)
        {
          BOOL v6 = nr_daemon_log();
          if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
            sub_1000F9AA4(v3, v6);
          }
        }
        sleep([v3 integerValue]);
        unint64_t v7 = nr_daemon_log();
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

        if (v8)
        {
          long long v9 = nr_daemon_log();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
            sub_1000F9A60(v9);
          }
        }
      }
    }
  }
  BOOL v10 = nr_daemon_log();
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);

  if (v11)
  {
    uint64_t v12 = nr_daemon_log();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1000F9984(v12);
    }
  }
  if (_NRIsInternalInstall())
  {
    __int16 v13 = nr_daemon_log();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

    if (v14)
    {
      uint64_t v15 = nr_daemon_log();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_IOSMAC 0", v63, 2u);
      }
    }
    id v16 = nr_daemon_log();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

    if (v17)
    {
      int v18 = nr_daemon_log();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_NOT_MACOS 1", v63, 2u);
      }
    }
    id v19 = nr_daemon_log();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);

    if (v20)
    {
      char v21 = nr_daemon_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_WATCH 0", v63, 2u);
      }
    }
    uint64_t v22 = nr_daemon_log();
    BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);

    if (v23)
    {
      __int16 v24 = nr_daemon_log();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_PHONE 1", v63, 2u);
      }
    }
    uint64_t v25 = nr_daemon_log();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

    if (v26)
    {
      id v27 = nr_daemon_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_BUILD_DAEMON 1", v63, 2u);
      }
    }
    __int16 v28 = nr_daemon_log();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);

    if (v29)
    {
      __int16 v30 = nr_daemon_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_SIMULATED_PAIRING 0", v63, 2u);
      }
    }
    id v31 = nr_daemon_log();
    BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);

    if (v32)
    {
      id v33 = nr_daemon_log();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Build Configuration: NANOREGISTRY_EMBEDDED 1", v63, 2u);
      }
    }
    id v34 = nr_daemon_log();
    BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);

    if (v35)
    {
      unsigned int v36 = nr_daemon_log();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Build Configuration: NRREGISTRYCLIENT_DEBUG 0", v63, 2u);
      }
    }
    unsigned int v37 = nr_daemon_log();
    BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);

    if (v38)
    {
      uint64_t v39 = nr_daemon_log();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Build Configuration: NRREGISTRYSERVER_DEBUG 1", v63, 2u);
      }
    }
    id v40 = nr_daemon_log();
    BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);

    if (v41)
    {
      id v42 = nr_daemon_log();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Build Configuration: NRXPCCALL_DEBUG 0", v63, 2u);
      }
    }
    BOOL v43 = nr_daemon_log();
    BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);

    if (v44)
    {
      id v45 = nr_daemon_log();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Build Configuration: NRLOCALPROPERTY_DEBUG 0", v63, 2u);
      }
    }
    id v46 = nr_daemon_log();
    BOOL v47 = os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT);

    if (v47)
    {
      id v48 = nr_daemon_log();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Build Configuration: NRDISCOVERY_DEBUG 0", v63, 2u);
      }
    }
    id v49 = nr_daemon_log();
    BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);

    if (v50)
    {
      id v51 = nr_daemon_log();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Build Configuration: NR_YYYYYYYYYY 1", v63, 2u);
      }
    }
  }
  id v52 = nr_daemon_log();
  BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);

  if (v53)
  {
    id v54 = nr_daemon_log();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Creating NRPairingDaemon", v63, 2u);
    }
  }
  id v55 = +[NRPairingDaemon sharedInstance];
  long long v56 = nr_daemon_log();
  long long v57 = v56;
  if (v55)
  {
    BOOL v58 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);

    if (v58)
    {
      uint64_t v59 = nr_daemon_log();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "NRPairingDaemon created", v63, 2u);
      }
LABEL_83:
    }
  }
  else
  {
    BOOL v60 = os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);

    if (v60)
    {
      uint64_t v59 = nr_daemon_log();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
        sub_1000F9940(v59);
      }
      goto LABEL_83;
    }
  }

  id v61 = +[NSRunLoop mainRunLoop];
  [v61 run];

  return 0;
}

id sub_100072AF0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateAppRemovability:a2 rollback:0 entry:*(void *)(a1 + 40)];
}

id sub_100072BDC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _updateAppRemovability:a2 rollback:1 entry:*(void *)(a1 + 40)];
}

void sub_100072D7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_100073108(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000731B8;
  v6[3] = &unk_100167F28;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = v3;
  uint64_t v8 = v4;
  id v5 = v3;
  +[IXAppInstallCoordinator setRemovability:v4 forAppWithBundleID:v5 completion:v6];
}

void sub_1000731B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = IXStringForAppRemovability();
      int v14 = 138412802;
      uint64_t v15 = v6;
      __int16 v16 = 2112;
      BOOL v17 = v7;
      __int16 v18 = 2112;
      id v19 = v3;
      uint64_t v8 = "Failed to set %@ as %@ with error %@";
      long long v9 = v5;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 32;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v14, v11);

      goto LABEL_8;
    }
    goto LABEL_8;
  }
  BOOL v12 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v12)
  {
    id v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      id v7 = IXStringForAppRemovability();
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      BOOL v17 = v7;
      uint64_t v8 = "Successfully set %@ as %@";
      long long v9 = v5;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 22;
      goto LABEL_7;
    }
LABEL_8:
  }
}

BOOL sub_100073484(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 8;
LABEL_21:
        int v14 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        goto LABEL_23;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    uint64_t v12 = PBReaderReadData();
    uint64_t v13 = 16;
    goto LABEL_21;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000736B8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1000736D0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

id sub_100073B5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  char v4 = *(void **)(a1 + 32);

  return [v4 checkForIRK];
}

void sub_1000743E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_100074408(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  int v14 = [WeakRetained registry];
  uint64_t v15 = [v14 collection];
  __int16 v16 = [v15 activeDeviceID];

  BOOL v17 = +[NRQueue registryDaemonQueue];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000745A0;
  v20[3] = &unk_100167F78;
  objc_copyWeak(&v24, (id *)(a1 + 40));
  id v18 = v16;
  id v21 = v18;
  id v22 = *(id *)(a1 + 32);
  id v19 = v9;
  id v23 = v19;
  [v17 dispatchAsync:v20];

  objc_destroyWeak(&v24);
}

void sub_10007458C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000745A0(id *a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  if (WeakRetained)
  {
    id v3 = a1[4];
    if (v3 != WeakRetained[14] && (objc_msgSend(v3, "isEqual:") & 1) == 0)
    {
      objc_storeStrong(WeakRetained + 14, a1[4]);
      [WeakRetained queryDeviceSyncStatusIfNeeded];
      [a1[5] checkAssertionFactoryForAssertion];
      [a1[5] update];
    }
    id v21 = WeakRetained;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id obj = [a1[6] allPairingIDs];
    id v4 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v30;
      uint64_t v7 = NRDevicePropertyMigrationConsent;
      uint64_t v24 = NRDevicePropertyMigrationConsentDate;
      uint64_t v19 = NRDevicePropertyMigrationConsent;
      uint64_t v20 = *(void *)v30;
      do
      {
        char v8 = 0;
        id v22 = v5;
        do
        {
          if (*(void *)v30 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v9 = *(void *)(*((void *)&v29 + 1) + 8 * (void)v8);
          id v10 = [a1[6] objectForKeyedSubscript:v9];
          id v11 = [v10 diff];
          uint64_t v12 = [v11 objectForKeyedSubscript:v7];
          uint64_t v13 = [v11 objectForKeyedSubscript:v24];
          if (v12 | v13)
          {
            int v14 = nr_daemon_log();
            BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);

            if (v15)
            {
              __int16 v16 = nr_daemon_log();
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Looks like the device registry has updated some consent flags- going to check whether we should kick off migration", buf, 2u);
              }
            }
            unsigned __int8 v17 = [v21 _hasMigrationConsent:v9];
            id v18 = +[NRQueue registryDaemonQueue];
            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472;
            void v25[2] = sub_100074898;
            v25[3] = &unk_1001660F8;
            BOOL v26 = v21;
            unsigned __int8 v27 = v17;
            [v18 dispatchAsync:v25];

            uint64_t v7 = v19;
            uint64_t v6 = v20;
            id v5 = v22;
          }

          char v8 = (char *)v8 + 1;
        }
        while (v5 != v8);
        id v5 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v5);
    }

    id WeakRetained = v21;
  }
}

id sub_100074898(uint64_t a1)
{
  id result = *(id *)(a1 + 32);
  if (result)
  {
    if (*(unsigned char *)(a1 + 40))
    {
      [result setShouldClearAdvertisingIntervalTimeouts:1];
      *(unsigned char *)(*(void *)(a1 + 32) + 14) = 1;
      id result = *(id *)(a1 + 32);
    }
    return [result update];
  }
  return result;
}

id sub_1000748FC(uint64_t a1)
{
  [*(id *)(a1 + 32) checkAssertionFactoryForAssertion];
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 update];
}

void sub_100074BBC(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDevice];
  id v4 = v3;
  if (v3 && [v3 isPaired] && (objc_msgSend(v4, "isArchived") & 1) == 0)
  {
    uint64_t v9 = [v4 objectForKeyedSubscript:NRDevicePropertyPairingID];
    id v5 = [v9 value];
  }
  else
  {
    id v5 = 0;
  }
  uint64_t v6 = +[NRQueue registryDaemonQueue];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100074CD4;
  v10[3] = &unk_100165530;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v5;
  uint64_t v12 = v7;
  id v8 = v5;
  [v6 dispatchAsync:v10];
}

void sub_100074CD4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 96)] & 1) == 0)
  {
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      id v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: active device changed resetting sync status", buf, 2u);
      }
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 96), *(id *)(a1 + 32));
    *(unsigned char *)(*(void *)(a1 + 40) + 18) = 0;
    *(unsigned char *)(*(void *)(a1 + 40) + 19) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(void *)(v5 + 96) && !*(unsigned char *)(v5 + 18) && !*(unsigned char *)(v5 + 19))
  {
    uint64_t v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      id v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: querying sync status", buf, 2u);
      }
    }
    id v9 = *(id *)(*(void *)(a1 + 40) + 96);
    *(unsigned char *)(*(void *)(a1 + 40) + 19) = 1;
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = *(void **)(v10 + 104);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100074EA4;
    v13[3] = &unk_100167FC8;
    id v14 = v9;
    uint64_t v15 = v10;
    id v12 = v9;
    [v11 requestInitialSyncStateForPairingIdentifier:v12 completion:v13];
  }
}

void sub_100074EA4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = "NO";
      if (a2) {
        id v9 = "YES";
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v20 = v9;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: sync status response hasCompletedSync=%s error=%@", buf, 0x16u);
    }
  }
  uint64_t v10 = +[NRQueue registryDaemonQueue];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100075044;
  v14[3] = &unk_100165C98;
  id v11 = *(id *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  id v15 = v11;
  uint64_t v16 = v12;
  id v17 = v5;
  char v18 = a2;
  id v13 = v5;
  [v10 dispatchAsync:v14];
}

id sub_100075044(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 96)];
  if (result && (uint64_t v3 = *(void *)(a1 + 40), *(unsigned char *)(v3 + 19)))
  {
    if (*(void *)(a1 + 48))
    {
      *(unsigned char *)(v3 + 18) = 0;
    }
    else
    {
      *(unsigned char *)(v3 + 18) = 1;
      *(unsigned char *)(*(void *)(a1 + 40) + 17) = *(unsigned char *)(a1 + 56) ^ 1;
    }
    id result = [*(id *)(a1 + 40) update];
  }
  else if (!*(void *)(a1 + 48))
  {
    id result = [*(id *)(a1 + 40) queryDeviceSyncStatusIfNeeded];
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 19) = 0;
  return result;
}

id sub_100075160(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: PairedSync says retrying failed pairing attempts", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) queryDeviceSyncStatusIfNeeded];
}

id sub_1000752B4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 96)];
  if (result)
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: PairedSync says sync reset... querying sync status", v6, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 18) = 0;
    return [*(id *)(a1 + 40) queryDeviceSyncStatusIfNeeded];
  }
  return result;
}

id sub_100075424(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isEqual:*(void *)(*(void *)(a1 + 40) + 96)];
  if (result)
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: PairedSync says sync complete", v6, 2u);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 40) + 18) = 1;
    *(unsigned char *)(*(void *)(a1 + 40) + 19) = 0;
    *(unsigned char *)(*(void *)(a1 + 40) + 17) = 0;
    return [*(id *)(a1 + 40) update];
  }
  return result;
}

id sub_1000759BC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: kSBSLockStateNotifyKey received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

id sub_100075A58(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: kMobileKeyBagLockStatusNotifyToken received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

id sub_100075D40(uint64_t a1)
{
  uint64_t v2 = sub_1000A3CF0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = sub_1000A3CF0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 134217984;
      uint64_t v9 = 0x40F5180000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%f seconds advertising timeout expired", (uint8_t *)&v8, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 80);
  *(void *)(v5 + 80) = 0;

  return [*(id *)(a1 + 32) update];
}

void sub_100076094(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = [*(id *)(a1 + 32) registry];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100076164;
  v6[3] = &unk_100168060;
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  int v8 = *(_DWORD *)(a1 + 40);
  char v9 = *(unsigned char *)(a1 + 44);
  __int16 v10 = *(_WORD *)(a1 + 45);
  id v5 = v3;
  [v4 grabRegistryWithReadBlock:v6];
}

void sub_100076164(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(*(void *)(a1 + 32) + 96)];
  unsigned __int8 v4 = [v3 isPaired];
  unsigned __int8 v5 = [v3 isArchived];
  uint64_t v6 = +[NRQueue registryDaemonQueue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10007626C;
  v9[3] = &unk_100168038;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v10 = v7;
  uint64_t v11 = v8;
  char v12 = *(unsigned char *)(a1 + 48);
  __int16 v13 = *(_WORD *)(a1 + 49);
  unsigned __int8 v14 = v4;
  unsigned __int8 v15 = v5;
  int v16 = *(_DWORD *)(a1 + 51);
  [v6 dispatchAsync:v9];
}

void sub_10007626C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) count];
  id v3 = *(unsigned char **)(a1 + 40);
  if (!v2)
  {
    v3[11] = 0;
    uint64_t v47 = *(void *)(a1 + 40);
    id v48 = *(void **)(v47 + 48);
    *(void *)(v47 + 48) = 0;

    uint64_t v49 = *(void *)(a1 + 40);
    BOOL v50 = *(void **)(v49 + 32);
    *(void *)(v49 + 32) = 0;

    uint64_t v51 = *(void *)(a1 + 40);
    id v52 = *(void **)(v51 + 88);
    *(void *)(v51 + 88) = 0;

    [*(id *)(a1 + 40) unregisterForNotifications];
    BOOL v53 = *(void **)(*(void *)(a1 + 40) + 80);
    if (v53)
    {
      [v53 invalidate];
      uint64_t v54 = *(void *)(a1 + 40);
      id v55 = *(void **)(v54 + 80);
      *(void *)(v54 + 80) = 0;
    }
    return;
  }
  [v3 registerForNotifications];
  if (!*(void *)(*(void *)(a1 + 40) + 32))
  {
    uint64_t v4 = +[NROSTransaction transactionWithName:@"migrationAutoTrigger"];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void **)(v5 + 32);
    *(void *)(v5 + 32) = v4;
  }
  uint64_t v7 = 50;
  if (!*(unsigned char *)(a1 + 49)) {
    uint64_t v7 = 48;
  }
  int v8 = *(unsigned __int8 *)(a1 + v7);
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(v9 + 96) && (!*(unsigned char *)(v9 + 18) || *(unsigned char *)(v9 + 17)) && *(unsigned char *)(a1 + 51))
  {
    int v10 = *(unsigned char *)(a1 + 52) == 0;
    if (!v8) {
      goto LABEL_14;
    }
LABEL_13:
    if (((*(unsigned char *)(v9 + 16) == 0) & ~v10) != 0) {
      goto LABEL_26;
    }
    goto LABEL_14;
  }
  int v10 = 0;
  if (v8) {
    goto LABEL_13;
  }
LABEL_14:
  if (*(void *)(v9 + 48))
  {
    uint64_t v11 = nr_daemon_log();
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

    if (v12)
    {
      __int16 v13 = nr_daemon_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v14 = "Locked";
        if (v10) {
          unsigned __int8 v14 = "Needs Sync";
        }
        if (*(unsigned char *)(*(void *)(a1 + 40) + 16)) {
          unsigned __int8 v15 = "Busy";
        }
        else {
          unsigned __int8 v15 = v14;
        }
        *(_DWORD *)long long buf = 136315138;
        long long v74 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: %s, aborting discovery", buf, 0xCu);
      }
    }
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = *(void **)(v16 + 48);
    *(void *)(v16 + 48) = 0;

    uint64_t v9 = *(void *)(a1 + 40);
  }
  [(id)v9 cancelTimer];
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void **)(v18 + 88);
  *(void *)(v18 + 88) = 0;

  *(unsigned char *)(*(void *)(a1 + 40) + 11) = 0;
LABEL_26:
  uint64_t v20 = +[EPNanoRegistryStatusCodeElection sharedInstance];
  unint64_t v21 = (unint64_t)[v20 statusCode];

  id v22 = [*(id *)(a1 + 40) migrator];
  unsigned __int8 v23 = [v22 isBusy];

  if (*(unsigned char *)(a1 + 53) && (v23 & 1) == 0 && (v21 & 0xFFFFFFFFFFFFFFFDLL) == 0)
  {
    uint64_t v24 = *(void *)(a1 + 40);
    if (*(unsigned char *)(v24 + 13) || *(unsigned char *)(v24 + 14) || *(unsigned char *)(a1 + 54) || *(unsigned char *)(v24 + 11))
    {
      if (*(unsigned char *)(a1 + 48))
      {
LABEL_34:
        *(unsigned char *)(v24 + 13) = 0;
        *(unsigned char *)(*(void *)(a1 + 40) + 9) = *(unsigned char *)(a1 + 53);
        uint64_t v25 = nr_daemon_log();
        BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

        if (!v26) {
          goto LABEL_39;
        }
        unsigned __int8 v27 = nr_daemon_log();
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_38;
        }
        *(_WORD *)long long buf = 0;
        __int16 v28 = "EPMigrationAutoTrigger: Forcing migration discovery for some reason";
        goto LABEL_37;
      }
      if (*(unsigned char *)(a1 + 49))
      {
        if (*(unsigned char *)(a1 + 50)) {
          goto LABEL_34;
        }
LABEL_64:
        if (!*(unsigned char *)(a1 + 55)) {
          return;
        }
        BOOL v60 = nr_daemon_log();
        BOOL v61 = os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);

        if (v61)
        {
          id v62 = nr_daemon_log();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Starting migration discovery because there is no passcode and we've become UI Unlocked", buf, 2u);
          }
        }
        unsigned int v63 = [*(id *)(a1 + 40) isDate:*(void *)(*(void *)(a1 + 40) + 64) agedMoreThan:60.0];
        id v64 = nr_daemon_log();
        BOOL v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);

        if (!v63)
        {
          if (!v65) {
            return;
          }
          BOOL v58 = nr_daemon_log();
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_93;
          }
          *(_WORD *)long long buf = 0;
          uint64_t v59 = "EPMigrationAutoTrigger: Too soon to start migration discovery because there is no passcode and we've become UI Unlocked";
          goto LABEL_92;
        }
        if (!v65) {
          goto LABEL_39;
        }
        unsigned __int8 v27 = nr_daemon_log();
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_38;
        }
        *(_WORD *)long long buf = 0;
        __int16 v28 = "EPMigrationAutoTrigger: Starting migration discovery because there is no passcode and we've become UI Unlocked";
        goto LABEL_37;
      }
    }
    else if (*(unsigned char *)(a1 + 49))
    {
      goto LABEL_64;
    }
    if (!*(unsigned char *)(a1 + 56)) {
      return;
    }
    unsigned int v69 = [(id)v24 isDate:*(void *)(v24 + 64) agedMoreThan:60.0];
    id v70 = nr_daemon_log();
    BOOL v71 = os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT);

    if (!v69)
    {
      if (!v71) {
        return;
      }
      BOOL v58 = nr_daemon_log();
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_93;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v59 = "EPMigrationAutoTrigger: Too soon to start migration discovery because the phone has become unlocked";
      goto LABEL_92;
    }
    if (!v71)
    {
LABEL_39:
      long long v29 = *(void **)(*(void *)(a1 + 40) + 88);
      if (!v29)
      {
        long long v30 = nr_daemon_log();
        BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);

        if (v31)
        {
          long long v32 = nr_daemon_log();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Starting to wait for the key", buf, 2u);
          }
        }
        id v33 = [*(id *)(a1 + 40) keymaster];
        id v34 = [v33 newResourceWithDelegate:*(void *)(a1 + 40)];
        uint64_t v35 = *(void *)(a1 + 40);
        unsigned int v36 = *(void **)(v35 + 88);
        *(void *)(v35 + 88) = v34;

        long long v29 = *(void **)(*(void *)(a1 + 40) + 88);
      }
      id v37 = [v29 availability];
      uint64_t v38 = *(void *)(a1 + 40);
      if (v37 == (id)1)
      {
        uint64_t v39 = [*(id *)(v38 + 88) key];

        if (v39)
        {
          id v40 = nr_daemon_log();
          BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);

          if (v41)
          {
            id v42 = nr_daemon_log();
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Got the key!", buf, 2u);
            }
          }
          *(unsigned char *)(*(void *)(a1 + 40) + 11) = 0;
          uint64_t v43 = +[NSDate date];
          uint64_t v44 = *(void *)(a1 + 40);
          id v45 = *(void **)(v44 + 64);
          *(void *)(v44 + 64) = v43;

          uint64_t v46 = *(void *)(a1 + 40);
          if (*(void *)(v46 + 48))
          {
            if (!*(unsigned char *)(v46 + 13) && !*(unsigned char *)(v46 + 14)) {
              goto LABEL_79;
            }
          }
          else
          {
            *(unsigned char *)(v46 + 12) = 0;
            uint64_t v46 = *(void *)(a1 + 40);
          }
          [(id)v46 startMigrationAfterTimeout:5.0];
          [*(id *)(a1 + 40) startWatchScanWithCompletion:0];
          uint64_t v46 = *(void *)(a1 + 40);
          if (*(unsigned char *)(v46 + 14))
          {
            *(unsigned char *)(v46 + 14) = 0;
            [*(id *)(a1 + 40) resetAllMessageSendTimersWithCompletion:0];
            uint64_t v46 = *(void *)(a1 + 40);
          }
LABEL_79:
          [(id)v46 sendMessageToAvailableWatchesWithInterval:0 completion:86400.0];
          id v68 = *(void **)(a1 + 40);
          v72[0] = _NSConcreteStackBlock;
          v72[1] = 3221225472;
          v72[2] = sub_100076A88;
          v72[3] = &unk_100168010;
          v72[4] = v68;
          [v68 calculateNextMessageSendIntervalWithCompletion:v72];
          return;
        }
        *(unsigned char *)(*(void *)(a1 + 40) + 11) = 1;
        id v66 = nr_daemon_log();
        BOOL v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);

        if (!v67) {
          return;
        }
        BOOL v58 = nr_daemon_log();
        if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_93;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v59 = "EPMigrationAutoTrigger: Whoa, key was there, now it's gone.";
      }
      else
      {
        *(unsigned char *)(v38 + 11) = 1;
        long long v56 = nr_daemon_log();
        BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);

        if (!v57) {
          return;
        }
        BOOL v58 = nr_daemon_log();
        if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_93;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v59 = "EPMigrationAutoTrigger: Can't get the key";
      }
LABEL_92:
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, v59, buf, 2u);
LABEL_93:

      return;
    }
    unsigned __int8 v27 = nr_daemon_log();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
LABEL_38:

      goto LABEL_39;
    }
    *(_WORD *)long long buf = 0;
    __int16 v28 = "EPMigrationAutoTrigger: Starting migration discovery because the phone has become unlocked";
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
    goto LABEL_38;
  }
}

void sub_100076A88(uint64_t a1, double a2)
{
  if (a2 <= 0.0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 80))
    {
      uint64_t v11 = sub_1000A3CF0();
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

      if (v12)
      {
        __int16 v13 = sub_1000A3CF0();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Canceling the advertising request timer", buf, 2u);
        }
      }
      [*(id *)(*(void *)(a1 + 32) + 80) invalidate];
      uint64_t v14 = *(void *)(a1 + 32);
      unsigned __int8 v15 = *(void **)(v14 + 80);
      *(void *)(v14 + 80) = 0;
    }
  }
  else if (!*(void *)(*(void *)(a1 + 32) + 80))
  {
    uint64_t v4 = sub_1000A3CF0();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      uint64_t v6 = sub_1000A3CF0();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134217984;
        double v18 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting a timer to send an advertising request because %f seconds remain in the interval", buf, 0xCu);
      }
    }
    uint64_t v7 = +[EPFactory queue];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100076CAC;
    v16[3] = &unk_1001655F8;
    void v16[4] = *(void *)(a1 + 32);
    uint64_t v8 = +[TimerFactory timerWithIdentifier:@"com.apple.nanoregistry.migrationautotrigger.advertisingrequestmessage" delay:1 gracePeriod:v7 waking:v16 handlerQueue:a2 handlerBlock:0.0];
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = *(void **)(v9 + 80);
    *(void *)(v9 + 80) = v8;
  }
}

id sub_100076CAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) nanoRegistryAdvertisingRequestTimeout];
}

uint64_t sub_100076EFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

uint64_t sub_1000773FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 144);
  *(void *)(v2 + 144) = 0;

  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [*(id *)(a1 + 40) UUIDString];
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Alert delay timer timeout for device %@", (uint8_t *)&v9, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_100077500(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 144);
  *(void *)(v2 + 144) = 0;

  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [*(id *)(a1 + 40) UUIDString];
      int v9 = 138412290;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: Alert delay timer canceled for device %@", (uint8_t *)&v9, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100077708(id *a1, uint64_t a2)
{
  id v3 = +[NSSet setWithArray:a2];
  uint64_t v4 = [a1[4] shortTermFailureLockoutFilterBluetoothIdentifiers:v3];
  BOOL v5 = [a1[4] registry];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100077810;
  v9[3] = &unk_1001660A8;
  id v10 = v4;
  id v6 = a1[5];
  id v7 = a1[4];
  id v11 = v6;
  id v12 = v7;
  id v13 = a1[6];
  id v8 = v4;
  [v5 grabRegistryWithReadBlock:v9];
}

void sub_100077810(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v23;
    uint64_t v8 = _NRDevicePropertyBluetoothIdentifier;
    do
    {
      int v9 = 0;
      do
      {
        if (*(void *)v23 != v7) {
          objc_enumerationMutation(v4);
        }
        id v10 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v22 + 1) + 8 * (void)v9)];
        id v11 = [v10 objectForKeyedSubscript:v8];
        id v12 = [v11 value];

        if (v12) {
          [*(id *)(a1 + 40) addObject:v12];
        }

        int v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v6);
  }

  if ([*(id *)(a1 + 40) count])
  {
    id v13 = +[NRQueue registryDaemonQueue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100077A30;
    v18[3] = &unk_100166838;
    id v14 = *(id *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void **)(a1 + 56);
    id v19 = v14;
    uint64_t v20 = v15;
    id v21 = v16;
    [v13 dispatchAsync:v18];

    id v17 = v19;
LABEL_14:

    goto LABEL_15;
  }
  if (*(void *)(a1 + 56))
  {
    id v17 = +[NRQueue registryDaemonQueue];
    [v17 dispatchAsync:*(void *)(a1 + 56)];
    goto LABEL_14;
  }
LABEL_15:
}

void sub_100077A30(void *a1)
{
  id v7 = +[EPFactory sharedFactory];
  [v7 setDiscovererDeviceUUIDs:a1[4]];
  [v7 setDiscovererShouldScanForProximity:1];
  uint64_t v2 = +[EPFactory sharedFactory];
  id v3 = [v2 newDiscovererWithDelegate:a1[5]];
  uint64_t v4 = a1[5];
  id v5 = *(void **)(v4 + 48);
  *(void *)(v4 + 48) = v3;

  uint64_t v6 = a1[6];
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

void sub_100077B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) registry];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100077C6C;
  v8[3] = &unk_1001680D8;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  uint64_t v12 = *(void *)(a1 + 48);
  id v11 = v6;
  id v7 = v3;
  [v4 grabRegistryWithReadBlock:v8];
}

void sub_100077C6C(uint64_t a1, void *a2)
{
  id v28 = a2;
  BOOL v26 = +[NSMutableSet set];
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v30;
    *(void *)&long long v4 = 138412802;
    long long v25 = v4;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v30 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        id v9 = [v28 objectForKeyedSubscript:v8, v25];
        uint64_t v10 = [*(id *)(a1 + 40) _cloudIdentifierForDevice:v9];
        if (![*(id *)(a1 + 40) hasMessageTimeIntervalExpired:v10 forCloudIdentifier:*(double *)(a1 + 56)])
        {
          double v18 = sub_1000A3CF0();
          BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

          if (!v19) {
            goto LABEL_21;
          }
          uint64_t v20 = sub_1000A3CF0();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            id v21 = [v8 UUIDString];
            *(_DWORD *)long long buf = 138412546;
            id v34 = v21;
            __int16 v35 = 2112;
            unsigned int v36 = v10;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sendMessageToAvailableWatchesWithInterval: Not sending to %@ (%@) because of lockout time interval", buf, 0x16u);
            goto LABEL_19;
          }
LABEL_20:

          goto LABEL_21;
        }
        id v11 = [*(id *)(a1 + 40) cloud];
        uint64_t v12 = [v11 deviceUniqueIdentifiers];
        unsigned int v13 = [v12 containsObject:v10];

        id v14 = sub_1000A3CF0();
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);

        if (!v13)
        {
          if (!v15) {
            goto LABEL_21;
          }
          uint64_t v20 = sub_1000A3CF0();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            id v21 = [v8 UUIDString];
            long long v22 = [*(id *)(a1 + 40) cloud];
            long long v23 = [v22 deviceUniqueIdentifiers];
            *(_DWORD *)long long buf = v25;
            id v34 = v21;
            __int16 v35 = 2112;
            unsigned int v36 = v10;
            __int16 v37 = 2112;
            uint64_t v38 = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sendMessageToAvailableWatchesWithInterval: %@ (%@) not in cloud identifiers list yet (%@)", buf, 0x20u);

LABEL_19:
          }
          goto LABEL_20;
        }
        if (v15)
        {
          uint64_t v16 = sub_1000A3CF0();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            id v17 = [v8 UUIDString];
            *(_DWORD *)long long buf = 138412546;
            id v34 = v17;
            __int16 v35 = 2112;
            unsigned int v36 = v10;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "sendMessageToAvailableWatchesWithInterval: Adding %@ (%@) to device list", buf, 0x16u);
          }
        }
        [v26 addObject:v10];
LABEL_21:
      }
      id v5 = [obj countByEnumeratingWithState:&v29 objects:v39 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 40) sendMessageToWatchWithRawCloudIdentifiers:v26];
  long long v24 = +[NRQueue registryDaemonQueue];
  [v24 dispatchAsync:*(void *)(a1 + 48)];
}

void sub_1000784E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) registry];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000785AC;
  v8[3] = &unk_100167398;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v7 = v3;
  [v4 grabRegistryWithReadBlock:v8];
}

void sub_1000785AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v19 = a3;
  +[NSMutableSet set];
  v18 = uint64_t v17 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = *(id *)(a1 + 32);
  id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v21;
    uint64_t v10 = _NRDevicePropertyMigrationIDSCloudIdentifier;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = [v5 objectForKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * (void)v11)];
        unsigned int v13 = [v12 objectForKeyedSubscript:v10];
        id v14 = [v13 value];

        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          BOOL v15 = [v19 objectForKeyedSubscript:v14];
          if (v15) {
            [v18 addObject:v15];
          }
        }
        id v11 = (char *)v11 + 1;
      }
      while (v8 != v11);
      id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }

  [*(id *)(v17 + 40) setLastMessageSendDate:0 forRawCloudIdentifiers:v18];
  uint64_t v16 = +[NRQueue registryDaemonQueue];
  [v16 dispatchAsync:*(void *)(v17 + 48)];
}

void sub_1000788B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000788C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v4 = [*(id *)(a1 + 32) registry];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000789A8;
  v9[3] = &unk_100168150;
  uint64_t v5 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v5;
  uint64_t v13 = *(void *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 40);
  id v6 = (id)v8;
  long long v12 = v8;
  id v7 = v3;
  [v4 grabRegistryWithReadBlock:v9];
}

void sub_1000789A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v30;
    id obj = v4;
    while (2)
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v30 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = [v3 objectForKeyedSubscript:*(void *)(*((void *)&v29 + 1) + 8 * (void)v8)];
        id v10 = [*(id *)(a1 + 40) _cloudIdentifierForDevice:v9];
        uint64_t v11 = [*(id *)(a1 + 40) cloud];
        long long v12 = [v11 deviceUniqueIdentifiers];
        unsigned int v13 = [v12 containsObject:v10];

        if (v13)
        {
          id v14 = +[NSString stringWithFormat:@"%@.%@", @"lastAdvertisingNotificationDate", v10];
          id v15 = [*(id *)(*(void *)(a1 + 40) + 72) objectForKeyedSubscript:v14];
          if (!v15 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
LABEL_21:

            long long v24 = obj;
            goto LABEL_22;
          }
          id v15 = v15;
          [v15 doubleValue];
          double v17 = v16 - *(double *)(a1 + 64) + 86400.0;
          uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
          if (v17 <= 0.0)
          {
            *(void *)(v18 + 24) = 0;

            goto LABEL_21;
          }
          double v19 = *(double *)(v18 + 24);
          if (v19 < 0.0 || v19 > v17) {
            *(double *)(v18 + 24) = v17;
          }
        }
        long long v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v4 = obj;
      id v6 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  long long v21 = +[NRQueue registryDaemonQueue];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_100078C80;
  v26[3] = &unk_100167168;
  id v22 = *(id *)(a1 + 48);
  uint64_t v23 = *(void *)(a1 + 56);
  id v27 = v22;
  uint64_t v28 = v23;
  [v21 dispatchAsync:v26];

  long long v24 = v27;
LABEL_22:
}

uint64_t sub_100078C80(uint64_t a1)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(double *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
}

void sub_100079130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10007915C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(v2 + 56);
    *(void *)(v2 + 56) = 0;
  }
}

void sub_100079174(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    id v4 = *(void **)(a1 + 32);
    id v5 = +[NSDate date];
    [v4 setLastMessageSendDate:v5 forRawCloudIdentifiers:*(void *)(a1 + 40)];

    id v6 = WeakRetained;
    if (WeakRetained)
    {
      WeakRetained[13] = 1;
      [WeakRetained update];
      id v6 = WeakRetained;
    }
  }
}

void sub_100079554(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 count] && !objc_msgSend(*(id *)(a1 + 32), "count"))
  {
    id v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      id v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: there are migratable watches, but none were discovered", buf, 2u);
      }
    }
    notify_post((const char *)[NRMigrationDevicesCannotBeDiscoveredDarwinNotification UTF8String]);
  }
  uint64_t v7 = +[NSSet setWithArray:v3];
  long long v8 = [*(id *)(a1 + 40) shortTermFailureLockoutFilterBluetoothIdentifiers:v7];
  uint64_t v9 = [*(id *)(a1 + 40) registry];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000796F8;
  v14[3] = &unk_1001660A8;
  id v15 = v8;
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  long long v12 = *(void **)(a1 + 48);
  id v16 = v10;
  uint64_t v17 = v11;
  id v18 = v12;
  id v13 = v8;
  [v9 grabRegistryWithReadBlock:v14];
}

void sub_1000796F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) allObjects];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_100079A18;
  v30[3] = &unk_100166640;
  id v23 = v3;
  id v31 = v23;
  BOOL v5 = [v4 sortedArrayUsingComparator:v30];

  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v26 objects:v34 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v27;
    uint64_t v10 = _NRDevicePropertyBluetoothIdentifier;
    while (2)
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void *)(*((void *)&v26 + 1) + 8 * i);
        id v13 = [v23 objectForKeyedSubscript:v12];
        id v14 = [v13 objectForKeyedSubscript:v10];
        id v15 = [v14 value];

        if ([*(id *)(a1 + 40) containsObject:v15])
        {
          uint64_t v17 = nr_daemon_log();
          BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

          if (v18)
          {
            double v19 = nr_daemon_log();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v33 = v15;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: device btID: %@ is migratable, and was discovered, will attempt to migrate", buf, 0xCu);
            }
          }
          notify_post((const char *)[NRMigrationDeviceFoundBeginningMigrationDarwinNotification UTF8String]);
          [*(id *)(a1 + 48) cancelMigrationSoftErrorAlertDelayTimerWithDeviceID:0];
          long long v20 = dispatch_get_global_queue(17, 0);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100079AFC;
          block[3] = &unk_100165868;
          uint64_t v21 = *(void *)(a1 + 48);
          void block[4] = v12;
          void block[5] = v21;
          id v25 = v15;
          id v22 = v15;
          dispatch_async(v20, block);

          goto LABEL_16;
        }
      }
      id v8 = [v6 countByEnumeratingWithState:&v26 objects:v34 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

  uint64_t v16 = *(void *)(a1 + 56);
  if (v16) {
    (*(void (**)(uint64_t, void))(v16 + 16))(v16, 0);
  }
LABEL_16:
}

id sub_100079A18(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = [v5 objectForKeyedSubscript:a2];
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];

  uint64_t v9 = NRDevicePropertyPairedDate;
  uint64_t v10 = [v7 objectForKeyedSubscript:NRDevicePropertyPairedDate];
  uint64_t v11 = [v10 value];

  uint64_t v12 = [v8 objectForKeyedSubscript:v9];
  id v13 = [v12 value];

  id v14 = [v13 compare:v11];
  return v14;
}

void sub_100079AFC(uint64_t a1)
{
  uint64_t v2 = +[NRPairedDeviceRegistry sharedInstance];
  id v3 = [v2 deviceForPairingID:*(void *)(a1 + 32)];

  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 32) UUIDString];
      *(_DWORD *)long long buf = 138412546;
      id v15 = v7;
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPMigrationAutoTrigger: MRU eligible NRDevice[%@] = %@", buf, 0x16u);
    }
  }
  id v8 = +[NRMigrator sharedMigrator];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100079CB0;
  v10[3] = &unk_100165EB0;
  int8x16_t v11 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  id v12 = *(id *)(a1 + 48);
  id v13 = v3;
  id v9 = v3;
  [v8 beginMigrationWithDevice:v9 withCompletion:v10];
}

void sub_100079CB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NRQueue registryDaemonQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100079D98;
  v7[3] = &unk_1001681F0;
  uint64_t v5 = *(void *)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  [v4 dispatchAsync:v7];
}

void sub_100079D98(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 18) = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 88) = 0;

  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000F9EFC(a1, v6);
    }
  }
  uint64_t v7 = a1 + 40;
  switch((unint64_t)[(id)objc_opt_class() failureTypeWithError:*(void *)(a1 + 40)])
  {
    case 0uLL:
      id v8 = nr_daemon_log();
      BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);

      if (v9)
      {
        id v10 = nr_daemon_log();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_1000F9DBC();
        }
      }
      id v11 = [*(id *)(a1 + 32) migrator];
      [v11 setMigrationConsent:0 forDeviceID:*(void *)(a1 + 48) completion:0];

      break;
    case 1uLL:
      [*(id *)(a1 + 32) addBluetoothIdentifierToShortTermFailureLockout:*(void *)(a1 + 56)];
      uint64_t v21 = nr_daemon_log();
      BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);

      if (v22)
      {
        id v14 = nr_daemon_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000F9DF0();
        }
        goto LABEL_17;
      }
      break;
    case 2uLL:
      id v23 = nr_daemon_log();
      BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);

      if (v24)
      {
        id v25 = nr_daemon_log();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
          sub_1000F9E94();
        }
      }
      long long v26 = [*(id *)(a1 + 32) migrator];
      [v26 setMigrationConsent:0 forDeviceID:*(void *)(a1 + 48) completion:0];

      v41[0] = 0;
      v41[1] = v41;
      v41[2] = 0x3032000000;
      v41[3] = sub_10007A22C;
      v41[4] = sub_10007A23C;
      uint64_t v42 = +[NROSTransaction transactionWithName:@"retryMigrationAlert"];
      long long v27 = *(void **)(a1 + 32);
      uint64_t v28 = *(void *)(a1 + 48);
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_10007A244;
      v40[3] = &unk_1001681C8;
      v40[4] = v41;
      [v27 setMigrationSoftErrorAlertDelayTimer:v28 deviceID:v40 withBlock:120.0];
      _Block_object_dispose(v41, 8);
      long long v29 = (void *)v42;
      goto LABEL_28;
    case 3uLL:
      long long v30 = nr_daemon_log();
      BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);

      if (v31)
      {
        long long v32 = nr_daemon_log();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_1000F9EC8();
        }
      }
      id v33 = +[NRRepeatingAlertEngine sharedInstance];
      [v33 resetStateForAlertWithName:@"MigrationFailedPermanentlyForThisWatch"];

      id v34 = +[NRRepeatingAlertEngine sharedInstance];
      [v34 setEnabled:1 withName:@"MigrationFailedPermanentlyForThisWatch"];

      __int16 v35 = +[NRRepeatingAlertEngine sharedInstance];
      [v35 presentAlertsIfNeeded];

      unsigned int v36 = [*(id *)(a1 + 32) migrator];
      [v36 setMigrationConsent:0 forDeviceID:*(void *)(a1 + 48) completion:0];

      __int16 v37 = dispatch_get_global_queue(17, 0);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_10007A2F4;
      v38[3] = &unk_1001655F8;
      id v39 = *(id *)(a1 + 64);
      dispatch_async(v37, v38);

      long long v29 = v39;
LABEL_28:

      break;
    case 4uLL:
      id v12 = nr_daemon_log();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

      if (v13)
      {
        id v14 = nr_daemon_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_1000F9E24(v7, v14, v15, v16, v17, v18, v19, v20);
        }
LABEL_17:
      }
      break;
    default:
      return;
  }
}

void sub_10007A200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007A22C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007A23C(uint64_t a1)
{
}

void sub_10007A244(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = +[NRRepeatingAlertEngine sharedInstance];
    [v3 resetStateForAlertWithName:@"MigrationFailed"];

    id v4 = +[NRRepeatingAlertEngine sharedInstance];
    [v4 setEnabled:1 withName:@"MigrationFailed"];

    BOOL v5 = +[NRRepeatingAlertEngine sharedInstance];
    [v5 presentAlertsIfNeeded];
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_10007A2F4(uint64_t a1)
{
  id v2 = +[NRPairedDeviceRegistry sharedInstance];
  [v2 unpairWithDevice:*(void *)(a1 + 32) withOptions:0 operationHasBegun:0];
}

void sub_10007A40C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10007A428(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10007A4B4;
  v3[3] = &unk_100168218;
  void v3[4] = *(void *)(a1 + 32);
  [WeakRetained startMigrationOnMRUIfWatchWasFoundWithCompletion:v3];
}

void sub_10007A4B4(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(v4 + 48);
  *(void *)(v4 + 48) = 0;

  if ((a2 & 1) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void **)(v6 + 88);
    *(void *)(v6 + 88) = 0;
  }
}

void sub_10007AAD0(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  unsigned __int8 v4 = [v3 isAltAccount];
  unsigned __int8 v5 = [v3 isArchived];
  uint64_t v6 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  uint64_t v7 = [v6 value];

  id v8 = [*(id *)(a1 + 40) _cloudIdentifierForDevice:v3];
  BOOL v9 = [v3 objectForKeyedSubscript:_NRDevicePropertyAltAccountIdentifier];
  id v10 = [v9 value];

  if (v10)
  {
    id v11 = [*(id *)(a1 + 40) registry];
    id v12 = [v11 secureProperties];
    BOOL v13 = [v12 objectForKeyedSubscript:v10];
  }
  else
  {
    BOOL v13 = 0;
  }
  id v14 = +[NRQueue registryDaemonQueue];
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10007ACD0;
  v20[3] = &unk_100168268;
  uint64_t v15 = *(void **)(a1 + 32);
  void v20[4] = *(void *)(a1 + 40);
  id v21 = v8;
  id v22 = v15;
  id v16 = *(id *)(a1 + 48);
  id v24 = v7;
  id v25 = v16;
  unsigned __int8 v26 = v5;
  unsigned __int8 v27 = v4;
  id v23 = v13;
  id v17 = v7;
  id v18 = v13;
  id v19 = v8;
  [v14 dispatchAsync:v20];
}

void sub_10007ACD0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) cloud];
  id v3 = [v2 deviceUniqueIdentifiers];
  unsigned __int8 v4 = [v3 containsObject:*(void *)(a1 + 40)];

  CFStringRef v58 = @"ExtendedDeviceLockState";
  uint64_t v59 = &__kCFBooleanTrue;
  +[NSDictionary dictionaryWithObjects:&v59 forKeys:&v58 count:1];
  unsigned int v5 = MKBGetDeviceLockState();
  char v6 = v5;
  BOOL v7 = v5 < 8;
  int v8 = MKBDeviceUnlockedSinceBoot();
  BOOL v9 = [*(id *)(*(void *)(a1 + 32) + 136) serviceFromClass:objc_opt_class()];
  unsigned __int8 v10 = [v9 hasAccounts];
  id v11 = [*(id *)(a1 + 32) keymaster];
  id v12 = [v11 newResourceWithDelegate:*(void *)(a1 + 32)];

  if (!v8)
  {
    uint64_t v20 = nr_daemon_log();
    BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

    if (!v21) {
      goto LABEL_33;
    }
    id v22 = nr_daemon_log();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    id v23 = [*(id *)(a1 + 48) UUIDString];
    *(_DWORD *)long long buf = 136315394;
    id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke_2";
    __int16 v56 = 2114;
    BOOL v57 = v23;
    id v24 = "%s: %{public}@ NO- Phone needs to be unlocked.";
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0x16u);

    goto LABEL_32;
  }
  if (!*(unsigned char *)(a1 + 80))
  {
    id v25 = nr_daemon_log();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

    if (!v26)
    {
LABEL_21:
      long long v30 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
LABEL_34:
      v30();
      goto LABEL_35;
    }
    unsigned __int8 v27 = nr_daemon_log();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
LABEL_20:

      goto LABEL_21;
    }
    uint64_t v28 = [*(id *)(a1 + 48) UUIDString];
    *(_DWORD *)long long buf = 136315394;
    id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
    __int16 v56 = 2114;
    BOOL v57 = v28;
    long long v29 = "%s: %{public}@ NO- NanoRegistry device does not exist or is not archived.";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v29, buf, 0x16u);

    goto LABEL_20;
  }
  if ((v10 & 1) == 0)
  {
    BOOL v31 = nr_daemon_log();
    BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);

    if (!v32) {
      goto LABEL_33;
    }
    id v22 = nr_daemon_log();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    id v23 = [*(id *)(a1 + 48) UUIDString];
    *(_DWORD *)long long buf = 136315394;
    id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
    __int16 v56 = 2114;
    BOOL v57 = v23;
    id v24 = "%s: %{public}@ NO- There are no IDS accounts on the phone yet.";
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 81)) {
    char v13 = 1;
  }
  else {
    char v13 = v4;
  }
  if ((v13 & 1) == 0)
  {
    id v33 = nr_daemon_log();
    BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);

    if (!v34) {
      goto LABEL_33;
    }
    id v22 = nr_daemon_log();
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_32;
    }
    id v23 = [*(id *)(a1 + 48) UUIDString];
    *(_DWORD *)long long buf = 136315394;
    id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
    __int16 v56 = 2114;
    BOOL v57 = v23;
    id v24 = "%s: %{public}@ NO- IDS does not yet have a matching IDSDevice to send a cloud message to.";
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 81) && !*(void *)(a1 + 56))
  {
    __int16 v37 = nr_daemon_log();
    BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);

    if (!v38) {
      goto LABEL_21;
    }
    unsigned __int8 v27 = nr_daemon_log();
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    uint64_t v28 = [*(id *)(a1 + 48) UUIDString];
    *(_DWORD *)long long buf = 136315394;
    id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
    __int16 v56 = 2114;
    BOOL v57 = v28;
    long long v29 = "%s: %{public}@ NO- We don't have an account identifier for the alt account.";
    goto LABEL_19;
  }
  if ((v7 & (0xC9u >> v6) & 1) == 0)
  {
    __int16 v35 = nr_daemon_log();
    BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);

    if (v36)
    {
      id v22 = nr_daemon_log();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = [*(id *)(a1 + 48) UUIDString];
        *(_DWORD *)long long buf = 136315394;
        id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
        __int16 v56 = 2114;
        BOOL v57 = v23;
        id v24 = "%s: %{public}@ NO- The phone is locked.";
        goto LABEL_31;
      }
LABEL_32:
    }
LABEL_33:
    long long v30 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    goto LABEL_34;
  }
  id v14 = [v12 key];

  if (v14)
  {
    uint64_t v15 = [EPCheckBluetoothForIRK alloc];
    uint64_t v16 = *(void *)(a1 + 64);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472;
    v48[2] = sub_10007B3EC;
    v48[3] = &unk_100168240;
    char v53 = *(unsigned char *)(a1 + 81);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 32);
    id v19 = *(void **)(a1 + 40);
    id v49 = v17;
    uint64_t v50 = v18;
    id v51 = v19;
    id v52 = *(id *)(a1 + 72);
  }
  else
  {
    id v39 = [*(id *)(*(void *)(a1 + 32) + 136) optionalServiceFromClass:objc_opt_class()];
    unsigned int v40 = [v39 enabled];
    BOOL v41 = nr_daemon_log();
    BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);

    if (v40)
    {
      if (v42)
      {
        uint64_t v43 = nr_daemon_log();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = [*(id *)(a1 + 48) UUIDString];
          *(_DWORD *)long long buf = 136315394;
          id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
          __int16 v56 = 2114;
          BOOL v57 = v44;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%s: %{public}@ NO- The migration key is not yet available in the keychain", buf, 0x16u);
        }
      }
      id v45 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    }
    else
    {
      if (v42)
      {
        uint64_t v46 = nr_daemon_log();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v47 = [*(id *)(a1 + 48) UUIDString];
          *(_DWORD *)long long buf = 136315394;
          id v55 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
          __int16 v56 = 2114;
          BOOL v57 = v47;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "%s: %{public}@ NO- Keychain sync is not enabled", buf, 0x16u);
        }
      }
      id v45 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    }
    v45();
  }
LABEL_35:
}

uint64_t sub_10007B3EC(uint64_t a1, uint64_t a2)
{
  if (a2 == 4)
  {
    int v3 = *(unsigned __int8 *)(a1 + 64);
    unsigned __int8 v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      if (!v5)
      {
LABEL_17:
        id v12 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
        return v12();
      }
      char v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v7 = [*(id *)(a1 + 32) UUIDString];
        int v17 = 136315394;
        uint64_t v18 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
        __int16 v19 = 2114;
        uint64_t v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s: %{public}@ YES- Looks like we're good to go for altAccount migration!  Not sending advertisement request yet", (uint8_t *)&v17, 0x16u);
      }
    }
    else
    {
      if (v5)
      {
        char v13 = nr_daemon_log();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = [*(id *)(a1 + 32) UUIDString];
          int v17 = 136315394;
          uint64_t v18 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
          __int16 v19 = 2114;
          uint64_t v20 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s: %{public}@ YES- Looks like we're good to go! Sending an advertisement request!", (uint8_t *)&v17, 0x16u);
        }
      }
      uint64_t v15 = *(void **)(a1 + 40);
      char v6 = +[NSSet setWithObject:*(void *)(a1 + 48)];
      [v15 sendMessageToWatchWithRawCloudIdentifiers:v6];
    }

    goto LABEL_17;
  }
  int v8 = nr_daemon_log();
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

  if (v9)
  {
    unsigned __int8 v10 = nr_daemon_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [*(id *)(a1 + 32) UUIDString];
      int v17 = 136315394;
      uint64_t v18 = "-[EPMigrationAutoTrigger isDevice:readyToMigrate:]_block_invoke";
      __int16 v19 = 2114;
      uint64_t v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%s: %{public}@ NO- Bluetooth does not have the key needed to discover the watch.", (uint8_t *)&v17, 0x16u);
    }
  }
  id v12 = *(uint64_t (**)(void))(*(void *)(a1 + 56) + 16);
  return v12();
}

void sub_10007BACC(id *a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = v3;
  if (a1[4])
  {
    BOOL v5 = [v3 objectForKeyedSubscript:];
    char v6 = [v5 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
    BOOL v7 = [v6 value];
  }
  else
  {
    BOOL v7 = 0;
  }
  int v8 = [v4 objectForKeyedSubscript:a1[4]];
  BOOL v9 = [v8 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  unsigned __int8 v10 = [v9 value];

  id v11 = [a1[5] queue];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10007BC7C;
  v14[3] = &unk_100168290;
  id v15 = a1[4];
  id v16 = a1[6];
  id v17 = v10;
  id v18 = v7;
  id v19 = a1[7];
  id v20 = a1[8];
  id v12 = v7;
  id v13 = v10;
  dispatch_async(v11, v14);
}

void sub_10007BC7C(uint64_t a1)
{
  uint64_t v28 = +[NSMutableArray array];
  BOOL v26 = [EPRoutingSlipEntry alloc];
  uint64_t v2 = objc_opt_class();
  v36[0] = @"switchToNRDeviceUUID";
  id v3 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
  v37[0] = v3;
  v36[1] = @"shouldWaitForConnectivity";
  unsigned __int8 v4 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanFalse];
  v37[1] = v4;
  v36[2] = @"shouldRollBack";
  BOOL v5 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  v37[2] = v5;
  v36[3] = @"setDaemonsEnabled";
  char v6 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176B20];
  v37[3] = v6;
  v36[4] = @"shouldWaitForAssertion";
  BOOL v7 = [[EPSagaOperandNumber alloc] initWithNumber:*(void *)(a1 + 40)];
  uint8_t v37[4] = v7;
  v36[5] = @"destinationIsAltAccount";
  int v8 = [[EPSagaOperandNumber alloc] initWithNumber:*(void *)(a1 + 48)];
  void v37[5] = v8;
  BOOL v9 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:6];
  unsigned __int8 v10 = [(EPRoutingSlipEntry *)v26 initWithName:@"assertion" transactionClass:v2 operands:v9];

  [v28 addObject:v10];
  if (*(void *)(a1 + 56))
  {
    unsigned __int8 v27 = [EPRoutingSlipEntry alloc];
    uint64_t v11 = objc_opt_class();
    v34[0] = @"pingType";
    id v12 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176B38];
    v35[0] = v12;
    v34[1] = @"idsMessagePriority";
    id v13 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176B50];
    v35[1] = v13;
    v34[2] = @"idsDeviceIdentifier";
    id v14 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 56)];
    v35[2] = v14;
    v34[3] = @"waitForPingResponse";
    id v15 = [[EPSagaOperandNumber alloc] initWithNumber:*(void *)(a1 + 48)];
    v35[3] = v15;
    id v16 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:4];
    id v17 = [(EPRoutingSlipEntry *)v27 initWithName:@"sendPing" transactionClass:v11 operands:v16];

    [v28 addObject:v17];
    unsigned __int8 v10 = v17;
  }
  id v18 = [EPRoutingSlipEntry alloc];
  uint64_t v19 = objc_opt_class();
  CFStringRef v32 = @"nrDeviceIdentifier";
  id v20 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
  id v33 = v20;
  BOOL v21 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  id v22 = [(EPRoutingSlipEntry *)v18 initWithName:@"reunionSync" transactionClass:v19 operands:v21];

  [v28 addObject:v22];
  id v23 = [*(id *)(a1 + 64) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007C0F8;
  block[3] = &unk_100165A70;
  id v24 = *(id *)(a1 + 72);
  id v30 = v28;
  id v31 = v24;
  id v25 = v28;
  dispatch_async(v23, block);
}

uint64_t sub_10007C0F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0);
}

void sub_10007C374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

id sub_10007C3B4(uint64_t a1, uint64_t a2)
{
  id result = objc_retainBlock(*(id *)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_10007C3E0(uint64_t a1)
{
}

void sub_10007C3E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v22 = 0;
  id v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 0;
  unsigned __int8 v4 = (os_unfair_lock_s *)(*(void *)(*(void *)(a1 + 40) + 8) + 32);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  uint64_t v16 = sub_10007C634;
  uint64_t v17 = &unk_1001667E8;
  long long v19 = *(_OWORD *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 64);
  id v5 = v3;
  id v18 = v5;
  id v20 = &v22;
  char v6 = v15;
  os_unfair_lock_lock_with_options();
  v16(v6);

  os_unfair_lock_unlock(v4);
  if (*((unsigned char *)v23 + 24))
  {
    BOOL v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      BOOL v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = objc_retainBlock(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
        uint64_t v11 = +[NSNumber numberWithInteger:*(void *)(a1 + 64)];
        *(_DWORD *)long long buf = 134218242;
        id v27 = v10;
        __int16 v28 = 2112;
        long long v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --done--", buf, 0x16u);
      }
    }
    uint64_t v12 = +[NRQueue registryDaemonQueue];
    [v12 dispatchAsync:*(void *)(a1 + 32)];

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = 0;
  }
  _Block_object_dispose(&v22, 8);
}

void sub_10007C60C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007C634(void *a1)
{
  --*(void *)(*(void *)(a1[5] + 8) + 24);
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    unsigned __int8 v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = objc_retainBlock(*(id *)(*(void *)(a1[6] + 8) + 40));
      char v6 = +[NSNumber numberWithInteger:a1[8]];
      BOOL v7 = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1[5] + 8) + 24)];
      uint64_t v8 = a1[4];
      int v9 = 134218754;
      id v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[%p] countdown:%@ toCompletion: --%@:%@--", (uint8_t *)&v9, 0x2Au);
    }
  }
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = *(void *)(*(void *)(a1[5] + 8) + 24) == 0;
}

void sub_10007C994(id *a1)
{
  if ([*((id *)a1[4] + 1) containsObject:a1[5]])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007CA98;
    block[3] = &unk_100165668;
    uint64_t v2 = a1[6];
    id v3 = a1[5];
    id v4 = a1[4];
    id v7 = v3;
    id v8 = v4;
    id v9 = a1[7];
    id v10 = a1[6];
    dispatch_async(v2, block);
  }
  else
  {
    id v5 = [a1[4] delegate];
    [v5 transactionDidComplete:a1[4]];
  }
}

void sub_10007CA98(id *a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412290;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingDeletePairedDevice %@", buf, 0xCu);
    }
  }
  id v6 = a1[4];
  id v7 = a1[6];
  id v8 = a1[7];
  IDSLocalPairingDeletePairedDevice();
}

void sub_10007CC0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionUnpairIDSDevice IDSLocalPairingDeletePairedDevice completed with error = %@", buf, 0xCu);
    }
  }
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  IDSLocalPairingStopForDevice();
}

void sub_10007CD64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionUnpairIDSDevice IDSLocalPairingStopForDevice completed with error = %@", buf, 0xCu);
    }
  }
  id v7 = [*(id *)(a1 + 48) queue];
  IDSLocalPairingUnpairForDevice();
}

void sub_10007CEAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionUnpairIDSDevice IDSLocalPairingUnpairForDevice completed with error = %@", (uint8_t *)&v8, 0xCu);
    }
  }
  id v7 = [*(id *)(a1 + 32) delegate];
  [v7 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10007CFA0(uint64_t a1)
{
  id v6 = *(id *)(a1 + 48);
  uint64_t v2 = [*(id *)(a1 + 40) queue];
  IDSLocalPairingGetPairedDevicesWithCompletionBlock();

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 48);
  id v3 = [*(id *)(a1 + 40) queue:_NSConcreteStackBlock withPriority:3221225472 usingBlock:sub_10007D120];
  IDSLocalPairingGetPairingDevicesWithCompletionBlock();
}

uint64_t sub_10007D0C8(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(*(void *)(a1 + 32) + 8) addObjectsFromArray:a2];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

uint64_t sub_10007D120(uint64_t a1, uint64_t a2)
{
  if (a2) {
    [*(id *)(*(void *)(a1 + 32) + 8) addObjectsFromArray:a2];
  }
  id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v3();
}

void sub_10007D424(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v4 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  id v5 = [v4 value];

  if (v5)
  {
    id v6 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007D5DC;
    block[3] = &unk_100165668;
    id v17 = v5;
    id v18 = *(id *)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v19 = v7;
    uint64_t v20 = v8;
    dispatch_async(v6, block);
  }
  else
  {
    id v9 = [*(id *)(*(void *)(a1 + 56) + 48) queue];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10007D828;
    v12[3] = &unk_100165868;
    __int16 v13 = *(id *)(a1 + 40);
    id v10 = *(id *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    id v14 = v10;
    uint64_t v15 = v11;
    dispatch_async(v9, v12);

    id v6 = v13;
  }
}

void sub_10007D5DC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionUnpairDevice: beginTransactionWithRoutingSlipEntry calling IDSLocalPairingUnpairStartForDevice", buf, 2u);
    }
  }
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  id v5 = [*(id *)(*(void *)(a1 + 56) + 48) queue];
  IDSLocalPairingUnpairStartForDevice();
}

void sub_10007D70C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionUnpairDevice: beginTransactionWithRoutingSlipEntry IDSLocalPairingUnpairStartForDevice completed %@", buf, 0xCu);
    }
  }
  if (v3)
  {
    id v7 = [*(id *)(a1 + 32) errors];
    [v7 addObject:v3];
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  v10.receiver = *(id *)(a1 + 48);
  v10.super_class = (Class)EPSagaTransactionUnpairDevice;
  [super beginTransactionWithRoutingSlipEntry:v9 serviceRegistry:v8];
}

id sub_10007D828(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  v4.receiver = *(id *)(a1 + 48);
  v4.super_class = (Class)EPSagaTransactionUnpairDevice;
  return [super beginTransactionWithRoutingSlipEntry:v2 serviceRegistry:v1];
}

void sub_10007DBC0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007DC04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10007DC14(uint64_t a1)
{
}

void sub_10007DC1C(uint64_t a1, void *a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40))
  {
    [a2 objectForKeyedSubscript:];
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    objc_super v4 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
    BOOL v5 = [v4 value];

    id v6 = [v3 objectForKeyedSubscript:_NRDevicePropertyNetworkRelayIdentifier];
    uint64_t v7 = [v6 value];

    uint64_t v8 = [v3 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
    uint64_t v9 = [v8 value];

    __int16 v37 = (void *)v9;
    objc_super v10 = (void *)v7;
    if ([*(id *)(a1 + 40) BOOLValue]) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = [v3 isArchived];
    }
    char v19 = [v3 isPaired] & (v11 ^ 1);
    unsigned __int8 v36 = [v3 isAltAccount];
    uint64_t v20 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"shouldConnectDevice"];
    unsigned __int8 v21 = [v20 BOOLValue];

    if (v5) {
      char v22 = v11 ^ 1;
    }
    else {
      char v22 = 0;
    }
    char v39 = v22 & v21;
    unsigned int v23 = [v3 isSetup] & (v11 ^ 1);
    id v24 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8240CA17-6F5D-4C8F-85C4-F4A705A0C20F"];
    char v40 = v23;
    unsigned __int8 v38 = v21;
    if ([v3 supportsCapability:v24])
    {
      char v25 = +[NRFeatureFlags sharedInstance];
      if ([v25 networkRelayPairing])
      {
        unsigned __int8 v26 = 1;
      }
      else
      {
        __int16 v28 = +[NRSystemProperties sharedInstance];
        unsigned __int8 v26 = [v28 isVirtualDevice];
      }
      id v27 = v37;
    }
    else
    {
      unsigned __int8 v26 = 0;
      id v27 = v37;
    }

    long long v29 = [*(id *)(*(void *)(a1 + 32) + 48) queue];
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472;
    v41[2] = sub_10007E098;
    v41[3] = &unk_100168308;
    char v54 = v39;
    uint64_t v30 = *(void *)(a1 + 104);
    char v55 = v11;
    uint64_t v52 = v30;
    id v42 = v5;
    unsigned __int8 v56 = v38;
    id v43 = *(id *)(a1 + 56);
    char v57 = v19;
    id v31 = *(id *)(a1 + 64);
    unsigned __int8 v58 = v36;
    uint64_t v32 = *(void *)(a1 + 112);
    id v44 = v31;
    uint64_t v53 = v32;
    id v45 = *(id *)(a1 + 72);
    id v46 = *(id *)(a1 + 80);
    id v47 = *(id *)(a1 + 88);
    id v48 = v27;
    unsigned __int8 v59 = v26;
    char v60 = v40;
    uint64_t v33 = *(void *)(a1 + 32);
    id v49 = v10;
    uint64_t v50 = v33;
    id v51 = *(id *)(a1 + 96);
    id v34 = v10;
    id v35 = v27;
    id v18 = v5;
    dispatch_async(v29, v41);
  }
  else
  {
    id v12 = nr_daemon_log();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

    if (v13)
    {
      id v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_1000F9F9C(v14);
      }
    }
    uint64_t v15 = +[NSMutableArray array];
    uint64_t v16 = [*(id *)(*(void *)(a1 + 32) + 40) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007E07C;
    block[3] = &unk_100165A70;
    id v17 = *(id *)(a1 + 96);
    id v62 = v15;
    id v63 = v17;
    id v3 = v15;
    dispatch_async(v16, block);

    id v18 = v63;
  }
}

uint64_t sub_10007E07C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 1, 1);
}

void sub_10007E098(uint64_t a1)
{
  uint64_t v2 = +[NSMutableArray array];
  if (*(unsigned char *)(a1 + 128))
  {
    id v3 = [EPRoutingSlipEntry alloc];
    uint64_t v4 = objc_opt_class();
    v138[0] = @"switchToNRDeviceUUID";
    BOOL v5 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
    v139[0] = v5;
    v138[1] = @"shouldWaitForAssertion";
    id v6 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
    v139[1] = v6;
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:v139 forKeys:v138 count:2];
    uint64_t v8 = [(EPRoutingSlipEntry *)v3 initWithName:@"switch" transactionClass:v4 operands:v7];

    [v2 addObject:v8];
LABEL_3:

    goto LABEL_4;
  }
  char v25 = nr_daemon_log();
  BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

  if (v26)
  {
    uint64_t v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v27 = @"YES";
      if (*(unsigned char *)(a1 + 129)) {
        CFStringRef v28 = @"YES";
      }
      else {
        CFStringRef v28 = @"NO";
      }
      uint64_t v29 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(a1 + 130)) {
        CFStringRef v27 = @"NO";
      }
      *(_DWORD *)long long buf = 138412802;
      *(void *)v134 = v28;
      *(_WORD *)&v134[8] = 2112;
      uint64_t v135 = v29;
      __int16 v136 = 2112;
      CFStringRef v137 = v27;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not going to create switch transaction.                          Is migrationUnpair %@;                         "
        " bluetoothID %@;                          shouldConnectDevice %@",
        buf,
        0x20u);
    }
    goto LABEL_3;
  }
LABEL_4:
  uint64_t v9 = [EPRoutingSlipEntry alloc];
  uint64_t v10 = objc_opt_class();
  v131[0] = @"nrDeviceIdentifier";
  unsigned int v11 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  v132[0] = v11;
  v131[1] = @"pairingReport";
  id v12 = [[EPSagaOperandPairingReport alloc] initWithPairingReport:*(void *)(a1 + 40)];
  v132[1] = v12;
  BOOL v13 = +[NSDictionary dictionaryWithObjects:v132 forKeys:v131 count:2];
  id v14 = [(EPRoutingSlipEntry *)v9 initWithName:@"updateDeviceForUnpairing" transactionClass:v10 operands:v13];

  [v2 addObject:v14];
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v15 = [EPRoutingSlipEntry alloc];
    uint64_t v16 = objc_opt_class();
    v129[0] = @"idsDeviceIdentifier";
    id v17 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
    v130[0] = v17;
    v129[1] = @"timeoutDuration";
    id v18 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176B68];
    v130[1] = v18;
    v129[2] = @"showUnpairAlert";
    char v19 = [EPSagaOperandNumber alloc];
    if (*(unsigned char *)(a1 + 131)) {
      uint64_t v20 = &__kCFBooleanTrue;
    }
    else {
      uint64_t v20 = &__kCFBooleanFalse;
    }
    unsigned __int8 v21 = [(EPSagaOperandNumber *)v19 initWithNumber:v20];
    v130[2] = v21;
    char v22 = +[NSDictionary dictionaryWithObjects:v130 forKeys:v129 count:3];
    unsigned int v23 = [(EPRoutingSlipEntry *)v15 initWithName:@"waitForConnectivity" transactionClass:v16 operands:v22];

    id v24 = v2;
    [v2 addObject:v23];
    id v14 = v23;
  }
  else
  {
    id v24 = v2;
    uint64_t v30 = nr_daemon_log();
    BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);

    if (v31)
    {
      uint64_t v32 = nr_daemon_log();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v33 = @"YES";
        if (*(unsigned char *)(a1 + 129)) {
          CFStringRef v34 = @"YES";
        }
        else {
          CFStringRef v34 = @"NO";
        }
        uint64_t v35 = *(void *)(a1 + 32);
        if (!*(unsigned char *)(a1 + 130)) {
          CFStringRef v33 = @"NO";
        }
        *(_DWORD *)long long buf = 138412802;
        *(void *)v134 = v34;
        *(_WORD *)&v134[8] = 2112;
        uint64_t v135 = v35;
        __int16 v136 = 2112;
        CFStringRef v137 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Not going to create waitForConnectivity transaction.                          Is migrationUnpair %@;          "
          "                bluetoothID %@;                          shouldConnectDevice %@",
          buf,
          0x20u);
      }
    }
  }
  if (!*(unsigned char *)(a1 + 131) || ([*(id *)(a1 + 48) BOOLValue] & 1) != 0)
  {
    id v42 = v24;
  }
  else
  {
    unsigned __int8 v36 = [EPRoutingSlipEntry alloc];
    uint64_t v37 = objc_opt_class();
    v127[0] = @"nrDeviceIdentifier";
    unsigned __int8 v38 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
    v128[0] = v38;
    v127[1] = @"completeHealthSyncForUnpairing";
    char v39 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
    v128[1] = v39;
    char v40 = +[NSDictionary dictionaryWithObjects:v128 forKeys:v127 count:2];
    BOOL v41 = [(EPRoutingSlipEntry *)v36 initWithName:@"triggerHealthSync" transactionClass:v37 operands:v40];

    id v42 = v24;
    [v24 addObject:v41];
    id v14 = v41;
  }
  if (*(unsigned char *)(a1 + 132))
  {
    id v43 = [EPRoutingSlipEntry alloc];
    uint64_t v44 = objc_opt_class();
    CFStringRef v125 = @"nrDeviceIdentifier";
    id v45 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
    long long v126 = v45;
    id v46 = +[NSDictionary dictionaryWithObjects:&v126 forKeys:&v125 count:1];
    id v47 = [(EPRoutingSlipEntry *)v43 initWithName:@"TearDownTinkerHealthSyncZones" transactionClass:v44 operands:v46];

    [v42 addObject:v47];
    id v14 = v47;
  }
  id v48 = [EPRoutingSlipEntry alloc];
  uint64_t v49 = objc_opt_class();
  CFStringRef v123 = @"setDaemonsEnabled";
  uint64_t v50 = [[EPSagaOperandNumber alloc] initWithNumber:&off_100176B80];
  CFStringRef v124 = v50;
  id v51 = +[NSDictionary dictionaryWithObjects:&v124 forKeys:&v123 count:1];
  uint64_t v52 = [(EPRoutingSlipEntry *)v48 initWithName:@"disableDaemons" transactionClass:v49 operands:v51];

  [v42 addObject:v52];
  if (*(void *)(a1 + 32))
  {
    if (!*(unsigned char *)(a1 + 129))
    {
      uint64_t v53 = [EPRoutingSlipEntry alloc];
      uint64_t v104 = objc_opt_class();
      v121[0] = @"nrDeviceIdentifier";
      BOOL v106 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
      v122[0] = v106;
      v121[1] = @"idsDeviceIdentifier";
      uint64_t v105 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
      v122[1] = v105;
      void v121[2] = @"shouldObliterate";
      char v54 = [EPSagaOperandNumber alloc];
      if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)) {
        char v55 = &__kCFBooleanTrue;
      }
      else {
        char v55 = &__kCFBooleanFalse;
      }
      id v103 = [(EPSagaOperandNumber *)v54 initWithNumber:v55];
      v122[2] = v103;
      v121[3] = @"shouldPreserveESim";
      unsigned __int8 v56 = [[EPSagaOperandNumber alloc] initWithNumber:*(void *)(a1 + 56)];
      v122[3] = v56;
      void v121[4] = @"shouldBrick";
      char v57 = [[EPSagaOperandNumber alloc] initWithNumber:*(void *)(a1 + 64)];
      v122[4] = v57;
      v121[5] = @"pairingReport";
      unsigned __int8 v58 = [[EPSagaOperandPairingReport alloc] initWithPairingReport:*(void *)(a1 + 40)];
      v122[5] = v58;
      v121[6] = @"remoteUnpairRequestID";
      unsigned __int8 v59 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 72)];
      v122[6] = v59;
      v121[7] = @"advertisedName";
      char v60 = [[EPSagaOperandString alloc] initWithString:*(void *)(a1 + 80)];
      v122[7] = v60;
      BOOL v61 = +[NSDictionary dictionaryWithObjects:v122 forKeys:v121 count:8];
      id v62 = [(EPRoutingSlipEntry *)v53 initWithName:@"unpairMessage" transactionClass:v104 operands:v61];

      [v42 addObject:v62];
      uint64_t v52 = v62;
    }
    if (([*(id *)(a1 + 48) BOOLValue] & 1) == 0)
    {
      id v63 = [EPRoutingSlipEntry alloc];
      uint64_t v64 = objc_opt_class();
      CFStringRef v119 = @"idsDeviceIdentifier";
      BOOL v65 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
      id v120 = v65;
      id v66 = +[NSDictionary dictionaryWithObjects:&v120 forKeys:&v119 count:1];
      BOOL v67 = [(EPRoutingSlipEntry *)v63 initWithName:@"unpairIDS" transactionClass:v64 operands:v66];

      [v42 addObject:v67];
      if (*(unsigned char *)(a1 + 129))
      {
        uint64_t v52 = v67;
      }
      else
      {
        int v68 = *(unsigned __int8 *)(a1 + 133);
        unsigned int v69 = [EPRoutingSlipEntry alloc];
        uint64_t v70 = objc_opt_class();
        if (v68)
        {
          CFStringRef v115 = @"networkRelayID";
          BOOL v71 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 88)];
          id v116 = v71;
          id v72 = +[NSDictionary dictionaryWithObjects:&v116 forKeys:&v115 count:1];
          CFStringRef v73 = @"unpairNetworkRelay";
        }
        else
        {
          CFStringRef v117 = @"coreBluetoothID";
          BOOL v71 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 32)];
          id v118 = v71;
          id v72 = +[NSDictionary dictionaryWithObjects:&v118 forKeys:&v117 count:1];
          CFStringRef v73 = @"unpairBluetooth";
        }
        uint64_t v52 = [(EPRoutingSlipEntry *)v69 initWithName:v73 transactionClass:v70 operands:v72];

        [v42 addObject:v52];
      }
    }
  }
  if (!*(unsigned char *)(a1 + 129))
  {
    long long v74 = [[EPRoutingSlipEntry alloc] initWithName:@"deleteICloudPaymentCards" transactionClass:objc_opt_class() operands:&__NSDictionary0__struct];

    [v42 addObject:v74];
    uint64_t v52 = v74;
  }
  if (!*(unsigned char *)(a1 + 132) && (*(unsigned char *)(a1 + 134) || *(unsigned char *)(a1 + 129)))
  {
    id v75 = nr_daemon_log();
    BOOL v76 = os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT);

    if (v76)
    {
      id v77 = nr_daemon_log();
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        int v78 = *(unsigned __int8 *)(a1 + 134);
        int v79 = *(unsigned __int8 *)(a1 + 129);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)v134 = v78;
        *(_WORD *)&v134[4] = 1024;
        *(_DWORD *)&v134[6] = v79;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Adding createBackup to EPSagaTransactionUnpairDevice: isSetup: %{BOOL}d migrationUnpair: %{BOOL}d", buf, 0xEu);
      }
    }
    id v80 = [EPRoutingSlipEntry alloc];
    uint64_t v81 = objc_opt_class();
    CFStringRef v113 = @"nrDeviceIdentifier";
    id v82 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
    id v114 = v82;
    __int16 v83 = +[NSDictionary dictionaryWithObjects:&v114 forKeys:&v113 count:1];
    BOOL v84 = [(EPRoutingSlipEntry *)v80 initWithName:@"createBackup" transactionClass:v81 operands:v83];

    [v42 addObject:v84];
    uint64_t v52 = v84;
  }
  id v85 = [EPRoutingSlipEntry alloc];
  uint64_t v86 = objc_opt_class();
  CFStringRef v111 = @"nrDeviceIdentifier";
  id v87 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  uint64_t v112 = v87;
  id v88 = +[NSDictionary dictionaryWithObjects:&v112 forKeys:&v111 count:1];
  id v89 = [(EPRoutingSlipEntry *)v85 initWithName:@"quarantineFiles" transactionClass:v86 operands:v88];

  [v42 addObject:v89];
  id v90 = [EPRoutingSlipEntry alloc];
  uint64_t v91 = objc_opt_class();
  CFStringRef v109 = @"nrDeviceIdentifier";
  id v92 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  id v110 = v92;
  id v93 = +[NSDictionary dictionaryWithObjects:&v110 forKeys:&v109 count:1];
  id v94 = [(EPRoutingSlipEntry *)v90 initWithName:@"deleteFiles" transactionClass:v91 operands:v93];

  [v42 addObject:v94];
  v95 = [EPRoutingSlipEntry alloc];
  uint64_t v96 = objc_opt_class();
  CFStringRef v107 = @"transactionDiff";
  id v97 = [EPSagaOperandDiff alloc];
  id v98 = [*(id *)(a1 + 96) _deviceCollectionDiffWithPairingID:*(void *)(*(void *)(*(void *)(a1 + 112) + 8) + 40)];
  id v99 = [(EPSagaOperandDiff *)v97 initWithDiff:v98];
  id v108 = v99;
  id v100 = +[NSDictionary dictionaryWithObjects:&v108 forKeys:&v107 count:1];
  id v101 = [(EPRoutingSlipEntry *)v95 initWithName:@"deleteFromDeviceCollection" transactionClass:v96 operands:v100];

  [v42 addObject:v101];
  id v102 = [[EPRoutingSlipEntry alloc] initWithName:@"updateAppRemovability" transactionClass:objc_opt_class() operands:&__NSDictionary0__struct];

  [v42 addObject:v102];
  (*(void (**)(void))(*(void *)(a1 + 104) + 16))();
}

void sub_10007F300(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Tinker migration sent", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_10007F3B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Tinker migration response %@", buf, 0xCu);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v7)
    {
      uint64_t v8 = [NRPBMigrationResponse alloc];
      uint64_t v9 = [v3 protobuf];
      uint64_t v10 = [v9 data];
      unsigned int v11 = [(NRPBMigrationResponse *)v8 initWithData:v10];

      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = sub_1000E9518((uint64_t)v11);
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 16))(v12, 0, v13);
LABEL_10:
    }
  }
  else if (v7)
  {
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"IDS response failure";
    unsigned int v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    id v14 = +[NSError errorWithDomain:@"com.apple.nanoregistry.NRRemoteObjectTinker" code:1 userInfo:v11];
    (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v14, 0);

    goto LABEL_10;
  }
}

void sub_10007F70C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud terms sent to tinker watches", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_10007F998(id a1, NSError *a2)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion message sent", v5, 2u);
    }
  }
}

void sub_10007FB58(id a1, NSError *a2)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion response sent", v5, 2u);
    }
  }
}

void sub_10007FD24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion Request sent", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_10007FDDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = [NRPBSystemVersionResponse alloc];
      id v6 = [v3 protobuf];
      uint64_t v7 = [v6 data];
      uint64_t v8 = [(NRPBSystemVersionResponse *)v5 initWithData:v7];

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else if (v4)
  {
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    CFStringRef v12 = @"IDS response failure";
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    uint64_t v10 = +[NSError errorWithDomain:@"com.apple.nanoregistry.NRRemoteObjectCloud" code:1 userInfo:v9];
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v10, 0);
  }
}

void sub_100080274(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _deviceDetailsFromCollectionHistory:*(void *)(a1 + 40)];
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    BOOL v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v7 = [v2 migratingDeviceId];
      int v16 = 136315650;
      id v17 = "-[NRRTCMigrationReporter finishMigrationMetricWithDeviceHistory:success:error:]_block_invoke";
      __int16 v18 = 1024;
      int v19 = v6;
      __int16 v20 = 2112;
      unsigned __int8 v21 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s success %{BOOL}d - migrating Device ID: %@", (uint8_t *)&v16, 0x1Cu);
    }
  }
  uint64_t v8 = [*(id *)(a1 + 48) domain];
  uint64_t v9 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 48) code]);
  uint64_t v10 = [*(id *)(a1 + 48) userInfo];
  NSErrorUserInfoKey v11 = [v10 objectForKey:NSLocalizedDescriptionKey];

  CFStringRef v12 = [*(id *)(a1 + 32) migrationReportManager];
  [v12 setErrorCode:v9 domain:v8 description:v11];

  uint64_t v13 = [*(id *)(a1 + 32) migrationReportManager];
  [v13 addDeviceDetails:v2];

  id v14 = [*(id *)(a1 + 32) migrationReportManager];
  [v14 setIsAutomation:_NRIsAutomated()];

  NSErrorUserInfoKey v15 = [*(id *)(a1 + 32) migrationReportManager];
  [v15 setMigrationSucceeded:*(unsigned __int8 *)(a1 + 56)];

  [*(id *)(a1 + 32) _submitRTCMetric];
}

void sub_1000808D8(uint64_t a1)
{
  if (!*(void *)(*(void *)(a1 + 32) + 16))
  {
    id v2 = [objc_alloc((Class)BRRTCMigrationReportManager) initWithPairingID:*(void *)(a1 + 40)];
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v2;
  }
  switch(*(void *)(a1 + 56))
  {
    case 0:
      [*(id *)(*(void *)(a1 + 32) + 16) setMigrationFailedBTKeysNotSynced:1];
      break;
    case 2:
      [*(id *)(*(void *)(a1 + 32) + 16) setMigrationDeviceUnpairedBecauseKeychainIsOff:1];
      break;
    case 3:
      [*(id *)(*(void *)(a1 + 32) + 16) setMigrationDeviceUnpairedBecauseStale:1];
      break;
    case 5:
      [*(id *)(*(void *)(a1 + 32) + 16) setMigrationDeviceUnpairedByUserAction:1];
      break;
    default:
      break;
  }
  id v6 = [*(id *)(a1 + 32) _deviceDetailsFromCollectionHistory:*(void *)(a1 + 48)];
  BOOL v5 = [*(id *)(a1 + 32) migrationReportManager];
  [v5 addDeviceDetails:v6];

  [*(id *)(a1 + 32) _submitRTCMetric];
}

id sub_100081E3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000821CC(uint64_t a1)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [*(id *)(a1 + 32) devicesDictionary];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * (void)v6);
        uint64_t v8 = [*(id *)(a1 + 32) devicesDictionary];
        uint64_t v9 = [v8 objectForKeyedSubscript:v7];

        if ([v9 pendingPairingRequest]) {
          [*(id *)(a1 + 40) advertiser:*(void *)(a1 + 40) receivedPairingRequestForDevice:v9];
        }

        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
}

id sub_1000824FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000825A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_10008337C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 40);
  id v4 = a2;
  uint64_t v5 = [v3 characteristic];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 128);
  *(void *)(v6 + 128) = v5;

  uint64_t v8 = [*(id *)(a1 + 40) central];
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(void **)(v9 + 136);
  *(void *)(v9 + 136) = v8;

  id v11 = [*(id *)(a1 + 40) value];
  [v4 advertiser:v4 receivedData:v11];
}

id sub_100083438(uint64_t a1, int a2)
{
  id v4 = sub_1000A3BC0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = sub_1000A3BC0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"failure";
      if (a2) {
        CFStringRef v7 = @"success";
      }
      int v10 = 138543362;
      CFStringRef v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Calling CoreBluetooth CBPeripheralManager respondToRequest:withResult: with %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  if (a2) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = 3;
  }
  return [*(id *)(a1 + 32) respondToRequest:*(void *)(a1 + 40) withResult:v8];
}

void sub_100083814(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1000A3BC0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = sub_1000A3BC0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v3 length]);
      int v10 = 138543362;
      CFStringRef v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Calling CoreBluetooth CBPeripheralManager respondToRequest:withResult: data.length=%{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  if (v3)
  {
    uint64_t v8 = [v3 subdataWithRange:[*(id *)(a1 + 32) offset] length:[v3 length] - [*(id *)(a1 + 32) offset]];
    [*(id *)(a1 + 32) setValue:v8];

    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 6;
  }
  [*(id *)(a1 + 40) respondToRequest:*(void *)(a1 + 32) withResult:v9];
}

id sub_100083C70(uint64_t a1, void *a2)
{
  return [a2 collection:*(void *)(a1 + 32) deviceDidAppear:*(void *)(a1 + 40)];
}

id sub_100083D38(uint64_t a1, void *a2)
{
  return [a2 collection:*(void *)(a1 + 32) deviceDidDisappear:*(void *)(a1 + 40)];
}

id sub_100083E00(uint64_t a1, void *a2)
{
  return [a2 collection:*(void *)(a1 + 32) deviceInfoDidDealloc:*(void *)(a1 + 40)];
}

void sub_1000840A0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100084128;
  v2[3] = &unk_1001683F8;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateResourcesWithBlock:v2];
}

id sub_100084128(uint64_t a1, void *a2)
{
  return [a2 advertiser:a2 receivedPairingRequestForDevice:*(void *)(a1 + 32)];
}

void sub_1000842C0(id a1)
{
  uint64_t v1 = objc_alloc_init(NRTailspinCapture);
  uint64_t v2 = qword_1001A11E8;
  qword_1001A11E8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000844EC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    id v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#tailspin happening for %@", buf, 0xCu);
  }

  id v4 = +[NSFileManager defaultManager];
  id v25 = 0;
  unsigned __int8 v5 = [v4 createDirectoryAtPath:@"/private/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/NanoRegistry" withIntermediateDirectories:1 attributes:0 error:&v25];
  id v6 = v25;

  if (v5)
  {
    CFStringRef v7 = [*(id *)(a1 + 40) formatter];
    uint64_t v8 = +[NSDate now];
    uint64_t v9 = [v7 stringFromDate:v8];

    int v10 = +[NSString stringWithFormat:@"%@_%@.tailspin", *(void *)(a1 + 32), v9];
    CFStringRef v11 = [@"/private/var/mobile/Library/Logs/CrashReporter/DiagnosticLogs/NanoRegistry" stringByAppendingPathComponent:v10];
    id v12 = objc_alloc_init((Class)NSMutableDictionary);
    [v12 setObject:&__kCFBooleanTrue forKeyedSubscript:UnsafePointer];
    long long v13 = +[NSString stringWithFormat:@"Client %@ XPC call took too long", *(void *)(a1 + 32)];
    [v12 setObject:v13 forKeyedSubscript:UnsafePointer];

    if (*(void *)(a1 + 48))
    {
      id v14 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
      [v12 setObject:v14 forKeyedSubscript:UnsafePointer];
    }
    id v15 = v11;
    int v16 = open((const char *)[v15 UTF8String], 1538, 432);
    if (v16 == -1)
    {
      if (([*(id *)(a1 + 40) loggedOpenFail] & 1) == 0)
      {
        char v22 = nr_daemon_log();
        BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);

        if (v23)
        {
          id v24 = nr_daemon_log();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_1000FA0A8((uint64_t)v15, v24);
          }
        }
        [*(id *)(a1 + 40) setLoggedOpenFail:1];
      }
    }
    else
    {
      int v17 = v16;
      int v18 = tailspin_dump_output_with_options_sync();
      close(v17);
      int v19 = nr_daemon_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v20 = *(void **)(a1 + 32);
        CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 56);
        *(_DWORD *)long long buf = 138412802;
        id v27 = v20;
        __int16 v28 = 2048;
        CFAbsoluteTime v29 = v21;
        __int16 v30 = 1024;
        int v31 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#tailspin for %@ complete %.02f sec, success: %{BOOL}d", buf, 0x1Cu);
      }
    }
  }
  else
  {
    uint64_t v9 = nr_daemon_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#tailspin error making target directory %@", buf, 0xCu);
    }
  }
}

void sub_100084AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100084AE4(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionPrepareIDSServices: Initialized IDS services.", buf, 2u);
    }
  }
  unsigned __int8 v5 = [*(id *)(*(void *)(a1 + 32) + 8) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100084BF8;
  block[3] = &unk_100165E68;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  dispatch_async(v5, block);

  objc_destroyWeak(&v7);
}

void sub_100084BF8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _transactionCompleted];
}

void sub_100084EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100084ED0(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionPrepareIDSServices: Timeout triggered", v8, 2u);
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 16));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = 0;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _transactionCompleted];
}

uint64_t sub_100085174(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001A11F0;
  qword_1001A11F0 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_100085244(uint64_t a1)
{
  uint64_t v2 = [(id)objc_opt_class() sharedInstance];
  BOOL v3 = [v2 activityGroups];
  [v3 addObject:*(void *)(a1 + 40)];

  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "NRPowerAssertion activity group added: %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
}

uint64_t sub_100085870(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100085880(uint64_t a1)
{
}

void sub_100085888(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 24) addObject:*(void *)(a1 + 40)];
  uint64_t v2 = +[NSUUID UUID];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  BOOL v5 = objc_opt_new();
  [v5 setName:*(void *)(a1 + 40)];
  [v5 setUuid:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  [*(id *)(*(void *)(a1 + 32) + 16) setObject:v5 forKeyedSubscript:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  if ([*(id *)(a1 + 32) containsProcessGroup])
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (!*(void *)(v6 + 48))
    {
      uint64_t v7 = +[NROSTransaction transactionWithName:@"powerAssertion"];
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void **)(v8 + 48);
      *(void *)(v8 + 48) = v7;

      uint64_t v6 = *(void *)(a1 + 32);
    }
    if (!*(_DWORD *)(v6 + 12))
    {
      if (*(unsigned char *)(v6 + 8))
      {
        int v10 = nr_daemon_log();
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

        if (v11)
        {
          id v12 = nr_daemon_log();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Not creating NRPowerAssertion power assertion because the lockout timer has timed out!", buf, 2u);
          }
        }
      }
      else
      {
        [(id)v6 takeAssertion];
        if (!*(void *)(*(void *)(a1 + 32) + 64))
        {
          long long v13 = nr_daemon_log();
          BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

          if (v14)
          {
            id v15 = nr_daemon_log();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "NRPowerAssertion creating lockout timer", buf, 2u);
            }
          }
          uint64_t v16 = *(void *)(a1 + 32);
          uint64_t v17 = *(void *)(v16 + 40);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_100085B0C;
          v21[3] = &unk_1001655F8;
          void v21[4] = v16;
          uint64_t v18 = +[TimerFactory timerWithIdentifier:@"com.apple.nanoregistry.NRPowerAssertion.assertionLockoutTimer" delay:1 gracePeriod:v17 waking:v21 handlerQueue:456.0 handlerBlock:0.0];
          uint64_t v19 = *(void *)(a1 + 32);
          __int16 v20 = *(void **)(v19 + 64);
          *(void *)(v19 + 64) = v18;
        }
      }
    }
  }
  [*(id *)(a1 + 32) dumpProcesses:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) isAdded:1];
}

id sub_100085B0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _powerAssertionLockoutTimeout];
}

void sub_100085F18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 12))
  {
    unsigned __int8 v3 = [*(id *)(a1 + 40) isEqual:*(void *)(v2 + 56)];
    uint64_t v2 = *(void *)(a1 + 32);
    if ((v3 & 1) == 0)
    {
      unsigned int v4 = [(id)objc_opt_class() takeAssertionWithSuffix:*(void *)(a1 + 40)];
      uint64_t v2 = *(void *)(a1 + 32);
      if (v4)
      {
        [(id)objc_opt_class() releaseAssertion:*(unsigned int *)(*(void *)(a1 + 32) + 12)];
        *(_DWORD *)(*(void *)(a1 + 32) + 12) = v4;
        uint64_t v2 = *(void *)(a1 + 32);
      }
    }
  }
  BOOL v5 = *(void **)(a1 + 40);
  uint64_t v6 = (id *)(v2 + 56);

  objc_storeStrong(v6, v5);
}

void sub_100086020(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) containsProcessGroup];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    if (!*(unsigned char *)(v3 + 8))
    {
      *(unsigned char *)(v3 + 8) = 1;
      IOPMAssertionID v4 = *(_DWORD *)(*(void *)(a1 + 32) + 12);
      if (v4)
      {
        IOPMAssertionRelease(v4);
        *(_DWORD *)(*(void *)(a1 + 32) + 12) = 0;
        BOOL v5 = nr_daemon_log();
        BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

        if (v6)
        {
          uint64_t v7 = nr_daemon_log();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Assertion lockout timer: NRPowerAssertion power assertion released, _assertionLockoutTimerDidTimeOut set", buf, 2u);
          }
LABEL_13:
        }
      }
    }
  }
  else if (*(void *)(v3 + 48))
  {
    uint64_t v8 = nr_daemon_log();
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);

    if (v9)
    {
      int v10 = nr_daemon_log();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Assertion lockout timer: No power assertion called for, no reset items, NRPowerAssertion releasing transaction", v14, 2u);
      }
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v7 = *(NSObject **)(v11 + 48);
    *(void *)(v11 + 48) = 0;
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(a1 + 32);
  long long v13 = *(void **)(v12 + 64);
  *(void *)(v12 + 64) = 0;
}

id sub_100086454(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeActivityWithUUID:*(void *)(a1 + 40)];
}

uint64_t sub_1000867DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    BOOL v5 = *(void **)(a1 + 8);
    id v9 = v4;
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v7 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v6;

      BOOL v5 = *(void **)(a1 + 8);
    }
    id v3 = [v5 addObject:v9];
    id v4 = v9;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_100086A94(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = objc_alloc_init(NRPBSwitchRecord);
      sub_1000867DC(a1, v12);
      if (!PBReaderPlaceMark() || (sub_10005F93C((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id NRClassesForPropertiesWithArray(void *a1)
{
  id v1 = a1;
  unsigned int v2 = v1;
  if (qword_1001A1208 == -1)
  {
    if (v1)
    {
LABEL_3:
      id v3 = +[NSMutableSet setWithSet:qword_1001A1200];
      char v4 = +[NSSet setWithArray:v2];
      [v3 unionSet:v4];

      goto LABEL_6;
    }
  }
  else
  {
    dispatch_once(&qword_1001A1208, &stru_100168488);
    if (v2) {
      goto LABEL_3;
    }
  }
  id v3 = (id)qword_1001A1200;
LABEL_6:

  return v3;
}

void sub_100087018(id a1)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  uint64_t v13 = objc_opt_class();
  uint64_t v14 = objc_opt_class();
  id v1 = +[NSArray arrayWithObjects:&v4 count:11];
  uint64_t v2 = +[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
  id v3 = (void *)qword_1001A1200;
  qword_1001A1200 = v2;
}

BOOL sub_100087158(BOOL result)
{
  if (result) {
    return *(void *)(result + 24) != 0;
  }
  return result;
}

uint64_t sub_100087174(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 2u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10008719C(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 0x10u;
    *(unsigned char *)(result + 33) = a2;
  }
  return result;
}

uint64_t sub_1000871C4(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 1u;
    *(void *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1000871EC(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 0x20u;
    *(unsigned char *)(result + 34) = a2;
  }
  return result;
}

uint64_t sub_100087214(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 8u;
    *(unsigned char *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_10008723C(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 36) |= 4u;
    *(_DWORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t sub_10008750C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v12;

        continue;
      case 2u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                LODWORD(v17) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v17) = 0;
        }
LABEL_66:
        uint64_t v44 = 16;
        goto LABEL_88;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 36) |= 0x10u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0;
        }
LABEL_70:
        BOOL v45 = v22 != 0;
        uint64_t v46 = 33;
        goto LABEL_83;
      case 4u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v28 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v29 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v9 = v26++ >= 9;
              if (v9)
              {
                uint64_t v27 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v27 = 0;
        }
LABEL_74:
        *(void *)(a1 + 8) = v27;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v32 = 0;
        *(unsigned char *)(a1 + 36) |= 0x20u;
        while (2)
        {
          unint64_t v33 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v33 == -1 || v33 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33 + 1;
            v32 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v9 = v31++ >= 9;
              if (v9)
              {
                uint64_t v32 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v32 = 0;
        }
LABEL_78:
        BOOL v45 = v32 != 0;
        uint64_t v46 = 34;
        goto LABEL_83;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v37 = 0;
        *(unsigned char *)(a1 + 36) |= 8u;
        while (2)
        {
          unint64_t v38 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v38 == -1 || v38 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38 + 1;
            v37 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v9 = v36++ >= 9;
              if (v9)
              {
                uint64_t v37 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v37 = 0;
        }
LABEL_82:
        BOOL v45 = v37 != 0;
        uint64_t v46 = 32;
LABEL_83:
        *(unsigned char *)(a1 + v46) = v45;
        continue;
      case 7u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v42 == -1 || v42 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
      v17 |= (unint64_t)(v43 & 0x7F) << v40;
      if ((v43 & 0x80) == 0) {
        goto LABEL_85;
      }
      v40 += 7;
      BOOL v9 = v41++ >= 9;
      if (v9)
      {
        LODWORD(v17) = 0;
        goto LABEL_87;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_85:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v17) = 0;
    }
LABEL_87:
    uint64_t v44 = 20;
LABEL_88:
    *(_DWORD *)(a1 + v44) = v17;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_100087C20(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

uint64_t sub_100088034(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_100088048(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

BOOL sub_10008805C(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 33) != 0;
  }
  return result;
}

uint64_t sub_100088078(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

BOOL sub_10008808C(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 32) != 0;
  }
  return result;
}

uint64_t sub_1000880A8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

void sub_100088318(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _makeActiveDeviceCollectionDiffWithPairingID:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 48) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000883F0;
  block[3] = &unk_100165868;
  id v6 = *(id *)(a1 + 56);
  id v7 = v2;
  uint64_t v8 = *(void *)(a1 + 32);
  id v4 = v2;
  dispatch_async(v3, block);
}

void sub_1000883F0(uint64_t a1)
{
  uint64_t v2 = [[EPSagaOperandDiff alloc] initWithDiff:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) operands];
  [v3 setObject:v2 forKeyedSubscript:@"deviceCollectionWaitingTransactionDiff"];

  id v4 = [*(id *)(a1 + 48) delegate];
  [v4 transactionDidComplete:*(void *)(a1 + 48)];
}

id sub_10008975C(uint64_t a1, void *a2)
{
  return [a2 centralManagerDidUpdateState:*(void *)(a1 + 32)];
}

id sub_1000898FC(uint64_t a1, void *a2)
{
  return [a2 centralManager:*(void *)(a1 + 32) didConnectPeripheral:*(void *)(a1 + 40)];
}

id sub_100089AC8(void *a1, void *a2)
{
  return [a2 centralManager:a1[4] didDisconnectPeripheral:a1[5] error:a1[6]];
}

id sub_100089CC8(uint64_t a1, void *a2)
{
  return [a2 centralManager:*(void *)(a1 + 32) didUpdatePeripheralConnectionState:*(void *)(a1 + 40)];
}

id sub_100089DB4(void *a1, void *a2)
{
  return [a2 centralManager:a1[4] didFailToConnectPeripheral:a1[5] error:a1[6]];
}

id sub_100089ECC(void *a1, void *a2)
{
  return [a2 centralManager:a1[4] didDiscoverPeripheral:a1[5] advertisementData:a1[6] RSSI:a1[7]];
}

uint64_t sub_10008A1C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10008A6A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_10008A928(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    uint64_t v19 = v1;
    do
    {
      id v6 = 0;
      id v7 = "collection:deviceDidBecomeUnproximate:";
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v6);
        BOOL v9 = sub_1000A3BC0();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = sub_1000A3BC0();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = [v8 uuid];
            uint64_t v13 = [v12 UUIDString];
            [v8 name];
            uint64_t v14 = v7;
            id v15 = v4;
            uint64_t v16 = v5;
            v18 = id v17 = v2;
            *(_DWORD *)long long buf = 138412546;
            char v25 = v13;
            __int16 v26 = 2112;
            uint64_t v27 = v18;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPDeviceCollection: Device %@ %@ has become unproximate (cleared)", buf, 0x16u);

            id v2 = v17;
            uint64_t v5 = v16;
            id v4 = v15;
            id v7 = v14;
            uint64_t v1 = v19;
          }
        }
        if (objc_opt_respondsToSelector()) {
          [*(id *)(*(void *)(v1 + 40) + 8) collection:*(void *)(v1 + 40) deviceDidBecomeUnproximate:v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v4);
  }
}

void sub_10008AB34(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    uint64_t v19 = v1;
    do
    {
      id v6 = 0;
      id v7 = "collection:deviceDidBecomeUndisplayable:";
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v6);
        BOOL v9 = sub_1000A3BC0();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = sub_1000A3BC0();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = [v8 uuid];
            uint64_t v13 = [v12 UUIDString];
            [v8 name];
            uint64_t v14 = v7;
            id v15 = v4;
            uint64_t v16 = v5;
            v18 = id v17 = v2;
            *(_DWORD *)long long buf = 138412546;
            char v25 = v13;
            __int16 v26 = 2112;
            uint64_t v27 = v18;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPDeviceCollection: Device %@ %@ has become undisplayable (cleared)", buf, 0x16u);

            id v2 = v17;
            uint64_t v5 = v16;
            id v4 = v15;
            id v7 = v14;
            uint64_t v1 = v19;
          }
        }
        if (objc_opt_respondsToSelector()) {
          [*(id *)(*(void *)(v1 + 40) + 8) collection:*(void *)(v1 + 40) deviceDidBecomeUndisplayable:v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v4);
  }
}

void sub_10008AD40(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v2 = [*(id *)(a1 + 32) allValues];
  id v3 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    uint64_t v19 = v1;
    do
    {
      id v6 = 0;
      id v7 = "collection:deviceDidDisappear:";
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v6);
        BOOL v9 = sub_1000A3BC0();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = sub_1000A3BC0();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = [v8 uuid];
            uint64_t v13 = [v12 UUIDString];
            [v8 name];
            uint64_t v14 = v7;
            id v15 = v4;
            uint64_t v16 = v5;
            v18 = id v17 = v2;
            *(_DWORD *)long long buf = 138412546;
            char v25 = v13;
            __int16 v26 = 2112;
            uint64_t v27 = v18;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPDeviceCollection: Device %@ %@ has expired (cleared)", buf, 0x16u);

            id v2 = v17;
            uint64_t v5 = v16;
            id v4 = v15;
            id v7 = v14;
            uint64_t v1 = v19;
          }
        }
        if (objc_opt_respondsToSelector()) {
          [*(id *)(*(void *)(v1 + 40) + 8) collection:*(void *)(v1 + 40) deviceDidDisappear:v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v4);
  }
}

uint64_t sub_10008BA70(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidBecomeUnproximate:];
  }
  return result;
}

uint64_t sub_10008BACC(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidBecomeUndisplayable:];
  }
  return result;
}

uint64_t sub_10008BB28(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidDisappear:];
  }
  return result;
}

uint64_t sub_10008BB84(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidBecomeDisplayable:];
  }
  return result;
}

uint64_t sub_10008BBE0(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidBecomeProximate:];
  }
  return result;
}

uint64_t sub_10008BDC4(uint64_t a1)
{
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    id v3 = *(void **)(*(void *)(a1 + 32) + 8);
    return (uint64_t)[v3 collection:deviceDidAppear:];
  }
  return result;
}

id sub_10008BF54(uint64_t a1)
{
  if (objc_opt_respondsToSelector()) {
    [*(id *)(*(void *)(a1 + 32) + 8) collection:*(void *)(a1 + 32) deviceDidAppear:*(void *)(a1 + 40)];
  }
  id v2 = *(void **)(a1 + 32);

  return [v2 update];
}

id sub_10008C518(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_10008C60C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setKey:*(void *)(*(void *)(a1 + 40) + 64)];
}

id sub_10008C9F8(uint64_t a1, void *a2)
{
  return [a2 setKey:*(void *)(*(void *)(a1 + 32) + 64)];
}

uint64_t sub_10008CAB4(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 20) |= 1u;
    *(unsigned char *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_10008CC4C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      id v17 = objc_alloc_init(NRPBNSError);
      objc_storeStrong((id *)(a1 + 8), v17);
      if (!PBReaderPlaceMark() || (sub_1000D5124((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_32;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_34;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_34:
      *(unsigned char *)(a1 + 16) = v14 != 0;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10008CF70(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

BOOL sub_10008D138(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 16) != 0;
  }
  return result;
}

uint64_t sub_10008D154(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_10008D17C(uint64_t a1)
{
  id v2 = (void *)qword_1001A1210;
  if (!qword_1001A1210)
  {
    uint64_t v3 = sub_10008D250();
    char v4 = (void *)qword_1001A1210;
    qword_1001A1210 = v3;

    id v2 = (void *)qword_1001A1210;
  }
  unsigned int v5 = +[NSNumber numberWithUnsignedInteger:a1];
  unint64_t v6 = [v2 objectForKeyedSubscript:v5];

  if (!v6) {
    return 200;
  }
  unint64_t v7 = (void *)qword_1001A1210;
  char v8 = +[NSNumber numberWithUnsignedInteger:a1];
  BOOL v9 = [v7 objectForKeyedSubscript:v8];
  id v10 = [v9 integerValue];

  return (uint64_t)v10;
}

id sub_10008D250()
{
  v2[0] = &off_100176BE0;
  v2[1] = &off_100176C10;
  v3[0] = &off_100176BF8;
  v3[1] = &off_100176C28;
  v2[2] = &off_100176C40;
  v2[3] = &off_100176C58;
  v3[2] = &off_100176BF8;
  v3[3] = &off_100176C70;
  void v2[4] = &off_100176C88;
  void v2[5] = &off_100176CB8;
  void v3[4] = &off_100176CA0;
  void v3[5] = &off_100176CD0;
  void v2[6] = &off_100176CE8;
  v2[7] = &off_100176D18;
  void v3[6] = &off_100176D00;
  void v3[7] = &off_100176D30;
  v2[8] = &off_100176D48;
  v2[9] = &off_100176D78;
  v3[8] = &off_100176D60;
  v3[9] = &off_100176D60;
  v2[10] = &off_100176D90;
  v2[11] = &off_100176DC0;
  v3[10] = &off_100176DA8;
  v3[11] = &off_100176DD8;
  v2[12] = &off_100176DF0;
  v2[13] = &off_100176E20;
  v3[12] = &off_100176E08;
  v3[13] = &off_100176E38;
  v2[14] = &off_100176E50;
  v2[15] = &off_100176E80;
  v3[14] = &off_100176E68;
  v3[15] = &off_100176BF8;
  v2[16] = &off_100176E98;
  v2[17] = &off_100176EC8;
  uint8_t v3[16] = &off_100176EB0;
  v3[17] = &off_100176EE0;
  v2[18] = &off_100176EF8;
  v2[19] = &off_100176F28;
  v3[18] = &off_100176F10;
  v3[19] = &off_100176F40;
  v2[20] = &off_100176F58;
  v2[21] = &off_100176F88;
  v3[20] = &off_100176F70;
  v3[21] = &off_100176FA0;
  v2[22] = &off_100176FB8;
  v2[23] = &off_100176FE8;
  v3[22] = &off_100176FD0;
  v3[23] = &off_100177000;
  v2[24] = &off_100177018;
  v2[25] = &off_100177030;
  v3[24] = &off_100176DD8;
  v3[25] = &off_100176DD8;
  v2[26] = &off_100177048;
  v3[26] = &off_100177060;
  id v0 = +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:27];

  return v0;
}

uint64_t sub_10008D99C(uint64_t a1)
{
  id v2 = (void *)qword_1001A1228;
  if (!qword_1001A1228)
  {
    v12[0] = &off_100177078;
    v12[1] = &off_100176E38;
    v13[0] = &off_100177078;
    v13[1] = &off_100177078;
    v12[2] = &off_100176CD0;
    v12[3] = &off_100177090;
    v13[2] = &off_100177078;
    v13[3] = &off_100177078;
    void v12[4] = &off_1001770A8;
    void v12[5] = &off_100176C28;
    void v13[4] = &off_100177078;
    void v13[5] = &off_100177078;
    v12[6] = &off_100176DA8;
    v12[7] = &off_1001770C0;
    v13[6] = &off_100177078;
    v13[7] = &off_100177078;
    v12[8] = &off_100176E68;
    v12[9] = &off_1001770D8;
    uint8_t v13[8] = &off_100177078;
    v13[9] = &off_100177078;
    v12[10] = &off_1001770F0;
    v12[11] = &off_100176F10;
    v13[10] = &off_100177078;
    v13[11] = &off_100177078;
    v12[12] = &off_100177000;
    v12[13] = &off_100176EB0;
    v13[12] = &off_100177078;
    v13[13] = &off_100176E38;
    v12[14] = &off_100176BF8;
    v12[15] = &off_100176C70;
    v13[14] = &off_100176E38;
    v13[15] = &off_100176E38;
    v12[16] = &off_100176CA0;
    v12[17] = &off_100177108;
    uint8_t v13[16] = &off_100176E38;
    v13[17] = &off_100176E38;
    v12[18] = &off_100176EE0;
    v12[19] = &off_100176F40;
    v13[18] = &off_100176E38;
    v13[19] = &off_100176E38;
    v12[20] = &off_100176D60;
    v12[21] = &off_100177120;
    v13[20] = &off_100176CD0;
    v13[21] = &off_100176CD0;
    v12[22] = &off_100177138;
    v12[23] = &off_100177150;
    v13[22] = &off_100176CD0;
    v13[23] = &off_100176CD0;
    v12[24] = &off_100176D00;
    v12[25] = &off_100177168;
    v13[24] = &off_100177090;
    v13[25] = &off_100177090;
    v12[26] = &off_100176DD8;
    v12[27] = &off_100177180;
    v13[26] = &off_1001770A8;
    v13[27] = &off_1001770A8;
    v12[28] = &off_100177060;
    v12[29] = &off_100177198;
    v13[28] = &off_1001770A8;
    v13[29] = &off_1001770A8;
    v12[30] = &off_100176E08;
    v12[31] = &off_1001771B0;
    v13[30] = &off_1001770A8;
    v13[31] = &off_1001770A8;
    v12[32] = &off_100176D30;
    v12[33] = &off_1001771C8;
    v13[32] = &off_100176C28;
    v13[33] = &off_100176C28;
    v12[34] = &off_1001771E0;
    v12[35] = &off_1001771F8;
    v13[34] = &off_100176C28;
    v13[35] = &off_100176C28;
    v12[36] = &off_100177210;
    v12[37] = &off_100177228;
    v13[36] = &off_100176C28;
    v13[37] = &off_100176C28;
    v12[38] = &off_100177240;
    v12[39] = &off_100177258;
    v13[38] = &off_100176C28;
    v13[39] = &off_100176C28;
    v12[40] = &off_100177270;
    v12[41] = &off_100177288;
    v13[40] = &off_100176C28;
    v13[41] = &off_100177288;
    uint64_t v3 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:42];
    char v4 = (void *)qword_1001A1228;
    qword_1001A1228 = v3;

    id v2 = (void *)qword_1001A1228;
  }
  unsigned int v5 = +[NSNumber numberWithUnsignedInt:a1];
  unint64_t v6 = [v2 objectForKeyedSubscript:v5];

  if (!v6) {
    return 200;
  }
  unint64_t v7 = (void *)qword_1001A1228;
  char v8 = +[NSNumber numberWithUnsignedInt:a1];
  BOOL v9 = [v7 objectForKeyedSubscript:v8];
  id v10 = [v9 integerValue];

  return (uint64_t)v10;
}

id sub_10008DCD8(uint64_t a1)
{
  id v2 = (void *)qword_1001A1218;
  if (!qword_1001A1218)
  {
    v8[0] = &off_100177078;
    v8[1] = &off_100176E38;
    v9[0] = @"NRPairingReportReasonSuccessOrUserAbort";
    v9[1] = @"NRPairingReportReasonInitialTimeout";
    v8[2] = &off_100176CD0;
    v8[3] = &off_100177090;
    v9[2] = @"NRPairingReportReasonMessageSendFailure";
    v9[3] = @"NRPairingReportReasonActivationFailure";
    void v8[4] = &off_1001770A8;
    void v8[5] = &off_100176C28;
    void v9[4] = @"NRPairingReportReasonCrashWriteFailure";
    v9[5] = @"NRPairingReportReasonNonuserAbort";
    void v8[6] = &off_100177288;
    v9[6] = @"NRPairingReportReasonOther";
    uint64_t v3 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:7];
    char v4 = (void *)qword_1001A1218;
    qword_1001A1218 = v3;

    id v2 = (void *)qword_1001A1218;
  }
  unsigned int v5 = +[NSNumber numberWithUnsignedInt:a1];
  unint64_t v6 = [v2 objectForKeyedSubscript:v5];

  return v6;
}

id sub_10008DE40(uint64_t a1)
{
  id v2 = (void *)qword_1001A1220;
  if (!qword_1001A1220)
  {
    v8[0] = &off_100177078;
    v8[1] = &off_100176E38;
    v9[0] = @"NRPairingReportSubreasonSuccess";
    v9[1] = @"NRPairingReportSubreasonCompanionUserAbort";
    v8[2] = &off_100176CD0;
    v8[3] = &off_100177090;
    v9[2] = @"NRPairingReportSubreasonGizmoUserAbort";
    v9[3] = @"NRPairingReportSubreasonBridgeResigned";
    void v8[4] = &off_1001770A8;
    void v8[5] = &off_100176C28;
    void v9[4] = @"NRPairingReportSubreasonSetupResigned";
    v9[5] = @"NRPairingReportSubreasonCompanionBluetoothTurnedOff";
    void v8[6] = &off_100176DA8;
    void v8[7] = &off_1001770C0;
    v9[6] = @"NRPairingReportSubreasonCompanionVersionOld";
    void v9[7] = @"NRPairingReportSubreasonSoftwareUpdateAbort";
    v8[8] = &off_100176E68;
    v8[9] = &off_1001770D8;
    v9[8] = @"NRPairingReportSubreasonManagedConfigRestriction";
    v9[9] = @"NRPairingReportSubreasonGizmoTroubleConnectingAbort";
    v8[10] = &off_1001770F0;
    v8[11] = &off_100176EB0;
    v9[10] = @"NRPairingReportSubreasonCompanionTroubleConnectingAbort";
    v9[11] = @"NRPairingReportSubreasonCompanionBluetoothDiscoveryTimeout";
    v8[12] = &off_100176BF8;
    v8[13] = &off_100176C70;
    v9[12] = @"NRPairingReportSubreasonCompanionBluetoothConnectTimeout";
    v9[13] = @"NRPairingReportSubreasonCompanionIDSConnectTimeout";
    v8[14] = &off_100176CA0;
    v8[15] = &off_100177108;
    v9[14] = @"NRPairingReportSubreasonCompanionInitialPropertyReceiveTimeout";
    v9[15] = @"NRPairingReportSubreasonGizmoInitialPropertyReceiveTimeout";
    uint8_t v8[16] = &off_100176D60;
    v8[17] = &off_100177120;
    uint8_t v9[16] = @"NRPairingReportSubreasonNanoRegistryCompanionMessageSendFailure";
    v9[17] = @"NRPairingReportSubreasonNanoRegistryGizmoMessageSendFailure";
    v8[18] = &off_100177138;
    v8[19] = &off_100177150;
    v9[18] = @"NRPairingReportSubreasonBridgeCompanionMessageSendFailure";
    v9[19] = @"NRPairingReportSubreasonSetupGizmoSendFailure";
    v8[20] = &off_100176D00;
    v8[21] = &off_100177168;
    v9[20] = @"NRPairingReportSubreasonCompanionActivationFailure";
    v9[21] = @"NRPairingReportSubreasonGizmoActivationFailure";
    v8[22] = &off_100176DD8;
    v8[23] = &off_100177180;
    v9[22] = @"NRPairingReportSubreasonCompanionPairingClientDied";
    v9[23] = @"NRPairingReportSubreasonGizmoPairingClientDied";
    v8[24] = &off_100177060;
    v8[25] = &off_100177198;
    v9[24] = @"NRPairingReportSubreasonCompanionNanoRegistryDied";
    v9[25] = @"NRPairingReportSubreasonGizmoNanoRegistryDied";
    v8[26] = &off_100176E08;
    v8[27] = &off_1001771B0;
    v9[26] = @"NRPairingReportSubreasonCompanionFileWriteError";
    v9[27] = @"NRPairingReportSubreasonGizmoFileWriteError";
    v8[28] = &off_100176D30;
    v8[29] = &off_1001771C8;
    v9[28] = @"NRPairingReportSubreasonCompanionClientAbort";
    v9[29] = @"NRPairingReportSubreasonGizmoClientAbort";
    v8[30] = &off_1001771E0;
    v8[31] = &off_1001771F8;
    v9[30] = @"NRPairingReportSubreasonSharingDMissingInfo";
    v9[31] = @"NRPairingReportSubreasonSharingDKeyStorage";
    v8[32] = &off_100177210;
    v8[33] = &off_100177228;
    v9[32] = @"NRPairingReportSubreasonSharingDKeyCreation";
    v9[33] = @"NRPairingReportSubreasonSharingDSendRequest";
    v8[34] = &off_100177240;
    v8[35] = &off_100177258;
    v9[34] = @"NRPairingReportSubreasonSharingDSendResponse";
    v9[35] = @"NRPairingReportSubreasonSharingDResponseTimeout";
    v8[36] = &off_100177270;
    v8[37] = &off_100177288;
    v9[36] = @"NRPairingReportSubreasonSharingDResponseCreation";
    v9[37] = @"NRPairingReportSubreasonOther";
    v8[38] = &off_100176EE0;
    v8[39] = &off_100176F10;
    v9[38] = @"NRPairingReportSubreasonCompanionBluetoothConnectFailure";
    v9[39] = @"NRPairingReportSubreasonCompanionBluetoothBadPIN";
    v8[40] = &off_100177000;
    v9[40] = @"NRPairingReportSubreasonAlreadyPairedWithDevice";
    uint64_t v3 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:41];
    char v4 = (void *)qword_1001A1220;
    qword_1001A1220 = v3;

    id v2 = (void *)qword_1001A1220;
  }
  unsigned int v5 = +[NSNumber numberWithUnsignedInt:a1];
  unint64_t v6 = [v2 objectForKeyedSubscript:v5];

  return v6;
}

id sub_100090170(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAvailability:1 withError:0];
}

id sub_100090180(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAvailability:0 withError:0];
}

void sub_100090C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100090C20(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned int v5 = [v3 pairingID];
  id v6 = [v4 deviceForPairingID:v5];

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 isAltAccount];
}

id sub_100091050(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_1000911FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) assertionFactoryDidBecomeIdle:*(void *)(a1 + 40)];
}

id sub_1000921A8(uint64_t a1, void *a2)
{
  return [a2 peripheralManagerDidUpdateState:*(void *)(a1 + 32)];
}

id sub_100092294(void *a1, void *a2)
{
  return [a2 peripheralManager:a1[4] didAddService:a1[5] error:a1[6]];
}

id sub_100092360(uint64_t a1, void *a2)
{
  return [a2 peripheralManager:*(void *)(a1 + 32) didReceiveReadRequest:*(void *)(a1 + 40)];
}

id sub_100092428(uint64_t a1, void *a2)
{
  return [a2 peripheralManager:*(void *)(a1 + 32) didReceiveWriteRequests:*(void *)(a1 + 40)];
}

id sub_1000924F0(uint64_t a1, void *a2)
{
  return [a2 peripheralManagerDidStartAdvertising:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
}

id sub_100092590(uint64_t a1, void *a2)
{
  return [a2 peripheralManagerIsReadyToUpdateSubscribers:*(void *)(a1 + 32)];
}

id sub_10009267C(void *a1, void *a2)
{
  return [a2 peripheralManager:a1[4] central:a1[5] didSubscribeToCharacteristic:a1[6]];
}

id sub_10009276C(void *a1, void *a2)
{
  return [a2 peripheralManager:a1[4] central:a1[5] didUnsubscribeFromCharacteristic:a1[6]];
}

uint64_t sub_100092950(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 48)) initWithQueue:*(void *)(a1 + 32) delegate:*(void *)(a1 + 40)];
  uint64_t v2 = qword_1001A1250;
  qword_1001A1250 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_100092A28(id a1)
{
  id v1 = (void *)qword_1001A1268;
  qword_1001A1268 = (uint64_t)&off_100177BB0;

  uint64_t v2 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [&off_100177BB0 count]);
  if ([&off_100177BB0 count])
  {
    unint64_t v3 = 0;
    do
    {
      id v4 = +[NSNumber numberWithInt:v3];
      unsigned int v5 = [&off_100177BB0 objectAtIndexedSubscript:v3];
      [v2 setObject:v4 forKeyedSubscript:v5];

      ++v3;
    }
    while ((unint64_t)[&off_100177BB0 count] > v3);
  }
  id v6 = (void *)qword_1001A1270;
  qword_1001A1270 = (uint64_t)v2;
  id v7 = v2;

  v10[0] = &off_100177378;
  v10[1] = &off_100177390;
  v11[0] = @"NRPairedDeviceRegistryStatusCodeReady";
  v11[1] = @"NRPairedDeviceRegistryStatusCodeSwitching";
  v10[2] = &off_1001773A8;
  v10[3] = &off_1001773C0;
  v11[2] = @"NRPairedDeviceRegistryStatusCodePairing";
  v11[3] = @"NRPairedDeviceRegistryStatusCodeMigrating";
  void v10[4] = &off_1001773D8;
  void v10[5] = &off_1001773F0;
  void v11[4] = @"NRPairedDeviceRegistryStatusCodeUnpairing";
  void v11[5] = @"NRPairedDeviceRegistryStatusCodeInvalid";
  uint64_t v8 = +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:6];
  BOOL v9 = (void *)qword_1001A1278;
  qword_1001A1278 = v8;
}

void sub_100092CAC(uint64_t a1, void *a2)
{
  id v6 = a2;
  unint64_t v3 = [v6 statusCodeVoteNumber];

  if (v3)
  {
    id v4 = *(void **)(a1 + 32);
    unsigned int v5 = [v6 statusCodeVoteNumber];
    [v4 addObject:v5];
  }
}

id sub_10009357C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100093910(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100093918(uint64_t a1)
{
  uint64_t v2 = sub_1000A3BC0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = sub_1000A3BC0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v9 = 134217984;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPPeripheralConnectorManager[%p]: Connection persistence timer timed out!", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 96);
  *(void *)(v6 + 96) = 0;

  return [*(id *)(a1 + 32) update];
}

id sub_1000944F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000944FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100094504(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_10009450C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100094514(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_10009451C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_100094524(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_100094B80(id a1)
{
  id v1 = objc_alloc_init(EPPeripheralConnectorManagerFactory);
  uint64_t v2 = qword_1001A1280;
  qword_1001A1280 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_100095450(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) pairingDelegate];
  [v1 pairingCompleted];
}

void sub_1000954E8(id a1)
{
  id v1 = objc_alloc_init(NRNetworkRelayPair);
  uint64_t v2 = qword_1001A1290;
  qword_1001A1290 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_100095630(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) count];
  id result = [*(id *)(*(void *)(a1 + 32) + 8) addObject:*(void *)(a1 + 40)];
  if (!v2)
  {
    id v4 = *(void **)(*(void *)(a1 + 32) + 64);
    return [v4 startScanningForCandidates];
  }
  return result;
}

id sub_10009573C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) count];
  id result = [*(id *)(*(void *)(a1 + 32) + 8) removeObject:*(void *)(a1 + 40)];
  if (v2 == (id)1)
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 8) count];
    if (!result)
    {
      id v4 = *(void **)(*(void *)(a1 + 32) + 64);
      return [v4 stopScanningForCandidates];
    }
  }
  return result;
}

id sub_100095A0C(void *a1)
{
  return [*(id *)(a1[4] + 64) requestPreSharedAuthForCandidateWithIdentifier:a1[5] preSharedAuthData:a1[6]];
}

id sub_100095A20(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_100095C60(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 64) requestPINPairingForCandidateWithIdentifier:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) pairingDelegate];
  [v2 sendXPCDeviceNeedsPasscodeMessage:*(void *)(a1 + 48) passcode:0];
}

id sub_100095CC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_100095EB0(uint64_t a1)
{
  unsigned int v6 = bswap32([*(id *)(a1 + 32) unsignedIntValue]);
  id v2 = +[NSData dataWithBytes:&v6 length:4];
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v2;
  id v5 = v2;

  [*(id *)(*(void *)(a1 + 40) + 64) passPINAuthDataToPairingCandidate:v5];
}

void sub_100095FFC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = nrGetPairingError();
    uint64_t v3 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v18 = NSUnderlyingErrorKey;
    uint64_t v19 = v3;
    id v4 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
    id v5 = [v2 domain];
    unsigned int v6 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, [v2 code], v4);

    id v7 = [*(id *)(a1 + 40) pairingDelegate];
    uint64_t v8 = [v7 pairingReport];
    [v8 setOriginalError:v6];

    int v9 = +[NRQueue registryDaemonQueue];
    uint64_t v10 = [v9 queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100096288;
    block[3] = &unk_1001655F8;
    void block[4] = *(void *)(a1 + 40);
    dispatch_async(v10, block);

    [*(id *)(a1 + 40) reset];
  }
  else
  {
    [*(id *)(a1 + 40) setIsNetworkRelayPairComplete:1];
    uint64_t v11 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending com.apple.nanoregistry.isbeginningtopair darwin notification", buf, 2u);
    }

    notify_post("com.apple.nanoregistry.isbeginningtopair");
    char v12 = [*(id *)(a1 + 40) pairingDelegate];
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(v13 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000962CC;
    v15[3] = &unk_1001655F8;
    void v15[4] = v13;
    [v12 activateDevice:v14 withCompletion:v15];

    objc_storeStrong((id *)(*(void *)(a1 + 40) + 40), *(id *)(a1 + 48));
    [*(id *)(a1 + 40) pairIDS];
  }
}

void sub_100096288(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) pairingDelegate];
  [v1 pairingCompleted];
}

void sub_1000962CC(uint64_t a1)
{
  id v2 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 32) UUIDString];
    int v4 = 138543362;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device %{public}@ activated", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1000965D0(uint64_t a1, uint64_t a2)
{
  int v4 = [*(id *)(a1 + 32) pairingDelegate];
  [v4 initializeAllIDSChannelsBlock:0];

  if (a2)
  {
    nrGetPairingError();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    id v5 = [*(id *)(a1 + 32) pairingDelegate];
    unsigned int v6 = [v5 pairingReport];
    [v6 setOriginalError:v8];
  }
  else
  {
    id v7 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000966F4;
    block[3] = &unk_1001655F8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v7, block);
  }
}

void sub_1000966F4(uint64_t a1)
{
  id v2 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling IDS IDSLocalPairingConnectPairedDevice %@", buf, 0xCu);
  }

  int v4 = +[EPFactory queue];
  IDSLocalPairingConnectPairedDevice();
}

void sub_100096818(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    id v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IDS IDSLocalPairingConnectPairedDevice %@ completed with error %@", (uint8_t *)&v9, 0x16u);
  }

  if (v3)
  {
    uint64_t v6 = nrGetPairingError();
    id v7 = [*(id *)(a1 + 32) pairingDelegate];
    id v8 = [v7 pairingReport];
    [v8 setOriginalError:v6];
  }
}

void sub_100096928(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100096A48;
    block[3] = &unk_100166838;
    int v4 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v9 = v4;
    id v10 = *(id *)(a1 + 48);
    dispatch_async(v3, block);
  }
  else
  {
    nrGetPairingError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = [*(id *)(a1 + 32) pairingDelegate];
    uint64_t v6 = [v5 pairingReport];
    [v6 setOriginalError:v7];
  }
}

void sub_100096A48(uint64_t a1)
{
  id v2 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = [*(id *)(*(void *)(a1 + 32) + 40) UUIDString];
    int v4 = (void *)v3;
    if (*(void *)(*(void *)(a1 + 32) + 24)) {
      uint64_t v5 = "PRESENT";
    }
    else {
      uint64_t v5 = "ABSENT";
    }
    *(_DWORD *)long long buf = 138412546;
    uint64_t v10 = v3;
    __int16 v11 = 2080;
    id v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Calling IDS IDSLocalPairingAddPairedDeviceWithInfo %@ key=%s", buf, 0x16u);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(id *)(a1 + 48);
  uint64_t v6 = +[EPFactory queue];
  IDSLocalPairingAddPairedDeviceWithInfo();
}

void sub_100096BC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = networkrelay_pairing_log_handle();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 40) UUIDString];
    *(_DWORD *)long long buf = 138412546;
    unint64_t v15 = v5;
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IDS IDSLocalPairingAddPairedDeviceWithInfo %@ completed with error %@", buf, 0x16u);
  }
  if (v3)
  {
    uint64_t v6 = nrGetPairingError();
    uint64_t v7 = [*(id *)(a1 + 32) pairingDelegate];
    id v8 = [v7 pairingReport];
    [v8 setOriginalError:v6];
  }
  else
  {
    id v9 = [*(id *)(a1 + 32) pairingDelegate];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100096D60;
    v11[3] = &unk_100165A70;
    id v10 = *(id *)(a1 + 40);
    id v12 = 0;
    id v13 = v10;
    [v9 initializeAllIDSChannelsBlock:v11];

    uint64_t v6 = v13;
  }
}

uint64_t sub_100096D60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100096DE8(uint64_t a1)
{
  if (([*(id *)(a1 + 32) IDSAccountAndDevicePresent] & 1) == 0)
  {
    [*(id *)(a1 + 32) setIDSAccountAndDevicePresent:1];
    unsigned int v2 = [*(id *)(a1 + 32) isReady];
    id v3 = networkrelay_pairing_log_handle();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Account and device are ready:- all three pairing steps are done!", buf, 2u);
      }

      uint64_t v5 = +[NRQueue registryDaemonQueue];
      uint64_t v6 = [v5 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100096F3C;
      block[3] = &unk_1001655F8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v6, block);

      [*(id *)(a1 + 32) reset];
    }
    else
    {
      if (v4)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Account and device are ready:- some of the three pairings steps are not done", buf, 2u);
      }
    }
  }
}

void sub_100096F3C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) pairingDelegate];
  [v1 pairingCompleted];
}

void sub_100096FF4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isNetworkRelayPairComplete]
    && ([*(id *)(a1 + 32) isInitialPropertiesReceived] & 1) == 0)
  {
    [*(id *)(a1 + 32) setIsInitialPropertiesReceived:1];
    unsigned int v2 = [*(id *)(a1 + 32) isReady];
    id v3 = networkrelay_pairing_log_handle();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Properties received:- all three pairing steps are done!", buf, 2u);
      }

      uint64_t v5 = +[NRQueue registryDaemonQueue];
      uint64_t v6 = [v5 queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100097154;
      block[3] = &unk_1001655F8;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v6, block);

      [*(id *)(a1 + 32) reset];
    }
    else
    {
      if (v4)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Properties received:- some of the three pairings steps are not done", buf, 2u);
      }
    }
  }
}

void sub_100097154(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) pairingDelegate];
  [v1 pairingCompleted];
}

void sub_100097448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009747C(uint64_t result, char a2, char a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
  return result;
}

void sub_10009755C(void *a1)
{
  unsigned int v2 = [*(id *)(a1[4] + 72) objectForKeyedSubscript:a1[5]];
  id v4 = v2;
  if (v2)
  {
    id v3 = [v2 extendedMetadata];
  }
  else
  {
    id v3 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

id sub_1000975EC(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)WatchSetupExtendedMetadata) initWithPackedExtendedMetadataData:v1];

  id v3 = [v2 pairingVersion];
  id v4 = [v2 productVersionMajor];
  id v5 = [v2 productVersionMinor];
  id v6 = [v2 postFailSafeObliteration];
  id v7 = [v2 encodedSystemVersion];
  v15[0] = off_1001A0A70;
  uint64_t v8 = +[NSNumber numberWithUnsignedInt:v3];
  v16[0] = v8;
  v15[1] = off_1001A0A78;
  id v9 = +[NSNumber numberWithUnsignedInt:v4];
  v16[1] = v9;
  void v15[2] = off_1001A0A80;
  uint64_t v10 = +[NSNumber numberWithUnsignedInt:v5];
  v16[2] = v10;
  v15[3] = off_1001A0A88;
  uint64_t v11 = +[NSNumber numberWithBool:v6];
  v16[3] = v11;
  void v15[4] = off_1001A0A90;
  uint64_t v12 = +[NSNumber numberWithUnsignedInt:v7];
  void v16[4] = v12;
  id v13 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:5];

  return v13;
}

void sub_100097E18(void *a1)
{
  id v2 = [[NetworkRelayCandidateDeviceInfo alloc] initWithIdentifier:a1[6] extendedMetadata:a1[7]];
  [*(id *)(a1[4] + 72) setObject:v2 forKeyedSubscript:a1[5]];

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1[4] + 8);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        if (objc_opt_respondsToSelector()) {
          [v8 discoveredCandidateName:a1[5] bluetoothIdentifier:a1[8]];
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_100098118(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 72) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (objc_opt_respondsToSelector()) {
          [v7 lostCandidateWithName:*(void *)(a1 + 40) v8];
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

void sub_1000982E4(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  id v2 = [*(id *)(a1 + 32) pairingDelegate];
  [v2 sendXPCOOBKeyChanged:*(void *)(a1 + 40)];
}

void sub_1000983C0(id a1)
{
  id v1 = (const char *)[NRWatchSetupPushDarwinNotification UTF8String];

  notify_post(v1);
}

void sub_10009848C(uint64_t a1)
{
  unsigned int v8 = 0;
  [*(id *)(a1 + 32) getBytes:&v8 length:4];
  uint64_t v2 = bswap32(v8);
  if (v2 > 0xF423F)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = *(void **)(v6 + 24);
    *(void *)(v6 + 24) = 0;

    id v3 = networkrelay_pairing_log_handle();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received an invalid PIN (>999999): %u, not sending", buf, 8u);
    }
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 24), *(id *)(a1 + 32));
    id v3 = [*(id *)(a1 + 40) pairingDelegate];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 32);
    uint64_t v5 = +[NSNumber numberWithUnsignedInt:v2];
    [v3 sendXPCDeviceNeedsPasscodeMessage:v4 passcode:v5];
  }
}

void sub_100098828(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000989B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_100099A6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0);
}

uint64_t sub_100099DF4(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 24) |= 1u;
    *(_DWORD *)(result + 12) = a2;
  }
  return result;
}

uint64_t sub_100099E1C(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 24) |= 4u;
    *(_DWORD *)(result + 20) = a2;
  }
  return result;
}

uint64_t sub_100099E44(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 24) |= 2u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

BOOL sub_10009A068(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__pairingMode;
            goto LABEL_52;
          }
          char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__pairingMode;
            goto LABEL_55;
          }
        }
        NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__pairingMode;
        goto LABEL_53;
      case 2u:
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (2)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMax;
            goto LABEL_52;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v14 |= (unint64_t)(v22 & 0x7F) << v19;
          if (v22 < 0)
          {
            v19 += 7;
            BOOL v17 = v20++ > 8;
            if (v17)
            {
              LODWORD(v14) = 0;
              NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMax;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMax;
        goto LABEL_53;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (2)
        {
          unint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 == -1 || v25 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__watchPairingProtocolVersion;
            goto LABEL_52;
          }
          char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 1;
          v14 |= (unint64_t)(v26 & 0x7F) << v23;
          if (v26 < 0)
          {
            v23 += 7;
            BOOL v17 = v24++ > 8;
            if (v17)
            {
              LODWORD(v14) = 0;
              NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__watchPairingProtocolVersion;
              goto LABEL_55;
            }
            continue;
          }
          break;
        }
        NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__watchPairingProtocolVersion;
        goto LABEL_53;
      case 4u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v14 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        break;
      default:
        if (PBReaderSkipValueWithTag()) {
          continue;
        }
        return 0;
    }
    while (1)
    {
      unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
      v14 |= (unint64_t)(v30 & 0x7F) << v27;
      if ((v30 & 0x80) == 0)
      {
        NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMin;
        goto LABEL_53;
      }
      v27 += 7;
      BOOL v17 = v28++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMin;
        goto LABEL_55;
      }
    }
    NSErrorUserInfoKey v18 = &OBJC_IVAR___NRPBPairingModeRequest__phonePairingProtocolVersionMin;
LABEL_52:
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v14) = 0;
    }
LABEL_55:
    *(_DWORD *)(a1 + *v18) = v14;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10009A7B0(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 8) = a2;
  }
  return result;
}

void sub_10009A864(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1001A12A0;
  qword_1001A12A0 = (uint64_t)v1;

  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  [(id)qword_1001A12A0 setData:v3];
}

uint64_t sub_10009AB54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 48);
  *(void *)(v2 + 48) = 0;

  char v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

void sub_10009AFB8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_10009AFD8(uint64_t a1)
{
  uint64_t v2 = sub_1000A3BC0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    char v4 = sub_1000A3BC0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ExtensiblePair: Unpair Timeout- giving up", (uint8_t *)&v17, 2u);
    }
  }
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  unint64_t v6 = WeakRetained + 5;
  id v7 = objc_loadWeakRetained(WeakRetained + 5);
  char v8 = objc_opt_respondsToSelector();

  if (v8)
  {
    long long v9 = sub_1000A3BC0();
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

    if (v10)
    {
      long long v11 = sub_1000A3BC0();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = objc_loadWeakRetained(v6);
        unsigned int v13 = (objc_class *)objc_opt_class();
        uint64_t v14 = NSStringFromClass(v13);
        id v15 = objc_loadWeakRetained(v6);
        int v17 = 138412546;
        NSErrorUserInfoKey v18 = v14;
        __int16 v19 = 2048;
        id v20 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calling unpairerBluetoothMayHaveFailed: on %@[%p]", (uint8_t *)&v17, 0x16u);
      }
    }
    id v16 = objc_loadWeakRetained(v6);
    [v16 unpairerBluetoothMayHaveFailed:WeakRetained];
  }
  if (WeakRetained)
  {
    [WeakRetained[3] removeAllObjects];
    *((unsigned char *)WeakRetained + 32) = 1;
    [WeakRetained update];
  }
}

id sub_10009B1BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_10009B914(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10009B9F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10009BD7C(_Unwind_Exception *a1)
{
}

void sub_10009C530(_Unwind_Exception *a1)
{
}

BOOL sub_10009C5CC(uint64_t a1, uint64_t a2, double a3, double a4)
{
  BOOL v4 = a3 + -2.0 > a4;
  if (a4 > a3) {
    BOOL v4 = 1;
  }
  unint64_t v5 = a1 - a2;
  if (a1 - a2 < 0) {
    unint64_t v5 = a2 - a1;
  }
  return v5 > 0xA && v4;
}

BOOL sub_10009C5F8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1 - a2;
  if (a1 - a2 < 0) {
    unint64_t v2 = a2 - a1;
  }
  return v2 > 0xA;
}

BOOL sub_10009C60C(uint64_t a1)
{
  return (unint64_t)(a1 + 79) < 0x64;
}

uint64_t sub_10009C748(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init(NRPBNSError);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (sub_1000D5124((uint64_t)v12, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10009C948(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_10009CA54(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_10009CB2C(uint64_t a1)
{
  unint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    char v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sleeping after IDS connect to allow metric testing", buf, 2u);
    }
  }
  dispatch_time_t v5 = dispatch_time(0, 300000000000);
  unint64_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009CC48;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_after(v5, v6, block);
}

void sub_10009CC48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_10009CD28(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_10009CDBC(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 32) |= 4u;
    *(unsigned char *)(result + 29) = a2;
  }
  return result;
}

uint64_t sub_10009CDE4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 32) >> 2) & 1;
  }
  return result;
}

uint64_t sub_10009CDFC(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 32) |= 1u;
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_10009CE24(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 32) & 1;
  }
  return result;
}

uint64_t sub_10009CE3C(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 32) |= 2u;
    *(unsigned char *)(result + 28) = a2;
  }
  return result;
}

uint64_t sub_10009CE64(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 32) >> 1) & 1;
  }
  return result;
}

uint64_t sub_10009CE7C(uint64_t result, char a2)
{
  if (result)
  {
    *(unsigned char *)(result + 32) |= 8u;
    *(unsigned char *)(result + 30) = a2;
  }
  return result;
}

uint64_t sub_10009CEA4(uint64_t result)
{
  if (result) {
    return (*(unsigned __int8 *)(result + 32) >> 3) & 1;
  }
  return result;
}

uint64_t sub_10009D0F4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 16;
        goto LABEL_36;
      case 2u:
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          unint64_t v18 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v18 == -1 || v18 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 1;
            v17 |= (unint64_t)(v19 & 0x7F) << v15;
            if (v19 < 0)
            {
              v15 += 7;
              BOOL v9 = v16++ >= 9;
              if (v9)
              {
                uint64_t v17 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v17 = 0;
        }
LABEL_54:
        BOOL v36 = v17 != 0;
        uint64_t v37 = 29;
        goto LABEL_67;
      case 3u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1 || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v24 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v22) = 0;
                goto LABEL_58;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v22) = 0;
        }
LABEL_58:
        *(_DWORD *)(a1 + 24) = v22;
        continue;
      case 4u:
        uint64_t v12 = PBReaderReadString();
        uint64_t v13 = 8;
LABEL_36:
        unint64_t v25 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        continue;
      case 5u:
        char v26 = 0;
        unsigned int v27 = 0;
        uint64_t v28 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              BOOL v9 = v27++ >= 9;
              if (v9)
              {
                uint64_t v28 = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v28 = 0;
        }
LABEL_62:
        BOOL v36 = v28 != 0;
        uint64_t v37 = 28;
        goto LABEL_67;
      case 6u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        *(unsigned char *)(a1 + 32) |= 8u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v34 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v35 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        goto LABEL_64;
      }
      v31 += 7;
      BOOL v9 = v32++ >= 9;
      if (v9)
      {
        uint64_t v33 = 0;
        goto LABEL_66;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v33 = 0;
    }
LABEL_66:
    BOOL v36 = v33 != 0;
    uint64_t v37 = 30;
LABEL_67:
    *(unsigned char *)(a1 + v37) = v36;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10009D67C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

void sub_10009D694(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_10009DA34(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

BOOL sub_10009DA48(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 29) != 0;
  }
  return result;
}

uint64_t sub_10009DA64(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t sub_10009DA78(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

BOOL sub_10009DA8C(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 28) != 0;
  }
  return result;
}

BOOL sub_10009DAA8(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 30) != 0;
  }
  return result;
}

id sub_10009DF84(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearWithCleanupBlock:*(void *)(a1 + 40)];
}

void sub_10009E138(void *a1)
{
  if (!a1[4])
  {
    int v12 = 0;
    goto LABEL_18;
  }
  id v2 = +[NSValue valueWithNonretainedObject:](NSValue, "valueWithNonretainedObject:");
  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 44));
  BOOL v3 = [*(id *)(a1[5] + 48) objectForKey:v2];

  id v4 = [*(id *)(a1[5] + 48) count];
  unsigned int v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    if (v6)
    {
      unint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        char v8 = (objc_class *)objc_opt_class();
        BOOL v9 = NSStringFromClass(v8);
        uint64_t v10 = a1[4];
        uint64_t v11 = a1[5];
        int v24 = 138412802;
        unint64_t v25 = v9;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        __int16 v28 = 2112;
        uint64_t v29 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Object %@[%p] already in %@", (uint8_t *)&v24, 0x20u);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 44));
  }
  else
  {
    if (v6)
    {
      uint64_t v13 = nr_daemon_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (objc_class *)objc_opt_class();
        char v15 = NSStringFromClass(v14);
        uint64_t v16 = a1[4];
        uint64_t v17 = a1[5];
        int v24 = 138412802;
        unint64_t v25 = v15;
        __int16 v26 = 2048;
        uint64_t v27 = v16;
        __int16 v28 = 2112;
        uint64_t v29 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Object %@[%p] added to %@", (uint8_t *)&v24, 0x20u);
      }
    }
    [*(id *)(a1[5] + 48) setObject:a1[4] forKey:v2];
    os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 44));
    uint64_t v18 = *(void *)(a1[5] + 56);
    if (v18) {
      (*(void (**)(uint64_t, void))(v18 + 16))(v18, a1[4]);
    }
    if (!v4)
    {
      uint64_t v23 = *(void *)(a1[5] + 16);
      if (v23) {
        (*(void (**)(void))(v23 + 16))();
      }
      int v12 = 1;
      goto LABEL_17;
    }
  }
  int v12 = 0;
LABEL_17:

LABEL_18:
  if (a1[6])
  {
    char v19 = nr_daemon_log();
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);

    if (v20)
    {
      unsigned int v21 = nr_daemon_log();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = (void *)a1[5];
        int v24 = 138412546;
        unint64_t v25 = v22;
        __int16 v26 = 1024;
        LODWORD(v27) = v12;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@ calling allocation block with %{BOOL}d", (uint8_t *)&v24, 0x12u);
      }
    }
    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10009E5D0(void *a1)
{
  if (a1[4])
  {
    id v2 = +[NSValue valueWithNonretainedObject:](NSValue, "valueWithNonretainedObject:");
    os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 44));
    BOOL v3 = [*(id *)(a1[5] + 48) objectForKey:v2];

    if (v3)
    {
      id v4 = [*(id *)(a1[5] + 48) count];
      unsigned int v5 = nr_daemon_log();
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

      if (v6)
      {
        unint64_t v7 = nr_daemon_log();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          char v8 = (objc_class *)objc_opt_class();
          BOOL v9 = NSStringFromClass(v8);
          uint64_t v10 = a1[4];
          uint64_t v11 = a1[5];
          int v38 = 138412802;
          char v39 = v9;
          __int16 v40 = 2048;
          uint64_t v41 = v10;
          __int16 v42 = 2112;
          uint64_t v43 = v11;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Object %@[%p] removed from %@", (uint8_t *)&v38, 0x20u);
        }
      }
      [*(id *)(a1[5] + 48) removeObjectForKey:v2];
      os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 44));
      uint64_t v12 = a1[6];
      if (v4 == (id)1)
      {
        if (v12)
        {
          uint64_t v13 = nr_daemon_log();
          BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

          if (v14)
          {
            char v15 = nr_daemon_log();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v16 = (void *)a1[5];
              int v38 = 138412290;
              char v39 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%@ emptied, calling clean-up block with YES", (uint8_t *)&v38, 0xCu);
            }
          }
          (*(void (**)(void))(a1[6] + 16))();
        }
        uint64_t v17 = *(void *)(a1[5] + 24);
        if (v17) {
          (*(void (**)(void))(v17 + 16))();
        }
      }
      else if (v12)
      {
        uint64_t v33 = nr_daemon_log();
        BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);

        if (v34)
        {
          char v35 = nr_daemon_log();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v36 = (void *)a1[5];
            int v38 = 138412290;
            char v39 = v36;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "%@ not emptied, calling clean-up block with NO", (uint8_t *)&v38, 0xCu);
          }
        }
        (*(void (**)(void))(a1[6] + 16))();
      }
      uint64_t v37 = *(void *)(a1[5] + 64);
      if (v37) {
        (*(void (**)(uint64_t, void))(v37 + 16))(v37, a1[4]);
      }
    }
    else
    {
      uint64_t v22 = nr_daemon_log();
      BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);

      if (v23)
      {
        int v24 = nr_daemon_log();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v25 = (objc_class *)objc_opt_class();
          __int16 v26 = NSStringFromClass(v25);
          uint64_t v27 = a1[4];
          uint64_t v28 = a1[5];
          int v38 = 138412802;
          char v39 = v26;
          __int16 v40 = 2048;
          uint64_t v41 = v27;
          __int16 v42 = 2112;
          uint64_t v43 = v28;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Object %@[%p] not in %@", (uint8_t *)&v38, 0x20u);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 44));
      if (a1[6])
      {
        uint64_t v29 = nr_daemon_log();
        BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);

        if (v30)
        {
          char v31 = nr_daemon_log();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v32 = (void *)a1[5];
            int v38 = 138412290;
            char v39 = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%@ does not have the object, calling clean-up block with NO", (uint8_t *)&v38, 0xCu);
          }
        }
        (*(void (**)(void))(a1[6] + 16))();
      }
    }
  }
  else if (a1[6])
  {
    uint64_t v18 = nr_daemon_log();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

    if (v19)
    {
      BOOL v20 = nr_daemon_log();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v21 = (void *)a1[5];
        int v38 = 138412290;
        char v39 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%@ object is nil, calling clean-up block with NO", (uint8_t *)&v38, 0xCu);
      }
    }
    (*(void (**)(void))(a1[6] + 16))();
  }
}

void sub_10009EB30(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 44));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) dictionaryRepresentation];
  BOOL v3 = [v2 allValues];
  id v4 = [v3 copy];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 44));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v5 = v4;
  BOOL v6 = (char *)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v6)
  {
    unint64_t v7 = v6;
    uint64_t v8 = *(void *)v11;
    do
    {
      BOOL v9 = 0;
      do
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(v5);
        }
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40));
        ++v9;
      }
      while (v7 != v9);
      unint64_t v7 = (char *)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v7);
  }
}

void sub_10009F090(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained fireTimer];
}

uint64_t sub_10009F220(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(void **)(a1 + 8);
    id v9 = v4;
    if (!v5)
    {
      id v6 = objc_alloc_init((Class)NSMutableArray);
      unint64_t v7 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v6;

      id v5 = *(void **)(a1 + 8);
    }
    id v3 = [v5 addObject:v9];
    id v4 = v9;
  }

  return _objc_release_x1(v3, v4);
}

uint64_t sub_10009F4D8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init((Class)NRPBProperty);
      sub_10009F220(a1, v12);
      if (!PBReaderPlaceMark() || (NRPBPropertyReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10009F980(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_10009F994(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_10009FAA0(id a1)
{
  id v1 = objc_alloc_init(NRRestoreFromBackupTracker);
  uint64_t v2 = qword_1001A12B0;
  qword_1001A12B0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000A0B14(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_1000A0FF8(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) _updateRegistryForUnpairing:v3 pairingReport:*(void *)(a1 + 48)];
  char v4 = [*(id *)(a1 + 56) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A10B8;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 40);
  dispatch_async(v4, block);

  return 0;
}

void sub_1000A10B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000A11AC(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NRTermsAcknowledgementRegistry];
  uint64_t v2 = qword_1001A12C0;
  qword_1001A12C0 = v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000A15BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A15CC(uint64_t a1)
{
}

void sub_1000A15D4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) registryDelegate];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000A16B4;
  v7[3] = &unk_100168700;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v10 = v5;
  uint64_t v11 = v6;
  [v2 add:v8 forDeviceID:v4 withCompletion:v7];
}

void sub_1000A16B4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = a1[5];
      int v11 = 138412802;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "NRTermsAcknowlegementRegistryProxy: add:(%@) forDeviceID:(%@) completed with error %@", (uint8_t *)&v11, 0x20u);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
  uint64_t v9 = *(void *)(a1[7] + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
}

void sub_1000A1AE0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) registryDelegate];
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000A1BC0;
  v7[3] = &unk_100168750;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  id v10 = v5;
  uint64_t v11 = v6;
  [v2 checkForAcknowledgement:v8 forDeviceID:v4 withCompletion:v7];
}

void sub_1000A1BC0(void *a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v9 = @"NO";
      uint64_t v10 = a1[4];
      uint64_t v11 = a1[5];
      if (a2) {
        CFStringRef v9 = @"YES";
      }
      int v14 = 138413058;
      uint64_t v15 = v10;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      __int16 v18 = 2112;
      CFStringRef v19 = v9;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "NRTermsAcknowlegementRegistryProxy: checkForAcknowledgement:(%@) forDeviceID:(%@) accepted=%@ error=%@", (uint8_t *)&v14, 0x2Au);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
  uint64_t v12 = *(void *)(a1[7] + 8);
  __int16 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

void sub_1000A1EEC(uint64_t a1, void *a2)
{
  id v3 = [a2 activeDevice];
  uint64_t v4 = [v3 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  id v5 = [v4 value];

  uint64_t v6 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000A1FEC;
  block[3] = &unk_100165868;
  id v11 = v5;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = v5;
  dispatch_async(v6, block);
}

void sub_1000A1FEC(id *a1)
{
  if ([a1[4] BOOLValue])
  {
    uint64_t v2 = [a1[5] serviceFromClass:objc_opt_class()];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1000A20D8;
    v4[3] = &unk_100165980;
    void v4[4] = a1[6];
    [v2 xpcFakePairedSyncIsCompleteWithCompletion:v4];
  }
  else
  {
    id v3 = [a1[6] delegate];
    [v3 transactionDidComplete:a1[6]];
  }
}

void sub_1000A20D8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_1000A220C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001A12D8;
  qword_1001A12D8 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

id sub_1000A3060(id *a1, uint64_t a2, uint64_t a3)
{
  id result = [a1[4] _termsEvent:a1[5] isNewerVersionOfTermsEvent:a2];
  if (result)
  {
    uint64_t v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      uint64_t v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = [a1[5] termsDigest];
        int v10 = 138412290;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "removing duplicate terms event with digest %@", (uint8_t *)&v10, 0xCu);
      }
    }
    return [a1[6] addIndex:a3];
  }
  return result;
}

uint64_t sub_1000A3554(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001A12E0;
  qword_1001A12E0 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void *sub_1000A36A8(void *result)
{
  int v1 = *((unsigned __int8 *)result + 40);
  uint64_t v2 = result[4];
  if (v1 != *(unsigned __int8 *)(v2 + 20))
  {
    *(unsigned char *)(v2 + 20) = v1;
    uint64_t v3 = result[4];
    if (!*(unsigned char *)(v3 + 20))
    {
      ++*(void *)(v3 + 24);
      uint64_t v3 = result[4];
    }
    return [(id)v3 _writeConnectivityStatus];
  }
  return result;
}

uint64_t sub_1000A3794(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 20);
  return result;
}

uint64_t sub_1000A3854(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(void *)(*(void *)(result + 32) + 24);
  return result;
}

id sub_1000A3BC0()
{
  if (qword_1001A12F8 != -1) {
    dispatch_once(&qword_1001A12F8, &stru_100168798);
  }
  id v0 = (void *)qword_1001A12F0;

  return v0;
}

void sub_1000A3C14(id a1)
{
  os_log_t v1 = os_log_create("com.apple.NanoRegistry", "eplibrary");
  uint64_t v2 = qword_1001A12F0;
  qword_1001A12F0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_1000A3C58()
{
  if (qword_1001A1308 != -1) {
    dispatch_once(&qword_1001A1308, &stru_1001687B8);
  }
  id v0 = (void *)qword_1001A1300;

  return v0;
}

void sub_1000A3CAC(id a1)
{
  os_log_t v1 = os_log_create("com.apple.NanoRegistry", "eplife");
  uint64_t v2 = qword_1001A1300;
  qword_1001A1300 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

id sub_1000A3CF0()
{
  if (qword_1001A1318 != -1) {
    dispatch_once(&qword_1001A1318, &stru_1001687D8);
  }
  id v0 = (void *)qword_1001A1310;

  return v0;
}

void sub_1000A3D44(id a1)
{
  os_log_t v1 = os_log_create("com.apple.NanoRegistry", "client");
  uint64_t v2 = qword_1001A1310;
  qword_1001A1310 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000A3ED4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t v16 = PBReaderReadData();
      uint64_t v17 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      unint64_t v14 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
      {
        uint64_t v15 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
      }
      else
      {
        *(unsigned char *)(a2 + v11) = 1;
        uint64_t v15 = 0;
      }
      *(void *)(a1 + 8) = v15;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000A4130(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

double sub_1000A42FC(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t sub_1000A4318(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + 8) = a2;
  }
  return result;
}

id sub_1000A45D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000A4A44(void *a1)
{
  uint64_t v3 = a1[4];
  uint64_t v2 = (void *)a1[5];
  uint64_t v4 = a1[6];
  if (v3) {
    return [v2 characteristicReader:v4 didFailWithError:];
  }
  else {
    return [v2 characteristicReader:v4 didRead:v4];
  }
}

id sub_1000A4F14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 72);
  *(void *)(v2 + 72) = 0;

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _readSequenceTimedOut];
}

id sub_1000A4F58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 80);
  *(void *)(v2 + 80) = 0;

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _characteristicDiscoveryTimedOut];
}

void sub_1000A6504(uint64_t a1)
{
  if (*(void *)(a1 + 32) != qword_1001A1330 && (objc_msgSend((id)qword_1001A1330, "isEqual:") & 1) == 0)
  {
    objc_storeStrong((id *)&qword_1001A1330, *(id *)(a1 + 32));
    uint64_t v2 = +[NRQueue registryDaemonQueue];
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000A65C4;
    v3[3] = &unk_1001655F8;
    void v3[4] = *(void *)(a1 + 40);
    [v2 dispatchAsync:v3];
  }
}

id sub_1000A65C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) pollProperties];
}

uint64_t sub_1000A66BC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000A66CC(uint64_t a1)
{
}

void sub_1000A66D4(uint64_t a1)
{
}

void sub_1000A6740(id a1)
{
  os_log_t v1 = objc_alloc_init(NRLocalPropertyMonitor);
  uint64_t v2 = (void *)qword_1001A1338;
  qword_1001A1338 = (uint64_t)v1;

  +[NRLocalPropertyMonitor initializeGetters];
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v4 = (void *)qword_1001A1320;
  qword_1001A1320 = (uint64_t)v3;

  mach_timebase_info((mach_timebase_info_t)&dword_1001A1348);
}

void sub_1000A68A0(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.nanoregistry.localproperties.remotedevicechipidnumber", 0);
  uint64_t v2 = qword_1001A1328;
  qword_1001A1328 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000A6E80(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_1000A6F0C(uint64_t a1, void *a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v4 = a2;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v18 objects:v26 count:16];
    if (v5)
    {
      id v7 = v5;
      uint64_t v8 = *(void *)v19;
      *(void *)&long long v6 = 138412290;
      long long v17 = v6;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v4);
          }
          int v10 = [(id)qword_1001A1320 objectForKeyedSubscript:*(void *)(*((void *)&v18 + 1) + 8 * i), v17];
          uint64_t v11 = nr_daemon_log();
          BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

          if (v12)
          {
            uint64_t v13 = nr_daemon_log();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = v17;
              unint64_t v25 = v10;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "MobileGestalt says property %@ has changed", buf, 0xCu);
            }
          }
          buf[0] = 0;
          uint64_t v14 = [WeakRetained _readProperty:v10 shouldUpdateCache:1 isUpdated:buf forceLog:1];
          uint64_t v15 = (void *)v14;
          if (buf[0])
          {
            uint64_t v22 = v10;
            uint64_t v23 = v14;
            uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
            [WeakRetained _notifyObserversPropertiesDidChange:v16 thisIsAllOfThem:0];
          }
        }
        id v7 = [v4 countByEnumeratingWithState:&v18 objects:v26 count:16];
      }
      while (v7);
    }
  }
}

void sub_1000A7110(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NRQueue registryDaemonQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000A71E0;
  v5[3] = &unk_100165E68;
  objc_copyWeak(&v6, (id *)(a1 + 32));
  [v4 dispatchAsync:v5];

  objc_destroyWeak(&v6);
}

void sub_1000A71CC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000A71E0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    unsigned __int8 v12 = 0;
    uint64_t v3 = NRDevicePropertyCurrentUserLocale;
    id v4 = [WeakRetained _readProperty:NRDevicePropertyCurrentUserLocale shouldUpdateCache:1 isUpdated:&v12 forceLog:0];
    unsigned __int8 v11 = 0;
    uint64_t v5 = NRDevicePropertyPreferredLanguages;
    id v6 = [v2 _readProperty:NRDevicePropertyPreferredLanguages shouldUpdateCache:1 isUpdated:&v11 forceLog:0];
    id v7 = objc_opt_new();
    uint64_t v8 = v7;
    if (v12)
    {
      if (v4)
      {
        [v7 setObject:v4 forKeyedSubscript:v3];
      }
      else
      {
        char v9 = +[NSNull null];
        [v8 setObject:v9 forKeyedSubscript:v3];
      }
    }
    if (v11)
    {
      if (v6)
      {
        [v8 setObject:v6 forKeyedSubscript:v5];
      }
      else
      {
        int v10 = +[NSNull null];
        [v8 setObject:v10 forKeyedSubscript:v5];
      }
    }
    if (v12 | v11) {
      [v2 _notifyObserversPropertiesDidChange:v8 thisIsAllOfThem:0];
    }
  }
}

void sub_1000A735C(id a1)
{
  uint64_t v1 = +[CTCellularPlanManager sharedManager];
}

void sub_1000A7390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NRQueue registryDaemonQueue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000A7468;
  v5[3] = &unk_1001654B8;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  void v5[4] = *(void *)(a1 + 32);
  [v4 dispatchAsync:v5];

  objc_destroyWeak(&v6);
}

void sub_1000A7454(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000A7468(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    [*(id *)(a1 + 32) pollProperties];
    id WeakRetained = v3;
  }
}

void sub_1000A74BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    v21[2] = sub_1000A76DC;
    v21[3] = &unk_1001655F8;
    void v21[4] = WeakRetained;
    id v6 = objc_retainBlock(v21);
    id v7 = v3;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v8 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v18;
      do
      {
        unsigned __int8 v11 = 0;
        do
        {
          if (*(void *)v18 != v10) {
            objc_enumerationMutation(v7);
          }
          unsigned __int8 v12 = [v7 objectForKeyedSubscript:*(void *)(*((void *)&v17 + 1) + 8 * (void)v11)];
          if ([v12 changeType] == (id)2) {
            ((void (*)(void *))v6[2])(v6);
          }

          unsigned __int8 v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v9);
    }
    uint64_t v13 = NRDevicePropertyIsActive;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    void v15[2] = sub_1000A7868;
    v15[3] = &unk_100168910;
    id v16 = v6;
    uint64_t v14 = v6;
    +[NRMutableDeviceCollection parseDiff:v7 forPropertyChange:v13 withBlock:v15];
  }
}

void sub_1000A76DC(uint64_t a1)
{
  uint64_t v2 = +[NRQueue registryDaemonQueue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000A7770;
  v3[3] = &unk_1001655F8;
  void v3[4] = *(void *)(a1 + 32);
  [v2 dispatchAsync:v3];
}

void sub_1000A7770(uint64_t a1)
{
  char v7 = 0;
  uint64_t v2 = NRDevicePropertyPairedDeviceCount;
  uint64_t v3 = [*(id *)(a1 + 32) _readProperty:NRDevicePropertyPairedDeviceCount shouldUpdateCache:1 isUpdated:&v7 forceLog:1];
  id v4 = (void *)v3;
  if (v7)
  {
    uint64_t v8 = v2;
    uint64_t v5 = (void *)v3;
    if (!v3)
    {
      uint64_t v5 = +[NSNull null];
    }
    id v9 = v5;
    id v6 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    if (!v4) {

    }
    [*(id *)(a1 + 32) _notifyObserversPropertiesDidChange:v6 thisIsAllOfThem:0];
  }
}

uint64_t sub_1000A7868(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000A83C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) pollProperties];
}

id sub_1000A84CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) pollProperties];
}

void sub_1000A975C(_Unwind_Exception *a1)
{
}

void sub_1000A9824(void *a1)
{
  uint64_t v2 = HKIrregularRhythmNotificationsV1UpdateVersion();
  uint64_t v3 = *(void *)(a1[4] + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  uint64_t v5 = HKIrregularRhythmNotificationsV1UDIDeviceIdentifier();
  uint64_t v6 = *(void *)(a1[5] + 8);
  char v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  uint64_t v8 = (void *)HKCurrentFeatureYearOfRelease;
  objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), HKCurrentFeatureYearOfRelease);
  id v9 = @"ElectrocardiogramRecording";
  id v49 = 0;
  uint64_t v10 = +[NRHKProductVersions versionForProductWithName:v9 error:&v49];
  id v11 = v49;
  uint64_t v12 = *(void *)(a1[7] + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v10;

  if (v11)
  {
    uint64_t v14 = nr_daemon_log();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);

    if (v15)
    {
      id v16 = nr_daemon_log();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1000FABEC();
      }
    }
  }
  id v48 = 0;
  uint64_t v17 = +[NRHKProductVersions UDIDeviceIdentifierForProductWithName:v9 error:&v48];
  id v18 = v48;
  uint64_t v19 = *(void *)(a1[8] + 8);
  long long v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v17;

  if (v18)
  {
    long long v21 = nr_daemon_log();
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);

    if (v22)
    {
      uint64_t v23 = nr_daemon_log();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
        sub_1000FAB84();
      }
    }
  }
  objc_storeStrong((id *)(*(void *)(a1[9] + 8) + 40), v8);
  id v47 = 0;
  uint64_t v24 = +[NRHKProductAvailableRegions regionsForProductWithName:v9 error:&v47];
  id v25 = v47;
  uint64_t v26 = *(void *)(a1[10] + 8);
  uint64_t v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v24;

  if (v25)
  {
    uint64_t v28 = nr_daemon_log();
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_ERROR);

    if (v29)
    {
      BOOL v30 = nr_daemon_log();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
        sub_1000FAB1C();
      }
    }
  }
  id v46 = 0;
  uint64_t v31 = +[NRHKProductAvailableRegions regionsForProductWithName:@"ElectrocardiogramV2Recording" error:&v46];
  id v32 = v46;
  uint64_t v33 = *(void *)(a1[11] + 8);
  BOOL v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v31;

  if (v32)
  {
    char v35 = nr_daemon_log();
    BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);

    if (v36)
    {
      uint64_t v37 = nr_daemon_log();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
        sub_1000FAB1C();
      }
    }
  }
  objc_storeStrong((id *)(*(void *)(a1[12] + 8) + 40), HKMenstrualCyclesAlgorithmsVersion);
  objc_storeStrong((id *)(*(void *)(a1[13] + 8) + 40), HKCardioFitnessFeatureVersion);
  id v45 = 0;
  uint64_t v38 = +[NRHKProductAvailableRegions regionsForProductWithName:@"CardioFitness" error:&v45];
  id v39 = v45;
  uint64_t v40 = *(void *)(a1[14] + 8);
  uint64_t v41 = *(void **)(v40 + 40);
  *(void *)(v40 + 40) = v38;

  if (v39)
  {
    __int16 v42 = nr_daemon_log();
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);

    if (v43)
    {
      uint64_t v44 = nr_daemon_log();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
        sub_1000FAB1C();
      }
    }
  }
  objc_storeStrong((id *)(*(void *)(a1[15] + 8) + 40), HKSleepCoachingFeatureVersion);
  objc_storeStrong((id *)(*(void *)(a1[16] + 8) + 40), HKSleepTrackingFeatureVersion);
  objc_storeStrong((id *)(*(void *)(a1[17] + 8) + 40), HKSleepActionsFeatureVersion);
  objc_storeStrong((id *)(*(void *)(a1[18] + 8) + 40), HKOxygenSaturationRecordingFeatureVersion);
}

id sub_1000A9C90(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CA0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CB0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CC0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CD0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CE0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9CF0(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D00(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D10(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D20(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D30(id a1)
{
  return &off_100177438;
}

id sub_1000A9D3C(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D4C(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D5C(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D6C(uint64_t a1)
{
  return *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
}

id sub_1000A9D7C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltStringValue:@"UserAssignedDeviceName" withName:NRDevicePropertyName];
}

id sub_1000A9D9C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"BluetoothAddress"];
}

id sub_1000A9DB0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"WifiAddress"];
}

_UNKNOWN **sub_1000A9DC4(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) _getGestaltDictionary:@"DiskUsage"];
  uint64_t v2 = [v1 objectForKey:kMGQDiskUsageTotalDataCapacity];
  uint64_t v3 = v2;
  if (!v2) {
    uint64_t v2 = &off_100177450;
  }
  id v4 = v2;

  return v4;
}

id sub_1000A9E3C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"SerialNumber"];
}

id sub_1000A9E50(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"ProductType"];
}

id sub_1000A9E64(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"JwLB44/jEB8aFDpXQ16Tuw"];
}

id sub_1000A9E78(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"DeviceName"];
}

id sub_1000A9E8C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"RegionCode"];
}

id sub_1000A9EA0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"RegionInfo"];
}

id sub_1000A9EB4(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"ModelNumber"];
}

id sub_1000A9EC8(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"HWModelStr"];
}

id sub_1000A9EDC(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"UniqueDeviceID"];
}

id sub_1000A9EF0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"main-screen-width"];
}

id sub_1000A9F04(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"main-screen-height"];
}

id sub_1000A9F18(id a1)
{
  uint64_t v1 = +[NRLocalPropertyMonitor _getGestaltNumber:@"main-screen-width"];
  uint64_t v2 = +[NRLocalPropertyMonitor _getGestaltNumber:@"main-screen-height"];
  uint64_t v3 = v2;
  if (v1) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = +[NSValue nrValueWithCGSize:](NSValue, "nrValueWithCGSize:", (double)(uint64_t)[v1 integerValue], (double)(uint64_t)[v2 integerValue]);
  }

  return v5;
}

id sub_1000A9FDC(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"DeviceClass"];
}

id sub_1000A9FF0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"main-screen-scale"];
}

id sub_1000AA004(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"ReleaseType"];
}

id sub_1000AA018(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"AtmPEO/j+Pdr8+WKxv4Aaw"];
}

id sub_1000AA02C(id a1)
{
  return +[NRMagicSwitchHelper companionSeed];
}

id sub_1000AA038(id a1)
{
  uint64_t v1 = +[NRPairingDaemon sharedInstance];
  uint64_t v2 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v1 mirrorOfPairedDeviceCount]);

  return v2;
}

id sub_1000AA0A0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"green-tea"];
}

id sub_1000AA0B4(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"SigningFuse"];
}

id sub_1000AA0C8(id a1)
{
  uint64_t v1 = &off_100177468;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v2 = +[NRSystemProperties sharedInstance];
    unsigned int v3 = [v2 isVirtualDevice];
    BOOL v4 = &off_100177480;
    if (v3) {
      BOOL v4 = &off_100177468;
    }
    uint64_t v1 = v4;
  }

  return v1;
}

id sub_1000AA14C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"device-name"];
}

id sub_1000AA160(id a1)
{
  uint64_t v1 = +[NSLocale currentLocale];
  uint64_t v2 = [v1 localeIdentifier];

  return v2;
}

id sub_1000AA1B4(id a1)
{
  Boolean keyExistsAndHasValidFormat = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"StoreDemoMode", @"com.apple.demo-settings", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v2 = AppBooleanValue == 0;
  }
  else {
    BOOL v2 = 1;
  }
  uint64_t v3 = !v2;
  BOOL v4 = +[NSNumber numberWithBool:v3];

  return v4;
}

id sub_1000AA228(id a1)
{
  uint64_t v1 = +[NSLocale preferredLanguages];
  id v2 = [v1 copy];

  return v2;
}

id sub_1000AA278(id a1)
{
  uint64_t v1 = (void *)_CFCopySystemVersionDictionary();
  id v2 = [v1 objectForKeyedSubscript:@"MarketingVersion"];

  return v2;
}

id sub_1000AA2C8(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltStringValue:@"InternationalMobileEquipmentIdentity" withName:NRDevicePropertyIMEI];
}

id sub_1000AA2E8(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltStringValue:@"MobileEquipmentIdentifier" withName:NRDevicePropertyMEID];
}

id sub_1000AA308(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltStringValue:@"xRyzf9zFE/ycr/wJPweZvQ" withName:NRDevicePropertyIMEI2];
}

id sub_1000AA328(uint64_t a1)
{
  id v343 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"02168E84-5DD8-4B19-9204-A79F04B33A32"];
  v347[0] = v343;
  id v342 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"07E81B2D-193A-4898-BBA4-B15E85A96BE5"];
  v347[1] = v342;
  id v341 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"307631AF-B309-4885-A4F2-122F156AF14B"];
  v347[2] = v341;
  id v340 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"41453C7F-5D99-4842-9DE4-F37E3A4D9D50"];
  v347[3] = v340;
  id v339 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8A7396EE-44E9-401D-8546-9F60232B29E7"];
  v347[4] = v339;
  id v338 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"EE952AF6-9A20-42FC-B4CB-992D2C6AEFEA"];
  v347[5] = v338;
  id v337 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B4B27F79-6817-4254-9232-37BFB09CE1B5"];
  v347[6] = v337;
  id v336 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"39F111D2-C3D1-4CCC-AB05-E464DE58625D"];
  v347[7] = v336;
  id v335 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5EB8B901-444F-48F5-827F-03C90C093368"];
  v347[8] = v335;
  id v334 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"62AA8EC5-64FC-43D1-B856-D28D6520FA30"];
  v347[9] = v334;
  id v333 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"776E7CEE-4FCE-4780-A401-691B2C16EF68"];
  v347[10] = v333;
  id v332 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A6E3ECD8-FC98-42E0-B5AD-AC9ECA775FBE"];
  v347[11] = v332;
  id v331 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DB36394D-9CED-4841-BA1D-84B029EA25BB"];
  v347[12] = v331;
  id v330 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B8365B0F-C979-491B-86E3-EBAE195F1755"];
  v347[13] = v330;
  id v329 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8CC94E41-97B4-4CC4-9B3B-521BEC8FBE5C"];
  v347[14] = v329;
  id v328 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C5BAD2E8-BB79-4E9E-8A0D-757C60D31053"];
  v347[15] = v328;
  id v327 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DFC98DCA-E7AB-47EB-8864-FDC656ED1BBF"];
  v347[16] = v327;
  id v326 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5B2CCB95-1760-430C-97B9-34BEBB5BD70B"];
  v347[17] = v326;
  id v325 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"46526F47-0B4B-41FF-A959-AC358550958C"];
  v347[18] = v325;
  id v324 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"330AF1F2-FD8F-40E4-B79C-2B0C476E6EAF"];
  v347[19] = v324;
  id v323 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"939B3E66-90BD-4C9E-9FE5-150D338FB4E8"];
  v347[20] = v323;
  id v322 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9EAFA034-BAB5-455F-A122-C2EB399E8FCE"];
  v347[21] = v322;
  id v321 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0AEBD96A-0D13-42E0-9D9B-3D4BFAB8B7DB"];
  v347[22] = v321;
  id v320 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"01EF2814-5C39-4B0E-84B9-7B8E2CC06AA3"];
  v347[23] = v320;
  id v319 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D1E83259-F3FC-4F20-82C3-C528D45560C3"];
  v347[24] = v319;
  id v318 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"ED96B2DC-49DD-470D-BFE6-1F112AF20308"];
  v347[25] = v318;
  id v317 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"90F4EAD7-DC19-4601-ADB1-D1CEE0C99EF8"];
  v347[26] = v317;
  id v316 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E9CD3885-6BAE-44AF-8A2E-D2AC35470D03"];
  v347[27] = v316;
  id v315 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"15AFBF9D-37E7-4B41-8698-B0E518A0F6DC"];
  v347[28] = v315;
  id v314 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2AA261DF-FF42-40DE-A14F-1177D50EBD08"];
  v347[29] = v314;
  id v313 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1171F09A-B15F-4C2C-A315-1A7A125CA54F"];
  v347[30] = v313;
  id v312 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D1C41A00-1654-467C-8793-6B4299699982"];
  v347[31] = v312;
  id v311 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2523BB16-06C1-4DEC-BD23-CC0613AB0BDF"];
  v347[32] = v311;
  id v310 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"EFAF2AEE-778B-4CCF-A640-EBD8C662D59B"];
  v347[33] = v310;
  id v309 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"871E76A4-AD36-4AAF-B894-13CAF677C531"];
  v347[34] = v309;
  id v308 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E5E86144-6C47-4545-8F52-A5D468C1DA85"];
  v347[35] = v308;
  id v307 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DEBFF23F-9327-44FB-A219-0428BEBD5BA7"];
  v347[36] = v307;
  id v306 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7664BE48-77C3-48E5-BEE7-7EB383BA163C"];
  v347[37] = v306;
  id v305 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CCBCAB2C-F590-4386-BC88-BFBEE2C2F7F4"];
  v347[38] = v305;
  id v304 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1F1097A5-5A0B-4795-9FBE-B206DB49FA1D"];
  v347[39] = v304;
  id v303 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"784ED593-AE41-4087-B276-8C42AA1B9C36"];
  v347[40] = v303;
  id v302 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0054136F-C120-452A-93D8-9259272B812F"];
  v347[41] = v302;
  id v301 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"033C7B1F-5B25-459A-8CC7-4824B9C219F7"];
  v347[42] = v301;
  id v300 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CFD76F6A-B79A-475D-BCD7-7EB10AC33956"];
  v347[43] = v300;
  id v299 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6ADE877A-70EB-43A1-A4D1-3E4BB50EFA54"];
  v347[44] = v299;
  id v298 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E2FB408E-3F1C-4F55-89DE-A25CDF6D4C39"];
  v347[45] = v298;
  id v297 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B2183583-3631-471B-AE16-57C389570AA3"];
  v347[46] = v297;
  id v296 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"282F1EE6-A144-4106-AFFB-2BDB5B59FD0D"];
  v347[47] = v296;
  id v295 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"135CFEB8-D730-40DE-AA77-7668663F72C4"];
  v347[48] = v295;
  id v294 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"506B78D5-F8AD-489A-8BF7-AD41268D0FF2"];
  v347[49] = v294;
  id v293 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"76EFD58C-2211-40CE-A4BA-891FE464B629"];
  v347[50] = v293;
  id v292 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DF99F619-B83A-4084-A29C-F15A82DE2B15"];
  v347[51] = v292;
  id v291 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"91499922-4C63-41CF-884A-686713CE2738"];
  v347[52] = v291;
  id v290 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"410B4A76-885F-4715-83AF-E23513740668"];
  v347[53] = v290;
  id v289 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2A8E43A1-0310-4167-8096-6A6E2F1722CE"];
  v347[54] = v289;
  id v288 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AC310276-2B5D-4C25-A6AC-7D59ED5CB5D3"];
  v347[55] = v288;
  id v287 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"97181DA3-0809-43D6-9559-3FDBC5629F62"];
  v347[56] = v287;
  id v286 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"37CF71A8-CFCC-41D9-ADE7-704585AFA68B"];
  v347[57] = v286;
  id v285 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A5F5D34E-AF48-47F6-A9A8-B2BDAC1D7FA2"];
  v347[58] = v285;
  id v284 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A309A9D3-F806-4E30-909A-2D301780A8EB"];
  v347[59] = v284;
  id v283 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C9D5B8D6-68B4-4C31-9CB7-4CA5309D4C83"];
  v347[60] = v283;
  id v282 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B88B6795-0FF5-4FCB-82FA-07E09D904414"];
  v347[61] = v282;
  id v281 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5DA2E6C5-2C4D-444E-B3E8-CCDEF7AB41AB"];
  v347[62] = v281;
  id v280 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8E0684E7-903A-41D9-8548-8AA1971E2C27"];
  v347[63] = v280;
  id v279 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B8CFCCD2-C6BE-441C-B60D-C5036FB9ABC5"];
  v347[64] = v279;
  id v278 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F06861AE-125A-424B-AF25-C1DAA8F7AEBC"];
  v347[65] = v278;
  id v277 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"21FFC697-E29F-4C65-878E-2AC90BAF5B9E"];
  v347[66] = v277;
  id v276 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7275F1C6-7EB4-4406-B552-DC910FBFD07C"];
  v347[67] = v276;
  id v275 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9E6855A3-F1FD-444C-ACB5-000F4203EF76"];
  v347[68] = v275;
  id v274 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"873627CA-D131-46F4-B477-E653F7445DF9"];
  v347[69] = v274;
  id v273 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"58F7E0B5-513C-49C6-BE68-EACC9107342D"];
  v347[70] = v273;
  id v272 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1CFACCB8-FFEB-4682-A50E-16F853583912"];
  v347[71] = v272;
  id v271 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81603B90-6702-446B-A559-CBA22E92C0B8"];
  v347[72] = v271;
  id v270 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB2653AC-2D55-4D7D-9BFB-7D99AA89708B"];
  v347[73] = v270;
  id v269 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"887DC9F2-A55D-41F6-8639-64776A041BF1"];
  v347[74] = v269;
  id v268 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5A9640F0-1FE3-4019-8157-075CBFC8DBA1"];
  v347[75] = v268;
  id v267 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D5737C61-3EE6-43DA-B714-00F3746C50E1"];
  v347[76] = v267;
  id v266 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9BABD25D-2A8D-45DC-AAD6-D13E3348D818"];
  v347[77] = v266;
  id v265 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"02979F49-FAFA-49CC-8478-C2562BC81FB6"];
  v347[78] = v265;
  id v264 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D6645782-7A76-4E52-8155-151366EBD4AB"];
  v347[79] = v264;
  id v263 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4649745E-094C-4F84-80DD-F7AB46F54792"];
  v347[80] = v263;
  id v262 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5C068089-C478-48CE-892A-13DBA45BE33A"];
  v347[81] = v262;
  id v261 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B68E1DBD-8CE4-4684-8F65-FF0AF2040D4E"];
  v347[82] = v261;
  id v260 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E58F9466-0386-4DE7-B6CE-537A8B54C9B7"];
  v347[83] = v260;
  id v259 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E8CD02C1-B7C0-4E12-8A44-AB54B5F52E5F"];
  v347[84] = v259;
  id v258 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"30304660-A06F-440F-B9FA-B44739ADCEE6"];
  v347[85] = v258;
  id v257 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8D49EAB9-4F90-45FB-9F8E-D61E108D89F1"];
  v347[86] = v257;
  id v256 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DC264F98-B0E2-4D96-9248-663A801E4FB1"];
  v347[87] = v256;
  id v255 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"78E1881C-F6E1-421F-BC90-A1EBF1784BB1"];
  v347[88] = v255;
  id v254 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB878DA5-6746-4240-8A43-D7658EE7BFF4"];
  v347[89] = v254;
  id v253 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B51CCBC5-6C2B-47BB-90EA-002DE9C4DA79"];
  v347[90] = v253;
  id v252 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"66A5B423-7CBE-423C-A13B-6389E27D63B9"];
  v347[91] = v252;
  id v251 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F4DCA831-3D30-45BC-BDCC-E99D0E482D94"];
  v347[92] = v251;
  id v250 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"BF083122-A7BA-478F-A94E-E3F337F1177E"];
  v347[93] = v250;
  id v249 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9B084186-2B81-4526-9A7D-AD719EC81C83"];
  v347[94] = v249;
  id v248 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"006D876D-4576-49C4-BCE4-D1C2CC85EDDA"];
  v347[95] = v248;
  id v247 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"25B1B001-1F02-49A0-B7E7-6225BA6B004D"];
  v347[96] = v247;
  id v246 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"36A0EB23-E045-4E99-9D71-8FB9A853ADA7"];
  v347[97] = v246;
  id v245 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"03C7A646-DB1E-404B-B393-033E5496A383"];
  v347[98] = v245;
  id v244 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2A57E5FF-A774-4903-B58D-41F01654BC76"];
  v347[99] = v244;
  id v243 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"22073865-96B7-4F94-83FD-07164A231B79"];
  v347[100] = v243;
  id v242 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A5E3D6BA-0998-4787-BE2A-0BBF2B359CC0"];
  v347[101] = v242;
  id v241 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2CE80E5D-FA17-4BD4-A48C-DFC3A79FB8ED"];
  v347[102] = v241;
  id v240 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"47B00C18-4A79-437C-9C4E-058CB7A82F4E"];
  v347[103] = v240;
  id v239 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C0F3C2C3-0CDE-4DF9-A95A-789AC9A0348B"];
  v347[104] = v239;
  id v238 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"50BDC6C0-0803-11EA-AAEF-0800200C9A66"];
  v347[105] = v238;
  id v237 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CBAC2DE5-C7A2-4DA2-932B-E57BABEA3B97"];
  v347[106] = v237;
  id v236 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AC48DBC9-7E0D-469B-987C-D95820181912"];
  v347[107] = v236;
  id v235 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"82AA137D-7207-4997-8F6E-9DB738D759F1"];
  v347[108] = v235;
  id v234 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D0D02931-2190-4E71-B843-C73C4ADB3F27"];
  v347[109] = v234;
  id v233 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D5DDA3E7-8863-48E3-95C7-3C65C5E31718"];
  v347[110] = v233;
  id v232 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"41714B27-B839-4AB5-8A36-6191015AA8FE"];
  v347[111] = v232;
  id v231 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2E9A45BB-4F07-4D6B-9B65-41933EED0DCA"];
  v347[112] = v231;
  id v230 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B4FBD189-BF37-4C38-A2C3-A0471795086C"];
  v347[113] = v230;
  id v229 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6B4C8BB6-D411-406E-BD9B-9CA0F2296C96"];
  v347[114] = v229;
  id v228 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AE03A48B-6794-4978-96CC-425A7F6443DA"];
  v347[115] = v228;
  id v227 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0B75AFAC-6373-41D2-A4F3-D4C1E9295A07"];
  v347[116] = v227;
  id v226 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7640DD53-A02B-4C03-AB93-9FA49BCD0AB6"];
  v347[117] = v226;
  id v225 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2C1C2266-9A61-4756-8AFD-9DFE14C54864"];
  v347[118] = v225;
  id v224 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AC48DBC9-7E0D-469B-987C-D95820181912"];
  v347[119] = v224;
  id v223 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"91E62A39-143F-4EFE-997B-71EAE2AE5D6A"];
  v347[120] = v223;
  id v222 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81152CB5-FFBB-4058-B107-C38FE9888110"];
  v347[121] = v222;
  id v221 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A7ECBEFE-1F57-4037-8007-469E4BF74064"];
  v347[122] = v221;
  id v220 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"54B99808-A820-45A2-8FF1-51C9DD7328F6"];
  v347[123] = v220;
  id v219 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5500A959-3C9D-4787-9235-2A1210C3559E"];
  v347[124] = v219;
  id v218 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C2765ACC-C8FA-4C7A-9B11-B6B9DBE0CBBB"];
  v347[125] = v218;
  id v217 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0F0D81BB-499A-4556-AA06-3616ECDC6BBB"];
  v347[126] = v217;
  id v216 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1A231DC1-A6A1-473B-AE74-D40A5656BB22"];
  v347[127] = v216;
  id v215 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"21EB4560-EFA0-46AA-B75C-401D30C5BBF1"];
  v347[128] = v215;
  id v214 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E81D5008-B450-487E-9A35-6029799E6588"];
  v347[129] = v214;
  id v213 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0DB19B8C-E479-4162-80B3-E8ECE76B4117"];
  v347[130] = v213;
  id v212 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"47B09AC1-3757-485D-9FB4-F124AC8FE430"];
  v347[131] = v212;
  id v211 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FAB030A8-8E57-49E3-AFE8-418FBB1F049A"];
  v347[132] = v211;
  id v210 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"03E92753-7AAE-45AD-AFC7-BBDB94BE69F7"];
  v347[133] = v210;
  id v209 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"63DBFE2B-B226-4EF1-AFBB-43E4CCE6A43E"];
  v347[134] = v209;
  id v208 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FFF1DEA3-3FB3-43F8-B986-EAFC838148EA"];
  v347[135] = v208;
  id v207 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"BADF6E3E-9021-4B23-8ADA-045A705DADC6"];
  v347[136] = v207;
  id v206 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"27120128-3A0E-492A-8BBC-C57A70E362CA"];
  v347[137] = v206;
  id v205 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"069990E1-4702-480F-86A8-334D7AA738B0"];
  v347[138] = v205;
  id v204 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B0EC13E2-AEB5-4CBE-9821-37ADCA5FB0DA"];
  v347[139] = v204;
  id v203 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C814BC07-AE2D-4061-9C1E-D97BED9DAC22"];
  v347[140] = v203;
  id v202 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1087B4F0-9D95-407D-98BC-195A5FB6EDF5"];
  v347[141] = v202;
  id v201 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C7C06707-D0C2-405E-AFB4-7F215413B262"];
  v347[142] = v201;
  id v200 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C4F6386A-780D-40E5-9900-0A26C16273A1"];
  v347[143] = v200;
  id v199 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB4827F9-FA0C-4D61-8E1C-1F77B23CF26A"];
  v347[144] = v199;
  id v198 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F405E6BC-C306-4B65-B1D7-439AB5A152CC"];
  v347[145] = v198;
  id v197 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A87D220D-4D8E-42CE-AB39-6E071D6B2B2C"];
  v347[146] = v197;
  id v196 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2B5E630F-55DE-4122-A36B-5F8F77D1363E"];
  v347[147] = v196;
  id v195 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"79129411-2004-4B40-89F6-B0E14651B97F"];
  v347[148] = v195;
  id v194 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F903EABC-5A2E-4948-BB6B-031369165B24"];
  v347[149] = v194;
  id v193 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D19E94CA-E3A6-45FB-A534-710914B5AB77"];
  v347[150] = v193;
  id v192 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"436C3C42-1855-4417-BD50-BD3D1B870E0F"];
  v347[151] = v192;
  id v191 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5C64C95B-8E7C-46AB-A110-1E51C93D7B7F"];
  v347[152] = v191;
  id v190 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B437A3A0-FD60-4D9B-8A18-814E9891E245"];
  v347[153] = v190;
  id v189 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"EECEF837-B719-472A-BE4C-375E1852CA2F"];
  v347[154] = v189;
  id v188 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B7B7F81F-E5A3-4B99-82C2-C5A0095FE70A"];
  v347[155] = v188;
  id v187 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"79770938-0C49-40BD-B593-4E04E7557E01"];
  v347[156] = v187;
  id v186 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AD3C8B62-1FB2-4A7A-ABF1-EBD5AF574209"];
  v347[157] = v186;
  id v185 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6993A7A9-22E3-4F44-AAAB-4F3DFDD83818"];
  v347[158] = v185;
  id v184 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"06FB3B8E-7CE9-4C98-A47E-87BCCCB70EC1"];
  v347[159] = v184;
  id v183 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AD784C80-650B-11EB-8572-0800200C9A66"];
  v347[160] = v183;
  id v182 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3C190EF7-40E9-47BF-9B87-3408FD90B9E6"];
  v347[161] = v182;
  id v181 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FFDA9C57-8508-4B50-B6D8-EEE862251FC0"];
  v347[162] = v181;
  id v180 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2A51E7B3-1B80-4981-9F09-F725BC3A8065"];
  v347[163] = v180;
  id v179 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6E76AC51-634C-415F-8491-C6784AF2C471"];
  v347[164] = v179;
  id v178 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E90AC0F3-E83B-42C8-8EDB-D6C6BCF08D65"];
  v347[165] = v178;
  id v177 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"47E58695-B34B-4546-88F8-E9DE533278A9"];
  v347[166] = v177;
  id v176 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"48DB09AC-404A-4F1D-8952-61DCA0277C32"];
  v347[167] = v176;
  id v175 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"674FD660-822D-4A0A-8A10-7ED7299FB8F7"];
  v347[168] = v175;
  id v174 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FA784EAB-0396-4E07-B68A-66815BB84E3E"];
  v347[169] = v174;
  id v173 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A19F7B33-B4B5-4859-8FDD-DEDA6FD71895"];
  v347[170] = v173;
  id v172 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CBF3763A-5F42-4463-B714-39903987FE90"];
  v347[171] = v172;
  id v171 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8C05D669-D731-40D5-B6D7-B4D9D55C6427"];
  v347[172] = v171;
  id v170 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"ED2B57B6-9EA3-4ED9-843D-FE92F74B2DE0"];
  v347[173] = v170;
  id v169 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"894C532F-65E7-4E2E-B3A3-9D0A8C0CE76D"];
  v347[174] = v169;
  id v168 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C3FD35B9-C30A-4893-B94B-56080B5FD9B7"];
  v347[175] = v168;
  id v167 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B5C93485-A89F-4ACA-8845-3F508A6620EF"];
  v347[176] = v167;
  id v166 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"88D7381B-F0D1-498F-88D5-9F016A27EB4F"];
  v347[177] = v166;
  id v165 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"45D167B6-F5A6-469D-A81B-3146DE124929"];
  v347[178] = v165;
  id v164 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8051616D-3CE1-4C54-906D-456FC386E9D6"];
  v347[179] = v164;
  id v163 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6F13FF03-6511-4180-BBF3-4C231C10D458"];
  v347[180] = v163;
  id v162 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D0C5C53B-F689-49B1-B51E-EB48B20F92AF"];
  v347[181] = v162;
  id v161 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"157666B2-886F-4DBB-BFEE-669DE191D8BB"];
  v347[182] = v161;
  id v160 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D718E4BE-8067-432E-AF41-7342473499D5"];
  v347[183] = v160;
  id v159 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FEE09F8C-155A-48C0-AF0E-5F62F88238BC"];
  v347[184] = v159;
  id v158 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A334D6D2-9BEC-414E-BD6C-8AC1E5FB8CA3"];
  v347[185] = v158;
  id v157 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"54EDC00B-9FDF-442B-93A8-0562A7EBCCE0"];
  v347[186] = v157;
  id v156 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"35165B81-461F-4423-8903-A50CEFB1C204"];
  v347[187] = v156;
  id v155 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C990FB84-055B-467E-B7AD-EB88FCE19825"];
  v347[188] = v155;
  id v154 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"1BA5E83D-D9B3-4AE7-A4D0-A26C34386F2D"];
  v347[189] = v154;
  id v153 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F5E0C9C7-CA38-421E-808A-0705258C1EF9"];
  v347[190] = v153;
  id v152 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"36BD47D1-7193-4236-867F-3555B4AC18B0"];
  v347[191] = v152;
  id v151 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C79D46D1-84CF-4208-AEA0-39117F9770E7"];
  v347[192] = v151;
  id v150 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FD975695-3B94-465A-86E1-26276C5835A8"];
  v347[193] = v150;
  id v149 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"06943DC7-5853-4025-B160-D33A8C0D0449"];
  v347[194] = v149;
  id v148 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"58F4EB1B-0B75-4C11-A3F4-E0D4E7759511"];
  v347[195] = v148;
  id v147 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"61A9519E-E0F5-4F71-9CA4-33AC4A444B44"];
  v347[196] = v147;
  id v146 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D8A5B9F1-722E-436E-B616-1398AEB94F1B"];
  v347[197] = v146;
  id v145 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"62A0825B-34DD-490E-9DB9-D13AE37F601B"];
  v347[198] = v145;
  id v144 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"46D8FA11-A747-4C0B-B4F4-0AB1308739B4"];
  v347[199] = v144;
  id v143 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B9EB8122-4210-4EFC-A48A-1EFEA037CDF0"];
  v347[200] = v143;
  id v142 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6114C32D-3A7F-4C06-A90E-2106E5A304D3"];
  v347[201] = v142;
  id v141 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B8E1457C-60C6-4CBE-AE96-F0AA874D3100"];
  v347[202] = v141;
  id v140 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A3D877D2-408A-43F1-9CA4-39C9F3609A93"];
  v347[203] = v140;
  id v139 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E63BF630-F388-4DCC-B73A-40EFB659A4C2"];
  v347[204] = v139;
  id v138 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7BFF3E43-2495-4724-91FA-D8DDA37FD05C"];
  v347[205] = v138;
  id v137 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E49AA0D4-4AA5-47C3-9272-4644AF0E6FA9"];
  v347[206] = v137;
  id v136 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7DBEFCBF-73F8-4C55-844C-B0F3D3B6FF24"];
  v347[207] = v136;
  id v135 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4A864DD3-D518-4FB7-9583-38E6B0581585"];
  v347[208] = v135;
  id v134 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"BD0302DD-00BC-43C2-81E9-48C038E6F8BB"];
  v347[209] = v134;
  id v133 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E7B1CD81-445C-4840-9F24-3A32B510B6A1"];
  v347[210] = v133;
  id v132 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"15874345-3594-4D3F-9A28-BA2AEA650A0D"];
  v347[211] = v132;
  id v131 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9107296E-53BE-49DA-88A8-8C9A1BF81CFD"];
  v347[212] = v131;
  id v130 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4F322FC4-C692-412B-9B8C-10DED4AFEB85"];
  v347[213] = v130;
  id v129 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A14F53B9-2C95-4293-B688-2D8D34A4239E"];
  v347[214] = v129;
  id v128 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0292BF89-0343-4CB2-98D0-E9F0BD8947E4"];
  v347[215] = v128;
  id v127 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CB0D11F9-5EA4-4B0F-B640-0D6D61FC7116"];
  v347[216] = v127;
  id v126 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2D039937-4DE9-4AE3-B28E-F65B3D258152"];
  v347[217] = v126;
  id v125 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"BC465234-0FF9-46F6-9ACD-0394027F67A8"];
  v347[218] = v125;
  id v124 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E2CC1285-2DF4-4FCE-8206-878565E0FC35"];
  v347[219] = v124;
  id v123 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"827A9753-8ABC-42BF-AFC5-76F5D1838CF9"];
  v347[220] = v123;
  id v122 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F8F7D952-6C43-4CE0-80A3-044AA0D3CC63"];
  v347[221] = v122;
  id v121 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F364B0F1-4FC0-461A-8B5B-93CF7E2BC79F"];
  v347[222] = v121;
  id v120 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"832275CC-B0F5-46CA-85B0-92463453065E"];
  v347[223] = v120;
  id v119 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8DD39CF2-0515-442A-99FD-06F9AAA59249"];
  v347[224] = v119;
  id v118 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"94251CFF-6FD3-4126-9C80-71C8FC8F9F6C"];
  v347[225] = v118;
  id v117 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C8D90945-3158-4E8A-986A-284B5502DC17"];
  v347[226] = v117;
  id v116 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3504A514-833D-4594-B619-1EBA887521B8"];
  v347[227] = v116;
  id v115 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E8688E98-D216-469E-9B5C-4D33527B0C6F"];
  v347[228] = v115;
  id v114 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4CC676F2-E761-4AA8-AE40-1A40F3868BDE"];
  v347[229] = v114;
  id v113 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3650D526-DBF6-4230-8502-4508D40210DB"];
  v347[230] = v113;
  id v112 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0D852855-E6CF-45FA-B786-B26BE87FF939"];
  v347[231] = v112;
  id v111 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"75584707-D2C4-481E-B8E8-3D8EDD459B61"];
  v347[232] = v111;
  id v110 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3ED136C0-AA1F-4883-BCEC-BC33A85A3AFA"];
  v347[233] = v110;
  id v109 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AC953E03-CAB8-4508-9145-EA5D629BCDAC"];
  v347[234] = v109;
  id v108 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"763A8A6B-1D96-4298-878A-A0FF3C627D79"];
  v347[235] = v108;
  id v107 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F917CEA4-4001-46AF-8291-CA74CF9178BE"];
  v347[236] = v107;
  id v106 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9A815CF5-4377-41E5-A00A-161FC5C51956"];
  v347[237] = v106;
  id v105 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"16625FBA-E847-4494-8191-433915DC9F15"];
  v347[238] = v105;
  id v104 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D3581A95-1F64-4EBD-8F71-0CD6B696D766"];
  v347[239] = v104;
  id v103 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A9FBE0A3-C444-47D3-81E1-C183E34E74B2"];
  v347[240] = v103;
  id v102 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A97647CC-89CB-4C3C-A144-18371D6DD41F"];
  v347[241] = v102;
  id v101 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CD5C8AEC-E1A5-4BF7-BB08-075C47320253"];
  v347[242] = v101;
  id v100 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"DAB81146-4105-445B-94AD-14033A199AC4"];
  v347[243] = v100;
  id v99 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F27862F8-5179-4DB0-9F89-179EA7CB4011"];
  v347[244] = v99;
  id v98 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8CF6A4A5-2346-47AF-B997-475C3E77AF88"];
  v347[245] = v98;
  id v97 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"2A05C9E8-D388-4DB8-8EE2-EB4D0F0D11B5"];
  v347[246] = v97;
  id v96 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3B512C1E-F8D5-4FE7-B109-1AD8EF7F924D"];
  v347[247] = v96;
  id v95 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5F570C64-A1B8-4ADE-AC62-99C67F4C40ED"];
  v347[248] = v95;
  id v94 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"210C1233-537B-4A1E-8EE0-253962851B43"];
  v347[249] = v94;
  id v93 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3A6A41CC-1427-4F81-88F4-82365AA10C82"];
  v347[250] = v93;
  id v92 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"10262875-CE7F-4736-BEE0-2233E4EAA468"];
  v347[251] = v92;
  id v1 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B727AD95-5778-41B6-A9DB-05E7289820ED"];
  v347[252] = v1;
  id v2 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D41B128F-B8BD-49DE-8982-B197D1CA18C7"];
  v347[253] = v2;
  id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9FFD76FA-21FC-46AE-8AAB-14FB3F692B28"];
  v347[254] = v3;
  id v4 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"742C60A6-F1CF-4368-8F2B-2AC6ED2C020E"];
  v347[255] = v4;
  id v5 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"622B6312-95FA-4F09-9148-69E286A9C31F"];
  v347[256] = v5;
  id v6 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB707200-CFE3-4419-8DF0-A17D17C8764D"];
  v347[257] = v6;
  id v7 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"80E387E5-4BC3-421D-873B-080D09375241"];
  v347[258] = v7;
  uint64_t v8 = +[NSArray arrayWithObjects:v347 count:259];
  id v9 = +[NSMutableArray arrayWithArray:v8];

  if ((_os_feature_enabled_impl() & 1) != 0 || MGGetBoolAnswer())
  {
    id v10 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"15BF559D-D50B-44FE-AC84-DFBA323EC985"];
    [v9 addObject:v10];
  }
  if (MGGetBoolAnswer())
  {
    id v11 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"31C94532-4B1A-4812-A21D-4E95A18F6EC0"];
    [v9 addObject:v11];
  }
  if (MGGetBoolAnswer())
  {
    id v12 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C26AD300-9198-11EC-8BC2-0800200C9A66"];
    [v9 addObject:v12];
  }
  if (_NRIsInternalInstall())
  {
    id v13 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A4F025DD-E3E3-4886-8189-676CE98A6926"];
    [v9 addObject:v13];
  }
  if (_os_feature_enabled_impl())
  {
    id v14 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9ECF1C6D-E28C-47F9-A640-CF1E2E658715"];
    [v9 addObject:v14];
  }
  if (_os_feature_enabled_impl())
  {
    id v15 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A8A0AE85-DA8D-4122-8350-95649852948E"];
    [v9 addObject:v15];
  }
  id v16 = +[AXSettings sharedInstance];
  unsigned int v17 = [v16 voiceOverShowBrailleWatchSettings];

  if (v17)
  {
    id v18 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8620D455-7F5A-4871-B19E-88F914C977A7"];
    [v9 addObject:v18];
  }
  if (_os_feature_enabled_impl())
  {
    id v19 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0EEFEB2D-0DDD-44CC-B240-BA8EDE9A1BC5"];
    [v9 addObject:v19];
  }
  if (_os_feature_enabled_impl())
  {
    id v20 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"93EA0155-DFC4-4F9D-B8F0-DECC5B9C0C1D"];
    [v9 addObject:v20];
  }
  long long v21 = nr_daemon_log();
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);

  if (v22)
  {
    uint64_t v23 = nr_daemon_log();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = MGGetBoolAnswer();
      CFStringRef v25 = @"NO";
      if (v24) {
        CFStringRef v25 = @"YES";
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v346 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "NRLocalPropertyMonitor Capabilities: This device has telephony: %@", buf, 0xCu);
    }
  }
  if ((MGGetBoolAnswer() & 1) != 0
    || _NRIsInternalInstall()
    && CFPreferencesGetAppBooleanValue(@"FakeTelephonyCapability", @"com.apple.NanoRegistry", 0))
  {
    id v26 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4AA3FF3B-3224-42E6-995E-481F49AE9260"];
    [v9 addObject:v26];
  }
  if (MGGetBoolAnswer())
  {
    id v27 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"F5C2DAD0-38FB-4B3B-86D3-B264F4F8CBDA"];
    [v9 addObject:v27];
  }
  if (MGGetBoolAnswer())
  {
    id v28 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB764CE8-D4DF-4DB6-991C-3A298E380BD1"];
    [v9 addObject:v28];
  }
  if (MGGetBoolAnswer())
  {
    id v29 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FEBBC201-B013-4680-94B0-7F4129F4CCB8"];
    [v9 addObject:v29];
  }
  if (MGGetBoolAnswer())
  {
    id v30 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"68E9D2AF-A820-45FC-8FB3-92A04428CBF8"];
    [v9 addObject:v30];
  }
  if (MGGetBoolAnswer())
  {
    id v31 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6AABB66B-8E1B-4CAB-8FC4-AC577BA0AFB0"];
    [v9 addObject:v31];
  }
  if (MGGetBoolAnswer())
  {
    id v32 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"15CA749B-A234-4F10-A437-53016C5F6A05"];
    [v9 addObject:v32];
  }
  if (MGGetBoolAnswer())
  {
    id v33 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0C599FD8-CC9F-48C9-BC37-C764A8B0527C"];
    [v9 addObject:v33];
  }
  uint64_t v34 = MGGetProductType();
  if (v34 == 1721691077 || v34 == 1429914406)
  {
    id v35 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"05DFED5F-6931-4683-B8B9-59D33C2104F3"];
    [v9 addObject:v35];
  }
  if (MGGetBoolAnswer())
  {
    id v36 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"5FD17775-116B-456A-A02A-A2C8EA78027F"];
    [v9 addObject:v36];
  }
  if (MGGetBoolAnswer())
  {
    id v37 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E17D2903-B868-4E6C-8E76-6D4939BEED44"];
    [v9 addObject:v37];
  }
  if (MGGetBoolAnswer())
  {
    id v38 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"BFF435BD-ACFF-4AD8-9CC4-4DEA6D51BB3A"];
    [v9 addObject:v38];
  }
  if (MGGetBoolAnswer())
  {
    id v39 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CB81F0AE-3F2F-4D57-8C90-F0D1A4ADD373"];
    [v9 addObject:v39];
  }
  if (MGGetBoolAnswer())
  {
    id v40 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"61415300-E200-4EDE-9853-BF83E3DE3A8A"];
    [v9 addObject:v40];
  }
  if (MGGetBoolAnswer())
  {
    id v41 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B81E9BEF-B19B-4468-8887-44BE181472C0"];
    [v9 addObject:v41];
  }
  if (MGGetBoolAnswer())
  {
    id v42 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"66DE554B-3959-40C7-88B1-81E8481E3B84"];
    [v9 addObject:v42];
  }
  if (MGGetBoolAnswer())
  {
    id v43 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D1DBCF21-D875-4EA8-B63E-8182578C0B0C"];
    [v9 addObject:v43];
  }
  if (MGGetBoolAnswer())
  {
    id v44 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"7EB344BD-17CE-41D0-A2C5-86AE2346CF3B"];
    [v9 addObject:v44];
  }
  if (MGGetBoolAnswer())
  {
    id v45 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FC61CF95-E168-468C-ABD5-9311FF689760"];
    [v9 addObject:v45];
  }
  id v46 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"119C9267-C24D-4FC3-8FE9-2D394943F2E6"];
  [v9 addObject:v46];

  id v47 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"79C6122C-6767-4098-9B1E-30DE4D6D0180"];
  [v9 addObject:v47];

  if (MGGetBoolAnswer())
  {
    id v48 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4CAAF5A2-6DD3-43EE-B2D8-C3D8C4997856"];
    [v9 addObject:v48];
  }
  if (_os_feature_enabled_impl())
  {
    id v49 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"B743795D-BA43-40D7-BA73-D1415B0895D4"];
    [v9 addObject:v49];
  }
  if (_os_feature_enabled_impl())
  {
    id v50 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AF84606C-1503-4EE8-AD61-590CC010537E"];
    [v9 addObject:v50];
  }
  if (_os_feature_enabled_impl())
  {
    id v51 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AD00FAC5-9C37-4D0C-8F16-9B00B4C821C6"];
    [v9 addObject:v51];
  }
  if (MGGetBoolAnswer())
  {
    id v52 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C5C226E6-01A7-4731-BDDA-D7F62A979D52"];
    [v9 addObject:v52];
  }
  if (_os_feature_enabled_impl())
  {
    id v53 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81A852A8-B570-4985-BE03-14B92863DFC4"];
    [v9 addObject:v53];
  }
  if (_os_feature_enabled_impl())
  {
    id v54 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"EF9E8C3A-6B59-47E0-BA2F-212213F1A30D"];
    [v9 addObject:v54];
  }
  if (_os_feature_enabled_impl())
  {
    id v55 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"EC26A7BC-7571-457B-9DEF-6CB5CF3AB850"];
    [v9 addObject:v55];
  }
  if (_os_feature_enabled_impl())
  {
    id v56 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FE1BCD7B-63A2-4EB3-9EF5-D6A9E506101E"];
    [v9 addObject:v56];
  }
  if (MGGetBoolAnswer())
  {
    id v57 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"E553D9C1-2587-4142-B286-C556E89F51F3"];
    [v9 addObject:v57];

    id v58 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AB8F4061-4873-40AF-9613-C8A97D0921F2"];
    [v9 addObject:v58];
  }
  if (_os_feature_enabled_impl())
  {
    id v59 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"46F59960-D16A-4E76-B7D1-A1B0BBC73923"];
    [v9 addObject:v59];
  }
  if (+[SOSUtilities isKappaDetectionSupportedOnCurrentDevice])
  {
    id v60 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"891D0E88-9AB8-420F-8FB5-92A1D4C58DAE"];
    [v9 addObject:v60];
  }
  if (_os_feature_enabled_impl())
  {
    id v61 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"A70EA46D-407A-4723-A8EF-CFF5DFB423B4"];
    [v9 addObject:v61];
  }
  if (MGGetBoolAnswer())
  {
    id v62 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4AF61239-2126-4FD6-8E7A-CDA2D7A0BFE9"];
    [v9 addObject:v62];
  }
  if (_os_feature_enabled_impl())
  {
    id v63 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"54FC3688-3F2A-435A-A95D-2F1866839415"];
    [v9 addObject:v63];
  }
  if (PKCloudKitPassSyncEnabled())
  {
    id v64 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"AAA2622E-C2DC-45BF-A337-F8A4BCED8CFD"];
    [v9 addObject:v64];
  }
  if (MGGetBoolAnswer())
  {
    id v65 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C8F5171A-C2E3-44C2-A9E3-107080BFE094"];
    [v9 addObject:v65];
  }
  if (MGGetBoolAnswer())
  {
    id v66 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81D292E4-16D8-4630-82ED-BDF62B05E334"];
    [v9 addObject:v66];
  }
  if (_os_feature_enabled_impl())
  {
    id v67 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"31001ED2-BD9E-4705-B297-53032117179E"];
    [v9 addObject:v67];
  }
  if (MGGetBoolAnswer() && _os_feature_enabled_impl())
  {
    id v68 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0E581E21-36BA-4770-9408-0467585E8495"];
    [v9 addObject:v68];
  }
  if (_os_feature_enabled_impl())
  {
    id v69 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"0FC0E189-59F0-4BB1-ACFC-570B13B35974"];
    [v9 addObject:v69];
  }
  if (_os_feature_enabled_impl())
  {
    id v70 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"CC1FA357-B007-460B-8F39-FB5472CBFAFB"];
    [v9 addObject:v70];
  }
  if ([*(id *)(a1 + 32) _supportsR2])
  {
    id v71 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"59C2CEC2-60CD-4346-B9E0-B3BC5C98CA75"];
    [v9 addObject:v71];
  }
  if (MGGetBoolAnswer())
  {
    id v72 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"3955CA84-B333-44E3-B8C3-A420085151EE"];
    [v9 addObject:v72];
  }
  if (_os_feature_enabled_impl())
  {
    id v73 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"43E00559-AA2F-4680-9118-AD6ABDFEDCD2"];
    [v9 addObject:v73];
  }
  if (_os_feature_enabled_impl())
  {
    id v74 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"205EB184-AC17-4886-BC97-09F15A9CA5F1"];
    [v9 addObject:v74];
  }
  if (_os_feature_enabled_impl())
  {
    id v75 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D31054F8-4D10-4575-A387-7F5A4498C9D0"];
    [v9 addObject:v75];
  }
  if (_os_feature_enabled_impl())
  {
    id v76 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"9B2FB519-D14B-49AB-BB91-67A6BF4E2B9A"];
    [v9 addObject:v76];
  }
  if (_os_feature_enabled_impl())
  {
    id v77 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C5092DE9-70B8-41DB-B2AB-80DD86ED41C7"];
    [v9 addObject:v77];
  }
  if (MGGetBoolAnswer())
  {
    id v78 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"01299775-E611-4F05-8BFF-ABBD9995F4B8"];
    [v9 addObject:v78];
  }
  if (_os_feature_enabled_impl() && _os_feature_enabled_impl())
  {
    id v79 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4AA0FC66-2573-4079-A68E-D366D9AD3489"];
    [v9 addObject:v79];
  }
  if (_os_feature_enabled_impl())
  {
    id v80 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"4E8C3265-3D65-4E94-8BCD-23DC8C4FC8CF"];
    [v9 addObject:v80];
  }
  if (MGGetBoolAnswer())
  {
    id v81 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"6B0579F9-ED84-4E5E-B753-83D35793F919"];
    [v9 addObject:v81];
  }
  if (_os_feature_enabled_impl())
  {
    id v82 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"132C0E45-0099-4FC6-9FC2-D2C1F22BCC0E"];
    [v9 addObject:v82];
  }
  if ((_os_feature_enabled_impl() & 1) != 0
    || (+[NRSystemProperties sharedInstance],
        __int16 v83 = objc_claimAutoreleasedReturnValue(),
        unsigned int v84 = [v83 isVirtualDevice],
        v83,
        v84))
  {
    id v85 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8240CA17-6F5D-4C8F-85C4-F4A705A0C20F"];
    [v9 addObject:v85];
  }
  if (_os_feature_enabled_impl())
  {
    id v86 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"75029622-9F11-4261-823A-2BA026AE2660"];
    [v9 addObject:v86];
  }
  if (_os_feature_enabled_impl())
  {
    id v87 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"90B8A394-4493-444D-AAA4-DDF6D6B68BC2"];
    [v9 addObject:v87];
  }
  if (_os_feature_enabled_impl())
  {
    id v88 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"06ADE5F4-5D76-45B0-91A4-289A116145AE"];
    [v9 addObject:v88];
  }
  if (MGGetBoolAnswer())
  {
    id v89 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"D6770323-EBBB-4867-A1A7-99F207C64094"];
    [v9 addObject:v89];
  }
  id v90 = +[NSSet setWithArray:v9];

  return v90;
}

id sub_1000AD9B0(id a1)
{
  uint64_t v1 = _NRIsInternalInstall();

  return +[NSNumber numberWithBool:v1];
}

id sub_1000AD9F0(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltString:@"RegulatoryModelNumber"];
}

id sub_1000ADA04(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"HasSEP"];
}

id sub_1000ADA18(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"0dnM19zBqLw5ZPhIo4GEkg"];
}

id sub_1000ADA2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getGestaltString:@"j9Th5smJpdztHwc+i39zIg"];
}

id sub_1000ADA3C(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"CPUType"];
}

id sub_1000ADA50(id a1)
{
  return +[NRLocalPropertyMonitor _getGestaltNumber:@"CPUSubType"];
}

id sub_1000ADA64(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getGestaltNumber:@"fdh+s6j3VijuyrK7xLjd7g"];
}

id sub_1000ADA74(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getGestaltNumber:@"ChipID"];
}

id sub_1000ADA84(id a1)
{
  uint64_t v1 = +[NRPairingDaemon sharedInstance];
  id v2 = [v1 mirrorOfActiveDevice];
  id v3 = [v2 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  id v4 = [v3 value];

  return v4;
}

id sub_1000ADB0C(id a1)
{
  uint64_t v1 = +[MDMConfiguration sharedConfiguration];
  [v1 refreshDetailsFromDisk];

  id v2 = +[MDMConfiguration getManagementStateForMAID];

  return +[NSNumber numberWithUnsignedInteger:v2];
}

void sub_1000ADC6C()
{
}

id sub_1000AE200(uint64_t a1)
{
  return [*(id *)(a1 + 32) localMonitor:*(void *)(a1 + 40) propertiesDidChange:*(void *)(a1 + 48) thisIsAllOfThem:*(unsigned __int8 *)(a1 + 56)];
}

void sub_1000AE688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AE6B8(uint64_t a1)
{
  uint64_t v2 = (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1000AF168(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1000AF194(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v4 + 24))
  {
    *(unsigned char *)(v4 + 24) = 1;
    id v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v23 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionRequestMigration: We are done with error %@", buf, 0xCu);
      }
    }
    if (v3)
    {
      uint64_t v8 = [v3 domain];
      unsigned int v9 = [v8 isEqual:@"com.apple.nanoregistry.NRRemoteObjectTinker"];

      if (v9)
      {
        NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
        CFStringRef v21 = @"message send failure";
        id v10 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
        id v11 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionRequestMigration" code:1 userInfo:v10];
      }
      else
      {
        id v11 = v3;
      }
    }
    else
    {
      id v11 = 0;
    }
    id v12 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AF3C0;
    block[3] = &unk_100165868;
    id v17 = v11;
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v18 = v13;
    uint64_t v19 = v14;
    id v15 = v11;
    dispatch_async(v12, block);
  }
}

void sub_1000AF3C0(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  if (*(void *)(a1 + 32))
  {
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000FADA4(v2, v5, v6, v7, v8, v9, v10, v11);
      }
    }
    id v12 = [*(id *)(a1 + 40) errors];
    [v12 addObject:*(void *)(a1 + 32)];

    [*(id *)(a1 + 40) persist];
  }
  id v13 = [*(id *)(a1 + 48) delegate];
  [v13 transactionDidComplete:*(void *)(a1 + 48)];
}

uint64_t sub_1000AF480(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AF494(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionRequestMigration: sentBlock called", v7, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AF548(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  if (!*(unsigned char *)(v4 + 24))
  {
    *(unsigned char *)(v4 + 24) = 1;
    BOOL v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v6)
    {
      uint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v23 = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionRequestMigration: We are done with error %@", buf, 0xCu);
      }
    }
    if (v3)
    {
      uint64_t v8 = [v3 domain];
      unsigned int v9 = [v8 isEqual:@"com.apple.nanoregistry.NRRemoteObjectCloud"];

      if (v9)
      {
        NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
        CFStringRef v21 = @"message send failure";
        uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
        id v11 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionRequestMigration" code:1 userInfo:v10];
      }
      else
      {
        id v11 = v3;
      }
    }
    else
    {
      id v11 = 0;
    }
    id v12 = [*(id *)(a1 + 32) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000AF774;
    block[3] = &unk_100165868;
    id v17 = v11;
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v18 = v13;
    uint64_t v19 = v14;
    id v15 = v11;
    dispatch_async(v12, block);
  }
}

void sub_1000AF774(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  if (*(void *)(a1 + 32))
  {
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v4)
    {
      BOOL v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_1000FADA4(v2, v5, v6, v7, v8, v9, v10, v11);
      }
    }
    id v12 = [*(id *)(a1 + 40) errors];
    [v12 addObject:*(void *)(a1 + 32)];

    [*(id *)(a1 + 40) persist];
  }
  id v13 = [*(id *)(a1 + 48) delegate];
  [v13 transactionDidComplete:*(void *)(a1 + 48)];
}

uint64_t sub_1000AF834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AF848(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionRequestMigration: sentBlock called", v7, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000AF8FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000AF9DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

id sub_1000AFD6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000AFE24(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000B0354(uint64_t a1)
{
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(a1 + 40) discoverer:deviceDidBecomeProximate:*(void *)(*(void *)(*(void *)(a1 + 40) + 32) + 32) deviceDidBecomeProximate:*(void *)(*((void *)&v7 + 1) + 8 * (void)v6) deviceDidBecomeProximate:v7];
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_1000B044C(uint64_t a1)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v17;
    *(void *)&long long v4 = 138412546;
    long long v15 = v4;
    do
    {
      long long v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v2);
        }
        long long v8 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v7);
        long long v9 = sub_1000A3CF0();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        if (v10)
        {
          uint64_t v11 = sub_1000A3CF0();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            id v12 = [v8 name];
            id v13 = [v8 uuid];
            uint64_t v14 = [v13 UUIDString];
            *(_DWORD *)long long buf = v15;
            CFStringRef v21 = v12;
            __int16 v22 = 2112;
            id v23 = v14;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "EPBulkCharacteristicReaderWriter: Forcing read for device %@ %@", buf, 0x16u);
          }
        }
        [*(id *)(a1 + 40) discoverer:deviceDidBecomeProximate:v8, v15, v16];
        long long v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }
    while (v5);
  }
}

void sub_1000B0C78(uint64_t a1)
{
  [*(id *)(a1 + 32) setWriter:0];
  id v2 = [*(id *)(a1 + 32) reader];
  if (v2)
  {
  }
  else
  {
    id v3 = [*(id *)(a1 + 32) writer];

    if (!v3)
    {
      uint64_t v4 = *(void *)(a1 + 48);
      id v5 = *(void **)(*(void *)(a1 + 40) + 16);
      [v5 removeObjectForKey:v4];
    }
  }
}

uint64_t sub_1000B1BC0(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init((Class)NRPBTermsEvent);
      objc_storeStrong((id *)(a1 + 8), v12);
      if (!PBReaderPlaceMark() || (NRPBTermsEventReadFrom() & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000B1DC0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_1000B1ECC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

void sub_1000B1F48(id a1)
{
  uint64_t v1 = objc_alloc_init(NRSystemProperties);
  uint64_t v2 = qword_1001A1368;
  qword_1001A1368 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000B2264(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  char v4 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  unsigned int v5 = [v4 value];

  unint64_t v6 = [v3 objectForKeyedSubscript:NRDevicePropertyIsAltAccount];
  unint64_t v7 = [v6 value];

  if (v5 && ([v7 BOOLValue] & 1) == 0)
  {
    char v8 = dispatch_get_global_queue(25, 0);
    int v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    id v12 = sub_1000B23AC;
    id v13 = &unk_100165530;
    id v14 = v5;
    id v15 = v8;
    long long v9 = v8;
    dispatch_async(v9, &v10);
  }
  [*(id *)(a1 + 40) markCompleted:v10, v11, v12, v13];
}

void sub_1000B23AC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    char v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = [*(id *)(a1 + 32) UUIDString];
      *(_DWORD *)long long buf = 138412290;
      char v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingSetupCompletedForPairedDevice %@", buf, 0xCu);
    }
  }
  id v6 = *(id *)(a1 + 32);
  IDSLocalPairingSetupCompletedForPairedDevice();
}

void sub_1000B24F0(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    char v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = [*(id *)(a1 + 32) UUIDString];
      int v6 = 138412290;
      unint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingSetupCompletedForPairedDevice %@ completed", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1000B2BE0(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = *(id *)(*(void *)(a1 + 32) + 88);
    id v4 = *(id *)(*(void *)(a1 + 32) + 96);
    unsigned int v5 = v4;
    if (v4) {
      id v6 = v4;
    }
    else {
      id v6 = (id)objc_opt_new();
    }
    id v12 = v6;
    id v13 = [objc_alloc((Class)IDSLocalPairingAddPairedDeviceInfo) initWithCBUUID:v3 pairingProtocolVersion:0 BTOutOfBandKey:v6];
    id v14 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B2E88;
    block[3] = &unk_1001655F8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_block_t v15 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, block);
    long long v16 = [*(id *)(a1 + 32) queue];
    long long v17 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v16);

    dispatch_time_t v18 = dispatch_time(0, 3000000000);
    dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler(v17, v15);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1000B2F9C;
    v23[3] = &unk_1001681F0;
    id v24 = v3;
    id v25 = v5;
    id v26 = v17;
    id v27 = v13;
    uint64_t v28 = *(void *)(a1 + 32);
    id v19 = v13;
    NSErrorUserInfoKey v20 = v17;
    id v21 = v5;
    id v22 = v3;
    dispatch_async(v14, v23);
  }
  else
  {
    uint64_t v7 = nrGetPairingError();
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = *(void **)(v8 + 64);
    *(void *)(v8 + 64) = v7;

    int v10 = *(void **)(a1 + 32);
    uint64_t v11 = v10[8];
    [v10 setAvailability:2 withError:v11];
  }
}

void sub_1000B2E88(uint64_t a1)
{
  uint64_t v2 = sub_1000A3CF0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = sub_1000A3CF0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "pipe assumed available after a 3 second wait", buf, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 72));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B2F8C;
  v6[3] = &unk_1001655F8;
  void v6[4] = *(void *)(a1 + 32);
  [WeakRetained initializeAllIDSChannelsBlock:v6];
}

id sub_1000B2F8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAvailability:1 withError:0];
}

void sub_1000B2F9C(uint64_t a1)
{
  uint64_t v2 = sub_1000A3CF0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = sub_1000A3CF0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = "PRESENT";
      uint64_t v6 = *(void *)(a1 + 32);
      if (!*(void *)(a1 + 40)) {
        unsigned int v5 = "ABSENT";
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDS IDSLocalPairingAddPairedDeviceWithInfo %@ key=%s", buf, 0x16u);
    }
  }
  dispatch_resume(*(dispatch_object_t *)(a1 + 48));
  uint64_t v8 = *(void *)(a1 + 64);
  id v9 = *(id *)(a1 + 48);
  uint64_t v7 = [*(id *)(a1 + 64) queue:_NSConcreteStackBlock withPriority:3221225472 usingBlock:sub_1000B311C notifyWhenScheduled:unk_1001678E8];
  IDSLocalPairingAddPairedDeviceWithInfo();
}

void sub_1000B311C(uint64_t a1, void *a2)
{
  id v4 = a2;
  unsigned int v5 = sub_1000A3CF0();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    uint64_t v7 = sub_1000A3CF0();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 88);
      int v10 = 138412546;
      uint64_t v11 = v8;
      __int16 v12 = 2112;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDS IDSLocalPairingAddPairedDeviceWithInfo %@ completed with error %@", (uint8_t *)&v10, 0x16u);
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v4)
  {
    objc_storeStrong((id *)(v9 + 64), a2);
    [*(id *)(a1 + 32) setAvailability:2 withError:v4];
    dispatch_source_cancel(*(dispatch_source_t *)(a1 + 40));
  }
  else
  {
    *(unsigned char *)(v9 + 56) = 1;
  }
}

id sub_1000B34D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000B4510(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1000B4568(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate];
  [v1 pairingCompleted];
}

void sub_1000B45AC(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      unsigned int v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        unsigned int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1000B46A0(id a1, NSData *a2, id a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = (void (**)(id, id))a3;
  long long v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    long long v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      long long v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received request to push from bluetooth characteristic with data: %@", (uint8_t *)&v15, 0xCu);
    }
  }
  long long v9 = [@"push" dataUsingEncoding:4];
  BOOL v10 = [(NSData *)v4 isEqualToData:v9];

  uint64_t v11 = nr_daemon_log();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    if (v12)
    {
      id v13 = nr_daemon_log();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending push notification to Setup", (uint8_t *)&v15, 2u);
      }
    }
    notify_post((const char *)[NRWatchSetupPushDarwinNotification UTF8String]);
  }
  else if (v12)
  {
    id v14 = nr_daemon_log();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unknown push contents, NOT sending push notification to Setup", (uint8_t *)&v15, 2u);
    }
  }
  v5[2](v5, (id)v10);
}

void sub_1000B4894(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v5 = [WeakRetained _getPairingExtendedMetadata];
  long long v6 = nr_daemon_log();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    long long v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      BOOL v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received request for pairing extended metadata %@", (uint8_t *)&v9, 0xCu);
    }
  }
  v3[2](v3, v5);
}

void sub_1000B49A8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 107) = 1;
  [*(id *)(a1 + 32) setNrDeviceUUID:a2];
  id v3 = +[EPFactory queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B4AC8;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v3, block);

  if (*(void *)(*(void *)(a1 + 32) + 160))
  {
    uint64_t v4 = +[EPFactory queue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000B4AD0;
    v5[3] = &unk_1001655F8;
    void v5[4] = *(void *)(a1 + 32);
    dispatch_async(v4, v5);
  }
}

id sub_1000B4AC8(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000B4AD0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 160) displayableDevices];
  id v3 = [v2 copy];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      BOOL v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(a1 + 32) discoverer:*(void *)(*(void *)(a1 + 32) + 160) deviceDidBecomeDisplayable:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        BOOL v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_1000B4BE0(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1000B4E9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  uint64_t v4 = sub_1000A3CF0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    long long v6 = sub_1000A3CF0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000FAF5C(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  if ([*(id *)(*(void *)(a1 + 32) + 208) count]
    && ([*(id *)(a1 + 32) isBluetoothPairComplete] & 1) == 0)
  {
    id v14 = sub_1000A3CF0();
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);

    if (v15)
    {
      long long v16 = sub_1000A3CF0();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "In the middle of pairing. Will cancel after next failure.", v17, 2u);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) setPairingError];
    [*(id *)(a1 + 32) setPairingMode:5];
  }
}

id sub_1000B5A78(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_1000B6304(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasStartedPairing] & 1) == 0)
  {
    id v2 = [*(id *)(a1 + 32) pairingStrategy];
    uint64_t v4 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    if (v2 == (id)1)
    {
      CFStringRef v7 = @"bluetoothTimeout";
      uint64_t v8 = &off_100177520;
      BOOL v5 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];
      id v6 = [v3 newPairerWithDelegate:v4 withParameters:v5];

      if (!v6) {
        goto LABEL_7;
      }
    }
    else
    {
      id v6 = [*(id *)(a1 + 40) newPairerWithDelegate:*(void *)(a1 + 32)];
      if (!v6)
      {
LABEL_7:

        return;
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 208) addObject:v6];
    [*(id *)(*(void *)(a1 + 32) + 216) addObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) update];
    goto LABEL_7;
  }
}

id sub_1000B6414(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) pairingStyle];
  if (result != (id)2)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 sendBeginningToPairNotification];
  }
  return result;
}

void sub_1000B6464(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 40) pairingStrategy]);
    [*(id *)(*(void *)(a1 + 40) + 80) setObject:v6 forKeyedSubscript:*(void *)(a1 + 48)];
LABEL_6:

    goto LABEL_7;
  }
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1000FB018(a1, (uint64_t)v3, v6);
    }
    goto LABEL_6;
  }
LABEL_7:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1000B70C8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v3 = [*(id *)(a1 + 32) nrDeviceUUID];
  [v2 sendXPCBTPairRequestMessage:v3 withCompletion:0];

  uint64_t v4 = *(void **)(a1 + 32);
  if (!v4[4])
  {
    BOOL v5 = +[EPFactory queue];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000B7248;
    v13[3] = &unk_1001655F8;
    void v13[4] = *(void *)(a1 + 32);
    uint64_t v6 = +[TimerFactory timerWithIdentifier:@"com.apple.NanoRegistry.ExtensiblePair" delay:1 gracePeriod:v5 waking:v13 handlerQueue:80.0 handlerBlock:0.0];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = v6;

    uint64_t v4 = *(void **)(a1 + 32);
  }
  uint64_t v9 = [v4 delegate];
  uint64_t v10 = [*(id *)(a1 + 40) device];
  uint64_t v11 = [*(id *)(a1 + 32) nrDeviceUUID];
  [v9 updateNRMutableDeviceFromEPDevice:v10 withNRUUID:v11 withBlock:0];

  uint64_t v12 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v12 + 17)) {
    *(unsigned char *)(v12 + 17) = 1;
  }
}

id sub_1000B7248(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_1000B7A9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = sub_1000A3CF0();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      uint64_t v6 = sub_1000A3CF0();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v11 = v7;
        __int16 v12 = 2112;
        id v13 = v3;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ExtensiblePair: Ghost device UUID %@ matches paired NR device %@", buf, 0x16u);
      }
    }
    uint64_t v8 = [*(id *)(a1 + 40) delegate];
    LOBYTE(v9) = 0;
    [v8 unpairDeviceWithPairingID:v3 obliterationString:0 shouldBrick:&__kCFBooleanFalse storeUnpair:&__kCFBooleanFalse migrationUnpair:&__kCFBooleanFalse shouldPreserveESim:&__kCFBooleanFalse pairingReport:0 remoteUnpairRequestUUID:0 shouldConnectionWithDevice:v9];
  }
}

id sub_1000B7BC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_1000B7BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) delegate];
  [v4 initializeAllIDSChannelsBlock:0];

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 192);
  *(void *)(v5 + 192) = 0;

  if (a2)
  {
    uint64_t v7 = nrGetPairingError();
    uint64_t v8 = [*(id *)(a1 + 32) delegate];
    uint64_t v9 = [v8 pairingReport];
    [v9 setOriginalError:v7];

    uint64_t v10 = *(void **)(a1 + 32);
    [v10 setPairingMode:5];
  }
  else
  {
    uint64_t v11 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B7D08;
    block[3] = &unk_1001655F8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v11, block);
  }
}

void sub_1000B7D08(uint64_t a1)
{
  id v2 = sub_1000A3CF0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = sub_1000A3CF0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 24);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDS IDSLocalPairingConnectPairedDevice %@", buf, 0xCu);
    }
  }
  uint64_t v6 = +[EPFactory queue];
  IDSLocalPairingConnectPairedDevice();
}

void sub_1000B7E54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1000A3CF0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = sub_1000A3CF0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 24);
      int v11 = 138412546;
      uint64_t v12 = v7;
      __int16 v13 = 2112;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS IDSLocalPairingConnectPairedDevice %@ completed with error %@", (uint8_t *)&v11, 0x16u);
    }
  }
  if (v3)
  {
    uint64_t v8 = nrGetPairingError();
    uint64_t v9 = [*(id *)(a1 + 32) delegate];
    uint64_t v10 = [v9 pairingReport];
    [v10 setOriginalError:v8];

    [*(id *)(a1 + 32) setPairingMode:5];
  }
}

void sub_1000B7F98(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = dispatch_get_global_queue(25, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B80F0;
    block[3] = &unk_100167320;
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    id v4 = *(id *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void **)(a1 + 64);
    id v14 = v4;
    uint64_t v15 = v5;
    id v16 = v6;
    dispatch_async(v3, block);
  }
  else
  {
    uint64_t v7 = nrGetPairingError();
    uint64_t v8 = [*(id *)(a1 + 56) delegate];
    uint64_t v9 = [v8 pairingReport];
    [v9 setOriginalError:v7];

    uint64_t v10 = *(void **)(a1 + 56);
    [v10 setPairingMode:5];
  }
}

void sub_1000B80F0(uint64_t a1)
{
  id v2 = sub_1000A3CF0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = sub_1000A3CF0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 32) UUIDString];
      if (*(void *)(a1 + 40)) {
        uint64_t v6 = "PRESENT";
      }
      else {
        uint64_t v6 = "ABSENT";
      }
      uint64_t v7 = [*(id *)(a1 + 48) bluetoothMACAddress];
      *(_DWORD *)long long buf = 138412802;
      if (v7) {
        uint64_t v8 = "PRESENT";
      }
      else {
        uint64_t v8 = "ABSENT";
      }
      id v13 = v5;
      __int16 v14 = 2080;
      uint64_t v15 = v6;
      __int16 v16 = 2080;
      long long v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDS IDSLocalPairingAddPairedDeviceWithInfo %@ key=%s btAddr=%s", buf, 0x20u);
    }
  }
  id v10 = *(id *)(a1 + 32);
  id v11 = *(id *)(a1 + 64);
  uint64_t v9 = +[EPFactory queue];
  IDSLocalPairingAddPairedDeviceWithInfo();
}

void sub_1000B82C0(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1000A3CF0();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = sub_1000A3CF0();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = [a1[4] UUIDString];
      *(_DWORD *)long long buf = 138412546;
      long long v17 = v7;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "IDS IDSLocalPairingAddPairedDeviceWithInfo %@ completed with error %@", buf, 0x16u);
    }
  }
  if (v3)
  {
    uint64_t v8 = nrGetPairingError();
    uint64_t v9 = [a1[5] delegate];
    id v10 = [v9 pairingReport];
    [v10 setOriginalError:v8];

    [a1[5] setPairingMode:5];
  }
  else
  {
    id v11 = [a1[5] delegate];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000B8494;
    v13[3] = &unk_100165A70;
    id v12 = a1[6];
    id v14 = 0;
    id v15 = v12;
    [v11 initializeAllIDSChannelsBlock:v13];
  }
}

uint64_t sub_1000B8494(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000B8B38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000B8C2C(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NRXPCRegistryDelegate];
  id v2 = (void *)qword_1001A1378;
  qword_1001A1378 = v1;

  id v3 = (void *)qword_1001A1378;
  v6[0] = objc_opt_class();
  v6[1] = objc_opt_class();
  id v4 = +[NSArray arrayWithObjects:v6 count:2];
  BOOL v5 = +[NSSet setWithArray:v4];
  [v3 setClasses:v5 forSelector:"xpcRetrieveSecureProperties:block:" argumentIndex:0 ofReply:0];
}

void sub_1000B8D7C(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NRXPCRegistryDelegate];
  id v2 = (void *)qword_1001A1388;
  qword_1001A1388 = v1;

  id v3 = (void *)qword_1001A1388;
  id v4 = +[NRSecureDevicePropertyStore enclosedClassTypes];
  [v3 setClasses:v4 forSelector:"xpcRetrieveSecureProperties:block:" argumentIndex:0 ofReply:1];

  BOOL v5 = (void *)qword_1001A1388;
  v10[0] = objc_opt_class();
  v10[1] = objc_opt_class();
  uint64_t v6 = +[NSArray arrayWithObjects:v10 count:2];
  uint64_t v7 = +[NSSet setWithArray:v6];
  [v5 setClasses:v7 forSelector:"xpcClientInfo:" argumentIndex:0 ofReply:1];

  uint64_t v8 = (void *)qword_1001A1388;
  uint64_t v9 = +[NRSecureDevicePropertyStore enclosedClassTypes];
  [v8 setClasses:v9 forSelector:"xpcGetDiffSinceTokenValue:getSecureProperties:withBlock:" argumentIndex:1 ofReply:1];
}

void sub_1000B9204(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [*(id *)(a1 + 32) connection];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1000B9300;
  v13[3] = &unk_1001690C8;
  char v18 = *(unsigned char *)(a1 + 48);
  id v10 = *(id *)(a1 + 40);
  id v14 = v7;
  id v15 = v8;
  id v16 = v10;
  uint64_t v17 = a4;
  id v11 = v8;
  id v12 = v7;
  [v9 runCompletionBlock:v13];
}

uint64_t sub_1000B9300(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, uint64_t))(v3 + 16))(v3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 56), 1);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(v3 + 16))(v3, 0, 0, *(void *)(a1 + 56), 0);
  }
}

void sub_1000B941C(uint64_t a1, void *a2, void *a3, char a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = [*(id *)(a1 + 32) connection];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1000B9518;
  v15[3] = &unk_1001690C8;
  id v12 = *(id *)(a1 + 40);
  id v16 = v9;
  id v17 = v10;
  char v20 = a4;
  id v18 = v12;
  uint64_t v19 = a5;
  id v13 = v10;
  id v14 = v9;
  [v11 runCompletionBlock:v15];
}

uint64_t sub_1000B9518(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 56));
}

void sub_1000B9620(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connection];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B96E4;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 runCompletionBlock:v7];
}

uint64_t sub_1000B96E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000B97AC(uint64_t a1, int a2)
{
  id v4 = [*(id *)(a1 + 32) connection];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B985C;
  v5[3] = &unk_100169168;
  id v6 = *(id *)(a1 + 40);
  int v7 = a2;
  [v4 runCompletionBlock:v5];
}

uint64_t sub_1000B985C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1000B993C(uint64_t a1, char a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 32) connection];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B99F0;
  v8[3] = &unk_1001691B8;
  id v7 = *(id *)(a1 + 40);
  char v11 = a2;
  id v9 = v7;
  uint64_t v10 = a3;
  [v6 runCompletionBlock:v8];
}

uint64_t sub_1000B99F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 40));
}

void sub_1000B9AD0(uint64_t a1, char a2, char a3)
{
  id v6 = [*(id *)(a1 + 32) connection];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B9B88;
  v7[3] = &unk_100169208;
  id v8 = *(id *)(a1 + 40);
  char v9 = a2;
  char v10 = a3;
  [v6 runCompletionBlock:v7];
}

uint64_t sub_1000B9B88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_1000B9C60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) connection];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000B9D48;
  v11[3] = &unk_1001669A0;
  id v8 = *(id *)(a1 + 40);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  [v7 runCompletionBlock:v11];
}

uint64_t sub_1000B9D48(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000B9E38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connection];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B9EFC;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 runCompletionBlock:v7];
}

uint64_t sub_1000B9EFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000BA040(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connection];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000BA104;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 runCompletionBlock:v7];
}

uint64_t sub_1000BA104(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000BA118(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BA294(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) connection];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000BA358;
  v7[3] = &unk_100165A70;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  [v4 runCompletionBlock:v7];
}

uint64_t sub_1000BA358(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000BA36C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  CFStringRef v5 = @"entitlement required";
  int v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  id v3 = +[NSError errorWithDomain:@"com.apple.nanoregistry.registry" code:0 userInfo:v2];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

void sub_1000BA5A0(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) connection];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000BA640;
  v3[3] = &unk_100165D10;
  id v4 = *(id *)(a1 + 40);
  [v2 runCompletionBlock:v3];
}

uint64_t sub_1000BA640(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000BA650(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000BAA5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v3 = *(uint64_t (***)(void))(a1 + 32);
    if (v3)
    {
      id v6 = v4;
      id v3 = (uint64_t (**)(void))v3[2]();
      id v4 = v6;
    }
  }

  return _objc_release_x1(v3, v4);
}

void sub_1000BAAC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      CFStringRef v5 = [NRPBMigrationSetKeyResponse alloc];
      id v6 = [v3 protobuf];
      id v7 = [v6 data];
      id v8 = [(NRPBMigrationSetKeyResponse *)v5 initWithData:v7];

      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = sub_1000C99C8((uint64_t)v8);
      (*(void (**)(uint64_t, void, uint64_t))(v9 + 16))(v9, 0, v10);
    }
  }
  else if (v4)
  {
    NSErrorUserInfoKey v13 = NSLocalizedDescriptionKey;
    CFStringRef v14 = @"IDS response failure";
    char v11 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
    id v12 = +[NSError errorWithDomain:@"com.apple.nanoregistry.NRRemoteObjectClassA" code:1 userInfo:v11];
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v12, 0);
  }
}

uint64_t sub_1000BAD94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"rollbackDiff"];
  if (v4) {
    id v5 = 0;
  }
  else {
    id v5 = [v3 copy];
  }
  id v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"transactionDiff"];
  if (!v4)
  {
    uint64_t v4 = +[NRMutableDeviceCollection diffFrom:v3 to:v5];
    id v7 = [[EPSagaOperandDiff alloc] initWithDiff:v4];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = [*(id *)(a1 + 32) operands];
      [v9 setObject:v8 forKeyedSubscript:@"calculatedRollbackDiff"];
    }
  }
  uint64_t v10 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  char v11 = [*(id *)(a1 + 32) operands];
  [v11 setObject:v10 forKeyedSubscript:@"transactionCompleted"];

  id v12 = [v3 applyDiff:v6];
  NSErrorUserInfoKey v13 = [*(id *)(a1 + 32) queue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000BAF80;
  v17[3] = &unk_100165530;
  id v14 = *(id *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  id v18 = v14;
  uint64_t v19 = v15;
  dispatch_async(v13, v17);

  return 0;
}

void sub_1000BAF80(uint64_t a1)
{
  [*(id *)(a1 + 32) persist];
  id v2 = [*(id *)(a1 + 40) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 40)];
}

void sub_1000BAFDC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_1000BB1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [*(id *)(a1 + 32) operands];
  [v4 removeObjectForKey:@"calculatedRollbackDiff"];

  id v5 = [*(id *)(a1 + 32) operands];
  [v5 removeObjectForKey:@"transactionCompleted"];

  id v6 = [v3 applyDiff:*(void *)(a1 + 40)];
  id v7 = [*(id *)(a1 + 32) queue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000BB300;
  v11[3] = &unk_100165530;
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  id v12 = v8;
  uint64_t v13 = v9;
  dispatch_async(v7, v11);

  return 0;
}

void sub_1000BB300(uint64_t a1)
{
  [*(id *)(a1 + 32) persist];
  id v2 = [*(id *)(a1 + 40) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 40)];
}

void sub_1000BB35C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000BB72C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000BB74C(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v7 = @"failed";
      if (a2) {
        CFStringRef v7 = @"Success";
      }
      *(_DWORD *)long long buf = 138412546;
      id v14 = WeakRetained;
      __int16 v15 = 2112;
      CFStringRef v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@: Sent ping (%@)", buf, 0x16u);
    }
  }
  if (WeakRetained && ([WeakRetained transactionCompleted] & 1) == 0)
  {
    id v8 = [WeakRetained routingSlipEntry];
    uint64_t v9 = [v8 queue];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1000BB8E4;
    v10[3] = &unk_1001660F8;
    id v11 = WeakRetained;
    char v12 = a2;
    dispatch_async(v9, v10);
  }
}

id sub_1000BB8E4(uint64_t a1)
{
  [*(id *)(a1 + 32) _invalidateTimer];
  if (*(unsigned char *)(a1 + 40))
  {
    BOOL v2 = 1;
  }
  else
  {
    [*(id *)(a1 + 32) _recordIDSError];
    BOOL v2 = *(unsigned char *)(a1 + 40) != 0;
  }
  id v3 = *(void **)(a1 + 32);

  return [v3 _transactionDidCompleteWithSuccess:v2];
}

id sub_1000BB944(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  if (v1[17]) {
    return [v1 _addTimeout];
  }
  else {
    return [v1 _transactionDidCompleteWithSuccess:1];
  }
}

void sub_1000BBC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000BBC18(uint64_t a1)
{
  BOOL v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionSendPing: Timeout triggered", v10, 2u);
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 8));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 8);
  *(void *)(v5 + _Block_object_dispose(&STACK[0x690], 8) = 0;

  CFStringRef v7 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained(v7);
  [WeakRetained _recoredTimeoutError];

  id v9 = objc_loadWeakRetained(v7);
  [v9 _transactionDidCompleteWithSuccess:0];
}

uint64_t sub_1000BCE20(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = qword_1001A1398;
  qword_1001A1398 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000BD1EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = nr_pairing_reporter_log();
  id v6 = v5;
  if (v4)
  {
    BOOL v7 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      id v8 = nr_pairing_reporter_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000FB2E8((uint64_t)v4, v8, v9, v10, v11, v12, v13, v14);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v15 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

    if (v15)
    {
      id v8 = nr_pairing_reporter_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(_DWORD *)(a1 + 32);
        v17[0] = 67109120;
        v17[1] = v16;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Capped off RTC pairing metric with pairing failure reason %u and submitted the metric", (uint8_t *)v17, 8u);
      }
      goto LABEL_8;
    }
  }
}

void sub_1000BD308(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  BOOL v3 = +[NSMutableDictionary dictionaryWithContentsOfURL:*(void *)(a1 + 32)];
  id v4 = v3;
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = (id)objc_opt_new();
  }
  id v6 = v5;

  if (WeakRetained)
  {
    BOOL v7 = [v6 objectForKey:kNRSubreason];

    if (!v7)
    {
      id v8 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
      [WeakRetained setReportSubreason:*(unsigned int *)(a1 + 56)];
      uint64_t v9 = BRPairingTimeEventToString();
      [v6 setObject:v8 forKey:v9];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    uint64_t v10 = [WeakRetained gizmoBuild];

    if (v10)
    {
      uint64_t v11 = [WeakRetained gizmoBuild];
      uint64_t v12 = +[NSString stringWithFormat:@"%@", v11];

      uint64_t v13 = BRPairingTimeEventToString();
      [v6 setObject:v12 forKey:v13];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    uint64_t v14 = [WeakRetained gizmoHW];

    if (v14)
    {
      BOOL v15 = [WeakRetained gizmoHW];
      int v16 = +[NSString stringWithFormat:@"%@", v15];

      id v17 = BRPairingTimeEventToString();
      [v6 setObject:v16 forKey:v17];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      id v29 = 0;
      [v6 writeToURL:v18 error:&v29];
      id v19 = v29;
      if (v19)
      {
        char v20 = nr_pairing_reporter_log();
        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);

        if (v21)
        {
          id v22 = nr_pairing_reporter_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_1000FB354((uint64_t)v19, v22, v23, v24, v25, v26, v27, v28);
          }
        }
      }
    }
  }
}

void sub_1000BD968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
}

uint64_t sub_1000BD99C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BD9AC(uint64_t a1)
{
}

void sub_1000BD9B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  BOOL v3 = +[NSMutableDictionary dictionaryWithContentsOfURL:*(void *)(a1 + 32)];
  id v4 = v3;
  if (!v3) {
    id v4 = objc_opt_new();
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v4);
  if (!v3) {

  }
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v5
    && ([v5 objectForKey:kReportSubmitted],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        v6))
  {
    BOOL v7 = nr_pairing_reporter_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      uint64_t v9 = nr_pairing_reporter_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Report already submitted, we shouldn't be submitting this metric again, so we won't, but we should tell Bridge to archive", buf, 2u);
      }
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BDEC4;
    block[3] = &unk_100165D10;
    id v24 = *(id *)(a1 + 48);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    id v10 = v24;
  }
  else
  {
    if (WeakRetained)
    {
      if ([WeakRetained reportSubreason])
      {
        uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v12 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [WeakRetained reportSubreason]);
        uint64_t v13 = BRPairingTimeEventToString();
        [v11 setObject:v12 forKey:v13];

        [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) writeToURL:*(void *)(a1 + 32) atomically:1];
      }
      uint64_t v14 = [WeakRetained lastControllerPushed:*(void *)(a1 + 40)];
      if (v14)
      {
        BOOL v15 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        int v16 = BRPairingTimeEventToString();
        [v15 setObject:v14 forKey:v16];
      }
    }
    id v17 = [*(id *)(a1 + 40) objectForKeyedSubscript:kPairingBeginsKey];
    id v18 = [v17 integerValue];

    id v19 = [objc_alloc((Class)BRRTCPairingMetric) initWithPairingBeginsType:v18];
    char v20 = *(void **)(a1 + 40);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1000BDDE0;
    v30[3] = &unk_100169340;
    id v10 = v19;
    id v31 = v10;
    [v20 enumerateKeysAndObjectsUsingBlock:v30];
    BOOL v21 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    if (v21)
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1000BDE9C;
      v28[3] = &unk_100169340;
      id v29 = v10;
      [v21 enumerateKeysAndObjectsUsingBlock:v28];
    }
    id v22 = +[BRReportManager reporterWithCatergory:1000];
    [v22 reportRTCMetric:v10];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setObject:&__kCFBooleanTrue forKey:kReportSubmitted];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) writeToURL:*(void *)(a1 + 32) atomically:1];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    void v26[2] = sub_1000BDEAC;
    v26[3] = &unk_100165D10;
    id v27 = *(id *)(a1 + 48);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v26);
  }
}

void sub_1000BDDE0(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = v5;
  if ((id)kNRSubreason == v8)
  {
    [*(id *)(a1 + 32) setSubreasonCode:v5];
  }
  else
  {
    BOOL v7 = *(void **)(a1 + 32);
    if ((id)kPairingBeginsKey == v8) {
      [v7 setPairingBeginsType:[v5 integerValue]];
    }
    else {
      [v7 addPairingTimeEventToMetricDict:v8 withValue:v5];
    }
  }
}

id sub_1000BDE9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) addPairingTimeEventToMetricDict:a2 withValue:a3];
}

uint64_t sub_1000BDEAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000BDEC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000BE03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1000BE060(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if ([v12 containsString:*(void *)(a1 + 32)])
  {
    id v6 = [v12 substringFromIndex:[*(id *)(a1 + 32) length]];
    BOOL v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue]);

    LODWORD(v6) = [v7 intValue];
    if ((int)v6 >= (int)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) intValue])
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v7);
      +[NSString stringWithFormat:@"Pushed%@", v5];
      uint64_t v9 = LABEL_7:;
      uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
  }
  else
  {
    if (![v12 containsString:*(void *)(a1 + 40)]) {
      goto LABEL_9;
    }
    id v8 = [v12 substringFromIndex:[*(id *)(a1 + 40) length]];
    BOOL v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 intValue]);

    LODWORD(v_Block_object_dispose(&STACK[0x690], 8) = [v7 intValue];
    if ((int)v8 > (int)[*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) intValue])
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v7);
      +[NSString stringWithFormat:@"Hold%@", v5];
      goto LABEL_7;
    }
  }

LABEL_9:
}

uint64_t sub_1000BE3FC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 86);
  return result;
}

uint64_t sub_1000BE488(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 86) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000BE544(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 84)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(unsigned char *)(v1 + 82) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

uint64_t sub_1000BE620(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 84)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(unsigned char *)(v1 + 80) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v2;
  return result;
}

id sub_1000BE6C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setIDSNearby:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000BE750(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setIDSConnected:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1000BEB30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 remoteObject:*(void *)(a1 + 32) isNearby:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000BEB88(uint64_t a1)
{
  return [*(id *)(a1 + 32) remoteObject:*(void *)(a1 + 40) isNearby:*(unsigned __int8 *)(a1 + 48)];
}

void sub_1000BEB98(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 remoteObject:*(void *)(a1 + 32) isConnected:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000BEBF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) remoteObject:*(void *)(a1 + 40) isConnected:*(unsigned __int8 *)(a1 + 48)];
}

uint64_t sub_1000BECAC(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 84);
  return result;
}

uint64_t sub_1000BEDB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000BEDC0(uint64_t a1)
{
}

void sub_1000BEDC8(uint64_t a1)
{
}

void sub_1000BEE74(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  BOOL v3 = *(void **)(*(void *)(a1 + 40) + 64);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    if (objc_msgSend(v3, "isEqual:")) {
      return;
    }
    id v2 = *(void **)(a1 + 32);
  }
  id v5 = [v2 copy];
  uint64_t v6 = *(void *)(a1 + 40);
  BOOL v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;

  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(NSObject **)(v8 + 120);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BEF2C;
  block[3] = &unk_1001655F8;
  void block[4] = v8;
  dispatch_async(v9, block);
}

void sub_1000BEF2C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) delegate];
    [v4 remoteObjectDevicesChanged:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1000BF074(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 87);
  return result;
}

uint64_t sub_1000BF100(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  int v2 = *(unsigned __int8 *)(result + 40);
  if (*(unsigned __int8 *)(v1 + 87) != v2) {
    *(unsigned char *)(v1 + 87) = v2;
  }
  return result;
}

id sub_1000BF194(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 84))
  {
    *(unsigned char *)(v2 + 84) = 1;
    char v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      id v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 32);
        *(_DWORD *)long long buf = 138412290;
        uint64_t v20 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Disconnected=1, for %@", buf, 0xCu);
      }
    }
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(NSObject **)(v7 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000BF3CC;
    block[3] = &unk_1001655F8;
    void block[4] = v7;
    dispatch_async(v8, block);
    if (!*(unsigned char *)(a1 + 40))
    {
LABEL_8:
      uint64_t v9 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v9 + 84))
      {
        *(unsigned char *)(v9 + 84) = 0;
        uint64_t v10 = nr_daemon_log();
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);

        if (v11)
        {
          id v12 = nr_daemon_log();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 32);
            *(_DWORD *)long long buf = 138412290;
            uint64_t v20 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Disconnected=0, for %@", buf, 0xCu);
          }
        }
        uint64_t v14 = *(void *)(a1 + 32);
        BOOL v15 = *(NSObject **)(v14 + 40);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        _DWORD v17[2] = sub_1000BF4E4;
        v17[3] = &unk_1001655F8;
        void v17[4] = v14;
        dispatch_async(v15, v17);
      }
    }
  }
  return [*(id *)(a1 + 32) _generateNearbyConnectedDelegateCalls];
}

id sub_1000BF3CC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);
      int v9 = 138412290;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "firing event after disconnecting %@", (uint8_t *)&v9, 0xCu);
    }
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v6 _rawDefaultPairedDevice];
  [v6 _fireIDSAvailableDelegateIfNeededWithIDSDevice:v7];

  [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) linkedDevicesChanged:0];
  return [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) connectedDevicesChanged:0];
}

void sub_1000BF4E4(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "firing event after connecting %@", buf, 0xCu);
    }
  }
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v6 _rawDefaultPairedDevice];
  [v6 _fireIDSAvailableDelegateIfNeededWithIDSDevice:v7];

  uint64_t v8 = [*(id *)(a1 + 32) defaultPairedDevice];
  if ([v8 isNearby])
  {
    id v12 = v8;
    int v9 = +[NSArray arrayWithObjects:&v12 count:1];
  }
  else
  {
    int v9 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) linkedDevicesChanged:v9];
  if ([v8 isConnected])
  {
    BOOL v11 = v8;
    uint64_t v10 = +[NSArray arrayWithObjects:&v11 count:1];
  }
  else
  {
    uint64_t v10 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) connectedDevicesChanged:v10];
}

uint64_t sub_1000BF72C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 85);
  return result;
}

unsigned char *sub_1000BF7B8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 85) = *(unsigned char *)(a1 + 40);
  id result = *(unsigned char **)(a1 + 32);
  if (result[85]) {
    return [result _resumeMessageDeliveryQueue];
  }
  return result;
}

uint64_t sub_1000BF8C8(void *a1)
{
  uint64_t v1 = a1[4];
  if (*(unsigned char *)(v1 + 84))
  {
    uint64_t v2 = *(void *)(a1[5] + 8);
    uint64_t v3 = *(void *)(v2 + 40);
    *(void *)(v2 + 40) = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(a1[5] + 8);
    a1 = *(id *)(v1 + 96);
    uint64_t v3 = *(void *)(v4 + 40);
    *(void *)(v4 + 40) = a1;
  }

  return _objc_release_x1(a1, v3);
}

void sub_1000BFA1C(uint64_t a1)
{
}

id sub_1000BFAC8(uint64_t a1)
{
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), *(id *)(a1 + 40));
  [*(id *)(a1 + 32) _setIDSNearby:[*(id *)(a1 + 40) isNearby]];
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) isConnected];

  return [v2 _setIDSConnected:v3];
}

uint64_t sub_1000BFC18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 104));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = WeakRetained;

  return _objc_release_x1(WeakRetained, v4);
}

id sub_1000BFCFC(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 40));
}

id sub_1000BFDA0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 112) addPointer:*(void *)(a1 + 40)];
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 112);

  return [v2 compact];
}

uint64_t sub_1000BFE7C(uint64_t a1)
{
  uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 112) count];
  if (result >= 1)
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t result = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 112) pointerAtIndex:v4];
      if (result == *(void *)(a1 + 40)) {
        break;
      }
      if (v3 == ++v4) {
        return result;
      }
    }
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 112);
    return (uint64_t)[v5 removePointerAtIndex:v4];
  }
  return result;
}

uint64_t sub_1000C0004(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 112) allObjects];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return _objc_release_x1(v2, v4);
}

void sub_1000C00EC(uint64_t a1)
{
}

unsigned char *sub_1000C06F8(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[85]) {
    return [result _suspendMessageDeliveryQueue];
  }
  return result;
}

void sub_1000C070C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[16];
  uint64_t v4 = [v3 nr_mineTinkerDevices];
  [v2 service:v3 devicesChanged:v4];

  if ([*(id *)(a1 + 40) isNearby])
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v5 = +[NSArray arrayWithObjects:&v8 count:1];
  }
  else
  {
    uint64_t v5 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) linkedDevicesChanged:v5];
  if ([*(id *)(a1 + 40) isConnected])
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = +[NSArray arrayWithObjects:&v7 count:1];
  }
  else
  {
    uint64_t v6 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 32) service:*(void *)(*(void *)(a1 + 32) + 128) connectedDevicesChanged:v6];
}

void sub_1000C0A74(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 128) removeDelegate:];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 128);
  *(void *)(v2 + 12_Block_object_dispose(&STACK[0x690], 8) = 0;

  [*(id *)(*(void *)(a1 + 32) + 16) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 8) removeAllObjects];
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 24);
  id v5 = [v4 countByEnumeratingWithState:&v62 objects:v69 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v63;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v63 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(*((void *)&v62 + 1) + 8 * i)];
        [v9 invalidate];
      }
      id v6 = [v4 countByEnumeratingWithState:&v62 objects:v69 count:16];
    }
    while (v6);
  }

  [*(id *)(*(void *)(a1 + 32) + 24) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 72) removeAllObjects];
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(void *)(v10 + 136))
  {
    [(id)v10 _resumeMessageDeliveryQueue];
    uint64_t v10 = *(void *)(a1 + 32);
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v11 = *(id *)(v10 + 24);
  id v12 = [v11 countByEnumeratingWithState:&v58 objects:v68 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v59;
    do
    {
      for (j = 0; j != v13; j = (char *)j + 1)
      {
        if (*(void *)v59 != v14) {
          objc_enumerationMutation(v11);
        }
        int v16 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:*(void *)(*((void *)&v58 + 1) + 8 * (void)j)];
        [v16 invalidate];
      }
      id v13 = [v11 countByEnumeratingWithState:&v58 objects:v68 count:16];
    }
    while (v13);
  }

  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = *(void **)(v17 + 24);
  *(void *)(v17 + 24) = 0;

  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v20 = *(void **)(v19 + 72);
  *(void *)(v19 + 72) = 0;

  uint64_t v21 = *(void *)(a1 + 32);
  if (*(void *)(v21 + 120))
  {
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    id v22 = [*(id *)(v21 + 8) allKeys];
    id v23 = [v22 copy];

    id v24 = [v23 countByEnumeratingWithState:&v54 objects:v67 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v55;
      do
      {
        for (k = 0; k != v25; k = (char *)k + 1)
        {
          if (*(void *)v55 != v26) {
            objc_enumerationMutation(v23);
          }
          uint64_t v28 = *(void *)(*((void *)&v54 + 1) + 8 * (void)k);
          id v29 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:v28];
          if (v29)
          {
            [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:v28];
            id v30 = *(NSObject **)(*(void *)(a1 + 32) + 120);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472;
            block[2] = sub_1000C0F64;
            block[3] = &unk_100165D10;
            id v53 = v29;
            dispatch_async(v30, block);
          }
        }
        id v25 = [v23 countByEnumeratingWithState:&v54 objects:v67 count:16];
      }
      while (v25);
    }

    uint64_t v31 = *(void *)(a1 + 32);
    id v32 = *(void **)(v31 + 8);
    *(void *)(v31 + _Block_object_dispose(&STACK[0x690], 8) = 0;

    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    id v33 = [*(id *)(*(void *)(a1 + 32) + 16) allKeys];
    id v34 = [v33 copy];

    id v35 = [v34 countByEnumeratingWithState:&v48 objects:v66 count:16];
    if (v35)
    {
      id v36 = v35;
      uint64_t v37 = *(void *)v49;
      do
      {
        for (m = 0; m != v36; m = (char *)m + 1)
        {
          if (*(void *)v49 != v37) {
            objc_enumerationMutation(v34);
          }
          id v39 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(*((void *)&v48 + 1) + 8 * (void)m)];
          id v40 = v39;
          if (v39)
          {
            id v41 = *(void **)(*(void *)(a1 + 32) + 16);
            id v42 = objc_retainBlock(v39);
            [v41 removeObjectForKey:v42];

            id v43 = *(NSObject **)(*(void *)(a1 + 32) + 120);
            v46[0] = _NSConcreteStackBlock;
            v46[1] = 3221225472;
            v46[2] = sub_1000C103C;
            v46[3] = &unk_100165D10;
            id v47 = v40;
            dispatch_async(v43, v46);
          }
        }
        id v36 = [v34 countByEnumeratingWithState:&v48 objects:v66 count:16];
      }
      while (v36);
    }

    uint64_t v44 = *(void *)(a1 + 32);
    id v45 = *(void **)(v44 + 16);
    *(void *)(v44 + 16) = 0;
  }
}

void sub_1000C0F64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  NSErrorUserInfoKey v4 = NSLocalizedDescriptionKey;
  CFStringRef v5 = @"NRRemoteObject invalidated";
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  uint64_t v3 = +[NSError errorWithDomain:@"com.apple.nanoregistryd" code:567 userInfo:v2];
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

uint64_t sub_1000C103C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000C185C(void *a1)
{
  uint64_t v2 = a1[6];
  uint64_t v3 = [NRRemoteObjectMessage alloc];
  NSErrorUserInfoKey v4 = (void *)a1[4];
  CFStringRef v5 = *(void **)(a1[5] + 128);
  id v10 = [v4 context];
  id v6 = [v10 fromID];
  uint64_t v7 = [v5 linkedDeviceForFromID:v6 withRelationship:3];
  uint64_t v8 = [v7 nsuuid];
  int v9 = [(NRRemoteObjectMessage *)v3 initWithProtobuf:v4 andIDSBTUUID:v8];
  (*(void (**)(uint64_t, NRRemoteObjectMessage *))(v2 + 16))(v2, v9);
}

void sub_1000C193C(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    NSErrorUserInfoKey v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(message processing started)", buf, 2u);
    }
  }
  CFStringRef v5 = *(void (**)(uint64_t, id, NRRemoteObjectMessage *))(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = [*(id *)(a1 + 40) selector];
  uint64_t v8 = [NRRemoteObjectMessage alloc];
  int v9 = *(void **)(a1 + 48);
  id v10 = *(void **)(*(void *)(a1 + 32) + 128);
  id v11 = [v9 context];
  id v12 = [v11 fromID];
  id v13 = [v10 linkedDeviceForFromID:v12 withRelationship:3];
  uint64_t v14 = [v13 nsuuid];
  BOOL v15 = [(NRRemoteObjectMessage *)v8 initWithProtobuf:v9 andIDSBTUUID:v14];
  v5(v6, v7, v15);

  int v16 = nr_daemon_log();
  LODWORD(v6) = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    uint64_t v17 = nr_daemon_log();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "(message processing completed)", v18, 2u);
    }
  }
}

id sub_1000C21CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queueSendMessage:*(void *)(a1 + 40) type:*(unsigned __int16 *)(a1 + 120) requestUUID:*(void *)(a1 + 48) withTimeout:*(void *)(a1 + 56) withResponseTimeout:*(void *)(a1 + 64) withDescription:*(void *)(a1 + 72) onlyOneFor:*(void *)(a1 + 80) priority:*(void *)(a1 + 112) toIDSBTUUID:*(void *)(a1 + 88) didSend:*(void *)(a1 + 96) andResponse:*(void *)(a1 + 104)];
}

id sub_1000C253C(uint64_t a1)
{
  LOBYTE(v2) = *(unsigned char *)(a1 + 122);
  return [*(id *)(a1 + 32) _queueSendCloudMessage:*(void *)(a1 + 40) type:*(unsigned __int16 *)(a1 + 120) responseToRequest:*(void *)(a1 + 48) withTimeout:*(void *)(a1 + 56) withResponseTimeout:*(void *)(a1 + 64) withDescription:*(void *)(a1 + 72) onlyOneFor:*(void *)(a1 + 80) priority:*(void *)(a1 + 112) toDestinations:*(void *)(a1 + 88) skipLookup:v2 didSend:*(void *)(a1 + 96) andResponse:*(void *)(a1 + 104)];
}

void sub_1000C2628(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    NSErrorUserInfoKey v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138543362;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
    }
  }
  [*(id *)(*(void *)(a1 + 40) + 24) removeObjectForKey:*(void *)(a1 + 32)];
  uint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 16) objectForKeyedSubscript:*(void *)(a1 + 32)];
  id v7 = v6;
  if (v6)
  {
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 40) + 120);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000C2794;
    block[3] = &unk_100165D10;
    id v10 = v6;
    dispatch_async(v8, block);
    [*(id *)(*(void *)(a1 + 40) + 16) removeObjectForKey:*(void *)(a1 + 32)];
  }
}

uint64_t sub_1000C2794(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C3208(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000C321C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000C3230(uint64_t a1)
{
  return [*(id *)(a1 + 32) _messageResponseTimeout:*(void *)(a1 + 40)];
}

uint64_t sub_1000C323C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000C3250(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000C3C98(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000C3CAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1000C3CC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _messageResponseTimeout:*(void *)(a1 + 40)];
}

uint64_t sub_1000C3CCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000C3CE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000C462C(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    NSErrorUserInfoKey v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 32) trafficClasses];
      uint64_t v6 = [v5 allObjects];
      id v7 = [v6 componentsJoinedByString:@" "];
      int v10 = 138543362;
      id v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setting traffic classes %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v8 = [*(id *)(a1 + 32) trafficClasses];
  int v9 = [*(id *)(a1 + 40) mutableIDSDevice];
  IDSLocalPairingSetAllowedTrafficClassifiersForDevice();
}

void sub_1000C4780(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      uint64_t v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = [(NSError *)v2 nr_safeDescription];
        int v7 = 138543362;
        uint64_t v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingSetAllowedTrafficClassifiersForDevice Failed %{public}@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
}

void sub_1000C486C(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "dropping unmatching traffic", v6, 2u);
    }
  }
  uint64_t v5 = [*(id *)(a1 + 32) mutableIDSDevice];
  IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier();
}

void sub_1000C4928(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    BOOL v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      uint64_t v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = [(NSError *)v2 nr_safeDescription];
        int v7 = 138543362;
        uint64_t v8 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier Failed %{public}@", (uint8_t *)&v7, 0xCu);
      }
    }
  }
}

id sub_1000C4AAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateTrafficClassesWithClasses:*(void *)(a1 + 40)];
}

void sub_1000C5398(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 remoteObjectIDSServiceUnavailable:*(void *)(a1 + 32)];
}

id sub_1000C53EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) remoteObjectIDSServiceUnavailable:*(void *)(a1 + 40)];
}

void sub_1000C53F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 remoteObjectIDSServiceAvailable:*(void *)(a1 + 32) withIDSDevice:*(void *)(a1 + 40)];
}

id sub_1000C544C(uint64_t a1)
{
  return [*(id *)(a1 + 32) remoteObjectIDSServiceAvailable:*(void *)(a1 + 40) withIDSDevice:*(void *)(a1 + 48)];
}

void sub_1000C545C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 remoteObjectIDSServiceUnavailable:*(void *)(a1 + 32)];
}

id sub_1000C54B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) remoteObjectIDSServiceUnavailable:*(void *)(a1 + 40)];
}

uint64_t sub_1000C5C30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000C5C44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000C5F8C(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = [[NRImmutableIDSDevice alloc] initWithIDSDevice:*(void *)(a1 + 40)];
  [v4 remoteObject:v2 defaultPairedDeviceDidChange:v3];
}

void sub_1000C6008(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  BOOL v3 = [[NRImmutableIDSDevice alloc] initWithIDSDevice:a1[6]];
  [v1 remoteObject:v2 defaultPairedDeviceDidChange:v3];
}

void sub_1000C6078(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = [[NRImmutableIDSDevice alloc] initWithIDSDevice:*(void *)(a1 + 40)];
  [v1 _fireIDSAvailableDelegateIfNeededWithIDSDevice:v2];
}

void sub_1000C61C8(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.NanoRegistry.trafficClassQueue", 0);
  uint64_t v2 = qword_1001A13B0;
  qword_1001A13B0 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

void sub_1000C660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    uint64_t v12 = nr_daemon_log();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);

    if (v13)
    {
      uint64_t v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        [v11 nr_safeDescription];
        objc_claimAutoreleasedReturnValue();
        sub_1000FB5C0();
      }
    }
    objc_end_catch();
    JUMPOUT(0x1000C65C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000C6CBC(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1000C6CD4(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_error_impl(a1, a4, OS_LOG_TYPE_ERROR, a2, a3, 0x16u);
}

void sub_1000C6E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000C6E50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_queue_t v1 = [WeakRetained delegate];
  [v1 transactionDidComplete:WeakRetained];
}

uint64_t sub_1000C6FF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

id sub_1000C7AD8(uint64_t a1, void *a2)
{
  return [a2 setIsConnected:*(unsigned __int8 *)(a1 + 32)];
}

id sub_1000C806C(uint64_t a1, void *a2)
{
  return [a2 scalablePipeManagerDidUpdateState:*(void *)(a1 + 32)];
}

id sub_1000C8194(uint64_t a1, void *a2)
{
  return [a2 scalablePipeManager:*(void *)(a1 + 32) pipeDidConnect:*(void *)(a1 + 40)];
}

id sub_1000C82A4(uint64_t a1, void *a2)
{
  return [a2 scalablePipeManager:*(void *)(a1 + 32) didUnregisterEndpoint:*(void *)(a1 + 40)];
}

id sub_1000C83F0(void *a1, void *a2)
{
  return [a2 scalablePipeManager:a1[4] pipeDidDisconnect:a1[5] error:a1[6]];
}

id sub_1000C8588(void *a1, void *a2)
{
  return [a2 scalablePipeManager:a1[4] didRegisterEndpoint:a1[5] error:a1[6]];
}

void sub_1000C8660(id a1)
{
  dispatch_queue_t v1 = objc_alloc_init(EPScalablePipeManagerManagerFactory);
  uint64_t v2 = qword_1001A13B8;
  qword_1001A13B8 = (uint64_t)v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000C89EC(uint64_t a1)
{
  objc_storeStrong((id *)&qword_1001A13C8, *(id *)(a1 + 32));
  id v2 = [objc_alloc(*(Class *)(a1 + 40)) initBase];
  uint64_t v3 = qword_1001A13D8;
  qword_1001A13D8 = (uint64_t)v2;

  return _objc_release_x1(v2, v3);
}

uint64_t sub_1000C9654(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000C99C8(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

void sub_1000C9C7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v1 + 8))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 32));
    char v4 = objc_opt_respondsToSelector();

    if (v4)
    {
      unsigned int v5 = sub_1000A3BC0();
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

      if (v6)
      {
        unint64_t v7 = sub_1000A3BC0();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          char v8 = (objc_class *)objc_opt_class();
          BOOL v9 = NSStringFromClass(v8);
          int v10 = +[EPResourceManager stringForResourceAvailability:*(void *)(*(void *)(a1 + 32) + 16)];
          uint64_t v11 = *(void *)(a1 + 32);
          uint64_t v12 = *(void *)(v11 + 24);
          id v13 = objc_loadWeakRetained((id *)(v11 + 32));
          uint64_t v14 = (objc_class *)objc_opt_class();
          unint64_t v15 = NSStringFromClass(v14);
          id v16 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
          int v18 = 138413314;
          uint64_t v19 = v9;
          __int16 v20 = 2112;
          uint64_t v21 = v10;
          __int16 v22 = 2112;
          uint64_t v23 = v12;
          __int16 v24 = 2112;
          id v25 = v15;
          __int16 v26 = 2048;
          id v27 = v16;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Resource %@ calling resourceAvailabilityDidChange: with %@[%@] on %@[%p]", (uint8_t *)&v18, 0x34u);
        }
      }
      id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32));
      [v17 resourceAvailabilityDidChange:*(void *)(a1 + 32)];
    }
  }
}

id sub_1000CA404(uint64_t a1)
{
  uint64_t v2 = (uint64_t)[*(id *)(*(void *)(a1 + 32) + 16) count];
  if (v2 >= 1)
  {
    uint64_t v3 = v2;
    uint64_t v4 = 0;
    while ([*(id *)(*(void *)(a1 + 32) + 16) pointerAtIndex:v4] != *(id *)(a1 + 40))
    {
      if (v3 == ++v4) {
        goto LABEL_7;
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 16) removePointerAtIndex:v4];
  }
LABEL_7:
  [*(id *)(a1 + 32) updateNeedsResource];
  unsigned int v5 = *(void **)(a1 + 32);

  return [v5 resourceWasRemoved];
}

id sub_1000CA664(uint64_t a1, void *a2)
{
  return [a2 setAvailability:*(void *)(*(void *)(a1 + 32) + 32) withError:*(void *)(*(void *)(a1 + 32) + 40)];
}

void sub_1000CA8C0(id a1, EPResourceProtocol *a2)
{
}

uint64_t sub_1000CACE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    BOOL v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v37 = v7;
      __int16 v38 = 2112;
      uint64_t v39 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Updating versions: %@ for ID: %@", buf, 0x16u);
    }
  }
  BOOL v9 = +[NSMutableDictionary dictionary];
  id v10 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v11 = objc_alloc((Class)NRDevicePropertyDiff);
  uint64_t v12 = +[NSNumber numberWithInteger:(int)sub_100061AE4(*(void *)(a1 + 32))];
  id v13 = [v11 initWithValue:v12];
  id v14 = [v10 initWithDiff:v13 andChangeType:1];
  [v9 setObject:v14 forKeyedSubscript:NRDevicePropertyMinPairingCompatibilityVersion];

  id v15 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v16 = objc_alloc((Class)NRDevicePropertyDiff);
  id v17 = +[NSNumber numberWithInteger:(int)sub_100061AD0(*(void *)(a1 + 32))];
  id v18 = [v16 initWithValue:v17];
  id v19 = [v15 initWithDiff:v18 andChangeType:1];
  [v9 setObject:v19 forKeyedSubscript:NRDevicePropertyMaxPairingCompatibilityVersion];

  id v20 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v21 = objc_alloc((Class)NRDevicePropertyDiff);
  __int16 v22 = sub_100061AF8(*(void *)(a1 + 32));
  id v23 = [v21 initWithValue:v22];
  id v24 = [v20 initWithDiff:v23 andChangeType:1];
  [v9 setObject:v24 forKeyedSubscript:NRDevicePropertySystemBuildVersion];

  id v25 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v9];
  id v26 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v25 andChangeType:1];
  if (*(void *)(a1 + 40))
  {
    id v27 = objc_alloc((Class)NRDeviceCollectionDiff);
    uint64_t v34 = *(void *)(a1 + 40);
    id v35 = v26;
    uint64_t v28 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    id v29 = [v27 initWithDeviceCollectionDiffDeviceDiffs:v28];

    id v30 = [v3 applyDiff:v29];
  }
  else
  {
    id v32 = nr_daemon_log();
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);

    if (!v33) {
      goto LABEL_8;
    }
    id v29 = nr_daemon_log();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "No Device ID to apply diff", buf, 2u);
    }
  }

LABEL_8:
  return 0;
}

void sub_1000CB42C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    BOOL v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "sendVersionRequestToCompanion send block called with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

id sub_1000CB500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) updateVersions:a3 withDeviceUUID:*(void *)(a1 + 40)];
}

void sub_1000CB50C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_daemon_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    BOOL v5 = nr_daemon_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "sendVersionRequestToCompanion send block called with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

id sub_1000CB5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) updateVersions:a3 withDeviceUUID:*(void *)(a1 + 40)];
}

void sub_1000CB84C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_framework_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    BOOL v5 = nr_framework_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Version message to companion completed with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

BOOL sub_1000CBD98(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsAltAccount];
  if ([v3 BOOLValue])
  {
    BOOL v4 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsArchived];
    unsigned int v5 = [v4 BOOLValue] ^ 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

BOOL sub_1000CBE20(id a1, NRDevice *a2)
{
  uint64_t v2 = a2;
  id v3 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsAltAccount];
  unsigned __int8 v4 = [v3 BOOLValue];

  if ((v4 & 1) == 0)
  {
    unsigned int v5 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsActive];
    if ([v5 BOOLValue])
    {
    }
    else
    {
      int v6 = [(NRDevice *)v2 valueForProperty:NRDevicePropertyIsArchived];
      unsigned int v7 = [v6 BOOLValue];

      if (!v7)
      {
        BOOL v8 = 1;
        goto LABEL_6;
      }
    }
  }
  BOOL v8 = 0;
LABEL_6:

  return v8;
}

void sub_1000CBEE4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_framework_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    unsigned int v5 = nr_framework_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      unsigned int v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "broadcastVersionChangeToDisconnectedWatches:  altAccountDevices send block called with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_1000CBFB8(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_framework_log();
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    unsigned int v5 = nr_framework_log();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138412290;
      unsigned int v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "broadcastVersionChangeToDisconnectedWatches:  inactive devices send block called with error: %@", (uint8_t *)&v6, 0xCu);
    }
  }
}

id sub_1000CC1AC(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:_NRDevicePropertyMigrationIDSCloudIdentifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000CC600(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  BOOL v8 = [[EPRoutingSlip alloc] initWithRoutingSlipEntries:v7];
  [(EPRoutingSlip *)v8 setRoutingSlipDelegate:*(void *)(a1 + 32)];
  [(EPRoutingSlip *)v8 setPersistWhilePending:a3];
  [(EPRoutingSlip *)v8 setNotUnrollable:a4];
  id v27 = v8;
  [*(id *)(a1 + 32) setChildRoutingSlip:v8];
  BOOL v9 = nr_daemon_log();
  LODWORD(a3) = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

  if (a3)
  {
    id v10 = nr_daemon_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16));
      uint64_t v12 = [WeakRetained shortDescription];
      id v13 = [(EPRoutingSlip *)v8 identifier];
      *(_DWORD *)long long buf = 138543618;
      uint64_t v34 = v12;
      __int16 v35 = 2114;
      id v36 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionRoutingSlip: Built routing slip entries for %{public}@ -> EPRoutingSlip[%{public}@]", buf, 0x16u);
    }
  }
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v14 = v7;
  id v15 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v29;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(void *)v29 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        id v20 = nr_daemon_log();
        BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

        if (v21)
        {
          __int16 v22 = nr_daemon_log();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = [(EPRoutingSlip *)v27 identifier];
            *(_DWORD *)long long buf = 138543618;
            uint64_t v34 = v23;
            __int16 v35 = 2114;
            id v36 = v19;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, ": EPRoutingSlip[%{public}@] -> %{public}@", buf, 0x16u);
          }
        }
      }
      id v16 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
    }
    while (v16);
  }

  id v24 = nr_daemon_log();
  BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);

  if (v25)
  {
    id v26 = nr_daemon_log();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, ": -------------", buf, 2u);
    }
  }
  [(EPRoutingSlip *)v27 resumeWithServiceRegistry:*(void *)(a1 + 40) rollback:0];
}

void sub_1000CDB04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  unsigned int v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000FB9A0();
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 0;
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      BOOL v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully added notification request", v10, 2u);
      }
    }
  }
}

void sub_1000CE0A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 8) || *(unsigned char *)(v2 + 16))
  {
    id v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      unsigned int v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 16);
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v53) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Alert being shown: %d", buf, 8u);
      }
    }
LABEL_7:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    return;
  }
  uint64_t v7 = +[NROSTransaction transactionWithName:@"alert"];
  uint64_t v8 = *(void *)(a1 + 32);
  BOOL v9 = *(void **)(v8 + 48);
  *(void *)(v8 + 4_Block_object_dispose(&STACK[0x690], 8) = v7;

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = nr_daemon_log();
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);

  if (v10)
  {
    if (!v12) {
      goto LABEL_18;
    }
    id v13 = nr_daemon_log();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_17;
    }
    uint64_t v14 = *(void *)(a1 + 40);
    CFStringRef v15 = *(const __CFString **)(*(void *)(a1 + 32) + 64);
    *(_DWORD *)long long buf = 138412546;
    CFStringRef v53 = v15;
    __int16 v54 = 2112;
    uint64_t v55 = v14;
    id v16 = "Displaying alert %@ with string %@";
    uint64_t v17 = v13;
    uint32_t v18 = 22;
    goto LABEL_16;
  }
  if (!v12) {
    goto LABEL_18;
  }
  id v13 = nr_daemon_log();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v19 = *(const __CFString **)(*(void *)(a1 + 32) + 64);
    *(_DWORD *)long long buf = 138412290;
    CFStringRef v53 = v19;
    id v16 = "Displaying alert %@";
    uint64_t v17 = v13;
    uint32_t v18 = 12;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
  }
LABEL_17:

LABEL_18:
  id v20 = nr_daemon_log();
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);

  if (v21)
  {
    __int16 v22 = nr_daemon_log();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(*(void *)(a1 + 32) + 40)) {
        id v23 = "YES";
      }
      else {
        id v23 = "NO";
      }
      *(_DWORD *)long long buf = 136315138;
      CFStringRef v53 = (CFStringRef)v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Displaying alert using UNUserNotificationCenter: %s", buf, 0xCu);
    }
  }
  uint64_t v24 = *(void *)(a1 + 32);
  if (*(void *)(v24 + 40))
  {
    BOOL v25 = nr_daemon_log();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

    if (v26)
    {
      id v27 = nr_daemon_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v28 = *(const __CFString **)(*(void *)(a1 + 32) + 64);
        *(_DWORD *)long long buf = 138412290;
        CFStringRef v53 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Setting UNUserNotificationCenter delegate to %@", buf, 0xCu);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 40) setDelegate:];
    [*(id *)(a1 + 32) presentUINotifictaionWithString:*(void *)(a1 + 40)];
    goto LABEL_7;
  }
  SInt32 error = 0;
  v58[0] = kCFUserNotificationAlertHeaderKey;
  long long v29 = [(id)v24 string:0 localized:*(unsigned __int8 *)(v24 + 32)];
  v59[0] = v29;
  v58[1] = kCFUserNotificationAlertMessageKey;
  long long v30 = [*(id *)(a1 + 32) string:1 localized:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
  v59[1] = v30;
  v58[2] = kCFUserNotificationDefaultButtonTitleKey;
  long long v31 = [*(id *)(a1 + 32) string:2 localized:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
  v59[2] = v31;
  id v32 = +[NSDictionary dictionaryWithObjects:v59 forKeys:v58 count:3];
  id v33 = [v32 mutableCopy];

  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 72) count] >= 4)
  {
    uint64_t v34 = [*(id *)(a1 + 32) string:3 localized:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
    [v33 setObject:v34 forKeyedSubscript:kCFUserNotificationAlternateButtonTitleKey];
  }
  if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 72) count] >= 7)
  {
    __int16 v35 = [*(id *)(a1 + 32) string:6 localized:*(unsigned __int8 *)(*(void *)(a1 + 32) + 32)];
    [v33 setObject:v35 forKeyedSubscript:kCFUserNotificationOtherButtonTitleKey];
  }
  if (*(void *)(a1 + 40))
  {
    id v36 = [v33 objectForKeyedSubscript:kCFUserNotificationAlertMessageKey];
    id v50 = 0;
    uint64_t v37 = +[NSString stringWithValidatedFormat:v36, @"%@", &v50, *(void *)(a1 + 40) validFormatSpecifiers error];
    id v38 = v50;

    if (!v37 || v38)
    {
      uint64_t v39 = nr_daemon_log();
      BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);

      if (v40)
      {
        id v41 = nr_daemon_log();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412802;
          CFStringRef v53 = kCFUserNotificationAlertMessageKey;
          __int16 v54 = 2112;
          uint64_t v55 = v42;
          __int16 v56 = 2112;
          id v57 = v38;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Failed to created a formatted message for %@ with string %@; SInt32 error = %@",
            buf,
            0x20u);
        }
      }
    }
    else
    {
      [v33 setObject:v37 forKeyedSubscript:kCFUserNotificationAlertMessageKey];
    }
  }
  *(void *)(*(void *)(a1 + 32) + 24) = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 2uLL, &error, (CFDictionaryRef)v33);
  id v43 = *(CFUserNotificationRef **)(a1 + 32);
  if (error)
  {
    [(CFUserNotificationRef *)v43 _dismissAlert];
    uint64_t v44 = nr_daemon_log();
    BOOL v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);

    if (v45)
    {
      id v46 = nr_daemon_log();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v47 = *(const __CFString **)(*(void *)(a1 + 32) + 64);
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v53 = v47;
        __int16 v54 = 1024;
        LODWORD(v55) = error;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Failed to create alert %@ error #%d", buf, 0x12u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
    *(void *)(*(void *)(a1 + 32) + _Block_object_dispose(&STACK[0x690], 8) = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v43[3], (CFUserNotificationCallBack)sub_1000CE7B8, 0);
    long long v48 = +[NSValue valueWithPointer:*(void *)(*(void *)(a1 + 32) + 24)];
    [(id)qword_1001A13E0 setObject:*(void *)(a1 + 32) forKeyedSubscript:v48];
    long long v49 = +[NSRunLoop mainRunLoop];
    CFRunLoopAddSource((CFRunLoopRef)[v49 getCFRunLoop], *(CFRunLoopSourceRef *)(*(void *)(a1 + 32) + 8), kCFRunLoopCommonModes);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_1000CE7B8(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSValue valueWithPointer:a1];
  id v3 = [(id)qword_1001A13E0 objectForKeyedSubscript:v4];
  [v3 alertResponseWithResponseFlags:a2];
}

id sub_1000CE8A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dismissAlert];
}

id sub_1000CE920(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dismissAlert];
}

void sub_1000CF3A0(id a1, BSProcessHandle *a2, NSError *a3)
{
  id v4 = a2;
  unsigned int v5 = a3;
  int v6 = nr_daemon_log();
  uint64_t v7 = v6;
  if (v5)
  {
    BOOL v8 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      BOOL v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000FBA98();
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v10 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

    if (v10)
    {
      BOOL v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "openApplication:withOptions:completion: finished with no error", v11, 2u);
      }
      goto LABEL_8;
    }
  }
}

void sub_1000CF7C4(id a1, NSDictionary *a2, NSError *a3)
{
  id v4 = a2;
  unsigned int v5 = a3;
  if (v5)
  {
    int v6 = nr_daemon_log();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);

    if (v7)
    {
      BOOL v8 = nr_daemon_log();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1000FBB0C(v5, v8);
      }
    }
  }
}

void sub_1000CFAB4(id a1)
{
  uint64_t v1 = +[NRPairingDaemon sharedInstance];
  uint64_t v2 = [v1 serviceRegistry];
  id v3 = [v2 serviceFromClass:objc_opt_class()];

  [v3 setMigrationConsent:1 forDeviceID:0 completion:0];
}

uint64_t sub_1000CFE14(uint64_t a1)
{
  id v1 = [objc_alloc(*(Class *)(a1 + 32)) initBase];
  uint64_t v2 = qword_1001A13F0;
  qword_1001A13F0 = (uint64_t)v1;

  return _objc_release_x1(v1, v2);
}

void sub_1000CFEA4(id a1)
{
  id v1 = [objc_alloc((Class)UNUserNotificationCenter) initWithBundleIdentifier:@"com.apple.usernotifications.nanoregistryd"];
  uint64_t v2 = (void *)qword_1001A13F8;
  qword_1001A13F8 = (uint64_t)v1;

  id v3 = (void *)qword_1001A13F8;

  [v3 setWantsNotificationResponsesDelivered];
}

id sub_1000D0040(uint64_t a1)
{
  return [*(id *)(a1 + 32) _presentAlertsIfNeeded];
}

void sub_1000D07CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v3 = v2;
  if (v2 && *(unsigned __int8 *)(a1 + 56) != [v2 enabled])
  {
    id v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      int v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        if (*(unsigned char *)(a1 + 56)) {
          CFStringRef v8 = @"Enabling";
        }
        else {
          CFStringRef v8 = @"Disabling";
        }
        int v9 = 138412546;
        CFStringRef v10 = v8;
        __int16 v11 = 2112;
        uint64_t v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@ alert %@", (uint8_t *)&v9, 0x16u);
      }
    }
    [v3 setDevice:*(void *)(a1 + 48)];
    [v3 setEnabled:*(unsigned __int8 *)(a1 + 56)];
  }
}

id sub_1000D0B48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _presentAlertsIfNeeded];
}

void sub_1000D0DE8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [v2 presentAlertIfEnabledWithString:*(void *)(*(void *)(a1 + 32) + 32)];
}

void sub_1000D0F84(uint64_t a1)
{
  id v1 = [*(id *)(*(void *)(a1 + 32) + 8) objectForKeyedSubscript:*(void *)(a1 + 40)];
  [v1 resetState];
}

void sub_1000D11D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D11F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _presentAlertsIfNeeded];
}

void sub_1000D1298(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  uint64_t v2 = qword_1001A13E0;
  qword_1001A13E0 = v1;

  _objc_release_x1(v1, v2);
}

id sub_1000D1750(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000D1970(uint64_t a1)
{
  return [*(id *)(a1 + 32) _writeTimedOutWithEntry:*(void *)(a1 + 40)];
}

void sub_1000D1EBC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) completion];
  v2[2](v2, *(void *)(a1 + 40));
}

void sub_1000D1F18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) completion];
  v2[2](v2, *(void *)(a1 + 40));
}

void sub_1000D3638(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = qword_1001A1418;
  qword_1001A1418 = v1;

  _objc_release_x1(v1, v2);
}

uint64_t sub_1000D3784(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000D3794(uint64_t a1)
{
}

void sub_1000D379C(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 16);
  id v6 = +[NSValue valueWithNonretainedObject:a1[5]];
  uint64_t v3 = [v2 objectForKeyedSubscript:v6];
  uint64_t v4 = *(void *)(a1[6] + 8);
  BOOL v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000D39F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D3A1C(uint64_t a1)
{
  id v5 = [*(id *)(*(void *)(a1 + 32) + 16) allKeys];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000D3B94(void *a1)
{
  id v2 = *(void **)(a1[4] + 16);
  uint64_t v3 = +[NSValue valueWithNonretainedObject:a1[5]];
  uint64_t v4 = [v2 objectForKeyedSubscript:v3];
  uint64_t v5 = *(void *)(a1[6] + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(a1[6] + 8) + 40))
  {
    uint64_t v7 = [[NRQueue alloc] initWithDispatchQueue:a1[5]];
    uint64_t v8 = *(void *)(a1[6] + 8);
    int v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    uint64_t v10 = *(void *)(*(void *)(a1[6] + 8) + 40);
    __int16 v11 = *(void **)(a1[4] + 16);
    uint64_t v12 = +[NSValue valueWithNonretainedObject:a1[5]];
    [v11 setObject:v10 forKeyedSubscript:v12];

    id v13 = nr_daemon_log();
    LODWORD(v11) = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      uint64_t v14 = nr_daemon_log();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v15 = *(void **)(*(void *)(a1[6] + 8) + 40);
        id v16 = [v15 queue];
        int v17 = 134218240;
        uint32_t v18 = v15;
        __int16 v19 = 2048;
        id v20 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Created queue %p[%p]", (uint8_t *)&v17, 0x16u);
      }
    }
  }
}

void sub_1000D3DD8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  id v2 = +[NSValue valueWithNonretainedObject:*(void *)(a1 + 40)];
  [v1 removeObjectForKey:v2];
}

void sub_1000D42D0(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 32) newQueueWithLabel:@"com.apple.nanoregistry.registryDaemonQueue" withAttributes:v4];
  uint64_t v3 = (void *)qword_1001A1420;
  qword_1001A1420 = (uint64_t)v2;
}

void sub_1000D43E8(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 registryDaemonQueue];
  id v4 = [v2 newQueueWithLabel:@"com.apple.nanoregistry.pairingxpc" withTargetQueue:v3 withAttributes:v6];
  uint64_t v5 = (void *)qword_1001A1430;
  qword_1001A1430 = (uint64_t)v4;

  [(id)qword_1001A1430 suspend];
}

void sub_1000D4524(uint64_t a1)
{
  if (_NRIsInternalInstall()
    && CFPreferencesGetAppBooleanValue(@"notifyActiveWatchChanges", @"com.apple.NanoRegistry", 0))
  {
    dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = [*(id *)(a1 + 32) newQueueWithLabel:@"com.apple.nanoregistry.bulletin" withAttributes:v4];
    uint64_t v3 = (void *)qword_1001A1440;
    qword_1001A1440 = (uint64_t)v2;
  }
}

void sub_1000D4670(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 32) newQueueWithLabel:@"com.apple.nanoregistry.switchCompletionBlocks" withAttributes:v4];
  uint64_t v3 = (void *)qword_1001A1450;
  qword_1001A1450 = (uint64_t)v2;
}

void sub_1000D4788(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 registryDaemonQueue];
  id v4 = [v2 newQueueWithLabel:@"com.apple.nanoregistry.firstUnlock" withTargetQueue:v3 withAttributes:v6];
  uint64_t v5 = (void *)qword_1001A1460;
  qword_1001A1460 = (uint64_t)v4;
}

void sub_1000D48BC(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [v2 registryDaemonQueue];
  id v4 = [v2 newQueueWithLabel:@"com.apple.nanoregistry.delayPairingRequest" withTargetQueue:v3 withAttributes:v6];
  uint64_t v5 = (void *)qword_1001A1470;
  qword_1001A1470 = (uint64_t)v4;
}

void sub_1000D49F0(uint64_t a1)
{
  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  id v2 = [*(id *)(a1 + 32) newQueueWithLabel:@"com.apple.nanoregistry.assetDownloadQueue" withAttributes:v4];
  uint64_t v3 = (void *)qword_1001A1480;
  qword_1001A1480 = (uint64_t)v2;
}

uint64_t sub_1000D4CC4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadString();
      id v13 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D4E6C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_1000D4F78(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1000D4FA0(uint64_t result, uint64_t a2)
{
  if (result)
  {
    *(unsigned char *)(result + 24) |= 1u;
    *(void *)(result + _Block_object_dispose(&STACK[0x690], 8) = a2;
  }
  return result;
}

uint64_t sub_1000D5124(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t v17 = PBReaderReadString();
      uint32_t v18 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v17;
    }
    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          uint64_t v14 = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v14 = 0;
      }
LABEL_32:
      *(void *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D53F4(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

uint64_t sub_1000D55B4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1000D55C8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

void sub_1000D599C(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  char v4 = [v3 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  unsigned int v5 = [v4 value];

  unint64_t v6 = [*(id *)(*(void *)(a1 + 40) + 64) queue];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000D5AA4;
  v9[3] = &unk_100165A70;
  id v7 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v7;
  id v8 = v5;
  dispatch_async(v6, v9);
}

uint64_t sub_1000D5AA4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000D5C00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(void *)(a1 + 32))
  {
    id v7 = [v5 objectForKeyedSubscript:];
    id v8 = [v7 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
    BOOL v9 = [v8 value];
  }
  else
  {
    BOOL v9 = 0;
  }
  id v10 = [v5 activeDeviceID];
  if (v10)
  {
    id v11 = [v5 objectForKeyedSubscript:v10];
    char v12 = [v11 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
    unsigned int v13 = [v12 value];
  }
  else
  {
    unsigned int v13 = 0;
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v14 = [v5 objectForKeyedSubscript:];
    if ([v14 isPaired])
    {
      unint64_t v15 = [v5 objectForKeyedSubscript:*(void *)(a1 + 32)];
      char v16 = [v15 isArchived] ^ 1;
    }
    else
    {
      char v16 = 0;
    }
  }
  else
  {
    char v16 = 0;
  }
  uint64_t v17 = [*(id *)(*(void *)(a1 + 40) + 64) queue];
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_1000D5E4C;
  v23[3] = &unk_100169888;
  id v24 = *(id *)(a1 + 48);
  id v25 = v9;
  id v26 = v10;
  id v27 = v13;
  char v31 = v16;
  id v28 = *(id *)(a1 + 56);
  id v18 = *(id *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 40);
  id v29 = v18;
  uint64_t v30 = v19;
  id v20 = v13;
  id v21 = v10;
  id v22 = v9;
  dispatch_async(v17, v23);
}

void sub_1000D5E4C(uint64_t a1)
{
  id v2 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 40)];
  uint64_t v3 = [*(id *)(a1 + 32) operands];
  [v3 setObject:v2 forKeyedSubscript:@"switchToIDSDeviceUUID"];

  char v4 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 48)];
  id v5 = [*(id *)(a1 + 32) operands];
  [v5 setObject:v4 forKeyedSubscript:@"switchFromNRDeviceUUID"];

  id v6 = [[EPSagaOperandUUID alloc] initWithUUID:*(void *)(a1 + 56)];
  id v7 = [*(id *)(a1 + 32) operands];
  [v7 setObject:v6 forKeyedSubscript:@"switchFromIDSDeviceUUID"];

  id v8 = [EPSagaOperandNumber alloc];
  BOOL v9 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 88)];
  id v10 = [(EPSagaOperandNumber *)v8 initWithNumber:v9];
  id v11 = [*(id *)(a1 + 32) operands];
  [v11 setObject:v10 forKeyedSubscript:@"isPaired"];

  char v12 = [*(id *)(a1 + 64) serviceFromClass:objc_opt_class()];
  unsigned int v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"shouldWaitForAssertion"];
  unsigned __int8 v14 = [v13 BOOLValue];

  unint64_t v15 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"destinationIsAltAccount"];
  id v16 = [v15 BOOLValue];

  if (!*(void *)(a1 + 72))
  {
    if (v14) {
      goto LABEL_9;
    }
    uint64_t v24 = [v12 pairingID];
    if (!v24) {
      goto LABEL_9;
    }
    id v25 = (void *)v24;
    id v26 = [v12 pairingID];
    id v27 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8FC052B6-229F-49A7-BC78-3F56A5149994"];
    unsigned int v28 = [v26 isEqual:v27];

    if (v28)
    {
LABEL_9:
      id v29 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"8FC052B6-229F-49A7-BC78-3F56A5149994"];
      uint64_t v30 = [v12 assertionWithPairingID:v29 isAltAccount:0 delegate:*(void *)(a1 + 80)];
      uint64_t v31 = *(void *)(a1 + 80);
      id v32 = *(void **)(v31 + 72);
      *(void *)(v31 + 72) = v30;

LABEL_13:
      goto LABEL_14;
    }
    id v33 = [*(id *)(a1 + 32) errors];
    v40[0] = @"conflictuuid";
    uint64_t v34 = [v12 pairingID];
    __int16 v35 = [v34 UUIDString];
    v40[1] = NSLocalizedDescriptionKey;
    v41[0] = v35;
    v41[1] = @"Conflicting assertion held";
    id v36 = v41;
    uint64_t v37 = v40;
LABEL_12:
    id v38 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v37 count:2];
    uint64_t v39 = +[NSError errorWithDomain:@"com.apple.NanoRegistry.EPSagaTransactionActiveWatchAssertion" code:0 userInfo:v38];
    [v33 addObject:v39];

    id v29 = [*(id *)(a1 + 80) delegate];
    [v29 transactionDidComplete:*(void *)(a1 + 80)];
    goto LABEL_13;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v17 = [v12 pairingID];
    if (v17)
    {
      id v18 = (void *)v17;
      uint64_t v19 = [v12 pairingID];
      unsigned int v20 = [v19 isEqual:*(void *)(a1 + 72)];

      if (!v20)
      {
        id v33 = [*(id *)(a1 + 32) errors];
        v42[0] = @"conflictuuid";
        uint64_t v34 = [v12 pairingID];
        __int16 v35 = [v34 UUIDString];
        v42[1] = NSLocalizedDescriptionKey;
        v43[0] = v35;
        v43[1] = @"Conflicting assertion held";
        id v36 = v43;
        uint64_t v37 = v42;
        goto LABEL_12;
      }
    }
  }
  uint64_t v21 = [v12 assertionWithPairingID:*(void *)(a1 + 72) isAltAccount:v16 delegate:*(void *)(a1 + 80)];
  uint64_t v22 = *(void *)(a1 + 80);
  id v23 = *(void **)(v22 + 72);
  *(void *)(v22 + 72) = v21;

LABEL_14:
}

void sub_1000D659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000D65C0(uint64_t a1, void *a2)
{
  id v3 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 isAltAccount];
}

id sub_1000D6620(uint64_t a1)
{
  return [*(id *)(a1 + 32) removeExternalAssertionsForPairingID:*(void *)(a1 + 40)];
}

uint64_t sub_1000D730C(uint64_t result, int a2)
{
  if (result)
  {
    *(unsigned char *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_1000D7488(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      char v14 = 0;
      unsigned int v15 = 0;
      uint64_t v16 = 0;
      *(unsigned char *)(a1 + 20) |= 1u;
      while (1)
      {
        unint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 == -1 || v17 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          goto LABEL_30;
        }
        v14 += 7;
        BOOL v9 = v15++ >= 9;
        if (v9)
        {
          LODWORD(v16) = 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v16) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + 16) = v16;
    }
    else if ((v6 >> 3) == 1)
    {
      uint64_t v12 = PBReaderReadData();
      unsigned int v13 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v12;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000D7754(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

id sub_1000D7C10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;

  char v4 = *(void **)(a1 + 32);

  return [v4 update];
}

uint64_t sub_1000D8010(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = +[NSMutableArray array];
  unsigned int v5 = v4;
  uint64_t v43 = a1;
  if (*(void *)(a1 + 32))
  {
    [v4 addObject:];
  }
  else
  {
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id v6 = v3;
    id v7 = [v6 countByEnumeratingWithState:&v52 objects:v63 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v53;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v53 != v9) {
            objc_enumerationMutation(v6);
          }
          [v5 addObject:*(void *)(*((void *)&v52 + 1) + 8 * i)];
        }
        id v8 = [v6 countByEnumeratingWithState:&v52 objects:v63 count:16];
      }
      while (v8);
    }

    a1 = v43;
  }
  uint64_t v44 = +[NSMutableDictionary dictionary];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = v5;
  id v47 = [obj countByEnumeratingWithState:&v48 objects:v62 count:16];
  if (v47)
  {
    uint64_t v46 = *(void *)v49;
    uint64_t v12 = NRDevicePropertyMigrationConsent;
    uint64_t v41 = NRDevicePropertyMigrationConsentDate;
    *(void *)&long long v11 = 138412546;
    long long v40 = v11;
    id v42 = v3;
    do
    {
      for (j = 0; j != v47; j = (char *)j + 1)
      {
        if (*(void *)v49 != v46) {
          objc_enumerationMutation(obj);
        }
        char v14 = *(void **)(*((void *)&v48 + 1) + 8 * (void)j);
        unsigned int v15 = nr_daemon_log();
        BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);

        if (v16)
        {
          unint64_t v17 = nr_daemon_log();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(a1 + 56)) {
              CFStringRef v18 = @"YES";
            }
            else {
              CFStringRef v18 = @"NO";
            }
            uint64_t v19 = [v14 UUIDString:v40];
            *(_DWORD *)long long buf = v40;
            CFStringRef v59 = v18;
            __int16 v60 = 2112;
            long long v61 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "setMigrationConsent: Setting migration consent to %@ for device ID %@", buf, 0x16u);
          }
        }
        unsigned int v20 = [v3 objectForKeyedSubscript:v14, v40];
        uint64_t v21 = [v20 objectForKeyedSubscript:v12];
        uint64_t v22 = [v21 value];
        unsigned int v23 = [v22 BOOLValue];

        if (*(unsigned char *)(a1 + 56) || v23)
        {
          if (*(unsigned char *)(a1 + 56)) {
            id v24 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
          }
          else {
            id v24 = 0;
          }
          id v25 = objc_alloc((Class)NRDevicePropertyDiffType);
          if (v24) {
            uint64_t v26 = 1;
          }
          else {
            uint64_t v26 = 2;
          }
          id v27 = [v25 initWithDiff:v24 andChangeType:v26];
          id v28 = objc_alloc((Class)NRDevicePropertyDiff);
          id v29 = +[NSDate date];
          id v30 = [v28 initWithValue:v29];

          id v31 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v30 andChangeType:1];
          id v32 = objc_alloc((Class)NRDeviceDiff);
          v56[0] = v12;
          v56[1] = v41;
          v57[0] = v27;
          v57[1] = v31;
          id v33 = +[NSDictionary dictionaryWithObjects:v57 forKeys:v56 count:2];
          id v34 = [v32 initWithDiffPropertyDiffs:v33];

          id v35 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v34 andChangeType:1];
          [v44 setObject:v35 forKeyedSubscript:v14];

          id v3 = v42;
          a1 = v43;
        }
      }
      id v47 = [obj countByEnumeratingWithState:&v48 objects:v62 count:16];
    }
    while (v47);
  }

  id v36 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v44];
  id v37 = [v3 applyDiff:v36];
  if (*(void *)(a1 + 48))
  {
    id v38 = [*(id *)(a1 + 40) queue];
    dispatch_async(v38, *(dispatch_block_t *)(a1 + 48));
  }
  return 0;
}

void sub_1000D8B08(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      unsigned int v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5) + 16))(*(void *)(*((void *)&v6 + 1) + 8 * (void)v5));
        unsigned int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

id sub_1000D9144(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) finishMigrationWithRoutingSlip:a2];
}

void sub_1000D9218(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  id v6 = [v3 createMigrationReporterWithPairingID:v4];
  [v6 migrationWillBeginOnCompanionForPairingID:*(void *)(a1 + 40) withDeviceHistory:v5];
}

void sub_1000D941C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  +[NRCoreAnalyticsReporter reportMigrationWithDeviceHistory:v4 andError:v3];
  [*(id *)(a1 + 40) finishMigrationMetricWithDeviceHistory:v4 didFail:[*(id *)(a1 + 48) didFail] ^ 1 error:*(void *)(a1 + 32)];
}

void sub_1000D97A0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [a2 activeDeviceID];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000D9964(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    id v8 = v7;
    long long v9 = 0;
    uint64_t v10 = *(void *)v21;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v5);
        }
        uint64_t v12 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        unsigned int v13 = [v5 objectForKeyedSubscript:v12];
        if ([v13 migratable] && (objc_msgSend(v13, "isAltAccount") & 1) == 0)
        {
          if (!v9)
          {
            long long v9 = +[NSMutableArray array];
          }
          [v9 addObject:v12];
        }
      }
      id v8 = [v5 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }
  else
  {
    long long v9 = 0;
  }
  char v14 = [*(id *)(a1 + 32) queue];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  _DWORD v17[2] = sub_1000D9B58;
  v17[3] = &unk_100165A70;
  id v15 = *(id *)(a1 + 40);
  id v18 = v9;
  id v19 = v15;
  id v16 = v9;
  dispatch_async(v14, v17);
}

uint64_t sub_1000D9B58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1000D9E3C(uint64_t a1)
{
  IOPMAssertionID AssertionID = 0;
  v14[0] = @"AssertName";
  uint64_t v2 = +[NSString stringWithUTF8String:a1];
  v15[0] = v2;
  v15[1] = @"com.apple.NanoRegistry.timer";
  v14[1] = @"PlugInBundleID";
  v14[2] = @"AssertType";
  v14[3] = @"AssertLevel";
  void v15[2] = @"PreventUserIdleSystemSleep";
  v15[3] = &off_1001774B0;
  CFDictionaryRef v3 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];

  IOReturn v4 = IOPMAssertionCreateWithProperties(v3, &AssertionID);
  id v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v4)
  {
    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)unsigned int v13 = a1;
        *(_WORD *)&uint8_t v13[8] = 1024;
        *(_DWORD *)&v13[10] = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to take power assertion for (%s) with error: (%d)", buf, 0x12u);
      }
    }
    IOPMAssertionID AssertionID = 0;
  }
  else if (v6)
  {
    id v8 = nr_daemon_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)unsigned int v13 = AssertionID;
      *(_WORD *)&void v13[4] = 2080;
      *(void *)&v13[6] = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Taking power assertion (%u) for (%s)", buf, 0x12u);
    }
  }
  uint64_t v9 = AssertionID;

  return v9;
}

void sub_1000DA034(IOPMAssertionID a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    IOReturn v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Releasing power assertion: (%u)", (uint8_t *)v5, 8u);
    }
  }
  if (a1) {
    IOPMAssertionRelease(a1);
  }
}

void sub_1000DA2B8(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___NRSystemVersionRequest];
  uint64_t v2 = qword_1001A1490;
  qword_1001A1490 = v1;

  _objc_release_x1(v1, v2);
}

id sub_1000DA494(uint64_t a1)
{
  return [*(id *)(a1 + 32) timeout];
}

void sub_1000DA528(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000DA8CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000DA920(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

uint64_t sub_1000DAA14(__CFReadStream *a1, __CFWriteStream *a2, uint64_t a3)
{
  BOOL v6 = (UInt8 *)malloc_type_malloc(0x4000uLL, 0x352CD7B0uLL);
  uint64_t v7 = ccaes_ctr_crypt_mode();
  uint64_t v8 = __chkstk_darwin();
  uint64_t v10 = (char *)&v18 - v9;
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, void *))(v8 + 24))(v8, (char *)&v18 - v9, 32, a3, &unk_10011AB88);
  CFIndex v11 = CFReadStreamRead(a1, v6, 0x4000);
  if (v11 < 1)
  {
LABEL_8:
    uint64_t v16 = 0;
    if (!v6) {
      return v16;
    }
  }
  else
  {
    uint64_t v12 = v11;
LABEL_3:
    (*(void (**)(char *, uint64_t, UInt8 *, UInt8 *))(v7 + 40))(v10, v12, v6, v6);
    unsigned int v13 = v6;
    while (1)
    {
      CFIndex v14 = CFWriteStreamWrite(a2, v13, v12);
      if (!v14) {
        break;
      }
      v13 += v14;
      BOOL v15 = v12 <= v14;
      v12 -= v14;
      if (v15)
      {
        uint64_t v12 = CFReadStreamRead(a1, v6, 0x4000);
        if (v12 > 0) {
          goto LABEL_3;
        }
        goto LABEL_8;
      }
    }
    uint64_t v16 = 4294967260;
    if (!v6) {
      return v16;
    }
  }
  free(v6);
  return v16;
}

id sub_1000DACF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000DAF38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 72))
  {
    id v3 = [[*(id *)(v1 + 56) newUnlockAssertionWithDelegate:];
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    uint64_t v1 = *(void *)(a1 + 32);
  }

  return [(id)v1 update];
}

id sub_1000DCE50(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

id sub_1000DCFF0(uint64_t a1)
{
  id v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPUnlockAssertionManager: MobileKeyBagLockStatusNotification received", v6, 2u);
    }
  }
  return [*(id *)(a1 + 32) update];
}

uint64_t sub_1000DE75C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 24;
        goto LABEL_22;
      case 2u:
        uint64_t v12 = PBReaderReadData();
        uint64_t v13 = 8;
LABEL_22:
        BOOL v15 = *(void **)(a1 + v13);
        *(void *)(a1 + v13) = v12;

        continue;
      case 3u:
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        *(unsigned char *)(a1 + 36) |= 1u;
        while (2)
        {
          unint64_t v19 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v19 == -1 || v19 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v20 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 1;
            v18 |= (unint64_t)(v20 & 0x7F) << v16;
            if (v20 < 0)
            {
              v16 += 7;
              BOOL v9 = v17++ >= 9;
              if (v9)
              {
                LODWORD(v1_Block_object_dispose(&STACK[0x690], 8) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v1_Block_object_dispose(&STACK[0x690], 8) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 16) = v18;
        continue;
      case 4u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        break;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      unint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v24 == -1 || v24 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v25 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
      v23 |= (unint64_t)(v25 & 0x7F) << v21;
      if ((v25 & 0x80) == 0) {
        goto LABEL_42;
      }
      v21 += 7;
      BOOL v9 = v22++ >= 9;
      if (v9)
      {
        uint64_t v23 = 0;
        goto LABEL_44;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v23 = 0;
    }
LABEL_44:
    *(unsigned char *)(a1 + 32) = v23 != 0;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000DEB60(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_1000DEB78(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

uint64_t sub_1000DEE14(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_1000DEE28(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_1000DEE3C(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 16);
  }
  return result;
}

BOOL sub_1000DEE50(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 32) != 0;
  }
  return result;
}

id sub_1000DF0B0()
{
  uint64_t v4 = 0;
  unsigned int v5 = &v4;
  uint64_t v6 = 0x2050000000;
  id v0 = (void *)qword_1001A14A0;
  uint64_t v7 = qword_1001A14A0;
  if (!qword_1001A14A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000DF610;
    v3[3] = &unk_1001657F0;
    void v3[4] = &v4;
    sub_1000DF610((uint64_t)v3);
    id v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1000DF17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DF194(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    unsigned int v5 = nr_daemon_log();
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      uint64_t v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000FC684(a1, v4);
      }
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    int v10 = *(void **)(v8 + 8);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1000DF300;
    v13[3] = &unk_100169988;
    void v13[4] = v8;
    CFIndex v14 = *(id *)(a1 + 48);
    [v10 createBackupForPairingID:v9 completionHandler:v13];
    CFIndex v11 = v14;
  }
  else
  {
    CFIndex v11 = [*(id *)(a1 + 48) queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000DF464;
    block[3] = &unk_1001655F8;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v11, block);
  }
}

void sub_1000DF300(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1000FC730(a1, v6);
      }
    }
  }
  int v10 = [*(id *)(a1 + 40) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DF410;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v10, block);
}

void sub_1000DF410(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000DF464(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000DF544(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

Class sub_1000DF610(uint64_t a1)
{
  v4[0] = 0;
  if (!qword_1001A14A8)
  {
    v4[1] = _NSConcreteStackBlock;
    v4[2] = 3221225472;
    v4[3] = sub_1000DF754;
    void v4[4] = &unk_100165618;
    void v4[5] = v4;
    long long v5 = off_1001699D0;
    uint64_t v6 = 0;
    qword_1001A14A8 = _sl_dlopen();
    id v2 = (void *)v4[0];
    if (!qword_1001A14A8)
    {
      abort_report_np();
      goto LABEL_7;
    }
    if (v4[0]) {
      goto LABEL_8;
    }
  }
  while (1)
  {
    Class result = objc_getClass("NBManager");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      break;
    }
LABEL_7:
    id v2 = (void *)sub_1000FC7DC();
LABEL_8:
    free(v2);
  }
  qword_1001A14A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000DF754()
{
  uint64_t result = _sl_dlopen();
  qword_1001A14A8 = result;
  return result;
}

void sub_1000DF9F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud migration sent", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1000DFAB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    uint64_t v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud migration response %@", buf, 0xCu);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v7)
    {
      BOOL v8 = [NRPBMigrationResponse alloc];
      uint64_t v9 = [v3 protobuf];
      int v10 = [v9 data];
      CFIndex v11 = [(NRPBMigrationResponse *)v8 initWithData:v10];

      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = sub_1000E9518((uint64_t)v11);
      (*(void (**)(uint64_t, void, uint64_t))(v12 + 16))(v12, 0, v13);
LABEL_10:
    }
  }
  else if (v7)
  {
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    CFStringRef v16 = @"IDS response failure";
    CFIndex v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    CFIndex v14 = +[NSError errorWithDomain:@"com.apple.nanoregistry.NRRemoteObjectCloud" code:1 userInfo:v11];
    (*(void (**)(uint64_t, void *, void))(v7 + 16))(v7, v14, 0);

    goto LABEL_10;
  }
}

void sub_1000DFDC0(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  sub_100062010(a1[6]);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v1 remoteObject:v2 receivedMigratedAwayWithAdvertisedName:v3];
}

void sub_1000DFF6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  sub_1000B1ECC(*(void *)(a1 + 48));
  id v6 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = +[NRTermsEvent eventWithProtobuf:v6];
  BOOL v5 = [*(id *)(a1 + 56) idsBTUUID];
  [v2 remoteObject:v3 receivedAddTermsEvent:v4 fromIDSBTUUID:v5 responseBlock:&stru_1001699F0];
}

void sub_1000E0014(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = nr_daemon_log();
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v4)
    {
      BOOL v5 = nr_daemon_log();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 138412290;
        uint64_t v7 = v2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Got Error trying to add event: %@", (uint8_t *)&v6, 0xCu);
      }
    }
  }
}

void sub_1000E023C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NRPairingCompatibilityVersionInfo systemVersions];
  [v2 sendSystemVersionsResponseWithSystemVersions:v3 forRequest:*(void *)(a1 + 40)];
}

void sub_1000E0600(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    int v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud terms sent", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1000E0884(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = nr_daemon_log();
  BOOL v4 = v3;
  if (v2)
  {
    BOOL v5 = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);

    if (v5)
    {
      int v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1000FC804((uint64_t)v2, v6);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v7 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);

    if (v7)
    {
      int v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion message sent", v8, 2u);
      }
      goto LABEL_8;
    }
  }
}

void sub_1000E0A98(id a1, NSError *a2)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    BOOL v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion response sent", v5, 2u);
    }
  }
}

void sub_1000E0C64(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = nr_daemon_log();
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    int v6 = nr_daemon_log();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cloud SystemVersion Request sent", v8, 2u);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1000E0D1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = [NRPBSystemVersionResponse alloc];
      int v6 = [v3 protobuf];
      uint64_t v7 = [v6 data];
      BOOL v8 = [(NRPBSystemVersionResponse *)v5 initWithData:v7];

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else if (v4)
  {
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    CFStringRef v12 = @"IDS response failure";
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    int v10 = +[NSError errorWithDomain:@"com.apple.nanoregistry.NRRemoteObjectCloud" code:1 userInfo:v9];
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v10, 0);
  }
}

void sub_1000E10AC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v13 = 60;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionTearDownTinkerHealthSyncZones: Timeout of %d triggered", buf, 8u);
    }
  }
  dispatch_source_cancel(*(dispatch_source_t *)(*(void *)(a1 + 32) + 8));
  BOOL v5 = [*(id *)(a1 + 40) errors];
  NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
  CFStringRef v11 = @"Tearning down HealthKit sync zones timed out";
  int v6 = +[NSDictionary dictionaryWithObjects:&v11 forKeys:&v10 count:1];
  uint64_t v7 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionUnpairHealthKitSyncError" code:0 userInfo:v6];
  [v5 addObject:v7];

  BOOL v8 = *(unsigned char **)(a1 + 32);
  if (!v8[16])
  {
    uint64_t v9 = [v8 delegate];
    [v9 transactionDidComplete:*(void *)(a1 + 32)];

    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  }
}

void sub_1000E1248(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  BOOL v5 = nr_daemon_log();
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);

  if (v6)
  {
    uint64_t v7 = nr_daemon_log();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionTearDownTinkerHealthSyncZones: tearDownHealthSharing finished with error: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(void *)(v8 + 8))
  {
    dispatch_source_cancel(*(dispatch_source_t *)(v8 + 8));
    uint64_t v9 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v10 = *(void **)(v9 + 8);
    *(void *)(v9 + _Block_object_dispose(&STACK[0x690], 8) = 0;

    uint64_t v8 = *(void *)(a1 + 32);
  }
  if (!*(unsigned char *)(v8 + 16))
  {
    CFStringRef v11 = [(id)v8 delegate];
    [v11 transactionDidComplete:*(void *)(a1 + 32)];

    *(unsigned char *)(*(void *)(a1 + 32) + 16) = 1;
  }
}

id sub_1000E16FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) applyDiff:*(void *)(a1 + 40)];
}

void sub_1000E17D4(id a1, BOOL a2)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      BOOL v6 = "-[NRPairingDaemon(PairingSessionID) sendPairingIdToActiveDevice:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: Sent pairing session id to active device.", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1000E19D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000E1AB4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000E1C00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000E1E08(uint64_t a1, char a2)
{
  id v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E1EBC;
  block[3] = &unk_100167BE0;
  char v10 = a2;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v8 = v5;
  uint64_t v9 = v6;
  dispatch_async(v4, block);
}

void sub_1000E1EBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    id v2 = [*(id *)(a1 + 32) errors];
    NSErrorUserInfoKey v6 = NSLocalizedDescriptionKey;
    CFStringRef v7 = @"Message send failed";
    BOOL v3 = +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1];
    id v4 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionNotifyCompanionOfCompletionErrorDomain" code:0 userInfo:v3];
    [v2 addObject:v4];

    [*(id *)(a1 + 32) persist];
  }
  id v5 = [*(id *)(a1 + 40) delegate];
  [v5 transactionDidComplete:*(void *)(a1 + 40)];
}

void sub_1000E2058(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

id sub_1000E20EC()
{
  if (qword_1001A14B8 != -1) {
    dispatch_once(&qword_1001A14B8, &stru_100169C88);
  }
  id v0 = (void *)qword_1001A14B0;

  return v0;
}

void sub_1000E2140(id a1)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  id v1 = +[NSArray arrayWithObjects:&v4 count:7];
  uint64_t v2 = +[NSSet setWithArray:](NSSet, "setWithArray:", v1, v4, v5, v6, v7, v8, v9);
  BOOL v3 = (void *)qword_1001A14B0;
  qword_1001A14B0 = v2;
}

void sub_1000E30AC(uint64_t a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    uint64_t v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = [*(id *)(a1 + 32) UUIDString];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling IDSLocalPairingForgetPairedDevice %@", buf, 0xCu);
    }
  }
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v6 = [*(id *)(a1 + 40) queue];
  IDSLocalPairingForgetPairedDevice();
}

void sub_1000E3224(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = nr_daemon_log();
  uint64_t v5 = v4;
  if (v3)
  {
    BOOL v6 = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);

    if (v6)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1000FC87C(a1, (uint64_t)v3, v7);
      }
LABEL_8:
    }
  }
  else
  {
    BOOL v8 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      id v7 = nr_daemon_log();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = [*(id *)(a1 + 32) UUIDString];
        *(_DWORD *)long long buf = 138412290;
        id v13 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "IDSLocalPairingForgetPairedDevice %@ completed", buf, 0xCu);
      }
      goto LABEL_8;
    }
  }
  uint64_t v10 = [*(id *)(a1 + 40) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E33BC;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 48);
  dispatch_async(v10, block);
}

void sub_1000E33BC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transactionDidComplete:*(void *)(a1 + 32)];
}

void sub_1000E37F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) globalTimer];
  [v2 invalidate];

  id v3 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"timeout:" selector:0 userInfo:0 repeats:*(double *)(a1 + 40)];
  [*(id *)(a1 + 32) setGlobalTimer:v3];
}

__CFString *sub_1000E39C0()
{
  id v0 = (__CFString *)CFPreferencesCopyAppValue(@"IDSAdvertiseMigrationName", @"com.apple.identityservicesd");
  if (!v0) {
    id v0 = @"migration";
  }

  return v0;
}

id sub_1000E3CEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) globalTimer];
  [v2 invalidate];

  [*(id *)(a1 + 32) setGlobalTimer:0];
  id v3 = [*(id *)(a1 + 32) pairingTimer];
  [v3 invalidate];

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 setPairingTimer:0];
}

void sub_1000E3E48(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 12) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 11) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 10) = 1;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) serviceFromClass:objc_opt_class()];
  [v2 addConnectivityObserver:*(void *)(a1 + 32)];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 40) serviceFromClass:objc_opt_class()];

  [v4 addConnectivityObserver:*(void *)(a1 + 32)];
  [*(id *)(a1 + 32) checkIfIDSPaired];
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(void))(v3 + 16))();
  }
}

void sub_1000E42C0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) routingSlipEntry];
  uint64_t v3 = [v2 objectForKeyedSubscript:@"newlyPairedCoreBluetoothID"];

  id v4 = [*(id *)(a1 + 32) routingSlipEntry];
  uint64_t v5 = [v4 objectForKeyedSubscript:@"iAmACompanionDevice"];

  unsigned int v6 = [v5 BOOLValue];
  id v7 = *(void **)(a1 + 32);
  if (v3)
  {
    BOOL v8 = [v7 routingSlipEntry];
    uint64_t v9 = [v8 objectForKeyedSubscript:@"newlyPairedCoreBluetoothID"];

    [*(id *)(a1 + 32) connectUp:v9];
    goto LABEL_3;
  }
  if (v7[19])
  {
    if (v6)
    {
LABEL_6:
      if ([*(id *)(*(void *)(a1 + 32) + 152) availability] != (id)1) {
        goto LABEL_3;
      }
      uint64_t v10 = [*(id *)(a1 + 32) discoverer];
      if (v10)
      {

        goto LABEL_3;
      }
      long long v53 = [*(id *)(a1 + 32) readers];
      if ([v53 count])
      {
LABEL_33:

        goto LABEL_3;
      }
      id v57 = [*(id *)(a1 + 32) pairers];
      id v58 = [v57 count];

      if (!v58)
      {
        CFStringRef v59 = [*(id *)(a1 + 32) routingSlipEntry];
        __int16 v60 = [v59 objectForKeyedSubscript:@"discoverableCoreBluetoothID"];

        id v73 = v5;
        if (v60)
        {
          id v86 = v60;
          long long v61 = +[NSArray arrayWithObjects:&v86 count:1];
          long long v62 = [*(id *)(a1 + 32) factory];
          [v62 setDiscovererDeviceUUIDs:v61];
        }
        else
        {
          long long v61 = [*(id *)(a1 + 32) factory];
          [v61 setDiscovererDeviceUUIDs:0];
        }

        long long v63 = [*(id *)(a1 + 32) factory];
        [v63 setDiscovererShouldScanForProximity:0];

        long long v64 = [*(id *)(a1 + 32) factory];
        id v65 = [v64 newDiscovererWithDelegate:*(void *)(a1 + 32)];
        [*(id *)(a1 + 32) setDiscoverer:v65];

        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        uint64_t v66 = a1;
        id obj = [*(id *)(*(void *)(a1 + 32) + 64) displayableDevices];
        id v67 = [obj countByEnumeratingWithState:&v77 objects:v85 count:16];
        if (v67)
        {
          id v68 = v67;
          uint64_t v69 = *(void *)v78;
          do
          {
            for (i = 0; i != v68; i = (char *)i + 1)
            {
              if (*(void *)v78 != v69) {
                objc_enumerationMutation(obj);
              }
              uint64_t v71 = *(void *)(*((void *)&v77 + 1) + 8 * i);
              id v72 = +[EPFactory queue];
              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472;
              v76[2] = sub_1000E4B34;
              v76[3] = &unk_100165530;
              v76[4] = *(void *)(v66 + 32);
              v76[5] = v71;
              dispatch_async(v72, v76);
            }
            id v68 = [obj countByEnumeratingWithState:&v77 objects:v85 count:16];
          }
          while (v68);
        }

        uint64_t v5 = v73;
      }
      goto LABEL_3;
    }
  }
  else
  {
    CFStringRef v11 = [v7 serviceRegistry];
    int v12 = [v11 serviceFromClass:objc_opt_class()];

    id v13 = [v12 newResourceWithDelegate:*(void *)(a1 + 32)];
    uint64_t v14 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v15 = *(void **)(v14 + 152);
    *(void *)(v14 + 152) = v13;

    if (v6) {
      goto LABEL_6;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000E4B44;
  block[3] = &unk_1001655F8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
  if ([*(id *)(*(void *)(a1 + 32) + 152) availability] == (id)1)
  {
    CFStringRef v16 = sub_1000A3BC0();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

    if (v17)
    {
      id v18 = sub_1000A3BC0();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v19 = [*(id *)(a1 + 32) startedPairing];
        *(_DWORD *)long long buf = 67109120;
        unsigned int v84 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "EPSagaTransactionPairing: Set not available to pair to %{BOOL}d", buf, 8u);
      }
    }
    id v20 = [*(id *)(a1 + 32) startedPairing];
    char v21 = [*(id *)(a1 + 32) factory];
    [v21 setAdvertiserNotAvailableToPair:v20];

    unsigned int v22 = [*(id *)(a1 + 32) factory];
    [v22 setDontAdvertiseWithServiceUUID:1];

    uint64_t v23 = [*(id *)(a1 + 32) advertiser];

    if (!v23)
    {
      unint64_t v24 = [*(id *)(a1 + 32) advertisingName];
      char v25 = [*(id *)(a1 + 32) factory];
      [v25 setAdvertisingName:v24];

      uint64_t v26 = [*(id *)(a1 + 32) factory];
      [v26 setAdvertisingRate:1];

      id v27 = [*(id *)(a1 + 32) factory];
      id v28 = [v27 newAdvertiserWithDelegate:*(void *)(a1 + 32)];
      [*(id *)(a1 + 32) setAdvertiser:v28];
    }
    id v29 = [*(id *)(a1 + 32) oobKeyGenerator];

    if (!v29)
    {
      id v30 = +[EPFactory sharedFactory];
      id v31 = [v30 newKeyGeneratorWithDelegate:*(void *)(a1 + 32)];
      [*(id *)(a1 + 32) setOobKeyGenerator:v31];
    }
    id v32 = [*(id *)(a1 + 32) oobKeyGenerator];
    id v33 = [v32 availability];

    if (v33 == (id)1)
    {
      id v34 = [*(id *)(a1 + 32) oobKeyStash];
      id v35 = [v34 oobKey];

      if (!v35)
      {
        id v36 = [*(id *)(a1 + 32) oobKeyGenerator];
        id v37 = [v36 key];
        id v38 = [*(id *)(a1 + 32) oobKeyStash];
        [v38 setOobKey:v37];
      }
      uint64_t v39 = [*(id *)(a1 + 32) oobKeyStash];
      long long v40 = [v39 oobKey];

      if (v40)
      {
        uint64_t v41 = [*(id *)(a1 + 32) oobKeyStash];
        id v42 = [v41 oobKey];
        uint64_t v43 = [*(id *)(a1 + 32) oobKeyGenerator];
        uint64_t v44 = [v43 key];
        unsigned __int8 v45 = [v42 isEqual:v44];

        if ((v45 & 1) == 0)
        {
          uint64_t v46 = [*(id *)(a1 + 32) routingSlipEntry];
          id v47 = [v46 errors];
          NSErrorUserInfoKey v81 = NSLocalizedDescriptionKey;
          CFStringRef v82 = @"OOB key changed";
          long long v48 = +[NSDictionary dictionaryWithObjects:&v82 forKeys:&v81 count:1];
          long long v49 = +[NSError errorWithDomain:@"com.apple.nanoregistry.saga.EPSagaTransactionPairing" code:2 userInfo:v48];
          [v47 addObject:v49];

          long long v50 = [*(id *)(a1 + 32) routingSlipEntry];
          [v50 persist];

          [*(id *)(a1 + 32) setState:3];
        }
        uint64_t v51 = *(void *)(a1 + 32);
        if (!*(unsigned char *)(v51 + 8))
        {
          *(unsigned char *)(v51 + _Block_object_dispose(&STACK[0x690], 8) = 1;
          long long v52 = [*(id *)(a1 + 32) serviceRegistry];
          long long v53 = [v52 serviceFromProtocol:&OBJC_PROTOCOL___EPSagaTransactionPairingIsReadyToPair];

          if (v53)
          {
            long long v54 = sub_1000A3CF0();
            BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);

            if (v55)
            {
              __int16 v56 = sub_1000A3CF0();
              if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Ready to pair, calling service delegate", buf, 2u);
              }
            }
            [v53 pairingTransactionIsReadyToPair:*(void *)(a1 + 32)];
          }
          goto LABEL_33;
        }
      }
    }
  }
LABEL_3:
}

id sub_1000E4B34(uint64_t a1)
{
  return [*(id *)(a1 + 32) discoverer:*(void *)(*(void *)(a1 + 32) + 64) deviceDidBecomeDisplayable:*(void *)(a1 + 40)];
}

uint64_t sub_1000E4B44(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 128))
  {
    uint64_t v1 = result;
    uint64_t v2 = +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", 31.0);
    uint64_t v3 = *(void *)(v1 + 32);
    uint64_t v4 = *(void *)(v3 + 128);
    *(void *)(v3 + 12_Block_object_dispose(&STACK[0x690], 8) = v2;
    return _objc_release_x1(v2, v4);
  }
  return result;
}

void sub_1000E5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E515C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pairingTimer];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;
}

void sub_1000E5658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E567C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) globalTimer];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;
}

void sub_1000E5DD8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000E5DFC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) globalTimer];
  [v2 invalidate];

  id v3 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"timeout:" selector:0 userInfo:0 repeats:60.0];
  [*(id *)(a1 + 32) setGlobalTimer:v3];
}

void sub_1000E5E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) state] == (id)1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    if (v3)
    {
      uint64_t v5 = sub_1000A3CF0();
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);

      if (v6)
      {
        id v7 = sub_1000A3CF0();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_1000FCA00((uint64_t)v3, v7);
        }
      }
      [WeakRetained failWithError:v3];
    }
    else
    {
      BOOL v8 = sub_1000DEE14(*(void *)(a1 + 48));
      [*(id *)(a1 + 40) setOobKey:v8];

      uint64_t v9 = [*(id *)(a1 + 40) device];
      [v9 setEnableOOBPairing:1];

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000E6030;
      block[3] = &unk_1001655F8;
      id v10 = WeakRetained;
      id v14 = v10;
      dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
      [v10 update];
      CFStringRef v11 = [*(id *)(a1 + 40) device];
      id v12 = [v11 newPairerWithDelegate:*(void *)(a1 + 32)];

      [*(id *)(a1 + 40) setPairer:v12];
    }
  }
}

void sub_1000E6030(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pairingTimer];
  [v2 invalidate];

  id v3 = +[NSTimer scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:"migrationBTPairingTimeout:" selector:0 userInfo:0 repeats:31.0];
  [*(id *)(a1 + 32) setPairingTimer:v3];
}

void sub_1000E6824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000E6858(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pairingTimer];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v2 != 0;
}

id sub_1000E6B78(uint64_t a1)
{
  return [*(id *)(a1 + 32) timedOut];
}

id sub_1000E6C20(uint64_t a1)
{
  return [*(id *)(a1 + 32) timedOut];
}

void sub_1000E7584(uint64_t a1)
{
  [*(id *)(a1 + 32) _clearOOBKey];
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(v2 + 24);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000E7654;
    v7[3] = &unk_1001655F8;
    void v7[4] = v2;
    uint64_t v4 = +[TimerFactory timerWithIdentifier:@"com.apple.nanoregistry.saga.service.oobstashexpiration" delay:1 gracePeriod:v3 waking:v7 handlerQueue:300.0 handlerBlock:0.0];
    uint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = *(void **)(v5 + 16);
    *(void *)(v5 + 16) = v4;

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), *(id *)(a1 + 40));
  }
}

id sub_1000E7654(uint64_t a1)
{
  return [*(id *)(a1 + 32) _oobKeyExpired];
}

id sub_1000E7720(uint64_t a1)
{
  return [*(id *)(a1 + 32) _clearOOBKey];
}

uint64_t sub_1000E7818(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000E7828(uint64_t a1)
{
}

void sub_1000E7830(uint64_t a1)
{
}

id sub_1000E8740(uint64_t a1, void *a2)
{
  return [a2 pairingAgent:*(void *)(*(void *)(a1 + 32) + 112) peerDidUnpair:*(void *)(a1 + 40)];
}

id sub_1000E88C0(uint64_t a1, void *a2)
{
  return [a2 pairingAgent:*(void *)(*(void *)(a1 + 32) + 112) peerDidCompletePairing:*(void *)(a1 + 40)];
}

id sub_1000E8A64(void *a1, void *a2)
{
  return [a2 pairingAgent:*(void *)(a1[4] + 112) peerDidFailToCompletePairing:a1[5] error:a1[6]];
}

void sub_1000E8DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_1000E8E2C(void *a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 ownerDelegate];
  if (objc_opt_respondsToSelector())
  {
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
    [v4 pairingAgent:*(void *)(a1[4] + 112) peerDidRequestPairing:a1[5] type:a1[8] passkey:a1[6]];
  }
}

void sub_1000E8EC0(uint64_t a1)
{
  uint64_t v2 = sub_1000A3BC0();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = sub_1000A3BC0();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Missed BT timer fired, resetting stashed variables", v6, 2u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained resetStashVaribles];
}

uint64_t sub_1000E91A4(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 12) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1000E9518(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 8);
  }
  return result;
}

void sub_1000E9794(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  BOOL v5 = sub_1000526C0(*(void *)(a1 + 56));
  id v6 = [*(id *)(a1 + 64) idsBTUUID];
  [v2 remoteObject:v3 receivedPropertyChanges:v4 isAllProperties:v5 fromIDSBTUUID:v6];
}

void sub_1000E9A7C(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)a1[6];
  id v4 = [v3 idsBTUUID];
  [v1 remoteObject:v2 receivedPropertyRequestWithRequestIdentifier:v3 fromIDSBTUUID:v4];
}

uint64_t sub_1000E9C78(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_1000E9C98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

void sub_1000EA6CC(id a1)
{
  id v4 = objc_alloc_init((Class)NSDateComponents);
  [v4 setDay:1];
  [v4 setMonth:9];
  [v4 setYear:2014];
  id v1 = [objc_alloc((Class)NSCalendar) initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
  uint64_t v2 = [v1 dateFromComponents:v4];
  uint64_t v3 = (void *)qword_1001A14C0;
  qword_1001A14C0 = v2;
}

void sub_1000EB33C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_1000EB358(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = *(void *)(result + 32);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
    }
  }
  return result;
}

uint64_t sub_1000EB378(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    unint64_t v15 = v3;
    BOOL v5 = [NRPBPropertyResponse alloc];
    id v6 = [v15 protobuf];
    unint64_t v7 = [v6 data];
    char v8 = [(NRPBPropertyResponse *)v5 initWithData:v7];

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v10 = sub_10009F980((uint64_t)v8);
    CFStringRef v11 = [WeakRetained _unpackProperties:v10];

    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v11);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (!v13) {
      goto LABEL_8;
    }
    unint64_t v15 = 0;
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void))(v13 + 16))(v13, 0);
  }
  id v4 = v15;
LABEL_8:

  return _objc_release_x1(v13, v4);
}

uint64_t sub_1000EB5D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 0);
  }
  return result;
}

uint64_t sub_1000EB7C4(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1000EB7DC(uint64_t a1, void *a2)
{
  id v13 = a2;
  if (v13)
  {
    id v3 = [NRPBAddTermsEventResponse alloc];
    id v4 = [v13 protobuf];
    BOOL v5 = [v4 data];
    id v6 = [(NRPBAddTermsEventResponse *)v3 initWithData:v5];

    unint64_t v7 = sub_10009CA54((uint64_t)v6);

    if (v7)
    {
      char v8 = sub_10009CA54((uint64_t)v6);
      BOOL v9 = sub_1000D55C8((uint64_t)v8);
      int v10 = sub_10009CA54((uint64_t)v6);
      CFStringRef v11 = +[NSError errorWithDomain:v9 code:sub_1000D55B4((uint64_t)v10) userInfo:0];

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id v6 = +[NSError errorWithDomain:@"com.apple.nanoregistry.remoteobject" code:0 userInfo:0];
    (*(void (**)(uint64_t, NRPBAddTermsEventResponse *))(v12 + 16))(v12, v6);
  }
}

uint64_t sub_1000EBACC(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_1000EBAEC(uint64_t a1, void *a2)
{
  id v15 = a2;
  if (v15)
  {
    id v3 = [NRPBCheckTermsEventResponse alloc];
    id v4 = [v15 protobuf];
    BOOL v5 = [v4 data];
    id v6 = [(NRPBCheckTermsEventResponse *)v3 initWithData:v5];

    unint64_t v7 = sub_10008D154((uint64_t)v6);

    if (v7)
    {
      char v8 = sub_10008D154((uint64_t)v6);
      BOOL v9 = sub_1000D55C8((uint64_t)v8);
      int v10 = sub_10008D154((uint64_t)v6);
      CFStringRef v11 = +[NSError errorWithDomain:v9 code:sub_1000D55B4((uint64_t)v10) userInfo:0];

      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 32);
      BOOL v14 = sub_10008D138((BOOL)v6);
      (*(void (**)(uint64_t, BOOL, void))(v13 + 16))(v13, v14, 0);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    id v6 = +[NSError errorWithDomain:@"com.apple.nanoregistry.remoteobject" code:0 userInfo:0];
    (*(void (**)(uint64_t, void, NRPBCheckTermsEventResponse *))(v12 + 16))(v12, 0, v6);
  }
}

void sub_1000EBDDC(uint64_t a1)
{
  uint64_t v2 = sub_1000B1ECC(*(void *)(a1 + 32));
  id v3 = +[NRTermsEvent eventWithProtobuf:v2];

  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  id v6 = [*(id *)(a1 + 56) idsBTUUID];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000EBED4;
  v8[3] = &unk_1001678E8;
  unint64_t v7 = *(void **)(a1 + 56);
  void v8[4] = *(void *)(a1 + 48);
  id v9 = v7;
  [v4 remoteObject:v5 receivedAddTermsEvent:v3 fromIDSBTUUID:v6 responseBlock:v8];
}

void sub_1000EBED4(uint64_t a1, void *a2)
{
  id v10 = a2;
  id v3 = objc_opt_new();
  if (v10)
  {
    id v4 = objc_opt_new();
    sub_10009C948((uint64_t)v3, v4);

    uint64_t v5 = [v10 domain];
    id v6 = sub_10009CA54((uint64_t)v3);
    sub_1000D53F4((uint64_t)v6, v5);

    id v7 = [v10 code];
    char v8 = sub_10009CA54((uint64_t)v3);
    sub_1000D4FA0((uint64_t)v8, (uint64_t)v7);
  }
  id v9 = +[NSString stringWithFormat:@"addTermsEvent response: (%@)", v3];
  [*(id *)(a1 + 32) sendResponse:v3 type:7 withRequest:*(void *)(a1 + 40) withTimeout:&off_100177580 withDescription:v9 onlyOneFor:0 priority:300 didSend:0];
}

void sub_1000EC150(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = sub_10002055C(*(void *)(a1 + 48));
  uint64_t v5 = +[NRTermsEvent eventWithProtobuf:v4];
  id v6 = [*(id *)(a1 + 56) idsBTUUID];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000EC24C;
  v7[3] = &unk_100167FC8;
  void v7[4] = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 56);
  [v2 remoteObject:v3 receivedCheckTermsEvent:v5 fromIDSBTUUID:v6 responseBlock:v7];
}

void sub_1000EC24C(uint64_t a1, char a2, void *a3)
{
  id v12 = a3;
  uint64_t v5 = objc_opt_new();
  sub_10008CAB4((uint64_t)v5, a2);
  if (v12)
  {
    id v6 = objc_opt_new();
    sub_10008CF70((uint64_t)v5, v6);

    id v7 = [v12 domain];
    id v8 = sub_10008D154((uint64_t)v5);
    sub_1000D53F4((uint64_t)v8, v7);

    id v9 = [v12 code];
    id v10 = sub_10008D154((uint64_t)v5);
    sub_1000D4FA0((uint64_t)v10, (uint64_t)v9);
  }
  CFStringRef v11 = +[NSString stringWithFormat:@"checkTermsEvent response: (%@)", v5];
  [*(id *)(a1 + 32) sendResponse:v5 type:8 withRequest:*(void *)(a1 + 40) withTimeout:&off_100177580 withDescription:v11 onlyOneFor:0 priority:300 didSend:0];
}

uint64_t sub_1000EC538(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v18 = v17 + 1;
          if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0) {
            goto LABEL_39;
          }
          v14 += 7;
          BOOL v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_41:
        uint64_t v30 = 28;
        goto LABEL_46;
      case 2u:
        unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&STACK[0x690], 8) = v22;
        continue;
      case 3u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v16 = 0;
        break;
      case 4u:
        uint64_t v28 = PBReaderReadData();
        id v29 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v28;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v16 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0) {
        goto LABEL_43;
      }
      v23 += 7;
      BOOL v10 = v24++ >= 9;
      if (v10)
      {
        LODWORD(v16) = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v16) = 0;
    }
LABEL_45:
    uint64_t v30 = 24;
LABEL_46:
    *(_DWORD *)(a1 + v30) = v16;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1000EC90C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

uint64_t sub_1000ECB58(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 28);
  }
  return result;
}

uint64_t sub_1000ECB6C(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 2_Block_object_dispose(&STACK[0x690], 8) = a2;
  }
  return result;
}

double sub_1000ECB80(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 8);
  }
  else {
    return 0.0;
  }
}

uint64_t sub_1000ECB9C(uint64_t result, double a2)
{
  if (result) {
    *(double *)(result + _Block_object_dispose(&STACK[0x690], 8) = a2;
  }
  return result;
}

uint64_t sub_1000ECBB0(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t sub_1000ECBC4(uint64_t result, int a2)
{
  if (result) {
    *(_DWORD *)(result + 24) = a2;
  }
  return result;
}

uint64_t sub_1000ECD00(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 56);
  return result;
}

uint64_t sub_1000ECD8C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 56) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000ECE48(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 59);
  return result;
}

uint64_t sub_1000ECED4(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 59) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000ECF90(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 58);
  return result;
}

uint64_t sub_1000ED01C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 5_Block_object_dispose(&STACK[0x690], 8) = *(unsigned char *)(result + 40);
  return result;
}

uint64_t sub_1000ED0D8(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 57);
  return result;
}

uint64_t sub_1000ED164(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 57) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1000ED2E4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      char v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: Registering for Keychain Sync status change notification.", (uint8_t *)buf, 2u);
      }
    }
    objc_initWeak(buf, (id)a1);
    unsigned int v5 = (const char *)OTTrustStatusChangeNotification;
    unint64_t v6 = *(NSObject **)(a1 + 32);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1000EDD2C;
    handler[3] = &unk_1001697E8;
    objc_copyWeak(&v8, buf);
    notify_register_dispatch(v5, (int *)(a1 + 40), v6, handler);
    objc_destroyWeak(&v8);
    objc_destroyWeak(buf);
  }
}

void sub_1000ED414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ED430(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000ED4C8;
  block[3] = &unk_1001655F8;
  char v4 = v1;
  dispatch_async(v2, block);
}

void sub_1000ED4C8(uint64_t a1)
{
  sub_1000ED560(*(void *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v3 = v2[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000ED818;
  block[3] = &unk_1001655F8;
  unsigned int v5 = v2;
  dispatch_sync(v3, block);
}

void sub_1000ED560(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      char v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: Polling keychain sync status...", buf, 2u);
      }
    }
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
    unsigned int v5 = +[CDPContext contextForPrimaryAccount];
    if (v5)
    {
      id v6 = [objc_alloc((Class)CDPStateController) initWithContext:v5];
      id v19 = 0;
      unsigned int v7 = [v6 isManateeAvailable:&v19];
      id v8 = (char *)v19;
      if (v8)
      {
        char v9 = nr_daemon_log();
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);

        unsigned int v7 = 0;
        if (v10)
        {
          uint64_t v11 = nr_daemon_log();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138412290;
            unint64_t v21 = v8;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: error encountered querying isManateeAvailable: %@", buf, 0xCu);
          }

          unsigned int v7 = 0;
        }
      }
      int v12 = nr_daemon_log();
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);

      if (v13)
      {
        char v14 = nr_daemon_log();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = "DISABLED";
          if (v7) {
            unsigned int v15 = "ENABLED";
          }
          *(_DWORD *)long long buf = 136315138;
          unint64_t v21 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: Keychain sync status poll done- keychain sync is %s", buf, 0xCu);
        }
      }
      sub_1000EDC34(a1, v7);
    }
    else
    {
      uint64_t v16 = nr_daemon_log();
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);

      if (v17)
      {
        unint64_t v18 = nr_daemon_log();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: No CDPContext for primary account, assume keychain off", buf, 2u);
        }
      }
      sub_1000EDC34(a1, 0);
    }
  }
}

void sub_1000ED818(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  sub_1000ED828(*(void *)(a1 + 32));
}

void sub_1000ED828(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    if (*(unsigned char *)(a1 + 56))
    {
      *(unsigned char *)(a1 + 57) = 1;
    }
    else
    {
      [*(id *)(a1 + 48) invalidate];
      uint64_t v2 = *(void *)(a1 + 32);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      _DWORD v5[2] = sub_1000EDEB0;
      v5[3] = &unk_1001655F8;
      void v5[4] = a1;
      uint64_t v3 = +[TimerFactory timerWithIdentifier:@"NRKeychainSyncStatusManager" delay:1 gracePeriod:v2 waking:v5 handlerQueue:10.0 handlerBlock:0.0];
      char v4 = *(void **)(a1 + 48);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x690], 8) = v3;
    }
  }
}

uint64_t sub_1000ED944(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = nr_daemon_log();
    BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

    if (v3)
    {
      char v4 = nr_daemon_log();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unsigned int v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: Unregistering for Keychain Sync status change notification.", v5, 2u);
      }
    }
    uint64_t result = notify_cancel(*(_DWORD *)(v1 + 40));
    *(_DWORD *)(v1 + 40) = -1;
  }
  return result;
}

void sub_1000EDB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000EDB70(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 64))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 64);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000EDC2C;
    v3[3] = &unk_1001655F8;
    id v4 = *(id *)(a1 + 40);
    uint64_t v2 = objc_retainBlock(v3);
    [v1 addObject:v2];
  }
}

intptr_t sub_1000EDC2C(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000EDC34(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1000EDEB8;
    v3[3] = &unk_1001660F8;
    void v3[4] = a1;
    char v4 = a2;
    dispatch_async(v2, v3);
  }
}

void sub_1000EDD2C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  sub_1000ED828((uint64_t)WeakRetained);
}

void sub_1000EDD6C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x690], 8) = 0;

    *(unsigned char *)(a1 + 56) = 1;
    BOOL v3 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EDE04;
    block[3] = &unk_1001655F8;
    void block[4] = a1;
    dispatch_async(v3, block);
  }
}

void sub_1000EDE04(uint64_t a1)
{
  sub_1000ED560(*(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(NSObject **)(v2 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000EDE8C;
  block[3] = &unk_1001655F8;
  void block[4] = v2;
  dispatch_sync(v3, block);
}

uint64_t sub_1000EDE8C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 56) = 0;
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 57))
  {
    *(unsigned char *)(v1 + 57) = 0;
    return sub_1000ED828(*(void *)(result + 32));
  }
  return result;
}

void sub_1000EDEB0(uint64_t a1)
{
}

void sub_1000EDEB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 59) || *(unsigned __int8 *)(v2 + 58) != *(unsigned __int8 *)(a1 + 40))
  {
    *(unsigned char *)(v2 + 59) = 1;
    *(unsigned char *)(*(void *)(a1 + 32) + 5_Block_object_dispose(&STACK[0x690], 8) = *(unsigned char *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    char v4 = *(NSObject **)(v3 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000EE060;
    block[3] = &unk_1001660F8;
    void block[4] = v3;
    char v18 = *(unsigned char *)(a1 + 40);
    dispatch_async(v4, block);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  id v5 = *(id *)(v2 + 64);
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = 0;

  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v14;
    do
    {
      int v12 = 0;
      do
      {
        if (*(void *)v14 != v11) {
          objc_enumerationMutation(v8);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12) + 16))(*(void *)(*((void *)&v13 + 1) + 8 * (void)v12));
        int v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v10);
  }
}

void sub_1000EE060(uint64_t a1)
{
}

void sub_1000EE070(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    char v4 = nr_daemon_log();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

    if (v5)
    {
      uint64_t v6 = nr_daemon_log();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v7 = "DISABLED";
        if (a2) {
          unsigned int v7 = "ENABLED";
        }
        *(_DWORD *)long long buf = 136315138;
        id v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "NRKeychainSyncStatusManager: Notifying clients that keychain sync is %s", buf, 0xCu);
      }
    }
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v8 = [[*(id *)(a1 + 8) copy];
    id v9 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v14;
      do
      {
        int v12 = 0;
        do
        {
          if (*(void *)v14 != v11) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(*((void *)&v13 + 1) + 8 * (void)v12) keychainSyncStatusDidChange:a2];
          int v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v10);
    }
  }
}

void sub_1000EE924(uint64_t a1, int a2, void *a3)
{
  id v27 = a3;
  if (a2) {
    uint64_t v5 = _NRIsAutomated() ^ 1;
  }
  else {
    uint64_t v5 = 0;
  }
  [*(id *)(*(void *)(a1 + 32) + 8) setPostFailsafeObliteration:v5];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  unsigned int v7 = [WeakRetained objectForKeyedSubscript:@"extensiblePairingPairingType"];

  id v8 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  id v9 = [v8 objectForKeyedSubscript:@"extensiblePairingShouldFilePairingReport"];

  id v10 = [v9 BOOLValue];
  uint64_t v11 = [*(id *)(a1 + 32) unpairHelper];
  [v11 setShouldFilePairingReport:v10];

  id v12 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  long long v13 = [v12 objectForKeyedSubscript:@"isAltAccountGizmo"];

  [*(id *)(*(void *)(a1 + 32) + 8) setIsTinkerPairing:[v13 BOOLValue]];
  if ([@"extensiblePairingTypeDiscoverAndPairWithName" isEqual:v7])
  {
    id v14 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
    long long v15 = [v14 serviceFromClass:objc_opt_class()];

    uint64_t v16 = *(void *)(a1 + 32);
    BOOL v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 32);
    id v19 = [v15 key];
    [v17 discoverAndPairWithAdvertisedName:v18 andOOBKey:v19];

    id v20 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
    [v20 removeService:v15];

LABEL_8:
    goto LABEL_14;
  }
  if ([@"extensiblePairingTypeDiscoverAndPairWithDeviceID" isEqual:v7])
  {
    id v21 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
    long long v15 = [v21 objectForKeyedSubscript:@"extensiblePairingDeviceID"];

    [*(id *)(*(void *)(a1 + 32) + 8) discoverAndPairWithAdvertisedName:*(void *)(*(void *)(a1 + 32) + 32) andDeviceID:v15];
    goto LABEL_8;
  }
  if ([@"extensiblePairingTypeAdvertiseAndOOBPair" isEqual:v7])
  {
    uint64_t v22 = *(void *)(a1 + 32);
    char v23 = *(void **)(v22 + 8);
    uint64_t v24 = *(void *)(v22 + 32);
    uint64_t v25 = 3;
  }
  else
  {
    if (![@"extensiblePairingTypeAdvertiseAndPasscodePair" isEqual:v7]) {
      goto LABEL_14;
    }
    uint64_t v26 = *(void *)(a1 + 32);
    char v23 = *(void **)(v26 + 8);
    uint64_t v24 = *(void *)(v26 + 32);
    uint64_t v25 = 4;
  }
  [v23 advertiseAndPairWithAdvertisedName:v24 andPairingMode:v25 withGetStartedBlock:0];
LABEL_14:
}

void sub_1000EECD8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2) {
    uint64_t v6 = _NRIsAutomated() ^ 1;
  }
  else {
    uint64_t v6 = 0;
  }
  [*(id *)(*(void *)(a1 + 32) + 16) setPostFailsafeObliteration:v6];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  id v8 = [WeakRetained objectForKeyedSubscript:@"extensiblePairingPairingType"];

  id v9 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  id v10 = [v9 objectForKeyedSubscript:@"extensiblePairingShouldFilePairingReport"];

  id v11 = [v10 BOOLValue];
  id v12 = [*(id *)(a1 + 32) unpairHelper];
  [v12 setShouldFilePairingReport:v11];

  id v13 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  id v14 = [v13 objectForKeyedSubscript:@"isAltAccountGizmo"];

  [*(id *)(*(void *)(a1 + 32) + 16) setIsTinkerPairing:[v14 BOOLValue]];
  id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 48));
  uint64_t v16 = [v15 objectForKeyedSubscript:@"extensiblePairingDeviceID"];

  if ([v8 isEqual:@"extensiblePairingTypeDiscoverAndPairWithName"])
  {
    BOOL v17 = nr_daemon_log();
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      id v19 = nr_daemon_log();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Discover and pair with name via NetworkRelay PreShared Key", buf, 2u);
      }
    }
    id v20 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80));
    id v21 = [v20 serviceFromClass:objc_opt_class()];

    uint64_t v22 = *(void *)(a1 + 32);
    char v23 = *(void **)(v22 + 16);
    uint64_t v24 = *(void *)(v22 + 32);
    uint64_t v25 = [v21 key];
    [v23 discoverAndPairWithAdvertisedName:v24 deviceID:v16 oobKey:v25];
  }
  else if ([v8 isEqual:@"extensiblePairingTypeDiscoverAndPairWithDeviceID"])
  {
    uint64_t v26 = nr_daemon_log();
    BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);

    if (v27)
    {
      uint64_t v28 = nr_daemon_log();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Discover and pair with device ID via NetworkRelay PIN", v29, 2u);
      }
    }
    [*(id *)(*(void *)(a1 + 32) + 16) discoverAndPairWithAdvertisedName:*(void *)(*(void *)(a1 + 32) + 32) deviceID:v16];
  }
}

uint64_t sub_1000EF6FC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = a2;
  uint64_t v6 = [v3 _getSetIsActiveDiffWithIsActive:1 withPairingID:v4 collection:v5];
  id v7 = [v5 applyDiff:v6];

  [*(id *)(a1 + 32) _cleanUpDiscoveredDevicesWithCollection:v5];
  id v8 = +[NRQueue registryDaemonQueue];
  [v8 dispatchAsync:*(void *)(a1 + 48)];

  return 0;
}

void sub_1000EFA1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) registry];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1000EFB14;
  v10[3] = &unk_100169DC0;
  id v11 = v4;
  id v12 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 32);
  id v13 = v6;
  uint64_t v14 = v7;
  id v8 = *(void **)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  id v15 = v8;
  id v9 = v4;
  [v5 grabRegistryWithWriteBlockAsync:v10];
}

uint64_t sub_1000EFB14(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) productType];
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 chipID]);
  }
  else
  {
    uint64_t v6 = 0;
  }
  id v7 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v8 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 40)];
  id v9 = [v7 initWithDiff:v8 andChangeType:1];

  id v10 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v11 = v10;
  if (v4)
  {
    id v12 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v4];
    id v13 = [v11 initWithDiff:v12 andChangeType:1];
  }
  else
  {
    id v13 = [v10 initWithDiff:0 andChangeType:2];
  }
  id v14 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v15 = v14;
  CFStringRef v59 = (void *)v6;
  if (v6)
  {
    id v16 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v6];
    id v17 = [v15 initWithDiff:v16 andChangeType:1];
  }
  else
  {
    id v17 = [v14 initWithDiff:0 andChangeType:2];
  }
  id v18 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v19 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 48)];
  id v20 = [v18 initWithDiff:v19 andChangeType:1];

  v72[0] = NRDevicePropertyAdvertisedName;
  v72[1] = NRDevicePropertyProductType;
  id v57 = v13;
  id v58 = v9;
  v73[0] = v9;
  v73[1] = v13;
  v72[2] = NRDevicePropertyChipID;
  v72[3] = NRDevicePropertyPairingID;
  BOOL v55 = v20;
  __int16 v56 = v17;
  v73[2] = v17;
  v73[3] = v20;
  id v21 = +[NSDictionary dictionaryWithObjects:v73 forKeys:v72 count:4];
  uint64_t v22 = +[NSMutableDictionary dictionaryWithDictionary:v21];

  if (([*(id *)(*(void *)(a1 + 56) + 24) networkRelayPairing] & 1) != 0
    || (+[NRSystemProperties sharedInstance],
        char v23 = objc_claimAutoreleasedReturnValue(),
        unsigned int v24 = [v23 isVirtualDevice],
        v23,
        v24))
  {
    uint64_t v25 = nr_daemon_log();
    BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);

    if (v26)
    {
      BOOL v27 = nr_daemon_log();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void *)(a1 + 72);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v69 = _NRDevicePropertyDiscoveryMechanism;
        __int16 v70 = 2048;
        uint64_t v71 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "NetworkRelay pairing is enabled on the phone, adding property diffs -- %@: %lu", buf, 0x16u);
      }
    }
    id v29 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v30 = objc_alloc((Class)NRDevicePropertyDiff);
    id v31 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 72)];
    id v32 = [v30 initWithValue:v31];
    id v33 = [v29 initWithDiff:v32 andChangeType:1];

    [v22 setObject:v33 forKeyedSubscript:_NRDevicePropertyDiscoveryMechanism];
  }
  id v34 = [*(id *)(a1 + 56) _diffsForSettingDeviceIsActive:1 withPairingID:*(void *)(a1 + 48) collection:v3];
  id v35 = [v34 mutableCopy];

  if (v35)
  {
    long long v53 = v4;
    id v54 = v3;
    id v36 = [v35 objectForKeyedSubscript:*(void *)(a1 + 48)];
    id v37 = [v36 diff];

    id v38 = +[NSMutableDictionary dictionary];
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v39 = v37;
    id v40 = [v39 countByEnumeratingWithState:&v63 objects:v67 count:16];
    if (v40)
    {
      id v41 = v40;
      uint64_t v42 = *(void *)v64;
      do
      {
        for (i = 0; i != v41; i = (char *)i + 1)
        {
          if (*(void *)v64 != v42) {
            objc_enumerationMutation(v39);
          }
          uint64_t v44 = *(void *)(*((void *)&v63 + 1) + 8 * i);
          unsigned __int8 v45 = [v39 objectForKeyedSubscript:v44];
          [v38 setObject:v45 forKeyedSubscript:v44];
        }
        id v41 = [v39 countByEnumeratingWithState:&v63 objects:v67 count:16];
      }
      while (v41);
    }

    [v38 addEntriesFromDictionary:v22];
    id v46 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v38];

    id v47 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v46 andChangeType:1];
    [v35 setObject:v47 forKeyedSubscript:*(void *)(a1 + 48)];

    id v4 = v53;
    id v3 = v54;
  }
  else
  {
    id v35 = +[NSMutableDictionary dictionary];
    id v46 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v22];
    id v38 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v46 andChangeType:1];
    [v35 setObject:v38 forKeyedSubscript:*(void *)(a1 + 48)];
  }

  id v48 = [objc_alloc((Class)NRDeviceCollectionDiff) initWithDeviceCollectionDiffDeviceDiffs:v35];
  id v49 = [v3 applyDiff:v48];
  long long v50 = +[NRQueue registryDaemonQueue];
  v60[0] = _NSConcreteStackBlock;
  v60[1] = 3221225472;
  v60[2] = sub_1000F0184;
  v60[3] = &unk_100167ED0;
  uint64_t v51 = *(void **)(a1 + 64);
  void v60[4] = *(void *)(a1 + 56);
  id v62 = v51;
  id v61 = *(id *)(a1 + 48);
  [v50 dispatchAsync:v60];

  return 0;
}

uint64_t sub_1000F0184(void *a1)
{
  uint64_t v2 = nr_daemon_log();
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);

  if (v3)
  {
    id v4 = nr_daemon_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding EPSagaOperandExtensiblePairingStartedKey to operands", v10, 2u);
    }
  }
  id v5 = [[EPSagaOperandNumber alloc] initWithNumber:&__kCFBooleanTrue];
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 48));
  id v7 = [WeakRetained operands];
  [v7 setObject:v5 forKeyedSubscript:@"pairingStarted"];

  id v8 = objc_loadWeakRetained((id *)(a1[4] + 48));
  [v8 persist];

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, a1[5]);
  }
  return result;
}

uint64_t sub_1000F055C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v71 = a3;
  id v6 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:5];
  id v7 = *(void **)(a1 + 32);
  id v8 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v9 = NRDevicePropertyAdvertisedName;
  id v10 = [v8 objectForKeyedSubscript:NRDevicePropertyAdvertisedName];
  id v11 = [v10 value];
  LOBYTE(v7) = [v7 isEqual:v11];

  if ((v7 & 1) == 0)
  {
    id v12 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v13 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 32)];
    id v14 = [v12 initWithDiff:v13 andChangeType:1];

    [v6 setObject:v14 forKeyedSubscript:v9];
  }
  id v15 = *(void **)(a1 + 48);
  id v16 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v17 = _NRDevicePropertyBluetoothIdentifier;
  id v18 = [v16 objectForKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
  id v19 = [v18 value];
  LOBYTE(v15) = [v15 isEqual:v19];

  if ((v15 & 1) == 0)
  {
    id v20 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v21 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 48)];
    id v22 = [v20 initWithDiff:v21 andChangeType:1];

    [v6 setObject:v22 forKeyedSubscript:v17];
  }
  char v23 = *(void **)(a1 + 40);
  unsigned int v24 = [v5 objectForKeyedSubscript:v23];
  uint64_t v25 = NRDevicePropertyPairingID;
  BOOL v26 = [v24 objectForKeyedSubscript:NRDevicePropertyPairingID];
  BOOL v27 = [v26 value];
  LOBYTE(v23) = [v23 isEqual:v27];

  if ((v23 & 1) == 0)
  {
    id v28 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v29 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 40)];
    id v30 = [v28 initWithDiff:v29 andChangeType:1];

    [v6 setObject:v30 forKeyedSubscript:v25];
  }
  id v31 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v32 = objc_alloc((Class)NRDevicePropertyDiff);
  id v33 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
  id v34 = [v32 initWithValue:v33];
  id v73 = [v31 initWithDiff:v34 andChangeType:1];

  id v35 = +[NSDate now];
  [v35 timeIntervalSinceReferenceDate];
  double v37 = v36;

  id v38 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v39 = objc_alloc((Class)NRDevicePropertyDiff);
  id v40 = +[NSNumber numberWithDouble:v37];
  id v41 = [v39 initWithValue:v40];
  id v72 = [v38 initWithDiff:v41 andChangeType:1];

  uint64_t v42 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v43 = _NRDevicePropertyRSSI;
  uint64_t v44 = [v42 objectForKeyedSubscript:_NRDevicePropertyRSSI];
  unsigned __int8 v45 = [v44 value];

  id v46 = [v5 objectForKeyedSubscript:*(void *)(a1 + 40)];
  uint64_t v47 = _NRDevicePropertyLastRSSIUpdate;
  id v48 = [v46 objectForKeyedSubscript:_NRDevicePropertyLastRSSIUpdate];
  id v49 = [v48 value];

  uint64_t v50 = *(void *)(a1 + 72);
  id v51 = [v45 integerValue];
  [v49 doubleValue];
  long long v53 = v71;
  if (sub_10009C5CC(v50, (uint64_t)v51, v37, v52))
  {
    id v54 = nr_daemon_log();
    BOOL v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);

    if (v55)
    {
      __int16 v56 = nr_daemon_log();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = *(void *)(a1 + 32);
        id v58 = [*(id *)(a1 + 40) UUIDString];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v80 = v57;
        long long v53 = v71;
        __int16 v81 = 2114;
        CFStringRef v82 = v58;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "updateNRMutableDeviceFromEPDevice: Updating or creating device %@ %{public}@", buf, 0x16u);
      }
    }
    [v6 setObject:v73 forKeyedSubscript:v43];
    [v6 setObject:v72 forKeyedSubscript:v47];
  }
  if (*(void *)(a1 + 56))
  {
    CFStringRef v59 = [v53 storeSecureProperty];
    id v60 = objc_alloc((Class)NRDevicePropertyDiffType);
    id v61 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v59];
    id v62 = [v60 initWithDiff:v61 andChangeType:1];

    [v6 setObject:v62 forKeyedSubscript:NRDevicePropertyBluetoothMACAddress];
  }
  id v63 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v6];
  if (v63)
  {
    id v64 = objc_alloc((Class)NRDeviceCollectionDiff);
    uint64_t v77 = *(void *)(a1 + 40);
    id v65 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v63 andChangeType:0];
    id v78 = v65;
    long long v66 = +[NSDictionary dictionaryWithObjects:&v78 forKeys:&v77 count:1];
    id v67 = [v64 initWithDeviceCollectionDiffDeviceDiffs:v66];

    id v68 = [v5 applyDiff:v67];
  }
  uint64_t v69 = +[NRQueue registryDaemonQueue];
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472;
  v74[2] = sub_1000F0C24;
  v74[3] = &unk_100165A70;
  id v76 = *(id *)(a1 + 64);
  id v75 = *(id *)(a1 + 40);
  [v69 dispatchAsync:v74];

  return 0;
}

uint64_t sub_1000F0C24(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1000F0E50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableDictionary dictionary];
  id v5 = [v3 objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (v5)
  {
    id v6 = [*(id *)(a1 + 40) makeLocalPairingStorePairingID:*(void *)(a1 + 32)];
    id v7 = nr_daemon_log();
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v8)
    {
      uint64_t v9 = nr_daemon_log();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [*(id *)(a1 + 32) UUIDString];
        id v11 = [*(id *)(a1 + 48) UUIDString];
        int v12 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)long long buf = 138543874;
        id v33 = v10;
        __int16 v34 = 2114;
        id v35 = v11;
        __int16 v36 = 1024;
        int v37 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "createLocalPairingStore deviceID: %{public}@, bluetoothIdentifier: %{public}@, notify: %{BOOL}d", buf, 0x1Cu);
      }
    }
    if (v6)
    {
      id v13 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:v6];
      id v14 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v13 andChangeType:0];
      [v4 setObject:v14 forKeyedSubscript:NRDevicePropertyLocalPairingDataStorePath];

      if (*(unsigned char *)(a1 + 64))
      {
        id v15 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanTrue];
        id v16 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v15 andChangeType:0];
        [v4 setObject:v16 forKeyedSubscript:_NRDevicePropertyPairingStatusBluetoothPaired];
        if (*(void *)(a1 + 48))
        {
          id v17 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:*(void *)(a1 + 48)];
          id v18 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:v17 andChangeType:0];
          [v4 setObject:v18 forKeyedSubscript:_NRDevicePropertyBluetoothIdentifier];
        }
      }
      id v19 = [objc_alloc((Class)NRDeviceDiff) initWithDiffPropertyDiffs:v4];
      id v20 = objc_alloc((Class)NRDeviceCollectionDiff);
      uint64_t v30 = *(void *)(a1 + 32);
      id v21 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v19 andChangeType:1];
      id v31 = v21;
      id v22 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
      id v23 = [v20 initWithDeviceCollectionDiffDeviceDiffs:v22];

      id v24 = [v3 applyDiff:v23];
    }
  }
  else
  {
    id v6 = 0;
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v25 = +[NRQueue registryDaemonQueue];
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000F1214;
    v27[3] = &unk_100165A70;
    id v29 = *(id *)(a1 + 56);
    id v28 = v6;
    [v25 dispatchAsync:v27];
  }
  return 0;
}

uint64_t sub_1000F1214(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) != 0);
}

void sub_1000F15C0(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) registry];
  LOBYTE(v2) = *(unsigned char *)(a1 + 104);
  [v3 unpairDeviceWithPairingID:*(void *)(a1 + 40) obliterationString:*(void *)(a1 + 48) shouldBrick:*(void *)(a1 + 56) storeUnpair:*(void *)(a1 + 64) migrationUnpair:*(void *)(a1 + 72) shouldPreserveESim:*(void *)(a1 + 80) pairingReport:*(void *)(a1 + 88) remoteUnpairRequestUUID:*(void *)(a1 + 96) shouldConnectionWithDevice:v2];
}

uint64_t sub_1000F1940(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v6 = objc_alloc((Class)NRDevicePropertyDiffType);
  unsigned int v7 = [*(id *)(a1 + 32) isErrorSet];
  if (v7)
  {
    id v8 = objc_alloc((Class)NRDevicePropertyDiff);
    uint64_t v2 = [*(id *)(a1 + 32) detailedError];
    id v3 = [v2 nr_filteredError];
    id v9 = [v8 initWithValue:v3];
  }
  else
  {
    id v9 = 0;
  }
  if ([*(id *)(a1 + 32) isErrorSet]) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 2;
  }
  id v11 = [v6 initWithDiff:v9 andChangeType:v10];
  if (v7)
  {
  }
  id v12 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v13 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanFalse];
  id v14 = [v12 initWithDiff:v13 andChangeType:0];

  id v15 = [objc_alloc((Class)NRDevicePropertyDiffType) initWithDiff:0 andChangeType:2];
  id v16 = objc_alloc((Class)NRDeviceDiff);
  v29[0] = _NRDevicePropertyLastPairingError;
  v29[1] = NRDevicePropertyIsPaired;
  v30[0] = v11;
  v30[1] = v14;
  v29[2] = _NRDevicePropertyPairingStatusBluetoothPaired;
  v30[2] = v15;
  id v17 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:3];
  id v18 = [v16 initWithDiffPropertyDiffs:v17];

  id v19 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v18 andChangeType:1];
  id v20 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v27 = *(void *)(a1 + 40);
  id v28 = v19;
  id v21 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  id v22 = [v20 initWithDeviceCollectionDiffDeviceDiffs:v21];

  id v23 = [v5 applyDiff:v22];
  if (*(void *)(a1 + 56))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 80));
    uint64_t v25 = [WeakRetained queue];
    dispatch_async(v25, *(dispatch_block_t *)(a1 + 56));
  }
  return 0;
}

uint64_t sub_1000F2014(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc((Class)NRDevicePropertyDiffType);
  id v5 = [objc_alloc((Class)NRDevicePropertyDiff) initWithValue:&__kCFBooleanFalse];
  id v6 = [v4 initWithDiff:v5 andChangeType:0];

  id v7 = objc_alloc((Class)NRDeviceDiff);
  uint64_t v19 = _NRDevicePropertyPairingStatusBluetoothPaired;
  id v20 = v6;
  id v8 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  id v9 = [v7 initWithDiffPropertyDiffs:v8];

  id v10 = [objc_alloc((Class)NRDeviceDiffType) initWithDiff:v9 andChangeType:1];
  id v11 = objc_alloc((Class)NRDeviceCollectionDiff);
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = v10;
  id v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
  id v13 = [v11 initWithDeviceCollectionDiffDeviceDiffs:v12];

  id v14 = [v3 applyDiff:v13];
  id v15 = +[NRQueue registryDaemonQueue];
  [v15 dispatchAsync:*(void *)(a1 + 40)];

  return 0;
}

id sub_1000F291C(uint64_t a1)
{
  return [*(id *)(a1 + 32) update];
}

void sub_1000F33AC(id a1)
{
  v4[0] = objc_opt_class();
  v4[1] = objc_opt_class();
  v4[2] = objc_opt_class();
  v4[3] = objc_opt_class();
  void v4[4] = objc_opt_class();
  void v4[5] = objc_opt_class();
  void v4[6] = objc_opt_class();
  void v4[7] = objc_opt_class();
  v4[8] = objc_opt_class();
  v4[9] = objc_opt_class();
  v4[10] = objc_opt_class();
  v4[11] = objc_opt_class();
  v4[12] = objc_opt_class();
  v4[13] = objc_opt_class();
  v4[14] = objc_opt_class();
  v4[15] = objc_opt_class();
  v4[16] = objc_opt_class();
  v4[17] = objc_opt_class();
  v4[18] = objc_opt_class();
  v4[19] = objc_opt_class();
  v4[20] = objc_opt_class();
  v4[21] = objc_opt_class();
  v4[22] = objc_opt_class();
  v4[23] = objc_opt_class();
  v4[24] = objc_opt_class();
  v4[25] = objc_opt_class();
  v4[26] = objc_opt_class();
  v4[27] = objc_opt_class();
  v4[28] = objc_opt_class();
  v4[29] = objc_opt_class();
  v4[30] = objc_opt_class();
  v4[31] = objc_opt_class();
  v4[32] = objc_opt_class();
  v4[33] = objc_opt_class();
  v4[34] = objc_opt_class();
  v4[35] = objc_opt_class();
  v4[36] = objc_opt_class();
  v4[37] = objc_opt_class();
  v4[38] = objc_opt_class();
  v4[39] = objc_opt_class();
  v4[40] = objc_opt_class();
  v4[41] = objc_opt_class();
  v4[42] = objc_opt_class();
  v4[43] = objc_opt_class();
  v4[44] = objc_opt_class();
  v4[45] = objc_opt_class();
  v4[46] = objc_opt_class();
  v4[47] = objc_opt_class();
  uint64_t v1 = +[NSArray arrayWithObjects:v4 count:48];
  uint64_t v2 = +[NSSet setWithArray:v1];
  id v3 = (void *)qword_1001A14D0;
  qword_1001A14D0 = v2;
}

void sub_1000F4F28(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 32);
  id v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = 0;

  id v4 = [*v2 currentEntry];
  id v5 = [v4 errors];
  id v6 = [v5 count];

  id v7 = sub_1000A3CF0();
  id v8 = v7;
  if (v6)
  {
    BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);

    if (v9)
    {
      id v10 = sub_1000A3CF0();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1000FCC24(v2, v10);
      }
    }
    [*v2 setDidFail:([*v2 didFail] | ([*v2 notUnrollable] ^ 1))];
  }
  else
  {
    BOOL v11 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);

    if (v11)
    {
      id v12 = sub_1000A3CF0();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *((void *)*v2 + 3);
        id v14 = [*v2 currentEntry];
        id v15 = [v14 shortDescription];
        int v23 = 138543618;
        uint64_t v24 = v13;
        __int16 v25 = 2114;
        BOOL v26 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "EPRoutingSlip[%{public}@]: Transaction %{public}@ finished", (uint8_t *)&v23, 0x16u);
      }
    }
  }
  id v16 = [*v2 currentEntry];
  if ([*v2 didFail] && (objc_msgSend(*v2, "notUnrollable") & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)*v2 + 4);
    [WeakRetained routingSlip:*v2 entryDidCompleteRollback:v16];
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)*v2 + 4);
    [WeakRetained routingSlip:*v2 entryDidCompleteTransaction:v16];
  }

  if ([*v2 updateCurrentTransactionIndex])
  {
    [*v2 resume];
  }
  else
  {
    id v18 = sub_1000A3CF0();
    BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);

    if (v19)
    {
      id v20 = sub_1000A3CF0();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *((void *)*v2 + 3);
        int v23 = 138543362;
        uint64_t v24 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "EPRoutingSlip[%{public}@]: Saga completed", (uint8_t *)&v23, 0xCu);
      }
    }
    [*v2 printDescription];
    [*v2 setState:2];
    [*v2 persist];
    id v22 = (void *)*((void *)*v2 + 13);
    *((void *)*v2 + 13) = 0;
  }
}

void sub_1000F53A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = sub_1000A3CF0();
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);

  if (v7)
  {
    id v8 = sub_1000A3CF0();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v9 = *(void **)(a1 + 32);
      id v10 = " ";
      if (v9[5] == a3 && v9[6] == 1) {
        id v10 = "*";
      }
      uint64_t v11 = v9[3];
      id v12 = [v5 shortDescription];
      int v13 = 136315650;
      id v14 = v10;
      __int16 v15 = 2114;
      uint64_t v16 = v11;
      __int16 v17 = 2114;
      id v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "(entries) [%s] EPRoutingSlip[%{public}@] %{public}@", (uint8_t *)&v13, 0x20u);
    }
  }
}

CFStringRef sub_1000F5EF0(unint64_t a1)
{
  if (a1 > 3) {
    return @"unknown";
  }
  else {
    return *(&off_100169EC8 + a1);
  }
}

void sub_1000F5F14(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  signed int v5 = [*a2 processIdentifier];
  int v6 = 138412546;
  uint64_t v7 = v4;
  __int16 v8 = 2048;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "NRXPCServer: %@ connection rejected from pid %ld because proxy failed to init", (uint8_t *)&v6, 0x16u);
}

void sub_1000F5FBC(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  signed int v6 = [*a2 processIdentifier];
  uint64_t v7 = [*(id *)(*(void *)a1 + 80) allKeys];
  int v8 = 138412802;
  uint64_t v9 = v5;
  __int16 v10 = 2048;
  uint64_t v11 = v6;
  __int16 v12 = 2112;
  int v13 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "NRXPCServer: %@ connection rejected from pid %ld because of missing entitlement %@", (uint8_t *)&v8, 0x20u);
}

void sub_1000F609C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "EPSagaTransactionPairedSyncTransaction should not be called when there is no active or paired device", v1, 2u);
}

void sub_1000F60E0()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "whatKindOfSyncIsNeededForPairingID - requestInitialNonMigrationSyncStateForPairingIdentifier %@", v2, v3, v4, v5, v6);
}

void sub_1000F6148()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "whatKindOfSyncIsNeededForPairingID - requestInitialSyncStateForPairingIdentifier %@", v2, v3, v4, v5, v6);
}

void sub_1000F61B0()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "whatKindOfSyncIsNeededForPairingID - requestSyncStateForPairingIdentifier %@", v2, v3, v4, v5, v6);
}

void sub_1000F6218(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 UUIDString];
  sub_100008A24();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to locate a device %@", v4, 0xCu);
}

void sub_1000F62B0(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "EPDTC: Can't write transaction container because of %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000F6338(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "EPDTC: Can't read transaction container because of %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000F63C0(void *a1, NSObject *a2)
{
  uint64_t v4 = [a1 operationType];
  uint64_t v5 = [a1 targetPairingID];
  uint64_t v6 = [v5 UUIDString];
  int v7 = 138543618;
  int v8 = v4;
  __int16 v9 = 2112;
  __int16 v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPDTC: Device disappeared! Ignoring enqueued transaction %{public}@ for %@", (uint8_t *)&v7, 0x16u);
}

void sub_1000F6494(id *a1)
{
  uint64_t v1 = [*a1 current];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "EPDTC: Looks like we have a current transaction %{public}@ that has never been started! Starting it now!", v4, v5, v6, v7, 2u);
}

void sub_1000F6520(int a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPMobileAssetAutoTrigger: notify_registery_dispatch UI Unlocked notification ***FAILED*** and returned %ld", (uint8_t *)&v2, 0xCu);
}

void sub_1000F659C(int a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPMobileAssetAutoTrigger: notify_get_state UI Unlocked ***FAILED*** and returned %ld", (uint8_t *)&v2, 0xCu);
}

void sub_1000F6618(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "Failed to create KeepAlive file with error: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000F66A0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 nr_safeDescription];
  int v4 = 138543618;
  CFStringRef v5 = @"/var/mobile/Library/DeviceRegistry.state";
  __int16 v6 = 2114;
  uint64_t v7 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Can't create path %{public}@! error=%{public}@", (uint8_t *)&v4, 0x16u);
}

void sub_1000F674C(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "Failed to delete KeepAlive file with error: %{public}@", v4, v5, v6, v7, 2u);
}

uint64_t sub_1000F67D4()
{
  uint64_t v0 = abort_report_np();
  return sub_1000F67FC(v0);
}

void sub_1000F67FC(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid Advertising Payload %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F6874(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Tried to get rep of string rather than string-character", v1, 2u);
}

void sub_1000F68B8(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "-[NRTermsAcknowledgementRegistryService checkForAcknowledgement:forDeviceID:withCompletion:]_block_invoke";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s:No Active device.  Can't tell if terms have been agreed to.", (uint8_t *)&v1, 0xCu);
}

void sub_1000F693C(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "-[NRTermsAcknowledgementRegistryService checkForAcknowledgement:forDeviceID:withCompletion:]_block_invoke";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s:Not Connected.  Can't tell if terms have been agreed to.", (uint8_t *)&v1, 0xCu);
}

void sub_1000F69C0(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "EPSagaTransactionEnableWatchGraduation: Unable to set keychain value", v1, 2u);
}

void sub_1000F6A04()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationKeyPusher: notify_registery_dispatch keybag notification ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F6A6C()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationKeyPusher: notify_registery_dispatch UI Unlock notification ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F6AD4()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationKeyPusher: notify_get_state UI Unlocked ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F6B3C(char a1, void *a2, NSObject *a3)
{
  if (a1) {
    uint64_t v5 = "NO";
  }
  else {
    uint64_t v5 = "YES";
  }
  uint8_t v6 = [a2 keyChannel];
  if (v6) {
    uint64_t v7 = "YES";
  }
  else {
    uint64_t v7 = "NO";
  }
  int v8 = [a2 keyChannel];
  __int16 v9 = [v8 defaultPairedDevice];
  int v11 = 136315650;
  if ([v9 isConnected]) {
    __int16 v10 = "YES";
  }
  else {
    __int16 v10 = "NO";
  }
  __int16 v12 = v5;
  __int16 v13 = 2080;
  id v14 = v7;
  __int16 v15 = 2080;
  uint64_t v16 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "EPMigrationKeyPusher: Can't send the key- hasKey=%s hasChannel=%s channelConnected=%s", (uint8_t *)&v11, 0x20u);
}

void sub_1000F6C58(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Secure backup already running!", v1, 2u);
}

void sub_1000F6C9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F6D08(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "EPSagaTransactionSendUnpairMessage: Timeout", v1, 2u);
}

void sub_1000F6D4C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "HKHealthStore forceNanoSyncWithPullRequest failed with %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F6DC4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "HKHealthStore waitForLastChanceSyncWithDevicePairingID failed with %@", (uint8_t *)&v2, 0xCu);
}

uint64_t sub_1000F6E3C()
{
  uint64_t v0 = abort_report_np();
  return sub_1000F6E64(v0);
}

uint64_t sub_1000F6E64()
{
  uint64_t v0 = abort_report_np();
  return sub_1000F6E8C(v0);
}

void sub_1000F6E8C()
{
  sub_10001C7DC();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "IDSLocalPairingAddPairedDeviceWithInfo %@ failed with error %@");
}

void sub_1000F6EF8()
{
  sub_10001C7DC();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "IDSLocalPairingConnectPairedDevice %@ failed with %@");
}

void sub_1000F6F64(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [(id)sub_10001C7D0(a1) UUIDString];
  int v4 = 138412290;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IDS migration pairing to %@ timed out, rolling back", (uint8_t *)&v4, 0xCu);
}

void sub_1000F6FFC(uint64_t a1)
{
  os_log_t v1 = [(id)sub_10001C7D0(a1) UUIDString];
  sub_10001C7B8();
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "IDSLocalPairingUnpairStartForDevice %@ failed with %@", v4, v5, v6, v7, v8);
}

void sub_1000F7090(uint64_t a1)
{
  os_log_t v1 = [(id)sub_10001C7D0(a1) UUIDString];
  sub_10001C7B8();
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "IDSLocalPairingDeletePairedDevice %@ failed with %@", v4, v5, v6, v7, v8);
}

void sub_1000F7124(uint64_t a1)
{
  os_log_t v1 = [(id)sub_10001C7D0(a1) UUIDString];
  sub_10001C7B8();
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "IDSLocalPairingStopForDevice %@ failed with %@", v4, v5, v6, v7, v8);
}

void sub_1000F71B8(uint64_t a1)
{
  os_log_t v1 = [(id)sub_10001C7D0(a1) UUIDString];
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "IDSLocalPairingUnpairForDevice %@ failed with %@", v4, v5, v6, v7, 2u);
}

void sub_1000F7258()
{
  sub_100008A24();
  __int16 v3 = 1024;
  int v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "notify_register_check call to get notify token for %@ failed with status %d", v2, 0x12u);
}

void sub_1000F72DC()
{
  int v2 = 136446466;
  __int16 v3 = "-[NRPairingDaemon setIDSTrafficClassifiersForActiveDeviceWithNewCompatibilityState:]";
  sub_10004E9C8();
  sub_10004E9B0((void *)&_mh_execute_header, v0, v1, "%{public}s: %{public}@.", (uint8_t *)&v2);
}

void sub_1000F7358()
{
  sub_10004E9D8();
  sub_10004E9B0((void *)&_mh_execute_header, v0, (uint64_t)v0, "Error %@ deleting %@", v1);
}

void sub_1000F73C8()
{
  sub_10004E9D8();
  sub_10004E9B0((void *)&_mh_execute_header, v0, (uint64_t)v0, "Unable to get Bridge running status. Error: %@ RBSProcessHandle: %@", v1);
}

void sub_1000F7438(uint64_t a1, uint64_t a2)
{
  int v4 = [[(id)sub_10004EA48(a1, a2) assertionID];
  *__int16 v3 = 138412290;
  void *v2 = v4;
  sub_10004EA08((void *)&_mh_execute_header, v5, v6, "Dropping assertion %@");
}

void sub_1000F7494(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(void *)(a2 + 4) = a1;
  sub_10004E98C((void *)&_mh_execute_header, a3, (uint64_t)a3, "Error archiving trigger file %@", (uint8_t *)a2);
}

void sub_1000F74E4(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 136446466;
  *(void *)(a2 + 4) = "-[NRPairingDaemon legacyDidRestoreFromBackup]";
  *(_WORD *)(a2 + 12) = 2112;
  *(void *)(a2 + 14) = a1;
  sub_10004E9B0((void *)&_mh_execute_header, a3, (uint64_t)a3, "%{public}s: Error unarchiving trigger file %@", (uint8_t *)a2);
}

void sub_1000F7548(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *long long buf = 0;
  *a2 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Want to unpair IDS device for archived watch but BTUUID is unexpectedly nil", buf, 2u);
}

void sub_1000F7588(void *a1, NSObject *a2)
{
  [a1 count];
  sub_100008A24();
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "Detected corrupted devices in NanoRegistry - removing %lu device(s)", v3, 0xCu);
}

void sub_1000F7610()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not create com.apple.nanoregistry.activedevicechipid notify token", v2, v3, v4, v5, v6);
}

void sub_1000F7644(NSObject *a1, uint64_t a2, uint64_t a3)
{
  int v3 = 134218240;
  uint64_t v4 = qword_1001A1120;
  __int16 v5 = 2048;
  uint64_t v6 = qword_1001A1128;
  sub_10004E9B0((void *)&_mh_execute_header, a1, a3, "Remote compatibility versions have been overridden via defaults at com.apple.ids. min: %lld  max: %lld. Look in logs to find the real remote versions.", (uint8_t *)&v3);
}

void sub_1000F76D0(void *a1)
{
  uint64_t v2 = +[NRPairingCompatibilityVersionInfo systemVersions];
  int v3 = [a1 chipIDOfActiveDevice];
  [v2 minPairingCompatibilityVersionForChipID:v3];
  uint64_t v4 = +[NRPairingCompatibilityVersionInfo systemVersions];
  [v4 maxPairingCompatibilityVersion];
  __int16 v5 = +[NRPairingCompatibilityVersionInfo systemVersions];
  uint64_t v6 = [a1 chipIDOfActiveDevice];
  [v5 minQuickSwitchPairingCompatibilityVersionForChipID:v6];
  sub_10004E948();
  sub_10004EA28((void *)&_mh_execute_header, v7, v8, "Local compatibility versions have been overridden via defaults at com.apple.NanoRegistry. min: %lld->%lld  max: %lld->%lld  qsMin: %lld->%lld", v9, v10, v11, v12, v13);
}

void sub_1000F77EC(void *a1)
{
  uint64_t v2 = +[NRPairingCompatibilityVersionInfo systemVersions];
  int v3 = [a1 chipIDOfActiveDevice];
  [v2 minPairingCompatibilityVersionForChipID:v3];
  uint64_t v4 = +[NRPairingCompatibilityVersionInfo systemVersions];
  [v4 maxPairingCompatibilityVersion];
  __int16 v5 = +[NRPairingCompatibilityVersionInfo systemVersions];
  uint64_t v6 = [a1 chipIDOfActiveDevice];
  [v5 minQuickSwitchPairingCompatibilityVersionForChipID:v6];
  sub_10004E948();
  sub_10004EA28((void *)&_mh_execute_header, v7, v8, "Revlock feature flag is not enabled; compatibility versions have been changed. min: %lld->%lld  max: %lld->%lld  qsMin: %lld->%lld",
    v9,
    v10,
    v11,
    v12,
    v13);
}

void sub_1000F7908()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "Can't update token %@, == NOTIFY_TOKEN_INVALID", v2, v3, v4, v5, v6);
}

void sub_1000F7970()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Can't send property update because IDS class C is not connected", v2, v3, v4, v5, v6);
}

void sub_1000F79A4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Can't send property update because no active device", v2, v3, v4, v5, v6);
}

void sub_1000F79D8(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10004E98C((void *)&_mh_execute_header, a2, v4, "purgeIDSPairedDevicesExceptFor: Error %{public}@ calling IDSLocalPairingGetPairedDevices or GetPairingDevices", v5);
}

void sub_1000F7A68(void *a1, uint64_t a2)
{
  uint64_t v3 = [a1 nr_safeDescription];
  uint64_t v4 = [*(id *)(a2 + 32) UUIDString];
  sub_10004E9C8();
  sub_10001C798((void *)&_mh_execute_header, v5, v6, "purgeIDSPairedDevicesExceptFor: Error %{public}@ deleting unwanted IDS device %{public}@", v7, v8, v9, v10, 2u);
}

void sub_1000F7B14(void *a1)
{
  uint64_t v1 = [a1 activeDevice];
  uint64_t v2 = [v1 pairingID];
  sub_10004E9C8();
  sub_10001C798((void *)&_mh_execute_header, v3, v4, "%{public}s: unable to get compatibility version for %{public}@", v5, v6, v7, v8, 2u);
}

void sub_1000F7BC0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3 = 136315394;
  uint64_t v4 = "-[NRPairingDaemon _resolveIsSetupNumberForDevice:]";
  __int16 v5 = 2112;
  uint64_t v6 = a1;
  sub_10004E9B0((void *)&_mh_execute_header, a2, a3, "%s: %@ is NRSecureDevicePropertyID, de-referencing to NSNumber", (uint8_t *)&v3);
}

void sub_1000F7C44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F7CBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F7D34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F7DAC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "OOB pairing started", v2, v3, v4, v5, v6);
}

void sub_1000F7DE0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "_companionOOBDiscoverAndPairWithName: Managed configuration restriction!", v2, v3, v4, v5, v6);
}

void sub_1000F7E14()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Already pairing", v2, v3, v4, v5, v6);
}

void sub_1000F7E48()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "paired device not compatible with QuickSwitch", v2, v3, v4, v5, v6);
}

void sub_1000F7E7C(void *a1)
{
  uint64_t v1 = [a1 UUIDString];
  sub_100008A24();
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "xpcCompanionPasscodePairWithDeviceID: deviceID=%{public}@ options=%{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F7F1C(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) UUIDString];
  sub_10004E9F0();
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "xpcCompanionPasscodePairWithDeviceID: deviceID=%{public}@ options=%{public}@ Starting...", v4, v5, v6, v7, v8);
}

void sub_1000F7FB4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "_companionPasscodePairWithDeviceID with unknown device ignored", v2, v3, v4, v5, v6);
}

void sub_1000F7FE8()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "xpcGizmoOOBAdvertiseAndPairWithName: advertisedName=%{public}@", v2, v3, v4, v5, v6);
}

void sub_1000F8050(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008A08((void *)&_mh_execute_header, a2, a3, "xpcGizmoOOBAdvertiseAndPairWithName: advertisedName=%{public}@ Starting...", a5, a6, a7, a8, 2u);
}

void sub_1000F80C0()
{
  sub_100008A24();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "xpcGizmoPasscodeAdvertiseAndPairWithName: advertisedName=%{public}@", v2, v3, v4, v5, v6);
}

void sub_1000F8128(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100008A08((void *)&_mh_execute_header, a2, a3, "xpcGizmoPasscodeAdvertiseAndPairWithName: advertisedName=%{public}@ Starting...", a5, a6, a7, a8, 2u);
}

void sub_1000F8198()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Error getting NRPairingDaemon instance. Skipping unpair", v2, v3, v4, v5, v6);
}

void sub_1000F81CC(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 nsuuid];
  uint64_t v4 = [v3 UUIDString];
  sub_100008A24();
  sub_10004E98C((void *)&_mh_execute_header, a2, v5, "No matching NRDevice found for IDSDevice %{public}@", v6);
}

void sub_1000F8274(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 UUIDString];
  sub_100008A24();
  sub_10004E98C((void *)&_mh_execute_header, a2, v4, "Could not find a matching NRDevice for a remote unpair request from BT UUID: %{public}@, ignoring.", v5);
}

void sub_1000F8304()
{
  int v0 = nrGetReportStringForErrorCode();
  sub_10004E9F0();
  sub_10001C798((void *)&_mh_execute_header, v1, v2, "pairing failure code received from paired device: %{public}@/%{public}@", v3, v4, v5, v6, v7);
}

void sub_1000F8398()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "No Bluetooth UUID to look for NRDevice", v2, v3, v4, v5, v6);
}

void sub_1000F83CC(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 UUIDString];
  sub_100008A24();
  sub_10004E98C((void *)&_mh_execute_header, a2, v4, "Property update received from unknown remote device BTUUID is %{public}@ will not update properties", v5);
}

void sub_1000F845C(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  int v4 = 138412290;
  uint64_t v5 = v3;
  sub_10004E98C((void *)&_mh_execute_header, a2, a3, "Missing phone MEID (%@)", (uint8_t *)&v4);
}

void sub_1000F84D0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Missing phone serial", v2, v3, v4, v5, v6);
}

void sub_1000F8504()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Missing phone UUID", v2, v3, v4, v5, v6);
}

void sub_1000F8538()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Missing watch Serial", v2, v3, v4, v5, v6);
}

void sub_1000F856C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Missing watch UUID", v2, v3, v4, v5, v6);
}

void sub_1000F85A0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not serialize Albert pairing report", v2, v3, v4, v5, v6);
}

void sub_1000F85D4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Albert pairing report is not properly signed- failing to init", v2, v3, v4, v5, v6);
}

void sub_1000F8608(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138543362;
  *(void *)(a2 + 4) = a1;
  sub_10004E98C((void *)&_mh_execute_header, a3, (uint64_t)a3, "Failed to serialize Albert pairing report property list because of %{public}@", (uint8_t *)a2);
}

void sub_1000F8658()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not retrieve device identity", v2, v3, v4, v5, v6);
}

void sub_1000F868C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not retrieve device certificate", v2, v3, v4, v5, v6);
}

void sub_1000F86C0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Can't create device certificate data", v2, v3, v4, v5, v6);
}

void sub_1000F86F4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not retrieve device certificate data", v2, v3, v4, v5, v6);
}

void sub_1000F8728()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not get signature length", v2, v3, v4, v5, v6);
}

void sub_1000F875C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not allocate signature storage", v2, v3, v4, v5, v6);
}

void sub_1000F8790()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not sign message hash", v2, v3, v4, v5, v6);
}

void sub_1000F87C4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not copy private key", v2, v3, v4, v5, v6);
}

void sub_1000F87F8()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Pairing reporter asked to submit with a nil device", v2, v3, v4, v5, v6);
}

void sub_1000F882C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Failed to create Albert pairing report data", v2, v3, v4, v5, v6);
}

void sub_1000F8860()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Failed to create Albert pairing report", v2, v3, v4, v5, v6);
}

void sub_1000F8894()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not archive Albert pairing report", v2, v3, v4, v5, v6);
}

void sub_1000F88C8()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Created Albert pairing report wrapper", v2, v3, v4, v5, v6);
}

void sub_1000F88FC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Created Albert pairing report data", v2, v3, v4, v5, v6);
}

void sub_1000F8930(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 nr_safeDescription];
  int v5 = 138543362;
  uint8_t v6 = v3;
  sub_10004E98C((void *)&_mh_execute_header, a2, v4, "Could not send Albert pairing report error %{public}@", (uint8_t *)&v5);
}

void sub_1000F89C0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Missing server trust", v2, v3, v4, v5, v6);
}

void sub_1000F89F4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Failed to create hostname policy", v2, v3, v4, v5, v6);
}

void sub_1000F8A28(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 authenticationMethod];
  int v5 = 138543362;
  uint8_t v6 = v3;
  sub_10004E98C((void *)&_mh_execute_header, a2, v4, "Authentication method is not server trust, it is %{public}@", (uint8_t *)&v5);
}

void sub_1000F8AB8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138543362;
  uint64_t v5 = v3;
  sub_10004E98C((void *)&_mh_execute_header, a2, a3, "Refusing suspicious server connection to %{public}@", (uint8_t *)&v4);
}

void sub_1000F8B2C(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "SecTrustEvaluateAsyncWithError returned with status %d", (uint8_t *)v2, 8u);
}

void sub_1000F8BA4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "No trust result information found", v2, v3, v4, v5, v6);
}

void sub_1000F8BD8()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Not an Extended Validation certificate", v2, v3, v4, v5, v6);
}

void sub_1000F8C0C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = a1;
  sub_10004E98C((void *)&_mh_execute_header, a2, a3, "SSL validation failed, trust result with error %@", (uint8_t *)&v3);
}

void sub_1000F8C7C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "IDSLocalPairingSwitchActivePairedDevice, unable to switch to device, looks unpaired in IDS, create radar and unpair", v1, 2u);
}

void sub_1000F8CC0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(*(void *)(a1 + 32) + 32) UUIDString];
  int v6 = 138412546;
  uint8_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "IDSLocalPairingSwitchActivePairedDevice %@ failed with %@", (uint8_t *)&v6, 0x16u);
}

void sub_1000F8D78(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "IDSLocalPairingDisconnectActivePairedDevice failed with %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F8DF0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Private daemon connection invalidated", v2, v3, v4, v5, v6);
}

void sub_1000F8E24()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Private daemon connection interrupted", v2, v3, v4, v5, v6);
}

void sub_1000F8E58(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 nr_safeDescription];
  sub_100059E9C();
  sub_10001C798((void *)&_mh_execute_header, v3, v4, "async XPC error \"%@\": %{public}@", v5, v6, v7, v8, v9);
}

void sub_1000F8EEC(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 nr_safeDescription];
  sub_100059E9C();
  sub_10001C798((void *)&_mh_execute_header, v3, v4, "sync XPC error \"%@\": %{public}@", v5, v6, v7, v8, v9);
}

void sub_1000F8F80()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not connect to root daemon", v2, v3, v4, v5, v6);
}

void sub_1000F8FB4(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "Error %{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F9038(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "xpcCleanupPairingStoreWithUUIDs: Error %{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F90BC(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "xpcQuarantineDataWithStoreUUID: Error %{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F9140(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "xpcUnquarantineDataWithStoreUUID: Error %{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F91C4(void *a1)
{
  uint64_t v1 = [a1 nr_safeDescription];
  sub_100008A24();
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "XPC error \"Could not connect to root daemon for backup hash\": %{public}@", v4, v5, v6, v7, v8);
}

void sub_1000F9248(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "NRUnixProcessSignaler: Error %d getting process info", (uint8_t *)v2, 8u);
}

void sub_1000F92C0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "NRUnixProcessSignaler: Did not find process named %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F9338(int a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = a1;
  int v6 = *__error();
  int v7 = 134218498;
  uint64_t v8 = v5;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  __int16 v11 = 1024;
  int v12 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "NRUnixProcessSignaler: Failed to kill pid %lu for process named %@, error %d", (uint8_t *)&v7, 0x1Cu);
}

void sub_1000F93F0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Call to cancelPairingWithError: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F9468(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "ExtensiblePair EPPairer invalidateWithError: called with error %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000F94E0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6 = (objc_class *)objc_opt_class();
  int v7 = NSStringFromClass(v6);
  uint64_t v8 = *(void *)(a1 + 64);
  int v9 = 138413058;
  uint64_t v10 = a1;
  __int16 v11 = 2112;
  int v12 = v7;
  __int16 v13 = 2048;
  uint64_t v14 = v8;
  __int16 v15 = 2112;
  uint64_t v16 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Calling pairer:completedWithError: with pairer %@ on %@[%p] with error %@", (uint8_t *)&v9, 0x2Au);
}

void sub_1000F95B4(id *a1, NSObject *a2)
{
  uint64_t v3 = [*a1 nr_safeDescription];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error querying device sync state (initial) %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_1000F9650(uint64_t *a1, NSObject *a2)
{
  uint64_t v2 = *a1;
  int v3 = 138412290;
  uint64_t v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unknown sync type (%@)", (uint8_t *)&v3, 0xCu);
}

void sub_1000F96CC(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "+[NetworkRelayAgent networkRelayIdentifierForBluetoothIdentifier:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s called with nil Bluetooth identifier!", (uint8_t *)&v1, 0xCu);
}

void sub_1000F9750(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "[NRCoreAnalyticsReporter] No event to log (%@)!", (uint8_t *)&v2, 0xCu);
}

void sub_1000F97C8(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "[NRCoreAnalyticsReporter] No event to log!", v1, 2u);
}

void sub_1000F980C(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  int v5 = 138543618;
  int v6 = v4;
  __int16 v7 = 2082;
  uint64_t v8 = "+[NRCoreAnalyticsReporter reportDeviceSwitchTelemetryWithCollectionHistory:]";
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%{public}@ %{public}s - Dropping CA Report because there was no active device.", (uint8_t *)&v5, 0x16u);
}

void sub_1000F98BC(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "-[EPSagaTransactionNotification _shouldWaitForCurrentNotification:]_block_invoke";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: no active device found", (uint8_t *)&v1, 0xCu);
}

void sub_1000F9940(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to create NRPairingDaemon", v1, 2u);
}

void sub_1000F9984(NSObject *a1)
{
  int v2 = _NRIsInternalInstall();
  CFStringRef v3 = @"NO";
  int v4 = 136446978;
  int v5 = "NanoRegistry-989.4.5.2";
  if (v2) {
    CFStringRef v3 = @"YES";
  }
  __int16 v6 = 2082;
  __int16 v7 = "170";
  __int16 v8 = 2114;
  CFStringRef v9 = v3;
  __int16 v10 = 2114;
  CFStringRef v11 = @"Full-Featured Daemon";
  _os_log_error_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_ERROR, "nanoregistryd restarted. \"%{public}s\" \"%{public}s\" internalInstall=%{public}@ (%{public}@)", (uint8_t *)&v4, 0x2Au);
}

void sub_1000F9A60(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "NanoRegistry Daemon: Time to wake up and start initializing", v1, 2u);
}

void sub_1000F9AA4(void *a1, NSObject *a2)
{
  v3[0] = 67109120;
  v3[1] = [a1 integerValue];
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "NanoRegistry Daemon: Sleeping for %u seconds because of BootSleepDuration test", (uint8_t *)v3, 8u);
}

void sub_1000F9B30()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: notify_registery_dispatch keybag notification ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F9B98()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: notify_registery_dispatch UI Unlocked notification ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F9C00()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: notify_get_state UI Unlocked ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000F9C68(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F9CD4(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 cloud];
  uint64_t v4 = [v3 deviceUniqueIdentifiers];
  int v5 = 138412290;
  uint8_t v6 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Available device identifiers: %@", (uint8_t *)&v5, 0xCu);
}

void sub_1000F9D88()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Want to send message but some cloud identifiers are missing from IDS. Migration advertising request not sent.", v2, v3, v4, v5, v6);
}

void sub_1000F9DBC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: Migration succeeded", v2, v3, v4, v5, v6);
}

void sub_1000F9DF0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: Migration didn't work right now, we'll try again soon", v2, v3, v4, v5, v6);
}

void sub_1000F9E24(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000F9E94()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: Migration didn't work right now, the user can retry in a couple minutes", v2, v3, v4, v5, v6);
}

void sub_1000F9EC8()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: Migration didn't work right now, no retry is possible", v2, v3, v4, v5, v6);
}

void sub_1000F9EFC(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = [[*(id *)(a1 + 40) nr_safeDescription];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPMigrationAutoTrigger: Migration completed with error %{public}@", (uint8_t *)&v4, 0xCu);
}

void sub_1000F9F9C(os_log_t log)
{
  int v1 = 136315138;
  uint64_t v2 = "-[EPSagaTransactionUnpairDevice buildRoutingSlipEntries:serviceRegistry:completion:]_block_invoke";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s no pairing ID, can't unpair!", (uint8_t *)&v1, 0xCu);
}

void sub_1000FA020(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "CoreBluetooth failed to add service %@ with error %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000FA0A8(uint64_t a1, NSObject *a2)
{
  int v4 = *__error();
  int v5 = 138412546;
  uint64_t v6 = a1;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "#tailspin failed to create output file %@. errno: %d. Future errors will be suppressed to cut down on logging.", (uint8_t *)&v5, 0x12u);
}

void sub_1000FA148(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Trying to deallocate timer before it is invalidated.", v1, 2u);
}

void sub_1000FA18C(void *a1)
{
  int v1 = [a1 detailedError];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "Pairing error set: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000FA214(void *a1)
{
  int v1 = [a1 nr_safeDescription];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "Setting pairing error: %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000FA29C(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138543618;
  *(void *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2114;
  *(void *)(buf + 14) = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failure loading UDID file %{public}@: Unarchiver threw exception %{public}@.", buf, 0x16u);
}

void sub_1000FA304(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "MobileGestalt returned an invalid UDID %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FA37C(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "EPUDIDTracker has no system EPUDID, not caching to disk", v1, 2u);
}

void sub_1000FA3C0(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failure saving UDID: Archiver returned nil", v1, 2u);
}

void sub_1000FA404(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v5 = [a2 nr_safeDescription];
  int v6 = 138543618;
  uint64_t v7 = a1;
  __int16 v8 = 2114;
  CFStringRef v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Failure saving UDID file to %{public}@: writeToFile returned with error %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_1000FA4BC(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)long long buf = 138543362;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to archive system EPUDID: archiver threw exception %{public}@.", buf, 0xCu);
}

void sub_1000FA514()
{
  sub_1000A0B00();
  sub_1000A0B14((void *)&_mh_execute_header, v0, v1, "%{public}s: Error marking do not backup (%@)", v2, v3, v4, v5, 2u);
}

void sub_1000FA588()
{
  sub_1000A0B00();
  sub_1000A0B14((void *)&_mh_execute_header, v0, v1, "%{public}s: Error setting attributes (%@)", v2, v3, v4, v5, 2u);
}

void sub_1000FA5FC()
{
  sub_1000A0B00();
  sub_1000A0B14((void *)&_mh_execute_header, v0, v1, "%{public}s: Error writing (%@)", v2, v3, v4, v5, 2u);
}

void sub_1000FA670()
{
  sub_1000A0B00();
  sub_1000A0B14((void *)&_mh_execute_header, v0, v1, "%{public}s: Error creating directories (%@)", v2, v3, v4, v5, 2u);
}

void sub_1000FA6E4(os_log_t log)
{
  int v1 = 136446210;
  uint64_t v2 = "-[NRRestoreFromBackupTracker refresh]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%{public}s: Pref sync failed.", (uint8_t *)&v1, 0xCu);
}

void sub_1000FA768(void *a1, NSObject *a2)
{
  uint64_t v4 = +[NRDataFilePaths _pathToNanoRegistryUnpairTriggerFileDirectory];
  uint64_t v5 = [a1 nr_safeDescription];
  int v6 = 138543618;
  uint64_t v7 = v4;
  __int16 v8 = 2114;
  CFStringRef v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Deleting unpair trigger directory at %{public}@ error %{public}@", (uint8_t *)&v6, 0x16u);
}

void sub_1000FA834()
{
  sub_1000A0B00();
  sub_1000A0B14((void *)&_mh_execute_header, v0, v1, "%{public}s: %@", v2, v3, v4, v5, 2u);
}

void sub_1000FA8A8(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Can't update token %@, == NOTIFY_TOKEN_INVALID", (uint8_t *)&v2, 0xCu);
}

void sub_1000FA920(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPCharacteristicReader[%p]: CoreBluetooth CBPeripheralDelegate peripheral:didDiscoverCharacteristicsForService Not able to discover characteristic on any discovered services", (uint8_t *)&v2, 0xCu);
}

void sub_1000FA998()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPCharacteristicReader[%p]: _readFinishedWithError %@");
}

void sub_1000FAA00()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPCharacteristicReader[%p]: CoreBluetooth CBPeripheralDelegate peripheral:didUpdateValueForCharacteristic with error %@");
}

void sub_1000FAA68(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = (objc_class *)objc_opt_class();
  uint64_t v5 = NSStringFromClass(v4);
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid local property overriding specification, got %@ with value %@", (uint8_t *)&v6, 0x16u);
}

void sub_1000FAB1C()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "NRHKProductAvailableRegions regionsForProductWithName:%@ returned error %@");
}

void sub_1000FAB84()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "NRHKProductVersions UDIDeviceIdentifierForProductWithName:%@ returned error %@");
}

void sub_1000FABEC()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "NRHKProductVersions versionForProductWithName:%@ returned error %@");
}

void sub_1000FAC54()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "Getter %@ threw %@. This is *SUPER-BAD*");
}

void sub_1000FACBC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138412546;
  *(void *)&void v3[4] = *(void *)(a1 + 32);
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10001C7F4((void *)&_mh_execute_header, a2, a3, "Getter %@ threw %@. This is *SUPER-BAD*", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1000FAD38(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FADA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FAE14()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "Failed to retrieve major version for %@ with error: %@");
}

void sub_1000FAE7C()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "Failed to retrieve system information dictionary from URL %@ with error: %@");
}

void sub_1000FAEE4(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to retrieve ECG algorithm version with error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FAF5C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FAF94(os_log_t log)
{
  int v1 = 136315138;
  int v2 = "-[NRExtensiblePair advertiseAndPairWithAdvertisedName:andPairingMode:withGetStartedBlock:]";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%s: Invalidating IDS channels", (uint8_t *)&v1, 0xCu);
}

void sub_1000FB018(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) uuid];
  int v6 = [v5 UUIDString];
  int v7 = 138412546;
  __int16 v8 = v6;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "BT Characteristic write failed to %@ with error %@", (uint8_t *)&v7, 0x16u);
}

void sub_1000FB0DC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB114(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10004E92C((void *)&_mh_execute_header, a1, a3, "Unknown pairing strategy, not able to return an endpoint resource", a5, a6, a7, a8, 0);
}

void sub_1000FB14C(void *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [a1 appPath];
  int v6 = 138543618;
  int v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "client %{public}@ is missing the %@ entitlement", (uint8_t *)&v6, 0x16u);
}

void sub_1000FB1FC(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Internal functionality not available in customer builds", v1, 2u);
}

void sub_1000FB240(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB278(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB2B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB2E8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB354(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB3C0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FB438(uint64_t a1, void *a2)
{
  __int16 v8 = [a2 context];
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "(%@): Message %@ dropped because it has an invalid sender", v4, v5, v6, v7, 2u);
}

void sub_1000FB4DC(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "DEBUG: We had a DPD and we're not seeing it now. Here's a dup of the accounts and devices.", v1, 2u);
}

void sub_1000FB520(void *a1)
{
  int v1 = [a1 nr_safeDescription];
  sub_10001C798((void *)&_mh_execute_header, v2, v3, "IDS error sending request: %{public}@ %{public}@", v4, v5, v6, v7, 2u);
}

void sub_1000FB5C0()
{
  sub_1000C6CF0();
  sub_1000C6CBC(v1, v2, v3, 5.8382e-34);
  sub_1000C6CD4((void *)&_mh_execute_header, "Failure saving migration routing slip file %{public}@: Archiver threw exception %{public}@.", v4, v5);
}

void sub_1000FB604(uint64_t a1, NSObject *a2)
{
  int v2 = 138543362;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failure saving migration routing slip file %{public}@: Archiver returned \"nil\"", (uint8_t *)&v2, 0xCu);
}

void sub_1000FB67C()
{
  sub_1000C6CF0();
  sub_1000C6CBC(v1, v2, v3, 5.8382e-34);
  sub_1000C6CD4((void *)&_mh_execute_header, "Failure saving migration routing slip file %{public}@: writeToFile returned \"NO\" %{public}@", v4, v5);
}

void sub_1000FB6C0()
{
  sub_1000C6CF0();
  uint64_t v2 = (void *)v1;
  sub_1000C6CBC(v1, v3, v4, 5.8382e-34);
  sub_1000C6CD4((void *)&_mh_execute_header, "Failure loading migration routing slip file %{public}@: Unarchiver threw exception %{public}@.", v5, v6);
}

void sub_1000FB710(void *a1, NSObject *a2)
{
  uint64_t v4 = +[NRDataFilePaths pathToNanoRegistryMigrationRoutingSlip];
  uint64_t v5 = [a1 nr_safeDescription];
  int v6 = 138543618;
  uint64_t v7 = v4;
  __int16 v8 = 2114;
  uint64_t v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failure removing migration routing slip file %{public}@: Error %{public}@.", (uint8_t *)&v6, 0x16u);
}

void sub_1000FB7DC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "EPScalablePipeManagerManager: CoreBluetooth CBScalablePipeManager didRegisterEndpoint %@ error %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000FB864(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "NOT Restarting bluetoothd...", v1, 2u);
}

void sub_1000FB8A8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  __int16 v5 = (objc_class *)objc_opt_class();
  uint64_t v6 = NSStringFromClass(v5);
  int v7 = 138412546;
  __int16 v8 = v6;
  __int16 v9 = 2112;
  uint64_t v10 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "************ Resource manager %@ reported an error %@", (uint8_t *)&v7, 0x16u);
}

void sub_1000FB95C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to send version change to phone, no active paired device", v1, 2u);
}

void sub_1000FB9A0()
{
  sub_100008A24();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Failed to add notification request with error: %@", v1, 0xCu);
}

void sub_1000FBA14()
{
  sub_100008A24();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to created a formatted message for launching URL with launchedBy %@; SInt32 error = %@",
    v2,
    0x16u);
}

void sub_1000FBA98()
{
  sub_100008A24();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "openApplication:withOptions:completion: finished with SInt32 error = %@", v1, 0xCu);
}

void sub_1000FBB0C(void *a1, NSObject *a2)
{
  __int16 v3 = [a1 localizedDescription];
  sub_100008A24();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error opening tap-to-radar: %@", v4, 0xCu);
}

void sub_1000FBBA0()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPCharacteristicWriter[%p]: _writeFinishedWithError %@");
}

void sub_1000FBC08(uint64_t a1, NSObject *a2)
{
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPCharacteristicWriter[%p]: No services in list at EPCharacteristicWriterStateDiscoverNextCharacteristics", (uint8_t *)&v2, 0xCu);
}

void sub_1000FBC80(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) UUIDString];
  int v5 = 134218242;
  uint64_t v6 = a1;
  __int16 v7 = 2112;
  __int16 v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPCharacteristicWriter[%p]: Did NOT find service %@", (uint8_t *)&v5, 0x16u);
}

void sub_1000FBD34()
{
  sub_10004E9D8();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPCharacteristicWriter[%p]: CoreBluetooth CBPeripheralDelegate peripheral:didWriteValueForCharacteristic with error %@");
}

void sub_1000FBD9C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to encrypt challenge response", v1, 2u);
}

void sub_1000FBDE0()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPMigrationAutoTrigger: notify_registery_dispatch keychain notification ***FAILED*** and returned %ld", v2, v3, v4, v5, v6);
}

void sub_1000FBE48()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: Found old key; unable to store key with version",
    v2,
    v3,
    v4,
    v5,
    v6);
}

void sub_1000FBE7C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000FBEEC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: Error creating random bytes", v2, v3, v4, v5, v6);
}

void sub_1000FBF20()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: salt padder malformed UUID", v2, v3, v4, v5, v6);
}

void sub_1000FBF54()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: padded salt something something", v2, v3, v4, v5, v6);
}

void sub_1000FBF88()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: encryptPayload: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FBFBC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: Error creating random salt", v2, v3, v4, v5, v6);
}

void sub_1000FBFF0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: no padded salt", v2, v3, v4, v5, v6);
}

void sub_1000FC024()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: decryptPayload: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FC058()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: encryptPayloadRaw:withSalt:date: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FC08C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: encryptPayloadRaw:withSalt:date: Failed to create time derived key", v2, v3, v4, v5, v6);
}

void sub_1000FC0C0()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: decryptPayloadRaw:withSaltdate: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FC0F4()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: decryptPayloadRaw:withSalt:date: Could not decrypt and verify payload", v2, v3, v4, v5, v6);
}

void sub_1000FC128()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: encryptPayloadRaw:withSalt:key: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FC15C()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: encryptPayloadRaw:withSalt:key: Failed to sha plaintext", v2, v3, v4, v5, v6);
}

void sub_1000FC190(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithInt:a1];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "EPKey: encryptPayloadRaw:withSalt:key: Could not encrypt payload (%{public}@)", v4, v5, v6, v7, 2u);
}

void sub_1000FC224()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKey: decryptPayloadRaw:withSalt:key: Failed to retrieve key from keychain", v2, v3, v4, v5, v6);
}

void sub_1000FC258(uint64_t a1)
{
  uint64_t v1 = +[NSNumber numberWithInt:a1];
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "EPKey: derivedKeyFrom Failed to create key (%{public}@)", v4, v5, v6, v7, 2u);
}

void sub_1000FC2EC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKeychain: derivedKeyFrom Missing key or something", v2, v3, v4, v5, v6);
}

void sub_1000FC320()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKeychain: Key index out-of-range", v2, v3, v4, v5, v6);
}

void sub_1000FC354()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKeychain: timeDerivedKeyFrom Arggh! Time is negative!", v2, v3, v4, v5, v6);
}

void sub_1000FC388()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPKeychain: Error creating random key", v2, v3, v4, v5, v6);
}

void sub_1000FC3BC()
{
  sub_100018E08();
  sub_100008A08((void *)&_mh_execute_header, v0, v1, "EPKeychain: Failed to store password %ld", v2, v3, v4, v5, v6);
}

void sub_1000FC424()
{
  sub_1000DE580();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPKeychain: Failed to retrieve password for %{public}@ from keychain, error code %ld");
}

void sub_1000FC48C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)uint64_t v3 = 138543618;
  *(void *)&void v3[4] = a1;
  *(_WORD *)&v3[12] = 2112;
  *(void *)&v3[14] = a2;
  sub_10001C7F4((void *)&_mh_execute_header, a2, a3, "EPKeychain: Failed to decode password for %{public}@ from keychain: %@", *(void *)v3, *(void *)&v3[8], *(void *)&v3[16]);
}

void sub_1000FC504()
{
  sub_1000DE580();
  sub_10001C7F4((void *)&_mh_execute_header, v0, v1, "EPKeychain: Failed to retrieve key for %{public}@ from keychain, error code %ld");
}

void sub_1000FC56C()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  os_log_t v1 = NSStringFromClass(v0);
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "%{public}@ deviceID is nil", v4, v5, v6, v7, 2u);
}

void sub_1000FC5F8()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  os_log_t v1 = NSStringFromClass(v0);
  sub_10000E6E0((void *)&_mh_execute_header, v2, v3, "%{public}@ Soft link failure", v4, v5, v6, v7, 2u);
}

void sub_1000FC684(uint64_t a1, void *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [a2 nr_safeDescription];
  sub_100059E9C();
  sub_10001C798((void *)&_mh_execute_header, v6, v7, "%{public}@ Backup error, will retry: (%{public}@)", v8, v9, v10, v11, v12);
}

void sub_1000FC730(uint64_t a1, void *a2)
{
  uint64_t v3 = (objc_class *)objc_opt_class();
  uint64_t v4 = NSStringFromClass(v3);
  uint64_t v5 = [a2 nr_safeDescription];
  sub_100059E9C();
  sub_10001C798((void *)&_mh_execute_header, v6, v7, "%{public}@ Backup error on retry, giving up: (%{public}@)", v8, v9, v10, v11, v12);
}

uint64_t sub_1000FC7DC()
{
  uint64_t v0 = abort_report_np();
  return sub_1000FC804(v0);
}

void sub_1000FC804(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unable to send system version message error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FC87C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5 = [*(id *)(a1 + 32) UUIDString];
  int v6 = 138412546;
  uint64_t v7 = v5;
  __int16 v8 = 2112;
  uint64_t v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "IDSLocalPairingForgetPairedDevice %@ failed with %@", (uint8_t *)&v6, 0x16u);
}

void sub_1000FC930()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not decrypt OOB key in read response", v2, v3, v4, v5, v6);
}

void sub_1000FC964()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not archive challenge response for write", v2, v3, v4, v5, v6);
}

void sub_1000FC998()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Could not locate pairing reader entry for read response", v2, v3, v4, v5, v6);
}

void sub_1000FC9CC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Reader read no data", v2, v3, v4, v5, v6);
}

void sub_1000FCA00(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Characteristic write of challenge failed with error %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FCA78()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "EPPairerDelegate pairer:requestWithType:passkey: OOBKey is missing", v2, v3, v4, v5, v6);
}

void sub_1000FCAAC()
{
  sub_10004E9A4();
  sub_10004E92C((void *)&_mh_execute_header, v0, v1, "Migration Bluetooth pairing timed out- logging error and rolling back", v2, v3, v4, v5, v6);
}

void sub_1000FCAE0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPSagaTransactionPairing: failWithError: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1000FCB58(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "NRKeychainSyncStatusManager: Keychain sync status poll timed out!!! Assuming keychain sync is disabled!", v1, 2u);
}

void sub_1000FCB9C(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to create directory %@ error %@", (uint8_t *)&v3, 0x16u);
}

void sub_1000FCC24(id *a1, NSObject *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = v4[3];
  uint64_t v6 = [v4 currentEntry];
  uint64_t v7 = [v6 shortDescription];
  __int16 v8 = [*a1 currentEntry];
  uint64_t v9 = [v8 errors];
  int v10 = 138543874;
  uint64_t v11 = v5;
  __int16 v12 = 2114;
  __int16 v13 = v7;
  __int16 v14 = 2114;
  __int16 v15 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "EPRoutingSlip[%{public}@]: Errors in transaction %{public}@: %{public}@", (uint8_t *)&v10, 0x20u);
}

uint64_t AnalyticsSendEvent()
{
  return _AnalyticsSendEvent();
}

uint64_t BRGetCurrentMetricIDFromMetricDir()
{
  return _BRGetCurrentMetricIDFromMetricDir();
}

uint64_t BRPairingTimeEventToString()
{
  return _BRPairingTimeEventToString();
}

uint64_t BRStaleOrNoPairingMetric()
{
  return _BRStaleOrNoPairingMetric();
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return _CCKeyDerivationPBKDF(algorithm, password, passwordLen, salt, saltLen, prf, rounds, derivedKey, derivedKeyLen);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return _CFPreferencesAppSynchronize(applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyMultiple(keysToFetch, applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppBooleanValue(key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return _CFPreferencesGetAppIntegerValue(key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return _CFReadStreamRead(stream, buffer, bufferLength);
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

SInt32 CFUserNotificationCancel(CFUserNotificationRef userNotification)
{
  return _CFUserNotificationCancel(userNotification);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return _CFUserNotificationCreateRunLoopSource(allocator, userNotification, callout, order);
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return _CFWriteStreamWrite(stream, buffer, bufferLength);
}

uint64_t HKIrregularRhythmNotificationsV1UDIDeviceIdentifier()
{
  return _HKIrregularRhythmNotificationsV1UDIDeviceIdentifier();
}

uint64_t HKIrregularRhythmNotificationsV1UpdateVersion()
{
  return _HKIrregularRhythmNotificationsV1UpdateVersion();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IDSGetPairedDevicesWithCompletionBlock()
{
  return _IDSGetPairedDevicesWithCompletionBlock();
}

uint64_t IDSInitialLocalSyncCompletedForServices()
{
  return _IDSInitialLocalSyncCompletedForServices();
}

uint64_t IDSInitialLocalSyncStartedForServices()
{
  return _IDSInitialLocalSyncStartedForServices();
}

uint64_t IDSLocalPairingAddPairedDeviceWithInfo()
{
  return _IDSLocalPairingAddPairedDeviceWithInfo();
}

uint64_t IDSLocalPairingConnectPairedDevice()
{
  return _IDSLocalPairingConnectPairedDevice();
}

uint64_t IDSLocalPairingDeletePairedDevice()
{
  return _IDSLocalPairingDeletePairedDevice();
}

uint64_t IDSLocalPairingDisconnectActivePairedDevice()
{
  return _IDSLocalPairingDisconnectActivePairedDevice();
}

uint64_t IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier()
{
  return _IDSLocalPairingDropAllMessagesWithoutAnyAllowedTrafficClassifier();
}

uint64_t IDSLocalPairingForgetPairedDevice()
{
  return _IDSLocalPairingForgetPairedDevice();
}

uint64_t IDSLocalPairingGetPairedDevicesWithCompletionBlock()
{
  return _IDSLocalPairingGetPairedDevicesWithCompletionBlock();
}

uint64_t IDSLocalPairingGetPairingDevicesWithCompletionBlock()
{
  return _IDSLocalPairingGetPairingDevicesWithCompletionBlock();
}

uint64_t IDSLocalPairingSetAllowedTrafficClassifiersForDevice()
{
  return _IDSLocalPairingSetAllowedTrafficClassifiersForDevice();
}

uint64_t IDSLocalPairingSetupCompletedForPairedDevice()
{
  return _IDSLocalPairingSetupCompletedForPairedDevice();
}

uint64_t IDSLocalPairingStopForDevice()
{
  return _IDSLocalPairingStopForDevice();
}

uint64_t IDSLocalPairingSwitchActivePairedDevice()
{
  return _IDSLocalPairingSwitchActivePairedDevice();
}

uint64_t IDSLocalPairingUnpairForDevice()
{
  return _IDSLocalPairingUnpairForDevice();
}

uint64_t IDSLocalPairingUnpairStartForDevice()
{
  return _IDSLocalPairingUnpairStartForDevice();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithProperties(AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

IOReturn IOPMCancelScheduledPowerEvent(CFDateRef time_to_wake, CFStringRef my_id, CFStringRef type)
{
  return _IOPMCancelScheduledPowerEvent(time_to_wake, my_id, type);
}

uint64_t IOPMRequestSysWake()
{
  return _IOPMRequestSysWake();
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

uint64_t IXStringForAppRemovability()
{
  return _IXStringForAppRemovability();
}

uint64_t MGCancelNotifications()
{
  return _MGCancelNotifications();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetProductType()
{
  return _MGGetProductType();
}

uint64_t MGGetStringAnswer()
{
  return _MGGetStringAnswer();
}

uint64_t MGRegisterForBulkUpdates()
{
  return _MGRegisterForBulkUpdates();
}

uint64_t MKBDeviceLockAssertion()
{
  return _MKBDeviceLockAssertion();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

uint64_t NRPBPropertyReadFrom()
{
  return _NRPBPropertyReadFrom();
}

uint64_t NRPBTermsEventReadFrom()
{
  return _NRPBTermsEventReadFrom();
}

uint64_t NRRawVersionFromString()
{
  return _NRRawVersionFromString();
}

uint64_t NRWatchOSVersion()
{
  return _NRWatchOSVersion();
}

Class NSClassFromString(NSString *aClassName)
{
  return _NSClassFromString(aClassName);
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return _NSSearchPathForDirectoriesInDomains(directory, domainMask, expandTilde);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t NSStringFromRBSTaskState()
{
  return _NSStringFromRBSTaskState();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return _PBDataWriterWriteBOOLField();
}

uint64_t PBDataWriterWriteDataField()
{
  return _PBDataWriterWriteDataField();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return _PBDataWriterWriteDoubleField();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return _PBDataWriterWriteInt32Field();
}

uint64_t PBDataWriterWriteInt64Field()
{
  return _PBDataWriterWriteInt64Field();
}

uint64_t PBDataWriterWriteStringField()
{
  return _PBDataWriterWriteStringField();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return _PBDataWriterWriteSubmessage();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return _PBDataWriterWriteUint32Field();
}

uint64_t PBReaderPlaceMark()
{
  return _PBReaderPlaceMark();
}

uint64_t PBReaderReadData()
{
  return _PBReaderReadData();
}

uint64_t PBReaderReadString()
{
  return _PBReaderReadString();
}

uint64_t PBReaderRecallMark()
{
  return _PBReaderRecallMark();
}

uint64_t PBReaderSkipValueWithTag()
{
  return _PBReaderSkipValueWithTag();
}

uint64_t PKCloudKitPassSyncEnabled()
{
  return _PKCloudKitPassSyncEnabled();
}

uint64_t SBSSpringBoardServerPort()
{
  return _SBSSpringBoardServerPort();
}

uint64_t SBSetApplicationBadgeNumber()
{
  return _SBSetApplicationBadgeNumber();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

OSStatus SecIdentityCopyCertificate(SecIdentityRef identityRef, SecCertificateRef *certificateRef)
{
  return _SecIdentityCopyCertificate(identityRef, certificateRef);
}

OSStatus SecIdentityCopyPrivateKey(SecIdentityRef identityRef, SecKeyRef *privateKeyRef)
{
  return _SecIdentityCopyPrivateKey(identityRef, privateKeyRef);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

size_t SecKeyGetBlockSize(SecKeyRef key)
{
  return _SecKeyGetBlockSize(key);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return _SecPolicyCreateSSL(server, hostname);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFDictionaryRef SecTrustCopyResult(SecTrustRef trust)
{
  return _SecTrustCopyResult(trust);
}

OSStatus SecTrustEvaluateAsyncWithError(SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return _SecTrustEvaluateAsyncWithError(trust, queue, result);
}

OSStatus SecTrustSetNetworkFetchAllowed(SecTrustRef trust, Boolean allowFetch)
{
  return _SecTrustSetNetworkFetchAllowed(trust, allowFetch);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return _SecTrustSetPolicies(trust, policies);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFCopySystemVersionDictionary()
{
  return __CFCopySystemVersionDictionary();
}

uint64_t _NRIsAutomated()
{
  return __NRIsAutomated();
}

uint64_t _NRIsDemoModeEnabled()
{
  return __NRIsDemoModeEnabled();
}

uint64_t _NRIsInternalInstall()
{
  return __NRIsInternalInstall();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _sl_dlopen()
{
  return __sl_dlopen();
}

uint64_t abort_report_np()
{
  return _abort_report_np();
}

uint64_t ccaes_ctr_crypt_mode()
{
  return _ccaes_ctr_crypt_mode();
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return _class_copyPropertyList(cls, outCount);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return _clock_gettime_nsec_np(__clock_id);
}

int close(int a1)
{
  return _close(a1);
}

uint64_t createStringFromNRLinkType()
{
  return _createStringFromNRLinkType();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return _dispatch_block_create(flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return _dispatch_queue_get_label(queue);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

long double fmod(long double __x, long double __y)
{
  return _fmod(__x, __y);
}

void free(void *a1)
{
}

uint64_t kdebug_trace()
{
  return _kdebug_trace();
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

uint64_t link_monitor_log_handle()
{
  return _link_monitor_log_handle();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

uint64_t networkrelay_pairing_log_handle()
{
  return _networkrelay_pairing_log_handle();
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return _notify_get_state(token, state64);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return _notify_register_check(name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return _notify_set_state(token, state64);
}

uint64_t nrGetPairingError()
{
  return _nrGetPairingError();
}

uint64_t nrGetReportStringForErrorCode()
{
  return _nrGetReportStringForErrorCode();
}

uint64_t nr_daemon_log()
{
  return _nr_daemon_log();
}

uint64_t nr_framework_log()
{
  return _nr_framework_log();
}

uint64_t nr_pairing_reporter_log()
{
  return _nr_pairing_reporter_log();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return _os_unfair_lock_lock_with_options();
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return _os_unfair_lock_trylock(lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return _property_getName(property);
}

int puts(const char *a1)
{
  return _puts(a1);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

uint64_t tailspin_dump_output_with_options_sync()
{
  return _tailspin_dump_output_with_options_sync();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

id objc_msgSend_IDSAccountAndDevicePresent(void *a1, const char *a2, ...)
{
  return [a1 IDSAccountAndDevicePresent];
}

id objc_msgSend_NRSHA256(void *a1, const char *a2, ...)
{
  return [a1 NRSHA256];
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return [a1 RSSI];
}

id objc_msgSend_SHA256Data(void *a1, const char *a2, ...)
{
  return [a1 SHA256Data];
}

id objc_msgSend_UDIDChanged(void *a1, const char *a2, ...)
{
  return [a1 UDIDChanged];
}

id objc_msgSend_UDIDSHA256(void *a1, const char *a2, ...)
{
  return [a1 UDIDSHA256];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return [a1 URL];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend__addTimeout(void *a1, const char *a2, ...)
{
  return [a1 _addTimeout];
}

id objc_msgSend__addWaitForIsSetupTransactionIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 _addWaitForIsSetupTransactionIfNeeded];
}

id objc_msgSend__beginDirectBluetoothPairingTransaction(void *a1, const char *a2, ...)
{
  return [a1 _beginDirectBluetoothPairingTransaction];
}

id objc_msgSend__beginNetworkRelayBluetoothPairingTransaction(void *a1, const char *a2, ...)
{
  return [a1 _beginNetworkRelayBluetoothPairingTransaction];
}

id objc_msgSend__beginNetworkRelayDiscovery(void *a1, const char *a2, ...)
{
  return [a1 _beginNetworkRelayDiscovery];
}

id objc_msgSend__bluetoothIDOfActiveDevice(void *a1, const char *a2, ...)
{
  return [a1 _bluetoothIDOfActiveDevice];
}

id objc_msgSend__clear(void *a1, const char *a2, ...)
{
  return [a1 _clear];
}

id objc_msgSend__clearIfFirstAccessSinceBoot(void *a1, const char *a2, ...)
{
  return [a1 _clearIfFirstAccessSinceBoot];
}

id objc_msgSend__clearOOBKey(void *a1, const char *a2, ...)
{
  return [a1 _clearOOBKey];
}

id objc_msgSend__copyPhoneIdentity(void *a1, const char *a2, ...)
{
  return [a1 _copyPhoneIdentity];
}

id objc_msgSend__currentAppsPredicates(void *a1, const char *a2, ...)
{
  return [a1 _currentAppsPredicates];
}

id objc_msgSend__daemonConnection(void *a1, const char *a2, ...)
{
  return [a1 _daemonConnection];
}

id objc_msgSend__deviceLanguage(void *a1, const char *a2, ...)
{
  return [a1 _deviceLanguage];
}

id objc_msgSend__dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 _dictionaryRepresentation];
}

id objc_msgSend__dismissAlert(void *a1, const char *a2, ...)
{
  return [a1 _dismissAlert];
}

id objc_msgSend__gateCheckOk(void *a1, const char *a2, ...)
{
  return [a1 _gateCheckOk];
}

id objc_msgSend__generateNearbyConnectedDelegateCalls(void *a1, const char *a2, ...)
{
  return [a1 _generateNearbyConnectedDelegateCalls];
}

id objc_msgSend__getPairingExtendedMetadata(void *a1, const char *a2, ...)
{
  return [a1 _getPairingExtendedMetadata];
}

id objc_msgSend__getSunriseDate(void *a1, const char *a2, ...)
{
  return [a1 _getSunriseDate];
}

id objc_msgSend__hasInternalEntitlement(void *a1, const char *a2, ...)
{
  return [a1 _hasInternalEntitlement];
}

id objc_msgSend__hasPairer(void *a1, const char *a2, ...)
{
  return [a1 _hasPairer];
}

id objc_msgSend__holdAlternateAccountOSTransaction(void *a1, const char *a2, ...)
{
  return [a1 _holdAlternateAccountOSTransaction];
}

id objc_msgSend__initLocalDeviceInfo(void *a1, const char *a2, ...)
{
  return [a1 _initLocalDeviceInfo];
}

id objc_msgSend__initialize(void *a1, const char *a2, ...)
{
  return [a1 _initialize];
}

id objc_msgSend__invalidate(void *a1, const char *a2, ...)
{
  return [a1 _invalidate];
}

id objc_msgSend__invalidateIDSChannel(void *a1, const char *a2, ...)
{
  return [a1 _invalidateIDSChannel];
}

id objc_msgSend__invalidateTimer(void *a1, const char *a2, ...)
{
  return [a1 _invalidateTimer];
}

id objc_msgSend__isBridgeForeground(void *a1, const char *a2, ...)
{
  return [a1 _isBridgeForeground];
}

id objc_msgSend__isIDSReady(void *a1, const char *a2, ...)
{
  return [a1 _isIDSReady];
}

id objc_msgSend__migrationReporter(void *a1, const char *a2, ...)
{
  return [a1 _migrationReporter];
}

id objc_msgSend__notifyClients(void *a1, const char *a2, ...)
{
  return [a1 _notifyClients];
}

id objc_msgSend__pathToNanoRegistryUnpairTriggerFileDirectory(void *a1, const char *a2, ...)
{
  return [a1 _pathToNanoRegistryUnpairTriggerFileDirectory];
}

id objc_msgSend__pathToUnpairTriggerFile(void *a1, const char *a2, ...)
{
  return [a1 _pathToUnpairTriggerFile];
}

id objc_msgSend__phoneCertificateData(void *a1, const char *a2, ...)
{
  return [a1 _phoneCertificateData];
}

id objc_msgSend__presentAlertsIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 _presentAlertsIfNeeded];
}

id objc_msgSend__productBuildVersion(void *a1, const char *a2, ...)
{
  return [a1 _productBuildVersion];
}

id objc_msgSend__rawDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return [a1 _rawDefaultPairedDevice];
}

id objc_msgSend__readConnectivityStatus(void *a1, const char *a2, ...)
{
  return [a1 _readConnectivityStatus];
}

id objc_msgSend__recordIDSError(void *a1, const char *a2, ...)
{
  return [a1 _recordIDSError];
}

id objc_msgSend__recoredTimeoutError(void *a1, const char *a2, ...)
{
  return [a1 _recoredTimeoutError];
}

id objc_msgSend__releaseAlternateAccountOSTransaction(void *a1, const char *a2, ...)
{
  return [a1 _releaseAlternateAccountOSTransaction];
}

id objc_msgSend__reset(void *a1, const char *a2, ...)
{
  return [a1 _reset];
}

id objc_msgSend__resumeMessageDeliveryQueue(void *a1, const char *a2, ...)
{
  return [a1 _resumeMessageDeliveryQueue];
}

id objc_msgSend__setShowGraduationUnpairInstructions(void *a1, const char *a2, ...)
{
  return [a1 _setShowGraduationUnpairInstructions];
}

id objc_msgSend__sharedPhoneCertificate(void *a1, const char *a2, ...)
{
  return [a1 _sharedPhoneCertificate];
}

id objc_msgSend__startScanningForCandidates(void *a1, const char *a2, ...)
{
  return [a1 _startScanningForCandidates];
}

id objc_msgSend__submissionURL(void *a1, const char *a2, ...)
{
  return [a1 _submissionURL];
}

id objc_msgSend__submitRTCMetric(void *a1, const char *a2, ...)
{
  return [a1 _submitRTCMetric];
}

id objc_msgSend__supportsR2(void *a1, const char *a2, ...)
{
  return [a1 _supportsR2];
}

id objc_msgSend__supportsWatchCompanionCapability(void *a1, const char *a2, ...)
{
  return [a1 _supportsWatchCompanionCapability];
}

id objc_msgSend__suspend(void *a1, const char *a2, ...)
{
  return [a1 _suspend];
}

id objc_msgSend__suspendMessageDeliveryQueue(void *a1, const char *a2, ...)
{
  return [a1 _suspendMessageDeliveryQueue];
}

id objc_msgSend__synchronize(void *a1, const char *a2, ...)
{
  return [a1 _synchronize];
}

id objc_msgSend__transactionCompleted(void *a1, const char *a2, ...)
{
  return [a1 _transactionCompleted];
}

id objc_msgSend__transactionCoordinatorHasBecomeIdle(void *a1, const char *a2, ...)
{
  return [a1 _transactionCoordinatorHasBecomeIdle];
}

id objc_msgSend__transactionDidComplete(void *a1, const char *a2, ...)
{
  return [a1 _transactionDidComplete];
}

id objc_msgSend__updateIDSDeviceUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 _updateIDSDeviceUniqueIdentifiers];
}

id objc_msgSend__updateTimer(void *a1, const char *a2, ...)
{
  return [a1 _updateTimer];
}

id objc_msgSend_abortPairingReason(void *a1, const char *a2, ...)
{
  return [a1 abortPairingReason];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return [a1 absoluteString];
}

id objc_msgSend_accountAndDeviceReady(void *a1, const char *a2, ...)
{
  return [a1 accountAndDeviceReady];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return [a1 accounts];
}

id objc_msgSend_ackXPCEvents(void *a1, const char *a2, ...)
{
  return [a1 ackXPCEvents];
}

id objc_msgSend_acknowledgedDeviceName(void *a1, const char *a2, ...)
{
  return [a1 acknowledgedDeviceName];
}

id objc_msgSend_acknowledgedDeviceSerialNumber(void *a1, const char *a2, ...)
{
  return [a1 acknowledgedDeviceSerialNumber];
}

id objc_msgSend_actionIdentifier(void *a1, const char *a2, ...)
{
  return [a1 actionIdentifier];
}

id objc_msgSend_activeDevice(void *a1, const char *a2, ...)
{
  return [a1 activeDevice];
}

id objc_msgSend_activeDeviceAssertions(void *a1, const char *a2, ...)
{
  return [a1 activeDeviceAssertions];
}

id objc_msgSend_activeDeviceID(void *a1, const char *a2, ...)
{
  return [a1 activeDeviceID];
}

id objc_msgSend_activePairedDeviceID(void *a1, const char *a2, ...)
{
  return [a1 activePairedDeviceID];
}

id objc_msgSend_activePairedDeviceSelectorBlock(void *a1, const char *a2, ...)
{
  return [a1 activePairedDeviceSelectorBlock];
}

id objc_msgSend_activities(void *a1, const char *a2, ...)
{
  return [a1 activities];
}

id objc_msgSend_activityGroups(void *a1, const char *a2, ...)
{
  return [a1 activityGroups];
}

id objc_msgSend_activityInfo(void *a1, const char *a2, ...)
{
  return [a1 activityInfo];
}

id objc_msgSend_activityState(void *a1, const char *a2, ...)
{
  return [a1 activityState];
}

id objc_msgSend_addDiffObserver(void *a1, const char *a2, ...)
{
  return [a1 addDiffObserver];
}

id objc_msgSend_advertisedName(void *a1, const char *a2, ...)
{
  return [a1 advertisedName];
}

id objc_msgSend_advertiser(void *a1, const char *a2, ...)
{
  return [a1 advertiser];
}

id objc_msgSend_advertisingName(void *a1, const char *a2, ...)
{
  return [a1 advertisingName];
}

id objc_msgSend_agent(void *a1, const char *a2, ...)
{
  return [a1 agent];
}

id objc_msgSend_agentManager(void *a1, const char *a2, ...)
{
  return [a1 agentManager];
}

id objc_msgSend_aggdReportString(void *a1, const char *a2, ...)
{
  return [a1 aggdReportString];
}

id objc_msgSend_albertReportPairingMode(void *a1, const char *a2, ...)
{
  return [a1 albertReportPairingMode];
}

id objc_msgSend_alertName(void *a1, const char *a2, ...)
{
  return [a1 alertName];
}

id objc_msgSend_allAltAccount(void *a1, const char *a2, ...)
{
  return [a1 allAltAccount];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return [a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return [a1 allObjects];
}

id objc_msgSend_allPairingIDs(void *a1, const char *a2, ...)
{
  return [a1 allPairingIDs];
}

id objc_msgSend_allSecurePropertyIDs(void *a1, const char *a2, ...)
{
  return [a1 allSecurePropertyIDs];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_allocateDictionaries(void *a1, const char *a2, ...)
{
  return [a1 allocateDictionaries];
}

id objc_msgSend_alreadyPaired(void *a1, const char *a2, ...)
{
  return [a1 alreadyPaired];
}

id objc_msgSend_alternateButtonWasPressed(void *a1, const char *a2, ...)
{
  return [a1 alternateButtonWasPressed];
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return [a1 anyObject];
}

id objc_msgSend_appPath(void *a1, const char *a2, ...)
{
  return [a1 appPath];
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return [a1 appleID];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_arrayValues(void *a1, const char *a2, ...)
{
  return [a1 arrayValues];
}

id objc_msgSend_assertion(void *a1, const char *a2, ...)
{
  return [a1 assertion];
}

id objc_msgSend_assertionID(void *a1, const char *a2, ...)
{
  return [a1 assertionID];
}

id objc_msgSend_assertions(void *a1, const char *a2, ...)
{
  return [a1 assertions];
}

id objc_msgSend_assetDownloadQueue(void *a1, const char *a2, ...)
{
  return [a1 assetDownloadQueue];
}

id objc_msgSend_assetId(void *a1, const char *a2, ...)
{
  return [a1 assetId];
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return [a1 attributes];
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return [a1 authenticationMethod];
}

id objc_msgSend_availability(void *a1, const char *a2, ...)
{
  return [a1 availability];
}

id objc_msgSend_backupHash(void *a1, const char *a2, ...)
{
  return [a1 backupHash];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return [a1 begin];
}

id objc_msgSend_bluetoothMACAddress(void *a1, const char *a2, ...)
{
  return [a1 bluetoothMACAddress];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_broadcastVersionChangeToDisconnectedWatches(void *a1, const char *a2, ...)
{
  return [a1 broadcastVersionChangeToDisconnectedWatches];
}

id objc_msgSend_btAddress(void *a1, const char *a2, ...)
{
  return [a1 btAddress];
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return [a1 bundle];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_cacheUDID(void *a1, const char *a2, ...)
{
  return [a1 cacheUDID];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return [a1 cancel];
}

id objc_msgSend_cancelDiscovery(void *a1, const char *a2, ...)
{
  return [a1 cancelDiscovery];
}

id objc_msgSend_cancelDiscoveryCounter(void *a1, const char *a2, ...)
{
  return [a1 cancelDiscoveryCounter];
}

id objc_msgSend_cancelScheduledWake(void *a1, const char *a2, ...)
{
  return [a1 cancelScheduledWake];
}

id objc_msgSend_cancelTimer(void *a1, const char *a2, ...)
{
  return [a1 cancelTimer];
}

id objc_msgSend_canceled(void *a1, const char *a2, ...)
{
  return [a1 canceled];
}

id objc_msgSend_candidate(void *a1, const char *a2, ...)
{
  return [a1 candidate];
}

id objc_msgSend_cbUUID(void *a1, const char *a2, ...)
{
  return [a1 cbUUID];
}

id objc_msgSend_central(void *a1, const char *a2, ...)
{
  return [a1 central];
}

id objc_msgSend_centralManagerManager(void *a1, const char *a2, ...)
{
  return [a1 centralManagerManager];
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return [a1 changeType];
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return [a1 charValue];
}

id objc_msgSend_characteristic(void *a1, const char *a2, ...)
{
  return [a1 characteristic];
}

id objc_msgSend_characteristicUUID(void *a1, const char *a2, ...)
{
  return [a1 characteristicUUID];
}

id objc_msgSend_characteristics(void *a1, const char *a2, ...)
{
  return [a1 characteristics];
}

id objc_msgSend_checkAndDisableStandAloneMode(void *a1, const char *a2, ...)
{
  return [a1 checkAndDisableStandAloneMode];
}

id objc_msgSend_checkAssertionFactoryForAssertion(void *a1, const char *a2, ...)
{
  return [a1 checkAssertionFactoryForAssertion];
}

id objc_msgSend_checkForConnectivity(void *a1, const char *a2, ...)
{
  return [a1 checkForConnectivity];
}

id objc_msgSend_checkIfIDSIsPaired(void *a1, const char *a2, ...)
{
  return [a1 checkIfIDSIsPaired];
}

id objc_msgSend_checkIfIDSPaired(void *a1, const char *a2, ...)
{
  return [a1 checkIfIDSPaired];
}

id objc_msgSend_checkIfIDSSwitched(void *a1, const char *a2, ...)
{
  return [a1 checkIfIDSSwitched];
}

id objc_msgSend_checkIfShouldRetryMigrationWhenIDSDevicesChange(void *a1, const char *a2, ...)
{
  return [a1 checkIfShouldRetryMigrationWhenIDSDevicesChange];
}

id objc_msgSend_checkLaunchNotificationsSetup(void *a1, const char *a2, ...)
{
  return [a1 checkLaunchNotificationsSetup];
}

id objc_msgSend_childRoutingSlip(void *a1, const char *a2, ...)
{
  return [a1 childRoutingSlip];
}

id objc_msgSend_chipID(void *a1, const char *a2, ...)
{
  return [a1 chipID];
}

id objc_msgSend_chipIDOfActiveDevice(void *a1, const char *a2, ...)
{
  return [a1 chipIDOfActiveDevice];
}

id objc_msgSend_chipIDOfActiveDeviceQueue(void *a1, const char *a2, ...)
{
  return [a1 chipIDOfActiveDeviceQueue];
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return [a1 clear];
}

id objc_msgSend_clearAndStartDiscoveryCounter(void *a1, const char *a2, ...)
{
  return [a1 clearAndStartDiscoveryCounter];
}

id objc_msgSend_clearConnectPersistenceTimer(void *a1, const char *a2, ...)
{
  return [a1 clearConnectPersistenceTimer];
}

id objc_msgSend_clearDispatchTimer(void *a1, const char *a2, ...)
{
  return [a1 clearDispatchTimer];
}

id objc_msgSend_clearMagicSwitchAdvertisingIdentifierSeedIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 clearMagicSwitchAdvertisingIdentifierSeedIfNeeded];
}

id objc_msgSend_clearNotifications(void *a1, const char *a2, ...)
{
  return [a1 clearNotifications];
}

id objc_msgSend_clearOOBKey(void *a1, const char *a2, ...)
{
  return [a1 clearOOBKey];
}

id objc_msgSend_clientBlock(void *a1, const char *a2, ...)
{
  return [a1 clientBlock];
}

id objc_msgSend_clientProxy(void *a1, const char *a2, ...)
{
  return [a1 clientProxy];
}

id objc_msgSend_clientQueue(void *a1, const char *a2, ...)
{
  return [a1 clientQueue];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return [a1 close];
}

id objc_msgSend_cloud(void *a1, const char *a2, ...)
{
  return [a1 cloud];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return [a1 code];
}

id objc_msgSend_collection(void *a1, const char *a2, ...)
{
  return [a1 collection];
}

id objc_msgSend_compact(void *a1, const char *a2, ...)
{
  return [a1 compact];
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return [a1 completion];
}

id objc_msgSend_completions(void *a1, const char *a2, ...)
{
  return [a1 completions];
}

id objc_msgSend_connected(void *a1, const char *a2, ...)
{
  return [a1 connected];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return [a1 connection];
}

id objc_msgSend_connectivityObservers(void *a1, const char *a2, ...)
{
  return [a1 connectivityObservers];
}

id objc_msgSend_connector(void *a1, const char *a2, ...)
{
  return [a1 connector];
}

id objc_msgSend_connectorManager(void *a1, const char *a2, ...)
{
  return [a1 connectorManager];
}

id objc_msgSend_containsProcessGroup(void *a1, const char *a2, ...)
{
  return [a1 containsProcessGroup];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return [a1 context];
}

id objc_msgSend_contextForPrimaryAccount(void *a1, const char *a2, ...)
{
  return [a1 contextForPrimaryAccount];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_copyIdentity(void *a1, const char *a2, ...)
{
  return [a1 copyIdentity];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_createAlertItemDictionary(void *a1, const char *a2, ...)
{
  return [a1 createAlertItemDictionary];
}

id objc_msgSend_createClassAFile(void *a1, const char *a2, ...)
{
  return [a1 createClassAFile];
}

id objc_msgSend_createKeepAliveFile(void *a1, const char *a2, ...)
{
  return [a1 createKeepAliveFile];
}

id objc_msgSend_createSharedInstance(void *a1, const char *a2, ...)
{
  return [a1 createSharedInstance];
}

id objc_msgSend_current(void *a1, const char *a2, ...)
{
  return [a1 current];
}

id objc_msgSend_currentChallenge(void *a1, const char *a2, ...)
{
  return [a1 currentChallenge];
}

id objc_msgSend_currentEntry(void *a1, const char *a2, ...)
{
  return [a1 currentEntry];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return [a1 currentLocale];
}

id objc_msgSend_currentMigrationPairingID(void *a1, const char *a2, ...)
{
  return [a1 currentMigrationPairingID];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return [a1 currentState];
}

id objc_msgSend_currentTransactionPairingId(void *a1, const char *a2, ...)
{
  return [a1 currentTransactionPairingId];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return [a1 data];
}

id objc_msgSend_dataValue(void *a1, const char *a2, ...)
{
  return [a1 dataValue];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return [a1 date];
}

id objc_msgSend_deadline(void *a1, const char *a2, ...)
{
  return [a1 deadline];
}

id objc_msgSend_deallocatePairedSyncNotifyToken(void *a1, const char *a2, ...)
{
  return [a1 deallocatePairedSyncNotifyToken];
}

id objc_msgSend_decrementCurrentTransactionIndex(void *a1, const char *a2, ...)
{
  return [a1 decrementCurrentTransactionIndex];
}

id objc_msgSend_defaultButtonWasPressed(void *a1, const char *a2, ...)
{
  return [a1 defaultButtonWasPressed];
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return [a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return [a1 defaultManager];
}

id objc_msgSend_defaultPairedDevice(void *a1, const char *a2, ...)
{
  return [a1 defaultPairedDevice];
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return [a1 defaultWorkspace];
}

id objc_msgSend_delay(void *a1, const char *a2, ...)
{
  return [a1 delay];
}

id objc_msgSend_delayPairingRequestQueue(void *a1, const char *a2, ...)
{
  return [a1 delayPairingRequestQueue];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return [a1 delegate];
}

id objc_msgSend_deleteKeepAliveFile(void *a1, const char *a2, ...)
{
  return [a1 deleteKeepAliveFile];
}

id objc_msgSend_deleteUnexpectedIDSPairedDevices(void *a1, const char *a2, ...)
{
  return [a1 deleteUnexpectedIDSPairedDevices];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return [a1 description];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return [a1 descriptor];
}

id objc_msgSend_destroyResource(void *a1, const char *a2, ...)
{
  return [a1 destroyResource];
}

id objc_msgSend_detailedError(void *a1, const char *a2, ...)
{
  return [a1 detailedError];
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return [a1 device];
}

id objc_msgSend_deviceCollection(void *a1, const char *a2, ...)
{
  return [a1 deviceCollection];
}

id objc_msgSend_deviceColor(void *a1, const char *a2, ...)
{
  return [a1 deviceColor];
}

id objc_msgSend_deviceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 deviceIdentifier];
}

id objc_msgSend_deviceUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return [a1 deviceUniqueIdentifiers];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return [a1 devices];
}

id objc_msgSend_devicesDictionary(void *a1, const char *a2, ...)
{
  return [a1 devicesDictionary];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_dictionaryKey(void *a1, const char *a2, ...)
{
  return [a1 dictionaryKey];
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return [a1 dictionaryRepresentation];
}

id objc_msgSend_didEnd(void *a1, const char *a2, ...)
{
  return [a1 didEnd];
}

id objc_msgSend_didFail(void *a1, const char *a2, ...)
{
  return [a1 didFail];
}

id objc_msgSend_didRestoreFromBackup(void *a1, const char *a2, ...)
{
  return [a1 didRestoreFromBackup];
}

id objc_msgSend_didRestoredFromBackup(void *a1, const char *a2, ...)
{
  return [a1 didRestoredFromBackup];
}

id objc_msgSend_diff(void *a1, const char *a2, ...)
{
  return [a1 diff];
}

id objc_msgSend_diffsToClearStatusCodeAndCompatibilityState(void *a1, const char *a2, ...)
{
  return [a1 diffsToClearStatusCodeAndCompatibilityState];
}

id objc_msgSend_dirty(void *a1, const char *a2, ...)
{
  return [a1 dirty];
}

id objc_msgSend_discoverDeviceUUIDs(void *a1, const char *a2, ...)
{
  return [a1 discoverDeviceUUIDs];
}

id objc_msgSend_discoverer(void *a1, const char *a2, ...)
{
  return [a1 discoverer];
}

id objc_msgSend_dismissAlert(void *a1, const char *a2, ...)
{
  return [a1 dismissAlert];
}

id objc_msgSend_dismissAlertAsync(void *a1, const char *a2, ...)
{
  return [a1 dismissAlertAsync];
}

id objc_msgSend_displayDeviceName(void *a1, const char *a2, ...)
{
  return [a1 displayDeviceName];
}

id objc_msgSend_displayDeviceSerialNumber(void *a1, const char *a2, ...)
{
  return [a1 displayDeviceSerialNumber];
}

id objc_msgSend_displayable(void *a1, const char *a2, ...)
{
  return [a1 displayable];
}

id objc_msgSend_displayableDevices(void *a1, const char *a2, ...)
{
  return [a1 displayableDevices];
}

id objc_msgSend_documentationID(void *a1, const char *a2, ...)
{
  return [a1 documentationID];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return [a1 domain];
}

id objc_msgSend_doneWaitingForPairedSync(void *a1, const char *a2, ...)
{
  return [a1 doneWaitingForPairedSync];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return [a1 doubleValue];
}

id objc_msgSend_dropoutCounter(void *a1, const char *a2, ...)
{
  return [a1 dropoutCounter];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return [a1 dsid];
}

id objc_msgSend_earliestFireTime(void *a1, const char *a2, ...)
{
  return [a1 earliestFireTime];
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return [a1 enabled];
}

id objc_msgSend_enabledFlag(void *a1, const char *a2, ...)
{
  return [a1 enabledFlag];
}

id objc_msgSend_enclosedClassTypes(void *a1, const char *a2, ...)
{
  return [a1 enclosedClassTypes];
}

id objc_msgSend_enclosureColor(void *a1, const char *a2, ...)
{
  return [a1 enclosureColor];
}

id objc_msgSend_encodedSystemVersion(void *a1, const char *a2, ...)
{
  return [a1 encodedSystemVersion];
}

id objc_msgSend_entitlements(void *a1, const char *a2, ...)
{
  return [a1 entitlements];
}

id objc_msgSend_entries(void *a1, const char *a2, ...)
{
  return [a1 entries];
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return [a1 entry];
}

id objc_msgSend_entryMap(void *a1, const char *a2, ...)
{
  return [a1 entryMap];
}

id objc_msgSend_entryName(void *a1, const char *a2, ...)
{
  return [a1 entryName];
}

id objc_msgSend_ephemeralSessionConfiguration(void *a1, const char *a2, ...)
{
  return [a1 ephemeralSessionConfiguration];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return [a1 error];
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return [a1 errors];
}

id objc_msgSend_evaluateTimers(void *a1, const char *a2, ...)
{
  return [a1 evaluateTimers];
}

id objc_msgSend_evaluateWhetherToStartSync(void *a1, const char *a2, ...)
{
  return [a1 evaluateWhetherToStartSync];
}

id objc_msgSend_eventDate(void *a1, const char *a2, ...)
{
  return [a1 eventDate];
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return [a1 eventType];
}

id objc_msgSend_events(void *a1, const char *a2, ...)
{
  return [a1 events];
}

id objc_msgSend_extendedMetadata(void *a1, const char *a2, ...)
{
  return [a1 extendedMetadata];
}

id objc_msgSend_factory(void *a1, const char *a2, ...)
{
  return [a1 factory];
}

id objc_msgSend_fakePipeManager(void *a1, const char *a2, ...)
{
  return [a1 fakePipeManager];
}

id objc_msgSend_filePairingReport(void *a1, const char *a2, ...)
{
  return [a1 filePairingReport];
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return [a1 filename];
}

id objc_msgSend_finished(void *a1, const char *a2, ...)
{
  return [a1 finished];
}

id objc_msgSend_fireTimer(void *a1, const char *a2, ...)
{
  return [a1 fireTimer];
}

id objc_msgSend_firstName(void *a1, const char *a2, ...)
{
  return [a1 firstName];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return [a1 firstObject];
}

id objc_msgSend_firstUnlockQueue(void *a1, const char *a2, ...)
{
  return [a1 firstUnlockQueue];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return [a1 floatValue];
}

id objc_msgSend_forceEndAdvertising(void *a1, const char *a2, ...)
{
  return [a1 forceEndAdvertising];
}

id objc_msgSend_forceEndDiscovery(void *a1, const char *a2, ...)
{
  return [a1 forceEndDiscovery];
}

id objc_msgSend_forceSyncCompleteAndFinishTransaction(void *a1, const char *a2, ...)
{
  return [a1 forceSyncCompleteAndFinishTransaction];
}

id objc_msgSend_forceSyncStartAndEndWithError(void *a1, const char *a2, ...)
{
  return [a1 forceSyncStartAndEndWithError];
}

id objc_msgSend_formatter(void *a1, const char *a2, ...)
{
  return [a1 formatter];
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return [a1 fromID];
}

id objc_msgSend_gateTime(void *a1, const char *a2, ...)
{
  return [a1 gateTime];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return [a1 getActivePairedDevice];
}

id objc_msgSend_getCFRunLoop(void *a1, const char *a2, ...)
{
  return [a1 getCFRunLoop];
}

id objc_msgSend_getLastAssetUpdateCheckInterval(void *a1, const char *a2, ...)
{
  return [a1 getLastAssetUpdateCheckInterval];
}

id objc_msgSend_getLastFirstError(void *a1, const char *a2, ...)
{
  return [a1 getLastFirstError];
}

id objc_msgSend_getLocalFileUrl(void *a1, const char *a2, ...)
{
  return [a1 getLocalFileUrl];
}

id objc_msgSend_getManagementStateForMAID(void *a1, const char *a2, ...)
{
  return [a1 getManagementStateForMAID];
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return [a1 getPairedDevices];
}

id objc_msgSend_gizmoBuild(void *a1, const char *a2, ...)
{
  return [a1 gizmoBuild];
}

id objc_msgSend_gizmoHW(void *a1, const char *a2, ...)
{
  return [a1 gizmoHW];
}

id objc_msgSend_globalTimer(void *a1, const char *a2, ...)
{
  return [a1 globalTimer];
}

id objc_msgSend_grabPairingAgent(void *a1, const char *a2, ...)
{
  return [a1 grabPairingAgent];
}

id objc_msgSend_gracePeriod(void *a1, const char *a2, ...)
{
  return [a1 gracePeriod];
}

id objc_msgSend_handleTimeEvent(void *a1, const char *a2, ...)
{
  return [a1 handleTimeEvent];
}

id objc_msgSend_handlerQueue(void *a1, const char *a2, ...)
{
  return [a1 handlerQueue];
}

id objc_msgSend_hasAccounts(void *a1, const char *a2, ...)
{
  return [a1 hasAccounts];
}

id objc_msgSend_hasBoolValue(void *a1, const char *a2, ...)
{
  return [a1 hasBoolValue];
}

id objc_msgSend_hasClassAFile(void *a1, const char *a2, ...)
{
  return [a1 hasClassAFile];
}

id objc_msgSend_hasClassicDevice(void *a1, const char *a2, ...)
{
  return [a1 hasClassicDevice];
}

id objc_msgSend_hasDoubleValue(void *a1, const char *a2, ...)
{
  return [a1 hasDoubleValue];
}

id objc_msgSend_hasEntitlements(void *a1, const char *a2, ...)
{
  return [a1 hasEntitlements];
}

id objc_msgSend_hasFloatValue(void *a1, const char *a2, ...)
{
  return [a1 hasFloatValue];
}

id objc_msgSend_hasInt32Value(void *a1, const char *a2, ...)
{
  return [a1 hasInt32Value];
}

id objc_msgSend_hasInt64Value(void *a1, const char *a2, ...)
{
  return [a1 hasInt64Value];
}

id objc_msgSend_hasIsShortOrChar(void *a1, const char *a2, ...)
{
  return [a1 hasIsShortOrChar];
}

id objc_msgSend_hasPairer(void *a1, const char *a2, ...)
{
  return [a1 hasPairer];
}

id objc_msgSend_hasStartedPairing(void *a1, const char *a2, ...)
{
  return [a1 hasStartedPairing];
}

id objc_msgSend_hasTermsText(void *a1, const char *a2, ...)
{
  return [a1 hasTermsText];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return [a1 hash];
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return [a1 height];
}

id objc_msgSend_history(void *a1, const char *a2, ...)
{
  return [a1 history];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return [a1 host];
}

id objc_msgSend_humanReadableName(void *a1, const char *a2, ...)
{
  return [a1 humanReadableName];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return [a1 identifier];
}

id objc_msgSend_identities(void *a1, const char *a2, ...)
{
  return [a1 identities];
}

id objc_msgSend_idle(void *a1, const char *a2, ...)
{
  return [a1 idle];
}

id objc_msgSend_idsBTUUID(void *a1, const char *a2, ...)
{
  return [a1 idsBTUUID];
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return [a1 incomingResponseIdentifier];
}

id objc_msgSend_incorrectPINcount(void *a1, const char *a2, ...)
{
  return [a1 incorrectPINcount];
}

id objc_msgSend_incrementCurrentTransactionIndex(void *a1, const char *a2, ...)
{
  return [a1 incrementCurrentTransactionIndex];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return [a1 indexSet];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return [a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return [a1 init];
}

id objc_msgSend_initBase(void *a1, const char *a2, ...)
{
  return [a1 initBase];
}

id objc_msgSend_initializeGetters(void *a1, const char *a2, ...)
{
  return [a1 initializeGetters];
}

id objc_msgSend_int32Value(void *a1, const char *a2, ...)
{
  return [a1 int32Value];
}

id objc_msgSend_int64Value(void *a1, const char *a2, ...)
{
  return [a1 int64Value];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return [a1 integerValue];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return [a1 invalidateAndCancel];
}

id objc_msgSend_invalidateIDSChannels(void *a1, const char *a2, ...)
{
  return [a1 invalidateIDSChannels];
}

id objc_msgSend_invalidatePairingManagerIfIdle(void *a1, const char *a2, ...)
{
  return [a1 invalidatePairingManagerIfIdle];
}

id objc_msgSend_invalidated(void *a1, const char *a2, ...)
{
  return [a1 invalidated];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return [a1 isActive];
}

id objc_msgSend_isAltAccount(void *a1, const char *a2, ...)
{
  return [a1 isAltAccount];
}

id objc_msgSend_isArchived(void *a1, const char *a2, ...)
{
  return [a1 isArchived];
}

id objc_msgSend_isAutomated(void *a1, const char *a2, ...)
{
  return [a1 isAutomated];
}

id objc_msgSend_isBluetoothCapable(void *a1, const char *a2, ...)
{
  return [a1 isBluetoothCapable];
}

id objc_msgSend_isBluetoothPairComplete(void *a1, const char *a2, ...)
{
  return [a1 isBluetoothPairComplete];
}

id objc_msgSend_isBusy(void *a1, const char *a2, ...)
{
  return [a1 isBusy];
}

id objc_msgSend_isClassicDevice(void *a1, const char *a2, ...)
{
  return [a1 isClassicDevice];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return [a1 isConnected];
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return [a1 isDefaultPairedDevice];
}

id objc_msgSend_isDisconnected(void *a1, const char *a2, ...)
{
  return [a1 isDisconnected];
}

id objc_msgSend_isDisplayabilityExpired(void *a1, const char *a2, ...)
{
  return [a1 isDisplayabilityExpired];
}

id objc_msgSend_isErrorSet(void *a1, const char *a2, ...)
{
  return [a1 isErrorSet];
}

id objc_msgSend_isExpired(void *a1, const char *a2, ...)
{
  return [a1 isExpired];
}

id objc_msgSend_isHSATrusted(void *a1, const char *a2, ...)
{
  return [a1 isHSATrusted];
}

id objc_msgSend_isIDSConnected(void *a1, const char *a2, ...)
{
  return [a1 isIDSConnected];
}

id objc_msgSend_isIDSConnectedNotification(void *a1, const char *a2, ...)
{
  return [a1 isIDSConnectedNotification];
}

id objc_msgSend_isInitialPropertiesReceived(void *a1, const char *a2, ...)
{
  return [a1 isInitialPropertiesReceived];
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return [a1 isInternalInstall];
}

id objc_msgSend_isKappaDetectionSupportedOnCurrentDevice(void *a1, const char *a2, ...)
{
  return [a1 isKappaDetectionSupportedOnCurrentDevice];
}

id objc_msgSend_isLocallyPaired(void *a1, const char *a2, ...)
{
  return [a1 isLocallyPaired];
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return [a1 isNearby];
}

id objc_msgSend_isNetworkRelayPairComplete(void *a1, const char *a2, ...)
{
  return [a1 isNetworkRelayPairComplete];
}

id objc_msgSend_isOrganizer(void *a1, const char *a2, ...)
{
  return [a1 isOrganizer];
}

id objc_msgSend_isOverrideActive(void *a1, const char *a2, ...)
{
  return [a1 isOverrideActive];
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return [a1 isPaired];
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return [a1 isPairing];
}

id objc_msgSend_isPairingErrorSet(void *a1, const char *a2, ...)
{
  return [a1 isPairingErrorSet];
}

id objc_msgSend_isPeripheral(void *a1, const char *a2, ...)
{
  return [a1 isPeripheral];
}

id objc_msgSend_isProximateExpired(void *a1, const char *a2, ...)
{
  return [a1 isProximateExpired];
}

id objc_msgSend_isReadingCharacteristic(void *a1, const char *a2, ...)
{
  return [a1 isReadingCharacteristic];
}

id objc_msgSend_isReady(void *a1, const char *a2, ...)
{
  return [a1 isReady];
}

id objc_msgSend_isResponse(void *a1, const char *a2, ...)
{
  return [a1 isResponse];
}

id objc_msgSend_isRevlockFeatureFlagActive(void *a1, const char *a2, ...)
{
  return [a1 isRevlockFeatureFlagActive];
}

id objc_msgSend_isSet(void *a1, const char *a2, ...)
{
  return [a1 isSet];
}

id objc_msgSend_isSetup(void *a1, const char *a2, ...)
{
  return [a1 isSetup];
}

id objc_msgSend_isShortOrChar(void *a1, const char *a2, ...)
{
  return [a1 isShortOrChar];
}

id objc_msgSend_isTracked(void *a1, const char *a2, ...)
{
  return [a1 isTracked];
}

id objc_msgSend_isUIUnlocked(void *a1, const char *a2, ...)
{
  return [a1 isUIUnlocked];
}

id objc_msgSend_isUnsigned(void *a1, const char *a2, ...)
{
  return [a1 isUnsigned];
}

id objc_msgSend_isVirtualDevice(void *a1, const char *a2, ...)
{
  return [a1 isVirtualDevice];
}

id objc_msgSend_joinedDescription(void *a1, const char *a2, ...)
{
  return [a1 joinedDescription];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return [a1 key];
}

id objc_msgSend_keyChannel(void *a1, const char *a2, ...)
{
  return [a1 keyChannel];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return [a1 keyEnumerator];
}

id objc_msgSend_keyGeneratorManager(void *a1, const char *a2, ...)
{
  return [a1 keyGeneratorManager];
}

id objc_msgSend_keychainSyncStatusManager(void *a1, const char *a2, ...)
{
  return [a1 keychainSyncStatusManager];
}

id objc_msgSend_keymaster(void *a1, const char *a2, ...)
{
  return [a1 keymaster];
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return [a1 label];
}

id objc_msgSend_lastActivePairingIDThatFailed(void *a1, const char *a2, ...)
{
  return [a1 lastActivePairingIDThatFailed];
}

id objc_msgSend_lastActivityDate(void *a1, const char *a2, ...)
{
  return [a1 lastActivityDate];
}

id objc_msgSend_lastCaller(void *a1, const char *a2, ...)
{
  return [a1 lastCaller];
}

id objc_msgSend_lastKnownState(void *a1, const char *a2, ...)
{
  return [a1 lastKnownState];
}

id objc_msgSend_lastMigrationRequestPhoneName(void *a1, const char *a2, ...)
{
  return [a1 lastMigrationRequestPhoneName];
}

id objc_msgSend_lastName(void *a1, const char *a2, ...)
{
  return [a1 lastName];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return [a1 lastObject];
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return [a1 lastPathComponent];
}

id objc_msgSend_lastStatusCodeCache(void *a1, const char *a2, ...)
{
  return [a1 lastStatusCodeCache];
}

id objc_msgSend_launchURL(void *a1, const char *a2, ...)
{
  return [a1 launchURL];
}

id objc_msgSend_legacyKey(void *a1, const char *a2, ...)
{
  return [a1 legacyKey];
}

id objc_msgSend_legacyUnpairTriggerFileContents(void *a1, const char *a2, ...)
{
  return [a1 legacyUnpairTriggerFileContents];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_linkedUserURIs(void *a1, const char *a2, ...)
{
  return [a1 linkedUserURIs];
}

id objc_msgSend_loadEvents(void *a1, const char *a2, ...)
{
  return [a1 loadEvents];
}

id objc_msgSend_loadFromDefaults(void *a1, const char *a2, ...)
{
  return [a1 loadFromDefaults];
}

id objc_msgSend_loadTransactions(void *a1, const char *a2, ...)
{
  return [a1 loadTransactions];
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return [a1 localeIdentifier];
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return [a1 localizations];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return [a1 localizedDescription];
}

id objc_msgSend_locallyPresent(void *a1, const char *a2, ...)
{
  return [a1 locallyPresent];
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return [a1 lock];
}

id objc_msgSend_logAcknowledgement(void *a1, const char *a2, ...)
{
  return [a1 logAcknowledgement];
}

id objc_msgSend_logAsset(void *a1, const char *a2, ...)
{
  return [a1 logAsset];
}

id objc_msgSend_logIfVersionsAreOverridden(void *a1, const char *a2, ...)
{
  return [a1 logIfVersionsAreOverridden];
}

id objc_msgSend_loggedOpenFail(void *a1, const char *a2, ...)
{
  return [a1 loggedOpenFail];
}

id objc_msgSend_loggingProcessName(void *a1, const char *a2, ...)
{
  return [a1 loggingProcessName];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return [a1 longLongValue];
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return [a1 lowercaseString];
}

id objc_msgSend_machServiceName(void *a1, const char *a2, ...)
{
  return [a1 machServiceName];
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return [a1 mainQueue];
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return [a1 mainRunLoop];
}

id objc_msgSend_managedConfigurationWatchDisabled(void *a1, const char *a2, ...)
{
  return [a1 managedConfigurationWatchDisabled];
}

id objc_msgSend_managementQueue(void *a1, const char *a2, ...)
{
  return [a1 managementQueue];
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return [a1 manager];
}

id objc_msgSend_managerManager(void *a1, const char *a2, ...)
{
  return [a1 managerManager];
}

id objc_msgSend_markCompleted(void *a1, const char *a2, ...)
{
  return [a1 markCompleted];
}

id objc_msgSend_maxCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 maxCompatibilityVersion];
}

id objc_msgSend_maxPairingCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 maxPairingCompatibilityVersion];
}

id objc_msgSend_members(void *a1, const char *a2, ...)
{
  return [a1 members];
}

id objc_msgSend_messagesShouldHaveValidSender(void *a1, const char *a2, ...)
{
  return [a1 messagesShouldHaveValidSender];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return [a1 metadata];
}

id objc_msgSend_method(void *a1, const char *a2, ...)
{
  return [a1 method];
}

id objc_msgSend_migratable(void *a1, const char *a2, ...)
{
  return [a1 migratable];
}

id objc_msgSend_migratingDeviceId(void *a1, const char *a2, ...)
{
  return [a1 migratingDeviceId];
}

id objc_msgSend_migrationReportManager(void *a1, const char *a2, ...)
{
  return [a1 migrationReportManager];
}

id objc_msgSend_migrationReporter(void *a1, const char *a2, ...)
{
  return [a1 migrationReporter];
}

id objc_msgSend_migrator(void *a1, const char *a2, ...)
{
  return [a1 migrator];
}

id objc_msgSend_minCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 minCompatibilityVersion];
}

id objc_msgSend_minPairingCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 minPairingCompatibilityVersion];
}

id objc_msgSend_minPairingCompatibilityVersionWithChipID(void *a1, const char *a2, ...)
{
  return [a1 minPairingCompatibilityVersionWithChipID];
}

id objc_msgSend_minQuickSwitchCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 minQuickSwitchCompatibilityVersion];
}

id objc_msgSend_minRSSIInteger(void *a1, const char *a2, ...)
{
  return [a1 minRSSIInteger];
}

id objc_msgSend_minRestSec(void *a1, const char *a2, ...)
{
  return [a1 minRestSec];
}

id objc_msgSend_mirrorOfActiveDevice(void *a1, const char *a2, ...)
{
  return [a1 mirrorOfActiveDevice];
}

id objc_msgSend_mirrorOfActiveDeviceID(void *a1, const char *a2, ...)
{
  return [a1 mirrorOfActiveDeviceID];
}

id objc_msgSend_mirrorOfIsPaired(void *a1, const char *a2, ...)
{
  return [a1 mirrorOfIsPaired];
}

id objc_msgSend_mirrorOfPairedDeviceCount(void *a1, const char *a2, ...)
{
  return [a1 mirrorOfPairedDeviceCount];
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return [a1 modelIdentifier];
}

id objc_msgSend_mostRecentError(void *a1, const char *a2, ...)
{
  return [a1 mostRecentError];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return [a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return [a1 mutableCopy];
}

id objc_msgSend_mutableIDSDevice(void *a1, const char *a2, ...)
{
  return [a1 mutableIDSDevice];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return [a1 name];
}

id objc_msgSend_nanoRegistryWatchMigrationTapToRadarQueryItems(void *a1, const char *a2, ...)
{
  return [a1 nanoRegistryWatchMigrationTapToRadarQueryItems];
}

id objc_msgSend_needsResource(void *a1, const char *a2, ...)
{
  return [a1 needsResource];
}

id objc_msgSend_needsResourceWithExpiry(void *a1, const char *a2, ...)
{
  return [a1 needsResourceWithExpiry];
}

id objc_msgSend_networkRelayPairing(void *a1, const char *a2, ...)
{
  return [a1 networkRelayPairing];
}

id objc_msgSend_newCentralDevice(void *a1, const char *a2, ...)
{
  return [a1 newCentralDevice];
}

id objc_msgSend_newTransaction(void *a1, const char *a2, ...)
{
  return [a1 newTransaction];
}

id objc_msgSend_nextIndex(void *a1, const char *a2, ...)
{
  return [a1 nextIndex];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return [a1 nextObject];
}

id objc_msgSend_nonretainedObjectValue(void *a1, const char *a2, ...)
{
  return [a1 nonretainedObjectValue];
}

id objc_msgSend_notUnrollable(void *a1, const char *a2, ...)
{
  return [a1 notUnrollable];
}

id objc_msgSend_notificationCategories(void *a1, const char *a2, ...)
{
  return [a1 notificationCategories];
}

id objc_msgSend_notificationDismissed(void *a1, const char *a2, ...)
{
  return [a1 notificationDismissed];
}

id objc_msgSend_notifyDelegateOfBluetoothSuccess(void *a1, const char *a2, ...)
{
  return [a1 notifyDelegateOfBluetoothSuccess];
}

id objc_msgSend_notifyDelegateOfPossibleBluetoothFailure(void *a1, const char *a2, ...)
{
  return [a1 notifyDelegateOfPossibleBluetoothFailure];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return [a1 now];
}

id objc_msgSend_nrDeviceIdentifier(void *a1, const char *a2, ...)
{
  return [a1 nrDeviceIdentifier];
}

id objc_msgSend_nrDeviceUUID(void *a1, const char *a2, ...)
{
  return [a1 nrDeviceUUID];
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return [a1 nsuuid];
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return [a1 null];
}

id objc_msgSend_number(void *a1, const char *a2, ...)
{
  return [a1 number];
}

id objc_msgSend_numberValue(void *a1, const char *a2, ...)
{
  return [a1 numberValue];
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return [a1 objCType];
}

id objc_msgSend_observer(void *a1, const char *a2, ...)
{
  return [a1 observer];
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return [a1 offset];
}

id objc_msgSend_oobKey(void *a1, const char *a2, ...)
{
  return [a1 oobKey];
}

id objc_msgSend_oobKeyGenerator(void *a1, const char *a2, ...)
{
  return [a1 oobKeyGenerator];
}

id objc_msgSend_oobKeyStash(void *a1, const char *a2, ...)
{
  return [a1 oobKeyStash];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return [a1 open];
}

id objc_msgSend_operandName(void *a1, const char *a2, ...)
{
  return [a1 operandName];
}

id objc_msgSend_operands(void *a1, const char *a2, ...)
{
  return [a1 operands];
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return [a1 operatingSystemVersion];
}

id objc_msgSend_operationType(void *a1, const char *a2, ...)
{
  return [a1 operationType];
}

id objc_msgSend_orderedSet(void *a1, const char *a2, ...)
{
  return [a1 orderedSet];
}

id objc_msgSend_otherButtonWasPressed(void *a1, const char *a2, ...)
{
  return [a1 otherButtonWasPressed];
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return [a1 outgoingResponseIdentifier];
}

id objc_msgSend_outputStreamToMemory(void *a1, const char *a2, ...)
{
  return [a1 outputStreamToMemory];
}

id objc_msgSend_ownerDelegate(void *a1, const char *a2, ...)
{
  return [a1 ownerDelegate];
}

id objc_msgSend_packedExtendedMetadataData(void *a1, const char *a2, ...)
{
  return [a1 packedExtendedMetadataData];
}

id objc_msgSend_packedIdentifierData(void *a1, const char *a2, ...)
{
  return [a1 packedIdentifierData];
}

id objc_msgSend_pairIDS(void *a1, const char *a2, ...)
{
  return [a1 pairIDS];
}

id objc_msgSend_paired(void *a1, const char *a2, ...)
{
  return [a1 paired];
}

id objc_msgSend_pairer(void *a1, const char *a2, ...)
{
  return [a1 pairer];
}

id objc_msgSend_pairers(void *a1, const char *a2, ...)
{
  return [a1 pairers];
}

id objc_msgSend_pairingClientPhase(void *a1, const char *a2, ...)
{
  return [a1 pairingClientPhase];
}

id objc_msgSend_pairingClientProxy(void *a1, const char *a2, ...)
{
  return [a1 pairingClientProxy];
}

id objc_msgSend_pairingClients(void *a1, const char *a2, ...)
{
  return [a1 pairingClients];
}

id objc_msgSend_pairingCompatibilityVersion(void *a1, const char *a2, ...)
{
  return [a1 pairingCompatibilityVersion];
}

id objc_msgSend_pairingCompleted(void *a1, const char *a2, ...)
{
  return [a1 pairingCompleted];
}

id objc_msgSend_pairingConnector(void *a1, const char *a2, ...)
{
  return [a1 pairingConnector];
}

id objc_msgSend_pairingDelegate(void *a1, const char *a2, ...)
{
  return [a1 pairingDelegate];
}

id objc_msgSend_pairingDevices(void *a1, const char *a2, ...)
{
  return [a1 pairingDevices];
}

id objc_msgSend_pairingError(void *a1, const char *a2, ...)
{
  return [a1 pairingError];
}

id objc_msgSend_pairingID(void *a1, const char *a2, ...)
{
  return [a1 pairingID];
}

id objc_msgSend_pairingIdentifier(void *a1, const char *a2, ...)
{
  return [a1 pairingIdentifier];
}

id objc_msgSend_pairingMode(void *a1, const char *a2, ...)
{
  return [a1 pairingMode];
}

id objc_msgSend_pairingPhase(void *a1, const char *a2, ...)
{
  return [a1 pairingPhase];
}

id objc_msgSend_pairingProtocolVersion(void *a1, const char *a2, ...)
{
  return [a1 pairingProtocolVersion];
}

id objc_msgSend_pairingReport(void *a1, const char *a2, ...)
{
  return [a1 pairingReport];
}

id objc_msgSend_pairingStrategy(void *a1, const char *a2, ...)
{
  return [a1 pairingStrategy];
}

id objc_msgSend_pairingStyle(void *a1, const char *a2, ...)
{
  return [a1 pairingStyle];
}

id objc_msgSend_pairingTimer(void *a1, const char *a2, ...)
{
  return [a1 pairingTimer];
}

id objc_msgSend_pairingType(void *a1, const char *a2, ...)
{
  return [a1 pairingType];
}

id objc_msgSend_pairingVersion(void *a1, const char *a2, ...)
{
  return [a1 pairingVersion];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return [a1 path];
}

id objc_msgSend_pathToNanoRegistryClassAFile(void *a1, const char *a2, ...)
{
  return [a1 pathToNanoRegistryClassAFile];
}

id objc_msgSend_pathToNanoRegistryMigrationRoutingSlip(void *a1, const char *a2, ...)
{
  return [a1 pathToNanoRegistryMigrationRoutingSlip];
}

id objc_msgSend_pathToNanoRegistryStateDirectory(void *a1, const char *a2, ...)
{
  return [a1 pathToNanoRegistryStateDirectory];
}

id objc_msgSend_pathToNanoRegistryUDIDFile(void *a1, const char *a2, ...)
{
  return [a1 pathToNanoRegistryUDIDFile];
}

id objc_msgSend_pathToTermsEventLog(void *a1, const char *a2, ...)
{
  return [a1 pathToTermsEventLog];
}

id objc_msgSend_peer(void *a1, const char *a2, ...)
{
  return [a1 peer];
}

id objc_msgSend_pendingPairingRequest(void *a1, const char *a2, ...)
{
  return [a1 pendingPairingRequest];
}

id objc_msgSend_peripheral(void *a1, const char *a2, ...)
{
  return [a1 peripheral];
}

id objc_msgSend_peripheralFactory(void *a1, const char *a2, ...)
{
  return [a1 peripheralFactory];
}

id objc_msgSend_peripheralWasInvalidated(void *a1, const char *a2, ...)
{
  return [a1 peripheralWasInvalidated];
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return [a1 persist];
}

id objc_msgSend_persistWhilePending(void *a1, const char *a2, ...)
{
  return [a1 persistWhilePending];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return [a1 pid];
}

id objc_msgSend_pipe(void *a1, const char *a2, ...)
{
  return [a1 pipe];
}

id objc_msgSend_pollProperties(void *a1, const char *a2, ...)
{
  return [a1 pollProperties];
}

id objc_msgSend_postFailSafeObliteration(void *a1, const char *a2, ...)
{
  return [a1 postFailSafeObliteration];
}

id objc_msgSend_postFailsafeObliteration(void *a1, const char *a2, ...)
{
  return [a1 postFailsafeObliteration];
}

id objc_msgSend_postSyncCompleteNotification(void *a1, const char *a2, ...)
{
  return [a1 postSyncCompleteNotification];
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return [a1 preferredLanguages];
}

id objc_msgSend_prefs(void *a1, const char *a2, ...)
{
  return [a1 prefs];
}

id objc_msgSend_presentAlertsIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 presentAlertsIfNeeded];
}

id objc_msgSend_presentationLocation(void *a1, const char *a2, ...)
{
  return [a1 presentationLocation];
}

id objc_msgSend_presentationReason(void *a1, const char *a2, ...)
{
  return [a1 presentationReason];
}

id objc_msgSend_previousState(void *a1, const char *a2, ...)
{
  return [a1 previousState];
}

id objc_msgSend_printDescription(void *a1, const char *a2, ...)
{
  return [a1 printDescription];
}

id objc_msgSend_printableName(void *a1, const char *a2, ...)
{
  return [a1 printableName];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return [a1 processIdentifier];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return [a1 processName];
}

id objc_msgSend_productBuildVersion(void *a1, const char *a2, ...)
{
  return [a1 productBuildVersion];
}

id objc_msgSend_productName(void *a1, const char *a2, ...)
{
  return [a1 productName];
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return [a1 productType];
}

id objc_msgSend_productVersion(void *a1, const char *a2, ...)
{
  return [a1 productVersion];
}

id objc_msgSend_productVersionMajor(void *a1, const char *a2, ...)
{
  return [a1 productVersionMajor];
}

id objc_msgSend_productVersionMinor(void *a1, const char *a2, ...)
{
  return [a1 productVersionMinor];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return [a1 properties];
}

id objc_msgSend_propertiesReceived(void *a1, const char *a2, ...)
{
  return [a1 propertiesReceived];
}

id objc_msgSend_propertiesSent(void *a1, const char *a2, ...)
{
  return [a1 propertiesSent];
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return [a1 protectionSpace];
}

id objc_msgSend_protobuf(void *a1, const char *a2, ...)
{
  return [a1 protobuf];
}

id objc_msgSend_proxRSSIInteger(void *a1, const char *a2, ...)
{
  return [a1 proxRSSIInteger];
}

id objc_msgSend_proximate(void *a1, const char *a2, ...)
{
  return [a1 proximate];
}

id objc_msgSend_proximateDevices(void *a1, const char *a2, ...)
{
  return [a1 proximateDevices];
}

id objc_msgSend_proxyClass(void *a1, const char *a2, ...)
{
  return [a1 proxyClass];
}

id objc_msgSend_pushToken(void *a1, const char *a2, ...)
{
  return [a1 pushToken];
}

id objc_msgSend_pushVersion4CompatibilityMessageIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 pushVersion4CompatibilityMessageIfNeeded];
}

id objc_msgSend_queryDeviceSyncStatusIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 queryDeviceSyncStatusIfNeeded];
}

id objc_msgSend_querySyncStateForActiveDevice(void *a1, const char *a2, ...)
{
  return [a1 querySyncStateForActiveDevice];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return [a1 queue];
}

id objc_msgSend_queuedCancel(void *a1, const char *a2, ...)
{
  return [a1 queuedCancel];
}

id objc_msgSend_queuedNotIsPairedDeviceIDToMarkIsSetup(void *a1, const char *a2, ...)
{
  return [a1 queuedNotIsPairedDeviceIDToMarkIsSetup];
}

id objc_msgSend_radarDescription(void *a1, const char *a2, ...)
{
  return [a1 radarDescription];
}

id objc_msgSend_radarTitle(void *a1, const char *a2, ...)
{
  return [a1 radarTitle];
}

id objc_msgSend_rankTable(void *a1, const char *a2, ...)
{
  return [a1 rankTable];
}

id objc_msgSend_readData(void *a1, const char *a2, ...)
{
  return [a1 readData];
}

id objc_msgSend_readHandler(void *a1, const char *a2, ...)
{
  return [a1 readHandler];
}

id objc_msgSend_reader(void *a1, const char *a2, ...)
{
  return [a1 reader];
}

id objc_msgSend_readers(void *a1, const char *a2, ...)
{
  return [a1 readers];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return [a1 reason];
}

id objc_msgSend_referenceCounter(void *a1, const char *a2, ...)
{
  return [a1 referenceCounter];
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return [a1 refresh];
}

id objc_msgSend_refreshDetailsFromDisk(void *a1, const char *a2, ...)
{
  return [a1 refreshDetailsFromDisk];
}

id objc_msgSend_refreshPropertyCache(void *a1, const char *a2, ...)
{
  return [a1 refreshPropertyCache];
}

id objc_msgSend_registerForKeychainNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForKeychainNotifications];
}

id objc_msgSend_registerForMDMNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForMDMNotifications];
}

id objc_msgSend_registerForNotifications(void *a1, const char *a2, ...)
{
  return [a1 registerForNotifications];
}

id objc_msgSend_registerProtobufHandlers(void *a1, const char *a2, ...)
{
  return [a1 registerProtobufHandlers];
}

id objc_msgSend_registry(void *a1, const char *a2, ...)
{
  return [a1 registry];
}

id objc_msgSend_registryDaemonQueue(void *a1, const char *a2, ...)
{
  return [a1 registryDaemonQueue];
}

id objc_msgSend_registryDelegate(void *a1, const char *a2, ...)
{
  return [a1 registryDelegate];
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return [a1 releaseAssertion];
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return [a1 remoteObjectProxy];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return [a1 removeAllObjects];
}

id objc_msgSend_removeAllServices(void *a1, const char *a2, ...)
{
  return [a1 removeAllServices];
}

id objc_msgSend_removeDiffObserver(void *a1, const char *a2, ...)
{
  return [a1 removeDiffObserver];
}

id objc_msgSend_removeStaleDiscoveredDevices(void *a1, const char *a2, ...)
{
  return [a1 removeStaleDiscoveredDevices];
}

id objc_msgSend_reportSubreason(void *a1, const char *a2, ...)
{
  return [a1 reportSubreason];
}

id objc_msgSend_requestedUUIDs(void *a1, const char *a2, ...)
{
  return [a1 requestedUUIDs];
}

id objc_msgSend_requireAnEntitlement(void *a1, const char *a2, ...)
{
  return [a1 requireAnEntitlement];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return [a1 reset];
}

id objc_msgSend_resetIDSConnectivityTimeout(void *a1, const char *a2, ...)
{
  return [a1 resetIDSConnectivityTimeout];
}

id objc_msgSend_resetPhoneStateForNewPairing(void *a1, const char *a2, ...)
{
  return [a1 resetPhoneStateForNewPairing];
}

id objc_msgSend_resetStashVaribles(void *a1, const char *a2, ...)
{
  return [a1 resetStashVaribles];
}

id objc_msgSend_resetState(void *a1, const char *a2, ...)
{
  return [a1 resetState];
}

id objc_msgSend_resetWatchStateForNewPairing(void *a1, const char *a2, ...)
{
  return [a1 resetWatchStateForNewPairing];
}

id objc_msgSend_resourceClass(void *a1, const char *a2, ...)
{
  return [a1 resourceClass];
}

id objc_msgSend_resourceManager(void *a1, const char *a2, ...)
{
  return [a1 resourceManager];
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return [a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return [a1 resume];
}

id objc_msgSend_resumeEnabled(void *a1, const char *a2, ...)
{
  return [a1 resumeEnabled];
}

id objc_msgSend_retrievePairedPeers(void *a1, const char *a2, ...)
{
  return [a1 retrievePairedPeers];
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return [a1 reverseObjectEnumerator];
}

id objc_msgSend_rollback(void *a1, const char *a2, ...)
{
  return [a1 rollback];
}

id objc_msgSend_routingSlip(void *a1, const char *a2, ...)
{
  return [a1 routingSlip];
}

id objc_msgSend_routingSlipEntry(void *a1, const char *a2, ...)
{
  return [a1 routingSlipEntry];
}

id objc_msgSend_routingSlipEntryPairingIDKey(void *a1, const char *a2, ...)
{
  return [a1 routingSlipEntryPairingIDKey];
}

id objc_msgSend_routingSlipEntryPairingStartedIDKey(void *a1, const char *a2, ...)
{
  return [a1 routingSlipEntryPairingStartedIDKey];
}

id objc_msgSend_routingSlipError(void *a1, const char *a2, ...)
{
  return [a1 routingSlipError];
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return [a1 run];
}

id objc_msgSend_runPendingResumableRequest(void *a1, const char *a2, ...)
{
  return [a1 runPendingResumableRequest];
}

id objc_msgSend_runTransaction(void *a1, const char *a2, ...)
{
  return [a1 runTransaction];
}

id objc_msgSend_runningStatusCode(void *a1, const char *a2, ...)
{
  return [a1 runningStatusCode];
}

id objc_msgSend_saveEventTextToFileIfNeeded(void *a1, const char *a2, ...)
{
  return [a1 saveEventTextToFileIfNeeded];
}

id objc_msgSend_saveEvents(void *a1, const char *a2, ...)
{
  return [a1 saveEvents];
}

id objc_msgSend_savePairingReport(void *a1, const char *a2, ...)
{
  return [a1 savePairingReport];
}

id objc_msgSend_saveToDefaults(void *a1, const char *a2, ...)
{
  return [a1 saveToDefaults];
}

id objc_msgSend_saveTransactions(void *a1, const char *a2, ...)
{
  return [a1 saveTransactions];
}

id objc_msgSend_scanForProximity(void *a1, const char *a2, ...)
{
  return [a1 scanForProximity];
}

id objc_msgSend_scheduleTimer(void *a1, const char *a2, ...)
{
  return [a1 scheduleTimer];
}

id objc_msgSend_secureProperties(void *a1, const char *a2, ...)
{
  return [a1 secureProperties];
}

id objc_msgSend_selector(void *a1, const char *a2, ...)
{
  return [a1 selector];
}

id objc_msgSend_sendBeginningToPairNotification(void *a1, const char *a2, ...)
{
  return [a1 sendBeginningToPairNotification];
}

id objc_msgSend_sendVersionRequestToCompanion(void *a1, const char *a2, ...)
{
  return [a1 sendVersionRequestToCompanion];
}

id objc_msgSend_serverExportedInterface(void *a1, const char *a2, ...)
{
  return [a1 serverExportedInterface];
}

id objc_msgSend_serverRemoteObjectInterface(void *a1, const char *a2, ...)
{
  return [a1 serverRemoteObjectInterface];
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return [a1 serverTrust];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return [a1 service];
}

id objc_msgSend_serviceRegistry(void *a1, const char *a2, ...)
{
  return [a1 serviceRegistry];
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return [a1 serviceWithDefaultShellEndpoint];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return [a1 services];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return [a1 set];
}

id objc_msgSend_setConnectPersistenceTimer(void *a1, const char *a2, ...)
{
  return [a1 setConnectPersistenceTimer];
}

id objc_msgSend_setPairingError(void *a1, const char *a2, ...)
{
  return [a1 setPairingError];
}

id objc_msgSend_setPairingTimer(void *a1, const char *a2, ...)
{
  return [a1 setPairingTimer];
}

id objc_msgSend_setPeripheralConnectorShouldForceDisconnect(void *a1, const char *a2, ...)
{
  return [a1 setPeripheralConnectorShouldForceDisconnect];
}

id objc_msgSend_setRemoteUnpairTimeout(void *a1, const char *a2, ...)
{
  return [a1 setRemoteUnpairTimeout];
}

id objc_msgSend_setUpClientReferenceCounters(void *a1, const char *a2, ...)
{
  return [a1 setUpClientReferenceCounters];
}

id objc_msgSend_setUpHistoryCompletionBlocks(void *a1, const char *a2, ...)
{
  return [a1 setUpHistoryCompletionBlocks];
}

id objc_msgSend_setupSignalHandlers(void *a1, const char *a2, ...)
{
  return [a1 setupSignalHandlers];
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return [a1 sharedConfiguration];
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return [a1 sharedConnection];
}

id objc_msgSend_sharedConnectivityPublisher(void *a1, const char *a2, ...)
{
  return [a1 sharedConnectivityPublisher];
}

id objc_msgSend_sharedConnectorManagerFactory(void *a1, const char *a2, ...)
{
  return [a1 sharedConnectorManagerFactory];
}

id objc_msgSend_sharedFactory(void *a1, const char *a2, ...)
{
  return [a1 sharedFactory];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return [a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return [a1 sharedManager];
}

id objc_msgSend_sharedMigrator(void *a1, const char *a2, ...)
{
  return [a1 sharedMigrator];
}

id objc_msgSend_sharedPairingAgent(void *a1, const char *a2, ...)
{
  return [a1 sharedPairingAgent];
}

id objc_msgSend_sharedPipeManagerManagerFactory(void *a1, const char *a2, ...)
{
  return [a1 sharedPipeManagerManagerFactory];
}

id objc_msgSend_sharedTable(void *a1, const char *a2, ...)
{
  return [a1 sharedTable];
}

id objc_msgSend_sharedUNUserNotificationCenter(void *a1, const char *a2, ...)
{
  return [a1 sharedUNUserNotificationCenter];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return [a1 shortDescription];
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return [a1 shortValue];
}

id objc_msgSend_shouldDropUnmatchingTraffic(void *a1, const char *a2, ...)
{
  return [a1 shouldDropUnmatchingTraffic];
}

id objc_msgSend_shouldFlagNextPairingForAltAccount(void *a1, const char *a2, ...)
{
  return [a1 shouldFlagNextPairingForAltAccount];
}

id objc_msgSend_shouldTriggerAlertNow(void *a1, const char *a2, ...)
{
  return [a1 shouldTriggerAlertNow];
}

id objc_msgSend_sigTerm(void *a1, const char *a2, ...)
{
  return [a1 sigTerm];
}

id objc_msgSend_sizeValue(void *a1, const char *a2, ...)
{
  return [a1 sizeValue];
}

id objc_msgSend_skipNotificationOnLaunch(void *a1, const char *a2, ...)
{
  return [a1 skipNotificationOnLaunch];
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return [a1 standardUserDefaults];
}

id objc_msgSend_startIDSConnectivityTimeout(void *a1, const char *a2, ...)
{
  return [a1 startIDSConnectivityTimeout];
}

id objc_msgSend_startPushing(void *a1, const char *a2, ...)
{
  return [a1 startPushing];
}

id objc_msgSend_startPushingCandidates(void *a1, const char *a2, ...)
{
  return [a1 startPushingCandidates];
}

id objc_msgSend_startScanningForCandidates(void *a1, const char *a2, ...)
{
  return [a1 startScanningForCandidates];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return [a1 startTime];
}

id objc_msgSend_startTimeout(void *a1, const char *a2, ...)
{
  return [a1 startTimeout];
}

id objc_msgSend_startTimer(void *a1, const char *a2, ...)
{
  return [a1 startTimer];
}

id objc_msgSend_startedPairing(void *a1, const char *a2, ...)
{
  return [a1 startedPairing];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return [a1 state];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return [a1 statusCode];
}

id objc_msgSend_statusCodeVoteNumber(void *a1, const char *a2, ...)
{
  return [a1 statusCodeVoteNumber];
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return [a1 stopAdvertising];
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return [a1 stopMonitoring];
}

id objc_msgSend_stopPushing(void *a1, const char *a2, ...)
{
  return [a1 stopPushing];
}

id objc_msgSend_stopPushingCandidates(void *a1, const char *a2, ...)
{
  return [a1 stopPushingCandidates];
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return [a1 stopScan];
}

id objc_msgSend_stopScanningForCandidates(void *a1, const char *a2, ...)
{
  return [a1 stopScanningForCandidates];
}

id objc_msgSend_stopTimer(void *a1, const char *a2, ...)
{
  return [a1 stopTimer];
}

id objc_msgSend_stopTracking(void *a1, const char *a2, ...)
{
  return [a1 stopTracking];
}

id objc_msgSend_storeMode(void *a1, const char *a2, ...)
{
  return [a1 storeMode];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return [a1 string];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return [a1 stringValue];
}

id objc_msgSend_strings(void *a1, const char *a2, ...)
{
  return [a1 strings];
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return [a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return [a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_submitMetic(void *a1, const char *a2, ...)
{
  return [a1 submitMetic];
}

id objc_msgSend_submitted(void *a1, const char *a2, ...)
{
  return [a1 submitted];
}

id objc_msgSend_subreason(void *a1, const char *a2, ...)
{
  return [a1 subreason];
}

id objc_msgSend_supportsEarlyPairedSync(void *a1, const char *a2, ...)
{
  return [a1 supportsEarlyPairedSync];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return [a1 suspend];
}

id objc_msgSend_switchIndex(void *a1, const char *a2, ...)
{
  return [a1 switchIndex];
}

id objc_msgSend_syncPairingClientCrashMonitoringCache(void *a1, const char *a2, ...)
{
  return [a1 syncPairingClientCrashMonitoringCache];
}

id objc_msgSend_syncTrapUIPushed(void *a1, const char *a2, ...)
{
  return [a1 syncTrapUIPushed];
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return [a1 synchronize];
}

id objc_msgSend_systemRootDirectory(void *a1, const char *a2, ...)
{
  return [a1 systemRootDirectory];
}

id objc_msgSend_systemVersions(void *a1, const char *a2, ...)
{
  return [a1 systemVersions];
}

id objc_msgSend_takeAssertion(void *a1, const char *a2, ...)
{
  return [a1 takeAssertion];
}

id objc_msgSend_tapToRadarLaunchURL(void *a1, const char *a2, ...)
{
  return [a1 tapToRadarLaunchURL];
}

id objc_msgSend_targetPairingID(void *a1, const char *a2, ...)
{
  return [a1 targetPairingID];
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return [a1 taskState];
}

id objc_msgSend_termsAcknowledgementServiceForAltAccount(void *a1, const char *a2, ...)
{
  return [a1 termsAcknowledgementServiceForAltAccount];
}

id objc_msgSend_termsAcknowledgementServiceGetCloudObject(void *a1, const char *a2, ...)
{
  return [a1 termsAcknowledgementServiceGetCloudObject];
}

id objc_msgSend_termsAcknowledgementServiceGetRemoteObject(void *a1, const char *a2, ...)
{
  return [a1 termsAcknowledgementServiceGetRemoteObject];
}

id objc_msgSend_termsDigest(void *a1, const char *a2, ...)
{
  return [a1 termsDigest];
}

id objc_msgSend_termsText(void *a1, const char *a2, ...)
{
  return [a1 termsText];
}

id objc_msgSend_termsTextCleared(void *a1, const char *a2, ...)
{
  return [a1 termsTextCleared];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSince1970];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceNow];
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceReferenceDate];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return [a1 timeout];
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return [a1 timer];
}

id objc_msgSend_timerQueue(void *a1, const char *a2, ...)
{
  return [a1 timerQueue];
}

id objc_msgSend_trafficClassQueue(void *a1, const char *a2, ...)
{
  return [a1 trafficClassQueue];
}

id objc_msgSend_trafficClasses(void *a1, const char *a2, ...)
{
  return [a1 trafficClasses];
}

id objc_msgSend_transaction(void *a1, const char *a2, ...)
{
  return [a1 transaction];
}

id objc_msgSend_transactionBeganWithThisNR(void *a1, const char *a2, ...)
{
  return [a1 transactionBeganWithThisNR];
}

id objc_msgSend_transactionClass(void *a1, const char *a2, ...)
{
  return [a1 transactionClass];
}

id objc_msgSend_transactionClasses(void *a1, const char *a2, ...)
{
  return [a1 transactionClasses];
}

id objc_msgSend_transactionCompleted(void *a1, const char *a2, ...)
{
  return [a1 transactionCompleted];
}

id objc_msgSend_transactionCoordinatorHasBecomeIdle(void *a1, const char *a2, ...)
{
  return [a1 transactionCoordinatorHasBecomeIdle];
}

id objc_msgSend_transactionDidComplete(void *a1, const char *a2, ...)
{
  return [a1 transactionDidComplete];
}

id objc_msgSend_transactionErrors(void *a1, const char *a2, ...)
{
  return [a1 transactionErrors];
}

id objc_msgSend_transactionIndex(void *a1, const char *a2, ...)
{
  return [a1 transactionIndex];
}

id objc_msgSend_transactionName(void *a1, const char *a2, ...)
{
  return [a1 transactionName];
}

id objc_msgSend_transactionStartTimestamp(void *a1, const char *a2, ...)
{
  return [a1 transactionStartTimestamp];
}

id objc_msgSend_transactions(void *a1, const char *a2, ...)
{
  return [a1 transactions];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return [a1 type];
}

id objc_msgSend_uUIDValue(void *a1, const char *a2, ...)
{
  return [a1 uUIDValue];
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return [a1 uniqueID];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return [a1 uniqueIDOverride];
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return [a1 unlock];
}

id objc_msgSend_unpairHelper(void *a1, const char *a2, ...)
{
  return [a1 unpairHelper];
}

id objc_msgSend_unregisterForKeychainNotifications(void *a1, const char *a2, ...)
{
  return [a1 unregisterForKeychainNotifications];
}

id objc_msgSend_unregisterForNotifications(void *a1, const char *a2, ...)
{
  return [a1 unregisterForNotifications];
}

id objc_msgSend_unregisterForPairingNotification(void *a1, const char *a2, ...)
{
  return [a1 unregisterForPairingNotification];
}

id objc_msgSend_unregisterFromNotifications(void *a1, const char *a2, ...)
{
  return [a1 unregisterFromNotifications];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedShortValue];
}

id objc_msgSend_update(void *a1, const char *a2, ...)
{
  return [a1 update];
}

id objc_msgSend_updateAdvertisingName(void *a1, const char *a2, ...)
{
  return [a1 updateAdvertisingName];
}

id objc_msgSend_updateCurrentTransactionIndex(void *a1, const char *a2, ...)
{
  return [a1 updateCurrentTransactionIndex];
}

id objc_msgSend_updateFromBTState(void *a1, const char *a2, ...)
{
  return [a1 updateFromBTState];
}

id objc_msgSend_updateIsPairedTelemetryKey(void *a1, const char *a2, ...)
{
  return [a1 updateIsPairedTelemetryKey];
}

id objc_msgSend_updateNeedsResource(void *a1, const char *a2, ...)
{
  return [a1 updateNeedsResource];
}

id objc_msgSend_updatePairingSessionIdIfNeededForActiveDevice(void *a1, const char *a2, ...)
{
  return [a1 updatePairingSessionIdIfNeededForActiveDevice];
}

id objc_msgSend_updateResourceAvailability(void *a1, const char *a2, ...)
{
  return [a1 updateResourceAvailability];
}

id objc_msgSend_updateStatusCode(void *a1, const char *a2, ...)
{
  return [a1 updateStatusCode];
}

id objc_msgSend_updateTrafficClass(void *a1, const char *a2, ...)
{
  return [a1 updateTrafficClass];
}

id objc_msgSend_updatedSession(void *a1, const char *a2, ...)
{
  return [a1 updatedSession];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return [a1 userInfo];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return [a1 uuid];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return [a1 value];
}

id objc_msgSend_voiceOverShowBrailleWatchSettings(void *a1, const char *a2, ...)
{
  return [a1 voiceOverShowBrailleWatchSettings];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return [a1 weakObjectsHashTable];
}

id objc_msgSend_weakObjectsPointerArray(void *a1, const char *a2, ...)
{
  return [a1 weakObjectsPointerArray];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return [a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return [a1 width];
}

id objc_msgSend_willBegin(void *a1, const char *a2, ...)
{
  return [a1 willBegin];
}

id objc_msgSend_wipeCharacteristicHandlers(void *a1, const char *a2, ...)
{
  return [a1 wipeCharacteristicHandlers];
}

id objc_msgSend_write(void *a1, const char *a2, ...)
{
  return [a1 write];
}

id objc_msgSend_writeHandler(void *a1, const char *a2, ...)
{
  return [a1 writeHandler];
}

id objc_msgSend_writer(void *a1, const char *a2, ...)
{
  return [a1 writer];
}

id objc_msgSend_written(void *a1, const char *a2, ...)
{
  return [a1 written];
}

id objc_msgSend_xmlDictionary(void *a1, const char *a2, ...)
{
  return [a1 xmlDictionary];
}

id objc_msgSend_xpcListenerClass(void *a1, const char *a2, ...)
{
  return [a1 xpcListenerClass];
}

id objc_msgSend_xpcPairingQueue(void *a1, const char *a2, ...)
{
  return [a1 xpcPairingQueue];
}

id objc_msgSend_xpcWatchNeedsGraduation_(void *a1, const char *a2, ...)
{
  return [a1 xpcWatchNeedsGraduation:];
}