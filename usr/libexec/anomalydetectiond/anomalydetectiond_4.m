uint64_t CMMsl::KappaRoads::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  uint64_t vars8;

  v3 = this;
  v4 = *(unsigned char *)(this + 32);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 16), 1u);
    v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 2u);
  v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  v5 = *(_DWORD *)(v3 + 28);

  return PB::Writer::writeVarInt(a2, v5, 4u);
}

uint64_t CMMsl::KappaRoads::hash_value(CMMsl::KappaRoads *this)
{
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
    uint64_t v1 = *((void *)this + 2);
    if (*((unsigned char *)this + 32))
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 1);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 32)) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    float v3 = *((float *)this + 6);
    uint64_t v4 = LODWORD(v3);
    if (v3 == 0.0) {
      uint64_t v4 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_7;
    }
LABEL_11:
    uint64_t v5 = 0;
    return v2 ^ v1 ^ v4 ^ v5;
  }
LABEL_10:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v5 = *((unsigned int *)this + 7);
  return v2 ^ v1 ^ v4 ^ v5;
}

void CMMsl::KappaRoadsResult::~KappaRoadsResult(CMMsl::KappaRoadsResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t this, const CMMsl::KappaRoadsResult *a2)
{
  *(void *)this = off_1003A6E10;
  *(_DWORD *)(this + 40) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 40) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 32) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 9);
    v3 |= 0x10u;
    *(unsigned char *)(this + 40) = v3;
    *(_DWORD *)(this + 36) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return this;
      }
LABEL_12:
      uint64_t v8 = *((void *)a2 + 2);
      *(unsigned char *)(this + 40) = v3 | 2;
      *(void *)(this + 16) = v8;
      return this;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(unsigned char *)(this + 40) = v3;
  *(void *)(this + 8) = v7;
  if ((*((unsigned char *)a2 + 40) & 2) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, const CMMsl::KappaRoadsResult *a2)
{
  if ((const CMMsl::KappaRoadsResult *)a1 != a2)
  {
    CMMsl::KappaRoadsResult::KappaRoadsResult((uint64_t)&v8, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v3;
    int v4 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v4;
    uint64_t v5 = *(void *)(a1 + 36);
    *(void *)(a1 + 36) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRoadsResult *a2, CMMsl::KappaRoadsResult *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  float result = *((float *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((float *)a2 + 8) = result;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  return result;
}

float CMMsl::KappaRoadsResult::KappaRoadsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6E10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6E10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaRoadsResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v10 = off_1003A6E10;
    uint64_t v3 = *(void *)(a2 + 24);
    int v4 = *(_DWORD *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 36);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v12 = *(void *)(a1 + 24);
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v4;
    int v13 = v6;
    uint64_t v14 = *(void *)(a1 + 36);
    long long v7 = *(_OWORD *)(a1 + 8);
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 36) = v5;
    *(_OWORD *)(a1 + 8) = v8;
    long long v11 = v7;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaRoadsResult::formatText(CMMsl::KappaRoadsResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 8));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 9));
  if ((*((unsigned char *)this + 40) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 3));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRoadsResult::readFrom(CMMsl::KappaRoadsResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if (v20 == 101)
      {
        *((unsigned char *)this + 40) |= 4u;
        unint64_t v39 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v40 = *(void *)a2;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v43 = 0;
          if (v2 <= v39) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v39)
            {
              uint64_t v43 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_108;
            }
            unint64_t v60 = v39++;
            char v61 = *(unsigned char *)(v40 + v60);
            *((void *)a2 + 1) = v39;
            v43 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0) {
              break;
            }
            v58 += 7;
            BOOL v14 = v59++ > 8;
            if (v14)
            {
              uint64_t v43 = 0;
              goto LABEL_107;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v43 = 0;
          }
LABEL_107:
          unint64_t v2 = v60 + 1;
        }
        else
        {
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          while (1)
          {
            unint64_t v2 = v39 + 1;
            *((void *)a2 + 1) = v39 + 1;
            char v44 = *(unsigned char *)(v40 + v39);
            v43 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0) {
              break;
            }
            v41 += 7;
            unint64_t v39 = v2;
            BOOL v14 = v42++ > 8;
            if (v14)
            {
              uint64_t v43 = 0;
              break;
            }
          }
        }
LABEL_108:
        *((void *)this + 3) = v43;
      }
      else
      {
        if (v20 != 103)
        {
LABEL_58:
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_109;
        }
        *((unsigned char *)this + 40) |= 8u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
    }
    else
    {
      switch(v20)
      {
        case 0x68:
          *((unsigned char *)this + 40) |= 0x10u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v28 = *(void *)a2;
          if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
          {
            char v50 = 0;
            unsigned int v51 = 0;
            uint64_t v31 = 0;
            if (v2 <= v27) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v27)
              {
                LODWORD(v31) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_98;
              }
              unint64_t v52 = v27++;
              char v53 = *(unsigned char *)(v28 + v52);
              *((void *)a2 + 1) = v27;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0) {
                break;
              }
              v50 += 7;
              BOOL v14 = v51++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_97;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              LODWORD(v31) = 0;
            }
LABEL_97:
            unint64_t v2 = v52 + 1;
          }
          else
          {
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            while (1)
            {
              unint64_t v2 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v32 = *(unsigned char *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0) {
                break;
              }
              v29 += 7;
              unint64_t v27 = v2;
              BOOL v14 = v30++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                break;
              }
            }
          }
LABEL_98:
          *((_DWORD *)this + 9) = v31;
          break;
        case 0xC9:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v33 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v34 = *(void *)a2;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            char v54 = 0;
            unsigned int v55 = 0;
            uint64_t v37 = 0;
            if (v2 <= v33) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v33)
              {
                uint64_t v37 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_103;
              }
              unint64_t v56 = v33++;
              char v57 = *(unsigned char *)(v34 + v56);
              *((void *)a2 + 1) = v33;
              v37 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0) {
                break;
              }
              v54 += 7;
              BOOL v14 = v55++ > 8;
              if (v14)
              {
                uint64_t v37 = 0;
                goto LABEL_102;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v37 = 0;
            }
LABEL_102:
            unint64_t v2 = v56 + 1;
          }
          else
          {
            char v35 = 0;
            unsigned int v36 = 0;
            uint64_t v37 = 0;
            while (1)
            {
              unint64_t v2 = v33 + 1;
              *((void *)a2 + 1) = v33 + 1;
              char v38 = *(unsigned char *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0) {
                break;
              }
              v35 += 7;
              unint64_t v33 = v2;
              BOOL v14 = v36++ > 8;
              if (v14)
              {
                uint64_t v37 = 0;
                break;
              }
            }
          }
LABEL_103:
          *((void *)this + 1) = v37;
          break;
        case 0xCA:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v21 = *((void *)a2 + 1);
          unint64_t v2 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            char v46 = 0;
            unsigned int v47 = 0;
            uint64_t v25 = 0;
            if (v2 <= v21) {
              unint64_t v2 = *((void *)a2 + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                uint64_t v25 = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_93;
              }
              unint64_t v48 = v21++;
              char v49 = *(unsigned char *)(v22 + v48);
              *((void *)a2 + 1) = v21;
              v25 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0) {
                break;
              }
              v46 += 7;
              BOOL v14 = v47++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                goto LABEL_92;
              }
            }
            if (*((unsigned char *)a2 + 24)) {
              uint64_t v25 = 0;
            }
LABEL_92:
            unint64_t v2 = v48 + 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v2 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
              if (v14)
              {
                uint64_t v25 = 0;
                break;
              }
            }
          }
LABEL_93:
          *((void *)this + 2) = v25;
          break;
        default:
          goto LABEL_58;
      }
    }
LABEL_109:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::KappaRoadsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 24), 0x65u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0x67u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xC9u);
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x68u);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0xCAu);
}

uint64_t CMMsl::KappaRoadsResult::hash_value(CMMsl::KappaRoadsResult *this)
{
  if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_10:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  uint64_t v1 = *((void *)this + 3);
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_10;
  }
LABEL_3:
  float v2 = *((float *)this + 8);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    uint64_t v4 = *((unsigned int *)this + 9);
    if (*((unsigned char *)this + 40)) {
      goto LABEL_7;
    }
LABEL_12:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v3 ^ v1 ^ v4 ^ v5 ^ v6;
  }
LABEL_11:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 1) == 0) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v5 = *((void *)this + 1);
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v6 = *((void *)this + 2);
  return v3 ^ v1 ^ v4 ^ v5 ^ v6;
}

void CMMsl::KappaRolloverCrashResult::~KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(CMMsl::KappaRolloverCrashResult *this, const CMMsl::KappaRolloverCrashResult *a2)
{
  *(void *)this = off_1003A6E48;
  float v2 = (uint64_t *)((char *)this + 316);
  *((_DWORD *)this + 81) = 0;
  *(void *)((char *)this + 316) = 0;
  uint64_t v3 = (uint64_t *)((char *)a2 + 316);
  uint64_t v4 = *(void *)((char *)a2 + 316);
  if (v4)
  {
    unint64_t v6 = 0;
    unint64_t v8 = *((void *)a2 + 1);
    *((unsigned char *)this + 326) = 0;
    *((_WORD *)this + 162) = 0;
    uint64_t v5 = 1;
    *float v2 = 1;
    *((void *)this + 1) = v8;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    uint64_t v4 = *v3;
    if ((*((_WORD *)a2 + 162) & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = *((unsigned __int16 *)a2 + 162);
  LODWORD(v8) = v7 | (*((unsigned __int8 *)a2 + 326) << 16);
  if ((v7 & 0x8000) != 0)
  {
LABEL_5:
    char v9 = *((unsigned char *)a2 + 310);
    unint64_t v6 = 0x8000;
    *float v2 = v5;
    *((unsigned char *)this + 326) = 0;
    *((_WORD *)this + 162) = 0x8000;
    *((unsigned char *)this + 310) = v9;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    uint64_t v4 = *v3;
  }
LABEL_6:
  if ((v8 & 0x10000) != 0)
  {
    char v10 = *((unsigned char *)a2 + 311);
    *((_WORD *)this + 162) = v6;
    v6 |= 0x10000uLL;
    *float v2 = v5;
    *((unsigned char *)this + 326) = BYTE2(v6);
    *((unsigned char *)this + 311) = v10;
    LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
    uint64_t v4 = *v3;
    if ((*v3 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_90;
    }
  }
  else if ((v4 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  float result = *((float *)a2 + 45);
  v5 |= 0x40000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 45) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_9:
    if ((v8 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_91;
  }
LABEL_90:
  float result = *((float *)a2 + 21);
  v5 |= 0x40000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 21) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 8) == 0)
  {
LABEL_10:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *((float *)a2 + 70);
  unint64_t v8 = v6 >> 16;
  v6 |= 8uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 70) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x2000) == 0)
  {
LABEL_11:
    if ((v8 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_93;
  }
LABEL_92:
  char v12 = *((unsigned char *)a2 + 308);
  unint64_t v13 = v6 >> 16;
  v6 |= 0x2000uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v13;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 308) = v12;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x400) == 0)
  {
LABEL_12:
    if ((v8 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_94;
  }
LABEL_93:
  char v14 = *((unsigned char *)a2 + 305);
  unint64_t v15 = v6 >> 16;
  v6 |= 0x400uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v15;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 305) = v14;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_95;
  }
LABEL_94:
  char v16 = *((unsigned char *)a2 + 304);
  unint64_t v17 = v6 >> 16;
  v6 |= 0x200uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v17;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 304) = v16;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_96;
  }
LABEL_95:
  int v18 = *((_DWORD *)a2 + 28);
  v5 |= 0x2000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 28) = v18;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x1000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_97;
  }
LABEL_96:
  char v19 = *((unsigned char *)a2 + 307);
  unint64_t v20 = v6 >> 16;
  v6 |= 0x1000uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v20;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 307) = v19;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *((float *)a2 + 27);
  v5 |= 0x1000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 27) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *((float *)a2 + 52);
  v5 |= 0x2000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 52) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_100;
  }
LABEL_99:
  float result = *((float *)a2 + 51);
  v5 |= 0x1000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 51) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_101;
  }
LABEL_100:
  float result = *((float *)a2 + 53);
  v5 |= 0x4000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 53) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_102;
  }
LABEL_101:
  float result = *((float *)a2 + 9);
  v5 |= 0x40uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 9) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_21:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_103;
  }
LABEL_102:
  float result = *((float *)a2 + 4);
  v5 |= 2uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 4) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_22:
    if ((v8 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_104;
  }
LABEL_103:
  float result = *((float *)a2 + 18);
  v5 |= 0x8000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 18) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((v8 & 0x40000) == 0)
  {
LABEL_23:
    if ((v8 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_105;
  }
LABEL_104:
  char v21 = *((unsigned char *)a2 + 313);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x40000uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((unsigned char *)this + 313) = v21;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x800) == 0)
  {
LABEL_24:
    if ((v8 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_106;
  }
LABEL_105:
  char v22 = *((unsigned char *)a2 + 306);
  unint64_t v23 = v6 >> 16;
  v6 |= 0x800uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v23;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 306) = v22;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*((_WORD *)a2 + 162) & 0x4000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000000000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }
LABEL_106:
  char v24 = *((unsigned char *)a2 + 309);
  unint64_t v25 = v6 >> 16;
  v6 |= 0x4000uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v25;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 309) = v24;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_108;
  }
LABEL_107:
  float result = *((float *)a2 + 56);
  v5 |= 0x20000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 56) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_109;
  }
LABEL_108:
  float result = *((float *)a2 + 54);
  v5 |= 0x8000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 54) = result;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v8 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_110;
  }
LABEL_109:
  int v26 = *((_DWORD *)a2 + 55);
  v5 |= 0x10000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((_DWORD *)this + 55) = v26;
  LODWORD(v8) = *((unsigned __int16 *)a2 + 162) | (*((unsigned __int8 *)a2 + 326) << 16);
  uint64_t v4 = *v3;
  if ((v8 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_111;
  }
LABEL_110:
  char v27 = *((unsigned char *)a2 + 312);
  *((_WORD *)this + 162) = v6;
  v6 |= 0x20000uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((unsigned char *)this + 312) = v27;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_112;
  }
LABEL_111:
  float result = *((float *)a2 + 57);
  v5 |= 0x40000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 57) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_113;
  }
LABEL_112:
  float result = *((float *)a2 + 62);
  v5 |= 0x800000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 62) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000) == 0)
  {
LABEL_32:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_114;
  }
LABEL_113:
  float result = *((float *)a2 + 22);
  v5 |= 0x80000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 22) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v8 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_115;
  }
LABEL_114:
  float result = *((float *)a2 + 46);
  v5 |= 0x80000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 46) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((v8 & 0x10) == 0)
  {
LABEL_34:
    if ((v4 & 0x80000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_116;
  }
LABEL_115:
  float result = *((float *)a2 + 71);
  unint64_t v8 = v6 >> 16;
  v6 |= 0x10uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 71) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_117;
  }
LABEL_116:
  float result = *((float *)a2 + 58);
  v5 |= 0x80000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 58) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_118;
  }
LABEL_117:
  float result = *((float *)a2 + 63);
  v5 |= 0x1000000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 63) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_119;
  }
LABEL_118:
  float result = *((float *)a2 + 23);
  v5 |= 0x100000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 23) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v8 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_120;
  }
LABEL_119:
  float result = *((float *)a2 + 47);
  v5 |= 0x100000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 47) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((v8 & 0x20) == 0)
  {
LABEL_39:
    if ((v4 & 0x100000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_121;
  }
LABEL_120:
  float result = *((float *)a2 + 72);
  unint64_t v8 = v6 >> 16;
  v6 |= 0x20uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 72) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_122;
  }
LABEL_121:
  float result = *((float *)a2 + 59);
  v5 |= 0x100000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 59) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_123;
  }
LABEL_122:
  float result = *((float *)a2 + 64);
  v5 |= 0x2000000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 64) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_42:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_124;
  }
LABEL_123:
  float result = *((float *)a2 + 24);
  v5 |= 0x200000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 24) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v8 & 0x40) == 0) {
      goto LABEL_44;
    }
    goto LABEL_125;
  }
LABEL_124:
  float result = *((float *)a2 + 48);
  v5 |= 0x200000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 48) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((v8 & 0x40) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_126;
  }
LABEL_125:
  float result = *((float *)a2 + 73);
  unint64_t v8 = v6 >> 16;
  v6 |= 0x40uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 73) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x400) == 0) {
      goto LABEL_46;
    }
    goto LABEL_127;
  }
LABEL_126:
  float result = *((float *)a2 + 10);
  v5 |= 0x80uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 10) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_46:
    if ((v4 & 0x200) == 0) {
      goto LABEL_47;
    }
    goto LABEL_128;
  }
LABEL_127:
  float result = *((float *)a2 + 13);
  v5 |= 0x400uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 13) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_47:
    if ((v4 & 0x100) == 0) {
      goto LABEL_48;
    }
    goto LABEL_129;
  }
LABEL_128:
  float result = *((float *)a2 + 12);
  v5 |= 0x200uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 12) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_48:
    if ((v4 & 4) == 0) {
      goto LABEL_49;
    }
    goto LABEL_130;
  }
LABEL_129:
  float result = *((float *)a2 + 11);
  v5 |= 0x100uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 11) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_49:
    if ((v4 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_131;
  }
LABEL_130:
  float result = *((float *)a2 + 5);
  v5 |= 4uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 5) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_50:
    if ((v4 & 0x10) == 0) {
      goto LABEL_51;
    }
    goto LABEL_132;
  }
LABEL_131:
  float result = *((float *)a2 + 8);
  v5 |= 0x20uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 8) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_51:
    if ((v4 & 8) == 0) {
      goto LABEL_52;
    }
    goto LABEL_133;
  }
LABEL_132:
  float result = *((float *)a2 + 7);
  v5 |= 0x10uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 7) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_52:
    if ((v4 & 0x800) == 0) {
      goto LABEL_53;
    }
    goto LABEL_134;
  }
LABEL_133:
  float result = *((float *)a2 + 6);
  v5 |= 8uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 6) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_135;
  }
LABEL_134:
  float result = *((float *)a2 + 14);
  v5 |= 0x800uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 14) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_54:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_136;
  }
LABEL_135:
  float result = *((float *)a2 + 17);
  v5 |= 0x4000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 17) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_55:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_137;
  }
LABEL_136:
  float result = *((float *)a2 + 16);
  v5 |= 0x2000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 16) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_56:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_138;
  }
LABEL_137:
  float result = *((float *)a2 + 15);
  v5 |= 0x1000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 15) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_57:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_139;
  }
LABEL_138:
  float result = *((float *)a2 + 19);
  v5 |= 0x10000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 19) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_58:
    if ((v4 & 0x200000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_140;
  }
LABEL_139:
  float result = *((float *)a2 + 20);
  v5 |= 0x20000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 20) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x4000000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_141;
  }
LABEL_140:
  float result = *((float *)a2 + 60);
  v5 |= 0x200000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 60) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_142;
  }
LABEL_141:
  float result = *((float *)a2 + 65);
  v5 |= 0x4000000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 65) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_61:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_143;
  }
LABEL_142:
  float result = *((float *)a2 + 25);
  v5 |= 0x400000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 25) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v8 & 0x80) == 0) {
      goto LABEL_63;
    }
    goto LABEL_144;
  }
LABEL_143:
  float result = *((float *)a2 + 49);
  v5 |= 0x400000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 49) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((v8 & 0x80) == 0)
  {
LABEL_63:
    if ((v4 & 0x400000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_145;
  }
LABEL_144:
  float result = *((float *)a2 + 74);
  unint64_t v8 = v6 >> 16;
  v6 |= 0x80uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 74) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_146;
  }
LABEL_145:
  float result = *((float *)a2 + 61);
  v5 |= 0x400000000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 61) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_147;
  }
LABEL_146:
  float result = *((float *)a2 + 66);
  v5 |= 0x8000000000000000;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 66) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_66:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_148;
  }
LABEL_147:
  float result = *((float *)a2 + 26);
  v5 |= 0x800000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 26) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v8 & 0x100) == 0) {
      goto LABEL_68;
    }
    goto LABEL_149;
  }
LABEL_148:
  float result = *((float *)a2 + 50);
  v5 |= 0x800000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 50) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((v8 & 0x100) == 0)
  {
LABEL_68:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_150;
  }
LABEL_149:
  float result = *((float *)a2 + 75);
  unint64_t v8 = v6 >> 16;
  v6 |= 0x100uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 75) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_151;
  }
LABEL_150:
  float result = *((float *)a2 + 35);
  v5 |= (unint64_t)&_mh_execute_header;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 35) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_152;
  }
LABEL_151:
  float result = *((float *)a2 + 36);
  v5 |= 0x200000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 36) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_153;
  }
LABEL_152:
  float result = *((float *)a2 + 30);
  v5 |= 0x8000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 30) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_154;
  }
LABEL_153:
  float result = *((float *)a2 + 29);
  v5 |= 0x4000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 29) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_155;
  }
LABEL_154:
  float result = *((float *)a2 + 34);
  v5 |= 0x80000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 34) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_156;
  }
LABEL_155:
  float result = *((float *)a2 + 33);
  v5 |= 0x40000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 33) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_157;
  }
LABEL_156:
  float result = *((float *)a2 + 32);
  v5 |= 0x20000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 32) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_158;
  }
LABEL_157:
  float result = *((float *)a2 + 31);
  v5 |= 0x10000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 31) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_159;
  }
LABEL_158:
  float result = *((float *)a2 + 43);
  v5 |= 0x10000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 43) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_160;
  }
LABEL_159:
  float result = *((float *)a2 + 44);
  v5 |= 0x20000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 44) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_161;
  }
LABEL_160:
  float result = *((float *)a2 + 38);
  v5 |= 0x800000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 38) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_162;
  }
LABEL_161:
  float result = *((float *)a2 + 37);
  v5 |= 0x400000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 37) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_163;
  }
LABEL_162:
  float result = *((float *)a2 + 42);
  v5 |= 0x8000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 42) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_164;
  }
LABEL_163:
  float result = *((float *)a2 + 41);
  v5 |= 0x4000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 41) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_165;
  }
LABEL_164:
  float result = *((float *)a2 + 40);
  v5 |= 0x2000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 40) = result;
  LOWORD(v8) = *((_WORD *)a2 + 162);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v8 & 2) == 0) {
      goto LABEL_85;
    }
    goto LABEL_166;
  }
LABEL_165:
  float result = *((float *)a2 + 39);
  v5 |= 0x1000000000uLL;
  *float v2 = v5;
  *((_WORD *)this + 162) = v6;
  *((unsigned char *)this + 326) = BYTE2(v6);
  *((float *)this + 39) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 2) == 0)
  {
LABEL_85:
    if ((v8 & 4) == 0) {
      goto LABEL_86;
    }
    goto LABEL_167;
  }
LABEL_166:
  float result = *((float *)a2 + 68);
  unint64_t v8 = v6 >> 16;
  v6 |= 2uLL;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v8;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 68) = result;
  LOBYTE(v8) = *((_WORD *)a2 + 162);
  if ((*((_WORD *)a2 + 162) & 4) == 0)
  {
LABEL_86:
    if ((v8 & 1) == 0) {
      return result;
    }
LABEL_168:
    float result = *((float *)a2 + 67);
    *float v2 = v5;
    *((unsigned char *)this + 326) = BYTE2(v6);
    *((_WORD *)this + 162) = v6 | 1;
    *((float *)this + 67) = result;
    return result;
  }
LABEL_167:
  float result = *((float *)a2 + 69);
  unint64_t v28 = v6 >> 16;
  LODWORD(v6) = v6 | 4;
  *float v2 = v5;
  *((unsigned char *)this + 326) = v28;
  *((_WORD *)this + 162) = v6;
  *((float *)this + 69) = result;
  if (*((_WORD *)a2 + 162)) {
    goto LABEL_168;
  }
  return result;
}

CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, const CMMsl::KappaRolloverCrashResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((CMMsl::KappaRolloverCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaRolloverCrashResult *a2, CMMsl::KappaRolloverCrashResult *a3)
{
  int v3 = *((_DWORD *)this + 81);
  uint64_t v4 = *(void *)((char *)this + 316);
  int v5 = *((_DWORD *)a2 + 81);
  *(void *)((char *)this + 316) = *(void *)((char *)a2 + 316);
  *((_DWORD *)this + 81) = v5;
  *(void *)((char *)a2 + 316) = v4;
  *((_DWORD *)a2 + 81) = v3;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 310);
  *((unsigned char *)this + 310) = *((unsigned char *)a2 + 310);
  *((unsigned char *)a2 + 310) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 311);
  *((unsigned char *)this + 311) = *((unsigned char *)a2 + 311);
  *((unsigned char *)a2 + 311) = v6;
  int v7 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v7;
  int v8 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v8;
  int v9 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v9;
  LOBYTE(v6) = *((unsigned char *)this + 308);
  *((unsigned char *)this + 308) = *((unsigned char *)a2 + 308);
  *((unsigned char *)a2 + 308) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 305);
  *((unsigned char *)this + 305) = *((unsigned char *)a2 + 305);
  *((unsigned char *)a2 + 305) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 304);
  *((unsigned char *)this + 304) = *((unsigned char *)a2 + 304);
  *((unsigned char *)a2 + 304) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 307);
  *((unsigned char *)this + 307) = *((unsigned char *)a2 + 307);
  *((unsigned char *)a2 + 307) = v6;
  int v10 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v10;
  int v11 = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v11;
  int v12 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v12;
  int v13 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v13;
  int v14 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v14;
  int v15 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v15;
  int v16 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v16;
  LOBYTE(v6) = *((unsigned char *)this + 313);
  *((unsigned char *)this + 313) = *((unsigned char *)a2 + 313);
  *((unsigned char *)a2 + 313) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 306);
  *((unsigned char *)this + 306) = *((unsigned char *)a2 + 306);
  *((unsigned char *)a2 + 306) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 309);
  *((unsigned char *)this + 309) = *((unsigned char *)a2 + 309);
  *((unsigned char *)a2 + 309) = v6;
  int v17 = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v17;
  int v18 = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v18;
  LODWORD(v6) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 312);
  *((unsigned char *)this + 312) = *((unsigned char *)a2 + 312);
  *((unsigned char *)a2 + 312) = v6;
  int v19 = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v19;
  int v20 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v20;
  int v21 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v21;
  int v22 = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v22;
  int v23 = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v23;
  int v24 = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v24;
  int v25 = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v25;
  int v26 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v26;
  int v27 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v27;
  int v28 = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v28;
  int v29 = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v29;
  int v30 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v30;
  int v31 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v31;
  int v32 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v32;
  int v33 = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v33;
  int v34 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v34;
  int v35 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v35;
  int v36 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v36;
  int v37 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v37;
  int v38 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v38;
  int v39 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v39;
  int v40 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v40;
  int v41 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v41;
  int v42 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v42;
  int v43 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v43;
  int v44 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v44;
  int v45 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v45;
  int v46 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v46;
  int v47 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v47;
  int v48 = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v48;
  int v49 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v49;
  int v50 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v50;
  int v51 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v51;
  int v52 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v52;
  int v53 = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v53;
  int v54 = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v54;
  int v55 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v55;
  int v56 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v56;
  int v57 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v57;
  int v58 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v58;
  int v59 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v59;
  int v60 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v60;
  int v61 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v61;
  int v62 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v62;
  int v63 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v63;
  int v64 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v64;
  int v65 = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v65;
  int v66 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v66;
  int v67 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v67;
  int v68 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v68;
  int v69 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v69;
  int v70 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v70;
  int v71 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v71;
  int v72 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v72;
  int v73 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v73;
  int v74 = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v74;
  int v75 = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v75;
  float result = *((float *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((float *)a2 + 67) = result;
  return result;
}

float CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6E48;
  uint64_t v2 = *(void *)(a2 + 316);
  *(_DWORD *)(a1 + 324) = *(_DWORD *)(a2 + 324);
  *(void *)(a1 + 316) = v2;
  *(_DWORD *)(a2 + 324) = 0;
  *(void *)(a2 + 316) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 310) = *(unsigned char *)(a2 + 310);
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
  *(unsigned char *)(a1 + 305) = *(unsigned char *)(a2 + 305);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 307) = *(unsigned char *)(a2 + 307);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  *(unsigned char *)(a1 + 306) = *(unsigned char *)(a2 + 306);
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  float result = *(float *)(a2 + 268);
  *(float *)(a1 + 268) = result;
  return result;
}

CMMsl *CMMsl::KappaRolloverCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaRolloverCrashResult::KappaRolloverCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaRolloverCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaRolloverCrashResult::formatText(CMMsl::KappaRolloverCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)((char *)this + 316);
  uint64_t v6 = *(void *)((char *)this + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThreshold", *((float *)this + 4));
    int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    uint64_t v6 = *v5;
    if ((*v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdCenter", *((float *)this + 5));
    int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    uint64_t v6 = *v5;
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMax", *((float *)this + 6));
    int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
    uint64_t v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_93;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdMin", *((float *)this + 7));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "audioRolloverDvChaosThresholdStretch", *((float *)this + 8));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThreshold", *((float *)this + 9));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdCenter", *((float *)this + 10));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMax", *((float *)this + 11));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdMin", *((float *)this + 12));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(a2, "audioRolloverDvEnergyThresholdStretch", *((float *)this + 13));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdCenter", *((float *)this + 14));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMax", *((float *)this + 15));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdMin", *((float *)this + 16));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(a2, "audioRolloverDvMaxRmsThresholdStretch", *((float *)this + 17));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(a2, "audioRolloverDvRmsThreshold", *((float *)this + 18));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(a2, "baroEscalateMaxAccelNormThreshold", *((float *)this + 19));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(a2, "baroEscalateSpinNormThreshold", *((float *)this + 20));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 21));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(a2, "cumulativeRotationThreshold", *((float *)this + 22));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithAudio", *((float *)this + 23));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudio", *((float *)this + 24));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 25));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "cumulativeRotationThresholdWithoutAudioStandaloneFull", *((float *)this + 26));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "deltaVXYOverEpoch", *((float *)this + 27));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "detectorRegime", *((_DWORD *)this + 28));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x200) == 0)
  {
LABEL_30:
    if ((v7 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "hasAudioInEpoch", *((unsigned char *)this + 304));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x400) == 0)
  {
LABEL_31:
    if ((v7 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "isAudioRollover", *((unsigned char *)this + 305));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x800) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "isAudioRolloverDv", *((unsigned char *)this + 306));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x1000) == 0)
  {
LABEL_33:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "isAudioSupported", *((unsigned char *)this + 307));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x2000) == 0)
  {
LABEL_34:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "isBaro", *((unsigned char *)this + 308));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x4000) == 0)
  {
LABEL_35:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "isCompanionConnected", *((unsigned char *)this + 309));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "lowSenseWithAudioCumulativeRotationThreshold", *((float *)this + 29));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "lowSenseWithAudioMaxAccelNormThreshold", *((float *)this + 30));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *((float *)this + 31));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "lowSenseWithAudioParBaroNormThreshold", *((float *)this + 32));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "lowSenseWithAudioPeakPressureThreshold", *((float *)this + 33));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "lowSenseWithAudioZgtimeThreshold", *((float *)this + 34));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold1", *((float *)this + 35));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "lowSenseWithAudiodvThreshold2", *((float *)this + 36));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioCumulativeRotationThreshold", *((float *)this + 37));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioMaxAccelNormThreshold", *((float *)this + 38));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *((float *)this + 39));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioParBaroNormThreshold", *((float *)this + 40));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioPeakPressureThreshold", *((float *)this + 41));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudioZgtimeThreshold", *((float *)this + 42));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold1", *((float *)this + 43));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "lowSenseWithoutAudiodvThreshold2", *((float *)this + 44));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "maxAccelNorm", *((float *)this + 45));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "maxAccelNormThreshold", *((float *)this + 46));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x200000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithAudio", *((float *)this + 47));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x400000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudio", *((float *)this + 48));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x800000000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 49));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x1000000000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "maxAccelNormThresholdWithoutAudioStandaloneFull", *((float *)this + 50));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x2000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "maxAudioRolloverChaos", *((float *)this + 51));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x4000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "maxAudioRolloverEnergy", *((float *)this + 52));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x8000000000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "maxAudioRolloverRms", *((float *)this + 53));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x10000000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 54));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "numShortAudio", *((_DWORD *)this + 55));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "peakPressure", *((float *)this + 56));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 0x8000) == 0)
  {
LABEL_64:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecision", *((unsigned char *)this + 310));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_65:
    if ((v6 & 0x40000000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "rolloverCrashDetectorDecisionLowSense", *((unsigned char *)this + 311));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1", *((float *)this + 57));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x100000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithAudio", *((float *)this + 58));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x200000000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudio", *((float *)this + 59));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *((float *)this + 60));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *((float *)this + 61));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x1000000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2", *((float *)this + 62));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithAudio", *((float *)this + 63));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x4000000000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudio", *((float *)this + 64));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *((float *)this + 65));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0) {
      goto LABEL_76;
    }
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *((float *)this + 66));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "shortAudioMaxPulseThreshold", *((float *)this + 67));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_77:
    if ((v7 & 2) == 0) {
      goto LABEL_78;
    }
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "shortAudioMet", *((unsigned char *)this + 312));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 2) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0) {
      goto LABEL_79;
    }
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "shortAudioNumThreshold", *((float *)this + 68));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((*((_WORD *)this + 162) & 4) == 0)
  {
LABEL_79:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "shortAudioPeakPressureThreshold", *((float *)this + 69));
  int v7 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v6 = *v5;
  if ((v7 & 0x40000) == 0)
  {
LABEL_80:
    if ((v6 & 1) == 0) {
      goto LABEL_81;
    }
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "strongerAudioRollover", *((unsigned char *)this + 313));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((*v5 & 1) == 0)
  {
LABEL_81:
    if ((v7 & 8) == 0) {
      goto LABEL_82;
    }
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 8) == 0)
  {
LABEL_82:
    if ((v7 & 0x10) == 0) {
      goto LABEL_83;
    }
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "zgTime", *((float *)this + 70));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x10) == 0)
  {
LABEL_83:
    if ((v7 & 0x20) == 0) {
      goto LABEL_84;
    }
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "zgTimeThreshold", *((float *)this + 71));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0) {
      goto LABEL_85;
    }
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithAudio", *((float *)this + 72));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x40) == 0)
  {
LABEL_85:
    if ((v7 & 0x80) == 0) {
      goto LABEL_86;
    }
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudio", *((float *)this + 73));
  LOWORD(v7) = *((_WORD *)this + 162);
  if ((v7 & 0x80) == 0)
  {
LABEL_86:
    if ((v7 & 0x100) == 0) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
LABEL_170:
  PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneBaroNeeded", *((float *)this + 74));
  if ((*((_WORD *)this + 162) & 0x100) != 0) {
LABEL_87:
  }
    PB::TextFormatter::format(a2, "zgTimeThresholdWithoutAudioStandaloneFull", *((float *)this + 75));
LABEL_88:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaRolloverCrashResult::readFrom(CMMsl::KappaRolloverCrashResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    int v8 = (char *)this + 316;
    while (1)
    {
      uint64_t v9 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch(v21)
        {
          case 1:
            *(void *)v8 |= 1uLL;
            unint64_t v165 = *((void *)a2 + 1);
            unint64_t v166 = *((void *)a2 + 2);
            uint64_t v167 = *(void *)a2;
            if (v165 > 0xFFFFFFFFFFFFFFF5 || v165 + 10 > v166)
            {
              char v187 = 0;
              unsigned int v188 = 0;
              uint64_t v170 = 0;
              if (v166 <= v165) {
                unint64_t v166 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v166 == v165)
                {
                  uint64_t v170 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_339;
                }
                unint64_t v189 = v165 + 1;
                char v190 = *(unsigned char *)(v167 + v165);
                *((void *)a2 + 1) = v189;
                v170 |= (unint64_t)(v190 & 0x7F) << v187;
                if ((v190 & 0x80) == 0) {
                  break;
                }
                v187 += 7;
                unint64_t v165 = v189;
                BOOL v15 = v188++ > 8;
                if (v15)
                {
LABEL_318:
                  uint64_t v170 = 0;
                  goto LABEL_339;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v170 = 0;
              }
            }
            else
            {
              char v168 = 0;
              unsigned int v169 = 0;
              uint64_t v170 = 0;
              while (1)
              {
                unint64_t v171 = v165 + 1;
                *((void *)a2 + 1) = v165 + 1;
                char v172 = *(unsigned char *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0) {
                  break;
                }
                v168 += 7;
                unint64_t v165 = v171;
                BOOL v15 = v169++ > 8;
                if (v15) {
                  goto LABEL_318;
                }
              }
            }
LABEL_339:
            *((void *)this + 1) = v170;
            break;
          case 2:
            char v173 = v8[10];
            *((_WORD *)v8 + 4) |= 0x8000u;
            v8[10] = v173;
            unint64_t v174 = *((void *)a2 + 1);
            if (v174 >= *((void *)a2 + 2))
            {
              BOOL v177 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v175 = v174 + 1;
              int v176 = *(unsigned __int8 *)(*(void *)a2 + v174);
              *((void *)a2 + 1) = v175;
              BOOL v177 = v176 != 0;
            }
            *((unsigned char *)this + 310) = v177;
            break;
          case 3:
            int v23 = *((unsigned __int16 *)v8 + 4);
            unsigned int v24 = (v23 | (v8[10] << 16) | 0x10000u) >> 16;
            *((_WORD *)v8 + 4) = v23;
            v8[10] = v24;
            unint64_t v25 = *((void *)a2 + 1);
            if (v25 >= *((void *)a2 + 2))
            {
              BOOL v28 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v26 = v25 + 1;
              int v27 = *(unsigned __int8 *)(*(void *)a2 + v25);
              *((void *)a2 + 1) = v26;
              BOOL v28 = v27 != 0;
            }
            *((unsigned char *)this + 311) = v28;
            break;
          default:
LABEL_278:
            uint64_t result = PB::Reader::skip(a2, v21, v12 & 7, 0);
            if (!result) {
              return result;
            }
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 101:
            *(void *)v8 |= 0x40000000000uLL;
            unint64_t v22 = *((void *)a2 + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v22);
            goto LABEL_322;
          case 102:
            *(void *)v8 |= 0x40000uLL;
            unint64_t v29 = *((void *)a2 + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v29);
            goto LABEL_322;
          case 103:
            char v30 = v8[10];
            *((_WORD *)v8 + 4) |= 8u;
            v8[10] = v30;
            unint64_t v31 = *((void *)a2 + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 70) = *(_DWORD *)(*(void *)a2 + v31);
            goto LABEL_322;
          case 104:
            char v32 = v8[10];
            *((_WORD *)v8 + 4) |= 0x2000u;
            v8[10] = v32;
            unint64_t v33 = *((void *)a2 + 1);
            if (v33 >= *((void *)a2 + 2))
            {
              BOOL v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v34 = v33 + 1;
              int v35 = *(unsigned __int8 *)(*(void *)a2 + v33);
              *((void *)a2 + 1) = v34;
              BOOL v36 = v35 != 0;
            }
            *((unsigned char *)this + 308) = v36;
            goto LABEL_323;
          case 105:
            char v37 = v8[10];
            *((_WORD *)v8 + 4) |= 0x400u;
            v8[10] = v37;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 >= *((void *)a2 + 2))
            {
              BOOL v41 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v39 = v38 + 1;
              int v40 = *(unsigned __int8 *)(*(void *)a2 + v38);
              *((void *)a2 + 1) = v39;
              BOOL v41 = v40 != 0;
            }
            *((unsigned char *)this + 305) = v41;
            goto LABEL_323;
          case 106:
            char v42 = v8[10];
            *((_WORD *)v8 + 4) |= 0x200u;
            v8[10] = v42;
            unint64_t v43 = *((void *)a2 + 1);
            if (v43 >= *((void *)a2 + 2))
            {
              BOOL v46 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v44 = v43 + 1;
              int v45 = *(unsigned __int8 *)(*(void *)a2 + v43);
              *((void *)a2 + 1) = v44;
              BOOL v46 = v45 != 0;
            }
            *((unsigned char *)this + 304) = v46;
            goto LABEL_323;
          case 107:
            *(void *)v8 |= 0x2000000uLL;
            unint64_t v47 = *((void *)a2 + 1);
            unint64_t v48 = *((void *)a2 + 2);
            uint64_t v49 = *(void *)a2;
            if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
            {
              char v50 = 0;
              unsigned int v51 = 0;
              uint64_t v52 = 0;
              do
              {
                unint64_t v53 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v54 = *(unsigned char *)(v49 + v47);
                v52 |= (unint64_t)(v54 & 0x7F) << v50;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_331;
                }
                v50 += 7;
                unint64_t v47 = v53;
                BOOL v15 = v51++ > 8;
              }
              while (!v15);
LABEL_294:
              LODWORD(v52) = 0;
              goto LABEL_331;
            }
            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v52 = 0;
            if (v48 <= v47) {
              unint64_t v48 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v48 == v47)
              {
                LODWORD(v52) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v181 = v47 + 1;
                char v182 = *(unsigned char *)(v49 + v47);
                *((void *)a2 + 1) = v181;
                v52 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  unint64_t v47 = v181;
                  BOOL v15 = v180++ > 8;
                  if (v15) {
                    goto LABEL_294;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v52) = 0;
                }
              }
              break;
            }
LABEL_331:
            *((_DWORD *)this + 28) = v52;
            goto LABEL_323;
          case 108:
            char v55 = v8[10];
            *((_WORD *)v8 + 4) |= 0x1000u;
            v8[10] = v55;
            unint64_t v56 = *((void *)a2 + 1);
            if (v56 >= *((void *)a2 + 2))
            {
              BOOL v59 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v57 = v56 + 1;
              int v58 = *(unsigned __int8 *)(*(void *)a2 + v56);
              *((void *)a2 + 1) = v57;
              BOOL v59 = v58 != 0;
            }
            *((unsigned char *)this + 307) = v59;
            goto LABEL_323;
          case 109:
            *(void *)v8 |= 0x1000000uLL;
            unint64_t v60 = *((void *)a2 + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v60);
            goto LABEL_322;
          case 110:
            *(void *)v8 |= 0x2000000000000uLL;
            unint64_t v61 = *((void *)a2 + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v61);
            goto LABEL_322;
          case 111:
            *(void *)v8 |= 0x1000000000000uLL;
            unint64_t v62 = *((void *)a2 + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v62);
            goto LABEL_322;
          case 112:
            *(void *)v8 |= 0x4000000000000uLL;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 53) = *(_DWORD *)(*(void *)a2 + v63);
            goto LABEL_322;
          case 113:
            *(void *)v8 |= 0x40uLL;
            unint64_t v64 = *((void *)a2 + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v64);
            goto LABEL_322;
          case 114:
            *(void *)v8 |= 2uLL;
            unint64_t v65 = *((void *)a2 + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v65);
            goto LABEL_322;
          case 115:
            *(void *)v8 |= 0x8000uLL;
            unint64_t v66 = *((void *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v66);
            goto LABEL_322;
          case 116:
            int v67 = *((unsigned __int16 *)v8 + 4);
            unsigned int v68 = (v67 | (v8[10] << 16) | 0x40000u) >> 16;
            *((_WORD *)v8 + 4) = v67;
            v8[10] = v68;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 >= *((void *)a2 + 2))
            {
              BOOL v72 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v70 = v69 + 1;
              int v71 = *(unsigned __int8 *)(*(void *)a2 + v69);
              *((void *)a2 + 1) = v70;
              BOOL v72 = v71 != 0;
            }
            *((unsigned char *)this + 313) = v72;
            goto LABEL_323;
          case 117:
            char v73 = v8[10];
            *((_WORD *)v8 + 4) |= 0x800u;
            v8[10] = v73;
            unint64_t v74 = *((void *)a2 + 1);
            if (v74 >= *((void *)a2 + 2))
            {
              BOOL v77 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v75 = v74 + 1;
              int v76 = *(unsigned __int8 *)(*(void *)a2 + v74);
              *((void *)a2 + 1) = v75;
              BOOL v77 = v76 != 0;
            }
            *((unsigned char *)this + 306) = v77;
            goto LABEL_323;
          case 118:
            char v78 = v8[10];
            *((_WORD *)v8 + 4) |= 0x4000u;
            v8[10] = v78;
            unint64_t v79 = *((void *)a2 + 1);
            if (v79 >= *((void *)a2 + 2))
            {
              BOOL v82 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v80 = v79 + 1;
              int v81 = *(unsigned __int8 *)(*(void *)a2 + v79);
              *((void *)a2 + 1) = v80;
              BOOL v82 = v81 != 0;
            }
            *((unsigned char *)this + 309) = v82;
            goto LABEL_323;
          case 119:
            *(void *)v8 |= 0x20000000000000uLL;
            unint64_t v83 = *((void *)a2 + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v83);
            goto LABEL_322;
          case 120:
            *(void *)v8 |= 0x8000000000000uLL;
            unint64_t v84 = *((void *)a2 + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 54) = *(_DWORD *)(*(void *)a2 + v84);
            goto LABEL_322;
          case 121:
            *(void *)v8 |= 0x10000000000000uLL;
            unint64_t v85 = *((void *)a2 + 1);
            unint64_t v86 = *((void *)a2 + 2);
            uint64_t v87 = *(void *)a2;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              char v88 = 0;
              unsigned int v89 = 0;
              uint64_t v90 = 0;
              do
              {
                unint64_t v91 = v85 + 1;
                *((void *)a2 + 1) = v85 + 1;
                char v92 = *(unsigned char *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0) {
                  goto LABEL_335;
                }
                v88 += 7;
                unint64_t v85 = v91;
                BOOL v15 = v89++ > 8;
              }
              while (!v15);
LABEL_309:
              LODWORD(v90) = 0;
              goto LABEL_335;
            }
            char v183 = 0;
            unsigned int v184 = 0;
            uint64_t v90 = 0;
            if (v86 <= v85) {
              unint64_t v86 = *((void *)a2 + 1);
            }
            break;
          case 122:
            int v93 = *((unsigned __int16 *)v8 + 4);
            unsigned int v94 = (v93 | (v8[10] << 16) | 0x20000u) >> 16;
            *((_WORD *)v8 + 4) = v93;
            v8[10] = v94;
            unint64_t v95 = *((void *)a2 + 1);
            if (v95 >= *((void *)a2 + 2))
            {
              BOOL v98 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v96 = v95 + 1;
              int v97 = *(unsigned __int8 *)(*(void *)a2 + v95);
              *((void *)a2 + 1) = v96;
              BOOL v98 = v97 != 0;
            }
            *((unsigned char *)this + 312) = v98;
            goto LABEL_323;
          case 201:
            *(void *)v8 |= 0x40000000000000uLL;
            unint64_t v99 = *((void *)a2 + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 57) = *(_DWORD *)(*(void *)a2 + v99);
            goto LABEL_322;
          case 202:
            *(void *)v8 |= 0x800000000000000uLL;
            unint64_t v100 = *((void *)a2 + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 62) = *(_DWORD *)(*(void *)a2 + v100);
            goto LABEL_322;
          case 203:
            *(void *)v8 |= 0x80000uLL;
            unint64_t v101 = *((void *)a2 + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v101);
            goto LABEL_322;
          case 204:
            *(void *)v8 |= 0x80000000000uLL;
            unint64_t v102 = *((void *)a2 + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v102);
            goto LABEL_322;
          case 205:
            char v103 = v8[10];
            *((_WORD *)v8 + 4) |= 0x10u;
            v8[10] = v103;
            unint64_t v104 = *((void *)a2 + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 71) = *(_DWORD *)(*(void *)a2 + v104);
            goto LABEL_322;
          case 206:
            *(void *)v8 |= 0x80000000000000uLL;
            unint64_t v105 = *((void *)a2 + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 58) = *(_DWORD *)(*(void *)a2 + v105);
            goto LABEL_322;
          case 207:
            *(void *)v8 |= 0x1000000000000000uLL;
            unint64_t v106 = *((void *)a2 + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 63) = *(_DWORD *)(*(void *)a2 + v106);
            goto LABEL_322;
          case 208:
            *(void *)v8 |= 0x100000uLL;
            unint64_t v107 = *((void *)a2 + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v107);
            goto LABEL_322;
          case 209:
            *(void *)v8 |= 0x100000000000uLL;
            unint64_t v108 = *((void *)a2 + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v108);
            goto LABEL_322;
          case 210:
            char v109 = v8[10];
            *((_WORD *)v8 + 4) |= 0x20u;
            v8[10] = v109;
            unint64_t v110 = *((void *)a2 + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 72) = *(_DWORD *)(*(void *)a2 + v110);
            goto LABEL_322;
          case 231:
            *(void *)v8 |= 0x100000000000000uLL;
            unint64_t v111 = *((void *)a2 + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 59) = *(_DWORD *)(*(void *)a2 + v111);
            goto LABEL_322;
          case 232:
            *(void *)v8 |= 0x2000000000000000uLL;
            unint64_t v112 = *((void *)a2 + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 64) = *(_DWORD *)(*(void *)a2 + v112);
            goto LABEL_322;
          case 233:
            *(void *)v8 |= 0x200000uLL;
            unint64_t v113 = *((void *)a2 + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v113);
            goto LABEL_322;
          case 234:
            *(void *)v8 |= 0x200000000000uLL;
            unint64_t v114 = *((void *)a2 + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v114);
            goto LABEL_322;
          case 235:
            char v115 = v8[10];
            *((_WORD *)v8 + 4) |= 0x40u;
            v8[10] = v115;
            unint64_t v116 = *((void *)a2 + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 73) = *(_DWORD *)(*(void *)a2 + v116);
            goto LABEL_322;
          case 236:
            *(void *)v8 |= 0x80uLL;
            unint64_t v117 = *((void *)a2 + 1);
            if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v117);
            goto LABEL_322;
          case 237:
            *(void *)v8 |= 0x400uLL;
            unint64_t v118 = *((void *)a2 + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v118);
            goto LABEL_322;
          case 238:
            *(void *)v8 |= 0x200uLL;
            unint64_t v119 = *((void *)a2 + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v119);
            goto LABEL_322;
          case 239:
            *(void *)v8 |= 0x100uLL;
            unint64_t v120 = *((void *)a2 + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v120);
            goto LABEL_322;
          case 240:
            *(void *)v8 |= 4uLL;
            unint64_t v121 = *((void *)a2 + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v121);
            goto LABEL_322;
          case 241:
            *(void *)v8 |= 0x20uLL;
            unint64_t v122 = *((void *)a2 + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v122);
            goto LABEL_322;
          case 242:
            *(void *)v8 |= 0x10uLL;
            unint64_t v123 = *((void *)a2 + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v123);
            goto LABEL_322;
          case 243:
            *(void *)v8 |= 8uLL;
            unint64_t v124 = *((void *)a2 + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v124);
            goto LABEL_322;
          case 244:
            *(void *)v8 |= 0x800uLL;
            unint64_t v125 = *((void *)a2 + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v125);
            goto LABEL_322;
          case 245:
            *(void *)v8 |= 0x4000uLL;
            unint64_t v126 = *((void *)a2 + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v126);
            goto LABEL_322;
          case 246:
            *(void *)v8 |= 0x2000uLL;
            unint64_t v127 = *((void *)a2 + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v127);
            goto LABEL_322;
          case 247:
            *(void *)v8 |= 0x1000uLL;
            unint64_t v128 = *((void *)a2 + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v128);
            goto LABEL_322;
          case 248:
            *(void *)v8 |= 0x10000uLL;
            unint64_t v129 = *((void *)a2 + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v129);
            goto LABEL_322;
          case 249:
            *(void *)v8 |= 0x20000uLL;
            unint64_t v130 = *((void *)a2 + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v130);
            goto LABEL_322;
          case 250:
            *(void *)v8 |= 0x200000000000000uLL;
            unint64_t v131 = *((void *)a2 + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 60) = *(_DWORD *)(*(void *)a2 + v131);
            goto LABEL_322;
          case 251:
            *(void *)v8 |= 0x4000000000000000uLL;
            unint64_t v132 = *((void *)a2 + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 65) = *(_DWORD *)(*(void *)a2 + v132);
            goto LABEL_322;
          case 252:
            *(void *)v8 |= 0x400000uLL;
            unint64_t v133 = *((void *)a2 + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v133);
            goto LABEL_322;
          case 253:
            *(void *)v8 |= 0x400000000000uLL;
            unint64_t v134 = *((void *)a2 + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v134);
            goto LABEL_322;
          case 254:
            char v135 = v8[10];
            *((_WORD *)v8 + 4) |= 0x80u;
            v8[10] = v135;
            unint64_t v136 = *((void *)a2 + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 74) = *(_DWORD *)(*(void *)a2 + v136);
            goto LABEL_322;
          case 255:
            *(void *)v8 |= 0x400000000000000uLL;
            unint64_t v137 = *((void *)a2 + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 61) = *(_DWORD *)(*(void *)a2 + v137);
            goto LABEL_322;
          case 256:
            *(void *)v8 |= 0x8000000000000000;
            unint64_t v138 = *((void *)a2 + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 66) = *(_DWORD *)(*(void *)a2 + v138);
            goto LABEL_322;
          case 257:
            *(void *)v8 |= 0x800000uLL;
            unint64_t v139 = *((void *)a2 + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v139);
            goto LABEL_322;
          case 258:
            *(void *)v8 |= 0x800000000000uLL;
            unint64_t v140 = *((void *)a2 + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v140);
            goto LABEL_322;
          case 259:
            char v141 = v8[10];
            *((_WORD *)v8 + 4) |= 0x100u;
            v8[10] = v141;
            unint64_t v142 = *((void *)a2 + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 75) = *(_DWORD *)(*(void *)a2 + v142);
            goto LABEL_322;
          case 260:
            *(void *)v8 |= (unint64_t)&_mh_execute_header;
            unint64_t v143 = *((void *)a2 + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v143);
            goto LABEL_322;
          case 261:
            *(void *)v8 |= 0x200000000uLL;
            unint64_t v144 = *((void *)a2 + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v144);
            goto LABEL_322;
          case 262:
            *(void *)v8 |= 0x8000000uLL;
            unint64_t v145 = *((void *)a2 + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v145);
            goto LABEL_322;
          case 263:
            *(void *)v8 |= 0x4000000uLL;
            unint64_t v146 = *((void *)a2 + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v146);
            goto LABEL_322;
          case 264:
            *(void *)v8 |= 0x80000000uLL;
            unint64_t v147 = *((void *)a2 + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v147);
            goto LABEL_322;
          case 265:
            *(void *)v8 |= 0x40000000uLL;
            unint64_t v148 = *((void *)a2 + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v148);
            goto LABEL_322;
          case 266:
            *(void *)v8 |= 0x20000000uLL;
            unint64_t v149 = *((void *)a2 + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v149);
            goto LABEL_322;
          case 267:
            *(void *)v8 |= 0x10000000uLL;
            unint64_t v150 = *((void *)a2 + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v150);
            goto LABEL_322;
          case 268:
            *(void *)v8 |= 0x10000000000uLL;
            unint64_t v151 = *((void *)a2 + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v151);
            goto LABEL_322;
          case 269:
            *(void *)v8 |= 0x20000000000uLL;
            unint64_t v152 = *((void *)a2 + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v152);
            goto LABEL_322;
          case 270:
            *(void *)v8 |= 0x800000000uLL;
            unint64_t v153 = *((void *)a2 + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v153);
            goto LABEL_322;
          case 271:
            *(void *)v8 |= 0x400000000uLL;
            unint64_t v154 = *((void *)a2 + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v154);
            goto LABEL_322;
          case 272:
            *(void *)v8 |= 0x8000000000uLL;
            unint64_t v155 = *((void *)a2 + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v155);
            goto LABEL_322;
          case 273:
            *(void *)v8 |= 0x4000000000uLL;
            unint64_t v156 = *((void *)a2 + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v156);
            goto LABEL_322;
          case 274:
            *(void *)v8 |= 0x2000000000uLL;
            unint64_t v157 = *((void *)a2 + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v157);
            goto LABEL_322;
          case 275:
            *(void *)v8 |= 0x1000000000uLL;
            unint64_t v158 = *((void *)a2 + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v158);
            goto LABEL_322;
          case 276:
            char v159 = v8[10];
            *((_WORD *)v8 + 4) |= 2u;
            v8[10] = v159;
            unint64_t v160 = *((void *)a2 + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 68) = *(_DWORD *)(*(void *)a2 + v160);
            goto LABEL_322;
          case 277:
            char v161 = v8[10];
            *((_WORD *)v8 + 4) |= 4u;
            v8[10] = v161;
            unint64_t v162 = *((void *)a2 + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((void *)a2 + 2)) {
              goto LABEL_268;
            }
            *((_DWORD *)this + 69) = *(_DWORD *)(*(void *)a2 + v162);
            goto LABEL_322;
          case 278:
            char v163 = v8[10];
            *((_WORD *)v8 + 4) |= 1u;
            v8[10] = v163;
            unint64_t v164 = *((void *)a2 + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((void *)a2 + 2))
            {
              *((_DWORD *)this + 67) = *(_DWORD *)(*(void *)a2 + v164);
LABEL_322:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_268:
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_323;
          default:
            goto LABEL_278;
        }
        while (1)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_335;
          }
          unint64_t v185 = v85 + 1;
          char v186 = *(unsigned char *)(v87 + v85);
          *((void *)a2 + 1) = v185;
          v90 |= (unint64_t)(v186 & 0x7F) << v183;
          if ((v186 & 0x80) == 0) {
            break;
          }
          v183 += 7;
          unint64_t v85 = v185;
          BOOL v15 = v184++ > 8;
          if (v15) {
            goto LABEL_309;
          }
        }
        if (*((unsigned char *)a2 + 24)) {
          LODWORD(v90) = 0;
        }
LABEL_335:
        *((_DWORD *)this + 55) = v90;
      }
LABEL_323:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)a2 + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaRolloverCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 316);
  uint64_t v5 = *(void *)(this + 316);
  if (v5)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
    if ((v4[1] & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v6 = *(unsigned __int16 *)(this + 324);
  int v7 = v6 | (*(unsigned __int8 *)(this + 326) << 16);
  if ((v6 & 0x8000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 310), 2u);
    int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
  }
LABEL_6:
  if ((v7 & 0x10000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 311), 3u);
    int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    uint64_t v5 = *v4;
    if ((*v4 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_90;
    }
  }
  else if ((v5 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x65u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v7 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_91;
  }
LABEL_90:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x66u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 8) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_92;
  }
LABEL_91:
  this = PB::Writer::write(a2, *(float *)(v3 + 280), 0x67u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_93;
  }
LABEL_92:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 308), 0x68u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_94;
  }
LABEL_93:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 305), 0x69u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_95;
  }
LABEL_94:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 304), 0x6Au);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_96;
  }
LABEL_95:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x6Bu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_97;
  }
LABEL_96:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 307), 0x6Cu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_98;
  }
LABEL_97:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x6Du);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_99;
  }
LABEL_98:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0x6Eu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_100;
  }
LABEL_99:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x6Fu);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_101;
  }
LABEL_100:
  this = PB::Writer::write(a2, *(float *)(v3 + 212), 0x70u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v5 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_102;
  }
LABEL_101:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0x71u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_103;
  }
LABEL_102:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 0x72u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_22:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_104;
  }
LABEL_103:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x73u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_23:
    if ((v7 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_105;
  }
LABEL_104:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 313), 0x74u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_106;
  }
LABEL_105:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 306), 0x75u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x4000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_107;
  }
LABEL_106:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 309), 0x76u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_108;
  }
LABEL_107:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 0x77u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_109;
  }
LABEL_108:
  this = PB::Writer::write(a2, *(float *)(v3 + 216), 0x78u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_110;
  }
LABEL_109:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 220), 0x79u);
  int v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  uint64_t v5 = *v4;
  if ((v7 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_111;
  }
LABEL_110:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 312), 0x7Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_112;
  }
LABEL_111:
  this = PB::Writer::write(a2, *(float *)(v3 + 228), 0xC9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_113;
  }
LABEL_112:
  this = PB::Writer::write(a2, *(float *)(v3 + 248), 0xCAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_114;
  }
LABEL_113:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0xCBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0) {
      goto LABEL_34;
    }
    goto LABEL_115;
  }
LABEL_114:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0xCCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 284), 0xCDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 232), 0xCEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 252), 0xCFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_37:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 0xD0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0) {
      goto LABEL_39;
    }
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0xD1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0xD2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x2000000000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::write(a2, *(float *)(v3 + 236), 0xE7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 256), 0xE8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_42:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0xE9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40) == 0) {
      goto LABEL_44;
    }
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 0xEAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x40) == 0)
  {
LABEL_44:
    if ((v5 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0xEBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_45:
    if ((v5 & 0x400) == 0) {
      goto LABEL_46;
    }
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0xECu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v5 & 0x200) == 0) {
      goto LABEL_47;
    }
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0xEDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_47:
    if ((v5 & 0x100) == 0) {
      goto LABEL_48;
    }
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0xEEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_48:
    if ((v5 & 4) == 0) {
      goto LABEL_49;
    }
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xEFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_49:
    if ((v5 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 0xF0u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_50:
    if ((v5 & 0x10) == 0) {
      goto LABEL_51;
    }
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xF1u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_51:
    if ((v5 & 8) == 0) {
      goto LABEL_52;
    }
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xF2u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0) {
      goto LABEL_53;
    }
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xF3u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_53:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0xF4u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0xF5u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0xF6u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 0xF7u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0xF8u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0xF9u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x4000000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0xFAu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(float *)(v3 + 260), 0xFBu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_61:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFCu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x80) == 0) {
      goto LABEL_63;
    }
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0xFDu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 0xFEu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0xFFu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(float *)(v3 + 264), 0x100u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_66:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x101u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x100) == 0) {
      goto LABEL_68;
    }
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x102u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_68:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(float *)(v3 + 300), 0x103u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x104u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x105u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x106u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x107u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 0x108u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x109u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x10Au);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x10Bu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x10Cu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x10Du);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x10Eu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x10Fu);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x110u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x111u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x112u);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v7 & 2) == 0) {
      goto LABEL_85;
    }
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x113u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 2) == 0)
  {
LABEL_85:
    if ((v7 & 4) == 0) {
      goto LABEL_86;
    }
LABEL_167:
    this = PB::Writer::write(a2, *(float *)(v3 + 276), 0x115u);
    if ((v4[1] & 1) == 0) {
      return this;
    }
    goto LABEL_168;
  }
LABEL_166:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 0x114u);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 4) != 0) {
    goto LABEL_167;
  }
LABEL_86:
  if ((v7 & 1) == 0) {
    return this;
  }
LABEL_168:
  float v8 = *(float *)(v3 + 268);

  return PB::Writer::write(a2, v8, 0x116u);
}

uint64_t CMMsl::KappaRolloverCrashResult::hash_value(CMMsl::KappaRolloverCrashResult *this)
{
  int v1 = *((unsigned __int16 *)this + 162) | (*((unsigned __int8 *)this + 326) << 16);
  uint64_t v2 = *(void *)((char *)this + 316);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 1);
    if ((*((_WORD *)this + 162) & 0x8000) != 0)
    {
LABEL_3:
      uint64_t v200 = *((unsigned __int8 *)this + 310);
      if ((v1 & 0x10000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_249;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 162) & 0x8000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v200 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_4:
    uint64_t v199 = *((unsigned __int8 *)this + 311);
    if ((v2 & 0x40000000000) != 0) {
      goto LABEL_5;
    }
LABEL_250:
    uint64_t v198 = 0;
    if ((v2 & 0x40000) != 0) {
      goto LABEL_8;
    }
LABEL_251:
    uint64_t v197 = 0;
    if ((*((_WORD *)this + 162) & 8) != 0) {
      goto LABEL_11;
    }
LABEL_252:
    uint64_t v196 = 0;
    if ((*((_WORD *)this + 162) & 0x2000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_253;
  }
LABEL_249:
  uint64_t v199 = 0;
  if ((v2 & 0x40000000000) == 0) {
    goto LABEL_250;
  }
LABEL_5:
  float v4 = *((float *)this + 45);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v198 = v5;
  if ((v2 & 0x40000) == 0) {
    goto LABEL_251;
  }
LABEL_8:
  float v6 = *((float *)this + 21);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v197 = v7;
  if ((*((_WORD *)this + 162) & 8) == 0) {
    goto LABEL_252;
  }
LABEL_11:
  float v8 = *((float *)this + 70);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v196 = v9;
  if ((*((_WORD *)this + 162) & 0x2000) != 0)
  {
LABEL_14:
    uint64_t v195 = *((unsigned __int8 *)this + 308);
    if ((*((_WORD *)this + 162) & 0x400) != 0) {
      goto LABEL_15;
    }
    goto LABEL_254;
  }
LABEL_253:
  uint64_t v195 = 0;
  if ((*((_WORD *)this + 162) & 0x400) != 0)
  {
LABEL_15:
    uint64_t v194 = *((unsigned __int8 *)this + 305);
    if ((*((_WORD *)this + 162) & 0x200) != 0) {
      goto LABEL_16;
    }
    goto LABEL_255;
  }
LABEL_254:
  uint64_t v194 = 0;
  if ((*((_WORD *)this + 162) & 0x200) != 0)
  {
LABEL_16:
    uint64_t v193 = *((unsigned __int8 *)this + 304);
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_17;
    }
    goto LABEL_256;
  }
LABEL_255:
  uint64_t v193 = 0;
  if ((v2 & 0x2000000) != 0)
  {
LABEL_17:
    uint64_t v192 = *((int *)this + 28);
    if ((*((_WORD *)this + 162) & 0x1000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_257;
  }
LABEL_256:
  uint64_t v192 = 0;
  if ((*((_WORD *)this + 162) & 0x1000) != 0)
  {
LABEL_18:
    uint64_t v191 = *((unsigned __int8 *)this + 307);
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_19;
    }
LABEL_258:
    uint64_t v190 = 0;
    if ((v2 & 0x2000000000000) != 0) {
      goto LABEL_22;
    }
LABEL_259:
    uint64_t v189 = 0;
    if ((v2 & 0x1000000000000) != 0) {
      goto LABEL_25;
    }
LABEL_260:
    uint64_t v188 = 0;
    if ((v2 & 0x4000000000000) != 0) {
      goto LABEL_28;
    }
LABEL_261:
    uint64_t v187 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_31;
    }
LABEL_262:
    uint64_t v186 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_34;
    }
LABEL_263:
    uint64_t v185 = 0;
    if ((v2 & 0x8000) != 0) {
      goto LABEL_37;
    }
LABEL_264:
    uint64_t v184 = 0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_265;
  }
LABEL_257:
  uint64_t v191 = 0;
  if ((v2 & 0x1000000) == 0) {
    goto LABEL_258;
  }
LABEL_19:
  float v10 = *((float *)this + 27);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v190 = v11;
  if ((v2 & 0x2000000000000) == 0) {
    goto LABEL_259;
  }
LABEL_22:
  float v12 = *((float *)this + 52);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  uint64_t v189 = v13;
  if ((v2 & 0x1000000000000) == 0) {
    goto LABEL_260;
  }
LABEL_25:
  float v14 = *((float *)this + 51);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  uint64_t v188 = v15;
  if ((v2 & 0x4000000000000) == 0) {
    goto LABEL_261;
  }
LABEL_28:
  float v16 = *((float *)this + 53);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  uint64_t v187 = v17;
  if ((v2 & 0x40) == 0) {
    goto LABEL_262;
  }
LABEL_31:
  float v18 = *((float *)this + 9);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v186 = v19;
  if ((v2 & 2) == 0) {
    goto LABEL_263;
  }
LABEL_34:
  float v20 = *((float *)this + 4);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  uint64_t v185 = v21;
  if ((v2 & 0x8000) == 0) {
    goto LABEL_264;
  }
LABEL_37:
  float v22 = *((float *)this + 18);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  uint64_t v184 = v23;
  if ((v1 & 0x40000) != 0)
  {
LABEL_40:
    uint64_t v183 = *((unsigned __int8 *)this + 313);
    if ((*((_WORD *)this + 162) & 0x800) != 0) {
      goto LABEL_41;
    }
    goto LABEL_266;
  }
LABEL_265:
  uint64_t v183 = 0;
  if ((*((_WORD *)this + 162) & 0x800) != 0)
  {
LABEL_41:
    uint64_t v182 = *((unsigned __int8 *)this + 306);
    if ((*((_WORD *)this + 162) & 0x4000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_267;
  }
LABEL_266:
  uint64_t v182 = 0;
  if ((*((_WORD *)this + 162) & 0x4000) != 0)
  {
LABEL_42:
    uint64_t v181 = *((unsigned __int8 *)this + 309);
    if ((v2 & 0x20000000000000) != 0) {
      goto LABEL_43;
    }
LABEL_268:
    uint64_t v180 = 0;
    if ((v2 & 0x8000000000000) != 0) {
      goto LABEL_46;
    }
LABEL_269:
    uint64_t v179 = 0;
    if ((v2 & 0x10000000000000) != 0) {
      goto LABEL_49;
    }
    goto LABEL_270;
  }
LABEL_267:
  uint64_t v181 = 0;
  if ((v2 & 0x20000000000000) == 0) {
    goto LABEL_268;
  }
LABEL_43:
  float v24 = *((float *)this + 56);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  uint64_t v180 = v25;
  if ((v2 & 0x8000000000000) == 0) {
    goto LABEL_269;
  }
LABEL_46:
  float v26 = *((float *)this + 54);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  uint64_t v179 = v27;
  if ((v2 & 0x10000000000000) != 0)
  {
LABEL_49:
    uint64_t v178 = *((int *)this + 55);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_50;
    }
    goto LABEL_271;
  }
LABEL_270:
  uint64_t v178 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_50:
    uint64_t v177 = *((unsigned __int8 *)this + 312);
    if ((v2 & 0x40000000000000) != 0) {
      goto LABEL_51;
    }
LABEL_272:
    uint64_t v176 = 0;
    if ((v2 & 0x800000000000000) != 0) {
      goto LABEL_54;
    }
LABEL_273:
    uint64_t v175 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_57;
    }
LABEL_274:
    uint64_t v174 = 0;
    if ((v2 & 0x80000000000) != 0) {
      goto LABEL_60;
    }
LABEL_275:
    uint64_t v173 = 0;
    if ((*((_WORD *)this + 162) & 0x10) != 0) {
      goto LABEL_63;
    }
LABEL_276:
    uint64_t v172 = 0;
    if ((v2 & 0x80000000000000) != 0) {
      goto LABEL_66;
    }
LABEL_277:
    uint64_t v171 = 0;
    if ((v2 & 0x1000000000000000) != 0) {
      goto LABEL_69;
    }
LABEL_278:
    uint64_t v170 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_72;
    }
LABEL_279:
    uint64_t v169 = 0;
    if ((v2 & 0x100000000000) != 0) {
      goto LABEL_75;
    }
LABEL_280:
    uint64_t v168 = 0;
    if ((*((_WORD *)this + 162) & 0x20) != 0) {
      goto LABEL_78;
    }
LABEL_281:
    uint64_t v167 = 0;
    if ((v2 & 0x100000000000000) != 0) {
      goto LABEL_81;
    }
LABEL_282:
    uint64_t v166 = 0;
    if ((v2 & 0x2000000000000000) != 0) {
      goto LABEL_84;
    }
LABEL_283:
    uint64_t v165 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_87;
    }
LABEL_284:
    uint64_t v164 = 0;
    if ((v2 & 0x200000000000) != 0) {
      goto LABEL_90;
    }
LABEL_285:
    uint64_t v163 = 0;
    if ((*((_WORD *)this + 162) & 0x40) != 0) {
      goto LABEL_93;
    }
LABEL_286:
    uint64_t v162 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_96;
    }
LABEL_287:
    uint64_t v161 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_99;
    }
LABEL_288:
    uint64_t v160 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_102;
    }
LABEL_289:
    uint64_t v159 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_105;
    }
LABEL_290:
    uint64_t v158 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_108;
    }
LABEL_291:
    uint64_t v157 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_111;
    }
LABEL_292:
    uint64_t v156 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_114;
    }
LABEL_293:
    uint64_t v155 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_117;
    }
LABEL_294:
    uint64_t v154 = 0;
    if ((v2 & 0x800) != 0) {
      goto LABEL_120;
    }
LABEL_295:
    uint64_t v153 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_123;
    }
LABEL_296:
    uint64_t v152 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_126;
    }
LABEL_297:
    uint64_t v151 = 0;
    if ((v2 & 0x1000) != 0) {
      goto LABEL_129;
    }
LABEL_298:
    uint64_t v150 = 0;
    if ((v2 & 0x10000) != 0) {
      goto LABEL_132;
    }
LABEL_299:
    uint64_t v149 = 0;
    if ((v2 & 0x20000) != 0) {
      goto LABEL_135;
    }
LABEL_300:
    uint64_t v148 = 0;
    if ((v2 & 0x200000000000000) != 0) {
      goto LABEL_138;
    }
LABEL_301:
    uint64_t v147 = 0;
    if ((v2 & 0x4000000000000000) != 0) {
      goto LABEL_141;
    }
LABEL_302:
    uint64_t v146 = 0;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_144;
    }
LABEL_303:
    uint64_t v145 = 0;
    if ((v2 & 0x400000000000) != 0) {
      goto LABEL_147;
    }
LABEL_304:
    uint64_t v93 = 0;
    if ((*((_WORD *)this + 162) & 0x80) != 0) {
      goto LABEL_151;
    }
LABEL_305:
    uint64_t v95 = 0;
    if ((v2 & 0x400000000000000) != 0) {
      goto LABEL_155;
    }
LABEL_306:
    uint64_t v97 = 0;
    if (v2 < 0) {
      goto LABEL_159;
    }
LABEL_307:
    uint64_t v99 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_163;
    }
LABEL_308:
    uint64_t v101 = 0;
    if ((v2 & 0x800000000000) != 0) {
      goto LABEL_167;
    }
LABEL_309:
    uint64_t v103 = 0;
    if ((*((_WORD *)this + 162) & 0x100) != 0) {
      goto LABEL_171;
    }
LABEL_310:
    uint64_t v105 = 0;
    if ((v2 & 0x100000000) != 0) {
      goto LABEL_175;
    }
LABEL_311:
    uint64_t v107 = 0;
    if ((v2 & 0x200000000) != 0) {
      goto LABEL_179;
    }
LABEL_312:
    uint64_t v109 = 0;
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_183;
    }
LABEL_313:
    uint64_t v111 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_187;
    }
LABEL_314:
    uint64_t v113 = 0;
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_191;
    }
LABEL_315:
    uint64_t v115 = 0;
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_195;
    }
LABEL_316:
    uint64_t v117 = 0;
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_199;
    }
LABEL_317:
    uint64_t v119 = 0;
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_203;
    }
LABEL_318:
    uint64_t v121 = 0;
    if ((v2 & 0x10000000000) != 0) {
      goto LABEL_207;
    }
LABEL_319:
    uint64_t v123 = 0;
    if ((v2 & 0x20000000000) != 0) {
      goto LABEL_211;
    }
LABEL_320:
    uint64_t v125 = 0;
    if ((v2 & 0x800000000) != 0) {
      goto LABEL_215;
    }
LABEL_321:
    uint64_t v127 = 0;
    if ((v2 & 0x400000000) != 0) {
      goto LABEL_219;
    }
LABEL_322:
    uint64_t v129 = 0;
    if ((v2 & 0x8000000000) != 0) {
      goto LABEL_223;
    }
LABEL_323:
    uint64_t v131 = 0;
    if ((v2 & 0x4000000000) != 0) {
      goto LABEL_227;
    }
LABEL_324:
    uint64_t v133 = 0;
    if ((v2 & 0x2000000000) != 0) {
      goto LABEL_231;
    }
LABEL_325:
    uint64_t v135 = 0;
    if ((v2 & 0x1000000000) != 0) {
      goto LABEL_234;
    }
LABEL_326:
    uint64_t v137 = 0;
    if ((*((_WORD *)this + 162) & 2) != 0) {
      goto LABEL_238;
    }
LABEL_327:
    uint64_t v139 = 0;
    if ((*((_WORD *)this + 162) & 4) != 0) {
      goto LABEL_241;
    }
    goto LABEL_328;
  }
LABEL_271:
  uint64_t v177 = 0;
  if ((v2 & 0x40000000000000) == 0) {
    goto LABEL_272;
  }
LABEL_51:
  float v28 = *((float *)this + 57);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  uint64_t v176 = v29;
  if ((v2 & 0x800000000000000) == 0) {
    goto LABEL_273;
  }
LABEL_54:
  float v30 = *((float *)this + 62);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v175 = v31;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_274;
  }
LABEL_57:
  float v32 = *((float *)this + 22);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  uint64_t v174 = v33;
  if ((v2 & 0x80000000000) == 0) {
    goto LABEL_275;
  }
LABEL_60:
  float v34 = *((float *)this + 46);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  uint64_t v173 = v35;
  if ((*((_WORD *)this + 162) & 0x10) == 0) {
    goto LABEL_276;
  }
LABEL_63:
  float v36 = *((float *)this + 71);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  uint64_t v172 = v37;
  if ((v2 & 0x80000000000000) == 0) {
    goto LABEL_277;
  }
LABEL_66:
  float v38 = *((float *)this + 58);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  uint64_t v171 = v39;
  if ((v2 & 0x1000000000000000) == 0) {
    goto LABEL_278;
  }
LABEL_69:
  float v40 = *((float *)this + 63);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  uint64_t v170 = v41;
  if ((v2 & 0x100000) == 0) {
    goto LABEL_279;
  }
LABEL_72:
  float v42 = *((float *)this + 23);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  uint64_t v169 = v43;
  if ((v2 & 0x100000000000) == 0) {
    goto LABEL_280;
  }
LABEL_75:
  float v44 = *((float *)this + 47);
  uint64_t v45 = LODWORD(v44);
  if (v44 == 0.0) {
    uint64_t v45 = 0;
  }
  uint64_t v168 = v45;
  if ((*((_WORD *)this + 162) & 0x20) == 0) {
    goto LABEL_281;
  }
LABEL_78:
  float v46 = *((float *)this + 72);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  uint64_t v167 = v47;
  if ((v2 & 0x100000000000000) == 0) {
    goto LABEL_282;
  }
LABEL_81:
  float v48 = *((float *)this + 59);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  uint64_t v166 = v49;
  if ((v2 & 0x2000000000000000) == 0) {
    goto LABEL_283;
  }
LABEL_84:
  float v50 = *((float *)this + 64);
  uint64_t v51 = LODWORD(v50);
  if (v50 == 0.0) {
    uint64_t v51 = 0;
  }
  uint64_t v165 = v51;
  if ((v2 & 0x200000) == 0) {
    goto LABEL_284;
  }
LABEL_87:
  float v52 = *((float *)this + 24);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  uint64_t v164 = v53;
  if ((v2 & 0x200000000000) == 0) {
    goto LABEL_285;
  }
LABEL_90:
  float v54 = *((float *)this + 48);
  uint64_t v55 = LODWORD(v54);
  if (v54 == 0.0) {
    uint64_t v55 = 0;
  }
  uint64_t v163 = v55;
  if ((*((_WORD *)this + 162) & 0x40) == 0) {
    goto LABEL_286;
  }
LABEL_93:
  float v56 = *((float *)this + 73);
  uint64_t v57 = LODWORD(v56);
  if (v56 == 0.0) {
    uint64_t v57 = 0;
  }
  uint64_t v162 = v57;
  if ((v2 & 0x80) == 0) {
    goto LABEL_287;
  }
LABEL_96:
  float v58 = *((float *)this + 10);
  uint64_t v59 = LODWORD(v58);
  if (v58 == 0.0) {
    uint64_t v59 = 0;
  }
  uint64_t v161 = v59;
  if ((v2 & 0x400) == 0) {
    goto LABEL_288;
  }
LABEL_99:
  float v60 = *((float *)this + 13);
  uint64_t v61 = LODWORD(v60);
  if (v60 == 0.0) {
    uint64_t v61 = 0;
  }
  uint64_t v160 = v61;
  if ((v2 & 0x200) == 0) {
    goto LABEL_289;
  }
LABEL_102:
  float v62 = *((float *)this + 12);
  uint64_t v63 = LODWORD(v62);
  if (v62 == 0.0) {
    uint64_t v63 = 0;
  }
  uint64_t v159 = v63;
  if ((v2 & 0x100) == 0) {
    goto LABEL_290;
  }
LABEL_105:
  float v64 = *((float *)this + 11);
  uint64_t v65 = LODWORD(v64);
  if (v64 == 0.0) {
    uint64_t v65 = 0;
  }
  uint64_t v158 = v65;
  if ((v2 & 4) == 0) {
    goto LABEL_291;
  }
LABEL_108:
  float v66 = *((float *)this + 5);
  uint64_t v67 = LODWORD(v66);
  if (v66 == 0.0) {
    uint64_t v67 = 0;
  }
  uint64_t v157 = v67;
  if ((v2 & 0x20) == 0) {
    goto LABEL_292;
  }
LABEL_111:
  float v68 = *((float *)this + 8);
  uint64_t v69 = LODWORD(v68);
  if (v68 == 0.0) {
    uint64_t v69 = 0;
  }
  uint64_t v156 = v69;
  if ((v2 & 0x10) == 0) {
    goto LABEL_293;
  }
LABEL_114:
  float v70 = *((float *)this + 7);
  uint64_t v71 = LODWORD(v70);
  if (v70 == 0.0) {
    uint64_t v71 = 0;
  }
  uint64_t v155 = v71;
  if ((v2 & 8) == 0) {
    goto LABEL_294;
  }
LABEL_117:
  float v72 = *((float *)this + 6);
  uint64_t v73 = LODWORD(v72);
  if (v72 == 0.0) {
    uint64_t v73 = 0;
  }
  uint64_t v154 = v73;
  if ((v2 & 0x800) == 0) {
    goto LABEL_295;
  }
LABEL_120:
  float v74 = *((float *)this + 14);
  uint64_t v75 = LODWORD(v74);
  if (v74 == 0.0) {
    uint64_t v75 = 0;
  }
  uint64_t v153 = v75;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_296;
  }
LABEL_123:
  float v76 = *((float *)this + 17);
  uint64_t v77 = LODWORD(v76);
  if (v76 == 0.0) {
    uint64_t v77 = 0;
  }
  uint64_t v152 = v77;
  if ((v2 & 0x2000) == 0) {
    goto LABEL_297;
  }
LABEL_126:
  float v78 = *((float *)this + 16);
  uint64_t v79 = LODWORD(v78);
  if (v78 == 0.0) {
    uint64_t v79 = 0;
  }
  uint64_t v151 = v79;
  if ((v2 & 0x1000) == 0) {
    goto LABEL_298;
  }
LABEL_129:
  float v80 = *((float *)this + 15);
  uint64_t v81 = LODWORD(v80);
  if (v80 == 0.0) {
    uint64_t v81 = 0;
  }
  uint64_t v150 = v81;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_299;
  }
LABEL_132:
  float v82 = *((float *)this + 19);
  uint64_t v83 = LODWORD(v82);
  if (v82 == 0.0) {
    uint64_t v83 = 0;
  }
  uint64_t v149 = v83;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_300;
  }
LABEL_135:
  float v84 = *((float *)this + 20);
  uint64_t v85 = LODWORD(v84);
  if (v84 == 0.0) {
    uint64_t v85 = 0;
  }
  uint64_t v148 = v85;
  if ((v2 & 0x200000000000000) == 0) {
    goto LABEL_301;
  }
LABEL_138:
  float v86 = *((float *)this + 60);
  uint64_t v87 = LODWORD(v86);
  if (v86 == 0.0) {
    uint64_t v87 = 0;
  }
  uint64_t v147 = v87;
  if ((v2 & 0x4000000000000000) == 0) {
    goto LABEL_302;
  }
LABEL_141:
  float v88 = *((float *)this + 65);
  uint64_t v89 = LODWORD(v88);
  if (v88 == 0.0) {
    uint64_t v89 = 0;
  }
  uint64_t v146 = v89;
  if ((v2 & 0x400000) == 0) {
    goto LABEL_303;
  }
LABEL_144:
  float v90 = *((float *)this + 25);
  uint64_t v91 = LODWORD(v90);
  if (v90 == 0.0) {
    uint64_t v91 = 0;
  }
  uint64_t v145 = v91;
  if ((v2 & 0x400000000000) == 0) {
    goto LABEL_304;
  }
LABEL_147:
  float v92 = *((float *)this + 49);
  if (v92 == 0.0) {
    uint64_t v93 = 0;
  }
  else {
    uint64_t v93 = LODWORD(v92);
  }
  if ((*((_WORD *)this + 162) & 0x80) == 0) {
    goto LABEL_305;
  }
LABEL_151:
  float v94 = *((float *)this + 74);
  if (v94 == 0.0) {
    uint64_t v95 = 0;
  }
  else {
    uint64_t v95 = LODWORD(v94);
  }
  if ((v2 & 0x400000000000000) == 0) {
    goto LABEL_306;
  }
LABEL_155:
  float v96 = *((float *)this + 61);
  if (v96 == 0.0) {
    uint64_t v97 = 0;
  }
  else {
    uint64_t v97 = LODWORD(v96);
  }
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_307;
  }
LABEL_159:
  float v98 = *((float *)this + 66);
  if (v98 == 0.0) {
    uint64_t v99 = 0;
  }
  else {
    uint64_t v99 = LODWORD(v98);
  }
  if ((v2 & 0x800000) == 0) {
    goto LABEL_308;
  }
LABEL_163:
  float v100 = *((float *)this + 26);
  if (v100 == 0.0) {
    uint64_t v101 = 0;
  }
  else {
    uint64_t v101 = LODWORD(v100);
  }
  if ((v2 & 0x800000000000) == 0) {
    goto LABEL_309;
  }
LABEL_167:
  float v102 = *((float *)this + 50);
  if (v102 == 0.0) {
    uint64_t v103 = 0;
  }
  else {
    uint64_t v103 = LODWORD(v102);
  }
  if ((*((_WORD *)this + 162) & 0x100) == 0) {
    goto LABEL_310;
  }
LABEL_171:
  float v104 = *((float *)this + 75);
  if (v104 == 0.0) {
    uint64_t v105 = 0;
  }
  else {
    uint64_t v105 = LODWORD(v104);
  }
  if ((v2 & 0x100000000) == 0) {
    goto LABEL_311;
  }
LABEL_175:
  float v106 = *((float *)this + 35);
  if (v106 == 0.0) {
    uint64_t v107 = 0;
  }
  else {
    uint64_t v107 = LODWORD(v106);
  }
  if ((v2 & 0x200000000) == 0) {
    goto LABEL_312;
  }
LABEL_179:
  float v108 = *((float *)this + 36);
  if (v108 == 0.0) {
    uint64_t v109 = 0;
  }
  else {
    uint64_t v109 = LODWORD(v108);
  }
  if ((v2 & 0x8000000) == 0) {
    goto LABEL_313;
  }
LABEL_183:
  float v110 = *((float *)this + 30);
  if (v110 == 0.0) {
    uint64_t v111 = 0;
  }
  else {
    uint64_t v111 = LODWORD(v110);
  }
  if ((v2 & 0x4000000) == 0) {
    goto LABEL_314;
  }
LABEL_187:
  float v112 = *((float *)this + 29);
  if (v112 == 0.0) {
    uint64_t v113 = 0;
  }
  else {
    uint64_t v113 = LODWORD(v112);
  }
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_315;
  }
LABEL_191:
  float v114 = *((float *)this + 34);
  if (v114 == 0.0) {
    uint64_t v115 = 0;
  }
  else {
    uint64_t v115 = LODWORD(v114);
  }
  if ((v2 & 0x40000000) == 0) {
    goto LABEL_316;
  }
LABEL_195:
  float v116 = *((float *)this + 33);
  if (v116 == 0.0) {
    uint64_t v117 = 0;
  }
  else {
    uint64_t v117 = LODWORD(v116);
  }
  if ((v2 & 0x20000000) == 0) {
    goto LABEL_317;
  }
LABEL_199:
  float v118 = *((float *)this + 32);
  if (v118 == 0.0) {
    uint64_t v119 = 0;
  }
  else {
    uint64_t v119 = LODWORD(v118);
  }
  if ((v2 & 0x10000000) == 0) {
    goto LABEL_318;
  }
LABEL_203:
  float v120 = *((float *)this + 31);
  if (v120 == 0.0) {
    uint64_t v121 = 0;
  }
  else {
    uint64_t v121 = LODWORD(v120);
  }
  if ((v2 & 0x10000000000) == 0) {
    goto LABEL_319;
  }
LABEL_207:
  float v122 = *((float *)this + 43);
  if (v122 == 0.0) {
    uint64_t v123 = 0;
  }
  else {
    uint64_t v123 = LODWORD(v122);
  }
  if ((v2 & 0x20000000000) == 0) {
    goto LABEL_320;
  }
LABEL_211:
  float v124 = *((float *)this + 44);
  if (v124 == 0.0) {
    uint64_t v125 = 0;
  }
  else {
    uint64_t v125 = LODWORD(v124);
  }
  if ((v2 & 0x800000000) == 0) {
    goto LABEL_321;
  }
LABEL_215:
  float v126 = *((float *)this + 38);
  if (v126 == 0.0) {
    uint64_t v127 = 0;
  }
  else {
    uint64_t v127 = LODWORD(v126);
  }
  if ((v2 & 0x400000000) == 0) {
    goto LABEL_322;
  }
LABEL_219:
  float v128 = *((float *)this + 37);
  if (v128 == 0.0) {
    uint64_t v129 = 0;
  }
  else {
    uint64_t v129 = LODWORD(v128);
  }
  if ((v2 & 0x8000000000) == 0) {
    goto LABEL_323;
  }
LABEL_223:
  float v130 = *((float *)this + 42);
  if (v130 == 0.0) {
    uint64_t v131 = 0;
  }
  else {
    uint64_t v131 = LODWORD(v130);
  }
  if ((v2 & 0x4000000000) == 0) {
    goto LABEL_324;
  }
LABEL_227:
  float v132 = *((float *)this + 41);
  if (v132 == 0.0) {
    uint64_t v133 = 0;
  }
  else {
    uint64_t v133 = LODWORD(v132);
  }
  if ((v2 & 0x2000000000) == 0) {
    goto LABEL_325;
  }
LABEL_231:
  float v134 = *((float *)this + 40);
  uint64_t v135 = LODWORD(v134);
  if (v134 == 0.0) {
    uint64_t v135 = 0;
  }
  if ((v2 & 0x1000000000) == 0) {
    goto LABEL_326;
  }
LABEL_234:
  float v136 = *((float *)this + 39);
  if (v136 == 0.0) {
    uint64_t v137 = 0;
  }
  else {
    uint64_t v137 = LODWORD(v136);
  }
  if ((*((_WORD *)this + 162) & 2) == 0) {
    goto LABEL_327;
  }
LABEL_238:
  float v138 = *((float *)this + 68);
  uint64_t v139 = LODWORD(v138);
  if (v138 == 0.0) {
    uint64_t v139 = 0;
  }
  if ((*((_WORD *)this + 162) & 4) != 0)
  {
LABEL_241:
    float v140 = *((float *)this + 69);
    uint64_t v141 = LODWORD(v140);
    if (v140 == 0.0) {
      uint64_t v141 = 0;
    }
    if (*((_WORD *)this + 162)) {
      goto LABEL_244;
    }
LABEL_329:
    uint64_t v143 = 0;
    return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
  }
LABEL_328:
  uint64_t v141 = 0;
  if ((*((_WORD *)this + 162) & 1) == 0) {
    goto LABEL_329;
  }
LABEL_244:
  float v142 = *((float *)this + 67);
  uint64_t v143 = LODWORD(v142);
  if (v142 == 0.0) {
    uint64_t v143 = 0;
  }
  return v200 ^ v3 ^ v199 ^ v198 ^ v197 ^ v196 ^ v195 ^ v194 ^ v193 ^ v192 ^ v191 ^ v190 ^ v189 ^ v188 ^ v187 ^ v186 ^ v185 ^ v184 ^ v183 ^ v182 ^ v181 ^ v180 ^ v179 ^ v178 ^ v177 ^ v176 ^ v175 ^ v174 ^ v173 ^ v172 ^ v171 ^ v170 ^ v169 ^ v168 ^ v167 ^ v166 ^ v165 ^ v164 ^ v163 ^ v162 ^ v161 ^ v160 ^ v159 ^ v158 ^ v157 ^ v156 ^ v155 ^ v154 ^ v153 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v93 ^ v95 ^ v97 ^ v99 ^ v101 ^ v103 ^ v105 ^ v107 ^ v109 ^ v111 ^ v113 ^ v115 ^ v117 ^ v119 ^ v121 ^ v123 ^ v125 ^ v127 ^ v129 ^ v131 ^ v133 ^ v135 ^ v137 ^ v139 ^ v141 ^ v143;
}

void CMMsl::KappaSevereCrashResult::~KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(CMMsl::KappaSevereCrashResult *this, const CMMsl::KappaSevereCrashResult *a2)
{
  *(void *)this = off_1003A6E80;
  uint64_t v2 = (uint64_t *)((char *)this + 356);
  *(void *)((char *)this + 364) = 0;
  *(void *)((char *)this + 356) = 0;
  uint64_t v3 = (uint64_t *)((char *)a2 + 356);
  uint64_t v4 = *(void *)((char *)a2 + 356);
  if ((v4 & 0x800000) != 0)
  {
    uint64_t v6 = 0;
    float result = *((float *)a2 + 33);
    uint64_t v5 = 0x800000;
    *uint64_t v2 = 0x800000;
    *(void *)((char *)this + 364) = 0;
    *((float *)this + 33) = result;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)((char *)a2 + 364);
    if ((*v3 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v4 & 0x400000) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 32);
    v5 |= 0x400000uLL;
    *uint64_t v2 = v5;
    *(void *)((char *)this + 364) = 0;
    *((float *)this + 32) = result;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)((char *)a2 + 364);
  }
LABEL_6:
  if ((v4 & 0x1000000) != 0)
  {
    int v11 = *((_DWORD *)a2 + 34);
    v5 |= 0x1000000uLL;
    *uint64_t v2 = v5;
    *(void *)((char *)this + 364) = 0;
    *((_DWORD *)this + 34) = v11;
    uint64_t v4 = *v3;
    uint64_t v7 = *(void *)((char *)a2 + 364);
    if ((*v3 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v7 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_115;
    }
  }
  else if ((v4 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  int v12 = *((_DWORD *)a2 + 62);
  v5 |= 0x10000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = 0;
  *((_DWORD *)this + 62) = v12;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x400000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_116;
  }
LABEL_115:
  float result = *((float *)a2 + 74);
  uint64_t v6 = 1;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = 1;
  *((float *)this + 74) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_117;
  }
LABEL_116:
  float result = *((float *)a2 + 68);
  v5 |= 0x400000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 68) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_118;
  }
LABEL_117:
  float result = *((float *)a2 + 56);
  v5 |= 0x400000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 56) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_119;
  }
LABEL_118:
  float result = *((float *)a2 + 55);
  v5 |= 0x200000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 55) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_120;
  }
LABEL_119:
  float result = *((float *)a2 + 19);
  v5 |= 0x200uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 19) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v13 = *((_DWORD *)a2 + 65);
  v5 |= 0x80000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 65) = v13;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_122;
  }
LABEL_121:
  int v14 = *((_DWORD *)a2 + 35);
  v5 |= 0x2000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 35) = v14;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x10000) == 0)
  {
LABEL_16:
    if ((v7 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_123;
  }
LABEL_122:
  float result = *((float *)a2 + 26);
  v5 |= 0x10000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 26) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 8) == 0)
  {
LABEL_17:
    if ((v7 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_124;
  }
LABEL_123:
  float result = *((float *)a2 + 77);
  v6 |= 8uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 77) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_125;
  }
LABEL_124:
  float result = *((float *)a2 + 78);
  v6 |= 0x10uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 78) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_126;
  }
LABEL_125:
  int v15 = *((_DWORD *)a2 + 53);
  v5 |= 0x80000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 53) = v15;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_127;
  }
LABEL_126:
  int v16 = *((_DWORD *)a2 + 51);
  v5 |= 0x20000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 51) = v16;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_128;
  }
LABEL_127:
  float result = *((float *)a2 + 60);
  v5 |= 0x4000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 60) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v7 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_129;
  }
LABEL_128:
  int v17 = *((_DWORD *)a2 + 70);
  v5 |= 0x1000000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 70) = v17;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 2) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_130;
  }
LABEL_129:
  int v18 = *((_DWORD *)a2 + 75);
  v6 |= 2uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 75) = v18;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_131;
  }
LABEL_130:
  uint64_t v19 = *((void *)a2 + 8);
  v5 |= 0x80uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((void *)this + 8) = v19;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 1) == 0)
  {
LABEL_25:
    if ((v7 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_132;
  }
LABEL_131:
  uint64_t v20 = *((void *)a2 + 1);
  v5 |= 1uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((void *)this + 1) = v20;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x40) == 0)
  {
LABEL_26:
    if ((v7 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_133;
  }
LABEL_132:
  char v21 = *((unsigned char *)a2 + 317);
  v6 |= 0x40uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 317) = v21;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x80) == 0)
  {
LABEL_27:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_134;
  }
LABEL_133:
  char v22 = *((unsigned char *)a2 + 318);
  v6 |= 0x80uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 318) = v22;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x8000) == 0)
  {
LABEL_28:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_135;
  }
LABEL_134:
  char v23 = *((unsigned char *)a2 + 326);
  v6 |= 0x8000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 326) = v23;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x10000) == 0)
  {
LABEL_29:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_136;
  }
LABEL_135:
  char v24 = *((unsigned char *)a2 + 327);
  v6 |= 0x10000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 327) = v24;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_137;
  }
LABEL_136:
  char v25 = *((unsigned char *)a2 + 338);
  v6 |= 0x8000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 338) = v25;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_138;
  }
LABEL_137:
  char v26 = *((unsigned char *)a2 + 336);
  v6 |= 0x2000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 336) = v26;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x1000) == 0)
  {
LABEL_32:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_139;
  }
LABEL_138:
  char v27 = *((unsigned char *)a2 + 323);
  v6 |= 0x1000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 323) = v27;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_140;
  }
LABEL_139:
  char v28 = *((unsigned char *)a2 + 339);
  v6 |= 0x10000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 339) = v28;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v7 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_141;
  }
LABEL_140:
  char v29 = *((unsigned char *)a2 + 340);
  v6 |= 0x20000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 340) = v29;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x200) == 0)
  {
LABEL_35:
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_142;
  }
LABEL_141:
  char v30 = *((unsigned char *)a2 + 320);
  v6 |= 0x200uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 320) = v30;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_143;
  }
LABEL_142:
  char v31 = *((unsigned char *)a2 + 335);
  v6 |= 0x1000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 335) = v31;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x2000) == 0)
  {
LABEL_37:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_144;
  }
LABEL_143:
  char v32 = *((unsigned char *)a2 + 324);
  v6 |= 0x2000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 324) = v32;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x80000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_145;
  }
LABEL_144:
  char v33 = *((unsigned char *)a2 + 337);
  v6 |= 0x4000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 337) = v33;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x80000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_146;
  }
LABEL_145:
  char v34 = *((unsigned char *)a2 + 330);
  v6 |= 0x80000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 330) = v34;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_147;
  }
LABEL_146:
  char v35 = *((unsigned char *)a2 + 348);
  v6 |= 0x2000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 348) = v35;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v7 & 0x4000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_148;
  }
LABEL_147:
  char v36 = *((unsigned char *)a2 + 344);
  v6 |= 0x200000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 344) = v36;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_149;
  }
LABEL_148:
  char v37 = *((unsigned char *)a2 + 349);
  v6 |= 0x4000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 349) = v37;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_150;
  }
LABEL_149:
  char v38 = *((unsigned char *)a2 + 345);
  v6 |= 0x400000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 345) = v38;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_151;
  }
LABEL_150:
  char v39 = *((unsigned char *)a2 + 341);
  v6 |= 0x40000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 341) = v39;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x800) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_152;
  }
LABEL_151:
  char v40 = *((unsigned char *)a2 + 322);
  v6 |= 0x800uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 322) = v40;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x8000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_153;
  }
LABEL_152:
  char v41 = *((unsigned char *)a2 + 331);
  v6 |= 0x100000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 331) = v41;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v7 & 0x800000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_154;
  }
LABEL_153:
  char v42 = *((unsigned char *)a2 + 350);
  v6 |= 0x8000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 350) = v42;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_155;
  }
LABEL_154:
  char v43 = *((unsigned char *)a2 + 346);
  v6 |= 0x800000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 346) = v43;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x20000) == 0)
  {
LABEL_49:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_156;
  }
LABEL_155:
  int v44 = *((_DWORD *)a2 + 27);
  v5 |= 0x20000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 27) = v44;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x400000) == 0)
  {
LABEL_50:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_157;
  }
LABEL_156:
  char v45 = *((unsigned char *)a2 + 333);
  v6 |= 0x400000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 333) = v45;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x800000) == 0)
  {
LABEL_51:
    if ((v7 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_158;
  }
LABEL_157:
  char v46 = *((unsigned char *)a2 + 334);
  v6 |= 0x800000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 334) = v46;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x20) == 0)
  {
LABEL_52:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_159;
  }
LABEL_158:
  char v47 = *((unsigned char *)a2 + 316);
  v6 |= 0x20uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 316) = v47;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x40000) == 0)
  {
LABEL_53:
    if ((v7 & 0x40000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_160;
  }
LABEL_159:
  int v48 = *((_DWORD *)a2 + 28);
  v5 |= 0x40000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 28) = v48;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x10000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_161;
  }
LABEL_160:
  char v49 = *((unsigned char *)a2 + 353);
  v6 |= 0x40000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 353) = v49;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x20000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_162;
  }
LABEL_161:
  char v50 = *((unsigned char *)a2 + 351);
  v6 |= 0x10000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 351) = v50;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_163;
  }
LABEL_162:
  char v51 = *((unsigned char *)a2 + 352);
  v6 |= 0x20000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 352) = v51;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_164;
  }
LABEL_163:
  char v52 = *((unsigned char *)a2 + 343);
  v6 |= (unint64_t)&_mh_execute_header;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 343) = v52;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v4 & 0x20000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_165;
  }
LABEL_164:
  char v53 = *((unsigned char *)a2 + 342);
  v6 |= 0x80000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 342) = v53;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x40000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_166;
  }
LABEL_165:
  int v54 = *((_DWORD *)a2 + 63);
  v5 |= 0x20000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 63) = v54;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_167;
  }
LABEL_166:
  int v55 = *((_DWORD *)a2 + 64);
  v5 |= 0x40000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 64) = v55;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_168;
  }
LABEL_167:
  int v56 = *((_DWORD *)a2 + 36);
  v5 |= 0x4000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 36) = v56;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_169;
  }
LABEL_168:
  int v57 = *((_DWORD *)a2 + 37);
  v5 |= 0x8000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 37) = v57;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x20000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_170;
  }
LABEL_169:
  char v58 = *((unsigned char *)a2 + 328);
  v6 |= 0x20000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 328) = v58;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x4000) == 0)
  {
LABEL_64:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_171;
  }
LABEL_170:
  char v59 = *((unsigned char *)a2 + 325);
  v6 |= 0x4000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 325) = v59;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_172;
  }
LABEL_171:
  int v60 = *((_DWORD *)a2 + 47);
  v5 |= 0x2000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 47) = v60;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x80000) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_173;
  }
LABEL_172:
  int v61 = *((_DWORD *)a2 + 29);
  v5 |= 0x80000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 29) = v61;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x4000000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_174;
  }
LABEL_173:
  int v62 = *((_DWORD *)a2 + 46);
  v5 |= 0x1000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 46) = v62;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v4 & 0x8000000000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_175;
  }
LABEL_174:
  float result = *((float *)a2 + 72);
  v5 |= 0x4000000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 72) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v4 & 0x200000000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_176;
  }
LABEL_175:
  float result = *((float *)a2 + 73);
  v5 |= 0x8000000000000000;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 73) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x800000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_177;
  }
LABEL_176:
  float result = *((float *)a2 + 67);
  v5 |= 0x200000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 67) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_178;
  }
LABEL_177:
  int v63 = *((_DWORD *)a2 + 69);
  v5 |= 0x800000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 69) = v63;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x400) == 0) {
      goto LABEL_73;
    }
    goto LABEL_179;
  }
LABEL_178:
  int v64 = *((_DWORD *)a2 + 71);
  v5 |= 0x2000000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 71) = v64;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x400) == 0)
  {
LABEL_73:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_180;
  }
LABEL_179:
  char v65 = *((unsigned char *)a2 + 321);
  v6 |= 0x400uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 321) = v65;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x4000) == 0)
  {
LABEL_74:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_181;
  }
LABEL_180:
  int v66 = *((_DWORD *)a2 + 24);
  v5 |= 0x4000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 24) = v66;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x1000) == 0)
  {
LABEL_75:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_182;
  }
LABEL_181:
  float result = *((float *)a2 + 22);
  v5 |= 0x1000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 22) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_183;
  }
LABEL_182:
  int v67 = *((_DWORD *)a2 + 54);
  v5 |= 0x100000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 54) = v67;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v4 & 0x40) == 0) {
      goto LABEL_78;
    }
    goto LABEL_184;
  }
LABEL_183:
  int v68 = *((_DWORD *)a2 + 66);
  v5 |= 0x100000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 66) = v68;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x40) == 0)
  {
LABEL_78:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_185;
  }
LABEL_184:
  uint64_t v69 = *((void *)a2 + 7);
  v5 |= 0x40uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((void *)this + 7) = v69;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_186;
  }
LABEL_185:
  int v70 = *((_DWORD *)a2 + 57);
  v5 |= 0x800000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 57) = v70;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_187;
  }
LABEL_186:
  int v71 = *((_DWORD *)a2 + 58);
  v5 |= 0x1000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 58) = v71;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x100000) == 0)
  {
LABEL_81:
    if ((v4 & 0x400) == 0) {
      goto LABEL_82;
    }
    goto LABEL_188;
  }
LABEL_187:
  float result = *((float *)a2 + 30);
  v5 |= 0x100000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 30) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x400) == 0)
  {
LABEL_82:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_189;
  }
LABEL_188:
  float result = *((float *)a2 + 20);
  v5 |= 0x400uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 20) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x200000) == 0)
  {
LABEL_83:
    if ((v4 & 0x800) == 0) {
      goto LABEL_84;
    }
    goto LABEL_190;
  }
LABEL_189:
  float result = *((float *)a2 + 31);
  v5 |= 0x200000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 31) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x800) == 0)
  {
LABEL_84:
    if ((v4 & 0x100) == 0) {
      goto LABEL_85;
    }
    goto LABEL_191;
  }
LABEL_190:
  float result = *((float *)a2 + 21);
  v5 |= 0x800uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 21) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x100) == 0)
  {
LABEL_85:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_192;
  }
LABEL_191:
  float result = *((float *)a2 + 18);
  v5 |= 0x100uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 18) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x200000) == 0)
  {
LABEL_86:
    if ((v7 & 4) == 0) {
      goto LABEL_87;
    }
    goto LABEL_193;
  }
LABEL_192:
  char v72 = *((unsigned char *)a2 + 332);
  v6 |= 0x200000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 332) = v72;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 4) == 0)
  {
LABEL_87:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_194;
  }
LABEL_193:
  int v73 = *((_DWORD *)a2 + 76);
  v6 |= 4uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 76) = v73;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_195;
  }
LABEL_194:
  int v74 = *((_DWORD *)a2 + 38);
  v5 |= 0x10000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 38) = v74;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x1000000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_196;
  }
LABEL_195:
  int v75 = *((_DWORD *)a2 + 40);
  v5 |= 0x40000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 40) = v75;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_197;
  }
LABEL_196:
  char v76 = *((unsigned char *)a2 + 347);
  v6 |= 0x1000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 347) = v76;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_198;
  }
LABEL_197:
  int v77 = *((_DWORD *)a2 + 41);
  v5 |= 0x80000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 41) = v77;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v4 & 0x8000000000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_199;
  }
LABEL_198:
  int v78 = *((_DWORD *)a2 + 39);
  v5 |= 0x20000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 39) = v78;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_200;
  }
LABEL_199:
  float result = *((float *)a2 + 61);
  v5 |= 0x8000000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 61) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_201;
  }
LABEL_200:
  int v79 = *((_DWORD *)a2 + 48);
  v5 |= 0x4000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 48) = v79;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_202;
  }
LABEL_201:
  int v80 = *((_DWORD *)a2 + 49);
  v5 |= 0x8000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 49) = v80;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x8000) == 0)
  {
LABEL_96:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_203;
  }
LABEL_202:
  float result = *((float *)a2 + 25);
  v5 |= 0x8000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((float *)this + 25) = result;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_204;
  }
LABEL_203:
  int v81 = *((_DWORD *)a2 + 52);
  v5 |= 0x40000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 52) = v81;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_205;
  }
LABEL_204:
  int v82 = *((_DWORD *)a2 + 50);
  v5 |= 0x10000000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 50) = v82;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_206;
  }
LABEL_205:
  int v83 = *((_DWORD *)a2 + 45);
  v5 |= 0x800000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 45) = v83;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_207;
  }
LABEL_206:
  int v84 = *((_DWORD *)a2 + 42);
  v5 |= (unint64_t)&_mh_execute_header;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 42) = v84;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x100) == 0) {
      goto LABEL_102;
    }
    goto LABEL_208;
  }
LABEL_207:
  int v85 = *((_DWORD *)a2 + 44);
  v5 |= 0x400000000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((_DWORD *)this + 44) = v85;
  uint64_t v4 = *v3;
  uint64_t v7 = *(void *)((char *)a2 + 364);
  if ((v7 & 0x100) == 0)
  {
LABEL_102:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_209;
  }
LABEL_208:
  char v86 = *((unsigned char *)a2 + 319);
  v6 |= 0x100uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 319) = v86;
  uint64_t v4 = *v3;
  if ((*(void *)((unsigned char *)a2 + 364) & 0x40000) == 0)
  {
LABEL_103:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }
LABEL_209:
  char v87 = *((unsigned char *)a2 + 329);
  v6 |= 0x40000uLL;
  *uint64_t v2 = v5;
  *(void *)((char *)this + 364) = v6;
  *((unsigned char *)this + 329) = v87;
  if ((*v3 & 0x200000000) != 0)
  {
LABEL_104:
    int v9 = *((_DWORD *)a2 + 43);
    *uint64_t v2 = v5 | 0x200000000;
    *(void *)((char *)this + 364) = v6;
    *((_DWORD *)this + 43) = v9;
  }
LABEL_105:
  uint64_t v10 = *v3;
  if ((*v3 & 2) != 0)
  {
    uint64_t v88 = *((void *)a2 + 2);
    *v2 |= 2uLL;
    *((void *)this + 2) = v88;
    uint64_t v10 = *v3;
    if ((*v3 & 0x20) == 0)
    {
LABEL_107:
      if ((v10 & 4) == 0) {
        goto LABEL_108;
      }
      goto LABEL_213;
    }
  }
  else if ((v10 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  uint64_t v89 = *((void *)a2 + 6);
  *v2 |= 0x20uLL;
  *((void *)this + 6) = v89;
  uint64_t v10 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_108:
    if ((v10 & 8) == 0) {
      goto LABEL_109;
    }
    goto LABEL_214;
  }
LABEL_213:
  uint64_t v90 = *((void *)a2 + 3);
  *v2 |= 4uLL;
  *((void *)this + 3) = v90;
  uint64_t v10 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_109:
    if ((v10 & 0x10) == 0) {
      goto LABEL_110;
    }
    goto LABEL_215;
  }
LABEL_214:
  uint64_t v91 = *((void *)a2 + 4);
  *v2 |= 8uLL;
  *((void *)this + 4) = v91;
  uint64_t v10 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_110:
    if ((v10 & 0x2000000000000) == 0) {
      goto LABEL_111;
    }
    goto LABEL_216;
  }
LABEL_215:
  uint64_t v92 = *((void *)a2 + 5);
  *v2 |= 0x10uLL;
  *((void *)this + 5) = v92;
  uint64_t v10 = *v3;
  if ((*v3 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v10 & 0x2000) == 0) {
      return result;
    }
LABEL_217:
    float result = *((float *)a2 + 23);
    *v2 |= 0x2000uLL;
    *((float *)this + 23) = result;
    return result;
  }
LABEL_216:
  int v93 = *((_DWORD *)a2 + 59);
  *v2 |= 0x2000000000000uLL;
  *((_DWORD *)this + 59) = v93;
  if ((*v3 & 0x2000) != 0) {
    goto LABEL_217;
  }
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, const CMMsl::KappaSevereCrashResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((CMMsl::KappaSevereCrashResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSevereCrashResult *a2, CMMsl::KappaSevereCrashResult *a3)
{
  long long v3 = *(_OWORD *)((char *)this + 356);
  *(_OWORD *)((char *)this + 356) = *(_OWORD *)((char *)a2 + 356);
  *(_OWORD *)((char *)a2 + 356) = v3;
  LODWORD(v3) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v3;
  LODWORD(v3) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v3;
  int v4 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v4;
  int v5 = *((_DWORD *)this + 62);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *((_DWORD *)a2 + 62) = v5;
  LODWORD(v3) = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  *((_DWORD *)a2 + 74) = v3;
  LODWORD(v3) = *((_DWORD *)this + 68);
  *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
  *((_DWORD *)a2 + 68) = v3;
  LODWORD(v3) = *((_DWORD *)this + 56);
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  *((_DWORD *)a2 + 56) = v3;
  LODWORD(v3) = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  int v6 = *((_DWORD *)this + 65);
  *((_DWORD *)this + 65) = *((_DWORD *)a2 + 65);
  *((_DWORD *)a2 + 65) = v6;
  int v7 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v7;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 77);
  *((_DWORD *)this + 77) = *((_DWORD *)a2 + 77);
  *((_DWORD *)a2 + 77) = v3;
  LODWORD(v3) = *((_DWORD *)this + 78);
  *((_DWORD *)this + 78) = *((_DWORD *)a2 + 78);
  *((_DWORD *)a2 + 78) = v3;
  int v8 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v8;
  int v9 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v9;
  LODWORD(v3) = *((_DWORD *)this + 60);
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  *((_DWORD *)a2 + 60) = v3;
  int v10 = *((_DWORD *)this + 70);
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  *((_DWORD *)a2 + 70) = v10;
  int v11 = *((_DWORD *)this + 75);
  *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
  *((_DWORD *)a2 + 75) = v11;
  uint64_t v12 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 317);
  *((unsigned char *)this + 317) = *((unsigned char *)a2 + 317);
  *((unsigned char *)a2 + 317) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 318);
  *((unsigned char *)this + 318) = *((unsigned char *)a2 + 318);
  *((unsigned char *)a2 + 318) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 326);
  *((unsigned char *)this + 326) = *((unsigned char *)a2 + 326);
  *((unsigned char *)a2 + 326) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 327);
  *((unsigned char *)this + 327) = *((unsigned char *)a2 + 327);
  *((unsigned char *)a2 + 327) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 338);
  *((unsigned char *)this + 338) = *((unsigned char *)a2 + 338);
  *((unsigned char *)a2 + 338) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 336);
  *((unsigned char *)this + 336) = *((unsigned char *)a2 + 336);
  *((unsigned char *)a2 + 336) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 323);
  *((unsigned char *)this + 323) = *((unsigned char *)a2 + 323);
  *((unsigned char *)a2 + 323) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 339);
  *((unsigned char *)this + 339) = *((unsigned char *)a2 + 339);
  *((unsigned char *)a2 + 339) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 340);
  *((unsigned char *)this + 340) = *((unsigned char *)a2 + 340);
  *((unsigned char *)a2 + 340) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 320);
  *((unsigned char *)this + 320) = *((unsigned char *)a2 + 320);
  *((unsigned char *)a2 + 320) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 335);
  *((unsigned char *)this + 335) = *((unsigned char *)a2 + 335);
  *((unsigned char *)a2 + 335) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 324);
  *((unsigned char *)this + 324) = *((unsigned char *)a2 + 324);
  *((unsigned char *)a2 + 324) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 337);
  *((unsigned char *)this + 337) = *((unsigned char *)a2 + 337);
  *((unsigned char *)a2 + 337) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 330);
  *((unsigned char *)this + 330) = *((unsigned char *)a2 + 330);
  *((unsigned char *)a2 + 330) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 348);
  *((unsigned char *)this + 348) = *((unsigned char *)a2 + 348);
  *((unsigned char *)a2 + 348) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 344);
  *((unsigned char *)this + 344) = *((unsigned char *)a2 + 344);
  *((unsigned char *)a2 + 344) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 349);
  *((unsigned char *)this + 349) = *((unsigned char *)a2 + 349);
  *((unsigned char *)a2 + 349) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 345);
  *((unsigned char *)this + 345) = *((unsigned char *)a2 + 345);
  *((unsigned char *)a2 + 345) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 341);
  *((unsigned char *)this + 341) = *((unsigned char *)a2 + 341);
  *((unsigned char *)a2 + 341) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 322);
  *((unsigned char *)this + 322) = *((unsigned char *)a2 + 322);
  *((unsigned char *)a2 + 322) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 331);
  *((unsigned char *)this + 331) = *((unsigned char *)a2 + 331);
  *((unsigned char *)a2 + 331) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 350);
  *((unsigned char *)this + 350) = *((unsigned char *)a2 + 350);
  *((unsigned char *)a2 + 350) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 346);
  *((unsigned char *)this + 346) = *((unsigned char *)a2 + 346);
  *((unsigned char *)a2 + 346) = v13;
  LODWORD(v13) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 333);
  *((unsigned char *)this + 333) = *((unsigned char *)a2 + 333);
  *((unsigned char *)a2 + 333) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 334);
  *((unsigned char *)this + 334) = *((unsigned char *)a2 + 334);
  *((unsigned char *)a2 + 334) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 316);
  *((unsigned char *)this + 316) = *((unsigned char *)a2 + 316);
  *((unsigned char *)a2 + 316) = v13;
  LODWORD(v13) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 353);
  *((unsigned char *)this + 353) = *((unsigned char *)a2 + 353);
  *((unsigned char *)a2 + 353) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 351);
  *((unsigned char *)this + 351) = *((unsigned char *)a2 + 351);
  *((unsigned char *)a2 + 351) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 352);
  *((unsigned char *)this + 352) = *((unsigned char *)a2 + 352);
  *((unsigned char *)a2 + 352) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 343);
  *((unsigned char *)this + 343) = *((unsigned char *)a2 + 343);
  *((unsigned char *)a2 + 343) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 342);
  *((unsigned char *)this + 342) = *((unsigned char *)a2 + 342);
  *((unsigned char *)a2 + 342) = v13;
  LODWORD(v13) = *((_DWORD *)this + 63);
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  *((_DWORD *)a2 + 63) = v13;
  LODWORD(v13) = *((_DWORD *)this + 64);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_DWORD *)a2 + 64) = v13;
  LODWORD(v13) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v13;
  LODWORD(v13) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 328);
  *((unsigned char *)this + 328) = *((unsigned char *)a2 + 328);
  *((unsigned char *)a2 + 328) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 325);
  *((unsigned char *)this + 325) = *((unsigned char *)a2 + 325);
  *((unsigned char *)a2 + 325) = v13;
  LODWORD(v13) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v13;
  LODWORD(v13) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v13;
  LODWORD(v13) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v13;
  LODWORD(v3) = *((_DWORD *)this + 72);
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  *((_DWORD *)a2 + 72) = v3;
  LODWORD(v3) = *((_DWORD *)this + 73);
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  *((_DWORD *)a2 + 73) = v3;
  LODWORD(v3) = *((_DWORD *)this + 67);
  *((_DWORD *)this + 67) = *((_DWORD *)a2 + 67);
  *((_DWORD *)a2 + 67) = v3;
  LODWORD(v13) = *((_DWORD *)this + 69);
  *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
  *((_DWORD *)a2 + 69) = v13;
  LODWORD(v13) = *((_DWORD *)this + 71);
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  *((_DWORD *)a2 + 71) = v13;
  LOBYTE(v13) = *((unsigned char *)this + 321);
  *((unsigned char *)this + 321) = *((unsigned char *)a2 + 321);
  *((unsigned char *)a2 + 321) = v13;
  LODWORD(v13) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v13;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v13) = *((_DWORD *)this + 54);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  *((_DWORD *)a2 + 54) = v13;
  LODWORD(v13) = *((_DWORD *)this + 66);
  *((_DWORD *)this + 66) = *((_DWORD *)a2 + 66);
  *((_DWORD *)a2 + 66) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  LODWORD(v14) = *((_DWORD *)this + 57);
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  *((_DWORD *)a2 + 57) = v14;
  LODWORD(v14) = *((_DWORD *)this + 58);
  *((_DWORD *)this + 58) = *((_DWORD *)a2 + 58);
  *((_DWORD *)a2 + 58) = v14;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LOBYTE(v14) = *((unsigned char *)this + 332);
  *((unsigned char *)this + 332) = *((unsigned char *)a2 + 332);
  *((unsigned char *)a2 + 332) = v14;
  LODWORD(v14) = *((_DWORD *)this + 76);
  *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
  *((_DWORD *)a2 + 76) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 347);
  *((unsigned char *)this + 347) = *((unsigned char *)a2 + 347);
  *((unsigned char *)a2 + 347) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v3) = *((_DWORD *)this + 61);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_DWORD *)a2 + 61) = v3;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v14;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v14) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v14;
  LODWORD(v14) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v14;
  LODWORD(v14) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 319);
  *((unsigned char *)this + 319) = *((unsigned char *)a2 + 319);
  *((unsigned char *)a2 + 319) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 329);
  *((unsigned char *)this + 329) = *((unsigned char *)a2 + 329);
  *((unsigned char *)a2 + 329) = v14;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  uint64_t v15 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v15;
  uint64_t v16 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v16;
  uint64_t v17 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  LODWORD(v19) = *((_DWORD *)this + 59);
  *((_DWORD *)this + 59) = *((_DWORD *)a2 + 59);
  *((_DWORD *)a2 + 59) = v19;
  float result = *((float *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((float *)a2 + 23) = result;
  return result;
}

float CMMsl::KappaSevereCrashResult::KappaSevereCrashResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6E80;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)(a2 + 356);
  *(void *)(a2 + 364) = 0;
  *(void *)(a2 + 356) = 0;
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a2 + 308);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 312);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 317) = *(unsigned char *)(a2 + 317);
  *(unsigned char *)(a1 + 318) = *(unsigned char *)(a2 + 318);
  *(unsigned char *)(a1 + 326) = *(unsigned char *)(a2 + 326);
  *(unsigned char *)(a1 + 327) = *(unsigned char *)(a2 + 327);
  *(unsigned char *)(a1 + 338) = *(unsigned char *)(a2 + 338);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 323) = *(unsigned char *)(a2 + 323);
  *(unsigned char *)(a1 + 339) = *(unsigned char *)(a2 + 339);
  *(unsigned char *)(a1 + 340) = *(unsigned char *)(a2 + 340);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(unsigned char *)(a1 + 335) = *(unsigned char *)(a2 + 335);
  *(unsigned char *)(a1 + 324) = *(unsigned char *)(a2 + 324);
  *(unsigned char *)(a1 + 337) = *(unsigned char *)(a2 + 337);
  *(unsigned char *)(a1 + 330) = *(unsigned char *)(a2 + 330);
  *(unsigned char *)(a1 + 348) = *(unsigned char *)(a2 + 348);
  *(unsigned char *)(a1 + 344) = *(unsigned char *)(a2 + 344);
  *(unsigned char *)(a1 + 349) = *(unsigned char *)(a2 + 349);
  *(unsigned char *)(a1 + 345) = *(unsigned char *)(a2 + 345);
  *(unsigned char *)(a1 + 341) = *(unsigned char *)(a2 + 341);
  *(unsigned char *)(a1 + 322) = *(unsigned char *)(a2 + 322);
  *(unsigned char *)(a1 + 331) = *(unsigned char *)(a2 + 331);
  *(unsigned char *)(a1 + 350) = *(unsigned char *)(a2 + 350);
  *(unsigned char *)(a1 + 346) = *(unsigned char *)(a2 + 346);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(unsigned char *)(a1 + 333) = *(unsigned char *)(a2 + 333);
  *(unsigned char *)(a1 + 334) = *(unsigned char *)(a2 + 334);
  *(unsigned char *)(a1 + 316) = *(unsigned char *)(a2 + 316);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 353) = *(unsigned char *)(a2 + 353);
  *(unsigned char *)(a1 + 351) = *(unsigned char *)(a2 + 351);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(unsigned char *)(a1 + 343) = *(unsigned char *)(a2 + 343);
  *(unsigned char *)(a1 + 342) = *(unsigned char *)(a2 + 342);
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(unsigned char *)(a1 + 325) = *(unsigned char *)(a2 + 325);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a1 + 268) = *(_DWORD *)(a2 + 268);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(unsigned char *)(a1 + 321) = *(unsigned char *)(a2 + 321);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 264) = *(_DWORD *)(a2 + 264);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(a2 + 332);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 347) = *(unsigned char *)(a2 + 347);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 319) = *(unsigned char *)(a2 + 319);
  *(unsigned char *)(a1 + 329) = *(unsigned char *)(a2 + 329);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  float result = *(float *)(a2 + 92);
  *(float *)(a1 + 92) = result;
  return result;
}

CMMsl *CMMsl::KappaSevereCrashResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSevereCrashResult::KappaSevereCrashResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSevereCrashResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSevereCrashResult::formatText(CMMsl::KappaSevereCrashResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = (uint64_t *)((char *)this + 356);
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "anyLowSense", *((unsigned char *)this + 316));
    uint64_t v6 = *(void *)((char *)this + 364);
  }
  uint64_t v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(a2, "autocorrelationPeriodicCount", *((float *)this + 18));
    uint64_t v7 = *v5;
    uint64_t v6 = *(void *)((char *)this + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v6 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_108;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(a2, "autocorrelationPeriodicCountThreshold", *((float *)this + 19));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v7 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(a2, "crashDetectorDecision", *((unsigned char *)this + 317));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_7:
    if ((v7 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(a2, "crashTimestamp", *((void *)this + 1));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v7 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(a2, "cumulativeRotation", *((float *)this + 20));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(a2, "cumulativeRotationHarmonicMean", *((float *)this + 21));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 22));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x4000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(a2, "deltaRealTrigger", *((float *)this + 23));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v7 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 24));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v7 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(a2, "distanceToNearestRoad", *((float *)this + 25));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(a2, "distanceToNearestRoadThreshold", *((float *)this + 26));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0) {
      goto LABEL_16;
    }
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(a2, "earlyCrashDetectorDecision", *((unsigned char *)this + 318));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(a2, "escalationCandidate", *((unsigned char *)this + 319));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(a2, "escalationCandidateSuppressed", *((unsigned char *)this + 320));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v7 & 2) == 0) {
      goto LABEL_19;
    }
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(a2, "faultCounter", *((_DWORD *)this + 27));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_19:
    if ((v6 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(a2, "firstTimestampMAPDecision", *((void *)this + 2));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(a2, "hasSteps", *((unsigned char *)this + 321));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v6 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(a2, "highSensitivityBitmap", *((_DWORD *)this + 28));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(a2, "isAirbagDetectedOverWindow", *((unsigned char *)this + 322));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(a2, "isAutocorrelationDecided", *((unsigned char *)this + 323));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(a2, "isCrashDetected", *((unsigned char *)this + 324));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(a2, "isDecisionMadeAtBoundary", *((unsigned char *)this + 325));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(a2, "isDescalationDecided", *((unsigned char *)this + 326));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(a2, "isDescalationRequired", *((unsigned char *)this + 327));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(a2, "isEvaluatingMovingGps", *((unsigned char *)this + 328));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(a2, "isFreeFallDetectedEpoch", *((unsigned char *)this + 329));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetected", *((unsigned char *)this + 330));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(a2, "isHighSpeedCrashDetectedOverWindow", *((unsigned char *)this + 331));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(a2, "isHighSpeedDetectedOverWindow", *((unsigned char *)this + 332));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(a2, "isLowSensCrashDetected", *((unsigned char *)this + 333));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(a2, "isLowSensRolloverCrashDetected", *((unsigned char *)this + 334));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(a2, "isMAPFPDecided", *((unsigned char *)this + 335));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(a2, "isQuiescenceDecided", *((unsigned char *)this + 336));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(a2, "isRolloverCrashDetected", *((unsigned char *)this + 337));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(a2, "isStepsDecided", *((unsigned char *)this + 338));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(a2, "isTriggerClustersDecided", *((unsigned char *)this + 339));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0) {
      goto LABEL_41;
    }
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(a2, "isUshaFPDecided", *((unsigned char *)this + 340));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 4) == 0)
  {
LABEL_41:
    if ((v7 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(a2, "lastLocalRealTriggerTimestamp", *((void *)this + 3));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0) {
      goto LABEL_43;
    }
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(a2, "lastRemoteRealTriggerTimestamp", *((void *)this + 4));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(a2, "lastRemoteSampleTimestamp", *((void *)this + 5));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(a2, "lastTimestampMAPDecision", *((void *)this + 6));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(a2, "lowSpeedOrFakeCountAtBoundaryThreshold", *((_DWORD *)this + 29));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(a2, "maxPulse", *((float *)this + 30));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_47:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(a2, "maxPulseHarmonicMean", *((float *)this + 31));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_48:
    if ((v7 & 0x800000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(a2, "maximumHoldDuration", *((float *)this + 32));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(a2, "minimumHoldDuration", *((float *)this + 33));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(a2, "movingCountThreshold", *((_DWORD *)this + 34));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(a2, "movingCountThresholdFromSydneyB", *((_DWORD *)this + 35));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(a2, "movingGpsCount", *((_DWORD *)this + 36));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(a2, "movingGpsCountTotal", *((_DWORD *)this + 37));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(a2, "numAudioSkiing", *((_DWORD *)this + 38));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(a2, "numAudioSkiingThreshold", *((_DWORD *)this + 39));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiing", *((_DWORD *)this + 40));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(a2, "numBaroIncreasesSkiingThreshold", *((_DWORD *)this + 41));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(a2, "numDeescalationAOI", *((_DWORD *)this + 42));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x400000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(a2, "numDeescalationMAP", *((_DWORD *)this + 43));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_60:
    if ((v7 & 0x800000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(a2, "numDeescalationTwoLevel", *((_DWORD *)this + 44));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x1000000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(a2, "numDeescalationUsha", *((_DWORD *)this + 45));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(a2, "numGpsSamplesInHistory", *((_DWORD *)this + 46));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000000000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(a2, "numLowOrFakeGpsSamplesInHistory", *((_DWORD *)this + 47));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(a2, "numTriggersWithRecentSkiLiftDetected", *((_DWORD *)this + 48));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x10000000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(a2, "numTriggersWithTrueBtHint", *((_DWORD *)this + 49));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x20000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(a2, "numUshaCPEpoch", *((_DWORD *)this + 50));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(a2, "numUshaCPEpochThreshold", *((_DWORD *)this + 51));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x80000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_171;
  }
LABEL_170:
  PB::TextFormatter::format(a2, "numUshaFPEpoch", *((_DWORD *)this + 52));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_172;
  }
LABEL_171:
  PB::TextFormatter::format(a2, "numUshaFPEpochThreshold", *((_DWORD *)this + 53));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_70:
    if ((v7 & 0x200000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_173;
  }
LABEL_172:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 54));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_174;
  }
LABEL_173:
  PB::TextFormatter::format(a2, "quiescenceCumulativeRotationHarmonicMeanThreshold", *((float *)this + 55));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000) == 0) {
      goto LABEL_73;
    }
    goto LABEL_175;
  }
LABEL_174:
  PB::TextFormatter::format(a2, "quiescenceMaxPulseHarmonicMeanThreshold", *((float *)this + 56));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_176;
  }
LABEL_175:
  PB::TextFormatter::format(a2, "quiescencePulseEpochCount", *((_DWORD *)this + 57));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_177;
  }
LABEL_176:
  PB::TextFormatter::format(a2, "quiescenceSpinEpochCount", *((_DWORD *)this + 58));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_178;
  }
LABEL_177:
  PB::TextFormatter::format(a2, "sameEventState", *((_DWORD *)this + 59));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_179;
  }
LABEL_178:
  PB::TextFormatter::format(a2, "secondDeescalationHoldDuration", *((float *)this + 60));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_78;
    }
    goto LABEL_180;
  }
LABEL_179:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfAutocorrelationCondition", *((unsigned char *)this + 341));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_181;
  }
LABEL_180:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfJointDetectionCondition", *((unsigned char *)this + 342));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_182;
  }
LABEL_181:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMAPFPCondition", *((unsigned char *)this + 343));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_80:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_183;
  }
LABEL_182:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfMovingCondition", *((unsigned char *)this + 344));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_184;
  }
LABEL_183:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfQuiescenceCondition", *((unsigned char *)this + 345));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x800000000) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_185;
  }
LABEL_184:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiLiftCondition", *((unsigned char *)this + 346));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_84;
    }
    goto LABEL_186;
  }
LABEL_185:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfSkiingCondition", *((unsigned char *)this + 347));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_85;
    }
    goto LABEL_187;
  }
LABEL_186:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStaticCondition", *((unsigned char *)this + 348));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_188;
  }
LABEL_187:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfStepsCondition", *((unsigned char *)this + 349));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_86:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_189;
  }
LABEL_188:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTriggerClustersCondition", *((unsigned char *)this + 350));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_190;
  }
LABEL_189:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfTwoLevelSensitivityCondition", *((unsigned char *)this + 351));
  uint64_t v7 = *v5;
  uint64_t v6 = *(void *)((char *)this + 364);
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_88:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_191;
  }
LABEL_190:
  PB::TextFormatter::format(a2, "shouldDeescalateBecauseOfUshaFPCondition", *((unsigned char *)this + 352));
  uint64_t v7 = *v5;
  if ((*(void *)((unsigned char *)this + 364) & 0x40000000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_192;
  }
LABEL_191:
  PB::TextFormatter::format(a2, "shouldEnableHighSensBecauseOfDistanceToRoadCondition", *((unsigned char *)this + 353));
  uint64_t v7 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_90:
    if ((v7 & 0x10000000000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_193;
  }
LABEL_192:
  PB::TextFormatter::format(a2, "skiingPressureChangeOverEpochThreshold", *((float *)this + 61));
  uint64_t v7 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_91:
    if ((v7 & 0x20000000000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_194;
  }
LABEL_193:
  PB::TextFormatter::format(a2, "staticCountThreshold", *((_DWORD *)this + 62));
  uint64_t v7 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_195;
  }
LABEL_194:
  PB::TextFormatter::format(a2, "staticGpsCount", *((_DWORD *)this + 63));
  uint64_t v7 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_93:
    if ((v7 & 0x80000000000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_196;
  }
LABEL_195:
  PB::TextFormatter::format(a2, "staticGpsCountTotal", *((_DWORD *)this + 64));
  uint64_t v7 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_94:
    if ((v7 & 0x100000000000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_197;
  }
LABEL_196:
  PB::TextFormatter::format(a2, "stationaryCountMissingAsNoOpThreshold", *((_DWORD *)this + 65));
  uint64_t v7 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_95:
    if ((v7 & 0x40) == 0) {
      goto LABEL_96;
    }
    goto LABEL_198;
  }
LABEL_197:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp", *((_DWORD *)this + 66));
  uint64_t v7 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_96:
    if ((v7 & 0x200000000000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_199;
  }
LABEL_198:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp64", *((void *)this + 7));
  uint64_t v7 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_97:
    if ((v7 & 0x400000000000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_200;
  }
LABEL_199:
  PB::TextFormatter::format(a2, "stepsCadence", *((float *)this + 67));
  uint64_t v7 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_201;
  }
LABEL_200:
  PB::TextFormatter::format(a2, "stepsCadenceThreshold", *((float *)this + 68));
  uint64_t v7 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_99:
    if ((v7 & 0x1000000000000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_202;
  }
LABEL_201:
  PB::TextFormatter::format(a2, "stepsCount", *((_DWORD *)this + 69));
  uint64_t v7 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_100:
    if ((v7 & 0x2000000000000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_203;
  }
LABEL_202:
  PB::TextFormatter::format(a2, "stepsCountThreshold", *((_DWORD *)this + 70));
  uint64_t v7 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x4000000000000000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_102;
  }
LABEL_203:
  PB::TextFormatter::format(a2, "stepsDeescalatedAtOpp", *((_DWORD *)this + 71));
  if ((*v5 & 0x4000000000000000) != 0) {
LABEL_102:
  }
    PB::TextFormatter::format(a2, "stepsEpochCount", *((float *)this + 72));
LABEL_103:
  uint64_t v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(a2, "stepsPerMinute", *((float *)this + 73));
    uint64_t v8 = *v5;
    uint64_t v9 = *(void *)((char *)this + 364);
    if ((v9 & 1) == 0) {
      goto LABEL_207;
    }
    goto LABEL_206;
  }
  uint64_t v9 = *(void *)((char *)this + 364);
  if (v9)
  {
LABEL_206:
    PB::TextFormatter::format(a2, "stepsPerMinuteThreshold", *((float *)this + 74));
    uint64_t v8 = *v5;
    uint64_t v9 = *(void *)((char *)this + 364);
  }
LABEL_207:
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "stepsSecondOpportunityLookbackLength", *((_DWORD *)this + 75));
    uint64_t v9 = *(void *)((char *)this + 364);
    if ((*v5 & 0x80) == 0)
    {
LABEL_209:
      if ((v9 & 4) == 0) {
        goto LABEL_210;
      }
      goto LABEL_218;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_209;
  }
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 8));
  uint64_t v9 = *(void *)((char *)this + 364);
  if ((v9 & 4) == 0)
  {
LABEL_210:
    if ((v9 & 8) == 0) {
      goto LABEL_211;
    }
    goto LABEL_219;
  }
LABEL_218:
  PB::TextFormatter::format(a2, "triggerClusterDeescalationWindowBoundary", *((_DWORD *)this + 76));
  uint64_t v9 = *(void *)((char *)this + 364);
  if ((v9 & 8) == 0)
  {
LABEL_211:
    if ((v9 & 0x10) == 0) {
      goto LABEL_213;
    }
    goto LABEL_212;
  }
LABEL_219:
  PB::TextFormatter::format(a2, "ushaCumulativeRotationThreshold", *((float *)this + 77));
  if ((*(void *)((unsigned char *)this + 364) & 0x10) != 0) {
LABEL_212:
  }
    PB::TextFormatter::format(a2, "ushaPeakPressureThreshold", *((float *)this + 78));
LABEL_213:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSevereCrashResult::readFrom(CMMsl::KappaSevereCrashResult *this, PB::Reader *a2)
{
  long long v3 = (unint64_t *)((char *)a2 + 8);
  unint64_t v2 = *((void *)a2 + 1);
  int v5 = (char *)a2 + 24;
  int v4 = *((unsigned __int8 *)a2 + 24);
  unint64_t v6 = *((void *)a2 + 2);
  if (v2 < v6 && v4 == 0)
  {
    int v11 = (void *)((char *)this + 356);
    do
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v6)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v6) {
          unint64_t v6 = v2;
        }
        while (1)
        {
          if (v6 == v2)
          {
            unint64_t v15 = 0;
            *int v5 = 1;
            goto LABEL_24;
          }
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *long long v3 = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v19 += 7;
          unint64_t v2 = v21;
          BOOL v18 = v20++ > 8;
          if (v18)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_24;
          }
        }
        if (*v5) {
          unint64_t v15 = 0;
        }
      }
      else
      {
        char v13 = 0;
        unsigned int v14 = 0;
        unint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = v2 + 1;
          *long long v3 = v2 + 1;
          char v17 = *(unsigned char *)(v12 + v2);
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            break;
          }
          v13 += 7;
          unint64_t v2 = v16;
          BOOL v18 = v14++ > 8;
          if (v18) {
            goto LABEL_20;
          }
        }
      }
LABEL_24:
      int v23 = v15 & 7;
      int v4 = *v5;
      if (*v5) {
        BOOL v24 = 1;
      }
      else {
        BOOL v24 = v23 == 4;
      }
      if (v24) {
        break;
      }
      unint64_t v25 = v15 >> 3;
      if ((int)(v15 >> 3) > 400)
      {
        if ((int)v25 <= 900)
        {
          if ((int)v25 > 600)
          {
            if ((int)v25 > 700)
            {
              switch((int)v25)
              {
                case 801:
                  *v11 |= 0x100000uLL;
                  unint64_t v60 = *v3;
                  if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)a2 + 2)) {
                    goto LABEL_512;
                  }
                  *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v60);
                  goto LABEL_919;
                case 802:
                  *v11 |= 0x400uLL;
                  unint64_t v427 = *v3;
                  if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v427 + 4 > *((void *)a2 + 2)) {
                    goto LABEL_512;
                  }
                  *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v427);
                  goto LABEL_919;
                case 803:
                  *v11 |= 0x200000uLL;
                  unint64_t v428 = *v3;
                  if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v428 + 4 > *((void *)a2 + 2)) {
                    goto LABEL_512;
                  }
                  *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v428);
                  goto LABEL_919;
                case 804:
                  *v11 |= 0x800uLL;
                  unint64_t v429 = *v3;
                  if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v429 + 4 > *((void *)a2 + 2)) {
                    goto LABEL_512;
                  }
                  *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v429);
                  goto LABEL_919;
                default:
                  if (v25 == 701)
                  {
                    *v11 |= 0x800000000000uLL;
                    unint64_t v448 = *((void *)a2 + 1);
                    unint64_t v449 = *((void *)a2 + 2);
                    uint64_t v450 = *(void *)a2;
                    if (v448 > 0xFFFFFFFFFFFFFFF5 || v448 + 10 > v449)
                    {
                      char v693 = 0;
                      unsigned int v694 = 0;
                      uint64_t v453 = 0;
                      if (v449 <= v448) {
                        unint64_t v449 = *((void *)a2 + 1);
                      }
                      while (1)
                      {
                        if (v449 == v448)
                        {
                          LODWORD(v453) = 0;
                          *int v5 = 1;
                          goto LABEL_1052;
                        }
                        unint64_t v695 = v448 + 1;
                        char v696 = *(unsigned char *)(v450 + v448);
                        *long long v3 = v695;
                        v453 |= (unint64_t)(v696 & 0x7F) << v693;
                        if ((v696 & 0x80) == 0) {
                          break;
                        }
                        v693 += 7;
                        unint64_t v448 = v695;
                        BOOL v18 = v694++ > 8;
                        if (v18)
                        {
LABEL_815:
                          LODWORD(v453) = 0;
                          goto LABEL_1052;
                        }
                      }
                      if (*v5) {
                        LODWORD(v453) = 0;
                      }
                    }
                    else
                    {
                      char v451 = 0;
                      unsigned int v452 = 0;
                      uint64_t v453 = 0;
                      while (1)
                      {
                        unint64_t v454 = v448 + 1;
                        *long long v3 = v448 + 1;
                        char v455 = *(unsigned char *)(v450 + v448);
                        v453 |= (unint64_t)(v455 & 0x7F) << v451;
                        if ((v455 & 0x80) == 0) {
                          break;
                        }
                        v451 += 7;
                        unint64_t v448 = v454;
                        BOOL v18 = v452++ > 8;
                        if (v18) {
                          goto LABEL_815;
                        }
                      }
                    }
LABEL_1052:
                    *((_DWORD *)this + 57) = v453;
                  }
                  else
                  {
                    if (v25 != 702) {
                      goto LABEL_140;
                    }
                    *v11 |= 0x1000000000000uLL;
                    unint64_t v70 = *((void *)a2 + 1);
                    unint64_t v71 = *((void *)a2 + 2);
                    uint64_t v72 = *(void *)a2;
                    if (v70 > 0xFFFFFFFFFFFFFFF5 || v70 + 10 > v71)
                    {
                      char v597 = 0;
                      unsigned int v598 = 0;
                      uint64_t v75 = 0;
                      if (v71 <= v70) {
                        unint64_t v71 = *((void *)a2 + 1);
                      }
                      while (1)
                      {
                        if (v71 == v70)
                        {
                          LODWORD(v75) = 0;
                          *int v5 = 1;
                          goto LABEL_980;
                        }
                        unint64_t v599 = v70 + 1;
                        char v600 = *(unsigned char *)(v72 + v70);
                        *long long v3 = v599;
                        v75 |= (unint64_t)(v600 & 0x7F) << v597;
                        if ((v600 & 0x80) == 0) {
                          break;
                        }
                        v597 += 7;
                        unint64_t v70 = v599;
                        BOOL v18 = v598++ > 8;
                        if (v18)
                        {
LABEL_583:
                          LODWORD(v75) = 0;
                          goto LABEL_980;
                        }
                      }
                      if (*v5) {
                        LODWORD(v75) = 0;
                      }
                    }
                    else
                    {
                      char v73 = 0;
                      unsigned int v74 = 0;
                      uint64_t v75 = 0;
                      while (1)
                      {
                        unint64_t v76 = v70 + 1;
                        *long long v3 = v70 + 1;
                        char v77 = *(unsigned char *)(v72 + v70);
                        v75 |= (unint64_t)(v77 & 0x7F) << v73;
                        if ((v77 & 0x80) == 0) {
                          break;
                        }
                        v73 += 7;
                        unint64_t v70 = v76;
                        BOOL v18 = v74++ > 8;
                        if (v18) {
                          goto LABEL_583;
                        }
                      }
                    }
LABEL_980:
                    *((_DWORD *)this + 58) = v75;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v25)
              {
                case 601:
                  v11[1] |= 0x400uLL;
                  unint64_t v48 = *((void *)a2 + 1);
                  if (v48 >= *((void *)a2 + 2))
                  {
                    BOOL v51 = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v49 = v48 + 1;
                    int v50 = *(unsigned __int8 *)(*(void *)a2 + v48);
                    *((void *)a2 + 1) = v49;
                    BOOL v51 = v50 != 0;
                  }
                  *((unsigned char *)this + 321) = v51;
                  goto LABEL_920;
                case 602:
                  *v11 |= 0x4000uLL;
                  unint64_t v394 = *((void *)a2 + 1);
                  unint64_t v395 = *((void *)a2 + 2);
                  uint64_t v396 = *(void *)a2;
                  if (v394 <= 0xFFFFFFFFFFFFFFF5 && v394 + 10 <= v395)
                  {
                    char v397 = 0;
                    unsigned int v398 = 0;
                    uint64_t v399 = 0;
                    do
                    {
                      unint64_t v400 = v394 + 1;
                      *long long v3 = v394 + 1;
                      char v401 = *(unsigned char *)(v396 + v394);
                      v399 |= (unint64_t)(v401 & 0x7F) << v397;
                      if ((v401 & 0x80) == 0) {
                        goto LABEL_1034;
                      }
                      v397 += 7;
                      unint64_t v394 = v400;
                      BOOL v18 = v398++ > 8;
                    }
                    while (!v18);
LABEL_773:
                    LODWORD(v399) = 0;
                    goto LABEL_1034;
                  }
                  char v669 = 0;
                  unsigned int v670 = 0;
                  uint64_t v399 = 0;
                  if (v395 <= v394) {
                    unint64_t v395 = *((void *)a2 + 1);
                  }
                  while (2)
                  {
                    if (v395 == v394)
                    {
                      LODWORD(v399) = 0;
                      *int v5 = 1;
                    }
                    else
                    {
                      unint64_t v671 = v394 + 1;
                      char v672 = *(unsigned char *)(v396 + v394);
                      *long long v3 = v671;
                      v399 |= (unint64_t)(v672 & 0x7F) << v669;
                      if (v672 < 0)
                      {
                        v669 += 7;
                        unint64_t v394 = v671;
                        BOOL v18 = v670++ > 8;
                        if (v18) {
                          goto LABEL_773;
                        }
                        continue;
                      }
                      if (*v5) {
                        LODWORD(v399) = 0;
                      }
                    }
                    break;
                  }
LABEL_1034:
                  *((_DWORD *)this + 24) = v399;
                  goto LABEL_920;
                case 603:
                  *v11 |= 0x1000uLL;
                  unint64_t v402 = *v3;
                  if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v402 + 4 > *((void *)a2 + 2)) {
                    goto LABEL_512;
                  }
                  *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v402);
                  goto LABEL_919;
                case 604:
                  *v11 |= 0x100000000000uLL;
                  unint64_t v403 = *((void *)a2 + 1);
                  unint64_t v404 = *((void *)a2 + 2);
                  uint64_t v405 = *(void *)a2;
                  if (v403 <= 0xFFFFFFFFFFFFFFF5 && v403 + 10 <= v404)
                  {
                    char v406 = 0;
                    unsigned int v407 = 0;
                    uint64_t v408 = 0;
                    do
                    {
                      unint64_t v409 = v403 + 1;
                      *long long v3 = v403 + 1;
                      char v410 = *(unsigned char *)(v405 + v403);
                      v408 |= (unint64_t)(v410 & 0x7F) << v406;
                      if ((v410 & 0x80) == 0) {
                        goto LABEL_1037;
                      }
                      v406 += 7;
                      unint64_t v403 = v409;
                      BOOL v18 = v407++ > 8;
                    }
                    while (!v18);
LABEL_780:
                    LODWORD(v408) = 0;
                    goto LABEL_1037;
                  }
                  char v673 = 0;
                  unsigned int v674 = 0;
                  uint64_t v408 = 0;
                  if (v404 <= v403) {
                    unint64_t v404 = *((void *)a2 + 1);
                  }
                  while (2)
                  {
                    if (v404 == v403)
                    {
                      LODWORD(v408) = 0;
                      *int v5 = 1;
                    }
                    else
                    {
                      unint64_t v675 = v403 + 1;
                      char v676 = *(unsigned char *)(v405 + v403);
                      *long long v3 = v675;
                      v408 |= (unint64_t)(v676 & 0x7F) << v673;
                      if (v676 < 0)
                      {
                        v673 += 7;
                        unint64_t v403 = v675;
                        BOOL v18 = v674++ > 8;
                        if (v18) {
                          goto LABEL_780;
                        }
                        continue;
                      }
                      if (*v5) {
                        LODWORD(v408) = 0;
                      }
                    }
                    break;
                  }
LABEL_1037:
                  *((_DWORD *)this + 54) = v408;
                  goto LABEL_920;
                case 605:
                  *v11 |= 0x100000000000000uLL;
                  unint64_t v411 = *((void *)a2 + 1);
                  unint64_t v412 = *((void *)a2 + 2);
                  uint64_t v413 = *(void *)a2;
                  if (v411 <= 0xFFFFFFFFFFFFFFF5 && v411 + 10 <= v412)
                  {
                    char v414 = 0;
                    unsigned int v415 = 0;
                    uint64_t v416 = 0;
                    do
                    {
                      unint64_t v417 = v411 + 1;
                      *long long v3 = v411 + 1;
                      char v418 = *(unsigned char *)(v413 + v411);
                      v416 |= (unint64_t)(v418 & 0x7F) << v414;
                      if ((v418 & 0x80) == 0) {
                        goto LABEL_1040;
                      }
                      v414 += 7;
                      unint64_t v411 = v417;
                      BOOL v18 = v415++ > 8;
                    }
                    while (!v18);
LABEL_787:
                    LODWORD(v416) = 0;
                    goto LABEL_1040;
                  }
                  char v677 = 0;
                  unsigned int v678 = 0;
                  uint64_t v416 = 0;
                  if (v412 <= v411) {
                    unint64_t v412 = *((void *)a2 + 1);
                  }
                  while (2)
                  {
                    if (v412 == v411)
                    {
                      LODWORD(v416) = 0;
                      *int v5 = 1;
                    }
                    else
                    {
                      unint64_t v679 = v411 + 1;
                      char v680 = *(unsigned char *)(v413 + v411);
                      *long long v3 = v679;
                      v416 |= (unint64_t)(v680 & 0x7F) << v677;
                      if (v680 < 0)
                      {
                        v677 += 7;
                        unint64_t v411 = v679;
                        BOOL v18 = v678++ > 8;
                        if (v18) {
                          goto LABEL_787;
                        }
                        continue;
                      }
                      if (*v5) {
                        LODWORD(v416) = 0;
                      }
                    }
                    break;
                  }
LABEL_1040:
                  *((_DWORD *)this + 66) = v416;
                  goto LABEL_920;
                case 606:
                  *v11 |= 0x40uLL;
                  unint64_t v419 = *((void *)a2 + 1);
                  unint64_t v420 = *((void *)a2 + 2);
                  uint64_t v421 = *(void *)a2;
                  if (v419 <= 0xFFFFFFFFFFFFFFF5 && v419 + 10 <= v420)
                  {
                    char v422 = 0;
                    unsigned int v423 = 0;
                    uint64_t v424 = 0;
                    do
                    {
                      unint64_t v425 = v419 + 1;
                      *long long v3 = v419 + 1;
                      char v426 = *(unsigned char *)(v421 + v419);
                      v424 |= (unint64_t)(v426 & 0x7F) << v422;
                      if ((v426 & 0x80) == 0) {
                        goto LABEL_1043;
                      }
                      v422 += 7;
                      unint64_t v419 = v425;
                      BOOL v18 = v423++ > 8;
                    }
                    while (!v18);
LABEL_794:
                    uint64_t v424 = 0;
                    goto LABEL_1043;
                  }
                  char v681 = 0;
                  unsigned int v682 = 0;
                  uint64_t v424 = 0;
                  if (v420 <= v419) {
                    unint64_t v420 = *((void *)a2 + 1);
                  }
                  break;
                default:
                  goto LABEL_140;
              }
              while (1)
              {
                if (v420 == v419)
                {
                  uint64_t v424 = 0;
                  *int v5 = 1;
                  goto LABEL_1043;
                }
                unint64_t v683 = v419 + 1;
                char v684 = *(unsigned char *)(v421 + v419);
                *long long v3 = v683;
                v424 |= (unint64_t)(v684 & 0x7F) << v681;
                if ((v684 & 0x80) == 0) {
                  break;
                }
                v681 += 7;
                unint64_t v419 = v683;
                BOOL v18 = v682++ > 8;
                if (v18) {
                  goto LABEL_794;
                }
              }
              if (*v5) {
                uint64_t v424 = 0;
              }
LABEL_1043:
              *((void *)this + 7) = v424;
            }
          }
          else
          {
            switch((int)v25)
            {
              case 401:
                *v11 |= 0x20000000000000uLL;
                unint64_t v28 = *((void *)a2 + 1);
                unint64_t v29 = *((void *)a2 + 2);
                uint64_t v30 = *(void *)a2;
                if (v28 <= 0xFFFFFFFFFFFFFFF5 && v28 + 10 <= v29)
                {
                  char v31 = 0;
                  unsigned int v32 = 0;
                  uint64_t v33 = 0;
                  do
                  {
                    unint64_t v34 = v28 + 1;
                    *long long v3 = v28 + 1;
                    char v35 = *(unsigned char *)(v30 + v28);
                    v33 |= (unint64_t)(v35 & 0x7F) << v31;
                    if ((v35 & 0x80) == 0) {
                      goto LABEL_974;
                    }
                    v31 += 7;
                    unint64_t v28 = v34;
                    BOOL v18 = v32++ > 8;
                  }
                  while (!v18);
LABEL_565:
                  LODWORD(v33) = 0;
                  goto LABEL_974;
                }
                char v589 = 0;
                unsigned int v590 = 0;
                uint64_t v33 = 0;
                if (v29 <= v28) {
                  unint64_t v29 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v29 == v28)
                  {
                    LODWORD(v33) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v591 = v28 + 1;
                    char v592 = *(unsigned char *)(v30 + v28);
                    *long long v3 = v591;
                    v33 |= (unint64_t)(v592 & 0x7F) << v589;
                    if (v592 < 0)
                    {
                      v589 += 7;
                      unint64_t v28 = v591;
                      BOOL v18 = v590++ > 8;
                      if (v18) {
                        goto LABEL_565;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v33) = 0;
                    }
                  }
                  break;
                }
LABEL_974:
                *((_DWORD *)this + 63) = v33;
                goto LABEL_920;
              case 402:
                *v11 |= 0x40000000000000uLL;
                unint64_t v194 = *((void *)a2 + 1);
                unint64_t v195 = *((void *)a2 + 2);
                uint64_t v196 = *(void *)a2;
                if (v194 <= 0xFFFFFFFFFFFFFFF5 && v194 + 10 <= v195)
                {
                  char v197 = 0;
                  unsigned int v198 = 0;
                  uint64_t v199 = 0;
                  do
                  {
                    unint64_t v200 = v194 + 1;
                    *long long v3 = v194 + 1;
                    char v201 = *(unsigned char *)(v196 + v194);
                    v199 |= (unint64_t)(v201 & 0x7F) << v197;
                    if ((v201 & 0x80) == 0) {
                      goto LABEL_1007;
                    }
                    v197 += 7;
                    unint64_t v194 = v200;
                    BOOL v18 = v198++ > 8;
                  }
                  while (!v18);
LABEL_646:
                  LODWORD(v199) = 0;
                  goto LABEL_1007;
                }
                char v633 = 0;
                unsigned int v634 = 0;
                uint64_t v199 = 0;
                if (v195 <= v194) {
                  unint64_t v195 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v195 == v194)
                  {
                    LODWORD(v199) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v635 = v194 + 1;
                    char v636 = *(unsigned char *)(v196 + v194);
                    *long long v3 = v635;
                    v199 |= (unint64_t)(v636 & 0x7F) << v633;
                    if (v636 < 0)
                    {
                      v633 += 7;
                      unint64_t v194 = v635;
                      BOOL v18 = v634++ > 8;
                      if (v18) {
                        goto LABEL_646;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v199) = 0;
                    }
                  }
                  break;
                }
LABEL_1007:
                *((_DWORD *)this + 64) = v199;
                goto LABEL_920;
              case 403:
                *v11 |= 0x4000000uLL;
                unint64_t v202 = *((void *)a2 + 1);
                unint64_t v203 = *((void *)a2 + 2);
                uint64_t v204 = *(void *)a2;
                if (v202 <= 0xFFFFFFFFFFFFFFF5 && v202 + 10 <= v203)
                {
                  char v205 = 0;
                  unsigned int v206 = 0;
                  uint64_t v207 = 0;
                  do
                  {
                    unint64_t v208 = v202 + 1;
                    *long long v3 = v202 + 1;
                    char v209 = *(unsigned char *)(v204 + v202);
                    v207 |= (unint64_t)(v209 & 0x7F) << v205;
                    if ((v209 & 0x80) == 0) {
                      goto LABEL_1010;
                    }
                    v205 += 7;
                    unint64_t v202 = v208;
                    BOOL v18 = v206++ > 8;
                  }
                  while (!v18);
LABEL_653:
                  LODWORD(v207) = 0;
                  goto LABEL_1010;
                }
                char v637 = 0;
                unsigned int v638 = 0;
                uint64_t v207 = 0;
                if (v203 <= v202) {
                  unint64_t v203 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v203 == v202)
                  {
                    LODWORD(v207) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v639 = v202 + 1;
                    char v640 = *(unsigned char *)(v204 + v202);
                    *long long v3 = v639;
                    v207 |= (unint64_t)(v640 & 0x7F) << v637;
                    if (v640 < 0)
                    {
                      v637 += 7;
                      unint64_t v202 = v639;
                      BOOL v18 = v638++ > 8;
                      if (v18) {
                        goto LABEL_653;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v207) = 0;
                    }
                  }
                  break;
                }
LABEL_1010:
                *((_DWORD *)this + 36) = v207;
                goto LABEL_920;
              case 404:
                *v11 |= 0x8000000uLL;
                unint64_t v210 = *((void *)a2 + 1);
                unint64_t v211 = *((void *)a2 + 2);
                uint64_t v212 = *(void *)a2;
                if (v210 <= 0xFFFFFFFFFFFFFFF5 && v210 + 10 <= v211)
                {
                  char v213 = 0;
                  unsigned int v214 = 0;
                  uint64_t v215 = 0;
                  do
                  {
                    unint64_t v216 = v210 + 1;
                    *long long v3 = v210 + 1;
                    char v217 = *(unsigned char *)(v212 + v210);
                    v215 |= (unint64_t)(v217 & 0x7F) << v213;
                    if ((v217 & 0x80) == 0) {
                      goto LABEL_1013;
                    }
                    v213 += 7;
                    unint64_t v210 = v216;
                    BOOL v18 = v214++ > 8;
                  }
                  while (!v18);
LABEL_660:
                  LODWORD(v215) = 0;
                  goto LABEL_1013;
                }
                char v641 = 0;
                unsigned int v642 = 0;
                uint64_t v215 = 0;
                if (v211 <= v210) {
                  unint64_t v211 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v211 == v210)
                  {
                    LODWORD(v215) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v643 = v210 + 1;
                    char v644 = *(unsigned char *)(v212 + v210);
                    *long long v3 = v643;
                    v215 |= (unint64_t)(v644 & 0x7F) << v641;
                    if (v644 < 0)
                    {
                      v641 += 7;
                      unint64_t v210 = v643;
                      BOOL v18 = v642++ > 8;
                      if (v18) {
                        goto LABEL_660;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v215) = 0;
                    }
                  }
                  break;
                }
LABEL_1013:
                *((_DWORD *)this + 37) = v215;
                goto LABEL_920;
              case 405:
                v11[1] |= 0x20000uLL;
                unint64_t v218 = *((void *)a2 + 1);
                if (v218 >= *((void *)a2 + 2))
                {
                  BOOL v221 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v219 = v218 + 1;
                  int v220 = *(unsigned __int8 *)(*(void *)a2 + v218);
                  *((void *)a2 + 1) = v219;
                  BOOL v221 = v220 != 0;
                }
                *((unsigned char *)this + 328) = v221;
                goto LABEL_920;
              case 406:
                v11[1] |= 0x4000uLL;
                unint64_t v222 = *((void *)a2 + 1);
                if (v222 >= *((void *)a2 + 2))
                {
                  BOOL v225 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v223 = v222 + 1;
                  int v224 = *(unsigned __int8 *)(*(void *)a2 + v222);
                  *((void *)a2 + 1) = v223;
                  BOOL v225 = v224 != 0;
                }
                *((unsigned char *)this + 325) = v225;
                goto LABEL_920;
              case 407:
                *v11 |= 0x2000000000uLL;
                unint64_t v226 = *((void *)a2 + 1);
                unint64_t v227 = *((void *)a2 + 2);
                uint64_t v228 = *(void *)a2;
                if (v226 <= 0xFFFFFFFFFFFFFFF5 && v226 + 10 <= v227)
                {
                  char v229 = 0;
                  unsigned int v230 = 0;
                  uint64_t v231 = 0;
                  do
                  {
                    unint64_t v232 = v226 + 1;
                    *long long v3 = v226 + 1;
                    char v233 = *(unsigned char *)(v228 + v226);
                    v231 |= (unint64_t)(v233 & 0x7F) << v229;
                    if ((v233 & 0x80) == 0) {
                      goto LABEL_1016;
                    }
                    v229 += 7;
                    unint64_t v226 = v232;
                    BOOL v18 = v230++ > 8;
                  }
                  while (!v18);
LABEL_671:
                  LODWORD(v231) = 0;
                  goto LABEL_1016;
                }
                char v645 = 0;
                unsigned int v646 = 0;
                uint64_t v231 = 0;
                if (v227 <= v226) {
                  unint64_t v227 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v227 == v226)
                  {
                    LODWORD(v231) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v647 = v226 + 1;
                    char v648 = *(unsigned char *)(v228 + v226);
                    *long long v3 = v647;
                    v231 |= (unint64_t)(v648 & 0x7F) << v645;
                    if (v648 < 0)
                    {
                      v645 += 7;
                      unint64_t v226 = v647;
                      BOOL v18 = v646++ > 8;
                      if (v18) {
                        goto LABEL_671;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v231) = 0;
                    }
                  }
                  break;
                }
LABEL_1016:
                *((_DWORD *)this + 47) = v231;
                goto LABEL_920;
              case 408:
                *v11 |= 0x80000uLL;
                unint64_t v234 = *((void *)a2 + 1);
                unint64_t v235 = *((void *)a2 + 2);
                uint64_t v236 = *(void *)a2;
                if (v234 <= 0xFFFFFFFFFFFFFFF5 && v234 + 10 <= v235)
                {
                  char v237 = 0;
                  unsigned int v238 = 0;
                  uint64_t v239 = 0;
                  do
                  {
                    unint64_t v240 = v234 + 1;
                    *long long v3 = v234 + 1;
                    char v241 = *(unsigned char *)(v236 + v234);
                    v239 |= (unint64_t)(v241 & 0x7F) << v237;
                    if ((v241 & 0x80) == 0) {
                      goto LABEL_1019;
                    }
                    v237 += 7;
                    unint64_t v234 = v240;
                    BOOL v18 = v238++ > 8;
                  }
                  while (!v18);
LABEL_678:
                  LODWORD(v239) = 0;
                  goto LABEL_1019;
                }
                char v649 = 0;
                unsigned int v650 = 0;
                uint64_t v239 = 0;
                if (v235 <= v234) {
                  unint64_t v235 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v235 == v234)
                  {
                    LODWORD(v239) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v651 = v234 + 1;
                    char v652 = *(unsigned char *)(v236 + v234);
                    *long long v3 = v651;
                    v239 |= (unint64_t)(v652 & 0x7F) << v649;
                    if (v652 < 0)
                    {
                      v649 += 7;
                      unint64_t v234 = v651;
                      BOOL v18 = v650++ > 8;
                      if (v18) {
                        goto LABEL_678;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v239) = 0;
                    }
                  }
                  break;
                }
LABEL_1019:
                *((_DWORD *)this + 29) = v239;
                goto LABEL_920;
              case 409:
                *v11 |= 0x1000000000uLL;
                unint64_t v242 = *((void *)a2 + 1);
                unint64_t v243 = *((void *)a2 + 2);
                uint64_t v244 = *(void *)a2;
                if (v242 <= 0xFFFFFFFFFFFFFFF5 && v242 + 10 <= v243)
                {
                  char v245 = 0;
                  unsigned int v246 = 0;
                  uint64_t v247 = 0;
                  do
                  {
                    unint64_t v248 = v242 + 1;
                    *long long v3 = v242 + 1;
                    char v249 = *(unsigned char *)(v244 + v242);
                    v247 |= (unint64_t)(v249 & 0x7F) << v245;
                    if ((v249 & 0x80) == 0) {
                      goto LABEL_1022;
                    }
                    v245 += 7;
                    unint64_t v242 = v248;
                    BOOL v18 = v246++ > 8;
                  }
                  while (!v18);
LABEL_685:
                  LODWORD(v247) = 0;
                  goto LABEL_1022;
                }
                char v653 = 0;
                unsigned int v654 = 0;
                uint64_t v247 = 0;
                if (v243 <= v242) {
                  unint64_t v243 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v243 == v242)
                  {
                    LODWORD(v247) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v655 = v242 + 1;
                    char v656 = *(unsigned char *)(v244 + v242);
                    *long long v3 = v655;
                    v247 |= (unint64_t)(v656 & 0x7F) << v653;
                    if (v656 < 0)
                    {
                      v653 += 7;
                      unint64_t v242 = v655;
                      BOOL v18 = v654++ > 8;
                      if (v18) {
                        goto LABEL_685;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v247) = 0;
                    }
                  }
                  break;
                }
LABEL_1022:
                *((_DWORD *)this + 46) = v247;
                goto LABEL_920;
              default:
                switch((int)v25)
                {
                  case 501:
                    *v11 |= 0x4000000000000000uLL;
                    unint64_t v61 = *v3;
                    if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)a2 + 2)) {
                      goto LABEL_512;
                    }
                    *((_DWORD *)this + 72) = *(_DWORD *)(*(void *)a2 + v61);
                    goto LABEL_919;
                  case 502:
                    *v11 |= 0x8000000000000000;
                    unint64_t v430 = *v3;
                    if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v430 + 4 > *((void *)a2 + 2)) {
                      goto LABEL_512;
                    }
                    *((_DWORD *)this + 73) = *(_DWORD *)(*(void *)a2 + v430);
                    goto LABEL_919;
                  case 503:
                    *v11 |= 0x200000000000000uLL;
                    unint64_t v431 = *v3;
                    if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v431 + 4 > *((void *)a2 + 2)) {
                      goto LABEL_512;
                    }
                    *((_DWORD *)this + 67) = *(_DWORD *)(*(void *)a2 + v431);
                    goto LABEL_919;
                  case 504:
                    *v11 |= 0x800000000000000uLL;
                    unint64_t v432 = *((void *)a2 + 1);
                    unint64_t v433 = *((void *)a2 + 2);
                    uint64_t v434 = *(void *)a2;
                    if (v432 <= 0xFFFFFFFFFFFFFFF5 && v432 + 10 <= v433)
                    {
                      char v435 = 0;
                      unsigned int v436 = 0;
                      uint64_t v437 = 0;
                      do
                      {
                        unint64_t v438 = v432 + 1;
                        *long long v3 = v432 + 1;
                        char v439 = *(unsigned char *)(v434 + v432);
                        v437 |= (unint64_t)(v439 & 0x7F) << v435;
                        if ((v439 & 0x80) == 0) {
                          goto LABEL_1046;
                        }
                        v435 += 7;
                        unint64_t v432 = v438;
                        BOOL v18 = v436++ > 8;
                      }
                      while (!v18);
LABEL_801:
                      LODWORD(v437) = 0;
                      goto LABEL_1046;
                    }
                    char v685 = 0;
                    unsigned int v686 = 0;
                    uint64_t v437 = 0;
                    if (v433 <= v432) {
                      unint64_t v433 = *((void *)a2 + 1);
                    }
                    while (2)
                    {
                      if (v433 == v432)
                      {
                        LODWORD(v437) = 0;
                        *int v5 = 1;
                      }
                      else
                      {
                        unint64_t v687 = v432 + 1;
                        char v688 = *(unsigned char *)(v434 + v432);
                        *long long v3 = v687;
                        v437 |= (unint64_t)(v688 & 0x7F) << v685;
                        if (v688 < 0)
                        {
                          v685 += 7;
                          unint64_t v432 = v687;
                          BOOL v18 = v686++ > 8;
                          if (v18) {
                            goto LABEL_801;
                          }
                          continue;
                        }
                        if (*v5) {
                          LODWORD(v437) = 0;
                        }
                      }
                      break;
                    }
LABEL_1046:
                    *((_DWORD *)this + 69) = v437;
                    goto LABEL_920;
                  case 505:
                    *v11 |= 0x2000000000000000uLL;
                    unint64_t v440 = *((void *)a2 + 1);
                    unint64_t v441 = *((void *)a2 + 2);
                    uint64_t v442 = *(void *)a2;
                    if (v440 <= 0xFFFFFFFFFFFFFFF5 && v440 + 10 <= v441)
                    {
                      char v443 = 0;
                      unsigned int v444 = 0;
                      uint64_t v445 = 0;
                      do
                      {
                        unint64_t v446 = v440 + 1;
                        *long long v3 = v440 + 1;
                        char v447 = *(unsigned char *)(v442 + v440);
                        v445 |= (unint64_t)(v447 & 0x7F) << v443;
                        if ((v447 & 0x80) == 0) {
                          goto LABEL_1049;
                        }
                        v443 += 7;
                        unint64_t v440 = v446;
                        BOOL v18 = v444++ > 8;
                      }
                      while (!v18);
LABEL_808:
                      LODWORD(v445) = 0;
                      goto LABEL_1049;
                    }
                    char v689 = 0;
                    unsigned int v690 = 0;
                    uint64_t v445 = 0;
                    if (v441 <= v440) {
                      unint64_t v441 = *((void *)a2 + 1);
                    }
                    break;
                  default:
                    goto LABEL_140;
                }
                break;
            }
            while (1)
            {
              if (v441 == v440)
              {
                LODWORD(v445) = 0;
                *int v5 = 1;
                goto LABEL_1049;
              }
              unint64_t v691 = v440 + 1;
              char v692 = *(unsigned char *)(v442 + v440);
              *long long v3 = v691;
              v445 |= (unint64_t)(v692 & 0x7F) << v689;
              if ((v692 & 0x80) == 0) {
                break;
              }
              v689 += 7;
              unint64_t v440 = v691;
              BOOL v18 = v690++ > 8;
              if (v18) {
                goto LABEL_808;
              }
            }
            if (*v5) {
              LODWORD(v445) = 0;
            }
LABEL_1049:
            *((_DWORD *)this + 71) = v445;
          }
        }
        else if ((int)v25 <= 1200)
        {
          if ((int)v25 <= 1100)
          {
            switch(v25)
            {
              case 0x385:
                *v11 |= 0x100uLL;
                unint64_t v115 = *v3;
                if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)a2 + 2))
                {
LABEL_512:
                  *int v5 = 1;
                }
                else
                {
                  *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v115);
LABEL_919:
                  *((void *)a2 + 1) += 4;
                }
                break;
              case 0x386:
                v11[1] |= 0x200000uLL;
                unint64_t v116 = *((void *)a2 + 1);
                if (v116 >= *((void *)a2 + 2))
                {
                  BOOL v119 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v117 = v116 + 1;
                  int v118 = *(unsigned __int8 *)(*(void *)a2 + v116);
                  *((void *)a2 + 1) = v117;
                  BOOL v119 = v118 != 0;
                }
                *((unsigned char *)this + 332) = v119;
                break;
              case 0x3E9:
                v11[1] |= 4uLL;
                unint64_t v62 = *((void *)a2 + 1);
                unint64_t v63 = *((void *)a2 + 2);
                uint64_t v64 = *(void *)a2;
                if (v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v63)
                {
                  char v573 = 0;
                  unsigned int v574 = 0;
                  uint64_t v67 = 0;
                  if (v63 <= v62) {
                    unint64_t v63 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v63 == v62)
                    {
                      LODWORD(v67) = 0;
                      *int v5 = 1;
                      goto LABEL_935;
                    }
                    unint64_t v575 = v62 + 1;
                    char v576 = *(unsigned char *)(v64 + v62);
                    *long long v3 = v575;
                    v67 |= (unint64_t)(v576 & 0x7F) << v573;
                    if ((v576 & 0x80) == 0) {
                      break;
                    }
                    v573 += 7;
                    unint64_t v62 = v575;
                    BOOL v18 = v574++ > 8;
                    if (v18)
                    {
LABEL_533:
                      LODWORD(v67) = 0;
                      goto LABEL_935;
                    }
                  }
                  if (*v5) {
                    LODWORD(v67) = 0;
                  }
                }
                else
                {
                  char v65 = 0;
                  unsigned int v66 = 0;
                  uint64_t v67 = 0;
                  while (1)
                  {
                    unint64_t v68 = v62 + 1;
                    *long long v3 = v62 + 1;
                    char v69 = *(unsigned char *)(v64 + v62);
                    v67 |= (unint64_t)(v69 & 0x7F) << v65;
                    if ((v69 & 0x80) == 0) {
                      break;
                    }
                    v65 += 7;
                    unint64_t v62 = v68;
                    BOOL v18 = v66++ > 8;
                    if (v18) {
                      goto LABEL_533;
                    }
                  }
                }
LABEL_935:
                *((_DWORD *)this + 76) = v67;
                break;
              default:
LABEL_140:
                uint64_t result = PB::Reader::skip(a2, v25, v23, 0);
                if (!result) {
                  return result;
                }
                break;
            }
          }
          else
          {
            switch((int)v25)
            {
              case 1101:
                *v11 |= 0x10000000uLL;
                unint64_t v52 = *((void *)a2 + 1);
                unint64_t v53 = *((void *)a2 + 2);
                uint64_t v54 = *(void *)a2;
                if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
                {
                  char v55 = 0;
                  unsigned int v56 = 0;
                  uint64_t v57 = 0;
                  do
                  {
                    unint64_t v58 = v52 + 1;
                    *long long v3 = v52 + 1;
                    char v59 = *(unsigned char *)(v54 + v52);
                    v57 |= (unint64_t)(v59 & 0x7F) << v55;
                    if ((v59 & 0x80) == 0) {
                      goto LABEL_932;
                    }
                    v55 += 7;
                    unint64_t v52 = v58;
                    BOOL v18 = v56++ > 8;
                  }
                  while (!v18);
LABEL_526:
                  LODWORD(v57) = 0;
                  goto LABEL_932;
                }
                char v569 = 0;
                unsigned int v570 = 0;
                uint64_t v57 = 0;
                if (v53 <= v52) {
                  unint64_t v53 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v53 == v52)
                  {
                    LODWORD(v57) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v571 = v52 + 1;
                    char v572 = *(unsigned char *)(v54 + v52);
                    *long long v3 = v571;
                    v57 |= (unint64_t)(v572 & 0x7F) << v569;
                    if (v572 < 0)
                    {
                      v569 += 7;
                      unint64_t v52 = v571;
                      BOOL v18 = v570++ > 8;
                      if (v18) {
                        goto LABEL_526;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v57) = 0;
                    }
                  }
                  break;
                }
LABEL_932:
                *((_DWORD *)this + 38) = v57;
                goto LABEL_920;
              case 1102:
                *v11 |= 0x40000000uLL;
                unint64_t v86 = *((void *)a2 + 1);
                unint64_t v87 = *((void *)a2 + 2);
                uint64_t v88 = *(void *)a2;
                if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
                {
                  char v89 = 0;
                  unsigned int v90 = 0;
                  uint64_t v91 = 0;
                  do
                  {
                    unint64_t v92 = v86 + 1;
                    *long long v3 = v86 + 1;
                    char v93 = *(unsigned char *)(v88 + v86);
                    v91 |= (unint64_t)(v93 & 0x7F) << v89;
                    if ((v93 & 0x80) == 0) {
                      goto LABEL_938;
                    }
                    v89 += 7;
                    unint64_t v86 = v92;
                    BOOL v18 = v90++ > 8;
                  }
                  while (!v18);
LABEL_540:
                  LODWORD(v91) = 0;
                  goto LABEL_938;
                }
                char v577 = 0;
                unsigned int v578 = 0;
                uint64_t v91 = 0;
                if (v87 <= v86) {
                  unint64_t v87 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v87 == v86)
                  {
                    LODWORD(v91) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v579 = v86 + 1;
                    char v580 = *(unsigned char *)(v88 + v86);
                    *long long v3 = v579;
                    v91 |= (unint64_t)(v580 & 0x7F) << v577;
                    if (v580 < 0)
                    {
                      v577 += 7;
                      unint64_t v86 = v579;
                      BOOL v18 = v578++ > 8;
                      if (v18) {
                        goto LABEL_540;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v91) = 0;
                    }
                  }
                  break;
                }
LABEL_938:
                *((_DWORD *)this + 40) = v91;
                goto LABEL_920;
              case 1103:
                v11[1] |= 0x1000000000uLL;
                unint64_t v94 = *((void *)a2 + 1);
                if (v94 >= *((void *)a2 + 2))
                {
                  BOOL v97 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v95 = v94 + 1;
                  int v96 = *(unsigned __int8 *)(*(void *)a2 + v94);
                  *((void *)a2 + 1) = v95;
                  BOOL v97 = v96 != 0;
                }
                *((unsigned char *)this + 347) = v97;
                goto LABEL_920;
              case 1104:
                *v11 |= 0x80000000uLL;
                unint64_t v98 = *((void *)a2 + 1);
                unint64_t v99 = *((void *)a2 + 2);
                uint64_t v100 = *(void *)a2;
                if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
                {
                  char v101 = 0;
                  unsigned int v102 = 0;
                  uint64_t v103 = 0;
                  do
                  {
                    unint64_t v104 = v98 + 1;
                    *long long v3 = v98 + 1;
                    char v105 = *(unsigned char *)(v100 + v98);
                    v103 |= (unint64_t)(v105 & 0x7F) << v101;
                    if ((v105 & 0x80) == 0) {
                      goto LABEL_941;
                    }
                    v101 += 7;
                    unint64_t v98 = v104;
                    BOOL v18 = v102++ > 8;
                  }
                  while (!v18);
LABEL_549:
                  LODWORD(v103) = 0;
                  goto LABEL_941;
                }
                char v581 = 0;
                unsigned int v582 = 0;
                uint64_t v103 = 0;
                if (v99 <= v98) {
                  unint64_t v99 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v99 == v98)
                  {
                    LODWORD(v103) = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v583 = v98 + 1;
                    char v584 = *(unsigned char *)(v100 + v98);
                    *long long v3 = v583;
                    v103 |= (unint64_t)(v584 & 0x7F) << v581;
                    if (v584 < 0)
                    {
                      v581 += 7;
                      unint64_t v98 = v583;
                      BOOL v18 = v582++ > 8;
                      if (v18) {
                        goto LABEL_549;
                      }
                      continue;
                    }
                    if (*v5) {
                      LODWORD(v103) = 0;
                    }
                  }
                  break;
                }
LABEL_941:
                *((_DWORD *)this + 41) = v103;
                goto LABEL_920;
              case 1105:
                *v11 |= 0x20000000uLL;
                unint64_t v106 = *((void *)a2 + 1);
                unint64_t v107 = *((void *)a2 + 2);
                uint64_t v108 = *(void *)a2;
                if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
                {
                  char v109 = 0;
                  unsigned int v110 = 0;
                  uint64_t v111 = 0;
                  do
                  {
                    unint64_t v112 = v106 + 1;
                    *long long v3 = v106 + 1;
                    char v113 = *(unsigned char *)(v108 + v106);
                    v111 |= (unint64_t)(v113 & 0x7F) << v109;
                    if ((v113 & 0x80) == 0) {
                      goto LABEL_944;
                    }
                    v109 += 7;
                    unint64_t v106 = v112;
                    BOOL v18 = v110++ > 8;
                  }
                  while (!v18);
LABEL_556:
                  LODWORD(v111) = 0;
                  goto LABEL_944;
                }
                char v585 = 0;
                unsigned int v586 = 0;
                uint64_t v111 = 0;
                if (v107 <= v106) {
                  unint64_t v107 = *((void *)a2 + 1);
                }
                break;
              case 1106:
                *v11 |= 0x8000000000000uLL;
                unint64_t v114 = *v3;
                if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)a2 + 2)) {
                  goto LABEL_512;
                }
                *((_DWORD *)this + 61) = *(_DWORD *)(*(void *)a2 + v114);
                goto LABEL_919;
              default:
                goto LABEL_140;
            }
            while (1)
            {
              if (v107 == v106)
              {
                LODWORD(v111) = 0;
                *int v5 = 1;
                goto LABEL_944;
              }
              unint64_t v587 = v106 + 1;
              char v588 = *(unsigned char *)(v108 + v106);
              *long long v3 = v587;
              v111 |= (unint64_t)(v588 & 0x7F) << v585;
              if ((v588 & 0x80) == 0) {
                break;
              }
              v585 += 7;
              unint64_t v106 = v587;
              BOOL v18 = v586++ > 8;
              if (v18) {
                goto LABEL_556;
              }
            }
            if (*v5) {
              LODWORD(v111) = 0;
            }
LABEL_944:
            *((_DWORD *)this + 39) = v111;
          }
        }
        else
        {
          switch((int)v25)
          {
            case 1301:
              *v11 |= 0x8000uLL;
              unint64_t v27 = *v3;
              if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)a2 + 2)) {
                goto LABEL_512;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v27);
              goto LABEL_919;
            case 1302:
              *v11 |= 0x40000000000uLL;
              unint64_t v456 = *((void *)a2 + 1);
              unint64_t v457 = *((void *)a2 + 2);
              uint64_t v458 = *(void *)a2;
              if (v456 <= 0xFFFFFFFFFFFFFFF5 && v456 + 10 <= v457)
              {
                char v459 = 0;
                unsigned int v460 = 0;
                uint64_t v461 = 0;
                do
                {
                  unint64_t v462 = v456 + 1;
                  *long long v3 = v456 + 1;
                  char v463 = *(unsigned char *)(v458 + v456);
                  v461 |= (unint64_t)(v463 & 0x7F) << v459;
                  if ((v463 & 0x80) == 0) {
                    goto LABEL_1060;
                  }
                  v459 += 7;
                  unint64_t v456 = v462;
                  BOOL v18 = v460++ > 8;
                }
                while (!v18);
LABEL_829:
                LODWORD(v461) = 0;
                goto LABEL_1060;
              }
              char v701 = 0;
              unsigned int v702 = 0;
              uint64_t v461 = 0;
              if (v457 <= v456) {
                unint64_t v457 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v457 == v456)
                {
                  LODWORD(v461) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v703 = v456 + 1;
                  char v704 = *(unsigned char *)(v458 + v456);
                  *long long v3 = v703;
                  v461 |= (unint64_t)(v704 & 0x7F) << v701;
                  if (v704 < 0)
                  {
                    v701 += 7;
                    unint64_t v456 = v703;
                    BOOL v18 = v702++ > 8;
                    if (v18) {
                      goto LABEL_829;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v461) = 0;
                  }
                }
                break;
              }
LABEL_1060:
              *((_DWORD *)this + 52) = v461;
              break;
            case 1303:
              *v11 |= 0x10000000000uLL;
              unint64_t v464 = *((void *)a2 + 1);
              unint64_t v465 = *((void *)a2 + 2);
              uint64_t v466 = *(void *)a2;
              if (v464 <= 0xFFFFFFFFFFFFFFF5 && v464 + 10 <= v465)
              {
                char v467 = 0;
                unsigned int v468 = 0;
                uint64_t v469 = 0;
                do
                {
                  unint64_t v470 = v464 + 1;
                  *long long v3 = v464 + 1;
                  char v471 = *(unsigned char *)(v466 + v464);
                  v469 |= (unint64_t)(v471 & 0x7F) << v467;
                  if ((v471 & 0x80) == 0) {
                    goto LABEL_1064;
                  }
                  v467 += 7;
                  unint64_t v464 = v470;
                  BOOL v18 = v468++ > 8;
                }
                while (!v18);
LABEL_836:
                LODWORD(v469) = 0;
                goto LABEL_1064;
              }
              char v705 = 0;
              unsigned int v706 = 0;
              uint64_t v469 = 0;
              if (v465 <= v464) {
                unint64_t v465 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v465 == v464)
                {
                  LODWORD(v469) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v707 = v464 + 1;
                  char v708 = *(unsigned char *)(v466 + v464);
                  *long long v3 = v707;
                  v469 |= (unint64_t)(v708 & 0x7F) << v705;
                  if (v708 < 0)
                  {
                    v705 += 7;
                    unint64_t v464 = v707;
                    BOOL v18 = v706++ > 8;
                    if (v18) {
                      goto LABEL_836;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v469) = 0;
                  }
                }
                break;
              }
LABEL_1064:
              *((_DWORD *)this + 50) = v469;
              break;
            case 1304:
              *v11 |= 0x800000000uLL;
              unint64_t v472 = *((void *)a2 + 1);
              unint64_t v473 = *((void *)a2 + 2);
              uint64_t v474 = *(void *)a2;
              if (v472 <= 0xFFFFFFFFFFFFFFF5 && v472 + 10 <= v473)
              {
                char v475 = 0;
                unsigned int v476 = 0;
                uint64_t v477 = 0;
                do
                {
                  unint64_t v478 = v472 + 1;
                  *long long v3 = v472 + 1;
                  char v479 = *(unsigned char *)(v474 + v472);
                  v477 |= (unint64_t)(v479 & 0x7F) << v475;
                  if ((v479 & 0x80) == 0) {
                    goto LABEL_1068;
                  }
                  v475 += 7;
                  unint64_t v472 = v478;
                  BOOL v18 = v476++ > 8;
                }
                while (!v18);
LABEL_843:
                LODWORD(v477) = 0;
                goto LABEL_1068;
              }
              char v709 = 0;
              unsigned int v710 = 0;
              uint64_t v477 = 0;
              if (v473 <= v472) {
                unint64_t v473 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v473 == v472)
                {
                  LODWORD(v477) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v711 = v472 + 1;
                  char v712 = *(unsigned char *)(v474 + v472);
                  *long long v3 = v711;
                  v477 |= (unint64_t)(v712 & 0x7F) << v709;
                  if (v712 < 0)
                  {
                    v709 += 7;
                    unint64_t v472 = v711;
                    BOOL v18 = v710++ > 8;
                    if (v18) {
                      goto LABEL_843;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v477) = 0;
                  }
                }
                break;
              }
LABEL_1068:
              *((_DWORD *)this + 45) = v477;
              break;
            case 1305:
              *v11 |= (unint64_t)&_mh_execute_header;
              unint64_t v480 = *((void *)a2 + 1);
              unint64_t v481 = *((void *)a2 + 2);
              uint64_t v482 = *(void *)a2;
              if (v480 <= 0xFFFFFFFFFFFFFFF5 && v480 + 10 <= v481)
              {
                char v483 = 0;
                unsigned int v484 = 0;
                uint64_t v485 = 0;
                do
                {
                  unint64_t v486 = v480 + 1;
                  *long long v3 = v480 + 1;
                  char v487 = *(unsigned char *)(v482 + v480);
                  v485 |= (unint64_t)(v487 & 0x7F) << v483;
                  if ((v487 & 0x80) == 0) {
                    goto LABEL_1072;
                  }
                  v483 += 7;
                  unint64_t v480 = v486;
                  BOOL v18 = v484++ > 8;
                }
                while (!v18);
LABEL_850:
                LODWORD(v485) = 0;
                goto LABEL_1072;
              }
              char v713 = 0;
              unsigned int v714 = 0;
              uint64_t v485 = 0;
              if (v481 <= v480) {
                unint64_t v481 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v481 == v480)
                {
                  LODWORD(v485) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v715 = v480 + 1;
                  char v716 = *(unsigned char *)(v482 + v480);
                  *long long v3 = v715;
                  v485 |= (unint64_t)(v716 & 0x7F) << v713;
                  if (v716 < 0)
                  {
                    v713 += 7;
                    unint64_t v480 = v715;
                    BOOL v18 = v714++ > 8;
                    if (v18) {
                      goto LABEL_850;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v485) = 0;
                  }
                }
                break;
              }
LABEL_1072:
              *((_DWORD *)this + 42) = v485;
              break;
            case 1306:
              *v11 |= 0x400000000uLL;
              unint64_t v488 = *((void *)a2 + 1);
              unint64_t v489 = *((void *)a2 + 2);
              uint64_t v490 = *(void *)a2;
              if (v488 <= 0xFFFFFFFFFFFFFFF5 && v488 + 10 <= v489)
              {
                char v491 = 0;
                unsigned int v492 = 0;
                uint64_t v493 = 0;
                do
                {
                  unint64_t v494 = v488 + 1;
                  *long long v3 = v488 + 1;
                  char v495 = *(unsigned char *)(v490 + v488);
                  v493 |= (unint64_t)(v495 & 0x7F) << v491;
                  if ((v495 & 0x80) == 0) {
                    goto LABEL_1076;
                  }
                  v491 += 7;
                  unint64_t v488 = v494;
                  BOOL v18 = v492++ > 8;
                }
                while (!v18);
LABEL_857:
                LODWORD(v493) = 0;
                goto LABEL_1076;
              }
              char v717 = 0;
              unsigned int v718 = 0;
              uint64_t v493 = 0;
              if (v489 <= v488) {
                unint64_t v489 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v489 == v488)
                {
                  LODWORD(v493) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v719 = v488 + 1;
                  char v720 = *(unsigned char *)(v490 + v488);
                  *long long v3 = v719;
                  v493 |= (unint64_t)(v720 & 0x7F) << v717;
                  if (v720 < 0)
                  {
                    v717 += 7;
                    unint64_t v488 = v719;
                    BOOL v18 = v718++ > 8;
                    if (v18) {
                      goto LABEL_857;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v493) = 0;
                  }
                }
                break;
              }
LABEL_1076:
              *((_DWORD *)this + 44) = v493;
              break;
            case 1307:
              v11[1] |= 0x100uLL;
              unint64_t v496 = *((void *)a2 + 1);
              if (v496 >= *((void *)a2 + 2))
              {
                BOOL v499 = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v497 = v496 + 1;
                int v498 = *(unsigned __int8 *)(*(void *)a2 + v496);
                *((void *)a2 + 1) = v497;
                BOOL v499 = v498 != 0;
              }
              *((unsigned char *)this + 319) = v499;
              break;
            case 1308:
              v11[1] |= 0x40000uLL;
              unint64_t v500 = *((void *)a2 + 1);
              if (v500 >= *((void *)a2 + 2))
              {
                BOOL v503 = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v501 = v500 + 1;
                int v502 = *(unsigned __int8 *)(*(void *)a2 + v500);
                *((void *)a2 + 1) = v501;
                BOOL v503 = v502 != 0;
              }
              *((unsigned char *)this + 329) = v503;
              break;
            case 1309:
              *v11 |= 0x200000000uLL;
              unint64_t v504 = *((void *)a2 + 1);
              unint64_t v505 = *((void *)a2 + 2);
              uint64_t v506 = *(void *)a2;
              if (v504 <= 0xFFFFFFFFFFFFFFF5 && v504 + 10 <= v505)
              {
                char v507 = 0;
                unsigned int v508 = 0;
                uint64_t v509 = 0;
                do
                {
                  unint64_t v510 = v504 + 1;
                  *long long v3 = v504 + 1;
                  char v511 = *(unsigned char *)(v506 + v504);
                  v509 |= (unint64_t)(v511 & 0x7F) << v507;
                  if ((v511 & 0x80) == 0) {
                    goto LABEL_1080;
                  }
                  v507 += 7;
                  unint64_t v504 = v510;
                  BOOL v18 = v508++ > 8;
                }
                while (!v18);
LABEL_868:
                LODWORD(v509) = 0;
                goto LABEL_1080;
              }
              char v721 = 0;
              unsigned int v722 = 0;
              uint64_t v509 = 0;
              if (v505 <= v504) {
                unint64_t v505 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v505 == v504)
                {
                  LODWORD(v509) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v723 = v504 + 1;
                  char v724 = *(unsigned char *)(v506 + v504);
                  *long long v3 = v723;
                  v509 |= (unint64_t)(v724 & 0x7F) << v721;
                  if (v724 < 0)
                  {
                    v721 += 7;
                    unint64_t v504 = v723;
                    BOOL v18 = v722++ > 8;
                    if (v18) {
                      goto LABEL_868;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v509) = 0;
                  }
                }
                break;
              }
LABEL_1080:
              *((_DWORD *)this + 43) = v509;
              break;
            case 1310:
              *v11 |= 2uLL;
              unint64_t v512 = *((void *)a2 + 1);
              unint64_t v513 = *((void *)a2 + 2);
              uint64_t v514 = *(void *)a2;
              if (v512 <= 0xFFFFFFFFFFFFFFF5 && v512 + 10 <= v513)
              {
                char v515 = 0;
                unsigned int v516 = 0;
                uint64_t v517 = 0;
                do
                {
                  unint64_t v518 = v512 + 1;
                  *long long v3 = v512 + 1;
                  char v519 = *(unsigned char *)(v514 + v512);
                  v517 |= (unint64_t)(v519 & 0x7F) << v515;
                  if ((v519 & 0x80) == 0) {
                    goto LABEL_1084;
                  }
                  v515 += 7;
                  unint64_t v512 = v518;
                  BOOL v18 = v516++ > 8;
                }
                while (!v18);
LABEL_875:
                uint64_t v517 = 0;
                goto LABEL_1084;
              }
              char v725 = 0;
              unsigned int v726 = 0;
              uint64_t v517 = 0;
              if (v513 <= v512) {
                unint64_t v513 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v513 == v512)
                {
                  uint64_t v517 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v727 = v512 + 1;
                  char v728 = *(unsigned char *)(v514 + v512);
                  *long long v3 = v727;
                  v517 |= (unint64_t)(v728 & 0x7F) << v725;
                  if (v728 < 0)
                  {
                    v725 += 7;
                    unint64_t v512 = v727;
                    BOOL v18 = v726++ > 8;
                    if (v18) {
                      goto LABEL_875;
                    }
                    continue;
                  }
                  if (*v5) {
                    uint64_t v517 = 0;
                  }
                }
                break;
              }
LABEL_1084:
              *((void *)this + 2) = v517;
              break;
            case 1311:
              *v11 |= 0x20uLL;
              unint64_t v520 = *((void *)a2 + 1);
              unint64_t v521 = *((void *)a2 + 2);
              uint64_t v522 = *(void *)a2;
              if (v520 <= 0xFFFFFFFFFFFFFFF5 && v520 + 10 <= v521)
              {
                char v523 = 0;
                unsigned int v524 = 0;
                uint64_t v525 = 0;
                do
                {
                  unint64_t v526 = v520 + 1;
                  *long long v3 = v520 + 1;
                  char v527 = *(unsigned char *)(v522 + v520);
                  v525 |= (unint64_t)(v527 & 0x7F) << v523;
                  if ((v527 & 0x80) == 0) {
                    goto LABEL_1088;
                  }
                  v523 += 7;
                  unint64_t v520 = v526;
                  BOOL v18 = v524++ > 8;
                }
                while (!v18);
LABEL_882:
                uint64_t v525 = 0;
                goto LABEL_1088;
              }
              char v729 = 0;
              unsigned int v730 = 0;
              uint64_t v525 = 0;
              if (v521 <= v520) {
                unint64_t v521 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v521 == v520)
                {
                  uint64_t v525 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v731 = v520 + 1;
                  char v732 = *(unsigned char *)(v522 + v520);
                  *long long v3 = v731;
                  v525 |= (unint64_t)(v732 & 0x7F) << v729;
                  if (v732 < 0)
                  {
                    v729 += 7;
                    unint64_t v520 = v731;
                    BOOL v18 = v730++ > 8;
                    if (v18) {
                      goto LABEL_882;
                    }
                    continue;
                  }
                  if (*v5) {
                    uint64_t v525 = 0;
                  }
                }
                break;
              }
LABEL_1088:
              *((void *)this + 6) = v525;
              break;
            case 1312:
              *v11 |= 4uLL;
              unint64_t v528 = *((void *)a2 + 1);
              unint64_t v529 = *((void *)a2 + 2);
              uint64_t v530 = *(void *)a2;
              if (v528 <= 0xFFFFFFFFFFFFFFF5 && v528 + 10 <= v529)
              {
                char v531 = 0;
                unsigned int v532 = 0;
                uint64_t v533 = 0;
                do
                {
                  unint64_t v534 = v528 + 1;
                  *long long v3 = v528 + 1;
                  char v535 = *(unsigned char *)(v530 + v528);
                  v533 |= (unint64_t)(v535 & 0x7F) << v531;
                  if ((v535 & 0x80) == 0) {
                    goto LABEL_1092;
                  }
                  v531 += 7;
                  unint64_t v528 = v534;
                  BOOL v18 = v532++ > 8;
                }
                while (!v18);
LABEL_889:
                uint64_t v533 = 0;
                goto LABEL_1092;
              }
              char v733 = 0;
              unsigned int v734 = 0;
              uint64_t v533 = 0;
              if (v529 <= v528) {
                unint64_t v529 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v529 == v528)
                {
                  uint64_t v533 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v735 = v528 + 1;
                  char v736 = *(unsigned char *)(v530 + v528);
                  *long long v3 = v735;
                  v533 |= (unint64_t)(v736 & 0x7F) << v733;
                  if (v736 < 0)
                  {
                    v733 += 7;
                    unint64_t v528 = v735;
                    BOOL v18 = v734++ > 8;
                    if (v18) {
                      goto LABEL_889;
                    }
                    continue;
                  }
                  if (*v5) {
                    uint64_t v533 = 0;
                  }
                }
                break;
              }
LABEL_1092:
              *((void *)this + 3) = v533;
              break;
            case 1313:
              *v11 |= 8uLL;
              unint64_t v536 = *((void *)a2 + 1);
              unint64_t v537 = *((void *)a2 + 2);
              uint64_t v538 = *(void *)a2;
              if (v536 <= 0xFFFFFFFFFFFFFFF5 && v536 + 10 <= v537)
              {
                char v539 = 0;
                unsigned int v540 = 0;
                uint64_t v541 = 0;
                do
                {
                  unint64_t v542 = v536 + 1;
                  *long long v3 = v536 + 1;
                  char v543 = *(unsigned char *)(v538 + v536);
                  v541 |= (unint64_t)(v543 & 0x7F) << v539;
                  if ((v543 & 0x80) == 0) {
                    goto LABEL_1096;
                  }
                  v539 += 7;
                  unint64_t v536 = v542;
                  BOOL v18 = v540++ > 8;
                }
                while (!v18);
LABEL_896:
                uint64_t v541 = 0;
                goto LABEL_1096;
              }
              char v737 = 0;
              unsigned int v738 = 0;
              uint64_t v541 = 0;
              if (v537 <= v536) {
                unint64_t v537 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v537 == v536)
                {
                  uint64_t v541 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v739 = v536 + 1;
                  char v740 = *(unsigned char *)(v538 + v536);
                  *long long v3 = v739;
                  v541 |= (unint64_t)(v740 & 0x7F) << v737;
                  if (v740 < 0)
                  {
                    v737 += 7;
                    unint64_t v536 = v739;
                    BOOL v18 = v738++ > 8;
                    if (v18) {
                      goto LABEL_896;
                    }
                    continue;
                  }
                  if (*v5) {
                    uint64_t v541 = 0;
                  }
                }
                break;
              }
LABEL_1096:
              *((void *)this + 4) = v541;
              break;
            case 1314:
              *v11 |= 0x10uLL;
              unint64_t v544 = *((void *)a2 + 1);
              unint64_t v545 = *((void *)a2 + 2);
              uint64_t v546 = *(void *)a2;
              if (v544 <= 0xFFFFFFFFFFFFFFF5 && v544 + 10 <= v545)
              {
                char v547 = 0;
                unsigned int v548 = 0;
                uint64_t v549 = 0;
                do
                {
                  unint64_t v550 = v544 + 1;
                  *long long v3 = v544 + 1;
                  char v551 = *(unsigned char *)(v546 + v544);
                  v549 |= (unint64_t)(v551 & 0x7F) << v547;
                  if ((v551 & 0x80) == 0) {
                    goto LABEL_1100;
                  }
                  v547 += 7;
                  unint64_t v544 = v550;
                  BOOL v18 = v548++ > 8;
                }
                while (!v18);
LABEL_903:
                uint64_t v549 = 0;
                goto LABEL_1100;
              }
              char v741 = 0;
              unsigned int v742 = 0;
              uint64_t v549 = 0;
              if (v545 <= v544) {
                unint64_t v545 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v545 == v544)
                {
                  uint64_t v549 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v743 = v544 + 1;
                  char v744 = *(unsigned char *)(v546 + v544);
                  *long long v3 = v743;
                  v549 |= (unint64_t)(v744 & 0x7F) << v741;
                  if (v744 < 0)
                  {
                    v741 += 7;
                    unint64_t v544 = v743;
                    BOOL v18 = v742++ > 8;
                    if (v18) {
                      goto LABEL_903;
                    }
                    continue;
                  }
                  if (*v5) {
                    uint64_t v549 = 0;
                  }
                }
                break;
              }
LABEL_1100:
              *((void *)this + 5) = v549;
              break;
            case 1315:
              *v11 |= 0x2000000000000uLL;
              unint64_t v552 = *((void *)a2 + 1);
              unint64_t v553 = *((void *)a2 + 2);
              uint64_t v554 = *(void *)a2;
              if (v552 <= 0xFFFFFFFFFFFFFFF5 && v552 + 10 <= v553)
              {
                char v555 = 0;
                unsigned int v556 = 0;
                uint64_t v557 = 0;
                do
                {
                  unint64_t v558 = v552 + 1;
                  *long long v3 = v552 + 1;
                  char v559 = *(unsigned char *)(v554 + v552);
                  v557 |= (unint64_t)(v559 & 0x7F) << v555;
                  if ((v559 & 0x80) == 0) {
                    goto LABEL_1104;
                  }
                  v555 += 7;
                  unint64_t v552 = v558;
                  BOOL v18 = v556++ > 8;
                }
                while (!v18);
LABEL_910:
                LODWORD(v557) = 0;
                goto LABEL_1104;
              }
              char v745 = 0;
              unsigned int v746 = 0;
              uint64_t v557 = 0;
              if (v553 <= v552) {
                unint64_t v553 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v553 == v552)
                {
                  LODWORD(v557) = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v747 = v552 + 1;
                  char v748 = *(unsigned char *)(v554 + v552);
                  *long long v3 = v747;
                  v557 |= (unint64_t)(v748 & 0x7F) << v745;
                  if (v748 < 0)
                  {
                    v745 += 7;
                    unint64_t v552 = v747;
                    BOOL v18 = v746++ > 8;
                    if (v18) {
                      goto LABEL_910;
                    }
                    continue;
                  }
                  if (*v5) {
                    LODWORD(v557) = 0;
                  }
                }
                break;
              }
LABEL_1104:
              *((_DWORD *)this + 59) = v557;
              break;
            case 1316:
              *v11 |= 0x2000uLL;
              unint64_t v560 = *v3;
              if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v560 + 4 > *((void *)a2 + 2)) {
                goto LABEL_512;
              }
              *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v560);
              goto LABEL_919;
            default:
              if (v25 == 1201)
              {
                *v11 |= 0x4000000000uLL;
                unint64_t v561 = *((void *)a2 + 1);
                unint64_t v562 = *((void *)a2 + 2);
                uint64_t v563 = *(void *)a2;
                if (v561 > 0xFFFFFFFFFFFFFFF5 || v561 + 10 > v562)
                {
                  char v749 = 0;
                  unsigned int v750 = 0;
                  uint64_t v566 = 0;
                  if (v562 <= v561) {
                    unint64_t v562 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v562 == v561)
                    {
                      LODWORD(v566) = 0;
                      *int v5 = 1;
                      goto LABEL_1108;
                    }
                    unint64_t v751 = v561 + 1;
                    char v752 = *(unsigned char *)(v563 + v561);
                    *long long v3 = v751;
                    v566 |= (unint64_t)(v752 & 0x7F) << v749;
                    if ((v752 & 0x80) == 0) {
                      break;
                    }
                    v749 += 7;
                    unint64_t v561 = v751;
                    BOOL v18 = v750++ > 8;
                    if (v18)
                    {
LABEL_917:
                      LODWORD(v566) = 0;
                      goto LABEL_1108;
                    }
                  }
                  if (*v5) {
                    LODWORD(v566) = 0;
                  }
                }
                else
                {
                  char v564 = 0;
                  unsigned int v565 = 0;
                  uint64_t v566 = 0;
                  while (1)
                  {
                    unint64_t v567 = v561 + 1;
                    *long long v3 = v561 + 1;
                    char v568 = *(unsigned char *)(v563 + v561);
                    v566 |= (unint64_t)(v568 & 0x7F) << v564;
                    if ((v568 & 0x80) == 0) {
                      break;
                    }
                    v564 += 7;
                    unint64_t v561 = v567;
                    BOOL v18 = v565++ > 8;
                    if (v18) {
                      goto LABEL_917;
                    }
                  }
                }
LABEL_1108:
                *((_DWORD *)this + 48) = v566;
              }
              else
              {
                if (v25 != 1202) {
                  goto LABEL_140;
                }
                *v11 |= 0x8000000000uLL;
                unint64_t v78 = *((void *)a2 + 1);
                unint64_t v79 = *((void *)a2 + 2);
                uint64_t v80 = *(void *)a2;
                if (v78 > 0xFFFFFFFFFFFFFFF5 || v78 + 10 > v79)
                {
                  char v697 = 0;
                  unsigned int v698 = 0;
                  uint64_t v83 = 0;
                  if (v79 <= v78) {
                    unint64_t v79 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v79 == v78)
                    {
                      LODWORD(v83) = 0;
                      *int v5 = 1;
                      goto LABEL_1056;
                    }
                    unint64_t v699 = v78 + 1;
                    char v700 = *(unsigned char *)(v80 + v78);
                    *long long v3 = v699;
                    v83 |= (unint64_t)(v700 & 0x7F) << v697;
                    if ((v700 & 0x80) == 0) {
                      break;
                    }
                    v697 += 7;
                    unint64_t v78 = v699;
                    BOOL v18 = v698++ > 8;
                    if (v18)
                    {
LABEL_822:
                      LODWORD(v83) = 0;
                      goto LABEL_1056;
                    }
                  }
                  if (*v5) {
                    LODWORD(v83) = 0;
                  }
                }
                else
                {
                  char v81 = 0;
                  unsigned int v82 = 0;
                  uint64_t v83 = 0;
                  while (1)
                  {
                    unint64_t v84 = v78 + 1;
                    *long long v3 = v78 + 1;
                    char v85 = *(unsigned char *)(v80 + v78);
                    v83 |= (unint64_t)(v85 & 0x7F) << v81;
                    if ((v85 & 0x80) == 0) {
                      break;
                    }
                    v81 += 7;
                    unint64_t v78 = v84;
                    BOOL v18 = v82++ > 8;
                    if (v18) {
                      goto LABEL_822;
                    }
                  }
                }
LABEL_1056:
                *((_DWORD *)this + 49) = v83;
              }
              break;
          }
        }
      }
      else if ((v15 >> 3) <= 0x190)
      {
        switch((int)v25)
        {
          case 301:
            v11[1] |= 0x2000uLL;
            unint64_t v36 = *((void *)a2 + 1);
            if (v36 >= *((void *)a2 + 2))
            {
              BOOL v39 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v37 = v36 + 1;
              int v38 = *(unsigned __int8 *)(*(void *)a2 + v36);
              *((void *)a2 + 1) = v37;
              BOOL v39 = v38 != 0;
            }
            *((unsigned char *)this + 324) = v39;
            goto LABEL_920;
          case 302:
            v11[1] |= 0x4000000uLL;
            unint64_t v250 = *((void *)a2 + 1);
            if (v250 >= *((void *)a2 + 2))
            {
              BOOL v253 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v251 = v250 + 1;
              int v252 = *(unsigned __int8 *)(*(void *)a2 + v250);
              *((void *)a2 + 1) = v251;
              BOOL v253 = v252 != 0;
            }
            *((unsigned char *)this + 337) = v253;
            goto LABEL_920;
          case 303:
            v11[1] |= 0x80000uLL;
            unint64_t v254 = *((void *)a2 + 1);
            if (v254 >= *((void *)a2 + 2))
            {
              BOOL v257 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v255 = v254 + 1;
              int v256 = *(unsigned __int8 *)(*(void *)a2 + v254);
              *((void *)a2 + 1) = v255;
              BOOL v257 = v256 != 0;
            }
            *((unsigned char *)this + 330) = v257;
            goto LABEL_920;
          case 304:
            v11[1] |= 0x2000000000uLL;
            unint64_t v258 = *((void *)a2 + 1);
            if (v258 >= *((void *)a2 + 2))
            {
              BOOL v261 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v259 = v258 + 1;
              int v260 = *(unsigned __int8 *)(*(void *)a2 + v258);
              *((void *)a2 + 1) = v259;
              BOOL v261 = v260 != 0;
            }
            *((unsigned char *)this + 348) = v261;
            goto LABEL_920;
          case 305:
            v11[1] |= 0x200000000uLL;
            unint64_t v262 = *((void *)a2 + 1);
            if (v262 >= *((void *)a2 + 2))
            {
              BOOL v265 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v263 = v262 + 1;
              int v264 = *(unsigned __int8 *)(*(void *)a2 + v262);
              *((void *)a2 + 1) = v263;
              BOOL v265 = v264 != 0;
            }
            *((unsigned char *)this + 344) = v265;
            goto LABEL_920;
          case 306:
            v11[1] |= 0x4000000000uLL;
            unint64_t v266 = *((void *)a2 + 1);
            if (v266 >= *((void *)a2 + 2))
            {
              BOOL v269 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v267 = v266 + 1;
              int v268 = *(unsigned __int8 *)(*(void *)a2 + v266);
              *((void *)a2 + 1) = v267;
              BOOL v269 = v268 != 0;
            }
            *((unsigned char *)this + 349) = v269;
            goto LABEL_920;
          case 307:
            v11[1] |= 0x400000000uLL;
            unint64_t v270 = *((void *)a2 + 1);
            if (v270 >= *((void *)a2 + 2))
            {
              BOOL v273 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v271 = v270 + 1;
              int v272 = *(unsigned __int8 *)(*(void *)a2 + v270);
              *((void *)a2 + 1) = v271;
              BOOL v273 = v272 != 0;
            }
            *((unsigned char *)this + 345) = v273;
            goto LABEL_920;
          case 308:
            v11[1] |= 0x40000000uLL;
            unint64_t v274 = *((void *)a2 + 1);
            if (v274 >= *((void *)a2 + 2))
            {
              BOOL v277 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v275 = v274 + 1;
              int v276 = *(unsigned __int8 *)(*(void *)a2 + v274);
              *((void *)a2 + 1) = v275;
              BOOL v277 = v276 != 0;
            }
            *((unsigned char *)this + 341) = v277;
            goto LABEL_920;
          case 309:
            v11[1] |= 0x800uLL;
            unint64_t v278 = *((void *)a2 + 1);
            if (v278 >= *((void *)a2 + 2))
            {
              BOOL v281 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v279 = v278 + 1;
              int v280 = *(unsigned __int8 *)(*(void *)a2 + v278);
              *((void *)a2 + 1) = v279;
              BOOL v281 = v280 != 0;
            }
            *((unsigned char *)this + 322) = v281;
            goto LABEL_920;
          case 310:
            v11[1] |= 0x100000uLL;
            unint64_t v282 = *((void *)a2 + 1);
            if (v282 >= *((void *)a2 + 2))
            {
              BOOL v285 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v283 = v282 + 1;
              int v284 = *(unsigned __int8 *)(*(void *)a2 + v282);
              *((void *)a2 + 1) = v283;
              BOOL v285 = v284 != 0;
            }
            *((unsigned char *)this + 331) = v285;
            goto LABEL_920;
          case 311:
            v11[1] |= 0x8000000000uLL;
            unint64_t v286 = *((void *)a2 + 1);
            if (v286 >= *((void *)a2 + 2))
            {
              BOOL v289 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v287 = v286 + 1;
              int v288 = *(unsigned __int8 *)(*(void *)a2 + v286);
              *((void *)a2 + 1) = v287;
              BOOL v289 = v288 != 0;
            }
            *((unsigned char *)this + 350) = v289;
            goto LABEL_920;
          case 312:
            v11[1] |= 0x800000000uLL;
            unint64_t v290 = *((void *)a2 + 1);
            if (v290 >= *((void *)a2 + 2))
            {
              BOOL v293 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v291 = v290 + 1;
              int v292 = *(unsigned __int8 *)(*(void *)a2 + v290);
              *((void *)a2 + 1) = v291;
              BOOL v293 = v292 != 0;
            }
            *((unsigned char *)this + 346) = v293;
            goto LABEL_920;
          case 313:
            *v11 |= 0x20000uLL;
            unint64_t v294 = *((void *)a2 + 1);
            unint64_t v295 = *((void *)a2 + 2);
            uint64_t v296 = *(void *)a2;
            if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
            {
              char v297 = 0;
              unsigned int v298 = 0;
              uint64_t v299 = 0;
              do
              {
                unint64_t v300 = v294 + 1;
                *long long v3 = v294 + 1;
                char v301 = *(unsigned char *)(v296 + v294);
                v299 |= (unint64_t)(v301 & 0x7F) << v297;
                if ((v301 & 0x80) == 0) {
                  goto LABEL_1025;
                }
                v297 += 7;
                unint64_t v294 = v300;
                BOOL v18 = v298++ > 8;
              }
              while (!v18);
LABEL_714:
              LODWORD(v299) = 0;
              goto LABEL_1025;
            }
            char v657 = 0;
            unsigned int v658 = 0;
            uint64_t v299 = 0;
            if (v295 <= v294) {
              unint64_t v295 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v295 == v294)
              {
                LODWORD(v299) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v659 = v294 + 1;
                char v660 = *(unsigned char *)(v296 + v294);
                *long long v3 = v659;
                v299 |= (unint64_t)(v660 & 0x7F) << v657;
                if (v660 < 0)
                {
                  v657 += 7;
                  unint64_t v294 = v659;
                  BOOL v18 = v658++ > 8;
                  if (v18) {
                    goto LABEL_714;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v299) = 0;
                }
              }
              break;
            }
LABEL_1025:
            *((_DWORD *)this + 27) = v299;
            goto LABEL_920;
          case 314:
            v11[1] |= 0x400000uLL;
            unint64_t v302 = *((void *)a2 + 1);
            if (v302 >= *((void *)a2 + 2))
            {
              BOOL v305 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v303 = v302 + 1;
              int v304 = *(unsigned __int8 *)(*(void *)a2 + v302);
              *((void *)a2 + 1) = v303;
              BOOL v305 = v304 != 0;
            }
            *((unsigned char *)this + 333) = v305;
            goto LABEL_920;
          case 315:
            v11[1] |= 0x800000uLL;
            unint64_t v306 = *((void *)a2 + 1);
            if (v306 >= *((void *)a2 + 2))
            {
              BOOL v309 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v307 = v306 + 1;
              int v308 = *(unsigned __int8 *)(*(void *)a2 + v306);
              *((void *)a2 + 1) = v307;
              BOOL v309 = v308 != 0;
            }
            *((unsigned char *)this + 334) = v309;
            goto LABEL_920;
          case 316:
            v11[1] |= 0x20uLL;
            unint64_t v310 = *((void *)a2 + 1);
            if (v310 >= *((void *)a2 + 2))
            {
              BOOL v313 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v311 = v310 + 1;
              int v312 = *(unsigned __int8 *)(*(void *)a2 + v310);
              *((void *)a2 + 1) = v311;
              BOOL v313 = v312 != 0;
            }
            *((unsigned char *)this + 316) = v313;
            goto LABEL_920;
          case 317:
            *v11 |= 0x40000uLL;
            unint64_t v314 = *((void *)a2 + 1);
            unint64_t v315 = *((void *)a2 + 2);
            uint64_t v316 = *(void *)a2;
            if (v314 <= 0xFFFFFFFFFFFFFFF5 && v314 + 10 <= v315)
            {
              char v317 = 0;
              unsigned int v318 = 0;
              uint64_t v319 = 0;
              do
              {
                unint64_t v320 = v314 + 1;
                *long long v3 = v314 + 1;
                char v321 = *(unsigned char *)(v316 + v314);
                v319 |= (unint64_t)(v321 & 0x7F) << v317;
                if ((v321 & 0x80) == 0) {
                  goto LABEL_1028;
                }
                v317 += 7;
                unint64_t v314 = v320;
                BOOL v18 = v318++ > 8;
              }
              while (!v18);
LABEL_727:
              LODWORD(v319) = 0;
              goto LABEL_1028;
            }
            char v661 = 0;
            unsigned int v662 = 0;
            uint64_t v319 = 0;
            if (v315 <= v314) {
              unint64_t v315 = *((void *)a2 + 1);
            }
            break;
          case 318:
            v11[1] |= 0x40000000000uLL;
            unint64_t v322 = *((void *)a2 + 1);
            if (v322 >= *((void *)a2 + 2))
            {
              BOOL v325 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v323 = v322 + 1;
              int v324 = *(unsigned __int8 *)(*(void *)a2 + v322);
              *((void *)a2 + 1) = v323;
              BOOL v325 = v324 != 0;
            }
            *((unsigned char *)this + 353) = v325;
            goto LABEL_920;
          case 319:
            v11[1] |= 0x10000000000uLL;
            unint64_t v326 = *((void *)a2 + 1);
            if (v326 >= *((void *)a2 + 2))
            {
              BOOL v329 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v327 = v326 + 1;
              int v328 = *(unsigned __int8 *)(*(void *)a2 + v326);
              *((void *)a2 + 1) = v327;
              BOOL v329 = v328 != 0;
            }
            *((unsigned char *)this + 351) = v329;
            goto LABEL_920;
          case 320:
            v11[1] |= 0x20000000000uLL;
            unint64_t v330 = *((void *)a2 + 1);
            if (v330 >= *((void *)a2 + 2))
            {
              BOOL v333 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v331 = v330 + 1;
              int v332 = *(unsigned __int8 *)(*(void *)a2 + v330);
              *((void *)a2 + 1) = v331;
              BOOL v333 = v332 != 0;
            }
            *((unsigned char *)this + 352) = v333;
            goto LABEL_920;
          case 321:
            v11[1] |= (unint64_t)&_mh_execute_header;
            unint64_t v334 = *((void *)a2 + 1);
            if (v334 >= *((void *)a2 + 2))
            {
              BOOL v337 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v335 = v334 + 1;
              int v336 = *(unsigned __int8 *)(*(void *)a2 + v334);
              *((void *)a2 + 1) = v335;
              BOOL v337 = v336 != 0;
            }
            *((unsigned char *)this + 343) = v337;
            goto LABEL_920;
          case 322:
            v11[1] |= 0x80000000uLL;
            unint64_t v338 = *((void *)a2 + 1);
            if (v338 >= *((void *)a2 + 2))
            {
              BOOL v341 = 0;
              *int v5 = 1;
            }
            else
            {
              unint64_t v339 = v338 + 1;
              int v340 = *(unsigned __int8 *)(*(void *)a2 + v338);
              *((void *)a2 + 1) = v339;
              BOOL v341 = v340 != 0;
            }
            *((unsigned char *)this + 342) = v341;
            goto LABEL_920;
          default:
            JUMPOUT(0);
        }
        while (1)
        {
          if (v315 == v314)
          {
            LODWORD(v319) = 0;
            *int v5 = 1;
            goto LABEL_1028;
          }
          unint64_t v663 = v314 + 1;
          char v664 = *(unsigned char *)(v316 + v314);
          *long long v3 = v663;
          v319 |= (unint64_t)(v664 & 0x7F) << v661;
          if ((v664 & 0x80) == 0) {
            break;
          }
          v661 += 7;
          unint64_t v314 = v663;
          BOOL v18 = v662++ > 8;
          if (v18) {
            goto LABEL_727;
          }
        }
        if (*v5) {
          LODWORD(v319) = 0;
        }
LABEL_1028:
        *((_DWORD *)this + 28) = v319;
      }
      else
      {
        switch((int)v25)
        {
          case 1:
            *v11 |= 0x800000uLL;
            unint64_t v26 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v26);
            goto LABEL_919;
          case 2:
            *v11 |= 0x400000uLL;
            unint64_t v120 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v120);
            goto LABEL_919;
          case 3:
            *v11 |= 0x1000000uLL;
            unint64_t v121 = *((void *)a2 + 1);
            unint64_t v122 = *((void *)a2 + 2);
            uint64_t v123 = *(void *)a2;
            if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
            {
              char v124 = 0;
              unsigned int v125 = 0;
              uint64_t v126 = 0;
              do
              {
                unint64_t v127 = v121 + 1;
                *long long v3 = v121 + 1;
                char v128 = *(unsigned char *)(v123 + v121);
                v126 |= (unint64_t)(v128 & 0x7F) << v124;
                if ((v128 & 0x80) == 0) {
                  goto LABEL_983;
                }
                v124 += 7;
                unint64_t v121 = v127;
                BOOL v18 = v125++ > 8;
              }
              while (!v18);
LABEL_590:
              LODWORD(v126) = 0;
              goto LABEL_983;
            }
            char v601 = 0;
            unsigned int v602 = 0;
            uint64_t v126 = 0;
            if (v122 <= v121) {
              unint64_t v122 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v122 == v121)
              {
                LODWORD(v126) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v603 = v121 + 1;
                char v604 = *(unsigned char *)(v123 + v121);
                *long long v3 = v603;
                v126 |= (unint64_t)(v604 & 0x7F) << v601;
                if (v604 < 0)
                {
                  v601 += 7;
                  unint64_t v121 = v603;
                  BOOL v18 = v602++ > 8;
                  if (v18) {
                    goto LABEL_590;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v126) = 0;
                }
              }
              break;
            }
LABEL_983:
            *((_DWORD *)this + 34) = v126;
            goto LABEL_920;
          case 4:
            *v11 |= 0x10000000000000uLL;
            unint64_t v129 = *((void *)a2 + 1);
            unint64_t v130 = *((void *)a2 + 2);
            uint64_t v131 = *(void *)a2;
            if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
            {
              char v132 = 0;
              unsigned int v133 = 0;
              uint64_t v134 = 0;
              do
              {
                unint64_t v135 = v129 + 1;
                *long long v3 = v129 + 1;
                char v136 = *(unsigned char *)(v131 + v129);
                v134 |= (unint64_t)(v136 & 0x7F) << v132;
                if ((v136 & 0x80) == 0) {
                  goto LABEL_986;
                }
                v132 += 7;
                unint64_t v129 = v135;
                BOOL v18 = v133++ > 8;
              }
              while (!v18);
LABEL_597:
              LODWORD(v134) = 0;
              goto LABEL_986;
            }
            char v605 = 0;
            unsigned int v606 = 0;
            uint64_t v134 = 0;
            if (v130 <= v129) {
              unint64_t v130 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v130 == v129)
              {
                LODWORD(v134) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v607 = v129 + 1;
                char v608 = *(unsigned char *)(v131 + v129);
                *long long v3 = v607;
                v134 |= (unint64_t)(v608 & 0x7F) << v605;
                if (v608 < 0)
                {
                  v605 += 7;
                  unint64_t v129 = v607;
                  BOOL v18 = v606++ > 8;
                  if (v18) {
                    goto LABEL_597;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v134) = 0;
                }
              }
              break;
            }
LABEL_986:
            *((_DWORD *)this + 62) = v134;
            goto LABEL_920;
          case 5:
            v11[1] |= 1uLL;
            unint64_t v137 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 74) = *(_DWORD *)(*(void *)a2 + v137);
            goto LABEL_919;
          case 6:
            *v11 |= 0x400000000000000uLL;
            unint64_t v138 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 68) = *(_DWORD *)(*(void *)a2 + v138);
            goto LABEL_919;
          case 7:
            *v11 |= 0x400000000000uLL;
            unint64_t v139 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 56) = *(_DWORD *)(*(void *)a2 + v139);
            goto LABEL_919;
          case 8:
            *v11 |= 0x200000000000uLL;
            unint64_t v140 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 55) = *(_DWORD *)(*(void *)a2 + v140);
            goto LABEL_919;
          case 9:
            *v11 |= 0x200uLL;
            unint64_t v141 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v141 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v141);
            goto LABEL_919;
          case 10:
            *v11 |= 0x80000000000000uLL;
            unint64_t v142 = *((void *)a2 + 1);
            unint64_t v143 = *((void *)a2 + 2);
            uint64_t v144 = *(void *)a2;
            if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
            {
              char v145 = 0;
              unsigned int v146 = 0;
              uint64_t v147 = 0;
              do
              {
                unint64_t v148 = v142 + 1;
                *long long v3 = v142 + 1;
                char v149 = *(unsigned char *)(v144 + v142);
                v147 |= (unint64_t)(v149 & 0x7F) << v145;
                if ((v149 & 0x80) == 0) {
                  goto LABEL_989;
                }
                v145 += 7;
                unint64_t v142 = v148;
                BOOL v18 = v146++ > 8;
              }
              while (!v18);
LABEL_604:
              LODWORD(v147) = 0;
              goto LABEL_989;
            }
            char v609 = 0;
            unsigned int v610 = 0;
            uint64_t v147 = 0;
            if (v143 <= v142) {
              unint64_t v143 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v143 == v142)
              {
                LODWORD(v147) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v611 = v142 + 1;
                char v612 = *(unsigned char *)(v144 + v142);
                *long long v3 = v611;
                v147 |= (unint64_t)(v612 & 0x7F) << v609;
                if (v612 < 0)
                {
                  v609 += 7;
                  unint64_t v142 = v611;
                  BOOL v18 = v610++ > 8;
                  if (v18) {
                    goto LABEL_604;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v147) = 0;
                }
              }
              break;
            }
LABEL_989:
            *((_DWORD *)this + 65) = v147;
            goto LABEL_920;
          case 11:
            *v11 |= 0x2000000uLL;
            unint64_t v150 = *((void *)a2 + 1);
            unint64_t v151 = *((void *)a2 + 2);
            uint64_t v152 = *(void *)a2;
            if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
            {
              char v153 = 0;
              unsigned int v154 = 0;
              uint64_t v155 = 0;
              do
              {
                unint64_t v156 = v150 + 1;
                *long long v3 = v150 + 1;
                char v157 = *(unsigned char *)(v152 + v150);
                v155 |= (unint64_t)(v157 & 0x7F) << v153;
                if ((v157 & 0x80) == 0) {
                  goto LABEL_992;
                }
                v153 += 7;
                unint64_t v150 = v156;
                BOOL v18 = v154++ > 8;
              }
              while (!v18);
LABEL_611:
              LODWORD(v155) = 0;
              goto LABEL_992;
            }
            char v613 = 0;
            unsigned int v614 = 0;
            uint64_t v155 = 0;
            if (v151 <= v150) {
              unint64_t v151 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v151 == v150)
              {
                LODWORD(v155) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v615 = v150 + 1;
                char v616 = *(unsigned char *)(v152 + v150);
                *long long v3 = v615;
                v155 |= (unint64_t)(v616 & 0x7F) << v613;
                if (v616 < 0)
                {
                  v613 += 7;
                  unint64_t v150 = v615;
                  BOOL v18 = v614++ > 8;
                  if (v18) {
                    goto LABEL_611;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v155) = 0;
                }
              }
              break;
            }
LABEL_992:
            *((_DWORD *)this + 35) = v155;
            goto LABEL_920;
          case 12:
            *v11 |= 0x10000uLL;
            unint64_t v158 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v158);
            goto LABEL_919;
          case 13:
            v11[1] |= 8uLL;
            unint64_t v159 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v159 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 77) = *(_DWORD *)(*(void *)a2 + v159);
            goto LABEL_919;
          case 14:
            v11[1] |= 0x10uLL;
            unint64_t v160 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 78) = *(_DWORD *)(*(void *)a2 + v160);
            goto LABEL_919;
          case 15:
            *v11 |= 0x80000000000uLL;
            unint64_t v161 = *((void *)a2 + 1);
            unint64_t v162 = *((void *)a2 + 2);
            uint64_t v163 = *(void *)a2;
            if (v161 <= 0xFFFFFFFFFFFFFFF5 && v161 + 10 <= v162)
            {
              char v164 = 0;
              unsigned int v165 = 0;
              uint64_t v166 = 0;
              do
              {
                unint64_t v167 = v161 + 1;
                *long long v3 = v161 + 1;
                char v168 = *(unsigned char *)(v163 + v161);
                v166 |= (unint64_t)(v168 & 0x7F) << v164;
                if ((v168 & 0x80) == 0) {
                  goto LABEL_995;
                }
                v164 += 7;
                unint64_t v161 = v167;
                BOOL v18 = v165++ > 8;
              }
              while (!v18);
LABEL_618:
              LODWORD(v166) = 0;
              goto LABEL_995;
            }
            char v617 = 0;
            unsigned int v618 = 0;
            uint64_t v166 = 0;
            if (v162 <= v161) {
              unint64_t v162 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v162 == v161)
              {
                LODWORD(v166) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v619 = v161 + 1;
                char v620 = *(unsigned char *)(v163 + v161);
                *long long v3 = v619;
                v166 |= (unint64_t)(v620 & 0x7F) << v617;
                if (v620 < 0)
                {
                  v617 += 7;
                  unint64_t v161 = v619;
                  BOOL v18 = v618++ > 8;
                  if (v18) {
                    goto LABEL_618;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v166) = 0;
                }
              }
              break;
            }
LABEL_995:
            *((_DWORD *)this + 53) = v166;
            goto LABEL_920;
          case 16:
            *v11 |= 0x20000000000uLL;
            unint64_t v169 = *((void *)a2 + 1);
            unint64_t v170 = *((void *)a2 + 2);
            uint64_t v171 = *(void *)a2;
            if (v169 <= 0xFFFFFFFFFFFFFFF5 && v169 + 10 <= v170)
            {
              char v172 = 0;
              unsigned int v173 = 0;
              uint64_t v174 = 0;
              do
              {
                unint64_t v175 = v169 + 1;
                *long long v3 = v169 + 1;
                char v176 = *(unsigned char *)(v171 + v169);
                v174 |= (unint64_t)(v176 & 0x7F) << v172;
                if ((v176 & 0x80) == 0) {
                  goto LABEL_998;
                }
                v172 += 7;
                unint64_t v169 = v175;
                BOOL v18 = v173++ > 8;
              }
              while (!v18);
LABEL_625:
              LODWORD(v174) = 0;
              goto LABEL_998;
            }
            char v621 = 0;
            unsigned int v622 = 0;
            uint64_t v174 = 0;
            if (v170 <= v169) {
              unint64_t v170 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v170 == v169)
              {
                LODWORD(v174) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v623 = v169 + 1;
                char v624 = *(unsigned char *)(v171 + v169);
                *long long v3 = v623;
                v174 |= (unint64_t)(v624 & 0x7F) << v621;
                if (v624 < 0)
                {
                  v621 += 7;
                  unint64_t v169 = v623;
                  BOOL v18 = v622++ > 8;
                  if (v18) {
                    goto LABEL_625;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v174) = 0;
                }
              }
              break;
            }
LABEL_998:
            *((_DWORD *)this + 51) = v174;
            goto LABEL_920;
          case 17:
            *v11 |= 0x4000000000000uLL;
            unint64_t v177 = *v3;
            if (*v3 > 0xFFFFFFFFFFFFFFFBLL || v177 + 4 > *((void *)a2 + 2)) {
              goto LABEL_512;
            }
            *((_DWORD *)this + 60) = *(_DWORD *)(*(void *)a2 + v177);
            goto LABEL_919;
          case 18:
            *v11 |= 0x1000000000000000uLL;
            unint64_t v178 = *((void *)a2 + 1);
            unint64_t v179 = *((void *)a2 + 2);
            uint64_t v180 = *(void *)a2;
            if (v178 <= 0xFFFFFFFFFFFFFFF5 && v178 + 10 <= v179)
            {
              char v181 = 0;
              unsigned int v182 = 0;
              uint64_t v183 = 0;
              do
              {
                unint64_t v184 = v178 + 1;
                *long long v3 = v178 + 1;
                char v185 = *(unsigned char *)(v180 + v178);
                v183 |= (unint64_t)(v185 & 0x7F) << v181;
                if ((v185 & 0x80) == 0) {
                  goto LABEL_1001;
                }
                v181 += 7;
                unint64_t v178 = v184;
                BOOL v18 = v182++ > 8;
              }
              while (!v18);
LABEL_632:
              LODWORD(v183) = 0;
              goto LABEL_1001;
            }
            char v625 = 0;
            unsigned int v626 = 0;
            uint64_t v183 = 0;
            if (v179 <= v178) {
              unint64_t v179 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v179 == v178)
              {
                LODWORD(v183) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v627 = v178 + 1;
                char v628 = *(unsigned char *)(v180 + v178);
                *long long v3 = v627;
                v183 |= (unint64_t)(v628 & 0x7F) << v625;
                if (v628 < 0)
                {
                  v625 += 7;
                  unint64_t v178 = v627;
                  BOOL v18 = v626++ > 8;
                  if (v18) {
                    goto LABEL_632;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v183) = 0;
                }
              }
              break;
            }
LABEL_1001:
            *((_DWORD *)this + 70) = v183;
            goto LABEL_920;
          case 19:
            v11[1] |= 2uLL;
            unint64_t v186 = *((void *)a2 + 1);
            unint64_t v187 = *((void *)a2 + 2);
            uint64_t v188 = *(void *)a2;
            if (v186 <= 0xFFFFFFFFFFFFFFF5 && v186 + 10 <= v187)
            {
              char v189 = 0;
              unsigned int v190 = 0;
              uint64_t v191 = 0;
              do
              {
                unint64_t v192 = v186 + 1;
                *long long v3 = v186 + 1;
                char v193 = *(unsigned char *)(v188 + v186);
                v191 |= (unint64_t)(v193 & 0x7F) << v189;
                if ((v193 & 0x80) == 0) {
                  goto LABEL_1004;
                }
                v189 += 7;
                unint64_t v186 = v192;
                BOOL v18 = v190++ > 8;
              }
              while (!v18);
LABEL_639:
              LODWORD(v191) = 0;
              goto LABEL_1004;
            }
            char v629 = 0;
            unsigned int v630 = 0;
            uint64_t v191 = 0;
            if (v187 <= v186) {
              unint64_t v187 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v187 == v186)
              {
                LODWORD(v191) = 0;
                *int v5 = 1;
              }
              else
              {
                unint64_t v631 = v186 + 1;
                char v632 = *(unsigned char *)(v188 + v186);
                *long long v3 = v631;
                v191 |= (unint64_t)(v632 & 0x7F) << v629;
                if (v632 < 0)
                {
                  v629 += 7;
                  unint64_t v186 = v631;
                  BOOL v18 = v630++ > 8;
                  if (v18) {
                    goto LABEL_639;
                  }
                  continue;
                }
                if (*v5) {
                  LODWORD(v191) = 0;
                }
              }
              break;
            }
LABEL_1004:
            *((_DWORD *)this + 75) = v191;
            goto LABEL_920;
          default:
            switch((int)v25)
            {
              case 'e':
                *v11 |= 0x80uLL;
                unint64_t v40 = *((void *)a2 + 1);
                unint64_t v41 = *((void *)a2 + 2);
                uint64_t v42 = *(void *)a2;
                if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
                {
                  char v43 = 0;
                  unsigned int v44 = 0;
                  uint64_t v45 = 0;
                  do
                  {
                    unint64_t v46 = v40 + 1;
                    *long long v3 = v40 + 1;
                    char v47 = *(unsigned char *)(v42 + v40);
                    v45 |= (unint64_t)(v47 & 0x7F) << v43;
                    if ((v47 & 0x80) == 0) {
                      goto LABEL_977;
                    }
                    v43 += 7;
                    unint64_t v40 = v46;
                    BOOL v18 = v44++ > 8;
                  }
                  while (!v18);
LABEL_574:
                  uint64_t v45 = 0;
                  goto LABEL_977;
                }
                char v593 = 0;
                unsigned int v594 = 0;
                uint64_t v45 = 0;
                if (v41 <= v40) {
                  unint64_t v41 = *((void *)a2 + 1);
                }
                while (2)
                {
                  if (v41 == v40)
                  {
                    uint64_t v45 = 0;
                    *int v5 = 1;
                  }
                  else
                  {
                    unint64_t v595 = v40 + 1;
                    char v596 = *(unsigned char *)(v42 + v40);
                    *long long v3 = v595;
                    v45 |= (unint64_t)(v596 & 0x7F) << v593;
                    if (v596 < 0)
                    {
                      v593 += 7;
                      unint64_t v40 = v595;
                      BOOL v18 = v594++ > 8;
                      if (v18) {
                        goto LABEL_574;
                      }
                      continue;
                    }
                    if (*v5) {
                      uint64_t v45 = 0;
                    }
                  }
                  break;
                }
LABEL_977:
                *((void *)this + 8) = v45;
                goto LABEL_920;
              case 'f':
                *v11 |= 1uLL;
                unint64_t v342 = *((void *)a2 + 1);
                unint64_t v343 = *((void *)a2 + 2);
                uint64_t v344 = *(void *)a2;
                if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
                {
                  char v345 = 0;
                  unsigned int v346 = 0;
                  uint64_t v347 = 0;
                  do
                  {
                    unint64_t v348 = v342 + 1;
                    *long long v3 = v342 + 1;
                    char v349 = *(unsigned char *)(v344 + v342);
                    v347 |= (unint64_t)(v349 & 0x7F) << v345;
                    if ((v349 & 0x80) == 0) {
                      goto LABEL_1031;
                    }
                    v345 += 7;
                    unint64_t v342 = v348;
                    BOOL v18 = v346++ > 8;
                  }
                  while (!v18);
LABEL_744:
                  uint64_t v347 = 0;
                  goto LABEL_1031;
                }
                char v665 = 0;
                unsigned int v666 = 0;
                uint64_t v347 = 0;
                if (v343 <= v342) {
                  unint64_t v343 = *((void *)a2 + 1);
                }
                break;
              case 'g':
                v11[1] |= 0x40uLL;
                unint64_t v350 = *((void *)a2 + 1);
                if (v350 >= *((void *)a2 + 2))
                {
                  BOOL v353 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v351 = v350 + 1;
                  int v352 = *(unsigned __int8 *)(*(void *)a2 + v350);
                  *((void *)a2 + 1) = v351;
                  BOOL v353 = v352 != 0;
                }
                *((unsigned char *)this + 317) = v353;
                goto LABEL_920;
              case 'h':
                v11[1] |= 0x80uLL;
                unint64_t v354 = *((void *)a2 + 1);
                if (v354 >= *((void *)a2 + 2))
                {
                  BOOL v357 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v355 = v354 + 1;
                  int v356 = *(unsigned __int8 *)(*(void *)a2 + v354);
                  *((void *)a2 + 1) = v355;
                  BOOL v357 = v356 != 0;
                }
                *((unsigned char *)this + 318) = v357;
                goto LABEL_920;
              case 'i':
                v11[1] |= 0x8000uLL;
                unint64_t v358 = *((void *)a2 + 1);
                if (v358 >= *((void *)a2 + 2))
                {
                  BOOL v361 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v359 = v358 + 1;
                  int v360 = *(unsigned __int8 *)(*(void *)a2 + v358);
                  *((void *)a2 + 1) = v359;
                  BOOL v361 = v360 != 0;
                }
                *((unsigned char *)this + 326) = v361;
                goto LABEL_920;
              case 'j':
                v11[1] |= 0x10000uLL;
                unint64_t v362 = *((void *)a2 + 1);
                if (v362 >= *((void *)a2 + 2))
                {
                  BOOL v365 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v363 = v362 + 1;
                  int v364 = *(unsigned __int8 *)(*(void *)a2 + v362);
                  *((void *)a2 + 1) = v363;
                  BOOL v365 = v364 != 0;
                }
                *((unsigned char *)this + 327) = v365;
                goto LABEL_920;
              case 'k':
                v11[1] |= 0x8000000uLL;
                unint64_t v366 = *((void *)a2 + 1);
                if (v366 >= *((void *)a2 + 2))
                {
                  BOOL v369 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v367 = v366 + 1;
                  int v368 = *(unsigned __int8 *)(*(void *)a2 + v366);
                  *((void *)a2 + 1) = v367;
                  BOOL v369 = v368 != 0;
                }
                *((unsigned char *)this + 338) = v369;
                goto LABEL_920;
              case 'l':
                v11[1] |= 0x2000000uLL;
                unint64_t v370 = *((void *)a2 + 1);
                if (v370 >= *((void *)a2 + 2))
                {
                  BOOL v373 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v371 = v370 + 1;
                  int v372 = *(unsigned __int8 *)(*(void *)a2 + v370);
                  *((void *)a2 + 1) = v371;
                  BOOL v373 = v372 != 0;
                }
                *((unsigned char *)this + 336) = v373;
                goto LABEL_920;
              case 'm':
                v11[1] |= 0x1000uLL;
                unint64_t v374 = *((void *)a2 + 1);
                if (v374 >= *((void *)a2 + 2))
                {
                  BOOL v377 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v375 = v374 + 1;
                  int v376 = *(unsigned __int8 *)(*(void *)a2 + v374);
                  *((void *)a2 + 1) = v375;
                  BOOL v377 = v376 != 0;
                }
                *((unsigned char *)this + 323) = v377;
                goto LABEL_920;
              case 'n':
                v11[1] |= 0x10000000uLL;
                unint64_t v378 = *((void *)a2 + 1);
                if (v378 >= *((void *)a2 + 2))
                {
                  BOOL v381 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v379 = v378 + 1;
                  int v380 = *(unsigned __int8 *)(*(void *)a2 + v378);
                  *((void *)a2 + 1) = v379;
                  BOOL v381 = v380 != 0;
                }
                *((unsigned char *)this + 339) = v381;
                goto LABEL_920;
              case 'o':
                v11[1] |= 0x20000000uLL;
                unint64_t v382 = *((void *)a2 + 1);
                if (v382 >= *((void *)a2 + 2))
                {
                  BOOL v385 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v383 = v382 + 1;
                  int v384 = *(unsigned __int8 *)(*(void *)a2 + v382);
                  *((void *)a2 + 1) = v383;
                  BOOL v385 = v384 != 0;
                }
                *((unsigned char *)this + 340) = v385;
                goto LABEL_920;
              case 'p':
                v11[1] |= 0x200uLL;
                unint64_t v386 = *((void *)a2 + 1);
                if (v386 >= *((void *)a2 + 2))
                {
                  BOOL v389 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v387 = v386 + 1;
                  int v388 = *(unsigned __int8 *)(*(void *)a2 + v386);
                  *((void *)a2 + 1) = v387;
                  BOOL v389 = v388 != 0;
                }
                *((unsigned char *)this + 320) = v389;
                goto LABEL_920;
              case 'q':
                v11[1] |= 0x1000000uLL;
                unint64_t v390 = *((void *)a2 + 1);
                if (v390 >= *((void *)a2 + 2))
                {
                  BOOL v393 = 0;
                  *int v5 = 1;
                }
                else
                {
                  unint64_t v391 = v390 + 1;
                  int v392 = *(unsigned __int8 *)(*(void *)a2 + v390);
                  *((void *)a2 + 1) = v391;
                  BOOL v393 = v392 != 0;
                }
                *((unsigned char *)this + 335) = v393;
                goto LABEL_920;
              default:
                goto LABEL_140;
            }
            break;
        }
        while (1)
        {
          if (v343 == v342)
          {
            uint64_t v347 = 0;
            *int v5 = 1;
            goto LABEL_1031;
          }
          unint64_t v667 = v342 + 1;
          char v668 = *(unsigned char *)(v344 + v342);
          *long long v3 = v667;
          v347 |= (unint64_t)(v668 & 0x7F) << v665;
          if ((v668 & 0x80) == 0) {
            break;
          }
          v665 += 7;
          unint64_t v342 = v667;
          BOOL v18 = v666++ > 8;
          if (v18) {
            goto LABEL_744;
          }
        }
        if (*v5) {
          uint64_t v347 = 0;
        }
LABEL_1031:
        *((void *)this + 1) = v347;
      }
LABEL_920:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v6 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v6 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaSevereCrashResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)(this + 356);
  uint64_t v5 = *(void *)(this + 356);
  if ((v5 & 0x800000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 132), 1u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if ((*v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(this + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    this = PB::Writer::write(a2, *(float *)(v3 + 128), 2u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
  }
LABEL_6:
  if ((v5 & 0x1000000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 3u);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if ((*v4 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 248), 4u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_116;
  }
LABEL_115:
  this = PB::Writer::write(a2, *(float *)(v3 + 296), 5u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_117;
  }
LABEL_116:
  this = PB::Writer::write(a2, *(float *)(v3 + 272), 6u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_118;
  }
LABEL_117:
  this = PB::Writer::write(a2, *(float *)(v3 + 224), 7u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_119;
  }
LABEL_118:
  this = PB::Writer::write(a2, *(float *)(v3 + 220), 8u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_120;
  }
LABEL_119:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 9u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_121;
  }
LABEL_120:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 260), 0xAu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_122;
  }
LABEL_121:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0xBu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_123;
  }
LABEL_122:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xCu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 8) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_124;
  }
LABEL_123:
  this = PB::Writer::write(a2, *(float *)(v3 + 308), 0xDu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_125;
  }
LABEL_124:
  this = PB::Writer::write(a2, *(float *)(v3 + 312), 0xEu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_126;
  }
LABEL_125:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0xFu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_127;
  }
LABEL_126:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0x10u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_128;
  }
LABEL_127:
  this = PB::Writer::write(a2, *(float *)(v3 + 240), 0x11u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0) {
      goto LABEL_23;
    }
    goto LABEL_129;
  }
LABEL_128:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 280), 0x12u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_130;
  }
LABEL_129:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 300), 0x13u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_131;
  }
LABEL_130:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0x65u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_132;
  }
LABEL_131:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x66u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x40) == 0)
  {
LABEL_26:
    if ((v6 & 0x80) == 0) {
      goto LABEL_27;
    }
    goto LABEL_133;
  }
LABEL_132:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 317), 0x67u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x80) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_134;
  }
LABEL_133:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 318), 0x68u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_135;
  }
LABEL_134:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 326), 0x69u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x10000) == 0)
  {
LABEL_29:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_136;
  }
LABEL_135:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 327), 0x6Au);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_137;
  }
LABEL_136:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 338), 0x6Bu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_138;
  }
LABEL_137:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 336), 0x6Cu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x1000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_139;
  }
LABEL_138:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 323), 0x6Du);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_140;
  }
LABEL_139:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 339), 0x6Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_141;
  }
LABEL_140:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 340), 0x6Fu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x200) == 0)
  {
LABEL_35:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_142;
  }
LABEL_141:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 320), 0x70u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_143;
  }
LABEL_142:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 335), 0x71u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_37:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_144;
  }
LABEL_143:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 324), 0x12Du);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_145;
  }
LABEL_144:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 337), 0x12Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_146;
  }
LABEL_145:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 330), 0x12Fu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_147;
  }
LABEL_146:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 348), 0x130u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_148;
  }
LABEL_147:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 344), 0x131u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_149;
  }
LABEL_148:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 349), 0x132u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_150;
  }
LABEL_149:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 345), 0x133u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800) == 0) {
      goto LABEL_45;
    }
    goto LABEL_151;
  }
LABEL_150:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 341), 0x134u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_45:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_152;
  }
LABEL_151:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 322), 0x135u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_153;
  }
LABEL_152:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 331), 0x136u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_154;
  }
LABEL_153:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 350), 0x137u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_155;
  }
LABEL_154:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 346), 0x138u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x20000) == 0)
  {
LABEL_49:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_156;
  }
LABEL_155:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0x139u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_50:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_157;
  }
LABEL_156:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 333), 0x13Au);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0) {
      goto LABEL_52;
    }
    goto LABEL_158;
  }
LABEL_157:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 334), 0x13Bu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_159;
  }
LABEL_158:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 316), 0x13Cu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40000) == 0)
  {
LABEL_53:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_160;
  }
LABEL_159:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x13Du);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_161;
  }
LABEL_160:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 353), 0x13Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_56;
    }
    goto LABEL_162;
  }
LABEL_161:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 351), 0x13Fu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_163;
  }
LABEL_162:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 352), 0x140u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_58;
    }
    goto LABEL_164;
  }
LABEL_163:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 343), 0x141u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000) == 0) {
      goto LABEL_59;
    }
    goto LABEL_165;
  }
LABEL_164:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 342), 0x142u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x40000000000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_166;
  }
LABEL_165:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 252), 0x191u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_167;
  }
LABEL_166:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 256), 0x192u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_168;
  }
LABEL_167:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x193u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_169;
  }
LABEL_168:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x194u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_170;
  }
LABEL_169:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 328), 0x195u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x4000) == 0)
  {
LABEL_64:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_171;
  }
LABEL_170:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 325), 0x196u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_172;
  }
LABEL_171:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x197u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80000) == 0)
  {
LABEL_66:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_173;
  }
LABEL_172:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x198u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x4000000000000000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_174;
  }
LABEL_173:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0x199u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_175;
  }
LABEL_174:
  this = PB::Writer::write(a2, *(float *)(v3 + 288), 0x1F5u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000) == 0) {
      goto LABEL_70;
    }
    goto LABEL_176;
  }
LABEL_175:
  this = PB::Writer::write(a2, *(float *)(v3 + 292), 0x1F6u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000) == 0) {
      goto LABEL_71;
    }
    goto LABEL_177;
  }
LABEL_176:
  this = PB::Writer::write(a2, *(float *)(v3 + 268), 0x1F7u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000) == 0) {
      goto LABEL_72;
    }
    goto LABEL_178;
  }
LABEL_177:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 276), 0x1F8u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x400) == 0) {
      goto LABEL_73;
    }
    goto LABEL_179;
  }
LABEL_178:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 284), 0x1F9u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x400) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_180;
  }
LABEL_179:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 321), 0x259u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000) == 0)
  {
LABEL_74:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_181;
  }
LABEL_180:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x25Au);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x1000) == 0)
  {
LABEL_75:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_182;
  }
LABEL_181:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x25Bu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x100000000000000) == 0) {
      goto LABEL_77;
    }
    goto LABEL_183;
  }
LABEL_182:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 216), 0x25Cu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0) {
      goto LABEL_78;
    }
    goto LABEL_184;
  }
LABEL_183:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 264), 0x25Du);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_79;
    }
    goto LABEL_185;
  }
LABEL_184:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0x25Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_80;
    }
    goto LABEL_186;
  }
LABEL_185:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 228), 0x2BDu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_81;
    }
    goto LABEL_187;
  }
LABEL_186:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 232), 0x2BEu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0) {
      goto LABEL_82;
    }
    goto LABEL_188;
  }
LABEL_187:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x321u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x400) == 0)
  {
LABEL_82:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_83;
    }
    goto LABEL_189;
  }
LABEL_188:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x322u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0) {
      goto LABEL_84;
    }
    goto LABEL_190;
  }
LABEL_189:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x323u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x800) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0) {
      goto LABEL_85;
    }
    goto LABEL_191;
  }
LABEL_190:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x324u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_86;
    }
    goto LABEL_192;
  }
LABEL_191:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x385u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_86:
    if ((v6 & 4) == 0) {
      goto LABEL_87;
    }
    goto LABEL_193;
  }
LABEL_192:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 332), 0x386u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 4) == 0)
  {
LABEL_87:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_88;
    }
    goto LABEL_194;
  }
LABEL_193:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 304), 0x3E9u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_89;
    }
    goto LABEL_195;
  }
LABEL_194:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x44Du);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_90;
    }
    goto LABEL_196;
  }
LABEL_195:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x44Eu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_91;
    }
    goto LABEL_197;
  }
LABEL_196:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 347), 0x44Fu);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_198;
  }
LABEL_197:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0x450u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v5 & 0x8000000000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_199;
  }
LABEL_198:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0x451u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_200;
  }
LABEL_199:
  this = PB::Writer::write(a2, *(float *)(v3 + 244), 0x452u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_201;
  }
LABEL_200:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x4B1u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_96;
    }
    goto LABEL_202;
  }
LABEL_201:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 196), 0x4B2u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x8000) == 0)
  {
LABEL_96:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_203;
  }
LABEL_202:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0x515u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_204;
  }
LABEL_203:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 208), 0x516u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_205;
  }
LABEL_204:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x517u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_206;
  }
LABEL_205:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x518u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_207;
  }
LABEL_206:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x519u);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v6 & 0x100) == 0) {
      goto LABEL_102;
    }
    goto LABEL_208;
  }
LABEL_207:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x51Au);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_102:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_103;
    }
    goto LABEL_209;
  }
LABEL_208:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 319), 0x51Bu);
  uint64_t v5 = *v4;
  if ((v4[1] & 0x40000) == 0)
  {
LABEL_103:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_105;
    }
    goto LABEL_104;
  }
LABEL_209:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 329), 0x51Cu);
  if ((*v4 & 0x200000000) != 0) {
LABEL_104:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x51Du);
LABEL_105:
  uint64_t v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0x51Eu);
    uint64_t v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0) {
        goto LABEL_108;
      }
      goto LABEL_213;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x51Fu);
  uint64_t v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0) {
      goto LABEL_109;
    }
    goto LABEL_214;
  }
LABEL_213:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x520u);
  uint64_t v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0) {
      goto LABEL_110;
    }
    goto LABEL_215;
  }
LABEL_214:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x521u);
  uint64_t v7 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_110:
    if ((v7 & 0x2000000000000) == 0) {
      goto LABEL_111;
    }
LABEL_216:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 236), 0x523u);
    if ((*v4 & 0x2000) == 0) {
      return this;
    }
    goto LABEL_217;
  }
LABEL_215:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x522u);
  uint64_t v7 = *v4;
  if ((*v4 & 0x2000000000000) != 0) {
    goto LABEL_216;
  }
LABEL_111:
  if ((v7 & 0x2000) == 0) {
    return this;
  }
LABEL_217:
  float v8 = *(float *)(v3 + 92);

  return PB::Writer::write(a2, v8, 0x524u);
}

uint64_t CMMsl::KappaSevereCrashResult::hash_value(CMMsl::KappaSevereCrashResult *this)
{
  uint64_t v1 = *(void *)((char *)this + 356);
  if ((v1 & 0x800000) != 0)
  {
    float v6 = *((float *)this + 33);
    uint64_t v2 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v2 = 0;
    }
    if ((v1 & 0x400000) != 0)
    {
LABEL_3:
      float v3 = *((float *)this + 32);
      uint64_t v4 = v2;
      uint64_t v5 = LODWORD(v3);
      if (v3 == 0.0) {
        uint64_t v5 = 0;
      }
      uint64_t v153 = v5;
      uint64_t v2 = v4;
      if ((v1 & 0x1000000) != 0) {
        goto LABEL_6;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v153 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_6:
    uint64_t v152 = *((int *)this + 34);
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v152 = 0;
LABEL_12:
  uint64_t v7 = *(void *)((char *)this + 364);
  if ((v1 & 0x10000000000000) == 0)
  {
    uint64_t v151 = 0;
    if (v7) {
      goto LABEL_14;
    }
LABEL_162:
    uint64_t v150 = 0;
    if ((v1 & 0x400000000000000) != 0) {
      goto LABEL_17;
    }
LABEL_163:
    uint64_t v149 = 0;
    if ((v1 & 0x400000000000) != 0) {
      goto LABEL_20;
    }
LABEL_164:
    uint64_t v148 = 0;
    if ((v1 & 0x200000000000) != 0) {
      goto LABEL_23;
    }
LABEL_165:
    uint64_t v147 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_26;
    }
LABEL_166:
    uint64_t v146 = 0;
    if ((v1 & 0x80000000000000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_167;
  }
  uint64_t v151 = *((int *)this + 62);
  if ((v7 & 1) == 0) {
    goto LABEL_162;
  }
LABEL_14:
  float v8 = *((float *)this + 74);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v150 = v9;
  if ((v1 & 0x400000000000000) == 0) {
    goto LABEL_163;
  }
LABEL_17:
  float v10 = *((float *)this + 68);
  uint64_t v11 = LODWORD(v10);
  if (v10 == 0.0) {
    uint64_t v11 = 0;
  }
  uint64_t v149 = v11;
  if ((v1 & 0x400000000000) == 0) {
    goto LABEL_164;
  }
LABEL_20:
  float v12 = *((float *)this + 56);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  uint64_t v148 = v13;
  if ((v1 & 0x200000000000) == 0) {
    goto LABEL_165;
  }
LABEL_23:
  float v14 = *((float *)this + 55);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  uint64_t v147 = v15;
  if ((v1 & 0x200) == 0) {
    goto LABEL_166;
  }
LABEL_26:
  float v16 = *((float *)this + 19);
  uint64_t v17 = LODWORD(v16);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  uint64_t v146 = v17;
  if ((v1 & 0x80000000000000) != 0)
  {
LABEL_29:
    uint64_t v145 = *((unsigned int *)this + 65);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_168;
  }
LABEL_167:
  uint64_t v145 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_30:
    uint64_t v144 = *((unsigned int *)this + 35);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_31;
    }
LABEL_169:
    uint64_t v143 = 0;
    if ((v7 & 8) != 0) {
      goto LABEL_34;
    }
LABEL_170:
    uint64_t v142 = 0;
    if ((v7 & 0x10) != 0) {
      goto LABEL_37;
    }
LABEL_171:
    uint64_t v141 = 0;
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_172;
  }
LABEL_168:
  uint64_t v144 = 0;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_169;
  }
LABEL_31:
  float v18 = *((float *)this + 26);
  uint64_t v19 = LODWORD(v18);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  uint64_t v143 = v19;
  if ((v7 & 8) == 0) {
    goto LABEL_170;
  }
LABEL_34:
  float v20 = *((float *)this + 77);
  uint64_t v21 = LODWORD(v20);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  uint64_t v142 = v21;
  if ((v7 & 0x10) == 0) {
    goto LABEL_171;
  }
LABEL_37:
  float v22 = *((float *)this + 78);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  uint64_t v141 = v23;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_40:
    uint64_t v140 = *((int *)this + 53);
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_173;
  }
LABEL_172:
  uint64_t v140 = 0;
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_41:
    uint64_t v139 = *((int *)this + 51);
    if ((v1 & 0x4000000000000) != 0) {
      goto LABEL_42;
    }
LABEL_174:
    uint64_t v138 = 0;
    if ((v1 & 0x1000000000000000) != 0) {
      goto LABEL_45;
    }
    goto LABEL_175;
  }
LABEL_173:
  uint64_t v139 = 0;
  if ((v1 & 0x4000000000000) == 0) {
    goto LABEL_174;
  }
LABEL_42:
  float v24 = *((float *)this + 60);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  uint64_t v138 = v25;
  if ((v1 & 0x1000000000000000) != 0)
  {
LABEL_45:
    uint64_t v137 = *((unsigned int *)this + 70);
    if ((v7 & 2) != 0) {
      goto LABEL_46;
    }
    goto LABEL_176;
  }
LABEL_175:
  uint64_t v137 = 0;
  if ((v7 & 2) != 0)
  {
LABEL_46:
    uint64_t v136 = *((unsigned int *)this + 75);
    if ((v1 & 0x80) != 0) {
      goto LABEL_47;
    }
    goto LABEL_177;
  }
LABEL_176:
  uint64_t v136 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_47:
    uint64_t v135 = *((void *)this + 8);
    if (v1) {
      goto LABEL_48;
    }
    goto LABEL_178;
  }
LABEL_177:
  uint64_t v135 = 0;
  if (v1)
  {
LABEL_48:
    uint64_t v134 = *((void *)this + 1);
    if ((v7 & 0x40) != 0) {
      goto LABEL_49;
    }
    goto LABEL_179;
  }
LABEL_178:
  uint64_t v134 = 0;
  if ((v7 & 0x40) != 0)
  {
LABEL_49:
    uint64_t v133 = *((unsigned __int8 *)this + 317);
    if ((v7 & 0x80) != 0) {
      goto LABEL_50;
    }
    goto LABEL_180;
  }
LABEL_179:
  uint64_t v133 = 0;
  if ((v7 & 0x80) != 0)
  {
LABEL_50:
    uint64_t v132 = *((unsigned __int8 *)this + 318);
    if ((v7 & 0x8000) != 0) {
      goto LABEL_51;
    }
    goto LABEL_181;
  }
LABEL_180:
  uint64_t v132 = 0;
  if ((v7 & 0x8000) != 0)
  {
LABEL_51:
    uint64_t v131 = *((unsigned __int8 *)this + 326);
    if ((v7 & 0x10000) != 0) {
      goto LABEL_52;
    }
    goto LABEL_182;
  }
LABEL_181:
  uint64_t v131 = 0;
  if ((v7 & 0x10000) != 0)
  {
LABEL_52:
    uint64_t v130 = *((unsigned __int8 *)this + 327);
    if ((v7 & 0x8000000) != 0) {
      goto LABEL_53;
    }
    goto LABEL_183;
  }
LABEL_182:
  uint64_t v130 = 0;
  if ((v7 & 0x8000000) != 0)
  {
LABEL_53:
    uint64_t v129 = *((unsigned __int8 *)this + 338);
    if ((v7 & 0x2000000) != 0) {
      goto LABEL_54;
    }
    goto LABEL_184;
  }
LABEL_183:
  uint64_t v129 = 0;
  if ((v7 & 0x2000000) != 0)
  {
LABEL_54:
    uint64_t v128 = *((unsigned __int8 *)this + 336);
    if ((v7 & 0x1000) != 0) {
      goto LABEL_55;
    }
    goto LABEL_185;
  }
LABEL_184:
  uint64_t v128 = 0;
  if ((v7 & 0x1000) != 0)
  {
LABEL_55:
    uint64_t v127 = *((unsigned __int8 *)this + 323);
    if ((v7 & 0x10000000) != 0) {
      goto LABEL_56;
    }
    goto LABEL_186;
  }
LABEL_185:
  uint64_t v127 = 0;
  if ((v7 & 0x10000000) != 0)
  {
LABEL_56:
    uint64_t v126 = *((unsigned __int8 *)this + 339);
    if ((v7 & 0x20000000) != 0) {
      goto LABEL_57;
    }
    goto LABEL_187;
  }
LABEL_186:
  uint64_t v126 = 0;
  if ((v7 & 0x20000000) != 0)
  {
LABEL_57:
    uint64_t v125 = *((unsigned __int8 *)this + 340);
    if ((v7 & 0x200) != 0) {
      goto LABEL_58;
    }
    goto LABEL_188;
  }
LABEL_187:
  uint64_t v125 = 0;
  if ((v7 & 0x200) != 0)
  {
LABEL_58:
    uint64_t v124 = *((unsigned __int8 *)this + 320);
    if ((v7 & 0x1000000) != 0) {
      goto LABEL_59;
    }
    goto LABEL_189;
  }
LABEL_188:
  uint64_t v124 = 0;
  if ((v7 & 0x1000000) != 0)
  {
LABEL_59:
    uint64_t v123 = *((unsigned __int8 *)this + 335);
    if ((v7 & 0x2000) != 0) {
      goto LABEL_60;
    }
    goto LABEL_190;
  }
LABEL_189:
  uint64_t v123 = 0;
  if ((v7 & 0x2000) != 0)
  {
LABEL_60:
    uint64_t v122 = *((unsigned __int8 *)this + 324);
    if ((v7 & 0x4000000) != 0) {
      goto LABEL_61;
    }
    goto LABEL_191;
  }
LABEL_190:
  uint64_t v122 = 0;
  if ((v7 & 0x4000000) != 0)
  {
LABEL_61:
    uint64_t v121 = *((unsigned __int8 *)this + 337);
    if ((v7 & 0x80000) != 0) {
      goto LABEL_62;
    }
    goto LABEL_192;
  }
LABEL_191:
  uint64_t v121 = 0;
  if ((v7 & 0x80000) != 0)
  {
LABEL_62:
    uint64_t v120 = *((unsigned __int8 *)this + 330);
    if ((v7 & 0x2000000000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_193;
  }
LABEL_192:
  uint64_t v120 = 0;
  if ((v7 & 0x2000000000) != 0)
  {
LABEL_63:
    uint64_t v119 = *((unsigned __int8 *)this + 348);
    if ((v7 & 0x200000000) != 0) {
      goto LABEL_64;
    }
    goto LABEL_194;
  }
LABEL_193:
  uint64_t v119 = 0;
  if ((v7 & 0x200000000) != 0)
  {
LABEL_64:
    uint64_t v118 = *((unsigned __int8 *)this + 344);
    if ((v7 & 0x4000000000) != 0) {
      goto LABEL_65;
    }
    goto LABEL_195;
  }
LABEL_194:
  uint64_t v118 = 0;
  if ((v7 & 0x4000000000) != 0)
  {
LABEL_65:
    uint64_t v117 = *((unsigned __int8 *)this + 349);
    if ((v7 & 0x400000000) != 0) {
      goto LABEL_66;
    }
    goto LABEL_196;
  }
LABEL_195:
  uint64_t v117 = 0;
  if ((v7 & 0x400000000) != 0)
  {
LABEL_66:
    uint64_t v116 = *((unsigned __int8 *)this + 345);
    if ((v7 & 0x40000000) != 0) {
      goto LABEL_67;
    }
    goto LABEL_197;
  }
LABEL_196:
  uint64_t v116 = 0;
  if ((v7 & 0x40000000) != 0)
  {
LABEL_67:
    uint64_t v115 = *((unsigned __int8 *)this + 341);
    if ((v7 & 0x800) != 0) {
      goto LABEL_68;
    }
    goto LABEL_198;
  }
LABEL_197:
  uint64_t v115 = 0;
  if ((v7 & 0x800) != 0)
  {
LABEL_68:
    uint64_t v114 = *((unsigned __int8 *)this + 322);
    if ((v7 & 0x100000) != 0) {
      goto LABEL_69;
    }
    goto LABEL_199;
  }
LABEL_198:
  uint64_t v114 = 0;
  if ((v7 & 0x100000) != 0)
  {
LABEL_69:
    uint64_t v113 = *((unsigned __int8 *)this + 331);
    if ((v7 & 0x8000000000) != 0) {
      goto LABEL_70;
    }
    goto LABEL_200;
  }
LABEL_199:
  uint64_t v113 = 0;
  if ((v7 & 0x8000000000) != 0)
  {
LABEL_70:
    uint64_t v112 = *((unsigned __int8 *)this + 350);
    if ((v7 & 0x800000000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_201;
  }
LABEL_200:
  uint64_t v112 = 0;
  if ((v7 & 0x800000000) != 0)
  {
LABEL_71:
    uint64_t v111 = *((unsigned __int8 *)this + 346);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_72;
    }
    goto LABEL_202;
  }
LABEL_201:
  uint64_t v111 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_72:
    uint64_t v110 = *((unsigned int *)this + 27);
    if ((v7 & 0x400000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_203;
  }
LABEL_202:
  uint64_t v110 = 0;
  if ((v7 & 0x400000) != 0)
  {
LABEL_73:
    uint64_t v109 = *((unsigned __int8 *)this + 333);
    if ((v7 & 0x800000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_204;
  }
LABEL_203:
  uint64_t v109 = 0;
  if ((v7 & 0x800000) != 0)
  {
LABEL_74:
    uint64_t v108 = *((unsigned __int8 *)this + 334);
    if ((v7 & 0x20) != 0) {
      goto LABEL_75;
    }
    goto LABEL_205;
  }
LABEL_204:
  uint64_t v108 = 0;
  if ((v7 & 0x20) != 0)
  {
LABEL_75:
    uint64_t v107 = *((unsigned __int8 *)this + 316);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_76;
    }
    goto LABEL_206;
  }
LABEL_205:
  uint64_t v107 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_76:
    uint64_t v106 = *((unsigned int *)this + 28);
    if ((v7 & 0x40000000000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_207;
  }
LABEL_206:
  uint64_t v106 = 0;
  if ((v7 & 0x40000000000) != 0)
  {
LABEL_77:
    uint64_t v105 = *((unsigned __int8 *)this + 353);
    if ((v7 & 0x10000000000) != 0) {
      goto LABEL_78;
    }
    goto LABEL_208;
  }
LABEL_207:
  uint64_t v105 = 0;
  if ((v7 & 0x10000000000) != 0)
  {
LABEL_78:
    uint64_t v104 = *((unsigned __int8 *)this + 351);
    if ((v7 & 0x20000000000) != 0) {
      goto LABEL_79;
    }
    goto LABEL_209;
  }
LABEL_208:
  uint64_t v104 = 0;
  if ((v7 & 0x20000000000) != 0)
  {
LABEL_79:
    uint64_t v103 = *((unsigned __int8 *)this + 352);
    if ((v7 & 0x100000000) != 0) {
      goto LABEL_80;
    }
    goto LABEL_210;
  }
LABEL_209:
  uint64_t v103 = 0;
  if ((v7 & 0x100000000) != 0)
  {
LABEL_80:
    uint64_t v102 = *((unsigned __int8 *)this + 343);
    if ((v7 & 0x80000000) != 0) {
      goto LABEL_81;
    }
    goto LABEL_211;
  }
LABEL_210:
  uint64_t v102 = 0;
  if ((v7 & 0x80000000) != 0)
  {
LABEL_81:
    uint64_t v101 = *((unsigned __int8 *)this + 342);
    if ((v1 & 0x20000000000000) != 0) {
      goto LABEL_82;
    }
    goto LABEL_212;
  }
LABEL_211:
  uint64_t v101 = 0;
  if ((v1 & 0x20000000000000) != 0)
  {
LABEL_82:
    uint64_t v100 = *((int *)this + 63);
    if ((v1 & 0x40000000000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_213;
  }
LABEL_212:
  uint64_t v100 = 0;
  if ((v1 & 0x40000000000000) != 0)
  {
LABEL_83:
    uint64_t v99 = *((int *)this + 64);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_214;
  }
LABEL_213:
  uint64_t v99 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_84:
    uint64_t v98 = *((int *)this + 36);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_85;
    }
    goto LABEL_215;
  }
LABEL_214:
  uint64_t v98 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_85:
    uint64_t v97 = *((int *)this + 37);
    if ((v7 & 0x20000) != 0) {
      goto LABEL_86;
    }
    goto LABEL_216;
  }
LABEL_215:
  uint64_t v97 = 0;
  if ((v7 & 0x20000) != 0)
  {
LABEL_86:
    uint64_t v96 = *((unsigned __int8 *)this + 328);
    if ((v7 & 0x4000) != 0) {
      goto LABEL_87;
    }
    goto LABEL_217;
  }
LABEL_216:
  uint64_t v96 = 0;
  if ((v7 & 0x4000) != 0)
  {
LABEL_87:
    uint64_t v95 = *((unsigned __int8 *)this + 325);
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_88;
    }
    goto LABEL_218;
  }
LABEL_217:
  uint64_t v95 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_88:
    uint64_t v94 = *((int *)this + 47);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_89;
    }
    goto LABEL_219;
  }
LABEL_218:
  uint64_t v94 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_89:
    uint64_t v93 = *((int *)this + 29);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_90;
    }
    goto LABEL_220;
  }
LABEL_219:
  uint64_t v93 = 0;
  if ((v1 & 0x1000000000) != 0)
  {
LABEL_90:
    uint64_t v92 = *((int *)this + 46);
    if ((v1 & 0x4000000000000000) != 0) {
      goto LABEL_91;
    }
LABEL_221:
    uint64_t v91 = 0;
    if (v1 < 0) {
      goto LABEL_94;
    }
LABEL_222:
    uint64_t v90 = 0;
    if ((v1 & 0x200000000000000) != 0) {
      goto LABEL_97;
    }
LABEL_223:
    uint64_t v89 = 0;
    if ((v1 & 0x800000000000000) != 0) {
      goto LABEL_100;
    }
    goto LABEL_224;
  }
LABEL_220:
  uint64_t v92 = 0;
  if ((v1 & 0x4000000000000000) == 0) {
    goto LABEL_221;
  }
LABEL_91:
  float v26 = *((float *)this + 72);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  uint64_t v91 = v27;
  if ((v1 & 0x8000000000000000) == 0) {
    goto LABEL_222;
  }
LABEL_94:
  float v28 = *((float *)this + 73);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  uint64_t v90 = v29;
  if ((v1 & 0x200000000000000) == 0) {
    goto LABEL_223;
  }
LABEL_97:
  float v30 = *((float *)this + 67);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  uint64_t v89 = v31;
  if ((v1 & 0x800000000000000) != 0)
  {
LABEL_100:
    uint64_t v88 = *((unsigned int *)this + 69);
    if ((v1 & 0x2000000000000000) != 0) {
      goto LABEL_101;
    }
    goto LABEL_225;
  }
LABEL_224:
  uint64_t v88 = 0;
  if ((v1 & 0x2000000000000000) != 0)
  {
LABEL_101:
    uint64_t v87 = *((unsigned int *)this + 71);
    if ((v7 & 0x400) != 0) {
      goto LABEL_102;
    }
    goto LABEL_226;
  }
LABEL_225:
  uint64_t v87 = 0;
  if ((v7 & 0x400) != 0)
  {
LABEL_102:
    uint64_t v86 = *((unsigned __int8 *)this + 321);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_103;
    }
    goto LABEL_227;
  }
LABEL_226:
  uint64_t v86 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_103:
    uint64_t v85 = *((unsigned int *)this + 24);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_104;
    }
LABEL_228:
    uint64_t v84 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_107;
    }
    goto LABEL_229;
  }
LABEL_227:
  uint64_t v85 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_228;
  }
LABEL_104:
  float v32 = *((float *)this + 22);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  uint64_t v84 = v33;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_107:
    uint64_t v83 = *((unsigned int *)this + 54);
    if ((v1 & 0x100000000000000) != 0) {
      goto LABEL_108;
    }
    goto LABEL_230;
  }
LABEL_229:
  uint64_t v83 = 0;
  if ((v1 & 0x100000000000000) != 0)
  {
LABEL_108:
    uint64_t v82 = *((unsigned int *)this + 66);
    if ((v1 & 0x40) != 0) {
      goto LABEL_109;
    }
    goto LABEL_231;
  }
LABEL_230:
  uint64_t v82 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_109:
    uint64_t v81 = *((void *)this + 7);
    if ((v1 & 0x800000000000) != 0) {
      goto LABEL_110;
    }
    goto LABEL_232;
  }
LABEL_231:
  uint64_t v81 = 0;
  if ((v1 & 0x800000000000) != 0)
  {
LABEL_110:
    uint64_t v80 = *((int *)this + 57);
    if ((v1 & 0x1000000000000) != 0) {
      goto LABEL_111;
    }
    goto LABEL_233;
  }
LABEL_232:
  uint64_t v80 = 0;
  if ((v1 & 0x1000000000000) != 0)
  {
LABEL_111:
    uint64_t v79 = *((int *)this + 58);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_112;
    }
LABEL_234:
    uint64_t v78 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_115;
    }
LABEL_235:
    uint64_t v77 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_118;
    }
LABEL_236:
    uint64_t v76 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_121;
    }
LABEL_237:
    uint64_t v75 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_124;
    }
LABEL_238:
    uint64_t v74 = 0;
    if ((v7 & 0x200000) != 0) {
      goto LABEL_127;
    }
    goto LABEL_239;
  }
LABEL_233:
  uint64_t v79 = 0;
  if ((v1 & 0x100000) == 0) {
    goto LABEL_234;
  }
LABEL_112:
  float v34 = *((float *)this + 30);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  uint64_t v78 = v35;
  if ((v1 & 0x400) == 0) {
    goto LABEL_235;
  }
LABEL_115:
  float v36 = *((float *)this + 20);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  uint64_t v77 = v37;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_236;
  }
LABEL_118:
  float v38 = *((float *)this + 31);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  uint64_t v76 = v39;
  if ((v1 & 0x800) == 0) {
    goto LABEL_237;
  }
LABEL_121:
  float v40 = *((float *)this + 21);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  uint64_t v75 = v41;
  if ((v1 & 0x100) == 0) {
    goto LABEL_238;
  }
LABEL_124:
  float v42 = *((float *)this + 18);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  uint64_t v74 = v43;
  if ((v7 & 0x200000) != 0)
  {
LABEL_127:
    uint64_t v44 = *((unsigned __int8 *)this + 332);
    if ((v7 & 4) != 0) {
      goto LABEL_128;
    }
    goto LABEL_240;
  }
LABEL_239:
  uint64_t v44 = 0;
  if ((v7 & 4) != 0)
  {
LABEL_128:
    uint64_t v45 = *((int *)this + 76);
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_129;
    }
    goto LABEL_241;
  }
LABEL_240:
  uint64_t v45 = 0;
  if ((v1 & 0x10000000) != 0)
  {
LABEL_129:
    uint64_t v46 = *((int *)this + 38);
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_130;
    }
    goto LABEL_242;
  }
LABEL_241:
  uint64_t v46 = 0;
  if ((v1 & 0x40000000) != 0)
  {
LABEL_130:
    uint64_t v47 = *((int *)this + 40);
    if ((v7 & 0x1000000000) != 0) {
      goto LABEL_131;
    }
    goto LABEL_243;
  }
LABEL_242:
  uint64_t v47 = 0;
  if ((v7 & 0x1000000000) != 0)
  {
LABEL_131:
    uint64_t v48 = *((unsigned __int8 *)this + 347);
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_132;
    }
    goto LABEL_244;
  }
LABEL_243:
  uint64_t v48 = 0;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_132:
    uint64_t v49 = *((unsigned int *)this + 41);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_133;
    }
    goto LABEL_245;
  }
LABEL_244:
  uint64_t v49 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_133:
    uint64_t v50 = *((unsigned int *)this + 39);
    if ((v1 & 0x8000000000000) != 0) {
      goto LABEL_134;
    }
LABEL_246:
    uint64_t v52 = 0;
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_138;
    }
    goto LABEL_247;
  }
LABEL_245:
  uint64_t v50 = 0;
  if ((v1 & 0x8000000000000) == 0) {
    goto LABEL_246;
  }
LABEL_134:
  float v51 = *((float *)this + 61);
  if (v51 == 0.0) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = LODWORD(v51);
  }
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_138:
    uint64_t v53 = *((int *)this + 48);
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_139;
    }
    goto LABEL_248;
  }
LABEL_247:
  uint64_t v53 = 0;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_139:
    uint64_t v54 = *((int *)this + 49);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_140;
    }
LABEL_249:
    uint64_t v56 = 0;
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_144;
    }
    goto LABEL_250;
  }
LABEL_248:
  uint64_t v54 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_249;
  }
LABEL_140:
  float v55 = *((float *)this + 25);
  if (v55 == 0.0) {
    uint64_t v56 = 0;
  }
  else {
    uint64_t v56 = LODWORD(v55);
  }
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_144:
    uint64_t v57 = *((int *)this + 52);
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_145;
    }
    goto LABEL_251;
  }
LABEL_250:
  uint64_t v57 = 0;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_145:
    uint64_t v58 = *((int *)this + 50);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_146;
    }
    goto LABEL_252;
  }
LABEL_251:
  uint64_t v58 = 0;
  if ((v1 & 0x800000000) != 0)
  {
LABEL_146:
    uint64_t v59 = *((int *)this + 45);
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_147;
    }
    goto LABEL_253;
  }
LABEL_252:
  uint64_t v59 = 0;
  if ((v1 & 0x100000000) != 0)
  {
LABEL_147:
    uint64_t v60 = *((int *)this + 42);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_148;
    }
    goto LABEL_254;
  }
LABEL_253:
  uint64_t v60 = 0;
  if ((v1 & 0x400000000) != 0)
  {
LABEL_148:
    uint64_t v61 = *((int *)this + 44);
    if ((v7 & 0x100) != 0) {
      goto LABEL_149;
    }
    goto LABEL_255;
  }
LABEL_254:
  uint64_t v61 = 0;
  if ((v7 & 0x100) != 0)
  {
LABEL_149:
    uint64_t v62 = *((unsigned __int8 *)this + 319);
    if ((v7 & 0x40000) != 0) {
      goto LABEL_150;
    }
    goto LABEL_256;
  }
LABEL_255:
  uint64_t v62 = 0;
  if ((v7 & 0x40000) != 0)
  {
LABEL_150:
    uint64_t v63 = *((unsigned __int8 *)this + 329);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_151;
    }
    goto LABEL_257;
  }
LABEL_256:
  uint64_t v63 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_151:
    uint64_t v64 = *((int *)this + 43);
    if ((v1 & 2) != 0) {
      goto LABEL_152;
    }
    goto LABEL_258;
  }
LABEL_257:
  uint64_t v64 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_152:
    uint64_t v65 = *((void *)this + 2);
    if ((v1 & 0x20) != 0) {
      goto LABEL_153;
    }
    goto LABEL_259;
  }
LABEL_258:
  uint64_t v65 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_153:
    uint64_t v66 = *((void *)this + 6);
    if ((v1 & 4) != 0) {
      goto LABEL_154;
    }
    goto LABEL_260;
  }
LABEL_259:
  uint64_t v66 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_154:
    uint64_t v67 = *((void *)this + 3);
    if ((v1 & 8) != 0) {
      goto LABEL_155;
    }
    goto LABEL_261;
  }
LABEL_260:
  uint64_t v67 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_155:
    uint64_t v68 = *((void *)this + 4);
    if ((v1 & 0x10) != 0) {
      goto LABEL_156;
    }
    goto LABEL_262;
  }
LABEL_261:
  uint64_t v68 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_156:
    uint64_t v69 = *((void *)this + 5);
    if ((v1 & 0x2000000000000) != 0) {
      goto LABEL_157;
    }
    goto LABEL_263;
  }
LABEL_262:
  uint64_t v69 = 0;
  if ((v1 & 0x2000000000000) != 0)
  {
LABEL_157:
    uint64_t v70 = *((int *)this + 59);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_158;
    }
LABEL_264:
    uint64_t v72 = 0;
    return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
  }
LABEL_263:
  uint64_t v70 = 0;
  if ((v1 & 0x2000) == 0) {
    goto LABEL_264;
  }
LABEL_158:
  float v71 = *((float *)this + 23);
  uint64_t v72 = LODWORD(v71);
  if (v71 == 0.0) {
    uint64_t v72 = 0;
  }
  return v153 ^ v2 ^ v152 ^ v151 ^ v150 ^ v149 ^ v148 ^ v147 ^ v146 ^ v145 ^ v144 ^ v143 ^ v142 ^ v141 ^ v140 ^ v139 ^ v138 ^ v137 ^ v136 ^ v135 ^ v134 ^ v133 ^ v132 ^ v131 ^ v130 ^ v129 ^ v128 ^ v127 ^ v126 ^ v125 ^ v124 ^ v123 ^ v122 ^ v121 ^ v120 ^ v119 ^ v118 ^ v117 ^ v116 ^ v115 ^ v114 ^ v113 ^ v112 ^ v111 ^ v110 ^ v109 ^ v108 ^ v107 ^ v106 ^ v105 ^ v104 ^ v103 ^ v102 ^ v101 ^ v100 ^ v99 ^ v98 ^ v97 ^ v96 ^ v95 ^ v94 ^ v93 ^ v92 ^ v91 ^ v90 ^ v89 ^ v88 ^ v87 ^ v86 ^ v85 ^ v84 ^ v83 ^ v82 ^ v81 ^ v80 ^ v79 ^ v78 ^ v77 ^ v76 ^ v75 ^ v74 ^ v44 ^ v45 ^ v46 ^ v47 ^ v48 ^ v49 ^ v50 ^ v52 ^ v53 ^ v54 ^ v56 ^ v57 ^ v58 ^ v59 ^ v60 ^ v61 ^ v62 ^ v63 ^ v64 ^ v65 ^ v66 ^ v67 ^ v68 ^ v69 ^ v70 ^ v72;
}

void CMMsl::KappaSpinResult::~KappaSpinResult(CMMsl::KappaSpinResult *this)
{
  *(void *)this = off_1003A6EB8;
  uint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  float v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 11) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 7);
  if (v4)
  {
    *((void *)this + 8) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 1);
  if (v6)
  {
    *((void *)this + 2) = v6;
    operator delete(v6);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaSpinResult::~KappaSpinResult(this);

  operator delete();
}

CMMsl::KappaSpinResult *CMMsl::KappaSpinResult::KappaSpinResult(CMMsl::KappaSpinResult *this, const CMMsl::KappaSpinResult *a2)
{
  *(void *)this = off_1003A6EB8;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  float v6 = (char *)this + 104;
  *((_DWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 15) = 0;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x1000) != 0)
  {
    int v9 = *((_DWORD *)a2 + 49);
    __int16 v8 = 4096;
    *((_WORD *)this + 102) = 4096;
    *((_DWORD *)this + 49) = v9;
    __int16 v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v8 = 0;
  if ((*((_WORD *)a2 + 102) & 0x800) != 0)
  {
LABEL_5:
    int v10 = *((_DWORD *)a2 + 48);
    v8 |= 0x800u;
    *((_WORD *)this + 102) = v8;
    *((_DWORD *)this + 48) = v10;
    __int16 v7 = *((_WORD *)a2 + 102);
  }
LABEL_6:
  if ((v7 & 0x10) != 0)
  {
    uint64_t v13 = *((void *)a2 + 20);
    v8 |= 0x10u;
    *((_WORD *)this + 102) = v8;
    *((void *)this + 20) = v13;
    __int16 v7 = *((_WORD *)a2 + 102);
    if ((v7 & 0x4000) == 0)
    {
LABEL_8:
      if ((v7 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v7 & 0x4000) == 0)
  {
    goto LABEL_8;
  }
  char v14 = *((unsigned char *)a2 + 201);
  v8 |= 0x4000u;
  *((_WORD *)this + 102) = v8;
  *((unsigned char *)this + 201) = v14;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x400) == 0)
  {
LABEL_9:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v15 = *((_DWORD *)a2 + 47);
  v8 |= 0x400u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 47) = v15;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x2000) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v16 = *((unsigned char *)a2 + 200);
  v8 |= 0x2000u;
  *((_WORD *)this + 102) = v8;
  *((unsigned char *)this + 200) = v16;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v17 = *((void *)a2 + 18);
  v8 |= 4u;
  *((_WORD *)this + 102) = v8;
  *((void *)this + 18) = v17;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v18 = *((void *)a2 + 19);
  v8 |= 8u;
  *((_WORD *)this + 102) = v8;
  *((void *)this + 19) = v18;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x100) == 0)
  {
LABEL_13:
    if ((v7 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v19 = *((_DWORD *)a2 + 45);
  v8 |= 0x100u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 45) = v19;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x80) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v20 = *((_DWORD *)a2 + 44);
  v8 |= 0x80u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 44) = v20;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v21 = *((_DWORD *)a2 + 43);
  v8 |= 0x40u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 43) = v21;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 1) == 0)
  {
LABEL_16:
    if ((v7 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v22 = *((void *)a2 + 16);
  v8 |= 1u;
  *((_WORD *)this + 102) = v8;
  *((void *)this + 16) = v22;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 2) == 0)
  {
LABEL_17:
    if ((v7 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v23 = *((void *)a2 + 17);
  v8 |= 2u;
  *((_WORD *)this + 102) = v8;
  *((void *)this + 17) = v23;
  __int16 v7 = *((_WORD *)a2 + 102);
  if ((v7 & 0x200) == 0)
  {
LABEL_18:
    if ((v7 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_34:
  int v24 = *((_DWORD *)a2 + 46);
  v8 |= 0x200u;
  *((_WORD *)this + 102) = v8;
  *((_DWORD *)this + 46) = v24;
  if ((*((_WORD *)a2 + 102) & 0x20) != 0)
  {
LABEL_19:
    int v11 = *((_DWORD *)a2 + 42);
    *((_WORD *)this + 102) = v8 | 0x20;
    *((_DWORD *)this + 42) = v11;
  }
LABEL_20:
  if (this != a2)
  {
    sub_1000330C4((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3);
    sub_1000330C4(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, const CMMsl::KappaSpinResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((CMMsl::KappaSpinResult *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSpinResult *a2, CMMsl::KappaSpinResult *a3)
{
  int v3 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v3;
  uint64_t v4 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 201);
  *((unsigned char *)this + 201) = *((unsigned char *)a2 + 201);
  *((unsigned char *)a2 + 201) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 200);
  *((unsigned char *)this + 200) = *((unsigned char *)a2 + 200);
  *((unsigned char *)a2 + 200) = v4;
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v5;
  uint64_t v6 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v9;
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v10;
  uint64_t v11 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v11;
  uint64_t v13 = *((void *)this + 15);
  uint64_t v12 = *((void *)this + 16);
  uint64_t v14 = *((void *)a2 + 16);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)this + 16) = v14;
  *((void *)a2 + 16) = v12;
  uint64_t v15 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  int v16 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v16;
  int v17 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v17;
  int v18 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v18;
  int v19 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v19;
  int v20 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v20;
  int v21 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v21;
  *((_DWORD *)a2 + 46) = v15;
  float result = *((float *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((float *)a2 + 42) = result;
  *((void *)a2 + 15) = v13;
  uint64_t v23 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v23;
  uint64_t v24 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v24;
  uint64_t v25 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v25;
  uint64_t v26 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v26;
  uint64_t v27 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v27;
  uint64_t v28 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v28;
  uint64_t v29 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v29;
  uint64_t v30 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v30;
  uint64_t v31 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v31;
  return result;
}

uint64_t CMMsl::KappaSpinResult::KappaSpinResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6EB8;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a2 + 204) = 0;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

CMMsl *CMMsl::KappaSpinResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaSpinResult::KappaSpinResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaSpinResult *)v5, v3);
    CMMsl::KappaSpinResult::~KappaSpinResult((CMMsl::KappaSpinResult *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaSpinResult::formatText(CMMsl::KappaSpinResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "deltaGravity", *((float *)this + 42));
    __int16 v5 = *((_WORD *)this + 102);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 16));
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 17));
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "isSlowRollDetected", *((unsigned char *)this + 200));
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "isSpinDetected", *((unsigned char *)this + 201));
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "maxDeltaAngleLong", *((float *)this + 43));
  __int16 v5 = *((_WORD *)this + 102);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "maxDeltaAngleShort", *((float *)this + 44));
  if ((*((_WORD *)this + 102) & 0x100) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(a2, "slowRollCumCoherentAngle", *((float *)this + 45));
LABEL_10:
  uint64_t v6 = (float *)*((void *)this + 1);
  uint64_t v7 = (float *)*((void *)this + 2);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxAxisVariance", v8);
  }
  uint64_t v9 = (float *)*((void *)this + 4);
  uint64_t v10 = (float *)*((void *)this + 5);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(a2, "slowRollSegmentMaxFiltRotRate", v11);
  }
  uint64_t v12 = (float *)*((void *)this + 7);
  uint64_t v13 = (float *)*((void *)this + 8);
  while (v12 != v13)
  {
    float v14 = *v12++;
    PB::TextFormatter::format(a2, "slowRollSegmentMinFiltRotRate", v14);
  }
  uint64_t v15 = (unint64_t *)*((void *)this + 10);
  int v16 = (unint64_t *)*((void *)this + 11);
  while (v15 != v16)
  {
    unint64_t v17 = *v15++;
    PB::TextFormatter::format(a2, "slowRollSegmentStartTimes", v17);
  }
  int v18 = (unint64_t *)*((void *)this + 13);
  int v19 = (unint64_t *)*((void *)this + 14);
  while (v18 != v19)
  {
    unint64_t v20 = *v18++;
    PB::TextFormatter::format(a2, "slowRollSegmentStopTimes", v20);
  }
  __int16 v21 = *((_WORD *)this + 102);
  if ((v21 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "slowRollStartTime", *((void *)this + 18));
    __int16 v21 = *((_WORD *)this + 102);
    if ((v21 & 8) == 0)
    {
LABEL_22:
      if ((v21 & 0x200) == 0) {
        goto LABEL_23;
      }
      goto LABEL_41;
    }
  }
  else if ((v21 & 8) == 0)
  {
    goto LABEL_22;
  }
  PB::TextFormatter::format(a2, "slowRollStopTime", *((void *)this + 19));
  __int16 v21 = *((_WORD *)this + 102);
  if ((v21 & 0x200) == 0)
  {
LABEL_23:
    if ((v21 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "spatialSamplingCount", *((_DWORD *)this + 46));
  __int16 v21 = *((_WORD *)this + 102);
  if ((v21 & 0x400) == 0)
  {
LABEL_24:
    if ((v21 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "spinCumulativeRotation", *((float *)this + 47));
  __int16 v21 = *((_WORD *)this + 102);
  if ((v21 & 0x800) == 0)
  {
LABEL_25:
    if ((v21 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "spinCumulativeRotationThresholdDegrees", *((float *)this + 48));
  __int16 v21 = *((_WORD *)this + 102);
  if ((v21 & 0x1000) == 0)
  {
LABEL_26:
    if ((v21 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "spinGravityAngleThresholdDegrees", *((float *)this + 49));
  if ((*((_WORD *)this + 102) & 0x10) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 20));
LABEL_28:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaSpinResult::readFrom(CMMsl::KappaSpinResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)((char *)this + 32);
    uint64_t v9 = (void **)((char *)this + 56);
    BOOL v281 = (char *)this + 72;
    unint64_t v282 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 8);
    float v11 = (char *)this + 24;
    uint64_t v12 = (void *)((char *)this + 120);
    unint64_t v279 = (void **)((char *)this + 80);
    int v280 = (void **)((char *)this + 104);
    uint64_t v13 = (void *)((char *)this + 96);
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v102 = v16++ > 8;
        if (v102) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v17 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v26 = v17 >> 3;
      if ((int)(v17 >> 3) > 200)
      {
        switch((int)v26)
        {
          case 201:
            *((_WORD *)this + 102) |= 1u;
            unint64_t v35 = *((void *)a2 + 1);
            unint64_t v36 = *((void *)a2 + 2);
            uint64_t v37 = *(void *)a2;
            if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
            {
              char v38 = 0;
              unsigned int v39 = 0;
              uint64_t v40 = 0;
              do
              {
                unint64_t v41 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v42 = *(unsigned char *)(v37 + v35);
                v40 |= (unint64_t)(v42 & 0x7F) << v38;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_368;
                }
                v38 += 7;
                unint64_t v35 = v41;
                BOOL v102 = v39++ > 8;
              }
              while (!v102);
LABEL_271:
              uint64_t v40 = 0;
              goto LABEL_368;
            }
            char v183 = 0;
            unsigned int v184 = 0;
            uint64_t v40 = 0;
            if (v36 <= v35) {
              unint64_t v36 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v36 == v35)
              {
                uint64_t v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v185 = v35 + 1;
                char v186 = *(unsigned char *)(v37 + v35);
                *((void *)a2 + 1) = v185;
                v40 |= (unint64_t)(v186 & 0x7F) << v183;
                if (v186 < 0)
                {
                  v183 += 7;
                  unint64_t v35 = v185;
                  BOOL v102 = v184++ > 8;
                  if (v102) {
                    goto LABEL_271;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v40 = 0;
                }
              }
              break;
            }
LABEL_368:
            *((void *)this + 16) = v40;
            goto LABEL_455;
          case 202:
            *((_WORD *)this + 102) |= 2u;
            unint64_t v72 = *((void *)a2 + 1);
            unint64_t v73 = *((void *)a2 + 2);
            uint64_t v74 = *(void *)a2;
            if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
            {
              char v75 = 0;
              unsigned int v76 = 0;
              uint64_t v77 = 0;
              do
              {
                unint64_t v78 = v72 + 1;
                *((void *)a2 + 1) = v72 + 1;
                char v79 = *(unsigned char *)(v74 + v72);
                v77 |= (unint64_t)(v79 & 0x7F) << v75;
                if ((v79 & 0x80) == 0) {
                  goto LABEL_377;
                }
                v75 += 7;
                unint64_t v72 = v78;
                BOOL v102 = v76++ > 8;
              }
              while (!v102);
LABEL_296:
              uint64_t v77 = 0;
              goto LABEL_377;
            }
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v77 = 0;
            if (v73 <= v72) {
              unint64_t v73 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v73 == v72)
              {
                uint64_t v77 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v197 = v72 + 1;
                char v198 = *(unsigned char *)(v74 + v72);
                *((void *)a2 + 1) = v197;
                v77 |= (unint64_t)(v198 & 0x7F) << v195;
                if (v198 < 0)
                {
                  v195 += 7;
                  unint64_t v72 = v197;
                  BOOL v102 = v196++ > 8;
                  if (v102) {
                    goto LABEL_296;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v77 = 0;
                }
              }
              break;
            }
LABEL_377:
            *((void *)this + 17) = v77;
            goto LABEL_455;
          case 203:
            *((_WORD *)this + 102) |= 0x200u;
            unint64_t v80 = *((void *)a2 + 1);
            unint64_t v81 = *((void *)a2 + 2);
            uint64_t v82 = *(void *)a2;
            if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
            {
              char v83 = 0;
              unsigned int v84 = 0;
              uint64_t v85 = 0;
              do
              {
                unint64_t v86 = v80 + 1;
                *((void *)a2 + 1) = v80 + 1;
                char v87 = *(unsigned char *)(v82 + v80);
                v85 |= (unint64_t)(v87 & 0x7F) << v83;
                if ((v87 & 0x80) == 0) {
                  goto LABEL_380;
                }
                v83 += 7;
                unint64_t v80 = v86;
                BOOL v102 = v84++ > 8;
              }
              while (!v102);
LABEL_303:
              LODWORD(v85) = 0;
              goto LABEL_380;
            }
            char v199 = 0;
            unsigned int v200 = 0;
            uint64_t v85 = 0;
            if (v81 <= v80) {
              unint64_t v81 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v81 == v80)
              {
                LODWORD(v85) = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v201 = v80 + 1;
                char v202 = *(unsigned char *)(v82 + v80);
                *((void *)a2 + 1) = v201;
                v85 |= (unint64_t)(v202 & 0x7F) << v199;
                if (v202 < 0)
                {
                  v199 += 7;
                  unint64_t v80 = v201;
                  BOOL v102 = v200++ > 8;
                  if (v102) {
                    goto LABEL_303;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v85) = 0;
                }
              }
              break;
            }
LABEL_380:
            *((_DWORD *)this + 46) = v85;
            goto LABEL_455;
          case 204:
            *((_WORD *)this + 102) |= 0x20u;
            unint64_t v88 = *((void *)a2 + 1);
            if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((void *)a2 + 2)) {
              break;
            }
            *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v88);
            goto LABEL_454;
          case 205:
            if (v25 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
              {
                uint64_t v89 = (char *)*((void *)this + 11);
                do
                {
                  if ((unint64_t)v89 >= *v13)
                  {
                    uint64_t v90 = (char *)*v279;
                    uint64_t v91 = (v89 - (unsigned char *)*v279) >> 3;
                    unint64_t v92 = v91 + 1;
                    if ((unint64_t)(v91 + 1) >> 61) {
                      goto LABEL_468;
                    }
                    uint64_t v93 = *v13 - (void)v90;
                    if (v93 >> 2 > v92) {
                      unint64_t v92 = v93 >> 2;
                    }
                    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v94 = v92;
                    }
                    if (v94)
                    {
                      uint64_t v95 = (char *)sub_10000EEB0((uint64_t)v13, v94);
                      uint64_t v90 = (char *)*((void *)this + 10);
                      uint64_t v89 = (char *)*((void *)this + 11);
                    }
                    else
                    {
                      uint64_t v95 = 0;
                    }
                    uint64_t v96 = &v95[8 * v91];
                    *(void *)uint64_t v96 = 0;
                    uint64_t v97 = v96 + 8;
                    while (v89 != v90)
                    {
                      uint64_t v98 = *((void *)v89 - 1);
                      v89 -= 8;
                      *((void *)v96 - 1) = v98;
                      v96 -= 8;
                    }
                    *((void *)this + 10) = v96;
                    *((void *)this + 11) = v97;
                    *((void *)this + 12) = &v95[8 * v94];
                    if (v90) {
                      operator delete(v90);
                    }
                    uint64_t v89 = v97;
                  }
                  else
                  {
                    *(void *)uint64_t v89 = 0;
                    v89 += 8;
                  }
                  *((void *)this + 11) = v89;
                  unint64_t v100 = *((void *)a2 + 1);
                  unint64_t v99 = *((void *)a2 + 2);
                  uint64_t v101 = *(void *)a2;
                  BOOL v102 = v100 > 0xFFFFFFFFFFFFFFF5 || v100 + 10 > v99;
                  if (v102)
                  {
                    char v103 = 0;
                    unsigned int v104 = 0;
                    uint64_t v110 = 0;
                    if (v99 <= v100) {
                      uint64_t v105 = *((void *)a2 + 1);
                    }
                    else {
                      uint64_t v105 = *((void *)a2 + 2);
                    }
                    while (1)
                    {
                      if (v105 == v100) {
                        goto LABEL_315;
                      }
                      unint64_t v106 = v100++;
                      char v107 = *(unsigned char *)(v101 + v106);
                      *((void *)a2 + 1) = v100;
                      v110 |= (unint64_t)(v107 & 0x7F) << v103;
                      if ((v107 & 0x80) == 0) {
                        break;
                      }
                      v103 += 7;
                      BOOL v102 = v104++ > 8;
                      if (v102)
                      {
                        uint64_t v110 = 0;
                        goto LABEL_132;
                      }
                    }
                    if (*((unsigned char *)a2 + 24)) {
                      uint64_t v110 = 0;
                    }
LABEL_132:
                    unint64_t v111 = v106 + 1;
                  }
                  else
                  {
                    char v108 = 0;
                    unsigned int v109 = 0;
                    uint64_t v110 = 0;
                    while (1)
                    {
                      unint64_t v111 = v100 + 1;
                      *((void *)a2 + 1) = v100 + 1;
                      char v112 = *(unsigned char *)(v101 + v100);
                      v110 |= (unint64_t)(v112 & 0x7F) << v108;
                      if ((v112 & 0x80) == 0) {
                        break;
                      }
                      v108 += 7;
                      unint64_t v100 = v111;
                      BOOL v102 = v109++ > 8;
                      if (v102)
                      {
                        uint64_t v110 = 0;
                        break;
                      }
                    }
                  }
                  *((void *)v89 - 1) = v110;
                }
                while (v111 < v99 && !*((unsigned char *)a2 + 24));
              }
              goto LABEL_316;
            }
            uint64_t v204 = (char *)*((void *)this + 11);
            unint64_t v203 = *((void *)this + 12);
            if ((unint64_t)v204 >= v203)
            {
              uint64_t v215 = (char *)*v279;
              uint64_t v216 = (v204 - (unsigned char *)*v279) >> 3;
              unint64_t v217 = v216 + 1;
              if ((unint64_t)(v216 + 1) >> 61) {
LABEL_468:
              }
                sub_10000EE98();
              uint64_t v218 = v203 - (void)v215;
              if (v218 >> 2 > v217) {
                unint64_t v217 = v218 >> 2;
              }
              if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v219 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v219 = v217;
              }
              if (v219)
              {
                int v220 = (char *)sub_10000EEB0((uint64_t)v13, v219);
                uint64_t v215 = (char *)*((void *)this + 10);
                uint64_t v204 = (char *)*((void *)this + 11);
              }
              else
              {
                int v220 = 0;
              }
              char v245 = &v220[8 * v216];
              *(void *)char v245 = 0;
              char v205 = v245 + 8;
              while (v204 != v215)
              {
                uint64_t v246 = *((void *)v204 - 1);
                v204 -= 8;
                *((void *)v245 - 1) = v246;
                v245 -= 8;
              }
              *((void *)this + 10) = v245;
              *((void *)this + 11) = v205;
              *((void *)this + 12) = &v220[8 * v219];
              if (v215) {
                operator delete(v215);
              }
            }
            else
            {
              *(void *)uint64_t v204 = 0;
              char v205 = v204 + 8;
            }
            *((void *)this + 11) = v205;
            unint64_t v247 = *((void *)a2 + 1);
            unint64_t v248 = *((void *)a2 + 2);
            uint64_t v249 = *(void *)a2;
            char v250 = 0;
            unsigned int v251 = 0;
            if (v247 <= 0xFFFFFFFFFFFFFFF5 && v247 + 10 <= v248)
            {
              uint64_t v255 = 0;
              while (1)
              {
                unint64_t v256 = v247 + 1;
                *((void *)a2 + 1) = v247 + 1;
                char v257 = *(unsigned char *)(v249 + v247);
                v255 |= (unint64_t)(v257 & 0x7F) << v250;
                if ((v257 & 0x80) == 0) {
                  goto LABEL_428;
                }
                v250 += 7;
                unint64_t v247 = v256;
                BOOL v102 = v251++ > 8;
                if (v102) {
                  goto LABEL_424;
                }
              }
            }
            uint64_t v255 = 0;
            if (v248 <= v247) {
              unint64_t v248 = *((void *)a2 + 1);
            }
            while (v248 != v247)
            {
              unint64_t v253 = v247 + 1;
              char v254 = *(unsigned char *)(v249 + v247);
              *((void *)a2 + 1) = v253;
              v255 |= (unint64_t)(v254 & 0x7F) << v250;
              if ((v254 & 0x80) == 0) {
                goto LABEL_426;
              }
              v250 += 7;
              unint64_t v247 = v253;
              BOOL v102 = v251++ > 8;
              if (v102) {
                goto LABEL_424;
              }
            }
            goto LABEL_425;
          case 206:
            if (v25 != 2)
            {
              uint64_t v207 = (char *)*((void *)this + 14);
              unint64_t v206 = *((void *)this + 15);
              if ((unint64_t)v207 >= v206)
              {
                BOOL v221 = (char *)*v280;
                uint64_t v222 = (v207 - (unsigned char *)*v280) >> 3;
                unint64_t v223 = v222 + 1;
                if ((unint64_t)(v222 + 1) >> 61) {
LABEL_469:
                }
                  sub_10000EE98();
                uint64_t v224 = v206 - (void)v221;
                if (v224 >> 2 > v223) {
                  unint64_t v223 = v224 >> 2;
                }
                if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v225 = v223;
                }
                if (v225)
                {
                  unint64_t v226 = (char *)sub_10000EEB0((uint64_t)v12, v225);
                  BOOL v221 = (char *)*((void *)this + 13);
                  uint64_t v207 = (char *)*((void *)this + 14);
                }
                else
                {
                  unint64_t v226 = 0;
                }
                unint64_t v258 = &v226[8 * v222];
                *(void *)unint64_t v258 = 0;
                char v205 = v258 + 8;
                while (v207 != v221)
                {
                  uint64_t v259 = *((void *)v207 - 1);
                  v207 -= 8;
                  *((void *)v258 - 1) = v259;
                  v258 -= 8;
                }
                *((void *)this + 13) = v258;
                *((void *)this + 14) = v205;
                *((void *)this + 15) = &v226[8 * v225];
                if (v221) {
                  operator delete(v221);
                }
              }
              else
              {
                *(void *)uint64_t v207 = 0;
                char v205 = v207 + 8;
              }
              *((void *)this + 14) = v205;
              unint64_t v260 = *((void *)a2 + 1);
              unint64_t v261 = *((void *)a2 + 2);
              uint64_t v262 = *(void *)a2;
              char v263 = 0;
              unsigned int v264 = 0;
              if (v260 > 0xFFFFFFFFFFFFFFF5 || v260 + 10 > v261)
              {
                uint64_t v255 = 0;
                if (v261 <= v260) {
                  unint64_t v261 = *((void *)a2 + 1);
                }
                while (v261 != v260)
                {
                  unint64_t v266 = v260 + 1;
                  char v267 = *(unsigned char *)(v262 + v260);
                  *((void *)a2 + 1) = v266;
                  v255 |= (unint64_t)(v267 & 0x7F) << v263;
                  if ((v267 & 0x80) == 0)
                  {
LABEL_426:
                    if (*((unsigned char *)a2 + 24)) {
                      uint64_t v255 = 0;
                    }
                    goto LABEL_428;
                  }
                  v263 += 7;
                  unint64_t v260 = v266;
                  BOOL v102 = v264++ > 8;
                  if (v102)
                  {
LABEL_424:
                    uint64_t v255 = 0;
                    goto LABEL_428;
                  }
                }
LABEL_425:
                uint64_t v255 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                uint64_t v255 = 0;
                while (1)
                {
                  unint64_t v268 = v260 + 1;
                  *((void *)a2 + 1) = v260 + 1;
                  char v269 = *(unsigned char *)(v262 + v260);
                  v255 |= (unint64_t)(v269 & 0x7F) << v263;
                  if ((v269 & 0x80) == 0) {
                    break;
                  }
                  v263 += 7;
                  unint64_t v260 = v268;
                  BOOL v102 = v264++ > 8;
                  if (v102) {
                    goto LABEL_424;
                  }
                }
              }
LABEL_428:
              *(v205 - 1) = v255;
              goto LABEL_455;
            }
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              uint64_t v89 = (char *)*((void *)this + 14);
              do
              {
                if ((unint64_t)v89 >= *v12)
                {
                  uint64_t v113 = (char *)*v280;
                  uint64_t v114 = (v89 - (unsigned char *)*v280) >> 3;
                  unint64_t v115 = v114 + 1;
                  if ((unint64_t)(v114 + 1) >> 61) {
                    goto LABEL_469;
                  }
                  uint64_t v116 = *v12 - (void)v113;
                  if (v116 >> 2 > v115) {
                    unint64_t v115 = v116 >> 2;
                  }
                  if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v117 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v117 = v115;
                  }
                  if (v117)
                  {
                    uint64_t v118 = (char *)sub_10000EEB0((uint64_t)v12, v117);
                    uint64_t v113 = (char *)*((void *)this + 13);
                    uint64_t v89 = (char *)*((void *)this + 14);
                  }
                  else
                  {
                    uint64_t v118 = 0;
                  }
                  uint64_t v119 = &v118[8 * v114];
                  *(void *)uint64_t v119 = 0;
                  uint64_t v120 = v119 + 8;
                  while (v89 != v113)
                  {
                    uint64_t v121 = *((void *)v89 - 1);
                    v89 -= 8;
                    *((void *)v119 - 1) = v121;
                    v119 -= 8;
                  }
                  *((void *)this + 13) = v119;
                  *((void *)this + 14) = v120;
                  *((void *)this + 15) = &v118[8 * v117];
                  if (v113) {
                    operator delete(v113);
                  }
                  uint64_t v89 = v120;
                }
                else
                {
                  *(void *)uint64_t v89 = 0;
                  v89 += 8;
                }
                *((void *)this + 14) = v89;
                unint64_t v123 = *((void *)a2 + 1);
                unint64_t v122 = *((void *)a2 + 2);
                uint64_t v124 = *(void *)a2;
                if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v122)
                {
                  char v131 = 0;
                  unsigned int v132 = 0;
                  uint64_t v133 = 0;
                  while (1)
                  {
                    unint64_t v134 = v123 + 1;
                    *((void *)a2 + 1) = v123 + 1;
                    char v135 = *(unsigned char *)(v124 + v123);
                    v133 |= (unint64_t)(v135 & 0x7F) << v131;
                    if ((v135 & 0x80) == 0) {
                      goto LABEL_178;
                    }
                    v131 += 7;
                    unint64_t v123 = v134;
                    BOOL v102 = v132++ > 8;
                    if (v102)
                    {
                      uint64_t v133 = 0;
                      goto LABEL_178;
                    }
                  }
                }
                char v126 = 0;
                unsigned int v127 = 0;
                uint64_t v133 = 0;
                if (v122 <= v123) {
                  uint64_t v128 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v128 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v128 == v123)
                  {
LABEL_315:
                    *((unsigned char *)a2 + 24) = 1;
                    *((void *)v89 - 1) = 0;
                    goto LABEL_316;
                  }
                  unint64_t v129 = v123++;
                  char v130 = *(unsigned char *)(v124 + v129);
                  *((void *)a2 + 1) = v123;
                  v133 |= (unint64_t)(v130 & 0x7F) << v126;
                  if ((v130 & 0x80) == 0) {
                    break;
                  }
                  v126 += 7;
                  BOOL v102 = v127++ > 8;
                  if (v102)
                  {
                    uint64_t v133 = 0;
                    goto LABEL_177;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v133 = 0;
                }
LABEL_177:
                unint64_t v134 = v129 + 1;
LABEL_178:
                *((void *)v89 - 1) = v133;
              }
              while (v134 < v122 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_316;
          case 207:
            if (v25 != 2)
            {
              char v209 = (char *)*((void *)this + 2);
              unint64_t v208 = *((void *)this + 3);
              if ((unint64_t)v209 >= v208)
              {
                unint64_t v227 = (char *)*v10;
                uint64_t v228 = (v209 - (unsigned char *)*v10) >> 2;
                unint64_t v229 = v228 + 1;
                if ((unint64_t)(v228 + 1) >> 62) {
LABEL_465:
                }
                  sub_10000EE98();
                uint64_t v230 = v208 - (void)v227;
                if (v230 >> 1 > v229) {
                  unint64_t v229 = v230 >> 1;
                }
                if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v231 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v231 = v229;
                }
                if (v231)
                {
                  unint64_t v232 = (char *)sub_100024458((uint64_t)v11, v231);
                  unint64_t v227 = (char *)*((void *)this + 1);
                  char v209 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v232 = 0;
                }
                unint64_t v270 = &v232[4 * v228];
                *(_DWORD *)unint64_t v270 = 0;
                unint64_t v210 = v270 + 4;
                while (v209 != v227)
                {
                  int v271 = *((_DWORD *)v209 - 1);
                  v209 -= 4;
                  *((_DWORD *)v270 - 1) = v271;
                  v270 -= 4;
                }
                *((void *)this + 1) = v270;
                *((void *)this + 2) = v210;
                *((void *)this + 3) = &v232[4 * v231];
                if (v227) {
                  operator delete(v227);
                }
              }
              else
              {
                *(_DWORD *)char v209 = 0;
                unint64_t v210 = v209 + 4;
              }
              *((void *)this + 2) = v210;
              goto LABEL_450;
            }
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v136 = *((void *)a2 + 1);
            unint64_t v137 = *((void *)a2 + 2);
            while (v136 < v137 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v139 = (char *)*((void *)this + 2);
              unint64_t v138 = *((void *)this + 3);
              if ((unint64_t)v139 >= v138)
              {
                uint64_t v141 = (char *)*v10;
                uint64_t v142 = (v139 - (unsigned char *)*v10) >> 2;
                unint64_t v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62) {
                  goto LABEL_465;
                }
                uint64_t v144 = v138 - (void)v141;
                if (v144 >> 1 > v143) {
                  unint64_t v143 = v144 >> 1;
                }
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v145 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v145 = v143;
                }
                if (v145)
                {
                  uint64_t v146 = (char *)sub_100024458((uint64_t)v11, v145);
                  uint64_t v141 = (char *)*((void *)this + 1);
                  uint64_t v139 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v146 = 0;
                }
                uint64_t v147 = &v146[4 * v142];
                *(_DWORD *)uint64_t v147 = 0;
                uint64_t v140 = v147 + 4;
                while (v139 != v141)
                {
                  int v148 = *((_DWORD *)v139 - 1);
                  v139 -= 4;
                  *((_DWORD *)v147 - 1) = v148;
                  v147 -= 4;
                }
                *((void *)this + 1) = v147;
                *((void *)this + 2) = v140;
                *((void *)this + 3) = &v146[4 * v145];
                if (v141) {
                  operator delete(v141);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v139 = 0;
                uint64_t v140 = v139 + 4;
              }
              *((void *)this + 2) = v140;
              unint64_t v149 = *((void *)a2 + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((void *)a2 + 2)) {
                goto LABEL_314;
              }
              *(v140 - 1) = *(_DWORD *)(*(void *)a2 + v149);
              unint64_t v137 = *((void *)a2 + 2);
              unint64_t v136 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v136;
            }
            goto LABEL_316;
          case 208:
            if (v25 != 2)
            {
              uint64_t v212 = (char *)*((void *)this + 8);
              unint64_t v211 = *((void *)this + 9);
              if ((unint64_t)v212 >= v211)
              {
                char v233 = (char *)*v9;
                uint64_t v234 = (v212 - (unsigned char *)*v9) >> 2;
                unint64_t v235 = v234 + 1;
                if ((unint64_t)(v234 + 1) >> 62) {
LABEL_466:
                }
                  sub_10000EE98();
                uint64_t v236 = v211 - (void)v233;
                if (v236 >> 1 > v235) {
                  unint64_t v235 = v236 >> 1;
                }
                if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v237 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v237 = v235;
                }
                if (v237)
                {
                  unsigned int v238 = (char *)sub_100024458((uint64_t)v281, v237);
                  char v233 = (char *)*((void *)this + 7);
                  uint64_t v212 = (char *)*((void *)this + 8);
                }
                else
                {
                  unsigned int v238 = 0;
                }
                int v272 = &v238[4 * v234];
                *(_DWORD *)int v272 = 0;
                unint64_t v210 = v272 + 4;
                while (v212 != v233)
                {
                  int v273 = *((_DWORD *)v212 - 1);
                  v212 -= 4;
                  *((_DWORD *)v272 - 1) = v273;
                  v272 -= 4;
                }
                *((void *)this + 7) = v272;
                *((void *)this + 8) = v210;
                *((void *)this + 9) = &v238[4 * v237];
                if (v233) {
                  operator delete(v233);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v212 = 0;
                unint64_t v210 = v212 + 4;
              }
              *((void *)this + 8) = v210;
              goto LABEL_450;
            }
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v150 = *((void *)a2 + 1);
            unint64_t v151 = *((void *)a2 + 2);
            while (v150 < v151 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v153 = (char *)*((void *)this + 8);
              unint64_t v152 = *((void *)this + 9);
              if ((unint64_t)v153 >= v152)
              {
                uint64_t v155 = (char *)*v9;
                uint64_t v156 = (v153 - (unsigned char *)*v9) >> 2;
                unint64_t v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 62) {
                  goto LABEL_466;
                }
                uint64_t v158 = v152 - (void)v155;
                if (v158 >> 1 > v157) {
                  unint64_t v157 = v158 >> 1;
                }
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v159 = v157;
                }
                if (v159)
                {
                  unint64_t v160 = (char *)sub_100024458((uint64_t)v281, v159);
                  uint64_t v155 = (char *)*((void *)this + 7);
                  uint64_t v153 = (char *)*((void *)this + 8);
                }
                else
                {
                  unint64_t v160 = 0;
                }
                unint64_t v161 = &v160[4 * v156];
                *(_DWORD *)unint64_t v161 = 0;
                unsigned int v154 = v161 + 4;
                while (v153 != v155)
                {
                  int v162 = *((_DWORD *)v153 - 1);
                  v153 -= 4;
                  *((_DWORD *)v161 - 1) = v162;
                  v161 -= 4;
                }
                *((void *)this + 7) = v161;
                *((void *)this + 8) = v154;
                *((void *)this + 9) = &v160[4 * v159];
                if (v155) {
                  operator delete(v155);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v153 = 0;
                unsigned int v154 = v153 + 4;
              }
              *((void *)this + 8) = v154;
              unint64_t v163 = *((void *)a2 + 1);
              if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((void *)a2 + 2)) {
                goto LABEL_314;
              }
              *(v154 - 1) = *(_DWORD *)(*(void *)a2 + v163);
              unint64_t v151 = *((void *)a2 + 2);
              unint64_t v150 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v150;
            }
            goto LABEL_316;
          case 209:
            if (v25 == 2)
            {
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v164 = *((void *)a2 + 1);
              unint64_t v165 = *((void *)a2 + 2);
              while (v164 < v165 && !*((unsigned char *)a2 + 24))
              {
                unint64_t v167 = (char *)*((void *)this + 5);
                unint64_t v166 = *((void *)this + 6);
                if ((unint64_t)v167 >= v166)
                {
                  unint64_t v169 = (char *)*v8;
                  uint64_t v170 = (v167 - (unsigned char *)*v8) >> 2;
                  unint64_t v171 = v170 + 1;
                  if ((unint64_t)(v170 + 1) >> 62) {
                    goto LABEL_467;
                  }
                  uint64_t v172 = v166 - (void)v169;
                  if (v172 >> 1 > v171) {
                    unint64_t v171 = v172 >> 1;
                  }
                  if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v173 = v171;
                  }
                  if (v173)
                  {
                    uint64_t v174 = (char *)sub_100024458((uint64_t)v282, v173);
                    unint64_t v169 = (char *)*((void *)this + 4);
                    unint64_t v167 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    uint64_t v174 = 0;
                  }
                  unint64_t v175 = &v174[4 * v170];
                  *(_DWORD *)unint64_t v175 = 0;
                  char v168 = v175 + 4;
                  while (v167 != v169)
                  {
                    int v176 = *((_DWORD *)v167 - 1);
                    v167 -= 4;
                    *((_DWORD *)v175 - 1) = v176;
                    v175 -= 4;
                  }
                  *((void *)this + 4) = v175;
                  *((void *)this + 5) = v168;
                  *((void *)this + 6) = &v174[4 * v173];
                  if (v169) {
                    operator delete(v169);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v167 = 0;
                  char v168 = v167 + 4;
                }
                *((void *)this + 5) = v168;
                unint64_t v177 = *((void *)a2 + 1);
                if (v177 > 0xFFFFFFFFFFFFFFFBLL || v177 + 4 > *((void *)a2 + 2))
                {
LABEL_314:
                  *((unsigned char *)a2 + 24) = 1;
                  break;
                }
                *(v168 - 1) = *(_DWORD *)(*(void *)a2 + v177);
                unint64_t v165 = *((void *)a2 + 2);
                unint64_t v164 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v164;
              }
LABEL_316:
              PB::Reader::recallMark();
              goto LABEL_455;
            }
            unsigned int v214 = (char *)*((void *)this + 5);
            unint64_t v213 = *((void *)this + 6);
            if ((unint64_t)v214 >= v213)
            {
              uint64_t v239 = (char *)*v8;
              uint64_t v240 = (v214 - (unsigned char *)*v8) >> 2;
              unint64_t v241 = v240 + 1;
              if ((unint64_t)(v240 + 1) >> 62) {
LABEL_467:
              }
                sub_10000EE98();
              uint64_t v242 = v213 - (void)v239;
              if (v242 >> 1 > v241) {
                unint64_t v241 = v242 >> 1;
              }
              if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v243 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v243 = v241;
              }
              if (v243)
              {
                uint64_t v244 = (char *)sub_100024458((uint64_t)v282, v243);
                uint64_t v239 = (char *)*((void *)this + 4);
                unsigned int v214 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v244 = 0;
              }
              unint64_t v274 = &v244[4 * v240];
              *(_DWORD *)unint64_t v274 = 0;
              unint64_t v210 = v274 + 4;
              while (v214 != v239)
              {
                int v275 = *((_DWORD *)v214 - 1);
                v214 -= 4;
                *((_DWORD *)v274 - 1) = v275;
                v274 -= 4;
              }
              *((void *)this + 4) = v274;
              *((void *)this + 5) = v210;
              *((void *)this + 6) = &v244[4 * v243];
              if (v239) {
                operator delete(v239);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v214 = 0;
              unint64_t v210 = v214 + 4;
            }
            *((void *)this + 5) = v210;
LABEL_450:
            unint64_t v276 = *((void *)a2 + 1);
            if (v276 <= 0xFFFFFFFFFFFFFFFBLL && v276 + 4 <= *((void *)a2 + 2))
            {
              *(v210 - 1) = *(_DWORD *)(*(void *)a2 + v276);
              goto LABEL_454;
            }
            break;
          default:
            goto LABEL_256;
        }
      }
      else
      {
        switch((int)v26)
        {
          case 'e':
            *((_WORD *)this + 102) |= 0x10u;
            unint64_t v27 = *((void *)a2 + 1);
            unint64_t v28 = *((void *)a2 + 2);
            uint64_t v29 = *(void *)a2;
            if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
            {
              char v30 = 0;
              unsigned int v31 = 0;
              uint64_t v32 = 0;
              do
              {
                unint64_t v33 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v34 = *(unsigned char *)(v29 + v27);
                v32 |= (unint64_t)(v34 & 0x7F) << v30;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_365;
                }
                v30 += 7;
                unint64_t v27 = v33;
                BOOL v102 = v31++ > 8;
              }
              while (!v102);
LABEL_264:
              uint64_t v32 = 0;
              goto LABEL_365;
            }
            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v32 = 0;
            if (v28 <= v27) {
              unint64_t v28 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v28 == v27)
              {
                uint64_t v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v181 = v27 + 1;
                char v182 = *(unsigned char *)(v29 + v27);
                *((void *)a2 + 1) = v181;
                v32 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  unint64_t v27 = v181;
                  BOOL v102 = v180++ > 8;
                  if (v102) {
                    goto LABEL_264;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v32 = 0;
                }
              }
              break;
            }
LABEL_365:
            *((void *)this + 20) = v32;
            goto LABEL_455;
          case 'f':
            *((_WORD *)this + 102) |= 0x4000u;
            unint64_t v44 = *((void *)a2 + 1);
            if (v44 >= *((void *)a2 + 2))
            {
              BOOL v47 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v45 = v44 + 1;
              int v46 = *(unsigned __int8 *)(*(void *)a2 + v44);
              *((void *)a2 + 1) = v45;
              BOOL v47 = v46 != 0;
            }
            *((unsigned char *)this + 201) = v47;
            goto LABEL_455;
          case 'g':
            *((_WORD *)this + 102) |= 0x400u;
            unint64_t v48 = *((void *)a2 + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)a2 + 2)) {
              break;
            }
            *((_DWORD *)this + 47) = *(_DWORD *)(*(void *)a2 + v48);
            goto LABEL_454;
          case 'h':
            *((_WORD *)this + 102) |= 0x2000u;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 >= *((void *)a2 + 2))
            {
              BOOL v52 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v50 = v49 + 1;
              int v51 = *(unsigned __int8 *)(*(void *)a2 + v49);
              *((void *)a2 + 1) = v50;
              BOOL v52 = v51 != 0;
            }
            *((unsigned char *)this + 200) = v52;
            goto LABEL_455;
          case 'i':
            *((_WORD *)this + 102) |= 4u;
            unint64_t v53 = *((void *)a2 + 1);
            unint64_t v54 = *((void *)a2 + 2);
            uint64_t v55 = *(void *)a2;
            if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
            {
              char v56 = 0;
              unsigned int v57 = 0;
              uint64_t v58 = 0;
              do
              {
                unint64_t v59 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v60 = *(unsigned char *)(v55 + v53);
                v58 |= (unint64_t)(v60 & 0x7F) << v56;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_371;
                }
                v56 += 7;
                unint64_t v53 = v59;
                BOOL v102 = v57++ > 8;
              }
              while (!v102);
LABEL_282:
              uint64_t v58 = 0;
              goto LABEL_371;
            }
            char v187 = 0;
            unsigned int v188 = 0;
            uint64_t v58 = 0;
            if (v54 <= v53) {
              unint64_t v54 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v54 == v53)
              {
                uint64_t v58 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v189 = v53 + 1;
                char v190 = *(unsigned char *)(v55 + v53);
                *((void *)a2 + 1) = v189;
                v58 |= (unint64_t)(v190 & 0x7F) << v187;
                if (v190 < 0)
                {
                  v187 += 7;
                  unint64_t v53 = v189;
                  BOOL v102 = v188++ > 8;
                  if (v102) {
                    goto LABEL_282;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v58 = 0;
                }
              }
              break;
            }
LABEL_371:
            *((void *)this + 18) = v58;
            goto LABEL_455;
          case 'j':
            *((_WORD *)this + 102) |= 8u;
            unint64_t v61 = *((void *)a2 + 1);
            unint64_t v62 = *((void *)a2 + 2);
            uint64_t v63 = *(void *)a2;
            if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
            {
              char v64 = 0;
              unsigned int v65 = 0;
              uint64_t v66 = 0;
              do
              {
                unint64_t v67 = v61 + 1;
                *((void *)a2 + 1) = v61 + 1;
                char v68 = *(unsigned char *)(v63 + v61);
                v66 |= (unint64_t)(v68 & 0x7F) << v64;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_374;
                }
                v64 += 7;
                unint64_t v61 = v67;
                BOOL v102 = v65++ > 8;
              }
              while (!v102);
LABEL_289:
              uint64_t v66 = 0;
              goto LABEL_374;
            }
            char v191 = 0;
            unsigned int v192 = 0;
            uint64_t v66 = 0;
            if (v62 <= v61) {
              unint64_t v62 = *((void *)a2 + 1);
            }
            while (2)
            {
              if (v62 == v61)
              {
                uint64_t v66 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v193 = v61 + 1;
                char v194 = *(unsigned char *)(v63 + v61);
                *((void *)a2 + 1) = v193;
                v66 |= (unint64_t)(v194 & 0x7F) << v191;
                if (v194 < 0)
                {
                  v191 += 7;
                  unint64_t v61 = v193;
                  BOOL v102 = v192++ > 8;
                  if (v102) {
                    goto LABEL_289;
                  }
                  continue;
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v66 = 0;
                }
              }
              break;
            }
LABEL_374:
            *((void *)this + 19) = v66;
            goto LABEL_455;
          case 'k':
            *((_WORD *)this + 102) |= 0x100u;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              break;
            }
            *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v69);
            goto LABEL_454;
          case 'l':
            *((_WORD *)this + 102) |= 0x80u;
            unint64_t v70 = *((void *)a2 + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)a2 + 2)) {
              break;
            }
            *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v70);
            goto LABEL_454;
          case 'm':
            *((_WORD *)this + 102) |= 0x40u;
            unint64_t v71 = *((void *)a2 + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)a2 + 2)) {
              break;
            }
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v71);
            goto LABEL_454;
          default:
            if (v26 == 1)
            {
              *((_WORD *)this + 102) |= 0x1000u;
              unint64_t v178 = *((void *)a2 + 1);
              if (v178 <= 0xFFFFFFFFFFFFFFFBLL && v178 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v178);
                goto LABEL_454;
              }
            }
            else
            {
              if (v26 != 2)
              {
LABEL_256:
                if ((PB::Reader::skip(a2, v26, v25, 0) & 1) == 0) {
                  return 0;
                }
                goto LABEL_455;
              }
              *((_WORD *)this + 102) |= 0x800u;
              unint64_t v43 = *((void *)a2 + 1);
              if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 48) = *(_DWORD *)(*(void *)a2 + v43);
LABEL_454:
                *((void *)a2 + 1) += 4;
                goto LABEL_455;
              }
            }
            break;
        }
      }
      *((unsigned char *)a2 + 24) = 1;
LABEL_455:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaSpinResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 204);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(this + 196), 1u);
    __int16 v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((*(_WORD *)(this + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 192), 2u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 160), 0x65u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 201), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 188), 0x67u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 200), 0x68u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 144), 0x69u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 152), 0x6Au);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x6Bu);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0x6Cu);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x6Du);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 128), 0xC9u);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
LABEL_46:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0xCBu);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 136), 0xCAu);
  __int16 v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0) {
    goto LABEL_46;
  }
LABEL_15:
  if ((v4 & 0x20) != 0) {
LABEL_16:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xCCu);
LABEL_17:
  __int16 v5 = *(unint64_t **)(v3 + 80);
  uint64_t v6 = *(unint64_t **)(v3 + 88);
  while (v5 != v6)
  {
    unint64_t v7 = *v5++;
    this = PB::Writer::writeVarInt(a2, v7, 0xCDu);
  }
  float v8 = *(unint64_t **)(v3 + 104);
  uint64_t v9 = *(unint64_t **)(v3 + 112);
  while (v8 != v9)
  {
    unint64_t v10 = *v8++;
    this = PB::Writer::writeVarInt(a2, v10, 0xCEu);
  }
  float v11 = *(float **)(v3 + 8);
  uint64_t v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 0xCFu);
  }
  uint64_t v14 = *(float **)(v3 + 56);
  char v15 = *(float **)(v3 + 64);
  while (v14 != v15)
  {
    float v16 = *v14++;
    this = PB::Writer::write(a2, v16, 0xD0u);
  }
  unint64_t v18 = *(float **)(v3 + 32);
  unint64_t v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    float v19 = *v18++;
    this = PB::Writer::write(a2, v19, 0xD1u);
  }
  return this;
}

uint64_t CMMsl::KappaSpinResult::hash_value(CMMsl::KappaSpinResult *this)
{
  __int16 v2 = *((_WORD *)this + 102);
  if ((v2 & 0x1000) == 0)
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 102) & 0x800) != 0) {
      goto LABEL_3;
    }
LABEL_32:
    uint64_t v5 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
  float v24 = *((float *)this + 49);
  uint64_t v3 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((_WORD *)this + 102) & 0x800) == 0) {
    goto LABEL_32;
  }
LABEL_3:
  float v4 = *((float *)this + 48);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v2 & 0x10) != 0)
  {
LABEL_6:
    uint64_t v6 = *((void *)this + 20);
    if ((*((_WORD *)this + 102) & 0x4000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 102) & 0x4000) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 201);
    if ((*((_WORD *)this + 102) & 0x400) != 0) {
      goto LABEL_8;
    }
LABEL_35:
    uint64_t v9 = 0;
    if ((*((_WORD *)this + 102) & 0x2000) != 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_34:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 102) & 0x400) == 0) {
    goto LABEL_35;
  }
LABEL_8:
  float v8 = *((float *)this + 47);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((_WORD *)this + 102) & 0x2000) != 0)
  {
LABEL_11:
    uint64_t v10 = *((unsigned __int8 *)this + 200);
    if ((v2 & 4) != 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v10 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_12:
    uint64_t v11 = *((void *)this + 18);
    if ((v2 & 8) != 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t v11 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_13:
    uint64_t v12 = *((void *)this + 19);
    if ((*((_WORD *)this + 102) & 0x100) != 0) {
      goto LABEL_14;
    }
LABEL_39:
    uint64_t v14 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_17;
    }
LABEL_40:
    uint64_t v16 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_20;
    }
LABEL_41:
    uint64_t v18 = 0;
    if (v2) {
      goto LABEL_23;
    }
    goto LABEL_42;
  }
LABEL_38:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 102) & 0x100) == 0) {
    goto LABEL_39;
  }
LABEL_14:
  float v13 = *((float *)this + 45);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_40;
  }
LABEL_17:
  float v15 = *((float *)this + 44);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_20:
  float v17 = *((float *)this + 43);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if (v2)
  {
LABEL_23:
    uint64_t v19 = *((void *)this + 16);
    if ((v2 & 2) != 0) {
      goto LABEL_24;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v19 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_24:
    uint64_t v20 = *((void *)this + 17);
    if ((v2 & 0x200) != 0) {
      goto LABEL_25;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v20 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_25:
    uint64_t v21 = *((int *)this + 46);
    if ((v2 & 0x20) != 0) {
      goto LABEL_26;
    }
LABEL_45:
    uint64_t v23 = 0;
    goto LABEL_46;
  }
LABEL_44:
  uint64_t v21 = 0;
  if ((v2 & 0x20) == 0) {
    goto LABEL_45;
  }
LABEL_26:
  float v22 = *((float *)this + 42);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
LABEL_46:
  uint64_t v25 = v5 ^ v3 ^ v6 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ PBHashBytes();
  uint64_t v26 = PBHashBytes();
  uint64_t v27 = v25 ^ v26 ^ PBHashBytes();
  uint64_t v28 = PBHashBytes();
  return v27 ^ v28 ^ PBHashBytes();
}

void CMMsl::KappaSteps::~KappaSteps(CMMsl::KappaSteps *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaSteps::KappaSteps(uint64_t this, const CMMsl::KappaSteps *a2)
{
  *(void *)this = off_1003A6EF0;
  *(_DWORD *)(this + 32) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 32) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 28) = v5;
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *(unsigned char *)(this + 32) = v3;
    *(_DWORD *)(this + 20) = v6;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return this;
      }
LABEL_12:
      int v8 = *((_DWORD *)a2 + 6);
      *(unsigned char *)(this + 32) = v3 | 8;
      *(_DWORD *)(this + 24) = v8;
      return this;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(unsigned char *)(this + 32) = v3;
  *(_DWORD *)(this + 16) = v7;
  if ((*((unsigned char *)a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return this;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, const CMMsl::KappaSteps *a2)
{
  if ((const CMMsl::KappaSteps *)a1 != a2)
  {
    CMMsl::KappaSteps::KappaSteps((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v8;
    uint64_t v8 = v3;
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v9;
    int v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v10;
    long long v10 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaSteps *a2, CMMsl::KappaSteps *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  return result;
}

float CMMsl::KappaSteps::KappaSteps(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6EF0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A6EF0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t CMMsl::KappaSteps::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 16);
    long long v5 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 32) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v10[0] = off_1003A6EF0;
    v10[1] = v6;
    int v7 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v4;
    int v11 = v7;
    long long v8 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v5;
    long long v12 = v8;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::KappaSteps::formatText(CMMsl::KappaSteps *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 7));
  if (*((unsigned char *)this + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaSteps::readFrom(CMMsl::KappaSteps *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 32) |= 1u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *((void *)this + 1) = v24;
              goto LABEL_104;
            case 2u:
              *((unsigned char *)this + 32) |= 0x10u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *((_DWORD *)this + 7) = v31;
              goto LABEL_104;
            case 3u:
              *((unsigned char *)this + 32) |= 4u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *((_DWORD *)this + 5) = v37;
              goto LABEL_104;
            case 4u:
              *((unsigned char *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *((unsigned char *)this + 32) |= 8u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *((_DWORD *)this + 6) = v43;
LABEL_104:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaSteps::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_11:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 5u);
}

uint64_t CMMsl::KappaSteps::hash_value(CMMsl::KappaSteps *this)
{
  if (*((unsigned char *)this + 32))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 32) & 0x10) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 7);
      if ((*((unsigned char *)this + 32) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 32) & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((unsigned int *)this + 5);
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_5:
    float v4 = *((float *)this + 4);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v6 = 0;
    return v2 ^ v1 ^ v3 ^ v5 ^ v6;
  }
LABEL_12:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v6 = *((unsigned int *)this + 6);
  return v2 ^ v1 ^ v3 ^ v5 ^ v6;
}

void CMMsl::KappaStepsResult::~KappaStepsResult(CMMsl::KappaStepsResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaStepsResult::KappaStepsResult(uint64_t this, const CMMsl::KappaStepsResult *a2)
{
  *(void *)this = off_1003A6F28;
  *(_DWORD *)(this + 60) = 0;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 8) != 0)
  {
    uint64_t v4 = *((void *)a2 + 4);
    __int16 v3 = 8;
    *(_WORD *)(this + 60) = 8;
    *(void *)(this + 32) = v4;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 30) & 0x100) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 56);
    v3 |= 0x100u;
    *(_WORD *)(this + 60) = v3;
    *(unsigned char *)(this + 56) = v5;
    __int16 v2 = *((_WORD *)a2 + 30);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    int v6 = *((_DWORD *)a2 + 13);
    v3 |= 0x80u;
    *(_WORD *)(this + 60) = v3;
    *(_DWORD *)(this + 52) = v6;
    __int16 v2 = *((_WORD *)a2 + 30);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 11);
  v3 |= 0x20u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 44) = v7;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x10u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *((_DWORD *)a2 + 12);
  v3 |= 0x40u;
  *(_WORD *)(this + 60) = v3;
  *(_DWORD *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v10 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 24) = v10;
  __int16 v2 = *((_WORD *)a2 + 30);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_20:
    uint64_t v12 = *((void *)a2 + 2);
    *(_WORD *)(this + 60) = v3 | 2;
    *(void *)(this + 16) = v12;
    return this;
  }
LABEL_19:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 60) = v3;
  *(void *)(this + 8) = v11;
  if ((*((_WORD *)a2 + 30) & 2) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, const CMMsl::KappaStepsResult *a2)
{
  if ((const CMMsl::KappaStepsResult *)a1 != a2)
  {
    CMMsl::KappaStepsResult::KappaStepsResult((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    int v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaStepsResult *a2, CMMsl::KappaStepsResult *a3)
{
  int v3 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 56);
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  *((unsigned char *)a2 + 56) = v4;
  int v5 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v5;
  int v6 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  float result = *((float *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((float *)a2 + 10) = result;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  return result;
}

float CMMsl::KappaStepsResult::KappaStepsResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6F28;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  float result = *(float *)(a2 + 40);
  *(float *)(a1 + 40) = result;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KappaStepsResult::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaStepsResult::KappaStepsResult((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 60);
    *(_DWORD *)(a1 + 60) = v17;
    int v17 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 56);
    *(unsigned char *)(a1 + 56) = v16;
    char v16 = v3;
    int v4 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v15;
    int v15 = v4;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v13;
    uint64_t v13 = v5;
    int v6 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 48) = v14;
    int v14 = v6;
    long long v7 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v8;
    PB::Base::~Base((PB::Base *)&v10);
  }
  return a1;
}

uint64_t CMMsl::KappaStepsResult::formatText(CMMsl::KappaStepsResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "currentCadence", *((float *)this + 10));
    __int16 v5 = *((_WORD *)this + 30);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "deltaSteps", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "hasSteps", *((unsigned char *)this + 56));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "pedometerArmConstrainedState", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "stepCount", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 30);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "stepCountEventTimestamp", *((void *)this + 3));
  if ((*((_WORD *)this + 30) & 8) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 4));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaStepsResult::readFrom(CMMsl::KappaStepsResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *((_WORD *)this + 30) |= 8u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v54 = 0;
                unsigned int v55 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v56 = v21++;
                  char v57 = *(unsigned char *)(v22 + v56);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0) {
                    break;
                  }
                  v54 += 7;
                  BOOL v14 = v55++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
LABEL_114:
                unint64_t v2 = v56 + 1;
              }
              else
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                do
                {
                  unint64_t v2 = v21 + 1;
                  *((void *)a2 + 1) = v21 + 1;
                  char v26 = *(unsigned char *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_115;
                  }
                  v23 += 7;
                  unint64_t v21 = v2;
                  BOOL v14 = v24++ > 8;
                }
                while (!v14);
                uint64_t v25 = 0;
              }
LABEL_115:
              *((void *)this + 4) = v25;
              goto LABEL_136;
            case 'f':
              *((_WORD *)this + 30) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 56) = v34;
              goto LABEL_136;
            case 'g':
              *((_WORD *)this + 30) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_110;
            case 'h':
              *((_WORD *)this + 30) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_110;
            case 'i':
              *((_WORD *)this + 30) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_110:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_48:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_136;
            case 'j':
              *((_WORD *)this + 30) |= 0x40u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v62 = 0;
                unsigned int v63 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_125;
                  }
                  unint64_t v64 = v35++;
                  char v65 = *(unsigned char *)(v36 + v64);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0) {
                    break;
                  }
                  v62 += 7;
                  BOOL v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_124:
                    unint64_t v2 = v64 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_124;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_125;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_125:
              *((_DWORD *)this + 12) = v39;
              goto LABEL_136;
            case 'k':
              *((_WORD *)this + 30) |= 4u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v66 = 0;
                unsigned int v67 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v68 = v41++;
                  char v69 = *(unsigned char *)(v42 + v68);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0) {
                    break;
                  }
                  v66 += 7;
                  BOOL v14 = v67++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_129:
                    unint64_t v2 = v68 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_129;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_130:
              *((void *)this + 3) = v45;
              goto LABEL_136;
            default:
              if (v20 == 201)
              {
                *((_WORD *)this + 30) |= 1u;
                unint64_t v47 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v48 = *(void *)a2;
                if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
                {
                  char v70 = 0;
                  unsigned int v71 = 0;
                  uint64_t v51 = 0;
                  if (v2 <= v47) {
                    unint64_t v2 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v2 == v47)
                    {
                      uint64_t v51 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_135;
                    }
                    unint64_t v72 = v47++;
                    char v73 = *(unsigned char *)(v48 + v72);
                    *((void *)a2 + 1) = v47;
                    v51 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0) {
                      break;
                    }
                    v70 += 7;
                    BOOL v14 = v71++ > 8;
                    if (v14)
                    {
                      uint64_t v51 = 0;
                      goto LABEL_134;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v51 = 0;
                  }
LABEL_134:
                  unint64_t v2 = v72 + 1;
                }
                else
                {
                  char v49 = 0;
                  unsigned int v50 = 0;
                  uint64_t v51 = 0;
                  while (1)
                  {
                    unint64_t v2 = v47 + 1;
                    *((void *)a2 + 1) = v47 + 1;
                    char v52 = *(unsigned char *)(v48 + v47);
                    v51 |= (unint64_t)(v52 & 0x7F) << v49;
                    if ((v52 & 0x80) == 0) {
                      break;
                    }
                    v49 += 7;
                    unint64_t v47 = v2;
                    BOOL v14 = v50++ > 8;
                    if (v14)
                    {
                      uint64_t v51 = 0;
                      break;
                    }
                  }
                }
LABEL_135:
                *((void *)this + 1) = v51;
              }
              else if (v20 == 202)
              {
                *((_WORD *)this + 30) |= 2u;
                unint64_t v27 = *((void *)a2 + 1);
                unint64_t v2 = *((void *)a2 + 2);
                uint64_t v28 = *(void *)a2;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  char v58 = 0;
                  unsigned int v59 = 0;
                  uint64_t v31 = 0;
                  if (v2 <= v27) {
                    unint64_t v2 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v2 == v27)
                    {
                      uint64_t v31 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_120;
                    }
                    unint64_t v60 = v27++;
                    char v61 = *(unsigned char *)(v28 + v60);
                    *((void *)a2 + 1) = v27;
                    v31 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0) {
                      break;
                    }
                    v58 += 7;
                    BOOL v14 = v59++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_119;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v31 = 0;
                  }
LABEL_119:
                  unint64_t v2 = v60 + 1;
                }
                else
                {
                  char v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = 0;
                  while (1)
                  {
                    unint64_t v2 = v27 + 1;
                    *((void *)a2 + 1) = v27 + 1;
                    char v32 = *(unsigned char *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    unint64_t v27 = v2;
                    BOOL v14 = v30++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      break;
                    }
                  }
                }
LABEL_120:
                *((void *)this + 2) = v31;
              }
              else
              {
                uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!result) {
                  return result;
                }
                unint64_t v2 = *((void *)a2 + 1);
              }
LABEL_136:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaStepsResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 60);
  if ((v4 & 8) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 32), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(this + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 56), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x67u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x68u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x69u);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 0x6Au);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xC9u);
    if ((*(_WORD *)(v3 + 60) & 2) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0x6Bu);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if (v4) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_19:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0xCAu);
}

uint64_t CMMsl::KappaStepsResult::hash_value(CMMsl::KappaStepsResult *this)
{
  __int16 v1 = *((_WORD *)this + 30);
  if ((v1 & 8) != 0)
  {
    uint64_t v2 = *((void *)this + 4);
    if ((*((_WORD *)this + 30) & 0x100) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 56);
      if ((v1 & 0x80) != 0) {
        goto LABEL_4;
      }
LABEL_19:
      uint64_t v5 = 0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_7;
      }
LABEL_20:
      uint64_t v7 = 0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_21:
      uint64_t v9 = 0;
      if ((v1 & 0x40) != 0) {
        goto LABEL_13;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 30) & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_19;
  }
LABEL_4:
  float v4 = *((float *)this + 13);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_20;
  }
LABEL_7:
  float v6 = *((float *)this + 11);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_21;
  }
LABEL_10:
  float v8 = *((float *)this + 10);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned int *)this + 12);
    if ((v1 & 4) != 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v10 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_14:
    uint64_t v11 = *((void *)this + 3);
    if (v1) {
      goto LABEL_15;
    }
LABEL_24:
    uint64_t v12 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_16;
    }
LABEL_25:
    uint64_t v13 = 0;
    return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
  }
LABEL_23:
  uint64_t v11 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_15:
  uint64_t v12 = *((void *)this + 1);
  if ((v1 & 2) == 0) {
    goto LABEL_25;
  }
LABEL_16:
  uint64_t v13 = *((void *)this + 2);
  return v3 ^ v2 ^ v5 ^ v7 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13;
}

void CMMsl::KappaTrigger::~KappaTrigger(CMMsl::KappaTrigger *this)
{
  *(void *)this = off_1003A6F60;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaTrigger::~KappaTrigger(this);

  operator delete();
}

CMMsl::KappaTrigger *CMMsl::KappaTrigger::KappaTrigger(CMMsl::KappaTrigger *this, const CMMsl::KappaTrigger *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A6F60;
  *((_DWORD *)this + 53) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  int v5 = *((_DWORD *)a2 + 53);
  if ((v5 & 4) != 0)
  {
    uint64_t v7 = *((void *)a2 + 12);
    int v6 = 4;
    *((_DWORD *)this + 53) = 4;
    *((void *)this + 12) = v7;
    int v5 = *((_DWORD *)a2 + 53);
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    int v6 = 0;
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  char v8 = *((unsigned char *)a2 + 211);
  v6 |= 0x80000000;
  *((_DWORD *)this + 53) = v6;
  *((unsigned char *)this + 211) = v8;
  int v5 = *((_DWORD *)a2 + 53);
LABEL_6:
  if (v5)
  {
    uint64_t v9 = *((void *)a2 + 10);
    *((_DWORD *)this + 53) = v6 | 1;
    *((void *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000000) != 0)
  {
    char v13 = *((unsigned char *)a2 + 208);
    *((_DWORD *)this + 53) |= 0x10000000u;
    *((unsigned char *)this + 208) = v13;
    int v10 = *((_DWORD *)a2 + 53);
    if ((v10 & 0x20000000) == 0)
    {
LABEL_12:
      if ((v10 & 0x400000) == 0) {
        goto LABEL_13;
      }
      goto LABEL_43;
    }
  }
  else if ((v10 & 0x20000000) == 0)
  {
    goto LABEL_12;
  }
  char v14 = *((unsigned char *)a2 + 209);
  *((_DWORD *)this + 53) |= 0x20000000u;
  *((unsigned char *)this + 209) = v14;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400000) == 0)
  {
LABEL_13:
    if ((v10 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v15 = *((_DWORD *)a2 + 46);
  *((_DWORD *)this + 53) |= 0x400000u;
  *((_DWORD *)this + 46) = v15;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10) == 0)
  {
LABEL_14:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v16 = *((_DWORD *)a2 + 28);
  *((_DWORD *)this + 53) |= 0x10u;
  *((_DWORD *)this + 28) = v16;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80000) == 0)
  {
LABEL_15:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v17 = *((_DWORD *)a2 + 43);
  *((_DWORD *)this + 53) |= 0x80000u;
  *((_DWORD *)this + 43) = v17;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v18 = *((_DWORD *)a2 + 42);
  *((_DWORD *)this + 53) |= 0x40000u;
  *((_DWORD *)this + 42) = v18;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v19 = *((_DWORD *)a2 + 41);
  *((_DWORD *)this + 53) |= 0x20000u;
  *((_DWORD *)this + 41) = v19;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x10000) == 0)
  {
LABEL_18:
    if ((v10 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v20 = *((_DWORD *)a2 + 40);
  *((_DWORD *)this + 53) |= 0x10000u;
  *((_DWORD *)this + 40) = v20;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000) == 0)
  {
LABEL_19:
    if ((v10 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v21 = *((_DWORD *)a2 + 39);
  *((_DWORD *)this + 53) |= 0x8000u;
  *((_DWORD *)this + 39) = v21;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000) == 0)
  {
LABEL_20:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v22 = *((_DWORD *)a2 + 38);
  *((_DWORD *)this + 53) |= 0x4000u;
  *((_DWORD *)this + 38) = v22;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000) == 0)
  {
LABEL_21:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v23 = *((_DWORD *)a2 + 37);
  *((_DWORD *)this + 53) |= 0x2000u;
  *((_DWORD *)this + 37) = v23;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100000) == 0)
  {
LABEL_22:
    if ((v10 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v24 = *((_DWORD *)a2 + 44);
  *((_DWORD *)this + 53) |= 0x100000u;
  *((_DWORD *)this + 44) = v24;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x100) == 0)
  {
LABEL_23:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v25 = *((_DWORD *)a2 + 32);
  *((_DWORD *)this + 53) |= 0x100u;
  *((_DWORD *)this + 32) = v25;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v26 = *((_DWORD *)a2 + 48);
  *((_DWORD *)this + 53) |= 0x1000000u;
  *((_DWORD *)this + 48) = v26;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x20) == 0)
  {
LABEL_25:
    if ((v10 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v27 = *((_DWORD *)a2 + 29);
  *((_DWORD *)this + 53) |= 0x20u;
  *((_DWORD *)this + 29) = v27;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 8) == 0)
  {
LABEL_26:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v28 = *((void *)a2 + 13);
  *((_DWORD *)this + 53) |= 8u;
  *((void *)this + 13) = v28;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v29 = *((_DWORD *)a2 + 49);
  *((_DWORD *)this + 53) |= 0x2000000u;
  *((_DWORD *)this + 49) = v29;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v30 = *((_DWORD *)a2 + 50);
  *((_DWORD *)this + 53) |= 0x4000000u;
  *((_DWORD *)this + 50) = v30;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v31 = *((_DWORD *)a2 + 51);
  *((_DWORD *)this + 53) |= 0x8000000u;
  *((_DWORD *)this + 51) = v31;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x800) == 0)
  {
LABEL_30:
    if ((v10 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v32 = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 53) |= 0x800u;
  *((_DWORD *)this + 35) = v32;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x80) == 0)
  {
LABEL_31:
    if ((v10 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v33 = *((_DWORD *)a2 + 31);
  *((_DWORD *)this + 53) |= 0x80u;
  *((_DWORD *)this + 31) = v33;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 2) == 0)
  {
LABEL_32:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v34 = *((void *)a2 + 11);
  *((_DWORD *)this + 53) |= 2u;
  *((void *)this + 11) = v34;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x1000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v35 = *((unsigned char *)a2 + 210);
  *((_DWORD *)this + 53) |= 0x40000000u;
  *((unsigned char *)this + 210) = v35;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x1000) == 0)
  {
LABEL_34:
    if ((v10 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v36 = *((_DWORD *)a2 + 36);
  *((_DWORD *)this + 53) |= 0x1000u;
  *((_DWORD *)this + 36) = v36;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200) == 0)
  {
LABEL_35:
    if ((v10 & 0x40) == 0) {
      goto LABEL_36;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v37 = *((_DWORD *)a2 + 33);
  *((_DWORD *)this + 53) |= 0x200u;
  *((_DWORD *)this + 33) = v37;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x40) == 0)
  {
LABEL_36:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v38 = *((_DWORD *)a2 + 30);
  *((_DWORD *)this + 53) |= 0x40u;
  *((_DWORD *)this + 30) = v38;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x200000) == 0)
  {
LABEL_37:
    if ((v10 & 0x400) == 0) {
      goto LABEL_38;
    }
LABEL_68:
    int v40 = *((_DWORD *)a2 + 34);
    *((_DWORD *)this + 53) |= 0x400u;
    *((_DWORD *)this + 34) = v40;
    if ((*((_DWORD *)a2 + 53) & 0x800000) == 0) {
      return this;
    }
    goto LABEL_39;
  }
LABEL_67:
  int v39 = *((_DWORD *)a2 + 45);
  *((_DWORD *)this + 53) |= 0x200000u;
  *((_DWORD *)this + 45) = v39;
  int v10 = *((_DWORD *)a2 + 53);
  if ((v10 & 0x400) != 0) {
    goto LABEL_68;
  }
LABEL_38:
  if ((v10 & 0x800000) != 0)
  {
LABEL_39:
    int v11 = *((_DWORD *)a2 + 47);
    *((_DWORD *)this + 53) |= 0x800000u;
    *((_DWORD *)this + 47) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, const CMMsl::KappaTrigger *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((CMMsl::KappaTrigger *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTrigger *a2, CMMsl::KappaTrigger *a3)
{
  int v3 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 211);
  *((unsigned char *)this + 211) = *((unsigned char *)a2 + 211);
  *((unsigned char *)a2 + 211) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 208);
  *((unsigned char *)this + 208) = *((unsigned char *)a2 + 208);
  *((unsigned char *)a2 + 208) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 209);
  *((unsigned char *)this + 209) = *((unsigned char *)a2 + 209);
  *((unsigned char *)a2 + 209) = v14;
  LODWORD(v14) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v14;
  LODWORD(v5) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v5;
  LODWORD(v14) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v14;
  LODWORD(v14) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v14;
  LODWORD(v14) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  LODWORD(v14) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v14;
  LODWORD(v14) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v14;
  LODWORD(v14) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v14;
  LODWORD(v14) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v14;
  LODWORD(v14) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v14;
  LODWORD(v5) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v5;
  LODWORD(v14) = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v14;
  LODWORD(v14) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v14;
  uint64_t v15 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  LODWORD(v5) = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v5;
  LODWORD(v5) = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v5;
  LODWORD(v5) = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v5;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v15;
  uint64_t v16 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 210);
  *((unsigned char *)this + 210) = *((unsigned char *)a2 + 210);
  *((unsigned char *)a2 + 210) = v16;
  LODWORD(v5) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v5;
  LODWORD(v5) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v5;
  float result = *((float *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((float *)a2 + 30) = result;
  LODWORD(v16) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v16;
  LODWORD(v16) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v16;
  LODWORD(v16) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v16;
  return result;
}

uint64_t CMMsl::KappaTrigger::KappaTrigger(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6F60;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a2 + 212) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 211) = *(unsigned char *)(a2 + 211);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 210) = *(unsigned char *)(a2 + 210);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  return a1;
}

CMMsl *CMMsl::KappaTrigger::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTrigger::KappaTrigger((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTrigger *)v5, v3);
    CMMsl::KappaTrigger::~KappaTrigger((CMMsl::KappaTrigger *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTrigger::formatText(CMMsl::KappaTrigger *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 53);
  if (v5)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    int v5 = *((_DWORD *)this + 53);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 28));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "btHint", *((_DWORD *)this + 29));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "companionAopTs", *((void *)this + 11));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "currentWindowMean", *((float *)this + 30));
  int v5 = *((_DWORD *)this + 53);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "enableMode", *((_DWORD *)this + 31));
  if ((*((_DWORD *)this + 53) & 0x100) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 32));
LABEL_9:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted", *((unsigned char *)this + 208));
    int v9 = *((_DWORD *)this + 53);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0) {
        goto LABEL_14;
      }
      goto LABEL_54;
    }
  }
  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(a2, "isSimulated", *((unsigned char *)this + 209));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "lastCompleted15sWindowMean", *((float *)this + 33));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "locallyArmedBitmap", *((_DWORD *)this + 34));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "martyIsBicycle", *((unsigned char *)this + 210));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "martyTriggerPathBitmap", *((_DWORD *)this + 35));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "maxMeanTenMinPreTrigger", *((float *)this + 36));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x2000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "nAccelGap", *((_DWORD *)this + 37));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "nFullAccel", *((_DWORD *)this + 38));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "nFullDM", *((_DWORD *)this + 39));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "nOldAccel", *((_DWORD *)this + 40));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x20000) == 0)
  {
LABEL_23:
    if ((v9 & 0x40000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "nOldDM", *((_DWORD *)this + 41));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "nOldDt", *((_DWORD *)this + 42));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x80000) == 0)
  {
LABEL_25:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "nPrecondition", *((_DWORD *)this + 43));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "nUseNearest", *((_DWORD *)this + 44));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "numMaxEnvelopes", *((_DWORD *)this + 45));
  int v9 = *((_DWORD *)this + 53);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "numResets", *((_DWORD *)this + 46));
  if ((*((_DWORD *)this + 53) & 0x800000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(a2, "overrideArmedBitmap", *((_DWORD *)this + 47));
LABEL_30:
  uint64_t v10 = (float *)*((void *)this + 4);
  uint64_t v11 = (float *)*((void *)this + 5);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  int v16 = *((_DWORD *)this + 53);
  if (v16 < 0)
  {
    PB::TextFormatter::format(a2, "shouldTrigger", *((unsigned char *)this + 211));
    int v16 = *((_DWORD *)this + 53);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_72;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 12));
  int v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "triggerPathBitmap", *((_DWORD *)this + 48));
  int v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 49));
  int v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 50));
  int v16 = *((_DWORD *)this + 53);
  if ((v16 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v16 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 51));
  if ((*((_DWORD *)this + 53) & 8) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(a2, "vehicleProbabilityTs", *((void *)this + 13));
LABEL_42:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTrigger::readFrom(CMMsl::KappaTrigger *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 32);
    int v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 56);
    uint64_t v11 = (char *)this + 72;
    float v12 = (void **)((char *)this + 8);
    uint64_t v13 = (char *)this + 24;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 53) |= 4u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          uint64_t v29 = *(void *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_459;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v20 = v31++ > 8;
            }
            while (!v20);
LABEL_271:
            uint64_t v32 = 0;
            goto LABEL_459;
          }
          char v246 = 0;
          unsigned int v247 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              uint64_t v32 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v248 = v27 + 1;
              char v249 = *(unsigned char *)(v29 + v27);
              *((void *)a2 + 1) = v248;
              v32 |= (unint64_t)(v249 & 0x7F) << v246;
              if (v249 < 0)
              {
                v246 += 7;
                unint64_t v27 = v248;
                BOOL v20 = v247++ > 8;
                if (v20) {
                  goto LABEL_271;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v32 = 0;
              }
            }
            break;
          }
LABEL_459:
          *((void *)this + 12) = v32;
          goto LABEL_544;
        case 2u:
          *((_DWORD *)this + 53) |= 0x80000000;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 >= *((void *)a2 + 2))
          {
            BOOL v38 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v36 = v35 + 1;
            int v37 = *(unsigned __int8 *)(*(void *)a2 + v35);
            *((void *)a2 + 1) = v36;
            BOOL v38 = v37 != 0;
          }
          *((unsigned char *)this + 211) = v38;
          goto LABEL_544;
        case 3u:
          *((_DWORD *)this + 53) |= 1u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v39);
          goto LABEL_523;
        case 4u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              char v43 = (char *)*((void *)this + 2);
              unint64_t v42 = *((void *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                uint64_t v45 = (char *)*v12;
                uint64_t v46 = (v43 - (unsigned char *)*v12) >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  goto LABEL_554;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 2 > v47) {
                  unint64_t v47 = v48 >> 2;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unsigned int v50 = (char *)sub_10000EEB0((uint64_t)v13, v49);
                  uint64_t v45 = (char *)*((void *)this + 1);
                  char v43 = (char *)*((void *)this + 2);
                }
                else
                {
                  unsigned int v50 = 0;
                }
                uint64_t v51 = &v50[8 * v46];
                *(void *)uint64_t v51 = 0;
                unsigned int v44 = v51 + 8;
                while (v43 != v45)
                {
                  uint64_t v52 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((void *)this + 1) = v51;
                *((void *)this + 2) = v44;
                *((void *)this + 3) = &v50[8 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(void *)char v43 = 0;
                unsigned int v44 = v43 + 8;
              }
              *((void *)this + 2) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
                goto LABEL_412;
              }
              *(v44 - 1) = *(void *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v40;
            }
            goto LABEL_413;
          }
          unsigned int v251 = (char *)*((void *)this + 2);
          unint64_t v250 = *((void *)this + 3);
          if ((unint64_t)v251 >= v250)
          {
            unint64_t v330 = (char *)*v12;
            uint64_t v331 = (v251 - (unsigned char *)*v12) >> 3;
            unint64_t v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 61) {
LABEL_554:
            }
              sub_10000EE98();
            uint64_t v333 = v250 - (void)v330;
            if (v333 >> 2 > v332) {
              unint64_t v332 = v333 >> 2;
            }
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v334 = v332;
            }
            if (v334)
            {
              unint64_t v335 = (char *)sub_10000EEB0((uint64_t)v13, v334);
              unint64_t v330 = (char *)*((void *)this + 1);
              unsigned int v251 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v335 = 0;
            }
            unint64_t v348 = &v335[8 * v331];
            *(void *)unint64_t v348 = 0;
            int v252 = v348 + 8;
            while (v251 != v330)
            {
              uint64_t v349 = *((void *)v251 - 1);
              v251 -= 8;
              *((void *)v348 - 1) = v349;
              v348 -= 8;
            }
            *((void *)this + 1) = v348;
            *((void *)this + 2) = v252;
            *((void *)this + 3) = &v335[8 * v334];
            if (v330) {
              operator delete(v330);
            }
          }
          else
          {
            *(void *)unsigned int v251 = 0;
            int v252 = v251 + 8;
          }
          *((void *)this + 2) = v252;
          unint64_t v350 = *((void *)a2 + 1);
          if (v350 <= 0xFFFFFFFFFFFFFFF7 && v350 + 8 <= *((void *)a2 + 2))
          {
            *(v252 - 1) = *(void *)(*(void *)a2 + v350);
LABEL_523:
            uint64_t v351 = *((void *)a2 + 1) + 8;
            goto LABEL_543;
          }
          goto LABEL_540;
        case 5u:
          if (v26 != 2)
          {
            char v254 = (char *)*((void *)this + 8);
            unint64_t v253 = *((void *)this + 9);
            if ((unint64_t)v254 >= v253)
            {
              int v336 = (char *)*v10;
              uint64_t v337 = (v254 - (unsigned char *)*v10) >> 2;
              unint64_t v338 = v337 + 1;
              if ((unint64_t)(v337 + 1) >> 62) {
LABEL_555:
              }
                sub_10000EE98();
              uint64_t v339 = v253 - (void)v336;
              if (v339 >> 1 > v338) {
                unint64_t v338 = v339 >> 1;
              }
              if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v340 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v340 = v338;
              }
              if (v340)
              {
                BOOL v341 = (char *)sub_100024458((uint64_t)v11, v340);
                int v336 = (char *)*((void *)this + 7);
                char v254 = (char *)*((void *)this + 8);
              }
              else
              {
                BOOL v341 = 0;
              }
              int v352 = &v341[4 * v337];
              *(_DWORD *)int v352 = 0;
              uint64_t v255 = v352 + 4;
              while (v254 != v336)
              {
                int v353 = *((_DWORD *)v254 - 1);
                v254 -= 4;
                *((_DWORD *)v352 - 1) = v353;
                v352 -= 4;
              }
              *((void *)this + 7) = v352;
              *((void *)this + 8) = v255;
              *((void *)this + 9) = &v341[4 * v340];
              if (v336) {
                operator delete(v336);
              }
            }
            else
            {
              *(_DWORD *)char v254 = 0;
              uint64_t v255 = v254 + 4;
            }
            *((void *)this + 8) = v255;
            goto LABEL_538;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v54 = *((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          while (v54 < v55 && !*((unsigned char *)a2 + 24))
          {
            char v57 = (char *)*((void *)this + 8);
            unint64_t v56 = *((void *)this + 9);
            if ((unint64_t)v57 >= v56)
            {
              unsigned int v59 = (char *)*v10;
              uint64_t v60 = (v57 - (unsigned char *)*v10) >> 2;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62) {
                goto LABEL_555;
              }
              uint64_t v62 = v56 - (void)v59;
              if (v62 >> 1 > v61) {
                unint64_t v61 = v62 >> 1;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63)
              {
                unint64_t v64 = (char *)sub_100024458((uint64_t)v11, v63);
                unsigned int v59 = (char *)*((void *)this + 7);
                char v57 = (char *)*((void *)this + 8);
              }
              else
              {
                unint64_t v64 = 0;
              }
              char v65 = &v64[4 * v60];
              *(_DWORD *)char v65 = 0;
              char v58 = v65 + 4;
              while (v57 != v59)
              {
                int v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *((void *)this + 7) = v65;
              *((void *)this + 8) = v58;
              *((void *)this + 9) = &v64[4 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(_DWORD *)char v57 = 0;
              char v58 = v57 + 4;
            }
            *((void *)this + 8) = v58;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
              goto LABEL_412;
            }
            *(v58 - 1) = *(_DWORD *)(*(void *)a2 + v67);
            unint64_t v55 = *((void *)a2 + 2);
            unint64_t v54 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v54;
          }
          goto LABEL_413;
        case 6u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v68 = *((void *)a2 + 1);
            unint64_t v69 = *((void *)a2 + 2);
            while (v68 < v69 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v71 = (char *)*((void *)this + 5);
              unint64_t v70 = *((void *)this + 6);
              if ((unint64_t)v71 >= v70)
              {
                char v73 = (char *)*v8;
                uint64_t v74 = (v71 - (unsigned char *)*v8) >> 2;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 62) {
                  goto LABEL_556;
                }
                uint64_t v76 = v70 - (void)v73;
                if (v76 >> 1 > v75) {
                  unint64_t v75 = v76 >> 1;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  unint64_t v78 = (char *)sub_100024458((uint64_t)v9, v77);
                  char v73 = (char *)*((void *)this + 4);
                  unsigned int v71 = (char *)*((void *)this + 5);
                }
                else
                {
                  unint64_t v78 = 0;
                }
                char v79 = &v78[4 * v74];
                *(_DWORD *)char v79 = 0;
                unint64_t v72 = v79 + 4;
                while (v71 != v73)
                {
                  int v80 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *((_DWORD *)v79 - 1) = v80;
                  v79 -= 4;
                }
                *((void *)this + 4) = v79;
                *((void *)this + 5) = v72;
                *((void *)this + 6) = &v78[4 * v77];
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v71 = 0;
                unint64_t v72 = v71 + 4;
              }
              *((void *)this + 5) = v72;
              unint64_t v81 = *((void *)a2 + 1);
              if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2))
              {
LABEL_412:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_DWORD *)(*(void *)a2 + v81);
              unint64_t v69 = *((void *)a2 + 2);
              unint64_t v68 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v68;
            }
LABEL_413:
            PB::Reader::recallMark();
          }
          else
          {
            char v257 = (char *)*((void *)this + 5);
            unint64_t v256 = *((void *)this + 6);
            if ((unint64_t)v257 >= v256)
            {
              unint64_t v342 = (char *)*v8;
              uint64_t v343 = (v257 - (unsigned char *)*v8) >> 2;
              unint64_t v344 = v343 + 1;
              if ((unint64_t)(v343 + 1) >> 62) {
LABEL_556:
              }
                sub_10000EE98();
              uint64_t v345 = v256 - (void)v342;
              if (v345 >> 1 > v344) {
                unint64_t v344 = v345 >> 1;
              }
              if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v346 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v346 = v344;
              }
              if (v346)
              {
                uint64_t v347 = (char *)sub_100024458((uint64_t)v9, v346);
                unint64_t v342 = (char *)*((void *)this + 4);
                char v257 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v347 = 0;
              }
              unint64_t v354 = &v347[4 * v343];
              *(_DWORD *)unint64_t v354 = 0;
              uint64_t v255 = v354 + 4;
              while (v257 != v342)
              {
                int v355 = *((_DWORD *)v257 - 1);
                v257 -= 4;
                *((_DWORD *)v354 - 1) = v355;
                v354 -= 4;
              }
              *((void *)this + 4) = v354;
              *((void *)this + 5) = v255;
              *((void *)this + 6) = &v347[4 * v346];
              if (v342) {
                operator delete(v342);
              }
            }
            else
            {
              *(_DWORD *)char v257 = 0;
              uint64_t v255 = v257 + 4;
            }
            *((void *)this + 5) = v255;
LABEL_538:
            unint64_t v356 = *((void *)a2 + 1);
            if (v356 <= 0xFFFFFFFFFFFFFFFBLL && v356 + 4 <= *((void *)a2 + 2))
            {
              *(v255 - 1) = *(_DWORD *)(*(void *)a2 + v356);
LABEL_542:
              uint64_t v351 = *((void *)a2 + 1) + 4;
LABEL_543:
              *((void *)a2 + 1) = v351;
            }
            else
            {
LABEL_540:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_544:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 7u:
          *((_DWORD *)this + 53) |= 0x10000000u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 >= *((void *)a2 + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)a2 + v82);
            *((void *)a2 + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *((unsigned char *)this + 208) = v85;
          goto LABEL_544;
        case 8u:
          *((_DWORD *)this + 53) |= 0x20000000u;
          unint64_t v86 = *((void *)a2 + 1);
          if (v86 >= *((void *)a2 + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)a2 + v86);
            *((void *)a2 + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *((unsigned char *)this + 209) = v89;
          goto LABEL_544;
        case 9u:
          *((_DWORD *)this + 53) |= 0x400000u;
          unint64_t v90 = *((void *)a2 + 1);
          unint64_t v91 = *((void *)a2 + 2);
          uint64_t v92 = *(void *)a2;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)a2 + 1) = v90 + 1;
              char v97 = *(unsigned char *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_462;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v20 = v94++ > 8;
            }
            while (!v20);
LABEL_290:
            LODWORD(v95) = 0;
            goto LABEL_462;
          }
          char v258 = 0;
          unsigned int v259 = 0;
          uint64_t v95 = 0;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v260 = v90 + 1;
              char v261 = *(unsigned char *)(v92 + v90);
              *((void *)a2 + 1) = v260;
              v95 |= (unint64_t)(v261 & 0x7F) << v258;
              if (v261 < 0)
              {
                v258 += 7;
                unint64_t v90 = v260;
                BOOL v20 = v259++ > 8;
                if (v20) {
                  goto LABEL_290;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v95) = 0;
              }
            }
            break;
          }
LABEL_462:
          *((_DWORD *)this + 46) = v95;
          goto LABEL_544;
        case 0xAu:
          *((_DWORD *)this + 53) |= 0x10u;
          unint64_t v98 = *((void *)a2 + 1);
          if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v98);
          goto LABEL_542;
        case 0xBu:
          *((_DWORD *)this + 53) |= 0x80000u;
          unint64_t v99 = *((void *)a2 + 1);
          unint64_t v100 = *((void *)a2 + 2);
          uint64_t v101 = *(void *)a2;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            char v102 = 0;
            unsigned int v103 = 0;
            uint64_t v104 = 0;
            do
            {
              unint64_t v105 = v99 + 1;
              *((void *)a2 + 1) = v99 + 1;
              char v106 = *(unsigned char *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0) {
                goto LABEL_465;
              }
              v102 += 7;
              unint64_t v99 = v105;
              BOOL v20 = v103++ > 8;
            }
            while (!v20);
LABEL_297:
            LODWORD(v104) = 0;
            goto LABEL_465;
          }
          char v262 = 0;
          unsigned int v263 = 0;
          uint64_t v104 = 0;
          if (v100 <= v99) {
            unint64_t v100 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v264 = v99 + 1;
              char v265 = *(unsigned char *)(v101 + v99);
              *((void *)a2 + 1) = v264;
              v104 |= (unint64_t)(v265 & 0x7F) << v262;
              if (v265 < 0)
              {
                v262 += 7;
                unint64_t v99 = v264;
                BOOL v20 = v263++ > 8;
                if (v20) {
                  goto LABEL_297;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v104) = 0;
              }
            }
            break;
          }
LABEL_465:
          *((_DWORD *)this + 43) = v104;
          goto LABEL_544;
        case 0xCu:
          *((_DWORD *)this + 53) |= 0x40000u;
          unint64_t v107 = *((void *)a2 + 1);
          unint64_t v108 = *((void *)a2 + 2);
          uint64_t v109 = *(void *)a2;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            char v110 = 0;
            unsigned int v111 = 0;
            uint64_t v112 = 0;
            do
            {
              unint64_t v113 = v107 + 1;
              *((void *)a2 + 1) = v107 + 1;
              char v114 = *(unsigned char *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0) {
                goto LABEL_468;
              }
              v110 += 7;
              unint64_t v107 = v113;
              BOOL v20 = v111++ > 8;
            }
            while (!v20);
LABEL_304:
            LODWORD(v112) = 0;
            goto LABEL_468;
          }
          char v266 = 0;
          unsigned int v267 = 0;
          uint64_t v112 = 0;
          if (v108 <= v107) {
            unint64_t v108 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v108 == v107)
            {
              LODWORD(v112) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v268 = v107 + 1;
              char v269 = *(unsigned char *)(v109 + v107);
              *((void *)a2 + 1) = v268;
              v112 |= (unint64_t)(v269 & 0x7F) << v266;
              if (v269 < 0)
              {
                v266 += 7;
                unint64_t v107 = v268;
                BOOL v20 = v267++ > 8;
                if (v20) {
                  goto LABEL_304;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v112) = 0;
              }
            }
            break;
          }
LABEL_468:
          *((_DWORD *)this + 42) = v112;
          goto LABEL_544;
        case 0xDu:
          *((_DWORD *)this + 53) |= 0x20000u;
          unint64_t v115 = *((void *)a2 + 1);
          unint64_t v116 = *((void *)a2 + 2);
          uint64_t v117 = *(void *)a2;
          if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
          {
            char v118 = 0;
            unsigned int v119 = 0;
            uint64_t v120 = 0;
            do
            {
              unint64_t v121 = v115 + 1;
              *((void *)a2 + 1) = v115 + 1;
              char v122 = *(unsigned char *)(v117 + v115);
              v120 |= (unint64_t)(v122 & 0x7F) << v118;
              if ((v122 & 0x80) == 0) {
                goto LABEL_471;
              }
              v118 += 7;
              unint64_t v115 = v121;
              BOOL v20 = v119++ > 8;
            }
            while (!v20);
LABEL_311:
            LODWORD(v120) = 0;
            goto LABEL_471;
          }
          char v270 = 0;
          unsigned int v271 = 0;
          uint64_t v120 = 0;
          if (v116 <= v115) {
            unint64_t v116 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v116 == v115)
            {
              LODWORD(v120) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v272 = v115 + 1;
              char v273 = *(unsigned char *)(v117 + v115);
              *((void *)a2 + 1) = v272;
              v120 |= (unint64_t)(v273 & 0x7F) << v270;
              if (v273 < 0)
              {
                v270 += 7;
                unint64_t v115 = v272;
                BOOL v20 = v271++ > 8;
                if (v20) {
                  goto LABEL_311;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v120) = 0;
              }
            }
            break;
          }
LABEL_471:
          *((_DWORD *)this + 41) = v120;
          goto LABEL_544;
        case 0xEu:
          *((_DWORD *)this + 53) |= 0x10000u;
          unint64_t v123 = *((void *)a2 + 1);
          unint64_t v124 = *((void *)a2 + 2);
          uint64_t v125 = *(void *)a2;
          if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
          {
            char v126 = 0;
            unsigned int v127 = 0;
            uint64_t v128 = 0;
            do
            {
              unint64_t v129 = v123 + 1;
              *((void *)a2 + 1) = v123 + 1;
              char v130 = *(unsigned char *)(v125 + v123);
              v128 |= (unint64_t)(v130 & 0x7F) << v126;
              if ((v130 & 0x80) == 0) {
                goto LABEL_474;
              }
              v126 += 7;
              unint64_t v123 = v129;
              BOOL v20 = v127++ > 8;
            }
            while (!v20);
LABEL_318:
            LODWORD(v128) = 0;
            goto LABEL_474;
          }
          char v274 = 0;
          unsigned int v275 = 0;
          uint64_t v128 = 0;
          if (v124 <= v123) {
            unint64_t v124 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v124 == v123)
            {
              LODWORD(v128) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v276 = v123 + 1;
              char v277 = *(unsigned char *)(v125 + v123);
              *((void *)a2 + 1) = v276;
              v128 |= (unint64_t)(v277 & 0x7F) << v274;
              if (v277 < 0)
              {
                v274 += 7;
                unint64_t v123 = v276;
                BOOL v20 = v275++ > 8;
                if (v20) {
                  goto LABEL_318;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v128) = 0;
              }
            }
            break;
          }
LABEL_474:
          *((_DWORD *)this + 40) = v128;
          goto LABEL_544;
        case 0xFu:
          *((_DWORD *)this + 53) |= 0x8000u;
          unint64_t v131 = *((void *)a2 + 1);
          unint64_t v132 = *((void *)a2 + 2);
          uint64_t v133 = *(void *)a2;
          if (v131 <= 0xFFFFFFFFFFFFFFF5 && v131 + 10 <= v132)
          {
            char v134 = 0;
            unsigned int v135 = 0;
            uint64_t v136 = 0;
            do
            {
              unint64_t v137 = v131 + 1;
              *((void *)a2 + 1) = v131 + 1;
              char v138 = *(unsigned char *)(v133 + v131);
              v136 |= (unint64_t)(v138 & 0x7F) << v134;
              if ((v138 & 0x80) == 0) {
                goto LABEL_477;
              }
              v134 += 7;
              unint64_t v131 = v137;
              BOOL v20 = v135++ > 8;
            }
            while (!v20);
LABEL_325:
            LODWORD(v136) = 0;
            goto LABEL_477;
          }
          char v278 = 0;
          unsigned int v279 = 0;
          uint64_t v136 = 0;
          if (v132 <= v131) {
            unint64_t v132 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v132 == v131)
            {
              LODWORD(v136) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v280 = v131 + 1;
              char v281 = *(unsigned char *)(v133 + v131);
              *((void *)a2 + 1) = v280;
              v136 |= (unint64_t)(v281 & 0x7F) << v278;
              if (v281 < 0)
              {
                v278 += 7;
                unint64_t v131 = v280;
                BOOL v20 = v279++ > 8;
                if (v20) {
                  goto LABEL_325;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v136) = 0;
              }
            }
            break;
          }
LABEL_477:
          *((_DWORD *)this + 39) = v136;
          goto LABEL_544;
        case 0x10u:
          *((_DWORD *)this + 53) |= 0x4000u;
          unint64_t v139 = *((void *)a2 + 1);
          unint64_t v140 = *((void *)a2 + 2);
          uint64_t v141 = *(void *)a2;
          if (v139 <= 0xFFFFFFFFFFFFFFF5 && v139 + 10 <= v140)
          {
            char v142 = 0;
            unsigned int v143 = 0;
            uint64_t v144 = 0;
            do
            {
              unint64_t v145 = v139 + 1;
              *((void *)a2 + 1) = v139 + 1;
              char v146 = *(unsigned char *)(v141 + v139);
              v144 |= (unint64_t)(v146 & 0x7F) << v142;
              if ((v146 & 0x80) == 0) {
                goto LABEL_480;
              }
              v142 += 7;
              unint64_t v139 = v145;
              BOOL v20 = v143++ > 8;
            }
            while (!v20);
LABEL_332:
            LODWORD(v144) = 0;
            goto LABEL_480;
          }
          char v282 = 0;
          unsigned int v283 = 0;
          uint64_t v144 = 0;
          if (v140 <= v139) {
            unint64_t v140 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v140 == v139)
            {
              LODWORD(v144) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v284 = v139 + 1;
              char v285 = *(unsigned char *)(v141 + v139);
              *((void *)a2 + 1) = v284;
              v144 |= (unint64_t)(v285 & 0x7F) << v282;
              if (v285 < 0)
              {
                v282 += 7;
                unint64_t v139 = v284;
                BOOL v20 = v283++ > 8;
                if (v20) {
                  goto LABEL_332;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v144) = 0;
              }
            }
            break;
          }
LABEL_480:
          *((_DWORD *)this + 38) = v144;
          goto LABEL_544;
        case 0x11u:
          *((_DWORD *)this + 53) |= 0x2000u;
          unint64_t v147 = *((void *)a2 + 1);
          unint64_t v148 = *((void *)a2 + 2);
          uint64_t v149 = *(void *)a2;
          if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v148)
          {
            char v150 = 0;
            unsigned int v151 = 0;
            uint64_t v152 = 0;
            do
            {
              unint64_t v153 = v147 + 1;
              *((void *)a2 + 1) = v147 + 1;
              char v154 = *(unsigned char *)(v149 + v147);
              v152 |= (unint64_t)(v154 & 0x7F) << v150;
              if ((v154 & 0x80) == 0) {
                goto LABEL_483;
              }
              v150 += 7;
              unint64_t v147 = v153;
              BOOL v20 = v151++ > 8;
            }
            while (!v20);
LABEL_339:
            LODWORD(v152) = 0;
            goto LABEL_483;
          }
          char v286 = 0;
          unsigned int v287 = 0;
          uint64_t v152 = 0;
          if (v148 <= v147) {
            unint64_t v148 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v148 == v147)
            {
              LODWORD(v152) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v288 = v147 + 1;
              char v289 = *(unsigned char *)(v149 + v147);
              *((void *)a2 + 1) = v288;
              v152 |= (unint64_t)(v289 & 0x7F) << v286;
              if (v289 < 0)
              {
                v286 += 7;
                unint64_t v147 = v288;
                BOOL v20 = v287++ > 8;
                if (v20) {
                  goto LABEL_339;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v152) = 0;
              }
            }
            break;
          }
LABEL_483:
          *((_DWORD *)this + 37) = v152;
          goto LABEL_544;
        case 0x12u:
          *((_DWORD *)this + 53) |= 0x100000u;
          unint64_t v155 = *((void *)a2 + 1);
          unint64_t v156 = *((void *)a2 + 2);
          uint64_t v157 = *(void *)a2;
          if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
          {
            char v158 = 0;
            unsigned int v159 = 0;
            uint64_t v160 = 0;
            do
            {
              unint64_t v161 = v155 + 1;
              *((void *)a2 + 1) = v155 + 1;
              char v162 = *(unsigned char *)(v157 + v155);
              v160 |= (unint64_t)(v162 & 0x7F) << v158;
              if ((v162 & 0x80) == 0) {
                goto LABEL_486;
              }
              v158 += 7;
              unint64_t v155 = v161;
              BOOL v20 = v159++ > 8;
            }
            while (!v20);
LABEL_346:
            LODWORD(v160) = 0;
            goto LABEL_486;
          }
          char v290 = 0;
          unsigned int v291 = 0;
          uint64_t v160 = 0;
          if (v156 <= v155) {
            unint64_t v156 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v156 == v155)
            {
              LODWORD(v160) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v292 = v155 + 1;
              char v293 = *(unsigned char *)(v157 + v155);
              *((void *)a2 + 1) = v292;
              v160 |= (unint64_t)(v293 & 0x7F) << v290;
              if (v293 < 0)
              {
                v290 += 7;
                unint64_t v155 = v292;
                BOOL v20 = v291++ > 8;
                if (v20) {
                  goto LABEL_346;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v160) = 0;
              }
            }
            break;
          }
LABEL_486:
          *((_DWORD *)this + 44) = v160;
          goto LABEL_544;
        case 0x13u:
          *((_DWORD *)this + 53) |= 0x100u;
          unint64_t v163 = *((void *)a2 + 1);
          if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v163);
          goto LABEL_542;
        case 0x14u:
          *((_DWORD *)this + 53) |= 0x1000000u;
          unint64_t v164 = *((void *)a2 + 1);
          unint64_t v165 = *((void *)a2 + 2);
          uint64_t v166 = *(void *)a2;
          if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
          {
            char v167 = 0;
            unsigned int v168 = 0;
            uint64_t v169 = 0;
            do
            {
              unint64_t v170 = v164 + 1;
              *((void *)a2 + 1) = v164 + 1;
              char v171 = *(unsigned char *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0) {
                goto LABEL_489;
              }
              v167 += 7;
              unint64_t v164 = v170;
              BOOL v20 = v168++ > 8;
            }
            while (!v20);
LABEL_353:
            LODWORD(v169) = 0;
            goto LABEL_489;
          }
          char v294 = 0;
          unsigned int v295 = 0;
          uint64_t v169 = 0;
          if (v165 <= v164) {
            unint64_t v165 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v165 == v164)
            {
              LODWORD(v169) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v296 = v164 + 1;
              char v297 = *(unsigned char *)(v166 + v164);
              *((void *)a2 + 1) = v296;
              v169 |= (unint64_t)(v297 & 0x7F) << v294;
              if (v297 < 0)
              {
                v294 += 7;
                unint64_t v164 = v296;
                BOOL v20 = v295++ > 8;
                if (v20) {
                  goto LABEL_353;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v169) = 0;
              }
            }
            break;
          }
LABEL_489:
          *((_DWORD *)this + 48) = v169;
          goto LABEL_544;
        case 0x15u:
          *((_DWORD *)this + 53) |= 0x20u;
          unint64_t v172 = *((void *)a2 + 1);
          unint64_t v173 = *((void *)a2 + 2);
          uint64_t v174 = *(void *)a2;
          if (v172 <= 0xFFFFFFFFFFFFFFF5 && v172 + 10 <= v173)
          {
            char v175 = 0;
            unsigned int v176 = 0;
            uint64_t v177 = 0;
            do
            {
              unint64_t v178 = v172 + 1;
              *((void *)a2 + 1) = v172 + 1;
              char v179 = *(unsigned char *)(v174 + v172);
              v177 |= (unint64_t)(v179 & 0x7F) << v175;
              if ((v179 & 0x80) == 0) {
                goto LABEL_492;
              }
              v175 += 7;
              unint64_t v172 = v178;
              BOOL v20 = v176++ > 8;
            }
            while (!v20);
LABEL_360:
            LODWORD(v177) = 0;
            goto LABEL_492;
          }
          char v298 = 0;
          unsigned int v299 = 0;
          uint64_t v177 = 0;
          if (v173 <= v172) {
            unint64_t v173 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v173 == v172)
            {
              LODWORD(v177) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v300 = v172 + 1;
              char v301 = *(unsigned char *)(v174 + v172);
              *((void *)a2 + 1) = v300;
              v177 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                unint64_t v172 = v300;
                BOOL v20 = v299++ > 8;
                if (v20) {
                  goto LABEL_360;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v177) = 0;
              }
            }
            break;
          }
LABEL_492:
          *((_DWORD *)this + 29) = v177;
          goto LABEL_544;
        case 0x16u:
          *((_DWORD *)this + 53) |= 8u;
          unint64_t v180 = *((void *)a2 + 1);
          unint64_t v181 = *((void *)a2 + 2);
          uint64_t v182 = *(void *)a2;
          if (v180 <= 0xFFFFFFFFFFFFFFF5 && v180 + 10 <= v181)
          {
            char v183 = 0;
            unsigned int v184 = 0;
            uint64_t v185 = 0;
            do
            {
              unint64_t v186 = v180 + 1;
              *((void *)a2 + 1) = v180 + 1;
              char v187 = *(unsigned char *)(v182 + v180);
              v185 |= (unint64_t)(v187 & 0x7F) << v183;
              if ((v187 & 0x80) == 0) {
                goto LABEL_495;
              }
              v183 += 7;
              unint64_t v180 = v186;
              BOOL v20 = v184++ > 8;
            }
            while (!v20);
LABEL_367:
            uint64_t v185 = 0;
            goto LABEL_495;
          }
          char v302 = 0;
          unsigned int v303 = 0;
          uint64_t v185 = 0;
          if (v181 <= v180) {
            unint64_t v181 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v181 == v180)
            {
              uint64_t v185 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v304 = v180 + 1;
              char v305 = *(unsigned char *)(v182 + v180);
              *((void *)a2 + 1) = v304;
              v185 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                unint64_t v180 = v304;
                BOOL v20 = v303++ > 8;
                if (v20) {
                  goto LABEL_367;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v185 = 0;
              }
            }
            break;
          }
LABEL_495:
          *((void *)this + 13) = v185;
          goto LABEL_544;
        case 0x17u:
          *((_DWORD *)this + 53) |= 0x2000000u;
          unint64_t v188 = *((void *)a2 + 1);
          if (v188 > 0xFFFFFFFFFFFFFFFBLL || v188 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 49) = *(_DWORD *)(*(void *)a2 + v188);
          goto LABEL_542;
        case 0x18u:
          *((_DWORD *)this + 53) |= 0x4000000u;
          unint64_t v189 = *((void *)a2 + 1);
          if (v189 > 0xFFFFFFFFFFFFFFFBLL || v189 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 50) = *(_DWORD *)(*(void *)a2 + v189);
          goto LABEL_542;
        case 0x19u:
          *((_DWORD *)this + 53) |= 0x8000000u;
          unint64_t v190 = *((void *)a2 + 1);
          if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 51) = *(_DWORD *)(*(void *)a2 + v190);
          goto LABEL_542;
        case 0x1Au:
          *((_DWORD *)this + 53) |= 0x800u;
          unint64_t v191 = *((void *)a2 + 1);
          unint64_t v192 = *((void *)a2 + 2);
          uint64_t v193 = *(void *)a2;
          if (v191 <= 0xFFFFFFFFFFFFFFF5 && v191 + 10 <= v192)
          {
            char v194 = 0;
            unsigned int v195 = 0;
            uint64_t v196 = 0;
            do
            {
              unint64_t v197 = v191 + 1;
              *((void *)a2 + 1) = v191 + 1;
              char v198 = *(unsigned char *)(v193 + v191);
              v196 |= (unint64_t)(v198 & 0x7F) << v194;
              if ((v198 & 0x80) == 0) {
                goto LABEL_498;
              }
              v194 += 7;
              unint64_t v191 = v197;
              BOOL v20 = v195++ > 8;
            }
            while (!v20);
LABEL_374:
            LODWORD(v196) = 0;
            goto LABEL_498;
          }
          char v306 = 0;
          unsigned int v307 = 0;
          uint64_t v196 = 0;
          if (v192 <= v191) {
            unint64_t v192 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v192 == v191)
            {
              LODWORD(v196) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v308 = v191 + 1;
              char v309 = *(unsigned char *)(v193 + v191);
              *((void *)a2 + 1) = v308;
              v196 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                unint64_t v191 = v308;
                BOOL v20 = v307++ > 8;
                if (v20) {
                  goto LABEL_374;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v196) = 0;
              }
            }
            break;
          }
LABEL_498:
          *((_DWORD *)this + 35) = v196;
          goto LABEL_544;
        case 0x1Bu:
          *((_DWORD *)this + 53) |= 0x80u;
          unint64_t v199 = *((void *)a2 + 1);
          unint64_t v200 = *((void *)a2 + 2);
          uint64_t v201 = *(void *)a2;
          if (v199 <= 0xFFFFFFFFFFFFFFF5 && v199 + 10 <= v200)
          {
            char v202 = 0;
            unsigned int v203 = 0;
            uint64_t v204 = 0;
            do
            {
              unint64_t v205 = v199 + 1;
              *((void *)a2 + 1) = v199 + 1;
              char v206 = *(unsigned char *)(v201 + v199);
              v204 |= (unint64_t)(v206 & 0x7F) << v202;
              if ((v206 & 0x80) == 0) {
                goto LABEL_501;
              }
              v202 += 7;
              unint64_t v199 = v205;
              BOOL v20 = v203++ > 8;
            }
            while (!v20);
LABEL_381:
            LODWORD(v204) = 0;
            goto LABEL_501;
          }
          char v310 = 0;
          unsigned int v311 = 0;
          uint64_t v204 = 0;
          if (v200 <= v199) {
            unint64_t v200 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v200 == v199)
            {
              LODWORD(v204) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v312 = v199 + 1;
              char v313 = *(unsigned char *)(v201 + v199);
              *((void *)a2 + 1) = v312;
              v204 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                unint64_t v199 = v312;
                BOOL v20 = v311++ > 8;
                if (v20) {
                  goto LABEL_381;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v204) = 0;
              }
            }
            break;
          }
LABEL_501:
          *((_DWORD *)this + 31) = v204;
          goto LABEL_544;
        case 0x1Cu:
          *((_DWORD *)this + 53) |= 2u;
          unint64_t v207 = *((void *)a2 + 1);
          unint64_t v208 = *((void *)a2 + 2);
          uint64_t v209 = *(void *)a2;
          if (v207 <= 0xFFFFFFFFFFFFFFF5 && v207 + 10 <= v208)
          {
            char v210 = 0;
            unsigned int v211 = 0;
            uint64_t v212 = 0;
            do
            {
              unint64_t v213 = v207 + 1;
              *((void *)a2 + 1) = v207 + 1;
              char v214 = *(unsigned char *)(v209 + v207);
              v212 |= (unint64_t)(v214 & 0x7F) << v210;
              if ((v214 & 0x80) == 0) {
                goto LABEL_504;
              }
              v210 += 7;
              unint64_t v207 = v213;
              BOOL v20 = v211++ > 8;
            }
            while (!v20);
LABEL_388:
            uint64_t v212 = 0;
            goto LABEL_504;
          }
          char v314 = 0;
          unsigned int v315 = 0;
          uint64_t v212 = 0;
          if (v208 <= v207) {
            unint64_t v208 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v208 == v207)
            {
              uint64_t v212 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v316 = v207 + 1;
              char v317 = *(unsigned char *)(v209 + v207);
              *((void *)a2 + 1) = v316;
              v212 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                unint64_t v207 = v316;
                BOOL v20 = v315++ > 8;
                if (v20) {
                  goto LABEL_388;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v212 = 0;
              }
            }
            break;
          }
LABEL_504:
          *((void *)this + 11) = v212;
          goto LABEL_544;
        case 0x1Du:
          *((_DWORD *)this + 53) |= 0x40000000u;
          unint64_t v215 = *((void *)a2 + 1);
          if (v215 >= *((void *)a2 + 2))
          {
            BOOL v218 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v216 = v215 + 1;
            int v217 = *(unsigned __int8 *)(*(void *)a2 + v215);
            *((void *)a2 + 1) = v216;
            BOOL v218 = v217 != 0;
          }
          *((unsigned char *)this + 210) = v218;
          goto LABEL_544;
        case 0x1Eu:
          *((_DWORD *)this + 53) |= 0x1000u;
          unint64_t v219 = *((void *)a2 + 1);
          if (v219 > 0xFFFFFFFFFFFFFFFBLL || v219 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v219);
          goto LABEL_542;
        case 0x1Fu:
          *((_DWORD *)this + 53) |= 0x200u;
          unint64_t v220 = *((void *)a2 + 1);
          if (v220 > 0xFFFFFFFFFFFFFFFBLL || v220 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v220);
          goto LABEL_542;
        case 0x20u:
          *((_DWORD *)this + 53) |= 0x40u;
          unint64_t v221 = *((void *)a2 + 1);
          if (v221 > 0xFFFFFFFFFFFFFFFBLL || v221 + 4 > *((void *)a2 + 2)) {
            goto LABEL_540;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v221);
          goto LABEL_542;
        case 0x21u:
          *((_DWORD *)this + 53) |= 0x200000u;
          unint64_t v222 = *((void *)a2 + 1);
          unint64_t v223 = *((void *)a2 + 2);
          uint64_t v224 = *(void *)a2;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            char v225 = 0;
            unsigned int v226 = 0;
            uint64_t v227 = 0;
            do
            {
              unint64_t v228 = v222 + 1;
              *((void *)a2 + 1) = v222 + 1;
              char v229 = *(unsigned char *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0) {
                goto LABEL_507;
              }
              v225 += 7;
              unint64_t v222 = v228;
              BOOL v20 = v226++ > 8;
            }
            while (!v20);
LABEL_397:
            LODWORD(v227) = 0;
            goto LABEL_507;
          }
          char v318 = 0;
          unsigned int v319 = 0;
          uint64_t v227 = 0;
          if (v223 <= v222) {
            unint64_t v223 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v223 == v222)
            {
              LODWORD(v227) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v320 = v222 + 1;
              char v321 = *(unsigned char *)(v224 + v222);
              *((void *)a2 + 1) = v320;
              v227 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                unint64_t v222 = v320;
                BOOL v20 = v319++ > 8;
                if (v20) {
                  goto LABEL_397;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v227) = 0;
              }
            }
            break;
          }
LABEL_507:
          *((_DWORD *)this + 45) = v227;
          goto LABEL_544;
        case 0x22u:
          *((_DWORD *)this + 53) |= 0x400u;
          unint64_t v230 = *((void *)a2 + 1);
          unint64_t v231 = *((void *)a2 + 2);
          uint64_t v232 = *(void *)a2;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            char v233 = 0;
            unsigned int v234 = 0;
            uint64_t v235 = 0;
            do
            {
              unint64_t v236 = v230 + 1;
              *((void *)a2 + 1) = v230 + 1;
              char v237 = *(unsigned char *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0) {
                goto LABEL_510;
              }
              v233 += 7;
              unint64_t v230 = v236;
              BOOL v20 = v234++ > 8;
            }
            while (!v20);
LABEL_404:
            LODWORD(v235) = 0;
            goto LABEL_510;
          }
          char v322 = 0;
          unsigned int v323 = 0;
          uint64_t v235 = 0;
          if (v231 <= v230) {
            unint64_t v231 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v231 == v230)
            {
              LODWORD(v235) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v324 = v230 + 1;
              char v325 = *(unsigned char *)(v232 + v230);
              *((void *)a2 + 1) = v324;
              v235 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                unint64_t v230 = v324;
                BOOL v20 = v323++ > 8;
                if (v20) {
                  goto LABEL_404;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v235) = 0;
              }
            }
            break;
          }
LABEL_510:
          *((_DWORD *)this + 34) = v235;
          goto LABEL_544;
        case 0x23u:
          *((_DWORD *)this + 53) |= 0x800000u;
          unint64_t v238 = *((void *)a2 + 1);
          unint64_t v239 = *((void *)a2 + 2);
          uint64_t v240 = *(void *)a2;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            char v241 = 0;
            unsigned int v242 = 0;
            uint64_t v243 = 0;
            do
            {
              unint64_t v244 = v238 + 1;
              *((void *)a2 + 1) = v238 + 1;
              char v245 = *(unsigned char *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0) {
                goto LABEL_513;
              }
              v241 += 7;
              unint64_t v238 = v244;
              BOOL v20 = v242++ > 8;
            }
            while (!v20);
LABEL_411:
            LODWORD(v243) = 0;
            goto LABEL_513;
          }
          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v243 = 0;
          if (v239 <= v238) {
            unint64_t v239 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v239 == v238)
            {
              LODWORD(v243) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v328 = v238 + 1;
              char v329 = *(unsigned char *)(v240 + v238);
              *((void *)a2 + 1) = v328;
              v243 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                unint64_t v238 = v328;
                BOOL v20 = v327++ > 8;
                if (v20) {
                  goto LABEL_411;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v243) = 0;
              }
            }
            break;
          }
LABEL_513:
          *((_DWORD *)this + 47) = v243;
          goto LABEL_544;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_544;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTrigger::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_45:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 211), 2u);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(this + 96), 1u);
  int v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0) {
    goto LABEL_45;
  }
LABEL_3:
  if (v4) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
LABEL_5:
  int v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  double v8 = *(float **)(v3 + 56);
  int v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  uint64_t v11 = *(float **)(v3 + 32);
  float v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 208), 7u);
    int v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_49;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 209), 8u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 9u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0xAu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0xBu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0xCu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0xDu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0xEu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0xFu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x10u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000) == 0)
  {
LABEL_25:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 0x11u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x12u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x13u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x14u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20) == 0)
  {
LABEL_29:
    if ((v14 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x15u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 104), 0x16u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v14 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(float *)(v3 + 196), 0x17u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 200), 0x18u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 204), 0x19u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x800) == 0)
  {
LABEL_34:
    if ((v14 & 0x80) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 140), 0x1Au);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x1Bu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 88), 0x1Cu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 210), 0x1Du);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0) {
      goto LABEL_39;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x1Eu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0) {
      goto LABEL_40;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x1Fu);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 0x20u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0) {
      goto LABEL_42;
    }
LABEL_74:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x22u);
    if ((*(_DWORD *)(v3 + 212) & 0x800000) == 0) {
      return this;
    }
    goto LABEL_75;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x21u);
  int v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) != 0) {
    goto LABEL_74;
  }
LABEL_42:
  if ((v14 & 0x800000) == 0) {
    return this;
  }
LABEL_75:
  unsigned int v15 = *(_DWORD *)(v3 + 188);

  return PB::Writer::writeVarInt(a2, v15, 0x23u);
}

uint64_t CMMsl::KappaTrigger::hash_value(CMMsl::KappaTrigger *this)
{
  int v2 = *((_DWORD *)this + 53);
  if ((v2 & 4) != 0)
  {
    uint64_t v3 = *((void *)this + 12);
    if (v2 < 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if (v2 < 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned __int8 *)this + 211);
      goto LABEL_6;
    }
  }
  uint64_t v4 = 0;
LABEL_6:
  uint64_t v52 = v4;
  if (v2)
  {
    double v5 = *((double *)this + 10);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    double v50 = v5;
  }
  else
  {
    double v50 = 0.0;
  }
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  int v9 = *((_DWORD *)this + 53);
  uint64_t v51 = v8;
  if ((v9 & 0x10000000) != 0) {
    uint64_t v49 = *((unsigned __int8 *)this + 208);
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v10 = v3;
  if ((v9 & 0x20000000) != 0)
  {
    uint64_t v48 = *((unsigned __int8 *)this + 209);
    if ((v9 & 0x400000) != 0)
    {
LABEL_16:
      uint64_t v11 = *((unsigned int *)this + 46);
      if ((v9 & 0x10) != 0) {
        goto LABEL_17;
      }
LABEL_68:
      uint64_t v47 = 0;
      if ((v9 & 0x80000) != 0) {
        goto LABEL_20;
      }
      goto LABEL_69;
    }
  }
  else
  {
    uint64_t v48 = 0;
    if ((v9 & 0x400000) != 0) {
      goto LABEL_16;
    }
  }
  uint64_t v11 = 0;
  if ((v9 & 0x10) == 0) {
    goto LABEL_68;
  }
LABEL_17:
  float v12 = *((float *)this + 28);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  uint64_t v47 = v13;
  if ((v9 & 0x80000) != 0)
  {
LABEL_20:
    uint64_t v46 = *((unsigned int *)this + 43);
    if ((v9 & 0x40000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v46 = 0;
  if ((v9 & 0x40000) != 0)
  {
LABEL_21:
    uint64_t v14 = *((unsigned int *)this + 42);
    if ((v9 & 0x20000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v14 = 0;
  if ((v9 & 0x20000) != 0)
  {
LABEL_22:
    uint64_t v15 = *((unsigned int *)this + 41);
    if ((v9 & 0x10000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v15 = 0;
  if ((v9 & 0x10000) != 0)
  {
LABEL_23:
    uint64_t v16 = *((unsigned int *)this + 40);
    if ((v9 & 0x8000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v16 = 0;
  if ((v9 & 0x8000) != 0)
  {
LABEL_24:
    uint64_t v17 = *((unsigned int *)this + 39);
    if ((v9 & 0x4000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v17 = 0;
  if ((v9 & 0x4000) != 0)
  {
LABEL_25:
    uint64_t v18 = *((unsigned int *)this + 38);
    if ((v9 & 0x2000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v18 = 0;
  if ((v9 & 0x2000) != 0)
  {
LABEL_26:
    uint64_t v19 = *((unsigned int *)this + 37);
    if ((v9 & 0x100000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v19 = 0;
  if ((v9 & 0x100000) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned int *)this + 44);
    if ((v9 & 0x100) != 0) {
      goto LABEL_28;
    }
LABEL_77:
    uint64_t v22 = 0;
    if ((v9 & 0x1000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_78;
  }
LABEL_76:
  uint64_t v20 = 0;
  if ((v9 & 0x100) == 0) {
    goto LABEL_77;
  }
LABEL_28:
  float v21 = *((float *)this + 32);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = LODWORD(v21);
  }
  if ((v9 & 0x1000000) != 0)
  {
LABEL_32:
    uint64_t v23 = *((unsigned int *)this + 48);
    if ((v9 & 0x20) != 0) {
      goto LABEL_33;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v23 = 0;
  if ((v9 & 0x20) != 0)
  {
LABEL_33:
    uint64_t v24 = *((int *)this + 29);
    if ((v9 & 8) != 0) {
      goto LABEL_34;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v24 = 0;
  if ((v9 & 8) != 0)
  {
LABEL_34:
    uint64_t v25 = *((void *)this + 13);
    if ((v9 & 0x2000000) != 0) {
      goto LABEL_35;
    }
LABEL_81:
    uint64_t v27 = 0;
    if ((v9 & 0x4000000) != 0) {
      goto LABEL_39;
    }
LABEL_82:
    uint64_t v29 = 0;
    if ((v9 & 0x8000000) != 0) {
      goto LABEL_43;
    }
LABEL_83:
    uint64_t v31 = 0;
    if ((v9 & 0x800) != 0) {
      goto LABEL_47;
    }
    goto LABEL_84;
  }
LABEL_80:
  uint64_t v25 = 0;
  if ((v9 & 0x2000000) == 0) {
    goto LABEL_81;
  }
LABEL_35:
  float v26 = *((float *)this + 49);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v9 & 0x4000000) == 0) {
    goto LABEL_82;
  }
LABEL_39:
  float v28 = *((float *)this + 50);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = LODWORD(v28);
  }
  if ((v9 & 0x8000000) == 0) {
    goto LABEL_83;
  }
LABEL_43:
  float v30 = *((float *)this + 51);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = LODWORD(v30);
  }
  if ((v9 & 0x800) != 0)
  {
LABEL_47:
    uint64_t v32 = *((unsigned int *)this + 35);
    if ((v9 & 0x80) != 0) {
      goto LABEL_48;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v32 = 0;
  if ((v9 & 0x80) != 0)
  {
LABEL_48:
    uint64_t v33 = *((unsigned int *)this + 31);
    if ((v9 & 2) != 0) {
      goto LABEL_49;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v33 = 0;
  if ((v9 & 2) != 0)
  {
LABEL_49:
    uint64_t v34 = *((void *)this + 11);
    if ((v9 & 0x40000000) != 0) {
      goto LABEL_50;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v34 = 0;
  if ((v9 & 0x40000000) != 0)
  {
LABEL_50:
    uint64_t v35 = *((unsigned __int8 *)this + 210);
    if ((v9 & 0x1000) != 0) {
      goto LABEL_51;
    }
LABEL_88:
    uint64_t v37 = 0;
    if ((v9 & 0x200) != 0) {
      goto LABEL_55;
    }
LABEL_89:
    uint64_t v39 = 0;
    if ((v9 & 0x40) != 0) {
      goto LABEL_59;
    }
LABEL_90:
    uint64_t v41 = 0;
    if ((v9 & 0x200000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_91;
  }
LABEL_87:
  uint64_t v35 = 0;
  if ((v9 & 0x1000) == 0) {
    goto LABEL_88;
  }
LABEL_51:
  float v36 = *((float *)this + 36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = LODWORD(v36);
  }
  if ((v9 & 0x200) == 0) {
    goto LABEL_89;
  }
LABEL_55:
  float v38 = *((float *)this + 33);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = LODWORD(v38);
  }
  if ((v9 & 0x40) == 0) {
    goto LABEL_90;
  }
LABEL_59:
  float v40 = *((float *)this + 30);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = LODWORD(v40);
  }
  if ((v9 & 0x200000) != 0)
  {
LABEL_63:
    uint64_t v42 = *((unsigned int *)this + 45);
    if ((v9 & 0x400) != 0) {
      goto LABEL_64;
    }
LABEL_92:
    uint64_t v43 = 0;
    if ((v9 & 0x800000) != 0) {
      goto LABEL_65;
    }
LABEL_93:
    uint64_t v44 = 0;
    return v52 ^ v10 ^ *(void *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
  }
LABEL_91:
  uint64_t v42 = 0;
  if ((v9 & 0x400) == 0) {
    goto LABEL_92;
  }
LABEL_64:
  uint64_t v43 = *((unsigned int *)this + 34);
  if ((v9 & 0x800000) == 0) {
    goto LABEL_93;
  }
LABEL_65:
  uint64_t v44 = *((unsigned int *)this + 47);
  return v52 ^ v10 ^ *(void *)&v50 ^ v6 ^ v7 ^ v51 ^ v49 ^ v48 ^ v11 ^ v47 ^ v46 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v24 ^ v25 ^ v27 ^ v29 ^ v31 ^ v32 ^ v33 ^ v34 ^ v35 ^ v37 ^ v39 ^ v41 ^ v42 ^ v43 ^ v44;
}

void CMMsl::KappaTriggerClustersResult::~KappaTriggerClustersResult(CMMsl::KappaTriggerClustersResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t this, const CMMsl::KappaTriggerClustersResult *a2)
{
  *(void *)this = off_1003A6F98;
  *(_DWORD *)(this + 96) = 0;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x1000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 22);
    __int16 v3 = 4096;
    *(_WORD *)(this + 96) = 4096;
    *(_DWORD *)(this + 88) = v4;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 48) & 0x800) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 21);
    v3 |= 0x800u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 84) = v5;
    __int16 v2 = *((_WORD *)a2 + 48);
  }
LABEL_6:
  if ((v2 & 0x100) != 0)
  {
    int v6 = *((_DWORD *)a2 + 18);
    v3 |= 0x100u;
    *(_WORD *)(this + 96) = v3;
    *(_DWORD *)(this + 72) = v6;
    __int16 v2 = *((_WORD *)a2 + 48);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_23;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x8000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v8 = *((unsigned char *)a2 + 94);
  v3 |= 0x8000u;
  *(_WORD *)(this + 96) = v3;
  *(unsigned char *)(this + 94) = v8;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x4000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v9 = *((unsigned char *)a2 + 93);
  v3 |= 0x4000u;
  *(_WORD *)(this + 96) = v3;
  *(unsigned char *)(this + 93) = v9;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v10 = *((unsigned char *)a2 + 92);
  v3 |= 0x2000u;
  *(_WORD *)(this + 96) = v3;
  *(unsigned char *)(this + 92) = v10;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v11 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 16) = v11;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v12 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v13 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 40) = v13;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v14 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 48) = v14;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x40) == 0)
  {
LABEL_16:
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v15 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 56) = v15;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 1) == 0)
  {
LABEL_17:
    if ((v2 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 96) = v3;
  *(void *)(this + 8) = v16;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x400) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v17 = *((_DWORD *)a2 + 20);
  v3 |= 0x400u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 80) = v17;
  __int16 v2 = *((_WORD *)a2 + 48);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_34:
    uint64_t v19 = *((void *)a2 + 3);
    *(_WORD *)(this + 96) = v3 | 4;
    *(void *)(this + 24) = v19;
    return this;
  }
LABEL_33:
  int v18 = *((_DWORD *)a2 + 19);
  v3 |= 0x200u;
  *(_WORD *)(this + 96) = v3;
  *(_DWORD *)(this + 76) = v18;
  if ((*((_WORD *)a2 + 48) & 4) != 0) {
    goto LABEL_34;
  }
  return this;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *a1, const CMMsl::KappaTriggerClustersResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerClustersResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerClustersResult *a2, CMMsl::KappaTriggerClustersResult *a3)
{
  int v3 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  int v4 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  int v5 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v5;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 94);
  *((unsigned char *)this + 94) = *((unsigned char *)a2 + 94);
  *((unsigned char *)a2 + 94) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 93);
  *((unsigned char *)this + 93) = *((unsigned char *)a2 + 93);
  *((unsigned char *)a2 + 93) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 92);
  *((unsigned char *)this + 92) = *((unsigned char *)a2 + 92);
  *((unsigned char *)a2 + 92) = v7;
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v13;
  LODWORD(v13) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v13;
  LODWORD(v13) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  uint64_t v14 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v14;
  return result;
}

float CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6F98;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  float result = *(float *)(a2 + 72);
  *(float *)(a1 + 72) = result;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::KappaTriggerClustersResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTriggerClustersResult::KappaTriggerClustersResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerClustersResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTriggerClustersResult::formatText(CMMsl::KappaTriggerClustersResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 48);
  if (v5)
  {
    PB::TextFormatter::format(a2, "armedDuration", *((void *)this + 1));
    __int16 v5 = *((_WORD *)this + 48);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((*((_WORD *)this + 48) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "armedDurationThreshold", *((float *)this + 18));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "armedDurationThresholdTimestamp", *((void *)this + 2));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "btHint", *((void *)this + 3));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 4));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 5));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "firstTriggerTimestamp", *((void *)this + 6));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "isBTHintDetected", *((unsigned char *)this + 92));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "isClusterInBeginningOfDrive", *((unsigned char *)this + 93));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "isTriggerCluster", *((unsigned char *)this + 94));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "lastTriggerTimestamp", *((void *)this + 7));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "numTriggersInEpoch", *((_DWORD *)this + 19));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "numTriggersInWindow", *((_DWORD *)this + 20));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "numTriggersThreshold", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 8));
  if ((*((_WORD *)this + 48) & 0x1000) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(a2, "windowDuration", *((_DWORD *)this + 22));
LABEL_18:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaTriggerClustersResult::readFrom(CMMsl::KappaTriggerClustersResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v20)
        {
          case 301:
            *((_WORD *)this + 48) |= 8u;
            unint64_t v27 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v28 = *(void *)a2;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              char v104 = 0;
              unsigned int v105 = 0;
              uint64_t v31 = 0;
              if (v2 <= v27) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v27)
                {
                  uint64_t v31 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_223;
                }
                unint64_t v106 = v27++;
                char v107 = *(unsigned char *)(v28 + v106);
                *((void *)a2 + 1) = v27;
                v31 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0) {
                  break;
                }
                v104 += 7;
                BOOL v14 = v105++ > 8;
                if (v14)
                {
                  uint64_t v31 = 0;
LABEL_222:
                  unint64_t v2 = v106 + 1;
                  goto LABEL_223;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v31 = 0;
              }
              goto LABEL_222;
            }
            char v29 = 0;
            unsigned int v30 = 0;
            uint64_t v31 = 0;
            do
            {
              unint64_t v2 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v32 = *(unsigned char *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0) {
                goto LABEL_223;
              }
              v29 += 7;
              unint64_t v27 = v2;
              BOOL v14 = v30++ > 8;
            }
            while (!v14);
            uint64_t v31 = 0;
LABEL_223:
            *((void *)this + 4) = v31;
            break;
          case 302:
            *((_WORD *)this + 48) |= 0x10u;
            unint64_t v45 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v46 = *(void *)a2;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              char v112 = 0;
              unsigned int v113 = 0;
              uint64_t v49 = 0;
              if (v2 <= v45) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v45)
                {
                  uint64_t v49 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_233;
                }
                unint64_t v114 = v45++;
                char v115 = *(unsigned char *)(v46 + v114);
                *((void *)a2 + 1) = v45;
                v49 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0) {
                  break;
                }
                v112 += 7;
                BOOL v14 = v113++ > 8;
                if (v14)
                {
                  uint64_t v49 = 0;
LABEL_232:
                  unint64_t v2 = v114 + 1;
                  goto LABEL_233;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v49 = 0;
              }
              goto LABEL_232;
            }
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v2 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v50 = *(unsigned char *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0) {
                goto LABEL_233;
              }
              v47 += 7;
              unint64_t v45 = v2;
              BOOL v14 = v48++ > 8;
            }
            while (!v14);
            uint64_t v49 = 0;
LABEL_233:
            *((void *)this + 5) = v49;
            break;
          case 303:
            *((_WORD *)this + 48) |= 0x20u;
            unint64_t v51 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v52 = *(void *)a2;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              char v116 = 0;
              unsigned int v117 = 0;
              uint64_t v55 = 0;
              if (v2 <= v51) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v51)
                {
                  uint64_t v55 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_238;
                }
                unint64_t v118 = v51++;
                char v119 = *(unsigned char *)(v52 + v118);
                *((void *)a2 + 1) = v51;
                v55 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0) {
                  break;
                }
                v116 += 7;
                BOOL v14 = v117++ > 8;
                if (v14)
                {
                  uint64_t v55 = 0;
LABEL_237:
                  unint64_t v2 = v118 + 1;
                  goto LABEL_238;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v55 = 0;
              }
              goto LABEL_237;
            }
            char v53 = 0;
            unsigned int v54 = 0;
            uint64_t v55 = 0;
            do
            {
              unint64_t v2 = v51 + 1;
              *((void *)a2 + 1) = v51 + 1;
              char v56 = *(unsigned char *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0) {
                goto LABEL_238;
              }
              v53 += 7;
              unint64_t v51 = v2;
              BOOL v14 = v54++ > 8;
            }
            while (!v14);
            uint64_t v55 = 0;
LABEL_238:
            *((void *)this + 6) = v55;
            break;
          case 304:
            *((_WORD *)this + 48) |= 0x40u;
            unint64_t v57 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v58 = *(void *)a2;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              char v120 = 0;
              unsigned int v121 = 0;
              uint64_t v61 = 0;
              if (v2 <= v57) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v57)
                {
                  uint64_t v61 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_243;
                }
                unint64_t v122 = v57++;
                char v123 = *(unsigned char *)(v58 + v122);
                *((void *)a2 + 1) = v57;
                v61 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0) {
                  break;
                }
                v120 += 7;
                BOOL v14 = v121++ > 8;
                if (v14)
                {
                  uint64_t v61 = 0;
LABEL_242:
                  unint64_t v2 = v122 + 1;
                  goto LABEL_243;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v61 = 0;
              }
              goto LABEL_242;
            }
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v2 = v57 + 1;
              *((void *)a2 + 1) = v57 + 1;
              char v62 = *(unsigned char *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0) {
                goto LABEL_243;
              }
              v59 += 7;
              unint64_t v57 = v2;
              BOOL v14 = v60++ > 8;
            }
            while (!v14);
            uint64_t v61 = 0;
LABEL_243:
            *((void *)this + 7) = v61;
            break;
          case 305:
            *((_WORD *)this + 48) |= 1u;
            unint64_t v63 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v64 = *(void *)a2;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              char v124 = 0;
              unsigned int v125 = 0;
              uint64_t v67 = 0;
              if (v2 <= v63) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v63)
                {
                  uint64_t v67 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_248;
                }
                unint64_t v126 = v63++;
                char v127 = *(unsigned char *)(v64 + v126);
                *((void *)a2 + 1) = v63;
                v67 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0) {
                  break;
                }
                v124 += 7;
                BOOL v14 = v125++ > 8;
                if (v14)
                {
                  uint64_t v67 = 0;
LABEL_247:
                  unint64_t v2 = v126 + 1;
                  goto LABEL_248;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v67 = 0;
              }
              goto LABEL_247;
            }
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v2 = v63 + 1;
              *((void *)a2 + 1) = v63 + 1;
              char v68 = *(unsigned char *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0) {
                goto LABEL_248;
              }
              v65 += 7;
              unint64_t v63 = v2;
              BOOL v14 = v66++ > 8;
            }
            while (!v14);
            uint64_t v67 = 0;
LABEL_248:
            *((void *)this + 1) = v67;
            break;
          case 306:
            *((_WORD *)this + 48) |= 0x400u;
            unint64_t v69 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v70 = *(void *)a2;
            if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
            {
              char v128 = 0;
              unsigned int v129 = 0;
              uint64_t v73 = 0;
              if (v2 <= v69) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v69)
                {
                  LODWORD(v73) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_253;
                }
                unint64_t v130 = v69++;
                char v131 = *(unsigned char *)(v70 + v130);
                *((void *)a2 + 1) = v69;
                v73 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0) {
                  break;
                }
                v128 += 7;
                BOOL v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v73) = 0;
LABEL_252:
                  unint64_t v2 = v130 + 1;
                  goto LABEL_253;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v73) = 0;
              }
              goto LABEL_252;
            }
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            do
            {
              unint64_t v2 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v74 = *(unsigned char *)(v70 + v69);
              v73 |= (unint64_t)(v74 & 0x7F) << v71;
              if ((v74 & 0x80) == 0) {
                goto LABEL_253;
              }
              v71 += 7;
              unint64_t v69 = v2;
              BOOL v14 = v72++ > 8;
            }
            while (!v14);
            LODWORD(v73) = 0;
LABEL_253:
            *((_DWORD *)this + 20) = v73;
            break;
          case 307:
            *((_WORD *)this + 48) |= 0x200u;
            unint64_t v75 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v76 = *(void *)a2;
            if (v75 > 0xFFFFFFFFFFFFFFF5 || v75 + 10 > v2)
            {
              char v132 = 0;
              unsigned int v133 = 0;
              uint64_t v79 = 0;
              if (v2 <= v75) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v75)
                {
                  LODWORD(v79) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_258;
                }
                unint64_t v134 = v75++;
                char v135 = *(unsigned char *)(v76 + v134);
                *((void *)a2 + 1) = v75;
                v79 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0) {
                  break;
                }
                v132 += 7;
                BOOL v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v79) = 0;
LABEL_257:
                  unint64_t v2 = v134 + 1;
                  goto LABEL_258;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v79) = 0;
              }
              goto LABEL_257;
            }
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v2 = v75 + 1;
              *((void *)a2 + 1) = v75 + 1;
              char v80 = *(unsigned char *)(v76 + v75);
              v79 |= (unint64_t)(v80 & 0x7F) << v77;
              if ((v80 & 0x80) == 0) {
                goto LABEL_258;
              }
              v77 += 7;
              unint64_t v75 = v2;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
            LODWORD(v79) = 0;
LABEL_258:
            *((_DWORD *)this + 19) = v79;
            break;
          case 308:
            *((_WORD *)this + 48) |= 4u;
            unint64_t v81 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v82 = *(void *)a2;
            if (v81 > 0xFFFFFFFFFFFFFFF5 || v81 + 10 > v2)
            {
              char v136 = 0;
              unsigned int v137 = 0;
              uint64_t v85 = 0;
              if (v2 <= v81) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v81)
                {
                  uint64_t v85 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_263;
                }
                unint64_t v138 = v81++;
                char v139 = *(unsigned char *)(v82 + v138);
                *((void *)a2 + 1) = v81;
                v85 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0) {
                  break;
                }
                v136 += 7;
                BOOL v14 = v137++ > 8;
                if (v14)
                {
                  uint64_t v85 = 0;
LABEL_262:
                  unint64_t v2 = v138 + 1;
                  goto LABEL_263;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v85 = 0;
              }
              goto LABEL_262;
            }
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v2 = v81 + 1;
              *((void *)a2 + 1) = v81 + 1;
              char v86 = *(unsigned char *)(v82 + v81);
              v85 |= (unint64_t)(v86 & 0x7F) << v83;
              if ((v86 & 0x80) == 0) {
                goto LABEL_263;
              }
              v83 += 7;
              unint64_t v81 = v2;
              BOOL v14 = v84++ > 8;
            }
            while (!v14);
            uint64_t v85 = 0;
LABEL_263:
            *((void *)this + 3) = v85;
            break;
          default:
            goto LABEL_121;
        }
      }
      else if ((int)v20 <= 200)
      {
        switch(v20)
        {
          case 'e':
            *((_WORD *)this + 48) |= 0x1000u;
            unint64_t v87 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v88 = *(void *)a2;
            if (v87 > 0xFFFFFFFFFFFFFFF5 || v87 + 10 > v2)
            {
              char v140 = 0;
              unsigned int v141 = 0;
              uint64_t v91 = 0;
              if (v2 <= v87) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v87)
                {
                  LODWORD(v91) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_268;
                }
                unint64_t v142 = v87++;
                char v143 = *(unsigned char *)(v88 + v142);
                *((void *)a2 + 1) = v87;
                v91 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0) {
                  break;
                }
                v140 += 7;
                BOOL v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  goto LABEL_267;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v91) = 0;
              }
LABEL_267:
              unint64_t v2 = v142 + 1;
            }
            else
            {
              char v89 = 0;
              unsigned int v90 = 0;
              uint64_t v91 = 0;
              while (1)
              {
                unint64_t v2 = v87 + 1;
                *((void *)a2 + 1) = v87 + 1;
                char v92 = *(unsigned char *)(v88 + v87);
                v91 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0) {
                  break;
                }
                v89 += 7;
                unint64_t v87 = v2;
                BOOL v14 = v90++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  break;
                }
              }
            }
LABEL_268:
            *((_DWORD *)this + 22) = v91;
            break;
          case 'f':
            *((_WORD *)this + 48) |= 0x800u;
            unint64_t v93 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v94 = *(void *)a2;
            if (v93 > 0xFFFFFFFFFFFFFFF5 || v93 + 10 > v2)
            {
              char v144 = 0;
              unsigned int v145 = 0;
              uint64_t v97 = 0;
              if (v2 <= v93) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v93)
                {
                  LODWORD(v97) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_273;
                }
                unint64_t v146 = v93++;
                char v147 = *(unsigned char *)(v94 + v146);
                *((void *)a2 + 1) = v93;
                v97 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0) {
                  break;
                }
                v144 += 7;
                BOOL v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  goto LABEL_272;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v97) = 0;
              }
LABEL_272:
              unint64_t v2 = v146 + 1;
            }
            else
            {
              char v95 = 0;
              unsigned int v96 = 0;
              uint64_t v97 = 0;
              while (1)
              {
                unint64_t v2 = v93 + 1;
                *((void *)a2 + 1) = v93 + 1;
                char v98 = *(unsigned char *)(v94 + v93);
                v97 |= (unint64_t)(v98 & 0x7F) << v95;
                if ((v98 & 0x80) == 0) {
                  break;
                }
                v95 += 7;
                unint64_t v93 = v2;
                BOOL v14 = v96++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  break;
                }
              }
            }
LABEL_273:
            *((_DWORD *)this + 21) = v97;
            break;
          case 'g':
            *((_WORD *)this + 48) |= 0x100u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
            {
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v2;
            }
            else
            {
              *((unsigned char *)a2 + 24) = 1;
            }
            break;
          default:
LABEL_121:
            uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
            if (!result) {
              return result;
            }
            unint64_t v2 = *((void *)a2 + 1);
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 201:
            *((_WORD *)this + 48) |= 0x80u;
            unint64_t v21 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v22 = *(void *)a2;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              char v100 = 0;
              unsigned int v101 = 0;
              uint64_t v25 = 0;
              if (v2 <= v21) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v21)
                {
                  uint64_t v25 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_218;
                }
                unint64_t v102 = v21++;
                char v103 = *(unsigned char *)(v22 + v102);
                *((void *)a2 + 1) = v21;
                v25 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0) {
                  break;
                }
                v100 += 7;
                BOOL v14 = v101++ > 8;
                if (v14)
                {
                  uint64_t v25 = 0;
LABEL_217:
                  unint64_t v2 = v102 + 1;
                  goto LABEL_218;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v25 = 0;
              }
              goto LABEL_217;
            }
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v2 = v21 + 1;
              *((void *)a2 + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                goto LABEL_218;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
            uint64_t v25 = 0;
LABEL_218:
            *((void *)this + 8) = v25;
            break;
          case 202:
            *((_WORD *)this + 48) |= 0x8000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v34 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v34 = v33 != 0;
            }
            *((unsigned char *)this + 94) = v34;
            break;
          case 203:
            *((_WORD *)this + 48) |= 0x4000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v36 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v36 = v35 != 0;
            }
            *((unsigned char *)this + 93) = v36;
            break;
          case 204:
            *((_WORD *)this + 48) |= 0x2000u;
            unint64_t v2 = *((void *)a2 + 1);
            if (v2 >= *((void *)a2 + 2))
            {
              BOOL v38 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
              *((void *)a2 + 1) = v2;
              BOOL v38 = v37 != 0;
            }
            *((unsigned char *)this + 92) = v38;
            break;
          case 205:
            *((_WORD *)this + 48) |= 2u;
            unint64_t v39 = *((void *)a2 + 1);
            unint64_t v2 = *((void *)a2 + 2);
            uint64_t v40 = *(void *)a2;
            if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
            {
              char v108 = 0;
              unsigned int v109 = 0;
              uint64_t v43 = 0;
              if (v2 <= v39) {
                unint64_t v2 = *((void *)a2 + 1);
              }
              while (1)
              {
                if (v2 == v39)
                {
                  uint64_t v43 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                  goto LABEL_228;
                }
                unint64_t v110 = v39++;
                char v111 = *(unsigned char *)(v40 + v110);
                *((void *)a2 + 1) = v39;
                v43 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0) {
                  break;
                }
                v108 += 7;
                BOOL v14 = v109++ > 8;
                if (v14)
                {
                  uint64_t v43 = 0;
LABEL_227:
                  unint64_t v2 = v110 + 1;
                  goto LABEL_228;
                }
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v43 = 0;
              }
              goto LABEL_227;
            }
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v2 = v39 + 1;
              *((void *)a2 + 1) = v39 + 1;
              char v44 = *(unsigned char *)(v40 + v39);
              v43 |= (unint64_t)(v44 & 0x7F) << v41;
              if ((v44 & 0x80) == 0) {
                goto LABEL_228;
              }
              v41 += 7;
              unint64_t v39 = v2;
              BOOL v14 = v42++ > 8;
            }
            while (!v14);
            uint64_t v43 = 0;
LABEL_228:
            *((void *)this + 2) = v43;
            break;
          default:
            goto LABEL_121;
        }
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTriggerClustersResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 96);
  if ((v4 & 0x1000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 88), 0x65u);
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(this + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x66u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x67u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 64), 0xC9u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 94), 0xCAu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 93), 0xCBu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 92), 0xCCu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xCDu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0x12Du);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x12Eu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x12Fu);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0x130u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0x131u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0x133u);
    if ((*(_WORD *)(v3 + 96) & 4) == 0) {
      return this;
    }
    goto LABEL_33;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x132u);
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_33:
  unint64_t v5 = *(void *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 0x134u);
}

uint64_t CMMsl::KappaTriggerClustersResult::hash_value(CMMsl::KappaTriggerClustersResult *this)
{
  __int16 v1 = *((_WORD *)this + 48);
  if ((v1 & 0x1000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 48) & 0x800) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 21);
      if ((*((_WORD *)this + 48) & 0x100) != 0) {
        goto LABEL_4;
      }
LABEL_22:
      uint64_t v5 = 0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((_WORD *)this + 48) & 0x800) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 48) & 0x100) == 0) {
    goto LABEL_22;
  }
LABEL_4:
  float v4 = *((float *)this + 18);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_7:
    uint64_t v6 = *((void *)this + 8);
    if ((*((_WORD *)this + 48) & 0x8000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 48) & 0x8000) != 0)
  {
LABEL_8:
    uint64_t v7 = *((unsigned __int8 *)this + 94);
    if ((*((_WORD *)this + 48) & 0x4000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 48) & 0x4000) != 0)
  {
LABEL_9:
    uint64_t v8 = *((unsigned __int8 *)this + 93);
    if ((*((_WORD *)this + 48) & 0x2000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v8 = 0;
  if ((*((_WORD *)this + 48) & 0x2000) != 0)
  {
LABEL_10:
    uint64_t v9 = *((unsigned __int8 *)this + 92);
    if ((v1 & 2) != 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v9 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_11:
    uint64_t v10 = *((void *)this + 2);
    if ((v1 & 8) != 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v10 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = *((void *)this + 4);
    if ((v1 & 0x10) != 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_13:
    uint64_t v12 = *((void *)this + 5);
    if ((v1 & 0x20) != 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v12 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_14:
    uint64_t v13 = *((void *)this + 6);
    if ((v1 & 0x40) != 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v13 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_15:
    uint64_t v14 = *((void *)this + 7);
    if (v1) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v14 = 0;
  if (v1)
  {
LABEL_16:
    uint64_t v15 = *((void *)this + 1);
    if ((*((_WORD *)this + 48) & 0x400) != 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v15 = 0;
  if ((*((_WORD *)this + 48) & 0x400) != 0)
  {
LABEL_17:
    uint64_t v16 = *((int *)this + 20);
    if ((*((_WORD *)this + 48) & 0x200) != 0) {
      goto LABEL_18;
    }
LABEL_34:
    uint64_t v17 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_19;
    }
LABEL_35:
    uint64_t v18 = 0;
    return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_33:
  uint64_t v16 = 0;
  if ((*((_WORD *)this + 48) & 0x200) == 0) {
    goto LABEL_34;
  }
LABEL_18:
  uint64_t v17 = *((int *)this + 19);
  if ((v1 & 4) == 0) {
    goto LABEL_35;
  }
LABEL_19:
  uint64_t v18 = *((void *)this + 3);
  return v3 ^ v2 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaTriggerDebug::~KappaTriggerDebug(CMMsl::KappaTriggerDebug *this)
{
  *(void *)this = off_1003A6FD0;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::KappaTriggerDebug::~KappaTriggerDebug(this);

  operator delete();
}

CMMsl::KappaTriggerDebug *CMMsl::KappaTriggerDebug::KappaTriggerDebug(CMMsl::KappaTriggerDebug *this, const CMMsl::KappaTriggerDebug *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = off_1003A6FD0;
  *((_DWORD *)this + 30) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  __int16 v5 = *((_WORD *)a2 + 60);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 11);
    __int16 v6 = 2;
    *((_WORD *)this + 60) = 2;
    *((void *)this + 11) = v7;
    __int16 v5 = *((_WORD *)a2 + 60);
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v6 = 0;
  if ((*((_WORD *)a2 + 60) & 0x200) != 0)
  {
LABEL_5:
    char v8 = *((unsigned char *)a2 + 118);
    v6 |= 0x200u;
    *((_WORD *)this + 60) = v6;
    *((unsigned char *)this + 118) = v8;
    __int16 v5 = *((_WORD *)a2 + 60);
  }
LABEL_6:
  if (v5)
  {
    uint64_t v9 = *((void *)a2 + 10);
    *((_WORD *)this + 60) = v6 | 1;
    *((void *)this + 10) = v9;
  }
  if (this != a2)
  {
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_100024308((char *)this + 56, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  __int16 v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x80) != 0)
  {
    char v13 = *((unsigned char *)a2 + 116);
    *((_WORD *)this + 60) |= 0x80u;
    *((unsigned char *)this + 116) = v13;
    __int16 v10 = *((_WORD *)a2 + 60);
    if ((v10 & 0x100) == 0)
    {
LABEL_12:
      if ((v10 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)a2 + 60) & 0x100) == 0)
  {
    goto LABEL_12;
  }
  char v14 = *((unsigned char *)a2 + 117);
  *((_WORD *)this + 60) |= 0x100u;
  *((unsigned char *)this + 117) = v14;
  __int16 v10 = *((_WORD *)a2 + 60);
  if ((v10 & 4) == 0)
  {
LABEL_13:
    if ((v10 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v15 = *((_DWORD *)a2 + 24);
  *((_WORD *)this + 60) |= 4u;
  *((_DWORD *)this + 24) = v15;
  __int16 v10 = *((_WORD *)a2 + 60);
  if ((v10 & 8) == 0)
  {
LABEL_14:
    if ((v10 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v16 = *((_DWORD *)a2 + 25);
  *((_WORD *)this + 60) |= 8u;
  *((_DWORD *)this + 25) = v16;
  __int16 v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x40) == 0)
  {
LABEL_15:
    if ((v10 & 0x20) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    int v18 = *((_DWORD *)a2 + 27);
    *((_WORD *)this + 60) |= 0x20u;
    *((_DWORD *)this + 27) = v18;
    if ((*((_WORD *)a2 + 60) & 0x10) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_23:
  int v17 = *((_DWORD *)a2 + 28);
  *((_WORD *)this + 60) |= 0x40u;
  *((_DWORD *)this + 28) = v17;
  __int16 v10 = *((_WORD *)a2 + 60);
  if ((v10 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 0x10) != 0)
  {
LABEL_17:
    int v11 = *((_DWORD *)a2 + 26);
    *((_WORD *)this + 60) |= 0x10u;
    *((_DWORD *)this + 26) = v11;
  }
  return this;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, const CMMsl::KappaTriggerDebug *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaTriggerDebug *a2, CMMsl::KappaTriggerDebug *a3)
{
  int v3 = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v4 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v4;
  LOBYTE(v4) = *((unsigned char *)this + 118);
  *((unsigned char *)this + 118) = *((unsigned char *)a2 + 118);
  *((unsigned char *)a2 + 118) = v4;
  uint64_t v5 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  uint64_t v9 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v11;
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v12;
  uint64_t v13 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v13;
  uint64_t v14 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 116);
  *((unsigned char *)this + 116) = *((unsigned char *)a2 + 116);
  *((unsigned char *)a2 + 116) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 117);
  *((unsigned char *)this + 117) = *((unsigned char *)a2 + 117);
  *((unsigned char *)a2 + 117) = v14;
  LODWORD(v5) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  float result = *((float *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((float *)a2 + 25) = result;
  LODWORD(v14) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v14;
  LODWORD(v14) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v14;
  LODWORD(v14) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v14;
  return result;
}

uint64_t CMMsl::KappaTriggerDebug::KappaTriggerDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A6FD0;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v5, (__n128 *)(a2 + 56));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

CMMsl *CMMsl::KappaTriggerDebug::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaTriggerDebug::KappaTriggerDebug((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaTriggerDebug *)v5, v3);
    CMMsl::KappaTriggerDebug::~KappaTriggerDebug((CMMsl::KappaTriggerDebug *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaTriggerDebug::formatText(CMMsl::KappaTriggerDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 60);
  if (v5)
  {
    PB::TextFormatter::format(a2, "avgHorizontalDecelMax", *((double *)this + 10));
    __int16 v5 = *((_WORD *)this + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "avgHorizontalDecelThresholdCoupled", *((float *)this + 24));
  if ((*((_WORD *)this + 60) & 8) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "impactThresholdUncoupled", *((float *)this + 25));
LABEL_5:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "inertialAccel", v8);
  }
  __int16 v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(a2, "isMounted", *((unsigned char *)this + 116));
    __int16 v9 = *((_WORD *)this + 60);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0) {
        goto LABEL_10;
      }
      goto LABEL_28;
    }
  }
  else if ((*((_WORD *)this + 60) & 0x100) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "isSimulated", *((unsigned char *)this + 117));
  __int16 v9 = *((_WORD *)this + 60);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "nAccelGap", *((_DWORD *)this + 26));
  if ((*((_WORD *)this + 60) & 0x20) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "numResets", *((_DWORD *)this + 27));
LABEL_12:
  uint64_t v10 = (float *)*((void *)this + 4);
  uint64_t v11 = (float *)*((void *)this + 5);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(a2, "prevQ", v12);
  }
  uint64_t v13 = (float *)*((void *)this + 7);
  uint64_t v14 = (float *)*((void *)this + 8);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(a2, "rawClampedAccel", v15);
  }
  __int16 v16 = *((_WORD *)this + 60);
  if ((v16 & 0x200) != 0)
  {
    PB::TextFormatter::format(a2, "shouldTrigger", *((unsigned char *)this + 118));
    __int16 v16 = *((_WORD *)this + 60);
    if ((v16 & 2) == 0)
    {
LABEL_18:
      if ((v16 & 0x40) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if ((v16 & 2) == 0)
  {
    goto LABEL_18;
  }
  PB::TextFormatter::format(a2, "timestamp", *((void *)this + 11));
  if ((*((_WORD *)this + 60) & 0x40) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(a2, "triggerPathBitmap", *((_DWORD *)this + 28));
LABEL_20:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::KappaTriggerDebug::readFrom(CMMsl::KappaTriggerDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 32);
    __int16 v9 = (char *)this + 48;
    uint64_t v10 = (void **)((char *)this + 56);
    uint64_t v11 = (char *)this + 72;
    float v12 = (void **)((char *)this + 8);
    uint64_t v13 = (char *)this + 24;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_WORD *)this + 60) |= 2u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          uint64_t v29 = *(void *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_212;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v20 = v31++ > 8;
            }
            while (!v20);
LABEL_146:
            uint64_t v32 = 0;
            goto LABEL_212;
          }
          char v116 = 0;
          unsigned int v117 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              uint64_t v32 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v118 = v27 + 1;
              char v119 = *(unsigned char *)(v29 + v27);
              *((void *)a2 + 1) = v118;
              v32 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                unint64_t v27 = v118;
                BOOL v20 = v117++ > 8;
                if (v20) {
                  goto LABEL_146;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v32 = 0;
              }
            }
            break;
          }
LABEL_212:
          *((void *)this + 11) = v32;
          goto LABEL_252;
        case 2u:
          *((_WORD *)this + 60) |= 0x200u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 >= *((void *)a2 + 2))
          {
            BOOL v38 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v36 = v35 + 1;
            int v37 = *(unsigned __int8 *)(*(void *)a2 + v35);
            *((void *)a2 + 1) = v36;
            BOOL v38 = v37 != 0;
          }
          *((unsigned char *)this + 118) = v38;
          goto LABEL_252;
        case 3u:
          *((_WORD *)this + 60) |= 1u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
            goto LABEL_248;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v39);
          goto LABEL_231;
        case 4u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)a2 + 1);
            unint64_t v41 = *((void *)a2 + 2);
            while (v40 < v41 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v43 = (char *)*((void *)this + 2);
              unint64_t v42 = *((void *)this + 3);
              if ((unint64_t)v43 >= v42)
              {
                unint64_t v45 = (char *)*v12;
                uint64_t v46 = (v43 - (unsigned char *)*v12) >> 3;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61) {
                  goto LABEL_262;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 2 > v47) {
                  unint64_t v47 = v48 >> 2;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  char v50 = (char *)sub_10000EEB0((uint64_t)v13, v49);
                  unint64_t v45 = (char *)*((void *)this + 1);
                  uint64_t v43 = (char *)*((void *)this + 2);
                }
                else
                {
                  char v50 = 0;
                }
                unint64_t v51 = &v50[8 * v46];
                *(void *)unint64_t v51 = 0;
                char v44 = v51 + 8;
                while (v43 != v45)
                {
                  uint64_t v52 = *((void *)v43 - 1);
                  v43 -= 8;
                  *((void *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *((void *)this + 1) = v51;
                *((void *)this + 2) = v44;
                *((void *)this + 3) = &v50[8 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(void *)uint64_t v43 = 0;
                char v44 = v43 + 8;
              }
              *((void *)this + 2) = v44;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
                goto LABEL_180;
              }
              *(v44 - 1) = *(void *)(*(void *)a2 + v53);
              unint64_t v41 = *((void *)a2 + 2);
              unint64_t v40 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v40;
            }
            goto LABEL_181;
          }
          unsigned int v121 = (char *)*((void *)this + 2);
          unint64_t v120 = *((void *)this + 3);
          if ((unint64_t)v121 >= v120)
          {
            char v140 = (char *)*v12;
            uint64_t v141 = (v121 - (unsigned char *)*v12) >> 3;
            unint64_t v142 = v141 + 1;
            if ((unint64_t)(v141 + 1) >> 61) {
LABEL_262:
            }
              sub_10000EE98();
            uint64_t v143 = v120 - (void)v140;
            if (v143 >> 2 > v142) {
              unint64_t v142 = v143 >> 2;
            }
            if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v144 = v142;
            }
            if (v144)
            {
              unsigned int v145 = (char *)sub_10000EEB0((uint64_t)v13, v144);
              char v140 = (char *)*((void *)this + 1);
              unsigned int v121 = (char *)*((void *)this + 2);
            }
            else
            {
              unsigned int v145 = 0;
            }
            char v158 = &v145[8 * v141];
            *(void *)char v158 = 0;
            unint64_t v122 = v158 + 8;
            while (v121 != v140)
            {
              uint64_t v159 = *((void *)v121 - 1);
              v121 -= 8;
              *((void *)v158 - 1) = v159;
              v158 -= 8;
            }
            *((void *)this + 1) = v158;
            *((void *)this + 2) = v122;
            *((void *)this + 3) = &v145[8 * v144];
            if (v140) {
              operator delete(v140);
            }
          }
          else
          {
            *(void *)unsigned int v121 = 0;
            unint64_t v122 = v121 + 8;
          }
          *((void *)this + 2) = v122;
          unint64_t v160 = *((void *)a2 + 1);
          if (v160 <= 0xFFFFFFFFFFFFFFF7 && v160 + 8 <= *((void *)a2 + 2))
          {
            *(v122 - 1) = *(void *)(*(void *)a2 + v160);
LABEL_231:
            uint64_t v161 = *((void *)a2 + 1) + 8;
            goto LABEL_251;
          }
          goto LABEL_248;
        case 5u:
          if (v26 != 2)
          {
            char v124 = (char *)*((void *)this + 8);
            unint64_t v123 = *((void *)this + 9);
            if ((unint64_t)v124 >= v123)
            {
              unint64_t v146 = (char *)*v10;
              uint64_t v147 = (v124 - (unsigned char *)*v10) >> 2;
              unint64_t v148 = v147 + 1;
              if ((unint64_t)(v147 + 1) >> 62) {
LABEL_263:
              }
                sub_10000EE98();
              uint64_t v149 = v123 - (void)v146;
              if (v149 >> 1 > v148) {
                unint64_t v148 = v149 >> 1;
              }
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v150 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v150 = v148;
              }
              if (v150)
              {
                unsigned int v151 = (char *)sub_100024458((uint64_t)v11, v150);
                unint64_t v146 = (char *)*((void *)this + 7);
                char v124 = (char *)*((void *)this + 8);
              }
              else
              {
                unsigned int v151 = 0;
              }
              char v162 = &v151[4 * v147];
              *(_DWORD *)char v162 = 0;
              unsigned int v125 = v162 + 4;
              while (v124 != v146)
              {
                int v163 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v162 - 1) = v163;
                v162 -= 4;
              }
              *((void *)this + 7) = v162;
              *((void *)this + 8) = v125;
              *((void *)this + 9) = &v151[4 * v150];
              if (v146) {
                operator delete(v146);
              }
            }
            else
            {
              *(_DWORD *)char v124 = 0;
              unsigned int v125 = v124 + 4;
            }
            *((void *)this + 8) = v125;
            goto LABEL_246;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v54 = *((void *)a2 + 1);
          unint64_t v55 = *((void *)a2 + 2);
          while (v54 < v55 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v57 = (char *)*((void *)this + 8);
            unint64_t v56 = *((void *)this + 9);
            if ((unint64_t)v57 >= v56)
            {
              char v59 = (char *)*v10;
              uint64_t v60 = (v57 - (unsigned char *)*v10) >> 2;
              unint64_t v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62) {
                goto LABEL_263;
              }
              uint64_t v62 = v56 - (void)v59;
              if (v62 >> 1 > v61) {
                unint64_t v61 = v62 >> 1;
              }
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v63 = v61;
              }
              if (v63)
              {
                uint64_t v64 = (char *)sub_100024458((uint64_t)v11, v63);
                char v59 = (char *)*((void *)this + 7);
                unint64_t v57 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v64 = 0;
              }
              char v65 = &v64[4 * v60];
              *(_DWORD *)char v65 = 0;
              uint64_t v58 = v65 + 4;
              while (v57 != v59)
              {
                int v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *((void *)this + 7) = v65;
              *((void *)this + 8) = v58;
              *((void *)this + 9) = &v64[4 * v63];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v57 = 0;
              uint64_t v58 = v57 + 4;
            }
            *((void *)this + 8) = v58;
            unint64_t v67 = *((void *)a2 + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
              goto LABEL_180;
            }
            *(v58 - 1) = *(_DWORD *)(*(void *)a2 + v67);
            unint64_t v55 = *((void *)a2 + 2);
            unint64_t v54 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v54;
          }
          goto LABEL_181;
        case 6u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v68 = *((void *)a2 + 1);
            unint64_t v69 = *((void *)a2 + 2);
            while (v68 < v69 && !*((unsigned char *)a2 + 24))
            {
              char v71 = (char *)*((void *)this + 5);
              unint64_t v70 = *((void *)this + 6);
              if ((unint64_t)v71 >= v70)
              {
                uint64_t v73 = (char *)*v8;
                uint64_t v74 = (v71 - (unsigned char *)*v8) >> 2;
                unint64_t v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 62) {
                  goto LABEL_264;
                }
                uint64_t v76 = v70 - (void)v73;
                if (v76 >> 1 > v75) {
                  unint64_t v75 = v76 >> 1;
                }
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v77 = v75;
                }
                if (v77)
                {
                  unsigned int v78 = (char *)sub_100024458((uint64_t)v9, v77);
                  uint64_t v73 = (char *)*((void *)this + 4);
                  char v71 = (char *)*((void *)this + 5);
                }
                else
                {
                  unsigned int v78 = 0;
                }
                uint64_t v79 = &v78[4 * v74];
                *(_DWORD *)uint64_t v79 = 0;
                unsigned int v72 = v79 + 4;
                while (v71 != v73)
                {
                  int v80 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *((_DWORD *)v79 - 1) = v80;
                  v79 -= 4;
                }
                *((void *)this + 4) = v79;
                *((void *)this + 5) = v72;
                *((void *)this + 6) = &v78[4 * v77];
                if (v73) {
                  operator delete(v73);
                }
              }
              else
              {
                *(_DWORD *)char v71 = 0;
                unsigned int v72 = v71 + 4;
              }
              *((void *)this + 5) = v72;
              unint64_t v81 = *((void *)a2 + 1);
              if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)a2 + 2))
              {
LABEL_180:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_DWORD *)(*(void *)a2 + v81);
              unint64_t v69 = *((void *)a2 + 2);
              unint64_t v68 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v68;
            }
LABEL_181:
            PB::Reader::recallMark();
          }
          else
          {
            char v127 = (char *)*((void *)this + 5);
            unint64_t v126 = *((void *)this + 6);
            if ((unint64_t)v127 >= v126)
            {
              uint64_t v152 = (char *)*v8;
              uint64_t v153 = (v127 - (unsigned char *)*v8) >> 2;
              unint64_t v154 = v153 + 1;
              if ((unint64_t)(v153 + 1) >> 62) {
LABEL_264:
              }
                sub_10000EE98();
              uint64_t v155 = v126 - (void)v152;
              if (v155 >> 1 > v154) {
                unint64_t v154 = v155 >> 1;
              }
              if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v156 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v156 = v154;
              }
              if (v156)
              {
                uint64_t v157 = (char *)sub_100024458((uint64_t)v9, v156);
                uint64_t v152 = (char *)*((void *)this + 4);
                char v127 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v157 = 0;
              }
              unint64_t v164 = &v157[4 * v153];
              *(_DWORD *)unint64_t v164 = 0;
              unsigned int v125 = v164 + 4;
              while (v127 != v152)
              {
                int v165 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v164 - 1) = v165;
                v164 -= 4;
              }
              *((void *)this + 4) = v164;
              *((void *)this + 5) = v125;
              *((void *)this + 6) = &v157[4 * v156];
              if (v152) {
                operator delete(v152);
              }
            }
            else
            {
              *(_DWORD *)char v127 = 0;
              unsigned int v125 = v127 + 4;
            }
            *((void *)this + 5) = v125;
LABEL_246:
            unint64_t v166 = *((void *)a2 + 1);
            if (v166 <= 0xFFFFFFFFFFFFFFFBLL && v166 + 4 <= *((void *)a2 + 2))
            {
              *(v125 - 1) = *(_DWORD *)(*(void *)a2 + v166);
LABEL_250:
              uint64_t v161 = *((void *)a2 + 1) + 4;
LABEL_251:
              *((void *)a2 + 1) = v161;
            }
            else
            {
LABEL_248:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_252:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 7u:
          *((_WORD *)this + 60) |= 0x80u;
          unint64_t v82 = *((void *)a2 + 1);
          if (v82 >= *((void *)a2 + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)a2 + v82);
            *((void *)a2 + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *((unsigned char *)this + 116) = v85;
          goto LABEL_252;
        case 8u:
          *((_WORD *)this + 60) |= 0x100u;
          unint64_t v86 = *((void *)a2 + 1);
          if (v86 >= *((void *)a2 + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)a2 + v86);
            *((void *)a2 + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *((unsigned char *)this + 117) = v89;
          goto LABEL_252;
        case 9u:
          *((_WORD *)this + 60) |= 4u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((void *)a2 + 2)) {
            goto LABEL_248;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v90);
          goto LABEL_250;
        case 0xAu:
          *((_WORD *)this + 60) |= 8u;
          unint64_t v91 = *((void *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)a2 + 2)) {
            goto LABEL_248;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v91);
          goto LABEL_250;
        case 0xBu:
          *((_WORD *)this + 60) |= 0x40u;
          unint64_t v92 = *((void *)a2 + 1);
          unint64_t v93 = *((void *)a2 + 2);
          uint64_t v94 = *(void *)a2;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            char v95 = 0;
            unsigned int v96 = 0;
            uint64_t v97 = 0;
            do
            {
              unint64_t v98 = v92 + 1;
              *((void *)a2 + 1) = v92 + 1;
              char v99 = *(unsigned char *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0) {
                goto LABEL_215;
              }
              v95 += 7;
              unint64_t v92 = v98;
              BOOL v20 = v96++ > 8;
            }
            while (!v20);
LABEL_165:
            LODWORD(v97) = 0;
            goto LABEL_215;
          }
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v97 = 0;
          if (v93 <= v92) {
            unint64_t v93 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v93 == v92)
            {
              LODWORD(v97) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v130 = v92 + 1;
              char v131 = *(unsigned char *)(v94 + v92);
              *((void *)a2 + 1) = v130;
              v97 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                unint64_t v92 = v130;
                BOOL v20 = v129++ > 8;
                if (v20) {
                  goto LABEL_165;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v97) = 0;
              }
            }
            break;
          }
LABEL_215:
          *((_DWORD *)this + 28) = v97;
          goto LABEL_252;
        case 0xCu:
          *((_WORD *)this + 60) |= 0x20u;
          unint64_t v100 = *((void *)a2 + 1);
          unint64_t v101 = *((void *)a2 + 2);
          uint64_t v102 = *(void *)a2;
          if (v100 <= 0xFFFFFFFFFFFFFFF5 && v100 + 10 <= v101)
          {
            char v103 = 0;
            unsigned int v104 = 0;
            uint64_t v105 = 0;
            do
            {
              unint64_t v106 = v100 + 1;
              *((void *)a2 + 1) = v100 + 1;
              char v107 = *(unsigned char *)(v102 + v100);
              v105 |= (unint64_t)(v107 & 0x7F) << v103;
              if ((v107 & 0x80) == 0) {
                goto LABEL_218;
              }
              v103 += 7;
              unint64_t v100 = v106;
              BOOL v20 = v104++ > 8;
            }
            while (!v20);
LABEL_172:
            LODWORD(v105) = 0;
            goto LABEL_218;
          }
          char v132 = 0;
          unsigned int v133 = 0;
          uint64_t v105 = 0;
          if (v101 <= v100) {
            unint64_t v101 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v101 == v100)
            {
              LODWORD(v105) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v134 = v100 + 1;
              char v135 = *(unsigned char *)(v102 + v100);
              *((void *)a2 + 1) = v134;
              v105 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                unint64_t v100 = v134;
                BOOL v20 = v133++ > 8;
                if (v20) {
                  goto LABEL_172;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v105) = 0;
              }
            }
            break;
          }
LABEL_218:
          *((_DWORD *)this + 27) = v105;
          goto LABEL_252;
        case 0xDu:
          *((_WORD *)this + 60) |= 0x10u;
          unint64_t v108 = *((void *)a2 + 1);
          unint64_t v109 = *((void *)a2 + 2);
          uint64_t v110 = *(void *)a2;
          if (v108 <= 0xFFFFFFFFFFFFFFF5 && v108 + 10 <= v109)
          {
            char v111 = 0;
            unsigned int v112 = 0;
            uint64_t v113 = 0;
            do
            {
              unint64_t v114 = v108 + 1;
              *((void *)a2 + 1) = v108 + 1;
              char v115 = *(unsigned char *)(v110 + v108);
              v113 |= (unint64_t)(v115 & 0x7F) << v111;
              if ((v115 & 0x80) == 0) {
                goto LABEL_221;
              }
              v111 += 7;
              unint64_t v108 = v114;
              BOOL v20 = v112++ > 8;
            }
            while (!v20);
LABEL_179:
            LODWORD(v113) = 0;
            goto LABEL_221;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v113 = 0;
          if (v109 <= v108) {
            unint64_t v109 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v109 == v108)
            {
              LODWORD(v113) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v138 = v108 + 1;
              char v139 = *(unsigned char *)(v110 + v108);
              *((void *)a2 + 1) = v138;
              v113 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v108 = v138;
                BOOL v20 = v137++ > 8;
                if (v20) {
                  goto LABEL_179;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v113) = 0;
              }
            }
            break;
          }
LABEL_221:
          *((_DWORD *)this + 26) = v113;
          goto LABEL_252;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_252;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaTriggerDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(this + 120) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_23:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 118), 2u);
    if ((*(_WORD *)(v3 + 120) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(this + 88), 1u);
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0) {
    goto LABEL_23;
  }
LABEL_3:
  if (v4) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
LABEL_5:
  __int16 v5 = *(double **)(v3 + 8);
  uint64_t v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  double v8 = *(float **)(v3 + 56);
  __int16 v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    float v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  uint64_t v11 = *(float **)(v3 + 32);
  float v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 116), 7u);
    __int16 v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_27;
    }
  }
  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 117), 8u);
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 9u);
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0) {
      goto LABEL_19;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xAu);
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_30:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 0xCu);
    if ((*(_WORD *)(v3 + 120) & 0x10) == 0) {
      return this;
    }
    goto LABEL_31;
  }
LABEL_29:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0xBu);
  __int16 v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) != 0) {
    goto LABEL_30;
  }
LABEL_20:
  if ((v14 & 0x10) == 0) {
    return this;
  }
LABEL_31:
  unsigned int v15 = *(_DWORD *)(v3 + 104);

  return PB::Writer::writeVarInt(a2, v15, 0xDu);
}

uint64_t CMMsl::KappaTriggerDebug::hash_value(CMMsl::KappaTriggerDebug *this)
{
  __int16 v2 = *((_WORD *)this + 60);
  if ((v2 & 2) != 0)
  {
    uint64_t v3 = *((void *)this + 11);
    if ((*((_WORD *)this + 60) & 0x200) != 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned __int8 *)this + 118);
      if (v2) {
        goto LABEL_4;
      }
LABEL_9:
      uint64_t v5 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 60) & 0x200) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 10);
  }
LABEL_10:
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  __int16 v9 = *((_WORD *)this + 60);
  if ((v9 & 0x80) != 0)
  {
    uint64_t v10 = *((unsigned __int8 *)this + 116);
    if ((*((_WORD *)this + 60) & 0x100) != 0)
    {
LABEL_12:
      uint64_t v11 = *((unsigned __int8 *)this + 117);
      if ((v9 & 4) != 0) {
        goto LABEL_13;
      }
LABEL_24:
      uint64_t v13 = 0;
      if ((v9 & 8) != 0) {
        goto LABEL_16;
      }
LABEL_25:
      uint64_t v15 = 0;
      if ((v9 & 0x40) != 0) {
        goto LABEL_19;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 60) & 0x100) != 0) {
      goto LABEL_12;
    }
  }
  uint64_t v11 = 0;
  if ((v9 & 4) == 0) {
    goto LABEL_24;
  }
LABEL_13:
  float v12 = *((float *)this + 24);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  if ((v9 & 8) == 0) {
    goto LABEL_25;
  }
LABEL_16:
  float v14 = *((float *)this + 25);
  uint64_t v15 = LODWORD(v14);
  if (v14 == 0.0) {
    uint64_t v15 = 0;
  }
  if ((v9 & 0x40) != 0)
  {
LABEL_19:
    uint64_t v16 = *((unsigned int *)this + 28);
    if ((v9 & 0x20) != 0) {
      goto LABEL_20;
    }
LABEL_27:
    uint64_t v17 = 0;
    if ((v9 & 0x10) != 0) {
      goto LABEL_21;
    }
LABEL_28:
    uint64_t v18 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
  }
LABEL_26:
  uint64_t v16 = 0;
  if ((v9 & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_20:
  uint64_t v17 = *((unsigned int *)this + 27);
  if ((v9 & 0x10) == 0) {
    goto LABEL_28;
  }
LABEL_21:
  uint64_t v18 = *((unsigned int *)this + 26);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v10 ^ v11 ^ v13 ^ v15 ^ v16 ^ v17 ^ v18;
}

void CMMsl::KappaZgDetected::~KappaZgDetected(CMMsl::KappaZgDetected *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaZgDetected::KappaZgDetected(uint64_t this, const CMMsl::KappaZgDetected *a2)
{
  *(void *)this = off_1003A7008;
  *(_DWORD *)(this + 16) = 0;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v2 = *((void *)a2 + 1);
    *(unsigned char *)(this + 16) = 1;
    *(void *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::KappaZgDetected::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(unsigned char *)(a2 + 16) & 1;
    int v8 = v4;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v7[0] = off_1003A7008;
    v7[1] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  void v8[2];
  int v9;

  if (a1 != a2)
  {
    uint64_t v3 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    int v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v3;
    __int16 v9 = v5;
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v8[0] = off_1003A7008;
    v8[1] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::KappaZgDetected *a2, CMMsl::KappaZgDetected *a3)
{
  int v3 = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  return this;
}

uint64_t CMMsl::KappaZgDetected::formatText(CMMsl::KappaZgDetected *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 16)) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgDetected::readFrom(CMMsl::KappaZgDetected *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 16) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v24 = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *((void *)this + 1) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaZgDetected::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 16)) {
    return PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::KappaZgDetected::hash_value(CMMsl::KappaZgDetected *this)
{
  if (*((unsigned char *)this + 16)) {
    return *((void *)this + 1);
  }
  else {
    return 0;
  }
}

void CMMsl::KappaZgResult::~KappaZgResult(CMMsl::KappaZgResult *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KappaZgResult::KappaZgResult(uint64_t this, const CMMsl::KappaZgResult *a2)
{
  *(void *)this = off_1003A7040;
  *(void *)(this + 164) = 0;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100000000) != 0)
  {
    char v4 = *((unsigned char *)a2 + 160);
    unint64_t v3 = (unint64_t)&_mh_execute_header;
    *(void *)(this + 164) = &_mh_execute_header;
    *(unsigned char *)(this + 160) = v4;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  unint64_t v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 28);
    v3 |= 0x100000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 112) = v5;
    uint64_t v2 = *(void *)((char *)a2 + 164);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    int v6 = *((_DWORD *)a2 + 27);
    v3 |= 0x80000uLL;
    *(void *)(this + 164) = v3;
    *(_DWORD *)(this + 108) = v6;
    uint64_t v2 = *(void *)((char *)a2 + 164);
    if ((v2 & 0x1000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_40;
    }
  }
  else if ((v2 & 0x1000000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 32);
  v3 |= 0x1000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 128) = v7;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v8 = *((_DWORD *)a2 + 37);
  v3 |= 0x20000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 148) = v8;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v9 = *((_DWORD *)a2 + 34);
  v3 |= 0x4000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 136) = v9;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v10 = *((_DWORD *)a2 + 39);
  v3 |= 0x80000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 156) = v10;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v11 = *((_DWORD *)a2 + 36);
  v3 |= 0x10000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 144) = v11;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v12 = *((_DWORD *)a2 + 29);
  v3 |= 0x200000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 116) = v12;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v13 = *((_DWORD *)a2 + 30);
  v3 |= 0x400000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 120) = v13;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v14 = *((void *)a2 + 5);
  v3 |= 0x10uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 40) = v14;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v15 = *((void *)a2 + 4);
  v3 |= 8uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 32) = v15;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 4) == 0)
  {
LABEL_17:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v16 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 24) = v16;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x8000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 92) = v17;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v18 = *((_DWORD *)a2 + 25);
  v3 |= 0x20000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 100) = v18;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x10000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v19 = *((_DWORD *)a2 + 24);
  v3 |= 0x10000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 96) = v19;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v20 = *((_DWORD *)a2 + 26);
  v3 |= 0x40000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 104) = v20;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v21 = *((_DWORD *)a2 + 22);
  v3 |= 0x4000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 88) = v21;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  int v22 = *((_DWORD *)a2 + 14);
  v3 |= 0x40uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 56) = v22;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x800) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v23 = *((_DWORD *)a2 + 15);
  v3 |= 0x80uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 60) = v23;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800) == 0)
  {
LABEL_25:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v24 = *((_DWORD *)a2 + 19);
  v3 |= 0x800uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 76) = v24;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x1000) == 0)
  {
LABEL_26:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v25 = *((_DWORD *)a2 + 20);
  v3 |= 0x1000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 80) = v25;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v26 = *((_DWORD *)a2 + 21);
  v3 |= 0x2000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 84) = v26;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x100) == 0)
  {
LABEL_28:
    if ((v2 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v27 = *((_DWORD *)a2 + 16);
  v3 |= 0x100uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 64) = v27;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x200) == 0)
  {
LABEL_29:
    if ((v2 & 0x400) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v28 = *((_DWORD *)a2 + 17);
  v3 |= 0x200uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 68) = v28;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x400) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v29 = *((_DWORD *)a2 + 18);
  v3 |= 0x400uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 72) = v29;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v30 = *((_DWORD *)a2 + 35);
  v3 |= 0x8000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 140) = v30;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v31 = *((_DWORD *)a2 + 31);
  v3 |= 0x800000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 124) = v31;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x20) == 0)
  {
LABEL_33:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v32 = *((void *)a2 + 6);
  v3 |= 0x20uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 48) = v32;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v33 = *((_DWORD *)a2 + 33);
  v3 |= 0x2000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 132) = v33;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v2 & 1) == 0) {
      goto LABEL_36;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v34 = *((_DWORD *)a2 + 38);
  v3 |= 0x40000000uLL;
  *(void *)(this + 164) = v3;
  *(_DWORD *)(this + 152) = v34;
  uint64_t v2 = *(void *)((char *)a2 + 164);
  if ((v2 & 1) == 0)
  {
LABEL_36:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_68:
    uint64_t v36 = *((void *)a2 + 2);
    *(void *)(this + 164) = v3 | 2;
    *(void *)(this + 16) = v36;
    return this;
  }
LABEL_67:
  uint64_t v35 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)(this + 164) = v3;
  *(void *)(this + 8) = v35;
  if ((*(void *)((unsigned char *)a2 + 164) & 2) != 0) {
    goto LABEL_68;
  }
  return this;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, const CMMsl::KappaZgResult *a2)
{
  if (a1 != a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KappaZgResult *a2, CMMsl::KappaZgResult *a3)
{
  uint64_t v3 = *(void *)((char *)this + 164);
  *(void *)((char *)this + 164) = *(void *)((char *)a2 + 164);
  *(void *)((char *)a2 + 164) = v3;
  LOBYTE(v3) = *((unsigned char *)this + 160);
  *((unsigned char *)this + 160) = *((unsigned char *)a2 + 160);
  *((unsigned char *)a2 + 160) = v3;
  LODWORD(v3) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  int v4 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v4;
  int v5 = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v5;
  int v6 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v6;
  int v7 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v7;
  int v8 = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v8;
  LODWORD(v3) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  LODWORD(v3) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v3;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  LODWORD(v11) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v11;
  int v12 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v12;
  LODWORD(v11) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v11;
  int v13 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v13;
  int v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  int v15 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v15;
  LODWORD(v11) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  int v16 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v16;
  int v17 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v17;
  int v18 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v18;
  int v19 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  int v20 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v20;
  int v21 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v21;
  int v22 = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v22;
  LODWORD(v11) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v11;
  uint64_t v23 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v23;
  int v24 = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v24;
  float result = *((float *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((float *)a2 + 38) = result;
  uint64_t v26 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v26;
  uint64_t v27 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v27;
  return result;
}

float CMMsl::KappaZgResult::KappaZgResult(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7040;
  *(void *)(a1 + 164) = *(void *)(a2 + 164);
  *(void *)(a2 + 164) = 0;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  float result = *(float *)(a2 + 152);
  *(float *)(a1 + 152) = result;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return result;
}

CMMsl *CMMsl::KappaZgResult::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::KappaZgResult::KappaZgResult((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::KappaZgResult *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::KappaZgResult::formatText(CMMsl::KappaZgResult *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "configAccelThresholdNorm", *((float *)this + 14));
    uint64_t v5 = *(void *)((char *)this + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "configHardware", *((_DWORD *)this + 15));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "configIx", *((float *)this + 16));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "configIy", *((float *)this + 17));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "configIz", *((float *)this + 18));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "configLx", *((float *)this + 19));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "configLy", *((float *)this + 20));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "configLz", *((float *)this + 21));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "configZgThreshold", *((float *)this + 22));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "debugCountOfAccelDataDrop", *((_DWORD *)this + 23));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "debugCountOfDmDataDrop", *((_DWORD *)this + 24));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenAccelSample", *((float *)this + 25));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "debugMaxTimeBetweenDmSample", *((float *)this + 26));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "epochFirstTimestamp", *((void *)this + 1));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "epochLastTimestamp", *((void *)this + 2));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "freefallTpQualifier", *((unsigned char *)this + 160));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "metaCountOfFreefallImpactPassed", *((_DWORD *)this + 27));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "metaCountOfFreefallTimePassed", *((_DWORD *)this + 28));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "metaCountOfSigImpact", *((_DWORD *)this + 29));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "metaCountOfZgSegment", *((_DWORD *)this + 30));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "metaCrossingCount", *((_DWORD *)this + 31));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 4) == 0)
  {
LABEL_23:
    if ((v5 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "metaDtBwFirstAndLastFreeFall", *((void *)this + 3));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "metaDtBwFirstFreeFall", *((void *)this + 4));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "metaDtBwFirstSigImpact", *((void *)this + 5));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "metaFreefallTime", *((float *)this + 32));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "metaFreefallTimeForImpact", *((float *)this + 33));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "metaMaxOfAccel", *((float *)this + 34));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "metaMaxPower", *((float *)this + 35));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "metaMaxZgSegmentTime", *((float *)this + 36));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "metaNormOfAccel", *((float *)this + 37));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "metaNormOfImpact", *((float *)this + 38));
  uint64_t v5 = *(void *)((char *)this + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "metaTotalZgTime", *((float *)this + 39));
  if ((*(void *)((unsigned char *)this + 164) & 0x20) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 6));
LABEL_35:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KappaZgResult::readFrom(CMMsl::KappaZgResult *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)((char *)this + 164) |= (unint64_t)&_mh_execute_header;
              unint64_t v21 = *((void *)a2 + 1);
              if (v21 >= *((void *)a2 + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                unint64_t v22 = v21 + 1;
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
                *((void *)a2 + 1) = v22;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 160) = v24;
              goto LABEL_282;
            case 2u:
              *(void *)((char *)this + 164) |= 0x100000uLL;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v34 = *((void *)a2 + 2);
              uint64_t v35 = *(void *)a2;
              if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
              {
                char v36 = 0;
                unsigned int v37 = 0;
                uint64_t v38 = 0;
                do
                {
                  unint64_t v39 = v33 + 1;
                  *((void *)a2 + 1) = v33 + 1;
                  char v40 = *(unsigned char *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0) {
                    goto LABEL_294;
                  }
                  v36 += 7;
                  unint64_t v33 = v39;
                  BOOL v14 = v37++ > 8;
                }
                while (!v14);
LABEL_195:
                LODWORD(v38) = 0;
                goto LABEL_294;
              }
              char v160 = 0;
              unsigned int v161 = 0;
              uint64_t v38 = 0;
              if (v34 <= v33) {
                unint64_t v34 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v162 = v33 + 1;
                  char v163 = *(unsigned char *)(v35 + v33);
                  *((void *)a2 + 1) = v162;
                  v38 |= (unint64_t)(v163 & 0x7F) << v160;
                  if (v163 < 0)
                  {
                    v160 += 7;
                    unint64_t v33 = v162;
                    BOOL v14 = v161++ > 8;
                    if (v14) {
                      goto LABEL_195;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v38) = 0;
                  }
                }
                break;
              }
LABEL_294:
              *((_DWORD *)this + 28) = v38;
              goto LABEL_282;
            case 3u:
              *(void *)((char *)this + 164) |= 0x80000uLL;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v42 = *((void *)a2 + 2);
              uint64_t v43 = *(void *)a2;
              if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
              {
                char v44 = 0;
                unsigned int v45 = 0;
                uint64_t v46 = 0;
                do
                {
                  unint64_t v47 = v41 + 1;
                  *((void *)a2 + 1) = v41 + 1;
                  char v48 = *(unsigned char *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0) {
                    goto LABEL_298;
                  }
                  v44 += 7;
                  unint64_t v41 = v47;
                  BOOL v14 = v45++ > 8;
                }
                while (!v14);
LABEL_202:
                LODWORD(v46) = 0;
                goto LABEL_298;
              }
              char v164 = 0;
              unsigned int v165 = 0;
              uint64_t v46 = 0;
              if (v42 <= v41) {
                unint64_t v42 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v166 = v41 + 1;
                  char v167 = *(unsigned char *)(v43 + v41);
                  *((void *)a2 + 1) = v166;
                  v46 |= (unint64_t)(v167 & 0x7F) << v164;
                  if (v167 < 0)
                  {
                    v164 += 7;
                    unint64_t v41 = v166;
                    BOOL v14 = v165++ > 8;
                    if (v14) {
                      goto LABEL_202;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v46) = 0;
                  }
                }
                break;
              }
LABEL_298:
              *((_DWORD *)this + 27) = v46;
              goto LABEL_282;
            case 4u:
              *(void *)((char *)this + 164) |= 0x1000000uLL;
              unint64_t v49 = *((void *)a2 + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v49);
              goto LABEL_281;
            case 5u:
              *(void *)((char *)this + 164) |= 0x20000000uLL;
              unint64_t v50 = *((void *)a2 + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v50);
              goto LABEL_281;
            case 6u:
              *(void *)((char *)this + 164) |= 0x4000000uLL;
              unint64_t v51 = *((void *)a2 + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 34) = *(_DWORD *)(*(void *)a2 + v51);
              goto LABEL_281;
            case 7u:
              *(void *)((char *)this + 164) |= 0x80000000uLL;
              unint64_t v52 = *((void *)a2 + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v52);
              goto LABEL_281;
            case 8u:
              *(void *)((char *)this + 164) |= 0x10000000uLL;
              unint64_t v53 = *((void *)a2 + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v53);
              goto LABEL_281;
            case 9u:
              *(void *)((char *)this + 164) |= 0x200000uLL;
              unint64_t v54 = *((void *)a2 + 1);
              unint64_t v55 = *((void *)a2 + 2);
              uint64_t v56 = *(void *)a2;
              if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v59 = 0;
                do
                {
                  unint64_t v60 = v54 + 1;
                  *((void *)a2 + 1) = v54 + 1;
                  char v61 = *(unsigned char *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0) {
                    goto LABEL_302;
                  }
                  v57 += 7;
                  unint64_t v54 = v60;
                  BOOL v14 = v58++ > 8;
                }
                while (!v14);
LABEL_209:
                LODWORD(v59) = 0;
                goto LABEL_302;
              }
              char v168 = 0;
              unsigned int v169 = 0;
              uint64_t v59 = 0;
              if (v55 <= v54) {
                unint64_t v55 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v170 = v54 + 1;
                  char v171 = *(unsigned char *)(v56 + v54);
                  *((void *)a2 + 1) = v170;
                  v59 |= (unint64_t)(v171 & 0x7F) << v168;
                  if (v171 < 0)
                  {
                    v168 += 7;
                    unint64_t v54 = v170;
                    BOOL v14 = v169++ > 8;
                    if (v14) {
                      goto LABEL_209;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v59) = 0;
                  }
                }
                break;
              }
LABEL_302:
              *((_DWORD *)this + 29) = v59;
              goto LABEL_282;
            case 0xAu:
              *(void *)((char *)this + 164) |= 0x400000uLL;
              unint64_t v62 = *((void *)a2 + 1);
              unint64_t v63 = *((void *)a2 + 2);
              uint64_t v64 = *(void *)a2;
              if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v67 = 0;
                do
                {
                  unint64_t v68 = v62 + 1;
                  *((void *)a2 + 1) = v62 + 1;
                  char v69 = *(unsigned char *)(v64 + v62);
                  v67 |= (unint64_t)(v69 & 0x7F) << v65;
                  if ((v69 & 0x80) == 0) {
                    goto LABEL_306;
                  }
                  v65 += 7;
                  unint64_t v62 = v68;
                  BOOL v14 = v66++ > 8;
                }
                while (!v14);
LABEL_216:
                LODWORD(v67) = 0;
                goto LABEL_306;
              }
              char v172 = 0;
              unsigned int v173 = 0;
              uint64_t v67 = 0;
              if (v63 <= v62) {
                unint64_t v63 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v63 == v62)
                {
                  LODWORD(v67) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v174 = v62 + 1;
                  char v175 = *(unsigned char *)(v64 + v62);
                  *((void *)a2 + 1) = v174;
                  v67 |= (unint64_t)(v175 & 0x7F) << v172;
                  if (v175 < 0)
                  {
                    v172 += 7;
                    unint64_t v62 = v174;
                    BOOL v14 = v173++ > 8;
                    if (v14) {
                      goto LABEL_216;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v67) = 0;
                  }
                }
                break;
              }
LABEL_306:
              *((_DWORD *)this + 30) = v67;
              goto LABEL_282;
            case 0xBu:
              *(void *)((char *)this + 164) |= 0x10uLL;
              unint64_t v70 = *((void *)a2 + 1);
              unint64_t v71 = *((void *)a2 + 2);
              uint64_t v72 = *(void *)a2;
              if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v75 = 0;
                do
                {
                  unint64_t v76 = v70 + 1;
                  *((void *)a2 + 1) = v70 + 1;
                  char v77 = *(unsigned char *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0) {
                    goto LABEL_310;
                  }
                  v73 += 7;
                  unint64_t v70 = v76;
                  BOOL v14 = v74++ > 8;
                }
                while (!v14);
LABEL_223:
                uint64_t v75 = 0;
                goto LABEL_310;
              }
              char v176 = 0;
              unsigned int v177 = 0;
              uint64_t v75 = 0;
              if (v71 <= v70) {
                unint64_t v71 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v71 == v70)
                {
                  uint64_t v75 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v178 = v70 + 1;
                  char v179 = *(unsigned char *)(v72 + v70);
                  *((void *)a2 + 1) = v178;
                  v75 |= (unint64_t)(v179 & 0x7F) << v176;
                  if (v179 < 0)
                  {
                    v176 += 7;
                    unint64_t v70 = v178;
                    BOOL v14 = v177++ > 8;
                    if (v14) {
                      goto LABEL_223;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v75 = 0;
                  }
                }
                break;
              }
LABEL_310:
              *((void *)this + 5) = v75;
              goto LABEL_282;
            case 0xCu:
              *(void *)((char *)this + 164) |= 8uLL;
              unint64_t v78 = *((void *)a2 + 1);
              unint64_t v79 = *((void *)a2 + 2);
              uint64_t v80 = *(void *)a2;
              if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v83 = 0;
                do
                {
                  unint64_t v84 = v78 + 1;
                  *((void *)a2 + 1) = v78 + 1;
                  char v85 = *(unsigned char *)(v80 + v78);
                  v83 |= (unint64_t)(v85 & 0x7F) << v81;
                  if ((v85 & 0x80) == 0) {
                    goto LABEL_314;
                  }
                  v81 += 7;
                  unint64_t v78 = v84;
                  BOOL v14 = v82++ > 8;
                }
                while (!v14);
LABEL_230:
                uint64_t v83 = 0;
                goto LABEL_314;
              }
              char v180 = 0;
              unsigned int v181 = 0;
              uint64_t v83 = 0;
              if (v79 <= v78) {
                unint64_t v79 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v79 == v78)
                {
                  uint64_t v83 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v182 = v78 + 1;
                  char v183 = *(unsigned char *)(v80 + v78);
                  *((void *)a2 + 1) = v182;
                  v83 |= (unint64_t)(v183 & 0x7F) << v180;
                  if (v183 < 0)
                  {
                    v180 += 7;
                    unint64_t v78 = v182;
                    BOOL v14 = v181++ > 8;
                    if (v14) {
                      goto LABEL_230;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v83 = 0;
                  }
                }
                break;
              }
LABEL_314:
              *((void *)this + 4) = v83;
              goto LABEL_282;
            case 0xDu:
              *(void *)((char *)this + 164) |= 4uLL;
              unint64_t v86 = *((void *)a2 + 1);
              unint64_t v87 = *((void *)a2 + 2);
              uint64_t v88 = *(void *)a2;
              if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v91 = 0;
                do
                {
                  unint64_t v92 = v86 + 1;
                  *((void *)a2 + 1) = v86 + 1;
                  char v93 = *(unsigned char *)(v88 + v86);
                  v91 |= (unint64_t)(v93 & 0x7F) << v89;
                  if ((v93 & 0x80) == 0) {
                    goto LABEL_318;
                  }
                  v89 += 7;
                  unint64_t v86 = v92;
                  BOOL v14 = v90++ > 8;
                }
                while (!v14);
LABEL_237:
                uint64_t v91 = 0;
                goto LABEL_318;
              }
              char v184 = 0;
              unsigned int v185 = 0;
              uint64_t v91 = 0;
              if (v87 <= v86) {
                unint64_t v87 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v87 == v86)
                {
                  uint64_t v91 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v186 = v86 + 1;
                  char v187 = *(unsigned char *)(v88 + v86);
                  *((void *)a2 + 1) = v186;
                  v91 |= (unint64_t)(v187 & 0x7F) << v184;
                  if (v187 < 0)
                  {
                    v184 += 7;
                    unint64_t v86 = v186;
                    BOOL v14 = v185++ > 8;
                    if (v14) {
                      goto LABEL_237;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v91 = 0;
                  }
                }
                break;
              }
LABEL_318:
              *((void *)this + 3) = v91;
              goto LABEL_282;
            case 0xEu:
              *(void *)((char *)this + 164) |= 0x8000uLL;
              unint64_t v94 = *((void *)a2 + 1);
              unint64_t v95 = *((void *)a2 + 2);
              uint64_t v96 = *(void *)a2;
              if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
              {
                char v97 = 0;
                unsigned int v98 = 0;
                uint64_t v99 = 0;
                do
                {
                  unint64_t v100 = v94 + 1;
                  *((void *)a2 + 1) = v94 + 1;
                  char v101 = *(unsigned char *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0) {
                    goto LABEL_322;
                  }
                  v97 += 7;
                  unint64_t v94 = v100;
                  BOOL v14 = v98++ > 8;
                }
                while (!v14);
LABEL_244:
                LODWORD(v99) = 0;
                goto LABEL_322;
              }
              char v188 = 0;
              unsigned int v189 = 0;
              uint64_t v99 = 0;
              if (v95 <= v94) {
                unint64_t v95 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v190 = v94 + 1;
                  char v191 = *(unsigned char *)(v96 + v94);
                  *((void *)a2 + 1) = v190;
                  v99 |= (unint64_t)(v191 & 0x7F) << v188;
                  if (v191 < 0)
                  {
                    v188 += 7;
                    unint64_t v94 = v190;
                    BOOL v14 = v189++ > 8;
                    if (v14) {
                      goto LABEL_244;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v99) = 0;
                  }
                }
                break;
              }
LABEL_322:
              *((_DWORD *)this + 23) = v99;
              goto LABEL_282;
            case 0xFu:
              *(void *)((char *)this + 164) |= 0x20000uLL;
              unint64_t v102 = *((void *)a2 + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v102);
              goto LABEL_281;
            case 0x10u:
              *(void *)((char *)this + 164) |= 0x10000uLL;
              unint64_t v103 = *((void *)a2 + 1);
              unint64_t v104 = *((void *)a2 + 2);
              uint64_t v105 = *(void *)a2;
              if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
              {
                char v106 = 0;
                unsigned int v107 = 0;
                uint64_t v108 = 0;
                do
                {
                  unint64_t v109 = v103 + 1;
                  *((void *)a2 + 1) = v103 + 1;
                  char v110 = *(unsigned char *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0) {
                    goto LABEL_326;
                  }
                  v106 += 7;
                  unint64_t v103 = v109;
                  BOOL v14 = v107++ > 8;
                }
                while (!v14);
LABEL_251:
                LODWORD(v108) = 0;
                goto LABEL_326;
              }
              char v192 = 0;
              unsigned int v193 = 0;
              uint64_t v108 = 0;
              if (v104 <= v103) {
                unint64_t v104 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v108) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v194 = v103 + 1;
                  char v195 = *(unsigned char *)(v105 + v103);
                  *((void *)a2 + 1) = v194;
                  v108 |= (unint64_t)(v195 & 0x7F) << v192;
                  if (v195 < 0)
                  {
                    v192 += 7;
                    unint64_t v103 = v194;
                    BOOL v14 = v193++ > 8;
                    if (v14) {
                      goto LABEL_251;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v108) = 0;
                  }
                }
                break;
              }
LABEL_326:
              *((_DWORD *)this + 24) = v108;
              goto LABEL_282;
            case 0x11u:
              *(void *)((char *)this + 164) |= 0x40000uLL;
              unint64_t v111 = *((void *)a2 + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v111);
              goto LABEL_281;
            case 0x12u:
              *(void *)((char *)this + 164) |= 0x4000uLL;
              unint64_t v112 = *((void *)a2 + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v112);
              goto LABEL_281;
            case 0x13u:
              *(void *)((char *)this + 164) |= 0x40uLL;
              unint64_t v113 = *((void *)a2 + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v113);
              goto LABEL_281;
            case 0x14u:
              *(void *)((char *)this + 164) |= 0x80uLL;
              unint64_t v114 = *((void *)a2 + 1);
              unint64_t v115 = *((void *)a2 + 2);
              uint64_t v116 = *(void *)a2;
              if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
              {
                char v117 = 0;
                unsigned int v118 = 0;
                uint64_t v119 = 0;
                do
                {
                  unint64_t v120 = v114 + 1;
                  *((void *)a2 + 1) = v114 + 1;
                  char v121 = *(unsigned char *)(v116 + v114);
                  v119 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0) {
                    goto LABEL_330;
                  }
                  v117 += 7;
                  unint64_t v114 = v120;
                  BOOL v14 = v118++ > 8;
                }
                while (!v14);
LABEL_258:
                LODWORD(v119) = 0;
                goto LABEL_330;
              }
              char v196 = 0;
              unsigned int v197 = 0;
              uint64_t v119 = 0;
              if (v115 <= v114) {
                unint64_t v115 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v115 == v114)
                {
                  LODWORD(v119) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v198 = v114 + 1;
                  char v199 = *(unsigned char *)(v116 + v114);
                  *((void *)a2 + 1) = v198;
                  v119 |= (unint64_t)(v199 & 0x7F) << v196;
                  if (v199 < 0)
                  {
                    v196 += 7;
                    unint64_t v114 = v198;
                    BOOL v14 = v197++ > 8;
                    if (v14) {
                      goto LABEL_258;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v119) = 0;
                  }
                }
                break;
              }
LABEL_330:
              *((_DWORD *)this + 15) = v119;
              goto LABEL_282;
            case 0x15u:
              *(void *)((char *)this + 164) |= 0x800uLL;
              unint64_t v122 = *((void *)a2 + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v122);
              goto LABEL_281;
            case 0x16u:
              *(void *)((char *)this + 164) |= 0x1000uLL;
              unint64_t v123 = *((void *)a2 + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v123);
              goto LABEL_281;
            case 0x17u:
              *(void *)((char *)this + 164) |= 0x2000uLL;
              unint64_t v124 = *((void *)a2 + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v124);
              goto LABEL_281;
            case 0x18u:
              *(void *)((char *)this + 164) |= 0x100uLL;
              unint64_t v125 = *((void *)a2 + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v125);
              goto LABEL_281;
            case 0x19u:
              *(void *)((char *)this + 164) |= 0x200uLL;
              unint64_t v126 = *((void *)a2 + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v126);
              goto LABEL_281;
            case 0x1Au:
              *(void *)((char *)this + 164) |= 0x400uLL;
              unint64_t v127 = *((void *)a2 + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v127);
              goto LABEL_281;
            case 0x1Bu:
              *(void *)((char *)this + 164) |= 0x8000000uLL;
              unint64_t v128 = *((void *)a2 + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v128);
              goto LABEL_281;
            case 0x1Cu:
              *(void *)((char *)this + 164) |= 0x800000uLL;
              unint64_t v129 = *((void *)a2 + 1);
              unint64_t v130 = *((void *)a2 + 2);
              uint64_t v131 = *(void *)a2;
              if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
              {
                char v132 = 0;
                unsigned int v133 = 0;
                uint64_t v134 = 0;
                do
                {
                  unint64_t v135 = v129 + 1;
                  *((void *)a2 + 1) = v129 + 1;
                  char v136 = *(unsigned char *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0) {
                    goto LABEL_334;
                  }
                  v132 += 7;
                  unint64_t v129 = v135;
                  BOOL v14 = v133++ > 8;
                }
                while (!v14);
LABEL_265:
                LODWORD(v134) = 0;
                goto LABEL_334;
              }
              char v200 = 0;
              unsigned int v201 = 0;
              uint64_t v134 = 0;
              if (v130 <= v129) {
                unint64_t v130 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v202 = v129 + 1;
                  char v203 = *(unsigned char *)(v131 + v129);
                  *((void *)a2 + 1) = v202;
                  v134 |= (unint64_t)(v203 & 0x7F) << v200;
                  if (v203 < 0)
                  {
                    v200 += 7;
                    unint64_t v129 = v202;
                    BOOL v14 = v201++ > 8;
                    if (v14) {
                      goto LABEL_265;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v134) = 0;
                  }
                }
                break;
              }
LABEL_334:
              *((_DWORD *)this + 31) = v134;
              goto LABEL_282;
            case 0x1Du:
              *(void *)((char *)this + 164) |= 0x20uLL;
              unint64_t v137 = *((void *)a2 + 1);
              unint64_t v138 = *((void *)a2 + 2);
              uint64_t v139 = *(void *)a2;
              if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
              {
                char v140 = 0;
                unsigned int v141 = 0;
                uint64_t v142 = 0;
                do
                {
                  unint64_t v143 = v137 + 1;
                  *((void *)a2 + 1) = v137 + 1;
                  char v144 = *(unsigned char *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0) {
                    goto LABEL_338;
                  }
                  v140 += 7;
                  unint64_t v137 = v143;
                  BOOL v14 = v141++ > 8;
                }
                while (!v14);
LABEL_272:
                uint64_t v142 = 0;
                goto LABEL_338;
              }
              char v204 = 0;
              unsigned int v205 = 0;
              uint64_t v142 = 0;
              if (v138 <= v137) {
                unint64_t v138 = *((void *)a2 + 1);
              }
              while (2)
              {
                if (v138 == v137)
                {
                  uint64_t v142 = 0;
                  *((unsigned char *)a2 + 24) = 1;
                }
                else
                {
                  unint64_t v206 = v137 + 1;
                  char v207 = *(unsigned char *)(v139 + v137);
                  *((void *)a2 + 1) = v206;
                  v142 |= (unint64_t)(v207 & 0x7F) << v204;
                  if (v207 < 0)
                  {
                    v204 += 7;
                    unint64_t v137 = v206;
                    BOOL v14 = v205++ > 8;
                    if (v14) {
                      goto LABEL_272;
                    }
                    continue;
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v142 = 0;
                  }
                }
                break;
              }
LABEL_338:
              *((void *)this + 6) = v142;
              goto LABEL_282;
            case 0x1Eu:
              *(void *)((char *)this + 164) |= 0x2000000uLL;
              unint64_t v145 = *((void *)a2 + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)a2 + 2)) {
                goto LABEL_170;
              }
              *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v145);
              goto LABEL_281;
            case 0x1Fu:
              *(void *)((char *)this + 164) |= 0x40000000uLL;
              unint64_t v146 = *((void *)a2 + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 38) = *(_DWORD *)(*(void *)a2 + v146);
LABEL_281:
                *((void *)a2 + 1) += 4;
              }
              else
              {
LABEL_170:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_282;
            default:
              if (v20 == 201)
              {
                *(void *)((char *)this + 164) |= 1uLL;
                unint64_t v147 = *((void *)a2 + 1);
                unint64_t v148 = *((void *)a2 + 2);
                uint64_t v149 = *(void *)a2;
                if (v147 > 0xFFFFFFFFFFFFFFF5 || v147 + 10 > v148)
                {
                  char v208 = 0;
                  unsigned int v209 = 0;
                  uint64_t v152 = 0;
                  if (v148 <= v147) {
                    unint64_t v148 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      uint64_t v152 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_342;
                    }
                    unint64_t v210 = v147 + 1;
                    char v211 = *(unsigned char *)(v149 + v147);
                    *((void *)a2 + 1) = v210;
                    v152 |= (unint64_t)(v211 & 0x7F) << v208;
                    if ((v211 & 0x80) == 0) {
                      break;
                    }
                    v208 += 7;
                    unint64_t v147 = v210;
                    BOOL v14 = v209++ > 8;
                    if (v14)
                    {
LABEL_279:
                      uint64_t v152 = 0;
                      goto LABEL_342;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v152 = 0;
                  }
                }
                else
                {
                  char v150 = 0;
                  unsigned int v151 = 0;
                  uint64_t v152 = 0;
                  while (1)
                  {
                    unint64_t v153 = v147 + 1;
                    *((void *)a2 + 1) = v147 + 1;
                    char v154 = *(unsigned char *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0) {
                      break;
                    }
                    v150 += 7;
                    unint64_t v147 = v153;
                    BOOL v14 = v151++ > 8;
                    if (v14) {
                      goto LABEL_279;
                    }
                  }
                }
LABEL_342:
                *((void *)this + 1) = v152;
              }
              else if (v20 == 202)
              {
                *(void *)((char *)this + 164) |= 2uLL;
                unint64_t v25 = *((void *)a2 + 1);
                unint64_t v26 = *((void *)a2 + 2);
                uint64_t v27 = *(void *)a2;
                if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
                {
                  char v156 = 0;
                  unsigned int v157 = 0;
                  uint64_t v30 = 0;
                  if (v26 <= v25) {
                    unint64_t v26 = *((void *)a2 + 1);
                  }
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      uint64_t v30 = 0;
                      *((unsigned char *)a2 + 24) = 1;
                      goto LABEL_290;
                    }
                    unint64_t v158 = v25 + 1;
                    char v159 = *(unsigned char *)(v27 + v25);
                    *((void *)a2 + 1) = v158;
                    v30 |= (unint64_t)(v159 & 0x7F) << v156;
                    if ((v159 & 0x80) == 0) {
                      break;
                    }
                    v156 += 7;
                    unint64_t v25 = v158;
                    BOOL v14 = v157++ > 8;
                    if (v14)
                    {
LABEL_188:
                      uint64_t v30 = 0;
                      goto LABEL_290;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    uint64_t v30 = 0;
                  }
                }
                else
                {
                  char v28 = 0;
                  unsigned int v29 = 0;
                  uint64_t v30 = 0;
                  while (1)
                  {
                    unint64_t v31 = v25 + 1;
                    *((void *)a2 + 1) = v25 + 1;
                    char v32 = *(unsigned char *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v28 += 7;
                    unint64_t v25 = v31;
                    BOOL v14 = v29++ > 8;
                    if (v14) {
                      goto LABEL_188;
                    }
                  }
                }
LABEL_290:
                *((void *)this + 2) = v30;
              }
              else
              {
                uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
                if (!result) {
                  return result;
                }
              }
LABEL_282:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::KappaZgResult::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 164);
  if ((v4 & 0x100000000) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 160), 1u);
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 2u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 3u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 4u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 5u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 136), 6u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 7u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 8u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 9u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0xAu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0xBu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 0xCu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xDu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xEu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 0xFu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x10u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0x11u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 0x12u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x13u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x14u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x15u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x17u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 0x18u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 0x19u);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 124), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0) {
      goto LABEL_33;
    }
LABEL_66:
    this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 0xC9u);
    if ((*(void *)(v3 + 164) & 2) == 0) {
      return this;
    }
    goto LABEL_67;
  }
LABEL_65:
  this = PB::Writer::write(a2, *(float *)(v3 + 152), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 164);
  if (v4) {
    goto LABEL_66;
  }
LABEL_33:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_67:
  unint64_t v5 = *(void *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 0xCAu);
}

uint64_t CMMsl::KappaZgResult::hash_value(CMMsl::KappaZgResult *this)
{
  uint64_t v1 = *(void *)((char *)this + 164);
  if ((v1 & 0x100000000) != 0)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 160);
    if ((v1 & 0x100000) != 0)
    {
LABEL_3:
      uint64_t v57 = *((unsigned int *)this + 28);
      if ((v1 & 0x80000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_85;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v57 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_4:
    uint64_t v56 = *((unsigned int *)this + 27);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_5;
    }
LABEL_86:
    uint64_t v55 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_8;
    }
LABEL_87:
    uint64_t v54 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_11;
    }
LABEL_88:
    uint64_t v53 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_14;
    }
LABEL_89:
    uint64_t v52 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_17;
    }
LABEL_90:
    uint64_t v12 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }
LABEL_85:
  uint64_t v56 = 0;
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_86;
  }
LABEL_5:
  float v3 = *((float *)this + 32);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  uint64_t v55 = v4;
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_87;
  }
LABEL_8:
  float v5 = *((float *)this + 37);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  uint64_t v54 = v6;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_88;
  }
LABEL_11:
  float v7 = *((float *)this + 34);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  uint64_t v53 = v8;
  if ((v1 & 0x80000000) == 0) {
    goto LABEL_89;
  }
LABEL_14:
  float v9 = *((float *)this + 39);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  uint64_t v52 = v10;
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_90;
  }
LABEL_17:
  float v11 = *((float *)this + 36);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = LODWORD(v11);
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_21:
    uint64_t v13 = *((int *)this + 29);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_22;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t v13 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_22:
    uint64_t v14 = *((unsigned int *)this + 30);
    if ((v1 & 0x10) != 0) {
      goto LABEL_23;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t v14 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_23:
    uint64_t v15 = *((void *)this + 5);
    if ((v1 & 8) != 0) {
      goto LABEL_24;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t v15 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_24:
    uint64_t v16 = *((void *)this + 4);
    if ((v1 & 4) != 0) {
      goto LABEL_25;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t v16 = 0;
  if ((v1 & 4) != 0)
  {
LABEL_25:
    uint64_t v17 = *((void *)this + 3);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t v17 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_26:
    uint64_t v18 = *((unsigned int *)this + 23);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_27;
    }
LABEL_97:
    uint64_t v20 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_98;
  }
LABEL_96:
  uint64_t v18 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_97;
  }
LABEL_27:
  float v19 = *((float *)this + 25);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = LODWORD(v19);
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_31:
    uint64_t v21 = *((unsigned int *)this + 24);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_32;
    }
LABEL_99:
    uint64_t v23 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_36;
    }
LABEL_100:
    uint64_t v25 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_40;
    }
LABEL_101:
    uint64_t v27 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }
LABEL_98:
  uint64_t v21 = 0;
  if ((v1 & 0x40000) == 0) {
    goto LABEL_99;
  }
LABEL_32:
  float v22 = *((float *)this + 26);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_100;
  }
LABEL_36:
  float v24 = *((float *)this + 22);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = LODWORD(v24);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_101;
  }
LABEL_40:
  float v26 = *((float *)this + 14);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = LODWORD(v26);
  }
  if ((v1 & 0x80) != 0)
  {
LABEL_44:
    uint64_t v28 = *((int *)this + 15);
    if ((v1 & 0x800) != 0) {
      goto LABEL_45;
    }
LABEL_103:
    uint64_t v30 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_49;
    }
LABEL_104:
    uint64_t v32 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_53;
    }
LABEL_105:
    uint64_t v34 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_57;
    }
LABEL_106:
    uint64_t v36 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_61;
    }
LABEL_107:
    uint64_t v38 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_65;
    }
LABEL_108:
    uint64_t v40 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_69;
    }
LABEL_109:
    uint64_t v42 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_110;
  }
LABEL_102:
  uint64_t v28 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_103;
  }
LABEL_45:
  float v29 = *((float *)this + 19);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = LODWORD(v29);
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_104;
  }
LABEL_49:
  float v31 = *((float *)this + 20);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = LODWORD(v31);
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_105;
  }
LABEL_53:
  float v33 = *((float *)this + 21);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = LODWORD(v33);
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_106;
  }
LABEL_57:
  float v35 = *((float *)this + 16);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = LODWORD(v35);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_107;
  }
LABEL_61:
  float v37 = *((float *)this + 17);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = LODWORD(v37);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_108;
  }
LABEL_65:
  float v39 = *((float *)this + 18);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = LODWORD(v39);
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_109;
  }
LABEL_69:
  float v41 = *((float *)this + 35);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = LODWORD(v41);
  }
  if ((v1 & 0x800000) != 0)
  {
LABEL_73:
    uint64_t v43 = *((int *)this + 31);
    if ((v1 & 0x20) != 0) {
      goto LABEL_74;
    }
    goto LABEL_111;
  }
LABEL_110:
  uint64_t v43 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_74:
    uint64_t v44 = *((void *)this + 6);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_75;
    }
LABEL_112:
    uint64_t v46 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_78;
    }
LABEL_113:
    uint64_t v48 = 0;
    if (v1) {
      goto LABEL_81;
    }
LABEL_114:
    uint64_t v49 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_82;
    }
LABEL_115:
    uint64_t v50 = 0;
    return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
  }
LABEL_111:
  uint64_t v44 = 0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_112;
  }
LABEL_75:
  float v45 = *((float *)this + 33);
  uint64_t v46 = LODWORD(v45);
  if (v45 == 0.0) {
    uint64_t v46 = 0;
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_113;
  }
LABEL_78:
  float v47 = *((float *)this + 38);
  uint64_t v48 = LODWORD(v47);
  if (v47 == 0.0) {
    uint64_t v48 = 0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_114;
  }
LABEL_81:
  uint64_t v49 = *((void *)this + 1);
  if ((v1 & 2) == 0) {
    goto LABEL_115;
  }
LABEL_82:
  uint64_t v50 = *((void *)this + 2);
  return v57 ^ v2 ^ v56 ^ v55 ^ v54 ^ v53 ^ v52 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v43 ^ v44 ^ v46 ^ v48 ^ v49 ^ v50;
}

void CMMsl::KeyboardAttached::~KeyboardAttached(CMMsl::KeyboardAttached *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KeyboardAttached::KeyboardAttached(uint64_t this, const CMMsl::KeyboardAttached *a2)
{
  *(void *)this = off_1003A7078;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, const CMMsl::KeyboardAttached *a2)
{
  if ((const CMMsl::KeyboardAttached *)a1 != a2)
  {
    CMMsl::KeyboardAttached::KeyboardAttached((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardAttached *a2, CMMsl::KeyboardAttached *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardAttached::KeyboardAttached(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7078;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7078;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardAttached::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A7078;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardAttached::formatText(CMMsl::KeyboardAttached *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "attached", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardAttached::readFrom(CMMsl::KeyboardAttached *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardAttached::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::KeyboardAttached::hash_value(CMMsl::KeyboardAttached *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::KeyboardKeyPress::~KeyboardKeyPress(CMMsl::KeyboardKeyPress *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t this, const CMMsl::KeyboardKeyPress *a2)
{
  *(void *)this = off_1003A70B0;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, const CMMsl::KeyboardKeyPress *a2)
{
  if ((const CMMsl::KeyboardKeyPress *)a1 != a2)
  {
    CMMsl::KeyboardKeyPress::KeyboardKeyPress((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardKeyPress *a2, CMMsl::KeyboardKeyPress *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardKeyPress::KeyboardKeyPress(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A70B0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A70B0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardKeyPress::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A70B0;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardKeyPress::formatText(CMMsl::KeyboardKeyPress *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "keyPressedDown", *((unsigned char *)this + 16));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardKeyPress::readFrom(CMMsl::KeyboardKeyPress *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardKeyPress::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::KeyboardKeyPress::hash_value(CMMsl::KeyboardKeyPress *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::KeyboardMotionFeatures::~KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(CMMsl::KeyboardMotionFeatures *this, const CMMsl::KeyboardMotionFeatures *a2)
{
  *(void *)this = off_1003A70E8;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 5) = v4;
    if ((*((unsigned char *)a2 + 28) & 8) == 0) {
      return *(float *)&v4;
    }
  }
  else if ((v2 & 8) == 0)
  {
    return *(float *)&v4;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 28) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, const CMMsl::KeyboardMotionFeatures *a2)
{
  if ((const CMMsl::KeyboardMotionFeatures *)a1 != a2)
  {
    CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures((CMMsl::KeyboardMotionFeatures *)&v9, a2);
    uint64_t v3 = v11;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v3;
    int v6 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v13;
    int v13 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v12;
    int v12 = v7;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionFeatures *a2, CMMsl::KeyboardMotionFeatures *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::KeyboardMotionFeatures::KeyboardMotionFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A70E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A70E8;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::KeyboardMotionFeatures::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 28) = 0;
    int v4 = *(_DWORD *)(a2 + 24);
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v9[0] = off_1003A70E8;
    int v11 = *(_DWORD *)(a1 + 28);
    *(_DWORD *)(a1 + 28) = v3;
    v9[1] = v5;
    void v9[2] = v6;
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v4;
    int v10 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionFeatures::formatText(CMMsl::KeyboardMotionFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "accelFilterX", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "accelFilterY", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "accelFilterZ", *((float *)this + 6));
  if (*((unsigned char *)this + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionFeatures::readFrom(CMMsl::KeyboardMotionFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 28) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 28) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 3u:
          *((unsigned char *)this + 28) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_35;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_37;
        case 4u:
          *((unsigned char *)this + 28) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_37:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_38:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::KeyboardMotionFeatures::hash_value(CMMsl::KeyboardMotionFeatures *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 5);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7;
}

void CMMsl::KeyboardMotionState::~KeyboardMotionState(CMMsl::KeyboardMotionState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t this, const CMMsl::KeyboardMotionState *a2)
{
  *(void *)this = off_1003A7120;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::KeyboardMotionState *CMMsl::KeyboardMotionState::operator=(const CMMsl::KeyboardMotionState *a1, const CMMsl::KeyboardMotionState *a2)
{
  if (a1 != a2)
  {
    CMMsl::KeyboardMotionState::KeyboardMotionState((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionState *a2, CMMsl::KeyboardMotionState *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::KeyboardMotionState::KeyboardMotionState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7120;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7120;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A7120;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionState::formatText(CMMsl::KeyboardMotionState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionState::readFrom(CMMsl::KeyboardMotionState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionState::hash_value(CMMsl::KeyboardMotionState *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::KeyboardMotionTrackpad::~KeyboardMotionTrackpad(CMMsl::KeyboardMotionTrackpad *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t this, const CMMsl::KeyboardMotionTrackpad *a2)
{
  *(void *)this = off_1003A7158;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *((unsigned char *)a2 + 16);
    *(unsigned char *)(this + 20) = v2;
    *(unsigned char *)(this + 16) = v4;
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, const CMMsl::KeyboardMotionTrackpad *a2)
{
  if ((const CMMsl::KeyboardMotionTrackpad *)a1 != a2)
  {
    CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::KeyboardMotionTrackpad *a2, CMMsl::KeyboardMotionTrackpad *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v3) = *((unsigned char *)this + 16);
  *((unsigned char *)this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  return result;
}

double CMMsl::KeyboardMotionTrackpad::KeyboardMotionTrackpad(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7158;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7158;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return result;
}

uint64_t CMMsl::KeyboardMotionTrackpad::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A7158;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    char v5 = *(unsigned char *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v5;
    char v10 = v3;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::KeyboardMotionTrackpad::formatText(CMMsl::KeyboardMotionTrackpad *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "touchActive", *((unsigned char *)this + 16));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::KeyboardMotionTrackpad::readFrom(CMMsl::KeyboardMotionTrackpad *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 >= *((void *)a2 + 2))
        {
          BOOL v22 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v22 = v21 != 0;
        }
        *((unsigned char *)this + 16) = v22;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::KeyboardMotionTrackpad::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::KeyboardMotionTrackpad::hash_value(CMMsl::KeyboardMotionTrackpad *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned __int8 *)this + 16);
  return v2 ^ *(void *)&v1;
}

void CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this)
{
  *(void *)this = off_1003A7190;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation(this);

  operator delete();
}

CMMsl::LSLHeadingEstimation *CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(CMMsl::LSLHeadingEstimation *this, const CMMsl::LSLHeadingEstimation *a2)
{
  *(void *)this = off_1003A7190;
  *(_OWORD *)((char *)this + 8) = 0u;
  char v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  char v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 23) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 48) = 0;
  __int16 v6 = *((_WORD *)a2 + 96);
  if ((v6 & 0x4000) != 0)
  {
    int v8 = *((_DWORD *)a2 + 47);
    __int16 v7 = 0x4000;
    *((_WORD *)this + 96) = 0x4000;
    *((_DWORD *)this + 47) = v8;
    __int16 v6 = *((_WORD *)a2 + 96);
    if ((v6 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v7 = 0;
  if ((*((_WORD *)a2 + 96) & 0x1000) != 0)
  {
LABEL_5:
    uint64_t v9 = *((void *)a2 + 22);
    v7 |= 0x1000u;
    *((_WORD *)this + 96) = v7;
    *((void *)this + 22) = v9;
    __int16 v6 = *((_WORD *)a2 + 96);
  }
LABEL_6:
  if ((v6 & 0x40) != 0)
  {
    uint64_t v10 = *((void *)a2 + 16);
    *((_WORD *)this + 96) = v7 | 0x40;
    *((void *)this + 16) = v10;
  }
  if (this != a2)
  {
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
    sub_1000330C4(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 3);
  }
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 2) != 0)
  {
    uint64_t v14 = *((void *)a2 + 11);
    *((_WORD *)this + 96) |= 2u;
    *((void *)this + 11) = v14;
    __int16 v11 = *((_WORD *)a2 + 96);
    if ((v11 & 0x2000) == 0)
    {
LABEL_12:
      if ((v11 & 4) == 0) {
        goto LABEL_13;
      }
      goto LABEL_26;
    }
  }
  else if ((*((_WORD *)a2 + 96) & 0x2000) == 0)
  {
    goto LABEL_12;
  }
  int v15 = *((_DWORD *)a2 + 46);
  *((_WORD *)this + 96) |= 0x2000u;
  *((_DWORD *)this + 46) = v15;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 4) == 0)
  {
LABEL_13:
    if ((v11 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v16 = *((void *)a2 + 12);
  *((_WORD *)this + 96) |= 4u;
  *((void *)this + 12) = v16;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x10) == 0)
  {
LABEL_14:
    if ((v11 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v17 = *((void *)a2 + 14);
  *((_WORD *)this + 96) |= 0x10u;
  *((void *)this + 14) = v17;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 1) == 0)
  {
LABEL_15:
    if ((v11 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v18 = *((void *)a2 + 10);
  *((_WORD *)this + 96) |= 1u;
  *((void *)this + 10) = v18;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 8) == 0)
  {
LABEL_16:
    if ((v11 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t v19 = *((void *)a2 + 13);
  *((_WORD *)this + 96) |= 8u;
  *((void *)this + 13) = v19;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x20) == 0)
  {
LABEL_17:
    if ((v11 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v20 = *((void *)a2 + 15);
  *((_WORD *)this + 96) |= 0x20u;
  *((void *)this + 15) = v20;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x800) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v21 = *((void *)a2 + 21);
  *((_WORD *)this + 96) |= 0x800u;
  *((void *)this + 21) = v21;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x80) == 0)
  {
LABEL_19:
    if ((v11 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v22 = *((void *)a2 + 17);
  *((_WORD *)this + 96) |= 0x80u;
  *((void *)this + 17) = v22;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x100) == 0)
  {
LABEL_20:
    if ((v11 & 0x200) == 0) {
      goto LABEL_21;
    }
LABEL_34:
    uint64_t v24 = *((void *)a2 + 19);
    *((_WORD *)this + 96) |= 0x200u;
    *((void *)this + 19) = v24;
    if ((*((_WORD *)a2 + 96) & 0x400) == 0) {
      return this;
    }
    goto LABEL_22;
  }
LABEL_33:
  uint64_t v23 = *((void *)a2 + 18);
  *((_WORD *)this + 96) |= 0x100u;
  *((void *)this + 18) = v23;
  __int16 v11 = *((_WORD *)a2 + 96);
  if ((v11 & 0x200) != 0) {
    goto LABEL_34;
  }
LABEL_21:
  if ((v11 & 0x400) != 0)
  {
LABEL_22:
    uint64_t v12 = *((void *)a2 + 20);
    *((_WORD *)this + 96) |= 0x400u;
    *((void *)this + 20) = v12;
  }
  return this;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, const CMMsl::LSLHeadingEstimation *a2)
{
  if (a1 != a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LSLHeadingEstimation *a2, CMMsl::LSLHeadingEstimation *a3)
{
  int v3 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v3;
  uint64_t v4 = *((void *)this + 22);
  *((void *)this + 22) = *((void *)a2 + 22);
  *((void *)a2 + 22) = v4;
  uint64_t v5 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v12;
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v13;
  uint64_t v14 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  uint64_t v16 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v16;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v18;
  uint64_t v19 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v19;
  uint64_t v20 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v20;
  uint64_t v21 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v21;
  uint64_t v22 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v22;
  uint64_t v23 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v23;
  uint64_t v24 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v24;
  uint64_t v25 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v25;
  double result = *((double *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((double *)a2 + 20) = result;
  return result;
}

uint64_t CMMsl::LSLHeadingEstimation::LSLHeadingEstimation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7190;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

CMMsl *CMMsl::LSLHeadingEstimation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::LSLHeadingEstimation::LSLHeadingEstimation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LSLHeadingEstimation *)v5, v3);
    CMMsl::LSLHeadingEstimation::~LSLHeadingEstimation((CMMsl::LSLHeadingEstimation *)v5);
  }
  return a1;
}

uint64_t CMMsl::LSLHeadingEstimation::formatText(CMMsl::LSLHeadingEstimation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 96);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 10));
    __int16 v5 = *((_WORD *)this + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((double *)this + 11));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "globalReferenceFrame", *((_DWORD *)this + 46));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 12));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "locationTimestamp", *((double *)this + 13));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 14));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "machContinuousLocationTimestamp", *((double *)this + 15));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "machContinuousTimestamp", *((double *)this + 16));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "polylinesLocation1Latitude", *((double *)this + 17));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "polylinesLocation1Longitude", *((double *)this + 18));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "polylinesLocation2Latitude", *((double *)this + 19));
  __int16 v5 = *((_WORD *)this + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "polylinesLocation2Longitude", *((double *)this + 20));
  if ((*((_WORD *)this + 96) & 0x800) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "roadID", *((void *)this + 21));
LABEL_15:
  uint64_t v6 = (double *)*((void *)this + 1);
  uint64_t v7 = (double *)*((void *)this + 2);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToCameraFrame", v8);
  }
  uint64_t v9 = (double *)*((void *)this + 4);
  uint64_t v10 = (double *)*((void *)this + 5);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(a2, "rotationFromGlobalToDeviceFrame", v11);
  }
  uint64_t v12 = (double *)*((void *)this + 7);
  uint64_t v13 = (double *)*((void *)this + 8);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(a2, "rotationalAccuracyInRadians", v14);
  }
  __int16 v15 = *((_WORD *)this + 96);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 47));
    __int16 v15 = *((_WORD *)this + 96);
  }
  if ((v15 & 0x1000) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 22));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::LSLHeadingEstimation::readFrom(CMMsl::LSLHeadingEstimation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)((char *)this + 56);
    uint64_t v9 = (char *)this + 72;
    uint64_t v10 = (void **)((char *)this + 8);
    double v11 = (char *)this + 24;
    uint64_t v12 = (void **)((char *)this + 32);
    uint64_t v13 = (char *)this + 48;
    while (1)
    {
      uint64_t v14 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *((_WORD *)this + 96) |= 0x4000u;
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          uint64_t v29 = *(void *)a2;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)a2 + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_212;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v20 = v31++ > 8;
            }
            while (!v20);
LABEL_160:
            LODWORD(v32) = 0;
            goto LABEL_212;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v107 = v27 + 1;
              char v108 = *(unsigned char *)(v29 + v27);
              *((void *)a2 + 1) = v107;
              v32 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v27 = v107;
                BOOL v20 = v106++ > 8;
                if (v20) {
                  goto LABEL_160;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_212:
          *((_DWORD *)this + 47) = v32;
          goto LABEL_245;
        case 2u:
          *((_WORD *)this + 96) |= 0x1000u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 22) = *(void *)(*(void *)a2 + v35);
          goto LABEL_244;
        case 3u:
          *((_WORD *)this + 96) |= 0x40u;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 16) = *(void *)(*(void *)a2 + v36);
          goto LABEL_244;
        case 4u:
          if (v26 != 2)
          {
            char v110 = (char *)*((void *)this + 5);
            unint64_t v109 = *((void *)this + 6);
            if ((unint64_t)v110 >= v109)
            {
              unint64_t v124 = (char *)*v12;
              uint64_t v125 = (v110 - (unsigned char *)*v12) >> 3;
              unint64_t v126 = v125 + 1;
              if ((unint64_t)(v125 + 1) >> 61) {
LABEL_255:
              }
                sub_10000EE98();
              uint64_t v127 = v109 - (void)v124;
              if (v127 >> 2 > v126) {
                unint64_t v126 = v127 >> 2;
              }
              if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v128 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v128 = v126;
              }
              if (v128)
              {
                unint64_t v129 = (char *)sub_10000EEB0((uint64_t)v13, v128);
                unint64_t v124 = (char *)*((void *)this + 4);
                char v110 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v129 = 0;
              }
              uint64_t v142 = &v129[8 * v125];
              *(void *)uint64_t v142 = 0;
              unint64_t v111 = v142 + 8;
              while (v110 != v124)
              {
                uint64_t v143 = *((void *)v110 - 1);
                v110 -= 8;
                *((void *)v142 - 1) = v143;
                v142 -= 8;
              }
              *((void *)this + 4) = v142;
              *((void *)this + 5) = v111;
              *((void *)this + 6) = &v129[8 * v128];
              if (v124) {
                operator delete(v124);
              }
            }
            else
            {
              *(void *)char v110 = 0;
              unint64_t v111 = v110 + 8;
            }
            *((void *)this + 5) = v111;
            goto LABEL_240;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          while (v37 < v38 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v40 = (char *)*((void *)this + 5);
            unint64_t v39 = *((void *)this + 6);
            if ((unint64_t)v40 >= v39)
            {
              uint64_t v42 = (char *)*v12;
              uint64_t v43 = (v40 - (unsigned char *)*v12) >> 3;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_255;
              }
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 2 > v44) {
                unint64_t v44 = v45 >> 2;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                float v47 = (char *)sub_10000EEB0((uint64_t)v13, v46);
                uint64_t v42 = (char *)*((void *)this + 4);
                uint64_t v40 = (char *)*((void *)this + 5);
              }
              else
              {
                float v47 = 0;
              }
              uint64_t v48 = &v47[8 * v43];
              *(void *)uint64_t v48 = 0;
              float v41 = v48 + 8;
              while (v40 != v42)
              {
                uint64_t v49 = *((void *)v40 - 1);
                v40 -= 8;
                *((void *)v48 - 1) = v49;
                v48 -= 8;
              }
              *((void *)this + 4) = v48;
              *((void *)this + 5) = v41;
              *((void *)this + 6) = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(void *)uint64_t v40 = 0;
              float v41 = v40 + 8;
            }
            *((void *)this + 5) = v41;
            unint64_t v50 = *((void *)a2 + 1);
            if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2)) {
              goto LABEL_181;
            }
            *(v41 - 1) = *(void *)(*(void *)a2 + v50);
            unint64_t v38 = *((void *)a2 + 2);
            unint64_t v37 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v37;
          }
          goto LABEL_182;
        case 5u:
          if (v26 != 2)
          {
            unint64_t v113 = (char *)*((void *)this + 2);
            unint64_t v112 = *((void *)this + 3);
            if ((unint64_t)v113 >= v112)
            {
              unint64_t v130 = (char *)*v10;
              uint64_t v131 = (v113 - (unsigned char *)*v10) >> 3;
              unint64_t v132 = v131 + 1;
              if ((unint64_t)(v131 + 1) >> 61) {
LABEL_256:
              }
                sub_10000EE98();
              uint64_t v133 = v112 - (void)v130;
              if (v133 >> 2 > v132) {
                unint64_t v132 = v133 >> 2;
              }
              if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v134 = v132;
              }
              if (v134)
              {
                unint64_t v135 = (char *)sub_10000EEB0((uint64_t)v11, v134);
                unint64_t v130 = (char *)*((void *)this + 1);
                unint64_t v113 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v135 = 0;
              }
              char v144 = &v135[8 * v131];
              *(void *)char v144 = 0;
              unint64_t v111 = v144 + 8;
              while (v113 != v130)
              {
                uint64_t v145 = *((void *)v113 - 1);
                v113 -= 8;
                *((void *)v144 - 1) = v145;
                v144 -= 8;
              }
              *((void *)this + 1) = v144;
              *((void *)this + 2) = v111;
              *((void *)this + 3) = &v135[8 * v134];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *(void *)unint64_t v113 = 0;
              unint64_t v111 = v113 + 8;
            }
            *((void *)this + 2) = v111;
            goto LABEL_240;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v51 = *((void *)a2 + 1);
          unint64_t v52 = *((void *)a2 + 2);
          while (v51 < v52 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v54 = (char *)*((void *)this + 2);
            unint64_t v53 = *((void *)this + 3);
            if ((unint64_t)v54 >= v53)
            {
              uint64_t v56 = (char *)*v10;
              uint64_t v57 = (v54 - (unsigned char *)*v10) >> 3;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
                goto LABEL_256;
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 2 > v58) {
                unint64_t v58 = v59 >> 2;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                char v61 = (char *)sub_10000EEB0((uint64_t)v11, v60);
                uint64_t v56 = (char *)*((void *)this + 1);
                uint64_t v54 = (char *)*((void *)this + 2);
              }
              else
              {
                char v61 = 0;
              }
              unint64_t v62 = &v61[8 * v57];
              *(void *)unint64_t v62 = 0;
              uint64_t v55 = v62 + 8;
              while (v54 != v56)
              {
                uint64_t v63 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v62 - 1) = v63;
                v62 -= 8;
              }
              *((void *)this + 1) = v62;
              *((void *)this + 2) = v55;
              *((void *)this + 3) = &v61[8 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)uint64_t v54 = 0;
              uint64_t v55 = v54 + 8;
            }
            *((void *)this + 2) = v55;
            unint64_t v64 = *((void *)a2 + 1);
            if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((void *)a2 + 2)) {
              goto LABEL_181;
            }
            *(v55 - 1) = *(void *)(*(void *)a2 + v64);
            unint64_t v52 = *((void *)a2 + 2);
            unint64_t v51 = *((void *)a2 + 1) + 8;
            *((void *)a2 + 1) = v51;
          }
          goto LABEL_182;
        case 6u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v65 = *((void *)a2 + 1);
            unint64_t v66 = *((void *)a2 + 2);
            while (v65 < v66 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v68 = (char *)*((void *)this + 8);
              unint64_t v67 = *((void *)this + 9);
              if ((unint64_t)v68 >= v67)
              {
                unint64_t v70 = (char *)*v8;
                uint64_t v71 = (v68 - (unsigned char *)*v8) >> 3;
                unint64_t v72 = v71 + 1;
                if ((unint64_t)(v71 + 1) >> 61) {
                  goto LABEL_257;
                }
                uint64_t v73 = v67 - (void)v70;
                if (v73 >> 2 > v72) {
                  unint64_t v72 = v73 >> 2;
                }
                if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v74 = v72;
                }
                if (v74)
                {
                  uint64_t v75 = (char *)sub_10000EEB0((uint64_t)v9, v74);
                  unint64_t v70 = (char *)*((void *)this + 7);
                  unint64_t v68 = (char *)*((void *)this + 8);
                }
                else
                {
                  uint64_t v75 = 0;
                }
                unint64_t v76 = &v75[8 * v71];
                *(void *)unint64_t v76 = 0;
                char v69 = v76 + 8;
                while (v68 != v70)
                {
                  uint64_t v77 = *((void *)v68 - 1);
                  v68 -= 8;
                  *((void *)v76 - 1) = v77;
                  v76 -= 8;
                }
                *((void *)this + 7) = v76;
                *((void *)this + 8) = v69;
                *((void *)this + 9) = &v75[8 * v74];
                if (v70) {
                  operator delete(v70);
                }
              }
              else
              {
                *(void *)unint64_t v68 = 0;
                char v69 = v68 + 8;
              }
              *((void *)this + 8) = v69;
              unint64_t v78 = *((void *)a2 + 1);
              if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)a2 + 2))
              {
LABEL_181:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v69 - 1) = *(void *)(*(void *)a2 + v78);
              unint64_t v66 = *((void *)a2 + 2);
              unint64_t v65 = *((void *)a2 + 1) + 8;
              *((void *)a2 + 1) = v65;
            }
LABEL_182:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v115 = (char *)*((void *)this + 8);
            unint64_t v114 = *((void *)this + 9);
            if ((unint64_t)v115 >= v114)
            {
              char v136 = (char *)*v8;
              uint64_t v137 = (v115 - (unsigned char *)*v8) >> 3;
              unint64_t v138 = v137 + 1;
              if ((unint64_t)(v137 + 1) >> 61) {
LABEL_257:
              }
                sub_10000EE98();
              uint64_t v139 = v114 - (void)v136;
              if (v139 >> 2 > v138) {
                unint64_t v138 = v139 >> 2;
              }
              if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v140 = v138;
              }
              if (v140)
              {
                unsigned int v141 = (char *)sub_10000EEB0((uint64_t)v9, v140);
                char v136 = (char *)*((void *)this + 7);
                unint64_t v115 = (char *)*((void *)this + 8);
              }
              else
              {
                unsigned int v141 = 0;
              }
              unint64_t v146 = &v141[8 * v137];
              *(void *)unint64_t v146 = 0;
              unint64_t v111 = v146 + 8;
              while (v115 != v136)
              {
                uint64_t v147 = *((void *)v115 - 1);
                v115 -= 8;
                *((void *)v146 - 1) = v147;
                v146 -= 8;
              }
              *((void *)this + 7) = v146;
              *((void *)this + 8) = v111;
              *((void *)this + 9) = &v141[8 * v140];
              if (v136) {
                operator delete(v136);
              }
            }
            else
            {
              *(void *)unint64_t v115 = 0;
              unint64_t v111 = v115 + 8;
            }
            *((void *)this + 8) = v111;
LABEL_240:
            unint64_t v148 = *((void *)a2 + 1);
            if (v148 <= 0xFFFFFFFFFFFFFFF7 && v148 + 8 <= *((void *)a2 + 2))
            {
              *(v111 - 1) = *(void *)(*(void *)a2 + v148);
LABEL_244:
              *((void *)a2 + 1) += 8;
            }
            else
            {
LABEL_242:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_245:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 7u:
          *((_WORD *)this + 96) |= 2u;
          unint64_t v79 = *((void *)a2 + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v79);
          goto LABEL_244;
        case 8u:
          *((_WORD *)this + 96) |= 0x2000u;
          unint64_t v80 = *((void *)a2 + 1);
          unint64_t v81 = *((void *)a2 + 2);
          uint64_t v82 = *(void *)a2;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v86 = v80 + 1;
              *((void *)a2 + 1) = v80 + 1;
              char v87 = *(unsigned char *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_215;
              }
              v83 += 7;
              unint64_t v80 = v86;
              BOOL v20 = v84++ > 8;
            }
            while (!v20);
LABEL_173:
            LODWORD(v85) = 0;
            goto LABEL_215;
          }
          char v116 = 0;
          unsigned int v117 = 0;
          uint64_t v85 = 0;
          if (v81 <= v80) {
            unint64_t v81 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v118 = v80 + 1;
              char v119 = *(unsigned char *)(v82 + v80);
              *((void *)a2 + 1) = v118;
              v85 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                unint64_t v80 = v118;
                BOOL v20 = v117++ > 8;
                if (v20) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v85) = 0;
              }
            }
            break;
          }
LABEL_215:
          *((_DWORD *)this + 46) = v85;
          goto LABEL_245;
        case 9u:
          *((_WORD *)this + 96) |= 4u;
          unint64_t v88 = *((void *)a2 + 1);
          if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v88);
          goto LABEL_244;
        case 0xAu:
          *((_WORD *)this + 96) |= 0x10u;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 14) = *(void *)(*(void *)a2 + v89);
          goto LABEL_244;
        case 0xBu:
          *((_WORD *)this + 96) |= 1u;
          unint64_t v90 = *((void *)a2 + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v90);
          goto LABEL_244;
        case 0xCu:
          *((_WORD *)this + 96) |= 8u;
          unint64_t v91 = *((void *)a2 + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v91);
          goto LABEL_244;
        case 0xDu:
          *((_WORD *)this + 96) |= 0x20u;
          unint64_t v92 = *((void *)a2 + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v92);
          goto LABEL_244;
        case 0xEu:
          *((_WORD *)this + 96) |= 0x800u;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_218;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v20 = v97++ > 8;
            }
            while (!v20);
LABEL_180:
            uint64_t v98 = 0;
            goto LABEL_218;
          }
          char v120 = 0;
          unsigned int v121 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              uint64_t v98 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v122 = v93 + 1;
              char v123 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v122;
              v98 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                unint64_t v93 = v122;
                BOOL v20 = v121++ > 8;
                if (v20) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v98 = 0;
              }
            }
            break;
          }
LABEL_218:
          *((void *)this + 21) = v98;
          goto LABEL_245;
        case 0xFu:
          *((_WORD *)this + 96) |= 0x80u;
          unint64_t v101 = *((void *)a2 + 1);
          if (v101 > 0xFFFFFFFFFFFFFFF7 || v101 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 17) = *(void *)(*(void *)a2 + v101);
          goto LABEL_244;
        case 0x10u:
          *((_WORD *)this + 96) |= 0x100u;
          unint64_t v102 = *((void *)a2 + 1);
          if (v102 > 0xFFFFFFFFFFFFFFF7 || v102 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 18) = *(void *)(*(void *)a2 + v102);
          goto LABEL_244;
        case 0x11u:
          *((_WORD *)this + 96) |= 0x200u;
          unint64_t v103 = *((void *)a2 + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 19) = *(void *)(*(void *)a2 + v103);
          goto LABEL_244;
        case 0x12u:
          *((_WORD *)this + 96) |= 0x400u;
          unint64_t v104 = *((void *)a2 + 1);
          if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((void *)a2 + 2)) {
            goto LABEL_242;
          }
          *((void *)this + 20) = *(void *)(*(void *)a2 + v104);
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(a2, v17 >> 3, v26, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_245;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)a2 + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LSLHeadingEstimation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(this + 192) & 0x1000) == 0) {
      goto LABEL_3;
    }
LABEL_28:
    this = PB::Writer::write(a2, *(double *)(v3 + 176), 2u);
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 188), 1u);
  __int16 v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_28;
  }
LABEL_3:
  if ((v4 & 0x40) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(double *)(v3 + 128), 3u);
LABEL_5:
  __int16 v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  double v8 = *(double **)(v3 + 8);
  uint64_t v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  double v11 = *(double **)(v3 + 56);
  uint64_t v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    this = PB::Writer::write(a2, v13, 6u);
  }
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 88), 7u);
    __int16 v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_32;
    }
  }
  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 8u);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 9u);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(double *)(v3 + 112), 0xAu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 0xBu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xCu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xDu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 168), 0xEu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 0xFu);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0) {
      goto LABEL_25;
    }
LABEL_40:
    this = PB::Writer::write(a2, *(double *)(v3 + 152), 0x11u);
    if ((*(_WORD *)(v3 + 192) & 0x400) == 0) {
      return this;
    }
    goto LABEL_41;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 0x10u);
  __int16 v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) != 0) {
    goto LABEL_40;
  }
LABEL_25:
  if ((v14 & 0x400) == 0) {
    return this;
  }
LABEL_41:
  double v15 = *(double *)(v3 + 160);

  return PB::Writer::write(a2, v15, 0x12u);
}

uint64_t CMMsl::LSLHeadingEstimation::hash_value(CMMsl::LSLHeadingEstimation *this)
{
  __int16 v2 = *((_WORD *)this + 96);
  if ((v2 & 0x4000) != 0)
  {
    uint64_t v3 = *((int *)this + 47);
    if ((*((_WORD *)this + 96) & 0x1000) != 0)
    {
LABEL_3:
      if (*((double *)this + 22) == 0.0) {
        uint64_t v4 = 0;
      }
      else {
        uint64_t v4 = *((void *)this + 22);
      }
      if ((v2 & 0x40) != 0) {
        goto LABEL_7;
      }
LABEL_12:
      uint64_t v5 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((_WORD *)this + 96) & 0x1000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 0x40) == 0) {
    goto LABEL_12;
  }
LABEL_7:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 16);
  }
LABEL_13:
  uint64_t v6 = PBHashBytes();
  uint64_t v7 = PBHashBytes();
  uint64_t v8 = PBHashBytes();
  __int16 v9 = *((_WORD *)this + 96);
  if ((v9 & 2) != 0)
  {
    double v10 = *((double *)this + 11);
    if (v10 == 0.0) {
      double v10 = 0.0;
    }
    if ((*((_WORD *)this + 96) & 0x2000) != 0)
    {
LABEL_15:
      uint64_t v11 = *((int *)this + 46);
      if ((v9 & 4) != 0) {
        goto LABEL_16;
      }
LABEL_48:
      double v12 = 0.0;
      if ((v9 & 0x10) != 0) {
        goto LABEL_19;
      }
LABEL_49:
      double v13 = 0.0;
      if (v9) {
        goto LABEL_22;
      }
LABEL_50:
      double v14 = 0.0;
      if ((v9 & 8) != 0) {
        goto LABEL_25;
      }
LABEL_51:
      double v15 = 0.0;
      if ((v9 & 0x20) != 0) {
        goto LABEL_28;
      }
LABEL_52:
      double v16 = 0.0;
      if ((*((_WORD *)this + 96) & 0x800) != 0) {
        goto LABEL_31;
      }
      goto LABEL_53;
    }
  }
  else
  {
    double v10 = 0.0;
    if ((*((_WORD *)this + 96) & 0x2000) != 0) {
      goto LABEL_15;
    }
  }
  uint64_t v11 = 0;
  if ((v9 & 4) == 0) {
    goto LABEL_48;
  }
LABEL_16:
  double v12 = *((double *)this + 12);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v9 & 0x10) == 0) {
    goto LABEL_49;
  }
LABEL_19:
  double v13 = *((double *)this + 14);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v9 & 1) == 0) {
    goto LABEL_50;
  }
LABEL_22:
  double v14 = *((double *)this + 10);
  if (v14 == 0.0) {
    double v14 = 0.0;
  }
  if ((v9 & 8) == 0) {
    goto LABEL_51;
  }
LABEL_25:
  double v15 = *((double *)this + 13);
  if (v15 == 0.0) {
    double v15 = 0.0;
  }
  if ((v9 & 0x20) == 0) {
    goto LABEL_52;
  }
LABEL_28:
  double v16 = *((double *)this + 15);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((*((_WORD *)this + 96) & 0x800) != 0)
  {
LABEL_31:
    uint64_t v17 = *((void *)this + 21);
    if ((v9 & 0x80) != 0) {
      goto LABEL_32;
    }
LABEL_54:
    double v18 = 0.0;
    if ((*((_WORD *)this + 96) & 0x100) != 0) {
      goto LABEL_35;
    }
LABEL_55:
    double v19 = 0.0;
    if ((*((_WORD *)this + 96) & 0x200) != 0) {
      goto LABEL_38;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v17 = 0;
  if ((v9 & 0x80) == 0) {
    goto LABEL_54;
  }
LABEL_32:
  double v18 = *((double *)this + 17);
  if (v18 == 0.0) {
    double v18 = 0.0;
  }
  if ((*((_WORD *)this + 96) & 0x100) == 0) {
    goto LABEL_55;
  }
LABEL_35:
  double v19 = *((double *)this + 18);
  if (v19 == 0.0) {
    double v19 = 0.0;
  }
  if ((*((_WORD *)this + 96) & 0x200) != 0)
  {
LABEL_38:
    double v20 = *((double *)this + 19);
    if (v20 == 0.0) {
      double v20 = 0.0;
    }
    if ((*((_WORD *)this + 96) & 0x400) != 0) {
      goto LABEL_41;
    }
LABEL_57:
    double v21 = 0.0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21;
  }
LABEL_56:
  double v20 = 0.0;
  if ((*((_WORD *)this + 96) & 0x400) == 0) {
    goto LABEL_57;
  }
LABEL_41:
  double v21 = *((double *)this + 20);
  if (v21 == 0.0) {
    double v21 = 0.0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ *(void *)&v14 ^ *(void *)&v15 ^ *(void *)&v16 ^ v17 ^ *(void *)&v18 ^ *(void *)&v19 ^ *(void *)&v20 ^ *(void *)&v21;
}

void CMMsl::LegacyALS5CHInput::~LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(CMMsl::LegacyALS5CHInput *this, const CMMsl::LegacyALS5CHInput *a2)
{
  *(void *)this = off_1003A71C8;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 4) = v5;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 5) = v6;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 6) = v7;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 7) = v8;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v9 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 8) = v9;
  if ((*((unsigned char *)a2 + 40) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((unsigned char *)this + 40) = v3 | 0x40;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, const CMMsl::LegacyALS5CHInput *a2)
{
  if ((const CMMsl::LegacyALS5CHInput *)a1 != a2)
  {
    CMMsl::LegacyALS5CHInput::LegacyALS5CHInput((CMMsl::LegacyALS5CHInput *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v13;
    int v13 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v5;
    int v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v6;
    LODWORD(v4) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v4;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LegacyALS5CHInput *a2, CMMsl::LegacyALS5CHInput *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  int v8 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v8;
  int v9 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v9;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LegacyALS5CHInput::LegacyALS5CHInput(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A71C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A71C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LegacyALS5CHInput::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v12[0] = off_1003A71C8;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 32);
    int v6 = *(_DWORD *)(a2 + 36);
    int v16 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v12[1] = v7;
    long long v8 = *(_OWORD *)(a1 + 16);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 40) = v3;
    *(_OWORD *)(a1 + 16) = v9;
    long long v13 = v8;
    int v10 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v5;
    int v14 = v10;
    LODWORD(v8) = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v6;
    int v15 = v8;
    PB::Base::~Base((PB::Base *)v12);
  }
  return a1;
}

uint64_t CMMsl::LegacyALS5CHInput::formatText(CMMsl::LegacyALS5CHInput *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "ch0", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "ch1", *((_DWORD *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "ch2", *((_DWORD *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "ch3", *((_DWORD *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "ch4", *((_DWORD *)this + 8));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "lux", *((float *)this + 9));
  if (*((unsigned char *)this + 40)) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LegacyALS5CHInput::readFrom(CMMsl::LegacyALS5CHInput *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 40) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_101;
            case 2u:
              *((unsigned char *)this + 40) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_105:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_105;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_106:
              *((_DWORD *)this + 4) = v25;
              goto LABEL_127;
            case 3u:
              *((unsigned char *)this + 40) |= 4u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *((_DWORD *)this + 5) = v31;
              goto LABEL_127;
            case 4u:
              *((unsigned char *)this + 40) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_115;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *((_DWORD *)this + 6) = v37;
              goto LABEL_127;
            case 5u:
              *((unsigned char *)this + 40) |= 0x10u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_121;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_120;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_121;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *((_DWORD *)this + 7) = v43;
              goto LABEL_127;
            case 6u:
              *((unsigned char *)this + 40) |= 0x20u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_125;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *((_DWORD *)this + 8) = v49;
LABEL_127:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *((unsigned char *)this + 40) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_101:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_127;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_127;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LegacyALS5CHInput::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 32), 6u);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::LegacyALS5CHInput::hash_value(CMMsl::LegacyALS5CHInput *this)
{
  if (*((unsigned char *)this + 40))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((int *)this + 4);
      if ((*((unsigned char *)this + 40) & 4) != 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_4:
    uint64_t v3 = *((int *)this + 5);
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 40) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((int *)this + 6);
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_6:
    uint64_t v5 = *((int *)this + 7);
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 40) & 0x20) != 0)
  {
LABEL_7:
    uint64_t v6 = *((int *)this + 8);
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_8;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_19;
  }
LABEL_8:
  float v7 = *((float *)this + 9);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v8;
}

void CMMsl::LiftToWakeFeaturesNeo::~LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(CMMsl::LiftToWakeFeaturesNeo *this, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  *(void *)this = off_1003A7200;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *((void *)a2 + 2);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((void *)this + 2) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v4 = *((void *)a2 + 3);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((void *)this + 3) = v4;
  if ((*((unsigned char *)a2 + 40) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  *((unsigned char *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 9) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, const CMMsl::LiftToWakeFeaturesNeo *a2)
{
  if ((const CMMsl::LiftToWakeFeaturesNeo *)a1 != a2)
  {
    CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo((CMMsl::LiftToWakeFeaturesNeo *)&v8, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v3;
    *(void *)&long long v3 = v11;
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v3;
    int v6 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v6;
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeFeaturesNeo *a2, CMMsl::LiftToWakeFeaturesNeo *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  return result;
}

float CMMsl::LiftToWakeFeaturesNeo::LiftToWakeFeaturesNeo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7200;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7200;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v9 = off_1003A7200;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    int v13 = *(_DWORD *)(a1 + 40);
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    long long v10 = v5;
    *(void *)&long long v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 24) = v4;
    uint64_t v7 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v7;
    uint64_t v11 = v5;
    uint64_t v12 = v6;
    PB::Base::~Base((PB::Base *)&v9);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::formatText(CMMsl::LiftToWakeFeaturesNeo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "gravityBufferDeltaToCurrentMax", *((float *)this + 8));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gravityFilterDeltaToHeadUp", *((float *)this + 9));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestampGravityBufferFront", *((double *)this + 2));
  if ((*((unsigned char *)this + 40) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "timestampTimerRef", *((double *)this + 3));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::readFrom(CMMsl::LiftToWakeFeaturesNeo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_39;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_36;
        case 2u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_39;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_41;
        case 3u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_39;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
          goto LABEL_36;
        case 4u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_39;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_36:
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_42;
        case 5u:
          *((unsigned char *)this + 40) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_41:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_42:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_39:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
    if ((*(unsigned char *)(v3 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::LiftToWakeFeaturesNeo::hash_value(CMMsl::LiftToWakeFeaturesNeo *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_19:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_18;
  }
LABEL_3:
  float v2 = *((float *)this + 8);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_6:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_9:
    double v5 = *((double *)this + 3);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v7 = 0;
    return v3 ^ *(void *)&v1 ^ *(void *)&v4 ^ *(void *)&v5 ^ v7;
  }
LABEL_20:
  double v5 = 0.0;
  if ((*((unsigned char *)this + 40) & 0x10) == 0) {
    goto LABEL_21;
  }
LABEL_12:
  float v6 = *((float *)this + 9);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  return v3 ^ *(void *)&v1 ^ *(void *)&v4 ^ *(void *)&v5 ^ v7;
}

void CMMsl::LiftToWakeOnHeadStatus::~LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(CMMsl::LiftToWakeOnHeadStatus *this, const CMMsl::LiftToWakeOnHeadStatus *a2)
{
  *(void *)this = off_1003A7238;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, const CMMsl::LiftToWakeOnHeadStatus *a2)
{
  if ((const CMMsl::LiftToWakeOnHeadStatus *)a1 != a2)
  {
    CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus((CMMsl::LiftToWakeOnHeadStatus *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeOnHeadStatus *a2, CMMsl::LiftToWakeOnHeadStatus *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeOnHeadStatus::LiftToWakeOnHeadStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7238;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7238;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A7238;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::formatText(CMMsl::LiftToWakeOnHeadStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "status", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestampArrival", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::readFrom(CMMsl::LiftToWakeOnHeadStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_51:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::LiftToWakeOnHeadStatus::hash_value(CMMsl::LiftToWakeOnHeadStatus *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_4;
      }
LABEL_11:
      double v3 = 0.0;
      return v2 ^ *(void *)&v1 ^ *(void *)&v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_4:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ *(void *)&v3;
}

void CMMsl::LiftToWakeState::~LiftToWakeState(CMMsl::LiftToWakeState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::LiftToWakeState::LiftToWakeState(CMMsl::LiftToWakeState *this, const CMMsl::LiftToWakeState *a2)
{
  *(void *)this = off_1003A7270;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((_DWORD *)this + 6) = v5;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 28) = v3 | 2;
    *((double *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, const CMMsl::LiftToWakeState *a2)
{
  if ((const CMMsl::LiftToWakeState *)a1 != a2)
  {
    CMMsl::LiftToWakeState::LiftToWakeState((CMMsl::LiftToWakeState *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeState *a2, CMMsl::LiftToWakeState *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  int v5 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v5;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::LiftToWakeState::LiftToWakeState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7270;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7270;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::LiftToWakeState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v7 = off_1003A7270;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeState::formatText(CMMsl::LiftToWakeState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 6));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeState::readFrom(CMMsl::LiftToWakeState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  for (int i = *((unsigned __int8 *)a2 + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)a2 + 24))
  {
    uint64_t v8 = *(void *)a2;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)a2 + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)a2 + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)a2 + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *((unsigned char *)this + 28) |= 2u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_51:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *((_DWORD *)this + 6) = v25;
        goto LABEL_53;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        goto LABEL_53;
      }
      *((unsigned char *)this + 28) |= 1u;
      unint64_t v2 = *((void *)a2 + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
      {
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_47:
        unint64_t v2 = *((void *)a2 + 1) + 8;
        *((void *)a2 + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)a2 + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)a2 + 2);
  }
  return i == 0;
}

uint64_t CMMsl::LiftToWakeState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 28) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 2u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 3u);
}

uint64_t CMMsl::LiftToWakeState::hash_value(CMMsl::LiftToWakeState *this)
{
  if (*((unsigned char *)this + 28))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 28) & 4) != 0)
    {
LABEL_3:
      uint64_t v2 = *((unsigned int *)this + 6);
      if ((*((unsigned char *)this + 28) & 2) != 0) {
        goto LABEL_4;
      }
LABEL_11:
      double v3 = 0.0;
      return v2 ^ *(void *)&v1 ^ *(void *)&v3;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_11;
  }
LABEL_4:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  return v2 ^ *(void *)&v1 ^ *(void *)&v3;
}

void CMMsl::LiftToWakeStatusNeo::~LiftToWakeStatusNeo(CMMsl::LiftToWakeStatusNeo *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t this, const CMMsl::LiftToWakeStatusNeo *a2)
{
  *(void *)this = off_1003A72A8;
  *(_DWORD *)(this + 64) = 0;
  __int16 v2 = *((_WORD *)a2 + 32);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 64) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 32) & 0x800) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 60);
    v3 |= 0x800u;
    *(_WORD *)(this + 64) = v3;
    *(unsigned char *)(this + 60) = v5;
    __int16 v2 = *((_WORD *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 64) = v3;
    *(_DWORD *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 64) = v3;
  *(void *)(this + 16) = v7;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x1000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v8 = *((unsigned char *)a2 + 61);
  v3 |= 0x1000u;
  *(_WORD *)(this + 64) = v3;
  *(unsigned char *)(this + 61) = v8;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 44) = v10;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 48) = v11;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 28) = v12;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 32) = v13;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v14 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 36) = v14;
  __int16 v2 = *((_WORD *)a2 + 32);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 13);
    *(_WORD *)(this + 64) = v3 | 0x200;
    *(_DWORD *)(this + 52) = v16;
    return this;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *(_WORD *)(this + 64) = v3;
  *(_DWORD *)(this + 24) = v15;
  if ((*((_WORD *)a2 + 32) & 0x200) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *a1, const CMMsl::LiftToWakeStatusNeo *a2)
{
  if (a1 != a2)
  {
    CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LiftToWakeStatusNeo *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::LiftToWakeStatusNeo *a2, CMMsl::LiftToWakeStatusNeo *a3)
{
  int v3 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 60);
  *((unsigned char *)this + 60) = *((unsigned char *)a2 + 60);
  *((unsigned char *)a2 + 60) = v3;
  int v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LOBYTE(v5) = *((unsigned char *)this + 61);
  *((unsigned char *)this + 61) = *((unsigned char *)a2 + 61);
  *((unsigned char *)a2 + 61) = v5;
  LODWORD(v6) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  int v8 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v8;
  int v9 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v9;
  return result;
}

float CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A72A8;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 61) = *(unsigned char *)(a2 + 61);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  return result;
}

CMMsl *CMMsl::LiftToWakeStatusNeo::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::LiftToWakeStatusNeo::LiftToWakeStatusNeo((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LiftToWakeStatusNeo *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::LiftToWakeStatusNeo::formatText(CMMsl::LiftToWakeStatusNeo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "classificationType", *((_DWORD *)this + 6));
    __int16 v5 = *((_WORD *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "intervalSleepBeginToSleepDetected", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToGazeDetected", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "intervalSleepDetectedToWakeDetected", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "intervalWakeBeginToWakeDetected", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToGazeDetected", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "intervalWakeDetectedToSleepDetected", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "shouldNotify", *((unsigned char *)this + 60));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "shouldNotifyStats", *((unsigned char *)this + 61));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "sleepType", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 32) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestampGestureBegin", *((double *)this + 2));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LiftToWakeStatusNeo::readFrom(CMMsl::LiftToWakeStatusNeo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 32) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_39;
            case 2u:
              *((_WORD *)this + 32) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 60) = v22;
              goto LABEL_117;
            case 3u:
              *((_WORD *)this + 32) |= 0x400u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v45 = v23++;
                  char v46 = *(unsigned char *)(v24 + v45);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_105;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *((_DWORD *)this + 14) = v27;
              goto LABEL_117;
            case 4u:
              *((_WORD *)this + 32) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_39:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_101;
            case 5u:
              *((_WORD *)this + 32) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 61) = v30;
              goto LABEL_117;
            case 6u:
              *((_WORD *)this + 32) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 7u:
              *((_WORD *)this + 32) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 8u:
              *((_WORD *)this + 32) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 9u:
              *((_WORD *)this + 32) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 0xAu:
              *((_WORD *)this + 32) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 0xBu:
              *((_WORD *)this + 32) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_100:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_101:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *((_WORD *)this + 32) |= 4u;
              unint64_t v31 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v32 = *(void *)a2;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v49 = v31++;
                  char v50 = *(unsigned char *)(v32 + v49);
                  *((void *)a2 + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_110;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)a2 + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *((_DWORD *)this + 6) = v35;
              goto LABEL_117;
            case 0xDu:
              *((_WORD *)this + 32) |= 0x200u;
              unint64_t v37 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v38 = *(void *)a2;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v53 = v37++;
                  char v54 = *(unsigned char *)(v38 + v53);
                  *((void *)a2 + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_115;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)a2 + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *((_DWORD *)this + 13) = v41;
LABEL_117:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_117;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LiftToWakeStatusNeo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 64);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 60), 2u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 61), 5u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 7u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 9u);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 0xCu);
    if ((*(_WORD *)(v3 + 64) & 0x200) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 52);

  return PB::Writer::writeVarInt(a2, v5, 0xDu);
}

uint64_t CMMsl::LiftToWakeStatusNeo::hash_value(CMMsl::LiftToWakeStatusNeo *this)
{
  __int16 v1 = *((_WORD *)this + 32);
  if (v1)
  {
    double v2 = *((double *)this + 1);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((*((_WORD *)this + 32) & 0x800) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 60);
      if ((*((_WORD *)this + 32) & 0x400) != 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 32) & 0x800) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 32) & 0x400) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 14);
    if ((v1 & 2) != 0) {
      goto LABEL_5;
    }
LABEL_34:
    double v5 = 0.0;
    if ((*((_WORD *)this + 32) & 0x1000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_33:
  uint64_t v4 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_34;
  }
LABEL_5:
  double v5 = *((double *)this + 2);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 32) & 0x1000) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned __int8 *)this + 61);
    if ((v1 & 0x40) != 0) {
      goto LABEL_9;
    }
LABEL_36:
    uint64_t v8 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_12;
    }
LABEL_37:
    uint64_t v10 = 0;
    if ((*((_WORD *)this + 32) & 0x100) != 0) {
      goto LABEL_15;
    }
LABEL_38:
    uint64_t v12 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_18;
    }
LABEL_39:
    uint64_t v14 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_21;
    }
LABEL_40:
    uint64_t v16 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_24;
    }
LABEL_41:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_42:
    uint64_t v19 = 0;
    if ((*((_WORD *)this + 32) & 0x200) != 0) {
      goto LABEL_28;
    }
LABEL_43:
    uint64_t v20 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
  }
LABEL_35:
  uint64_t v6 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_36;
  }
LABEL_9:
  float v7 = *((float *)this + 10);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_37;
  }
LABEL_12:
  float v9 = *((float *)this + 11);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((*((_WORD *)this + 32) & 0x100) == 0) {
    goto LABEL_38;
  }
LABEL_15:
  float v11 = *((float *)this + 12);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_39;
  }
LABEL_18:
  float v13 = *((float *)this + 7);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_40;
  }
LABEL_21:
  float v15 = *((float *)this + 8);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_41;
  }
LABEL_24:
  float v17 = *((float *)this + 9);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_42;
  }
LABEL_27:
  uint64_t v19 = *((unsigned int *)this + 6);
  if ((*((_WORD *)this + 32) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_28:
  uint64_t v20 = *((unsigned int *)this + 13);
  return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v19 ^ v20;
}

void CMMsl::LocationOscarEmu::~LocationOscarEmu(CMMsl::LocationOscarEmu *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t this, const CMMsl::LocationOscarEmu *a2)
{
  *(void *)this = off_1003A72E0;
  *(_DWORD *)(this + 100) = 0;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) != 0)
  {
    uint64_t v4 = *((void *)a2 + 9);
    __int16 v3 = 256;
    *(_WORD *)(this + 100) = 256;
    *(void *)(this + 72) = v4;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 50) & 0x1000) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 24);
    v3 |= 0x1000u;
    *(_WORD *)(this + 100) = v3;
    *(_DWORD *)(this + 96) = v5;
    __int16 v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    uint64_t v6 = *((void *)a2 + 7);
    v3 |= 0x40u;
    *(_WORD *)(this + 100) = v3;
    *(void *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 64) = v7;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v9 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v10 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 32) = v10;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v11 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 8) = v11;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v12 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 80) = v12;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 2) == 0)
  {
LABEL_14:
    if ((v2 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v13 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 16) = v13;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 4) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 24) = v14;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 23);
    *(_WORD *)(this + 100) = v3 | 0x800;
    *(_DWORD *)(this + 92) = v16;
    return this;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v15;
  if ((*((_WORD *)a2 + 50) & 0x800) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *a1, const CMMsl::LocationOscarEmu *a2)
{
  if (a1 != a2)
  {
    CMMsl::LocationOscarEmu::LocationOscarEmu((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LocationOscarEmu *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::LocationOscarEmu *a2, CMMsl::LocationOscarEmu *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  int v5 = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v5;
  uint64_t v6 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v6;
  uint64_t v7 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v12;
  uint64_t v13 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v13;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v15 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v15;
  int v16 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v16;
  return result;
}

double CMMsl::LocationOscarEmu::LocationOscarEmu(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A72E0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  return result;
}

CMMsl *CMMsl::LocationOscarEmu::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::LocationOscarEmu::LocationOscarEmu((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::LocationOscarEmu *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::LocationOscarEmu::formatText(CMMsl::LocationOscarEmu *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 50);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 50);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 22));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "locationLoggingEnabled", *((_DWORD *)this + 23));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 24));
  if ((*((_WORD *)this + 50) & 0x200) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 10));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LocationOscarEmu::readFrom(CMMsl::LocationOscarEmu *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 50) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 2u:
              *((_WORD *)this + 50) |= 0x1000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_102;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *((_DWORD *)this + 24) = v25;
              goto LABEL_113;
            case 3u:
              *((_WORD *)this + 50) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 4u:
              *((_WORD *)this + 50) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 5u:
              *((_WORD *)this + 50) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 6u:
              *((_WORD *)this + 50) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 7u:
              *((_WORD *)this + 50) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 8u:
              *((_WORD *)this + 50) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 9u:
              *((_WORD *)this + 50) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xAu:
              *((_WORD *)this + 50) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_60;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_97;
            case 0xBu:
              *((_WORD *)this + 50) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_97:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_60:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *((_WORD *)this + 50) |= 0x400u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_107;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_106;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *((_DWORD *)this + 22) = v31;
              goto LABEL_113;
            case 0xDu:
              *((_WORD *)this + 50) |= 0x800u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_112;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_111;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_112;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *((_DWORD *)this + 23) = v37;
LABEL_113:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_113;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::LocationOscarEmu::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x100) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 72), 1u);
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 2u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 8u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 9u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xCu);
    if ((*(_WORD *)(v3 + 100) & 0x800) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 92);

  return PB::Writer::writeVarInt(a2, v5, 0xDu);
}

uint64_t CMMsl::LocationOscarEmu::hash_value(CMMsl::LocationOscarEmu *this)
{
  __int16 v1 = *((_WORD *)this + 50);
  if ((v1 & 0x100) != 0)
  {
    double v2 = *((double *)this + 9);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((*((_WORD *)this + 50) & 0x1000) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 24);
      if ((v1 & 0x40) != 0) {
        goto LABEL_4;
      }
LABEL_37:
      double v4 = 0.0;
      if ((v1 & 0x80) != 0) {
        goto LABEL_7;
      }
LABEL_38:
      double v5 = 0.0;
      if ((v1 & 0x10) != 0) {
        goto LABEL_10;
      }
LABEL_39:
      double v6 = 0.0;
      if ((v1 & 0x20) != 0) {
        goto LABEL_13;
      }
LABEL_40:
      double v7 = 0.0;
      if ((v1 & 8) != 0) {
        goto LABEL_16;
      }
LABEL_41:
      double v8 = 0.0;
      if (v1) {
        goto LABEL_19;
      }
LABEL_42:
      double v9 = 0.0;
      if ((*((_WORD *)this + 50) & 0x200) != 0) {
        goto LABEL_22;
      }
LABEL_43:
      double v10 = 0.0;
      if ((v1 & 2) != 0) {
        goto LABEL_25;
      }
LABEL_44:
      double v11 = 0.0;
      if ((v1 & 4) != 0) {
        goto LABEL_28;
      }
LABEL_45:
      double v12 = 0.0;
      if ((*((_WORD *)this + 50) & 0x400) != 0) {
        goto LABEL_31;
      }
LABEL_46:
      uint64_t v13 = 0;
      if ((*((_WORD *)this + 50) & 0x800) != 0) {
        goto LABEL_32;
      }
LABEL_47:
      uint64_t v14 = 0;
      return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ v14;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 50) & 0x1000) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x40) == 0) {
    goto LABEL_37;
  }
LABEL_4:
  double v4 = *((double *)this + 7);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_38;
  }
LABEL_7:
  double v5 = *((double *)this + 8);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_39;
  }
LABEL_10:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_40;
  }
LABEL_13:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_41;
  }
LABEL_16:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_19:
  double v9 = *((double *)this + 1);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x200) == 0) {
    goto LABEL_43;
  }
LABEL_22:
  double v10 = *((double *)this + 10);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_44;
  }
LABEL_25:
  double v11 = *((double *)this + 2);
  if (v11 == 0.0) {
    double v11 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_45;
  }
LABEL_28:
  double v12 = *((double *)this + 3);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x400) == 0) {
    goto LABEL_46;
  }
LABEL_31:
  uint64_t v13 = *((unsigned int *)this + 22);
  if ((*((_WORD *)this + 50) & 0x800) == 0) {
    goto LABEL_47;
  }
LABEL_32:
  uint64_t v14 = *((unsigned int *)this + 23);
  return v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ *(void *)&v12 ^ v13 ^ v14;
}

void CMMsl::LockScreenStatus::~LockScreenStatus(CMMsl::LockScreenStatus *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::LockScreenStatus::LockScreenStatus(uint64_t this, const CMMsl::LockScreenStatus *a2)
{
  *(void *)this = off_1003A7318;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::LockScreenStatus::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    double v7 = off_1003A7318;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::LockScreenStatus *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    double v7 = off_1003A7318;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::LockScreenStatus *a2, CMMsl::LockScreenStatus *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::LockScreenStatus::formatText(CMMsl::LockScreenStatus *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "lockScreen", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::LockScreenStatus::readFrom(CMMsl::LockScreenStatus *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::LockScreenStatus::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::LockScreenStatus::hash_value(CMMsl::LockScreenStatus *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification(CMMsl::MLBasedBioMotionClassification *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A7350;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification(this);

  operator delete();
}

void *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(void *this, const CMMsl::MLBasedBioMotionClassification *a2)
{
  *this = off_1003A7350;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::MLBasedBioMotionClassification *CMMsl::MLBasedBioMotionClassification::operator=(const CMMsl::MLBasedBioMotionClassification *a1, const CMMsl::MLBasedBioMotionClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification((CMMsl::MLBasedBioMotionClassification *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MLBasedBioMotionClassification *a2, CMMsl::MLBasedBioMotionClassification *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::MLBasedBioMotionClassification::MLBasedBioMotionClassification(void *a1, uint64_t a2)
{
  *a1 = off_1003A7350;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A7350;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A7350;
    v6[1] = v4;
    CMMsl::MLBasedBioMotionClassification::~MLBasedBioMotionClassification((CMMsl::MLBasedBioMotionClassification *)v6);
  }
  return a1;
}

uint64_t CMMsl::MLBasedBioMotionClassification::formatText(CMMsl::MLBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MLBasedBioMotionClassification::readFrom(CMMsl::MLBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MLBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::BioMotionClassification *CMMsl::MLBasedBioMotionClassification::hash_value(CMMsl::MLBasedBioMotionClassification *this)
{
  uint64_t result = (CMMsl::BioMotionClassification *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::MLBasedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MagicMountState::~MagicMountState(CMMsl::MagicMountState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t this, const CMMsl::MagicMountState *a2)
{
  *(void *)this = off_1003A7388;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::MagicMountState *CMMsl::MagicMountState::operator=(const CMMsl::MagicMountState *a1, const CMMsl::MagicMountState *a2)
{
  if (a1 != a2)
  {
    CMMsl::MagicMountState::MagicMountState((uint64_t)v6, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v7;
    uint64_t v7 = v3;
    uint64_t v4 = *((void *)a1 + 2);
    *((void *)a1 + 2) = v8;
    uint64_t v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagicMountState *a2, CMMsl::MagicMountState *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  return this;
}

uint64_t CMMsl::MagicMountState::MagicMountState(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A7388;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  *(void *)uint64_t result = off_1003A7388;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::MagicMountState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v8[0] = off_1003A7388;
    v8[1] = v5;
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v4;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::MagicMountState::formatText(CMMsl::MagicMountState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagicMountState::readFrom(CMMsl::MagicMountState *this, PB::Reader *a2)
{
  unint64_t v3 = *((void *)a2 + 1);
  unint64_t v2 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)a2 + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_63:
          unint64_t v3 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_64:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)a2 + 1);
          }
          else {
            unint64_t v3 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            uint64_t v25 = 0;
          }
LABEL_59:
          unint64_t v3 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_60:
        *((void *)this + 1) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v3 >= v2 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagicMountState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(void *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::MagicMountState::hash_value(CMMsl::MagicMountState *this)
{
  if (*((unsigned char *)this + 20))
  {
    uint64_t v1 = *((void *)this + 1);
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = 0;
    return v2 ^ v1;
  }
  uint64_t v1 = 0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ v1;
}

void CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(CMMsl::MagneticAccessoryType1 *this)
{
  *(void *)this = off_1003A73C0;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_100012E84((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1(this);

  operator delete();
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t this, const CMMsl::MagneticAccessoryType1 *a2)
{
  *(void *)this = off_1003A73C0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 24) = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 24) |= 1u;
    *(_DWORD *)(this + 16) = v3;
    char v2 = *((unsigned char *)a2 + 24);
  }
  if ((v2 & 2) != 0)
  {
    char v4 = *((unsigned char *)a2 + 20);
    *(unsigned char *)(this + 24) |= 2u;
    *(unsigned char *)(this + 20) = v4;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, const CMMsl::MagneticAccessoryType1 *a2)
{
  if ((const CMMsl::MagneticAccessoryType1 *)a1 != a2)
  {
    CMMsl::MagneticAccessoryType1::MagneticAccessoryType1((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v9;
    char v9 = v4;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType1 *a2, CMMsl::MagneticAccessoryType1 *a3)
{
  int v3 = *(_DWORD *)(this + 24);
  *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  uint64_t v4 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *(_DWORD *)(this + 16);
  *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LOBYTE(v4) = *(unsigned char *)(this + 20);
  *(unsigned char *)(this + 20) = *((unsigned char *)a2 + 20);
  *((unsigned char *)a2 + 20) = v4;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType1::MagneticAccessoryType1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A73C0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v6 = *v4;
  *uint64_t v4 = v5;
  if (v6) {
    sub_100012E84((uint64_t)v4, v6);
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MagneticAccessoryType1::MagneticAccessoryType1((uint64_t)&v6, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 20);
    *(unsigned char *)(a1 + 20) = v9;
    char v9 = v4;
    CMMsl::MagneticAccessoryType1::~MagneticAccessoryType1((CMMsl::MagneticAccessoryType1 *)&v6);
  }
  return a1;
}

uint64_t CMMsl::MagneticAccessoryType1::formatText(CMMsl::MagneticAccessoryType1 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if (v5)
  {
    PB::TextFormatter::format(a2, "accessoryType", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "isAttached", *((unsigned char *)this + 20));
  }
  if (*((void *)this + 1)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType1::readFrom(CMMsl::MagneticAccessoryType1 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        if (v21 >= *((void *)a2 + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)a2 + v21);
          *((void *)a2 + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *((unsigned char *)this + 20) = v24;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        uint64_t v27 = *(void *)a2;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v36 = v25 + 1;
            char v37 = *(unsigned char *)(v27 + v25);
            *((void *)a2 + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            unint64_t v25 = v36;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
LABEL_44:
              LODWORD(v30) = 0;
              goto LABEL_48;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v30) = 0;
          }
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v31 = v25 + 1;
            *((void *)a2 + 1) = v25 + 1;
            char v32 = *(unsigned char *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v25 = v31;
            BOOL v14 = v29++ > 8;
            if (v14) {
              goto LABEL_44;
            }
          }
        }
LABEL_48:
        *((_DWORD *)this + 4) = v30;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType1::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(void *)(this + 8)) {
    this = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 20);
    return PB::Writer::write(a2, v5, 3u);
  }
  return this;
}

unint64_t CMMsl::MagneticAccessoryType1::hash_value(CMMsl::MagneticAccessoryType1 *this)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    unint64_t v3 = sub_100012EE0((uint64_t)&v7, v2);
  }
  else {
    unint64_t v3 = 0;
  }
  if (*((unsigned char *)this + 24))
  {
    uint64_t v4 = *((unsigned int *)this + 4);
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v5 = 0;
    return v4 ^ v3 ^ v5;
  }
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v5 = *((unsigned __int8 *)this + 20);
  return v4 ^ v3 ^ v5;
}

void CMMsl::MagneticAccessoryType2::~MagneticAccessoryType2(CMMsl::MagneticAccessoryType2 *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MagneticAccessoryType2::MagneticAccessoryType2(uint64_t this, const CMMsl::MagneticAccessoryType2 *a2)
{
  *(void *)this = off_1003A73F8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v7 = off_1003A73F8;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MagneticAccessoryType2 *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    char v7 = off_1003A73F8;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MagneticAccessoryType2 *a2, CMMsl::MagneticAccessoryType2 *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::formatText(CMMsl::MagneticAccessoryType2 *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isCharging", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagneticAccessoryType2::readFrom(CMMsl::MagneticAccessoryType2 *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagneticAccessoryType2::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::MagneticAccessoryType2::hash_value(CMMsl::MagneticAccessoryType2 *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::Magnetometer::~Magnetometer(CMMsl::Magnetometer *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Magnetometer::Magnetometer(uint64_t this, const CMMsl::Magnetometer *a2)
{
  *(void *)this = off_1003A7430;
  *(_DWORD *)(this + 36) = 0;
  char v2 = *((unsigned char *)a2 + 36);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 36) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 36) & 8) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v5;
    char v2 = *((unsigned char *)a2 + 36);
  }
LABEL_6:
  if ((v2 & 0x10) != 0)
  {
    int v6 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(unsigned char *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v6;
    char v2 = *((unsigned char *)a2 + 36);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 36);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 2) == 0) {
      return this;
    }
LABEL_14:
    int v9 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 36) = v3 | 2;
    *(_DWORD *)(this + 16) = v9;
    return this;
  }
LABEL_13:
  int v8 = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *(unsigned char *)(this + 36) = v3;
  *(_DWORD *)(this + 20) = v8;
  if ((*((unsigned char *)a2 + 36) & 2) != 0) {
    goto LABEL_14;
  }
  return this;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, const CMMsl::Magnetometer *a2)
{
  if ((const CMMsl::Magnetometer *)a1 != a2)
  {
    CMMsl::Magnetometer::Magnetometer((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a1 + 20) = v11;
    long long v11 = v5;
    int v6 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v10;
    int v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::Magnetometer *a2, CMMsl::Magnetometer *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  float result = *((float *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((float *)a2 + 5) = result;
  int v6 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v6;
  return result;
}

float CMMsl::Magnetometer::Magnetometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7430;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7430;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 20);
  *(float *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Magnetometer::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v11[0] = off_1003A7430;
    int v3 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v14 = *(_DWORD *)(a1 + 36);
    uint64_t v6 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v11[1] = v6;
    long long v7 = *(_OWORD *)(a1 + 20);
    long long v8 = *(_OWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 36) = v3;
    *(_OWORD *)(a1 + 20) = v8;
    long long v13 = v7;
    int v9 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v12 = v9;
    PB::Base::~Base((PB::Base *)v11);
  }
  return a1;
}

uint64_t CMMsl::Magnetometer::formatText(CMMsl::Magnetometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "location", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*((unsigned char *)this + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "temperature", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "x", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "y", *((float *)this + 7));
  if ((*((unsigned char *)this + 36) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(a2, "z", *((float *)this + 8));
LABEL_8:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Magnetometer::readFrom(CMMsl::Magnetometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 36) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_55;
            case 2u:
              *((unsigned char *)this + 36) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_54;
            case 3u:
              *((unsigned char *)this + 36) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_54;
            case 4u:
              *((unsigned char *)this + 36) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_38;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_54;
            case 5u:
              *((unsigned char *)this + 36) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_54:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_55:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *((unsigned char *)this + 36) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_60;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_59;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *((_DWORD *)this + 4) = v25;
LABEL_61:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_61;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Magnetometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(this + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
    if ((*(unsigned char *)(v3 + 36) & 2) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_13:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(a2, v5, 6u);
}

uint64_t CMMsl::Magnetometer::hash_value(CMMsl::Magnetometer *this)
{
  if ((*((unsigned char *)this + 36) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 36) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_19:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 36) & 0x10) != 0) {
      goto LABEL_6;
    }
LABEL_20:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 36) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_21:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 36) & 4) != 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 36) & 8) == 0) {
    goto LABEL_19;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x10) == 0) {
    goto LABEL_20;
  }
LABEL_6:
  float v4 = *((float *)this + 7);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 36) & 0x20) == 0) {
    goto LABEL_21;
  }
LABEL_9:
  float v6 = *((float *)this + 8);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 36) & 4) != 0)
  {
LABEL_12:
    float v8 = *((float *)this + 5);
    uint64_t v9 = LODWORD(v8);
    if (v8 == 0.0) {
      uint64_t v9 = 0;
    }
    if ((*((unsigned char *)this + 36) & 2) != 0) {
      goto LABEL_15;
    }
LABEL_23:
    uint64_t v10 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
  }
LABEL_22:
  uint64_t v9 = 0;
  if ((*((unsigned char *)this + 36) & 2) == 0) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v10 = *((int *)this + 4);
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v10;
}

void CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  *(void *)this = off_1003A7468;
  float v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters(this);

  operator delete();
}

CMMsl::MagnetometerCalibratorFilterParameters *CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(CMMsl::MagnetometerCalibratorFilterParameters *this, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  *(void *)this = off_1003A7468;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v5 = (char *)this + 56;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  if (*((unsigned char *)a2 + 112))
  {
    uint64_t v6 = *((void *)a2 + 13);
    *((unsigned char *)this + 112) = 1;
    *((void *)this + 13) = v6;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, const CMMsl::MagnetometerCalibratorFilterParameters *a2)
{
  if (a1 != a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerCalibratorFilterParameters *a2, CMMsl::MagnetometerCalibratorFilterParameters *a3)
{
  int v3 = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v3;
  double result = *((double *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((double *)a2 + 13) = result;
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v5;
  uint64_t v6 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v6;
  uint64_t v7 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v7;
  uint64_t v8 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v11;
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v12;
  uint64_t v13 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
  return result;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7468;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(a1 + 80, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::MagnetometerCalibratorFilterParameters::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MagnetometerCalibratorFilterParameters::MagnetometerCalibratorFilterParameters((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MagnetometerCalibratorFilterParameters *)v5, v3);
    CMMsl::MagnetometerCalibratorFilterParameters::~MagnetometerCalibratorFilterParameters((CMMsl::MagnetometerCalibratorFilterParameters *)v5);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::formatText(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 4);
  uint64_t v6 = (float *)*((void *)this + 5);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "biasEst", v7);
  }
  uint64_t v8 = (float *)*((void *)this + 1);
  uint64_t v9 = (float *)*((void *)this + 2);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "biasEstVar", v10);
  }
  uint64_t v11 = (float *)*((void *)this + 7);
  uint64_t v12 = (float *)*((void *)this + 8);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(a2, "residual", v13);
  }
  uint64_t v14 = (float *)*((void *)this + 10);
  uint64_t v15 = (float *)*((void *)this + 11);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(a2, "temperature", v16);
  }
  if (*((unsigned char *)this + 112)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 13));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MagnetometerCalibratorFilterParameters::readFrom(CMMsl::MagnetometerCalibratorFilterParameters *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 56);
    uint64_t v9 = (void **)((char *)this + 80);
    unint64_t v128 = (char *)this + 96;
    unint64_t v129 = (char *)this + 72;
    float v10 = (void **)((char *)this + 8);
    uint64_t v127 = (char *)this + 24;
    uint64_t v11 = (void **)((char *)this + 32);
    uint64_t v12 = (char *)this + 48;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 112) |= 1u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_196;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v26);
          uint64_t v27 = *((void *)a2 + 1) + 8;
          goto LABEL_198;
        case 2u:
          if (v25 != 2)
          {
            uint64_t v85 = (char *)*((void *)this + 5);
            unint64_t v84 = *((void *)this + 6);
            if ((unint64_t)v85 >= v84)
            {
              unint64_t v93 = (char *)*v11;
              uint64_t v94 = (v85 - (unsigned char *)*v11) >> 2;
              unint64_t v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 62) {
LABEL_207:
              }
                sub_10000EE98();
              uint64_t v96 = v84 - (void)v93;
              if (v96 >> 1 > v95) {
                unint64_t v95 = v96 >> 1;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v95;
              }
              if (v97)
              {
                uint64_t v98 = (char *)sub_100024458((uint64_t)v12, v97);
                unint64_t v93 = (char *)*((void *)this + 4);
                uint64_t v85 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v98 = 0;
              }
              unsigned int v117 = &v98[4 * v94];
              *(_DWORD *)unsigned int v117 = 0;
              unint64_t v86 = v117 + 4;
              while (v85 != v93)
              {
                int v118 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              *((void *)this + 4) = v117;
              *((void *)this + 5) = v86;
              *((void *)this + 6) = &v98[4 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v85 = 0;
              unint64_t v86 = v85 + 4;
            }
            *((void *)this + 5) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)a2 + 1);
          unint64_t v29 = *((void *)a2 + 2);
          while (v28 < v29 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v31 = (char *)*((void *)this + 5);
            unint64_t v30 = *((void *)this + 6);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*v11;
              uint64_t v34 = (v31 - (unsigned char *)*v11) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_207;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_100024458((uint64_t)v12, v37);
                unint64_t v33 = (char *)*((void *)this + 4);
                unint64_t v31 = (char *)*((void *)this + 5);
              }
              else
              {
                char v38 = 0;
              }
              unsigned int v39 = &v38[4 * v34];
              *(_DWORD *)unsigned int v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *((void *)this + 4) = v39;
              *((void *)this + 5) = v32;
              *((void *)this + 6) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *((void *)this + 5) = v32;
            unint64_t v41 = *((void *)a2 + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
              goto LABEL_124;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
            unint64_t v29 = *((void *)a2 + 2);
            unint64_t v28 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v28;
          }
          goto LABEL_125;
        case 3u:
          if (v25 != 2)
          {
            unint64_t v88 = (char *)*((void *)this + 2);
            unint64_t v87 = *((void *)this + 3);
            if ((unint64_t)v88 >= v87)
            {
              unint64_t v99 = (char *)*v10;
              uint64_t v100 = (v88 - (unsigned char *)*v10) >> 2;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 62) {
LABEL_208:
              }
                sub_10000EE98();
              uint64_t v102 = v87 - (void)v99;
              if (v102 >> 1 > v101) {
                unint64_t v101 = v102 >> 1;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              if (v103)
              {
                unint64_t v104 = (char *)sub_100024458((uint64_t)v127, v103);
                unint64_t v99 = (char *)*((void *)this + 1);
                unint64_t v88 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v104 = 0;
              }
              char v119 = &v104[4 * v100];
              *(_DWORD *)char v119 = 0;
              unint64_t v86 = v119 + 4;
              while (v88 != v99)
              {
                int v120 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v119 - 1) = v120;
                v119 -= 4;
              }
              *((void *)this + 1) = v119;
              *((void *)this + 2) = v86;
              *((void *)this + 3) = &v104[4 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v88 = 0;
              unint64_t v86 = v88 + 4;
            }
            *((void *)this + 2) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)a2 + 1);
          unint64_t v43 = *((void *)a2 + 2);
          while (v42 < v43 && !*((unsigned char *)a2 + 24))
          {
            unint64_t v45 = (char *)*((void *)this + 2);
            unint64_t v44 = *((void *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_208;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unsigned int v52 = (char *)sub_100024458((uint64_t)v127, v51);
                char v47 = (char *)*((void *)this + 1);
                unint64_t v45 = (char *)*((void *)this + 2);
              }
              else
              {
                unsigned int v52 = 0;
              }
              unint64_t v53 = &v52[4 * v48];
              *(_DWORD *)unint64_t v53 = 0;
              char v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 1) = v53;
              *((void *)this + 2) = v46;
              *((void *)this + 3) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              char v46 = v45 + 4;
            }
            *((void *)this + 2) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
              goto LABEL_124;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
            unint64_t v43 = *((void *)a2 + 2);
            unint64_t v42 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v42;
          }
          goto LABEL_125;
        case 4u:
          if (v25 != 2)
          {
            unint64_t v90 = (char *)*((void *)this + 11);
            unint64_t v89 = *((void *)this + 12);
            if ((unint64_t)v90 >= v89)
            {
              char v105 = (char *)*v9;
              uint64_t v106 = (v90 - (unsigned char *)*v9) >> 2;
              unint64_t v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62) {
LABEL_209:
              }
                sub_10000EE98();
              uint64_t v108 = v89 - (void)v105;
              if (v108 >> 1 > v107) {
                unint64_t v107 = v108 >> 1;
              }
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v107;
              }
              if (v109)
              {
                char v110 = (char *)sub_100024458((uint64_t)v128, v109);
                char v105 = (char *)*((void *)this + 10);
                unint64_t v90 = (char *)*((void *)this + 11);
              }
              else
              {
                char v110 = 0;
              }
              unsigned int v121 = &v110[4 * v106];
              *(_DWORD *)unsigned int v121 = 0;
              unint64_t v86 = v121 + 4;
              while (v90 != v105)
              {
                int v122 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v121 - 1) = v122;
                v121 -= 4;
              }
              *((void *)this + 10) = v121;
              *((void *)this + 11) = v86;
              *((void *)this + 12) = &v110[4 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v90 = 0;
              unint64_t v86 = v90 + 4;
            }
            *((void *)this + 11) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          while (v56 < v57 && !*((unsigned char *)a2 + 24))
          {
            char v59 = (char *)*((void *)this + 11);
            unint64_t v58 = *((void *)this + 12);
            if ((unint64_t)v59 >= v58)
            {
              unint64_t v61 = (char *)*v9;
              uint64_t v62 = (v59 - (unsigned char *)*v9) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_209;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                char v66 = (char *)sub_100024458((uint64_t)v128, v65);
                unint64_t v61 = (char *)*((void *)this + 10);
                char v59 = (char *)*((void *)this + 11);
              }
              else
              {
                char v66 = 0;
              }
              char v67 = &v66[4 * v62];
              *(_DWORD *)char v67 = 0;
              unsigned int v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *((void *)this + 10) = v67;
              *((void *)this + 11) = v60;
              *((void *)this + 12) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)char v59 = 0;
              unsigned int v60 = v59 + 4;
            }
            *((void *)this + 11) = v60;
            unint64_t v69 = *((void *)a2 + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)a2 + 2)) {
              goto LABEL_124;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)a2 + v69);
            unint64_t v57 = *((void *)a2 + 2);
            unint64_t v56 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v56;
          }
          goto LABEL_125;
        case 5u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v70 = *((void *)a2 + 1);
            unint64_t v71 = *((void *)a2 + 2);
            while (v70 < v71 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v73 = (char *)*((void *)this + 8);
              unint64_t v72 = *((void *)this + 9);
              if ((unint64_t)v73 >= v72)
              {
                uint64_t v75 = (char *)*v8;
                uint64_t v76 = (v73 - (unsigned char *)*v8) >> 2;
                unint64_t v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 62) {
                  goto LABEL_210;
                }
                uint64_t v78 = v72 - (void)v75;
                if (v78 >> 1 > v77) {
                  unint64_t v77 = v78 >> 1;
                }
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v79 = v77;
                }
                if (v79)
                {
                  unint64_t v80 = (char *)sub_100024458((uint64_t)v129, v79);
                  uint64_t v75 = (char *)*((void *)this + 7);
                  uint64_t v73 = (char *)*((void *)this + 8);
                }
                else
                {
                  unint64_t v80 = 0;
                }
                unint64_t v81 = &v80[4 * v76];
                *(_DWORD *)unint64_t v81 = 0;
                unint64_t v74 = v81 + 4;
                while (v73 != v75)
                {
                  int v82 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v82;
                  v81 -= 4;
                }
                *((void *)this + 7) = v81;
                *((void *)this + 8) = v74;
                *((void *)this + 9) = &v80[4 * v79];
                if (v75) {
                  operator delete(v75);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v73 = 0;
                unint64_t v74 = v73 + 4;
              }
              *((void *)this + 8) = v74;
              unint64_t v83 = *((void *)a2 + 1);
              if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)a2 + 2))
              {
LABEL_124:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v74 - 1) = *(_DWORD *)(*(void *)a2 + v83);
              unint64_t v71 = *((void *)a2 + 2);
              unint64_t v70 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v70;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v92 = (char *)*((void *)this + 8);
            unint64_t v91 = *((void *)this + 9);
            if ((unint64_t)v92 >= v91)
            {
              unint64_t v111 = (char *)*v8;
              uint64_t v112 = (v92 - (unsigned char *)*v8) >> 2;
              unint64_t v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 62) {
LABEL_210:
              }
                sub_10000EE98();
              uint64_t v114 = v91 - (void)v111;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                char v116 = (char *)sub_100024458((uint64_t)v129, v115);
                unint64_t v111 = (char *)*((void *)this + 7);
                unint64_t v92 = (char *)*((void *)this + 8);
              }
              else
              {
                char v116 = 0;
              }
              char v123 = &v116[4 * v112];
              *(_DWORD *)char v123 = 0;
              unint64_t v86 = v123 + 4;
              while (v92 != v111)
              {
                int v124 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              *((void *)this + 7) = v123;
              *((void *)this + 8) = v86;
              *((void *)this + 9) = &v116[4 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v92 = 0;
              unint64_t v86 = v92 + 4;
            }
            *((void *)this + 8) = v86;
LABEL_194:
            unint64_t v125 = *((void *)a2 + 1);
            if (v125 <= 0xFFFFFFFFFFFFFFFBLL && v125 + 4 <= *((void *)a2 + 2))
            {
              *(v86 - 1) = *(_DWORD *)(*(void *)a2 + v125);
              uint64_t v27 = *((void *)a2 + 1) + 4;
LABEL_198:
              *((void *)a2 + 1) = v27;
            }
            else
            {
LABEL_196:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_199:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v25, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_199;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v3 = (void *)this;
  if (*(unsigned char *)(this + 112)) {
    this = PB::Writer::write(a2, *(double *)(this + 104), 1u);
  }
  int v4 = (float *)v3[4];
  uint64_t v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = (float *)v3[1];
  uint64_t v8 = (float *)v3[2];
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  float v10 = (float *)v3[10];
  uint64_t v11 = (float *)v3[11];
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 4u);
  }
  char v14 = (float *)v3[7];
  uint64_t v13 = (float *)v3[8];
  while (v14 != v13)
  {
    float v15 = *v14++;
    this = PB::Writer::write(a2, v15, 5u);
  }
  return this;
}

uint64_t CMMsl::MagnetometerCalibratorFilterParameters::hash_value(CMMsl::MagnetometerCalibratorFilterParameters *this)
{
  if (*((unsigned char *)this + 112))
  {
    if (*((double *)this + 13) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 13);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  uint64_t v2 = PBHashBytes() ^ v1;
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = v2 ^ v3 ^ PBHashBytes();
  return v4 ^ PBHashBytes();
}

void CMMsl::MagnetometerReset::~MagnetometerReset(CMMsl::MagnetometerReset *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MagnetometerReset::MagnetometerReset(uint64_t this, const CMMsl::MagnetometerReset *a2)
{
  *(void *)this = off_1003A74A0;
  *(_DWORD *)(this + 44) = 0;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    char v3 = 4;
    *(unsigned char *)(this + 44) = 4;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 44) & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 44);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(unsigned char *)(this + 44) = v3;
    *(void *)(this + 8) = v6;
    char v2 = *((unsigned char *)a2 + 44);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 4);
  v3 |= 8u;
  *(unsigned char *)(this + 44) = v3;
  *(void *)(this + 32) = v7;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  char v8 = *((unsigned char *)a2 + 42);
  v3 |= 0x40u;
  *(unsigned char *)(this + 44) = v3;
  *(unsigned char *)(this + 42) = v8;
  char v2 = *((unsigned char *)a2 + 44);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_16:
    char v10 = *((unsigned char *)a2 + 41);
    *(unsigned char *)(this + 44) = v3 | 0x20;
    *(unsigned char *)(this + 41) = v10;
    return this;
  }
LABEL_15:
  char v9 = *((unsigned char *)a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(this + 44) = v3;
  *(unsigned char *)(this + 40) = v9;
  if ((*((unsigned char *)a2 + 44) & 0x20) != 0) {
    goto LABEL_16;
  }
  return this;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, const CMMsl::MagnetometerReset *a2)
{
  if ((const CMMsl::MagnetometerReset *)a1 != a2)
  {
    CMMsl::MagnetometerReset::MagnetometerReset((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)(a1 + 44) = v15;
    int v15 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 42);
    *(unsigned char *)(a1 + 42) = v14;
    char v14 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v12;
    char v12 = v6;
    LOBYTE(v6) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v13;
    char v13 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MagnetometerReset *a2, CMMsl::MagnetometerReset *a3)
{
  int v3 = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v3;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 42);
  *((unsigned char *)this + 42) = *((unsigned char *)a2 + 42);
  *((unsigned char *)a2 + 42) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 40);
  *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
  *((unsigned char *)a2 + 40) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 41);
  *((unsigned char *)this + 41) = *((unsigned char *)a2 + 41);
  *((unsigned char *)a2 + 41) = v7;
  return result;
}

double CMMsl::MagnetometerReset::MagnetometerReset(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A74A0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A74A0;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return result;
}

uint64_t CMMsl::MagnetometerReset::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    char v14 = off_1003A74A0;
    int v3 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(a2 + 44) = 0;
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 42);
    char v7 = *(unsigned char *)(a2 + 40);
    char v8 = *(unsigned char *)(a2 + 41);
    int v21 = *(_DWORD *)(a1 + 44);
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v4;
    uint64_t v16 = v9;
    long long v10 = *(_OWORD *)(a1 + 8);
    long long v11 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 44) = v3;
    *(_OWORD *)(a1 + 8) = v11;
    long long v15 = v10;
    uint64_t v12 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v5;
    uint64_t v17 = v12;
    LOBYTE(v12) = *(unsigned char *)(a1 + 42);
    *(unsigned char *)(a1 + 42) = v6;
    char v20 = v12;
    LOBYTE(v12) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = v7;
    char v18 = v12;
    LOBYTE(v12) = *(unsigned char *)(a1 + 41);
    *(unsigned char *)(a1 + 41) = v8;
    char v19 = v12;
    PB::Base::~Base((PB::Base *)&v14);
  }
  return a1;
}

uint64_t CMMsl::MagnetometerReset::formatText(CMMsl::MagnetometerReset *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(a2, "exitingSaturation", *((unsigned char *)this + 40));
    char v5 = *((unsigned char *)this + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "extendedSaturation", *((unsigned char *)this + 41));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "shiftInSaturation", *((unsigned char *)this + 42));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timeSinceLastRemag", *((void *)this + 1));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "timeSinceLastRemagTrigger", *((void *)this + 2));
  char v5 = *((unsigned char *)this + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  if ((*((unsigned char *)this + 44) & 8) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "triggerCount", *((void *)this + 4));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MagnetometerReset::readFrom(CMMsl::MagnetometerReset *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 44) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *((unsigned char *)this + 44) |= 2u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_85:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_85;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_86:
              *((void *)this + 2) = v25;
              goto LABEL_97;
            case 3u:
              *((unsigned char *)this + 44) |= 1u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_90:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_90;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_91:
              *((void *)this + 1) = v31;
              goto LABEL_97;
            case 4u:
              *((unsigned char *)this + 44) |= 8u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_95:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_95;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_96:
              *((void *)this + 4) = v37;
LABEL_97:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 44) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 42) = v40;
              goto LABEL_97;
            case 6u:
              *((unsigned char *)this + 44) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *((unsigned char *)this + 40) = v42;
              goto LABEL_97;
            case 7u:
              *((unsigned char *)this + 44) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *((unsigned char *)this + 41) = v44;
              goto LABEL_97;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_97;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MagnetometerReset::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 44);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 8), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 40), 6u);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 42), 5u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_15:
  char v5 = *(unsigned char *)(v3 + 41);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::MagnetometerReset::hash_value(CMMsl::MagnetometerReset *this)
{
  if ((*((unsigned char *)this + 44) & 4) != 0)
  {
    double v1 = *((double *)this + 3);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 44) & 2) != 0)
    {
LABEL_3:
      uint64_t v2 = *((void *)this + 2);
      if (*((unsigned char *)this + 44)) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 44) & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = 0;
  if (*((unsigned char *)this + 44))
  {
LABEL_4:
    uint64_t v3 = *((void *)this + 1);
    if ((*((unsigned char *)this + 44) & 8) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v3 = 0;
  if ((*((unsigned char *)this + 44) & 8) != 0)
  {
LABEL_5:
    uint64_t v4 = *((void *)this + 4);
    if ((*((unsigned char *)this + 44) & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v4 = 0;
  if ((*((unsigned char *)this + 44) & 0x40) != 0)
  {
LABEL_6:
    uint64_t v5 = *((unsigned __int8 *)this + 42);
    if ((*((unsigned char *)this + 44) & 0x10) != 0) {
      goto LABEL_7;
    }
LABEL_16:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 44) & 0x20) != 0) {
      goto LABEL_8;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
  }
LABEL_15:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 44) & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_7:
  uint64_t v6 = *((unsigned __int8 *)this + 40);
  if ((*((unsigned char *)this + 44) & 0x20) == 0) {
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v7 = *((unsigned __int8 *)this + 41);
  return v2 ^ *(void *)&v1 ^ v3 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::MapsRouteHintData::~MapsRouteHintData(CMMsl::MapsRouteHintData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t this, const CMMsl::MapsRouteHintData *a2)
{
  *(void *)this = off_1003A74D8;
  *(_DWORD *)(this + 20) = 0;
  __int16 v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x80) != 0)
  {
    char v4 = *((unsigned char *)a2 + 15);
    __int16 v3 = 128;
    *(_WORD *)(this + 20) = 128;
    *(unsigned char *)(this + 15) = v4;
    __int16 v2 = *((_WORD *)a2 + 10);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    char v5 = *((unsigned char *)a2 + 9);
    v3 |= 2u;
    *(_WORD *)(this + 20) = v3;
    *(unsigned char *)(this + 9) = v5;
    __int16 v2 = *((_WORD *)a2 + 10);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    char v6 = *((unsigned char *)a2 + 11);
    v3 |= 8u;
    *(_WORD *)(this + 20) = v3;
    *(unsigned char *)(this + 11) = v6;
    __int16 v2 = *((_WORD *)a2 + 10);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 13);
  v3 |= 0x20u;
  *(_WORD *)(this + 20) = v3;
  *(unsigned char *)(this + 13) = v7;
  __int16 v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  char v8 = *((unsigned char *)a2 + 14);
  v3 |= 0x40u;
  *(_WORD *)(this + 20) = v3;
  *(unsigned char *)(this + 14) = v8;
  __int16 v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v9 = *((unsigned char *)a2 + 12);
  v3 |= 0x10u;
  *(_WORD *)(this + 20) = v3;
  *(unsigned char *)(this + 12) = v9;
  __int16 v2 = *((_WORD *)a2 + 10);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 16);
  v3 |= 0x100u;
  *(_WORD *)(this + 20) = v3;
  *(unsigned char *)(this + 16) = v10;
  __int16 v2 = *((_WORD *)a2 + 10);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      return this;
    }
LABEL_20:
    char v12 = *((unsigned char *)a2 + 8);
    *(_WORD *)(this + 20) = v3 | 1;
    *(unsigned char *)(this + 8) = v12;
    return this;
  }
LABEL_19:
  char v11 = *((unsigned char *)a2 + 10);
  v3 |= 4u;
  *(_WORD *)(this + 20) = v3;
  *(unsigned char *)(this + 10) = v11;
  if (*((_WORD *)a2 + 10)) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, const CMMsl::MapsRouteHintData *a2)
{
  if ((const CMMsl::MapsRouteHintData *)a1 != a2)
  {
    CMMsl::MapsRouteHintData::MapsRouteHintData((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MapsRouteHintData *a2, CMMsl::MapsRouteHintData *a3)
{
  int v3 = *(_DWORD *)(this + 20);
  *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 15);
  *(unsigned char *)(this + 15) = *((unsigned char *)a2 + 15);
  *((unsigned char *)a2 + 15) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 9);
  *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
  *((unsigned char *)a2 + 9) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 11);
  *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
  *((unsigned char *)a2 + 11) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 13);
  *(unsigned char *)(this + 13) = *((unsigned char *)a2 + 13);
  *((unsigned char *)a2 + 13) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 14);
  *(unsigned char *)(this + 14) = *((unsigned char *)a2 + 14);
  *((unsigned char *)a2 + 14) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 12);
  *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
  *((unsigned char *)a2 + 12) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 16);
  *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
  *((unsigned char *)a2 + 16) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 10);
  *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
  *((unsigned char *)a2 + 10) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MapsRouteHintData::MapsRouteHintData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_1003A74D8;
  *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(result + 15) = *(unsigned char *)(a2 + 15);
  *(unsigned char *)(result + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(result + 11) = *(unsigned char *)(a2 + 11);
  *(unsigned char *)(result + 13) = *(unsigned char *)(a2 + 13);
  *(unsigned char *)(result + 14) = *(unsigned char *)(a2 + 14);
  *(unsigned char *)(result + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(result + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(result + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
  return result;
}

uint64_t CMMsl::MapsRouteHintData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MapsRouteHintData::MapsRouteHintData((uint64_t)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::MapsRouteHintData::formatText(CMMsl::MapsRouteHintData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 10);
  if (v5)
  {
    PB::TextFormatter::format(a2, "isAppleMapsRoutingActive", *((unsigned char *)this + 8));
    __int16 v5 = *((_WORD *)this + 10);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "isBicycleRouting", *((unsigned char *)this + 9));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "isBicycleRoutingActive", *((unsigned char *)this + 10));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "isPedestrianRouting", *((unsigned char *)this + 11));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "isPedestrianRoutingActive", *((unsigned char *)this + 12));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "isStepTypeBicycle", *((unsigned char *)this + 13));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "isStepTypePedestrian", *((unsigned char *)this + 14));
  __int16 v5 = *((_WORD *)this + 10);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "isVehicularRouting", *((unsigned char *)this + 15));
  if ((*((_WORD *)this + 10) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "isVehicularRoutingActive", *((unsigned char *)this + 16));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MapsRouteHintData::readFrom(CMMsl::MapsRouteHintData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 10) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v21 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *((unsigned char *)this + 15) = v21;
              goto LABEL_60;
            case 2u:
              *((_WORD *)this + 10) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v24 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *((unsigned char *)this + 9) = v24;
              goto LABEL_60;
            case 3u:
              *((_WORD *)this + 10) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v26 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *((unsigned char *)this + 11) = v26;
              goto LABEL_60;
            case 4u:
              *((_WORD *)this + 10) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 13) = v28;
              goto LABEL_60;
            case 5u:
              *((_WORD *)this + 10) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v30 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *((unsigned char *)this + 14) = v30;
              goto LABEL_60;
            case 6u:
              *((_WORD *)this + 10) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v32 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *((unsigned char *)this + 12) = v32;
              goto LABEL_60;
            case 7u:
              *((_WORD *)this + 10) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 16) = v34;
              goto LABEL_60;
            case 8u:
              *((_WORD *)this + 10) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 10) = v36;
              goto LABEL_60;
            case 9u:
              *((_WORD *)this + 10) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              if (v2 >= v3)
              {
                BOOL v38 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *((unsigned char *)this + 8) = v38;
              goto LABEL_60;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
LABEL_60:
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MapsRouteHintData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 20);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(unsigned char *)(this + 15), 1u);
    __int16 v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 9), 2u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 11), 3u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 13), 4u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 14), 5u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 12), 6u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 10), 8u);
    if ((*(_WORD *)(v3 + 20) & 1) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 16), 7u);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return this;
  }
LABEL_19:
  char v5 = *(unsigned char *)(v3 + 8);

  return PB::Writer::write(a2, v5, 9u);
}

uint64_t CMMsl::MapsRouteHintData::hash_value(CMMsl::MapsRouteHintData *this)
{
  __int16 v1 = *((_WORD *)this + 10);
  if ((v1 & 0x80) != 0)
  {
    uint64_t v2 = *((unsigned __int8 *)this + 15);
    if ((v1 & 2) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 9);
      if ((v1 & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 11);
    if ((v1 & 0x20) != 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t v4 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 13);
    if ((v1 & 0x40) != 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v5 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 14);
    if ((v1 & 0x10) != 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v6 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 12);
    if ((*((_WORD *)this + 10) & 0x100) != 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 10) & 0x100) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 16);
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t v9 = 0;
    if (v1) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v10 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_17:
  uint64_t v8 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_18;
  }
LABEL_9:
  uint64_t v9 = *((unsigned __int8 *)this + 10);
  if ((v1 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v10 = *((unsigned __int8 *)this + 8);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MetsInfo::~MetsInfo(CMMsl::MetsInfo *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::MetsInfo::MetsInfo(CMMsl::MetsInfo *this, const CMMsl::MetsInfo *a2)
{
  *(void *)this = off_1003A7510;
  *((_DWORD *)this + 7) = 0;
  char v2 = *((unsigned char *)a2 + 28);
  if (v2)
  {
    float result = *((float *)a2 + 2);
    char v3 = 1;
    *((unsigned char *)this + 28) = 1;
    *((float *)this + 2) = result;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 28) & 4) != 0)
  {
LABEL_5:
    float result = *((float *)a2 + 4);
    v3 |= 4u;
    *((unsigned char *)this + 28) = v3;
    *((float *)this + 4) = result;
    char v2 = *((unsigned char *)a2 + 28);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    float result = *((float *)a2 + 5);
    v3 |= 8u;
    *((unsigned char *)this + 28) = v3;
    *((float *)this + 5) = result;
    char v2 = *((unsigned char *)a2 + 28);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 2) == 0) {
        return result;
      }
LABEL_12:
      float result = *((float *)a2 + 3);
      *((unsigned char *)this + 28) = v3 | 2;
      *((float *)this + 3) = result;
      return result;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v5 = *((_DWORD *)a2 + 6);
  v3 |= 0x10u;
  *((unsigned char *)this + 28) = v3;
  *((_DWORD *)this + 6) = v5;
  if ((*((unsigned char *)a2 + 28) & 2) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, const CMMsl::MetsInfo *a2)
{
  if ((const CMMsl::MetsInfo *)a1 != a2)
  {
    CMMsl::MetsInfo::MetsInfo((CMMsl::MetsInfo *)&v6, a2);
    uint64_t v3 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v8;
    uint64_t v8 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v7;
    long long v7 = v4;
    PB::Base::~Base((PB::Base *)&v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MetsInfo *a2, CMMsl::MetsInfo *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  float result = *((float *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((float *)a2 + 3) = result;
  return result;
}

float CMMsl::MetsInfo::MetsInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7510;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7510;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t CMMsl::MetsInfo::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v7 = off_1003A7510;
    uint64_t v3 = *(void *)(a2 + 24);
    *(_DWORD *)(a2 + 28) = 0;
    uint64_t v9 = *(void *)(a1 + 24);
    long long v4 = *(_OWORD *)(a1 + 8);
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v3;
    *(_OWORD *)(a1 + 8) = v5;
    long long v8 = v4;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::MetsInfo::formatText(CMMsl::MetsInfo *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 28);
  if (v5)
  {
    PB::TextFormatter::format(a2, "mets", *((float *)this + 2));
    char v5 = *((unsigned char *)this + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "metsDiff", *((float *)this + 3));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(a2, "metsHR", *((float *)this + 4));
  char v5 = *((unsigned char *)this + 28);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(a2, "metsWR", *((float *)this + 5));
  if ((*((unsigned char *)this + 28) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 6));
LABEL_7:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MetsInfo::readFrom(CMMsl::MetsInfo *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((unsigned char *)this + 28) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_42;
              }
              *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 2u:
              *((unsigned char *)this + 28) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_42;
              }
              *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 3u:
              *((unsigned char *)this + 28) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_42;
              }
              *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_51;
            case 4u:
              *((unsigned char *)this + 28) |= 0x10u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *((_DWORD *)this + 6) = v25;
LABEL_57:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *((unsigned char *)this + 28) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 3) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_51:
                unint64_t v2 = *((void *)a2 + 1) + 4;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_42:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_57;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MetsInfo::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if (v4)
  {
    this = PB::Writer::write(a2, *(float *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 2u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 4u);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 12);

  return PB::Writer::write(a2, v5, 5u);
}

uint64_t CMMsl::MetsInfo::hash_value(CMMsl::MetsInfo *this)
{
  if ((*((unsigned char *)this + 28) & 1) == 0)
  {
    uint64_t v1 = 0;
    if ((*((unsigned char *)this + 28) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_16:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 8) != 0) {
      goto LABEL_6;
    }
LABEL_17:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 28) & 0x10) != 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  float v9 = *((float *)this + 2);
  uint64_t v1 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v1 = 0;
  }
  if ((*((unsigned char *)this + 28) & 4) == 0) {
    goto LABEL_16;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 28) & 8) == 0) {
    goto LABEL_17;
  }
LABEL_6:
  float v4 = *((float *)this + 5);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 28) & 0x10) != 0)
  {
LABEL_9:
    uint64_t v6 = *((unsigned int *)this + 6);
    if ((*((unsigned char *)this + 28) & 2) != 0) {
      goto LABEL_10;
    }
LABEL_19:
    uint64_t v8 = 0;
    return v3 ^ v1 ^ v5 ^ v6 ^ v8;
  }
LABEL_18:
  uint64_t v6 = 0;
  if ((*((unsigned char *)this + 28) & 2) == 0) {
    goto LABEL_19;
  }
LABEL_10:
  float v7 = *((float *)this + 3);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  return v3 ^ v1 ^ v5 ^ v6 ^ v8;
}

void CMMsl::MobilityBoutMetrics::~MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(CMMsl::MobilityBoutMetrics *this, const CMMsl::MobilityBoutMetrics *a2)
{
  *(void *)this = off_1003A7548;
  *((void *)this + 23) = 0;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    uint64_t v3 = 4;
    *((void *)this + 23) = 4;
    *((void *)this + 3) = v4;
    uint64_t v2 = *((void *)a2 + 23);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 1);
    v3 |= 1uLL;
    *((void *)this + 23) = v3;
    *((void *)this + 1) = v4;
    uint64_t v2 = *((void *)a2 + 23);
  }
LABEL_6:
  if ((v2 & 0x200000) != 0)
  {
    int v5 = *((_DWORD *)a2 + 26);
    v3 |= 0x200000uLL;
    *((void *)this + 23) = v3;
    *((_DWORD *)this + 26) = v5;
    uint64_t v2 = *((void *)a2 + 23);
    if ((v2 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }
  else if ((v2 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 41);
  v3 |= 0x1000000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 41) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  char v6 = *((unsigned char *)a2 + 181);
  v3 |= 0x100000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 181) = v6;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x800) == 0)
  {
LABEL_10:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *((_DWORD *)a2 + 16);
  v3 |= 0x800uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 16) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v7 = *((unsigned char *)a2 + 177);
  v3 |= 0x10000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 177) = v7;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *((_DWORD *)a2 + 30);
  v3 |= 0x2000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 30) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  char v8 = *((unsigned char *)a2 + 180);
  v3 |= 0x80000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 180) = v8;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x4000) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v9 = *((_DWORD *)a2 + 19);
  v3 |= 0x4000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 19) = v9;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v4 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *((void *)this + 23) = v3;
  *((void *)this + 2) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x8000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 8uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 8) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v10 = *((unsigned char *)a2 + 176);
  v3 |= 0x8000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 176) = v10;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x2000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v11 = *((_DWORD *)a2 + 18);
  v3 |= 0x2000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 18) = v11;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v12 = *((_DWORD *)a2 + 38);
  v3 |= 0x200000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 38) = v12;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v13 = *((_DWORD *)a2 + 43);
  v3 |= 0x4000000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 43) = v13;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x100000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v14 = *((_DWORD *)a2 + 25);
  v3 |= 0x100000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 25) = v14;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v15 = *((_DWORD *)a2 + 22);
  v3 |= 0x20000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 22) = v15;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x10000) == 0)
  {
LABEL_23:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v16 = *((_DWORD *)a2 + 21);
  v3 |= 0x10000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 21) = v16;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x40000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v17 = *((_DWORD *)a2 + 23);
  v3 |= 0x40000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 23) = v17;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x80000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v18 = *((_DWORD *)a2 + 24);
  v3 |= 0x80000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 24) = v18;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v19 = *((_DWORD *)a2 + 20);
  v3 |= 0x8000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 20) = v19;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x400) == 0)
  {
LABEL_27:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v20 = *((_DWORD *)a2 + 15);
  v3 |= 0x400uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 15) = v20;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_28:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v21 = *((_DWORD *)a2 + 42);
  v3 |= 0x2000000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 42) = v21;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x1000) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v22 = *((_DWORD *)a2 + 17);
  v3 |= 0x1000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 17) = v22;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v2 & 0x10) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v23 = *((_DWORD *)a2 + 34);
  v3 |= 0x20000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 34) = v23;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x10) == 0)
  {
LABEL_31:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v24 = *((_DWORD *)a2 + 9);
  v3 |= 0x10uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 9) = v24;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *((_DWORD *)a2 + 39);
  v3 |= 0x400000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 39) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  char v25 = *((unsigned char *)a2 + 178);
  v3 |= 0x20000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 178) = v25;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  LODWORD(v4) = *((_DWORD *)a2 + 40);
  v3 |= 0x800000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 40) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x20) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  char v26 = *((unsigned char *)a2 + 179);
  v3 |= 0x40000000000uLL;
  *((void *)this + 23) = v3;
  *((unsigned char *)this + 179) = v26;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x20) == 0)
  {
LABEL_36:
    if ((v2 & 0x80) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v27 = *((_DWORD *)a2 + 10);
  v3 |= 0x20uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 10) = v27;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x80) == 0)
  {
LABEL_37:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  LODWORD(v4) = *((_DWORD *)a2 + 12);
  v3 |= 0x80uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 12) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  LODWORD(v4) = *((_DWORD *)a2 + 31);
  v3 |= 0x4000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 31) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  LODWORD(v4) = *((_DWORD *)a2 + 32);
  v3 |= 0x8000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 32) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x40) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }
LABEL_83:
  LODWORD(v4) = *((_DWORD *)a2 + 33);
  v3 |= 0x10000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 33) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x40) == 0)
  {
LABEL_41:
    if ((v2 & 0x100) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }
LABEL_84:
  LODWORD(v4) = *((_DWORD *)a2 + 11);
  v3 |= 0x40uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 11) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x100) == 0)
  {
LABEL_42:
    if ((v2 & 0x200) == 0) {
      goto LABEL_43;
    }
    goto LABEL_86;
  }
LABEL_85:
  LODWORD(v4) = *((_DWORD *)a2 + 13);
  v3 |= 0x100uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 13) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x200) == 0)
  {
LABEL_43:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }
LABEL_86:
  LODWORD(v4) = *((_DWORD *)a2 + 14);
  v3 |= 0x200uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 14) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x400000) == 0)
  {
LABEL_44:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_88;
  }
LABEL_87:
  LODWORD(v4) = *((_DWORD *)a2 + 27);
  v3 |= 0x400000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 27) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x800000) == 0)
  {
LABEL_45:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }
LABEL_88:
  LODWORD(v4) = *((_DWORD *)a2 + 28);
  v3 |= 0x800000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 28) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_89:
  LODWORD(v4) = *((_DWORD *)a2 + 29);
  v3 |= 0x1000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 29) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_47:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }
LABEL_90:
  LODWORD(v4) = *((_DWORD *)a2 + 35);
  v3 |= 0x40000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 35) = v4;
  uint64_t v2 = *((void *)a2 + 23);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x100000000) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_92;
  }
LABEL_91:
  LODWORD(v4) = *((_DWORD *)a2 + 36);
  v3 |= 0x80000000uLL;
  *((void *)this + 23) = v3;
  *((_DWORD *)this + 36) = v4;
  if ((*((void *)a2 + 23) & 0x100000000) == 0) {
    return *(float *)&v4;
  }
LABEL_92:
  LODWORD(v4) = *((_DWORD *)a2 + 37);
  *((void *)this + 23) = v3 | (unint64_t)&_mh_execute_header;
  *((_DWORD *)this + 37) = v4;
  return *(float *)&v4;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, const CMMsl::MobilityBoutMetrics *a2)
{
  if (a1 != a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((CMMsl::MobilityBoutMetrics *)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilityBoutMetrics *a2, CMMsl::MobilityBoutMetrics *a3)
{
  uint64_t v3 = *((void *)this + 23);
  *((void *)this + 23) = *((void *)a2 + 23);
  *((void *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v5) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 181);
  *((unsigned char *)this + 181) = *((unsigned char *)a2 + 181);
  *((unsigned char *)a2 + 181) = v3;
  LODWORD(v5) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 177);
  *((unsigned char *)this + 177) = *((unsigned char *)a2 + 177);
  *((unsigned char *)a2 + 177) = v3;
  LODWORD(v5) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v5;
  LOBYTE(v3) = *((unsigned char *)this + 180);
  *((unsigned char *)this + 180) = *((unsigned char *)a2 + 180);
  *((unsigned char *)a2 + 180) = v3;
  LODWORD(v3) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 176);
  *((unsigned char *)this + 176) = *((unsigned char *)a2 + 176);
  *((unsigned char *)a2 + 176) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v3;
  LODWORD(v3) = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  LODWORD(v3) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v3;
  LODWORD(v3) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v3;
  LODWORD(v3) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  LODWORD(v3) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  LODWORD(v6) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 178);
  *((unsigned char *)this + 178) = *((unsigned char *)a2 + 178);
  *((unsigned char *)a2 + 178) = v3;
  LODWORD(v6) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v6;
  LOBYTE(v3) = *((unsigned char *)this + 179);
  *((unsigned char *)this + 179) = *((unsigned char *)a2 + 179);
  *((unsigned char *)a2 + 179) = v3;
  LODWORD(v3) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  LODWORD(v6) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  LODWORD(v6) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v6;
  LODWORD(v6) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v6;
  LODWORD(v6) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v6;
  LODWORD(v6) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v6;
  LODWORD(v6) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v6;
  LODWORD(v6) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v6;
  LODWORD(v6) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  *((_DWORD *)a2 + 28) = v6;
  LODWORD(v6) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v6;
  LODWORD(v6) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v6;
  LODWORD(v6) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v6;
  float result = *((float *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((float *)a2 + 37) = result;
  return result;
}

float CMMsl::MobilityBoutMetrics::MobilityBoutMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7548;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 184) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(unsigned char *)(a1 + 181) = *(unsigned char *)(a2 + 181);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 180) = *(unsigned char *)(a2 + 180);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(unsigned char *)(a1 + 178) = *(unsigned char *)(a2 + 178);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 179) = *(unsigned char *)(a2 + 179);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  float result = *(float *)(a2 + 148);
  *(float *)(a1 + 148) = result;
  return result;
}

CMMsl *CMMsl::MobilityBoutMetrics::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MobilityBoutMetrics::MobilityBoutMetrics((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MobilityBoutMetrics *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MobilityBoutMetrics::formatText(CMMsl::MobilityBoutMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryPercentage", *((float *)this + 8));
    uint64_t v5 = *((void *)this + 23);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "asymmetryPercentageIsValid", *((unsigned char *)this + 176));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "asymmetryPercentageRejectionStatus", *((_DWORD *)this + 9));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "boundaryType", *((_DWORD *)this + 10));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "cycleTimeEntropy", *((float *)this + 11));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "cycleTimeMean", *((float *)this + 12));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD1", *((float *)this + 13));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "cycleTimePoincareSD2", *((float *)this + 14));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "deviceSide", *((_DWORD *)this + 15));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 16));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "doubleSupportPercentageIsValid", *((unsigned char *)this + 177));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "doubleSupportPercentageRejectionStatus", *((_DWORD *)this + 17));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "endTime", *((double *)this + 1));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "invalidGradePercentage", *((double *)this + 2));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "isHeightSet", *((unsigned char *)this + 178));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "isWeightSet", *((unsigned char *)this + 179));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "numGaitMetrics", *((_DWORD *)this + 18));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "rejectionStatus", *((_DWORD *)this + 19));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsCadenceConcordant", *((_DWORD *)this + 20));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsFeasibleWalkingSpeed", *((_DWORD *)this + 21));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsNotRunning", *((_DWORD *)this + 22));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsPendular", *((_DWORD *)this + 23));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSufficientVerticalTwist", *((_DWORD *)this + 24));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "segmentsRejectedByIsSwingStanceCycle", *((_DWORD *)this + 25));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 3));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "stepCount", *((_DWORD *)this + 26));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityAP", *((float *)this + 27));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityML", *((float *)this + 28));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(a2, "stepIndexOfHarmonicityVT", *((float *)this + 29));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(a2, "stepLength", *((float *)this + 30));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(a2, "stepLengthEntropy", *((float *)this + 31));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "stepLengthIsValid", *((unsigned char *)this + 180));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD1", *((float *)this + 32));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(a2, "stepLengthPoincareSD2", *((float *)this + 33));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(a2, "stepLengthRejectionStatus", *((_DWORD *)this + 34));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityAP", *((float *)this + 35));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityML", *((float *)this + 36));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(a2, "swingIndexOfHarmonicityVT", *((float *)this + 37));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(a2, "terminationReason", *((_DWORD *)this + 38));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(a2, "userHeight", *((float *)this + 39));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(a2, "userWeight", *((float *)this + 40));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 41));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(a2, "walkingSpeedIsValid", *((unsigned char *)this + 181));
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(a2, "walkingSpeedRejectionStatus", *((_DWORD *)this + 42));
  if ((*((void *)this + 23) & 0x4000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 43));
LABEL_47:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilityBoutMetrics::readFrom(CMMsl::MobilityBoutMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((void *)this + 23) |= 4uLL;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v20);
          goto LABEL_62;
        case 2u:
          *((void *)this + 23) |= 1uLL;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v22);
          goto LABEL_62;
        case 3u:
          *((void *)this + 23) |= 0x200000uLL;
          unint64_t v23 = *((void *)a2 + 1);
          unint64_t v24 = *((void *)a2 + 2);
          uint64_t v25 = *(void *)a2;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)a2 + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_364;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          char v204 = 0;
          unsigned int v205 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v206 = v23 + 1;
              char v207 = *(unsigned char *)(v25 + v23);
              *((void *)a2 + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                unint64_t v23 = v206;
                BOOL v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_364:
          *((_DWORD *)this + 26) = v28;
          goto LABEL_356;
        case 4u:
          *((void *)this + 23) |= 0x1000000000uLL;
          unint64_t v31 = *((void *)a2 + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v31);
          goto LABEL_354;
        case 5u:
          *((void *)this + 23) |= 0x100000000000uLL;
          unint64_t v32 = *((void *)a2 + 1);
          if (v32 >= *((void *)a2 + 2))
          {
            BOOL v35 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v33 = v32 + 1;
            int v34 = *(unsigned __int8 *)(*(void *)a2 + v32);
            *((void *)a2 + 1) = v33;
            BOOL v35 = v34 != 0;
          }
          *((unsigned char *)this + 181) = v35;
          goto LABEL_356;
        case 6u:
          *((void *)this + 23) |= 0x800uLL;
          unint64_t v36 = *((void *)a2 + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v36);
          goto LABEL_354;
        case 7u:
          *((void *)this + 23) |= 0x10000000000uLL;
          unint64_t v37 = *((void *)a2 + 1);
          if (v37 >= *((void *)a2 + 2))
          {
            BOOL v40 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v38 = v37 + 1;
            int v39 = *(unsigned __int8 *)(*(void *)a2 + v37);
            *((void *)a2 + 1) = v38;
            BOOL v40 = v39 != 0;
          }
          *((unsigned char *)this + 177) = v40;
          goto LABEL_356;
        case 8u:
          *((void *)this + 23) |= 0x2000000uLL;
          unint64_t v41 = *((void *)a2 + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 30) = *(_DWORD *)(*(void *)a2 + v41);
          goto LABEL_354;
        case 9u:
          *((void *)this + 23) |= 0x80000000000uLL;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 >= *((void *)a2 + 2))
          {
            BOOL v45 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v43 = v42 + 1;
            int v44 = *(unsigned __int8 *)(*(void *)a2 + v42);
            *((void *)a2 + 1) = v43;
            BOOL v45 = v44 != 0;
          }
          *((unsigned char *)this + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *((void *)this + 23) |= 0x4000uLL;
          unint64_t v46 = *((void *)a2 + 1);
          unint64_t v47 = *((void *)a2 + 2);
          uint64_t v48 = *(void *)a2;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)a2 + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_368;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v210 = v46 + 1;
              char v211 = *(unsigned char *)(v48 + v46);
              *((void *)a2 + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v46 = v210;
                BOOL v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_241;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v51) = 0;
              }
            }
            break;
          }
LABEL_368:
          *((_DWORD *)this + 19) = v51;
          goto LABEL_356;
        case 0xBu:
          *((void *)this + 23) |= 2uLL;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v54);
LABEL_62:
          uint64_t v55 = *((void *)a2 + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *((void *)this + 23) |= 8uLL;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v56);
          goto LABEL_354;
        case 0xDu:
          *((void *)this + 23) |= 0x8000000000uLL;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 >= *((void *)a2 + 2))
          {
            BOOL v60 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v58 = v57 + 1;
            int v59 = *(unsigned __int8 *)(*(void *)a2 + v57);
            *((void *)a2 + 1) = v58;
            BOOL v60 = v59 != 0;
          }
          *((unsigned char *)this + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *((void *)this + 23) |= 0x2000uLL;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_372;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          char v212 = 0;
          unsigned int v213 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v214 = v61 + 1;
              char v215 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                unint64_t v61 = v214;
                BOOL v14 = v213++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_372:
          *((_DWORD *)this + 18) = v66;
          goto LABEL_356;
        case 0xFu:
          *((void *)this + 23) |= 0x200000000uLL;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_376;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v218 = v69 + 1;
              char v219 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v69 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_376:
          *((_DWORD *)this + 38) = v74;
          goto LABEL_356;
        case 0x10u:
          *((void *)this + 23) |= 0x4000000000uLL;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_380;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          char v220 = 0;
          unsigned int v221 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v222 = v77 + 1;
              char v223 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                unint64_t v77 = v222;
                BOOL v14 = v221++ > 8;
                if (v14) {
                  goto LABEL_264;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_380:
          *((_DWORD *)this + 43) = v82;
          goto LABEL_356;
        case 0x11u:
          *((void *)this + 23) |= 0x100000uLL;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_384;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v226 = v85 + 1;
              char v227 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v85 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_384:
          *((_DWORD *)this + 25) = v90;
          goto LABEL_356;
        case 0x12u:
          *((void *)this + 23) |= 0x20000uLL;
          unint64_t v93 = *((void *)a2 + 1);
          unint64_t v94 = *((void *)a2 + 2);
          uint64_t v95 = *(void *)a2;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)a2 + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_388;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v230 = v93 + 1;
              char v231 = *(unsigned char *)(v95 + v93);
              *((void *)a2 + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                unint64_t v93 = v230;
                BOOL v14 = v229++ > 8;
                if (v14) {
                  goto LABEL_278;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_388:
          *((_DWORD *)this + 22) = v98;
          goto LABEL_356;
        case 0x13u:
          *((void *)this + 23) |= 0x10000uLL;
          unint64_t v101 = *((void *)a2 + 1);
          unint64_t v102 = *((void *)a2 + 2);
          uint64_t v103 = *(void *)a2;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)a2 + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_392;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          char v232 = 0;
          unsigned int v233 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v234 = v101 + 1;
              char v235 = *(unsigned char *)(v103 + v101);
              *((void *)a2 + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unint64_t v101 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_285;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_392:
          *((_DWORD *)this + 21) = v106;
          goto LABEL_356;
        case 0x14u:
          *((void *)this + 23) |= 0x40000uLL;
          unint64_t v109 = *((void *)a2 + 1);
          unint64_t v110 = *((void *)a2 + 2);
          uint64_t v111 = *(void *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)a2 + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_396;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          char v236 = 0;
          unsigned int v237 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v238 = v109 + 1;
              char v239 = *(unsigned char *)(v111 + v109);
              *((void *)a2 + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unint64_t v109 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_292;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_396:
          *((_DWORD *)this + 23) = v114;
          goto LABEL_356;
        case 0x15u:
          *((void *)this + 23) |= 0x80000uLL;
          unint64_t v117 = *((void *)a2 + 1);
          unint64_t v118 = *((void *)a2 + 2);
          uint64_t v119 = *(void *)a2;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)a2 + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_400;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          char v240 = 0;
          unsigned int v241 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v242 = v117 + 1;
              char v243 = *(unsigned char *)(v119 + v117);
              *((void *)a2 + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unint64_t v117 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_400:
          *((_DWORD *)this + 24) = v122;
          goto LABEL_356;
        case 0x16u:
          *((void *)this + 23) |= 0x8000uLL;
          unint64_t v125 = *((void *)a2 + 1);
          unint64_t v126 = *((void *)a2 + 2);
          uint64_t v127 = *(void *)a2;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)a2 + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_404;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          char v244 = 0;
          unsigned int v245 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v246 = v125 + 1;
              char v247 = *(unsigned char *)(v127 + v125);
              *((void *)a2 + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v125 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_404:
          *((_DWORD *)this + 20) = v130;
          goto LABEL_356;
        case 0x17u:
          *((void *)this + 23) |= 0x400uLL;
          unint64_t v133 = *((void *)a2 + 1);
          unint64_t v134 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)a2 + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_408;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          char v248 = 0;
          unsigned int v249 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v250 = v133 + 1;
              char v251 = *(unsigned char *)(v135 + v133);
              *((void *)a2 + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v133 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_408:
          *((_DWORD *)this + 15) = v138;
          goto LABEL_356;
        case 0x18u:
          *((void *)this + 23) |= 0x2000000000uLL;
          unint64_t v141 = *((void *)a2 + 1);
          unint64_t v142 = *((void *)a2 + 2);
          uint64_t v143 = *(void *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)a2 + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_412;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          char v252 = 0;
          unsigned int v253 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v254 = v141 + 1;
              char v255 = *(unsigned char *)(v143 + v141);
              *((void *)a2 + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v141 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_412:
          *((_DWORD *)this + 42) = v146;
          goto LABEL_356;
        case 0x19u:
          *((void *)this + 23) |= 0x1000uLL;
          unint64_t v149 = *((void *)a2 + 1);
          unint64_t v150 = *((void *)a2 + 2);
          uint64_t v151 = *(void *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)a2 + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_416;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          char v256 = 0;
          unsigned int v257 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v258 = v149 + 1;
              char v259 = *(unsigned char *)(v151 + v149);
              *((void *)a2 + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v149 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_416:
          *((_DWORD *)this + 17) = v154;
          goto LABEL_356;
        case 0x1Au:
          *((void *)this + 23) |= 0x20000000uLL;
          unint64_t v157 = *((void *)a2 + 1);
          unint64_t v158 = *((void *)a2 + 2);
          uint64_t v159 = *(void *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)a2 + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_420;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          char v260 = 0;
          unsigned int v261 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v262 = v157 + 1;
              char v263 = *(unsigned char *)(v159 + v157);
              *((void *)a2 + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v157 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_420:
          *((_DWORD *)this + 34) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *((void *)this + 23) |= 0x10uLL;
          unint64_t v165 = *((void *)a2 + 1);
          unint64_t v166 = *((void *)a2 + 2);
          uint64_t v167 = *(void *)a2;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            char v168 = 0;
            unsigned int v169 = 0;
            uint64_t v170 = 0;
            do
            {
              unint64_t v171 = v165 + 1;
              *((void *)a2 + 1) = v165 + 1;
              char v172 = *(unsigned char *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0) {
                goto LABEL_424;
              }
              v168 += 7;
              unint64_t v165 = v171;
              BOOL v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          char v264 = 0;
          unsigned int v265 = 0;
          uint64_t v170 = 0;
          if (v166 <= v165) {
            unint64_t v166 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v266 = v165 + 1;
              char v267 = *(unsigned char *)(v167 + v165);
              *((void *)a2 + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v165 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v170) = 0;
              }
            }
            break;
          }
LABEL_424:
          *((_DWORD *)this + 9) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *((void *)this + 23) |= 0x400000000uLL;
          unint64_t v173 = *((void *)a2 + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v173);
          goto LABEL_354;
        case 0x1Du:
          *((void *)this + 23) |= 0x20000000000uLL;
          unint64_t v174 = *((void *)a2 + 1);
          if (v174 >= *((void *)a2 + 2))
          {
            BOOL v177 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v175 = v174 + 1;
            int v176 = *(unsigned __int8 *)(*(void *)a2 + v174);
            *((void *)a2 + 1) = v175;
            BOOL v177 = v176 != 0;
          }
          *((unsigned char *)this + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *((void *)this + 23) |= 0x800000000uLL;
          unint64_t v178 = *((void *)a2 + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 40) = *(_DWORD *)(*(void *)a2 + v178);
          goto LABEL_354;
        case 0x1Fu:
          *((void *)this + 23) |= 0x40000000000uLL;
          unint64_t v179 = *((void *)a2 + 1);
          if (v179 >= *((void *)a2 + 2))
          {
            BOOL v182 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v180 = v179 + 1;
            int v181 = *(unsigned __int8 *)(*(void *)a2 + v179);
            *((void *)a2 + 1) = v180;
            BOOL v182 = v181 != 0;
          }
          *((unsigned char *)this + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *((void *)this + 23) |= 0x20uLL;
          unint64_t v183 = *((void *)a2 + 1);
          unint64_t v184 = *((void *)a2 + 2);
          uint64_t v185 = *(void *)a2;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)a2 + 1) = v183 + 1;
              char v190 = *(unsigned char *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_428;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          char v268 = 0;
          unsigned int v269 = 0;
          uint64_t v188 = 0;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)a2 + 1);
          }
          break;
        case 0x21u:
          *((void *)this + 23) |= 0x80uLL;
          unint64_t v191 = *((void *)a2 + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v191);
          goto LABEL_354;
        case 0x22u:
          *((void *)this + 23) |= 0x4000000uLL;
          unint64_t v192 = *((void *)a2 + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v192);
          goto LABEL_354;
        case 0x23u:
          *((void *)this + 23) |= 0x8000000uLL;
          unint64_t v193 = *((void *)a2 + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v193);
          goto LABEL_354;
        case 0x24u:
          *((void *)this + 23) |= 0x10000000uLL;
          unint64_t v194 = *((void *)a2 + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v194);
          goto LABEL_354;
        case 0x25u:
          *((void *)this + 23) |= 0x40uLL;
          unint64_t v195 = *((void *)a2 + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v195);
          goto LABEL_354;
        case 0x26u:
          *((void *)this + 23) |= 0x100uLL;
          unint64_t v196 = *((void *)a2 + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v196);
          goto LABEL_354;
        case 0x27u:
          *((void *)this + 23) |= 0x200uLL;
          unint64_t v197 = *((void *)a2 + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v197);
          goto LABEL_354;
        case 0x28u:
          *((void *)this + 23) |= 0x400000uLL;
          unint64_t v198 = *((void *)a2 + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 27) = *(_DWORD *)(*(void *)a2 + v198);
          goto LABEL_354;
        case 0x29u:
          *((void *)this + 23) |= 0x800000uLL;
          unint64_t v199 = *((void *)a2 + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 28) = *(_DWORD *)(*(void *)a2 + v199);
          goto LABEL_354;
        case 0x2Au:
          *((void *)this + 23) |= 0x1000000uLL;
          unint64_t v200 = *((void *)a2 + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 29) = *(_DWORD *)(*(void *)a2 + v200);
          goto LABEL_354;
        case 0x2Bu:
          *((void *)this + 23) |= 0x40000000uLL;
          unint64_t v201 = *((void *)a2 + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v201);
          goto LABEL_354;
        case 0x2Cu:
          *((void *)this + 23) |= 0x80000000uLL;
          unint64_t v202 = *((void *)a2 + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((void *)a2 + 2)) {
            goto LABEL_221;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v202);
          goto LABEL_354;
        case 0x2Du:
          *((void *)this + 23) |= (unint64_t)&_mh_execute_header;
          unint64_t v203 = *((void *)a2 + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v203);
LABEL_354:
            uint64_t v55 = *((void *)a2 + 1) + 4;
LABEL_355:
            *((void *)a2 + 1) = v55;
          }
          else
          {
LABEL_221:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_356;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_428;
        }
        unint64_t v270 = v183 + 1;
        char v271 = *(unsigned char *)(v185 + v183);
        *((void *)a2 + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0) {
          break;
        }
        v268 += 7;
        unint64_t v183 = v270;
        BOOL v14 = v269++ > 8;
        if (v14) {
          goto LABEL_352;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v188) = 0;
      }
LABEL_428:
      *((_DWORD *)this + 10) = v188;
LABEL_356:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MobilityBoutMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 184);
  if ((v4 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 24), 1u);
    uint64_t v4 = *(void *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 2u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 3u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 4u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 181), 5u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 6u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 177), 7u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::write(a2, *(float *)(v3 + 120), 8u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 180), 9u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xAu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xCu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 176), 0xDu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xEu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0xFu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0x10u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x11u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0x12u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0x13u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0x14u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x15u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0x16u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 0x17u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 168), 0x18u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0x19u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 36), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 178), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::write(a2, *(float *)(v3 + 160), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 179), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 40), 0x20u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x21u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x22u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x23u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x24u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0x25u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x26u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x27u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  this = PB::Writer::write(a2, *(float *)(v3 + 108), 0x28u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  this = PB::Writer::write(a2, *(float *)(v3 + 112), 0x29u);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  this = PB::Writer::write(a2, *(float *)(v3 + 116), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x2Cu);
    if ((*(void *)(v3 + 184) & 0x100000000) == 0) {
      return this;
    }
    goto LABEL_91;
  }
LABEL_89:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v4 & 0x100000000) == 0) {
    return this;
  }
LABEL_91:
  float v5 = *(float *)(v3 + 148);

  return PB::Writer::write(a2, v5, 0x2Du);
}

uint64_t CMMsl::MobilityBoutMetrics::hash_value(CMMsl::MobilityBoutMetrics *this)
{
  uint64_t v1 = *((void *)this + 23);
  if ((v1 & 4) == 0)
  {
    uint64_t v2 = 0;
    if (v1) {
      goto LABEL_3;
    }
LABEL_93:
    double v72 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_94;
  }
  if (*((double *)this + 3) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 3);
  }
  if ((v1 & 1) == 0) {
    goto LABEL_93;
  }
LABEL_3:
  double v3 = *((double *)this + 1);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v72 = v3;
  if ((v1 & 0x200000) != 0)
  {
LABEL_6:
    uint64_t v71 = *((unsigned int *)this + 26);
    if ((v1 & 0x1000000000) != 0) {
      goto LABEL_7;
    }
LABEL_95:
    uint64_t v70 = 0;
    if ((v1 & 0x100000000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_96;
  }
LABEL_94:
  uint64_t v71 = 0;
  if ((v1 & 0x1000000000) == 0) {
    goto LABEL_95;
  }
LABEL_7:
  float v4 = *((float *)this + 41);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  uint64_t v70 = v5;
  if ((v1 & 0x100000000000) != 0)
  {
LABEL_10:
    uint64_t v69 = *((unsigned __int8 *)this + 181);
    if ((v1 & 0x800) != 0) {
      goto LABEL_11;
    }
LABEL_97:
    uint64_t v68 = 0;
    if ((v1 & 0x10000000000) != 0) {
      goto LABEL_14;
    }
    goto LABEL_98;
  }
LABEL_96:
  uint64_t v69 = 0;
  if ((v1 & 0x800) == 0) {
    goto LABEL_97;
  }
LABEL_11:
  float v6 = *((float *)this + 16);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  uint64_t v68 = v7;
  if ((v1 & 0x10000000000) != 0)
  {
LABEL_14:
    uint64_t v67 = *((unsigned __int8 *)this + 177);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_15;
    }
LABEL_99:
    uint64_t v66 = 0;
    if ((v1 & 0x80000000000) != 0) {
      goto LABEL_18;
    }
    goto LABEL_100;
  }
LABEL_98:
  uint64_t v67 = 0;
  if ((v1 & 0x2000000) == 0) {
    goto LABEL_99;
  }
LABEL_15:
  float v8 = *((float *)this + 30);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  uint64_t v66 = v9;
  if ((v1 & 0x80000000000) != 0)
  {
LABEL_18:
    uint64_t v65 = *((unsigned __int8 *)this + 180);
    if ((v1 & 0x4000) != 0) {
      goto LABEL_19;
    }
    goto LABEL_101;
  }
LABEL_100:
  uint64_t v65 = 0;
  if ((v1 & 0x4000) != 0)
  {
LABEL_19:
    uint64_t v64 = *((unsigned int *)this + 19);
    if ((v1 & 2) != 0) {
      goto LABEL_20;
    }
LABEL_102:
    double v63 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_23;
    }
LABEL_103:
    uint64_t v62 = 0;
    if ((v1 & 0x8000000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_104;
  }
LABEL_101:
  uint64_t v64 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_102;
  }
LABEL_20:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  double v63 = v10;
  if ((v1 & 8) == 0) {
    goto LABEL_103;
  }
LABEL_23:
  float v11 = *((float *)this + 8);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  uint64_t v62 = v12;
  if ((v1 & 0x8000000000) != 0)
  {
LABEL_26:
    uint64_t v61 = *((unsigned __int8 *)this + 176);
    if ((v1 & 0x2000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v61 = 0;
  if ((v1 & 0x2000) != 0)
  {
LABEL_27:
    uint64_t v60 = *((unsigned int *)this + 18);
    if ((v1 & 0x200000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_106;
  }
LABEL_105:
  uint64_t v60 = 0;
  if ((v1 & 0x200000000) != 0)
  {
LABEL_28:
    uint64_t v59 = *((unsigned int *)this + 38);
    if ((v1 & 0x4000000000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_107;
  }
LABEL_106:
  uint64_t v59 = 0;
  if ((v1 & 0x4000000000) != 0)
  {
LABEL_29:
    uint64_t v58 = *((unsigned int *)this + 43);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_30;
    }
    goto LABEL_108;
  }
LABEL_107:
  uint64_t v58 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_30:
    uint64_t v57 = *((unsigned int *)this + 25);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_31;
    }
    goto LABEL_109;
  }
LABEL_108:
  uint64_t v57 = 0;
  if ((v1 & 0x20000) != 0)
  {
LABEL_31:
    uint64_t v56 = *((unsigned int *)this + 22);
    if ((v1 & 0x10000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_110;
  }
LABEL_109:
  uint64_t v56 = 0;
  if ((v1 & 0x10000) != 0)
  {
LABEL_32:
    uint64_t v55 = *((unsigned int *)this + 21);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_33;
    }
    goto LABEL_111;
  }
LABEL_110:
  uint64_t v55 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_33:
    uint64_t v13 = *((unsigned int *)this + 23);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_112;
  }
LABEL_111:
  uint64_t v13 = 0;
  if ((v1 & 0x80000) != 0)
  {
LABEL_34:
    uint64_t v14 = *((unsigned int *)this + 24);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_113;
  }
LABEL_112:
  uint64_t v14 = 0;
  if ((v1 & 0x8000) != 0)
  {
LABEL_35:
    uint64_t v15 = *((unsigned int *)this + 20);
    if ((v1 & 0x400) != 0) {
      goto LABEL_36;
    }
    goto LABEL_114;
  }
LABEL_113:
  uint64_t v15 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_36:
    uint64_t v16 = *((unsigned int *)this + 15);
    if ((v1 & 0x2000000000) != 0) {
      goto LABEL_37;
    }
    goto LABEL_115;
  }
LABEL_114:
  uint64_t v16 = 0;
  if ((v1 & 0x2000000000) != 0)
  {
LABEL_37:
    uint64_t v17 = *((unsigned int *)this + 42);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_116;
  }
LABEL_115:
  uint64_t v17 = 0;
  if ((v1 & 0x1000) != 0)
  {
LABEL_38:
    uint64_t v18 = *((unsigned int *)this + 17);
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_117;
  }
LABEL_116:
  uint64_t v18 = 0;
  if ((v1 & 0x20000000) != 0)
  {
LABEL_39:
    uint64_t v19 = *((unsigned int *)this + 34);
    if ((v1 & 0x10) != 0) {
      goto LABEL_40;
    }
    goto LABEL_118;
  }
LABEL_117:
  uint64_t v19 = 0;
  if ((v1 & 0x10) != 0)
  {
LABEL_40:
    uint64_t v20 = *((unsigned int *)this + 9);
    if ((v1 & 0x400000000) != 0) {
      goto LABEL_41;
    }
LABEL_119:
    uint64_t v22 = 0;
    if ((v1 & 0x20000000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_120;
  }
LABEL_118:
  uint64_t v20 = 0;
  if ((v1 & 0x400000000) == 0) {
    goto LABEL_119;
  }
LABEL_41:
  float v21 = *((float *)this + 39);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 0x20000000000) != 0)
  {
LABEL_44:
    uint64_t v23 = *((unsigned __int8 *)this + 178);
    if ((v1 & 0x800000000) != 0) {
      goto LABEL_45;
    }
LABEL_121:
    uint64_t v25 = 0;
    if ((v1 & 0x40000000000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_122;
  }
LABEL_120:
  uint64_t v23 = 0;
  if ((v1 & 0x800000000) == 0) {
    goto LABEL_121;
  }
LABEL_45:
  float v24 = *((float *)this + 40);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x40000000000) != 0)
  {
LABEL_48:
    uint64_t v26 = *((unsigned __int8 *)this + 179);
    if ((v1 & 0x20) != 0) {
      goto LABEL_49;
    }
    goto LABEL_123;
  }
LABEL_122:
  uint64_t v26 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_49:
    uint64_t v27 = *((unsigned int *)this + 10);
    if ((v1 & 0x80) != 0) {
      goto LABEL_50;
    }
LABEL_124:
    uint64_t v29 = 0;
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_53;
    }
LABEL_125:
    uint64_t v31 = 0;
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_56;
    }
LABEL_126:
    uint64_t v33 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_59;
    }
LABEL_127:
    uint64_t v35 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_62;
    }
LABEL_128:
    uint64_t v37 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_65;
    }
LABEL_129:
    uint64_t v39 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_68;
    }
LABEL_130:
    uint64_t v41 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_71;
    }
LABEL_131:
    uint64_t v43 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_74;
    }
LABEL_132:
    uint64_t v45 = 0;
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_77;
    }
LABEL_133:
    uint64_t v47 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_80;
    }
LABEL_134:
    uint64_t v49 = 0;
    if ((v1 & 0x80000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_135;
  }
LABEL_123:
  uint64_t v27 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_124;
  }
LABEL_50:
  float v28 = *((float *)this + 12);
  uint64_t v29 = LODWORD(v28);
  if (v28 == 0.0) {
    uint64_t v29 = 0;
  }
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_125;
  }
LABEL_53:
  float v30 = *((float *)this + 31);
  uint64_t v31 = LODWORD(v30);
  if (v30 == 0.0) {
    uint64_t v31 = 0;
  }
  if ((v1 & 0x8000000) == 0) {
    goto LABEL_126;
  }
LABEL_56:
  float v32 = *((float *)this + 32);
  uint64_t v33 = LODWORD(v32);
  if (v32 == 0.0) {
    uint64_t v33 = 0;
  }
  if ((v1 & 0x10000000) == 0) {
    goto LABEL_127;
  }
LABEL_59:
  float v34 = *((float *)this + 33);
  uint64_t v35 = LODWORD(v34);
  if (v34 == 0.0) {
    uint64_t v35 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_128;
  }
LABEL_62:
  float v36 = *((float *)this + 11);
  uint64_t v37 = LODWORD(v36);
  if (v36 == 0.0) {
    uint64_t v37 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_129;
  }
LABEL_65:
  float v38 = *((float *)this + 13);
  uint64_t v39 = LODWORD(v38);
  if (v38 == 0.0) {
    uint64_t v39 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_130;
  }
LABEL_68:
  float v40 = *((float *)this + 14);
  uint64_t v41 = LODWORD(v40);
  if (v40 == 0.0) {
    uint64_t v41 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_131;
  }
LABEL_71:
  float v42 = *((float *)this + 27);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_132;
  }
LABEL_74:
  float v44 = *((float *)this + 28);
  uint64_t v45 = LODWORD(v44);
  if (v44 == 0.0) {
    uint64_t v45 = 0;
  }
  if ((v1 & 0x1000000) == 0) {
    goto LABEL_133;
  }
LABEL_77:
  float v46 = *((float *)this + 29);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v1 & 0x40000000) == 0) {
    goto LABEL_134;
  }
LABEL_80:
  float v48 = *((float *)this + 35);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v1 & 0x80000000) != 0)
  {
LABEL_83:
    float v50 = *((float *)this + 36);
    uint64_t v51 = LODWORD(v50);
    if (v50 == 0.0) {
      uint64_t v51 = 0;
    }
    if ((v1 & 0x100000000) != 0) {
      goto LABEL_86;
    }
LABEL_136:
    uint64_t v53 = 0;
    return *(void *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(void *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
  }
LABEL_135:
  uint64_t v51 = 0;
  if ((v1 & 0x100000000) == 0) {
    goto LABEL_136;
  }
LABEL_86:
  float v52 = *((float *)this + 37);
  uint64_t v53 = LODWORD(v52);
  if (v52 == 0.0) {
    uint64_t v53 = 0;
  }
  return *(void *)&v72 ^ v2 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ *(void *)&v63 ^ v62 ^ v61 ^ v60 ^ v59 ^ v58 ^ v57 ^ v56 ^ v55 ^ v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v22 ^ v23 ^ v25 ^ v26 ^ v27 ^ v29 ^ v31 ^ v33 ^ v35 ^ v37 ^ v39 ^ v41 ^ v43 ^ v45 ^ v47 ^ v49 ^ v51 ^ v53;
}

void CMMsl::MobilitySmoothedGaitMetrics::~MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(CMMsl::MobilitySmoothedGaitMetrics *this, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  *(void *)this = off_1003A7580;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 0x40) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 8);
    v3 |= 0x20u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  v3 |= 8u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 6) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((unsigned char *)a2 + 40) & 2) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  *((unsigned char *)this + 40) = v3 | 2;
  *((_DWORD *)this + 4) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, const CMMsl::MobilitySmoothedGaitMetrics *a2)
{
  if ((const CMMsl::MobilitySmoothedGaitMetrics *)a1 != a2)
  {
    CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics((CMMsl::MobilitySmoothedGaitMetrics *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MobilitySmoothedGaitMetrics *a2, CMMsl::MobilitySmoothedGaitMetrics *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::MobilitySmoothedGaitMetrics::MobilitySmoothedGaitMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7580;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7580;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A7580;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::formatText(CMMsl::MobilitySmoothedGaitMetrics *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "asymmetryProbability", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "cycleTime", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "distance", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "doubleSupportPercentage", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "stepLength", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "walkingSpeed", *((float *)this + 9));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::readFrom(CMMsl::MobilitySmoothedGaitMetrics *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((unsigned char *)this + 40) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((unsigned char *)this + 40) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((unsigned char *)this + 40) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_46:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_47:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::MobilitySmoothedGaitMetrics::hash_value(CMMsl::MobilitySmoothedGaitMetrics *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 9);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 8);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 6);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 5);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 7);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 4);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A75B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification(this);

  operator delete();
}

void *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(void *this, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  *this = off_1003A75B8;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::ModelBasedBioMotionClassification *CMMsl::ModelBasedBioMotionClassification::operator=(const CMMsl::ModelBasedBioMotionClassification *a1, const CMMsl::ModelBasedBioMotionClassification *a2)
{
  if (a1 != a2)
  {
    CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification((CMMsl::ModelBasedBioMotionClassification *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::ModelBasedBioMotionClassification *a2, CMMsl::ModelBasedBioMotionClassification *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::ModelBasedBioMotionClassification::ModelBasedBioMotionClassification(void *a1, uint64_t a2)
{
  *a1 = off_1003A75B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A75B8;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A75B8;
    v6[1] = v4;
    CMMsl::ModelBasedBioMotionClassification::~ModelBasedBioMotionClassification((CMMsl::ModelBasedBioMotionClassification *)v6);
  }
  return a1;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::formatText(CMMsl::ModelBasedBioMotionClassification *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::ModelBasedBioMotionClassification::readFrom(CMMsl::ModelBasedBioMotionClassification *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::BioMotionClassification *CMMsl::ModelBasedBioMotionClassification::hash_value(CMMsl::ModelBasedBioMotionClassification *this)
{
  uint64_t result = (CMMsl::BioMotionClassification *)*((void *)this + 1);
  if (result) {
    return (CMMsl::BioMotionClassification *)CMMsl::BioMotionClassification::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::ModelBasedBioMotionClassification::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionActivity::~MotionActivity(CMMsl::MotionActivity *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionActivity::MotionActivity(uint64_t this, const CMMsl::MotionActivity *a2)
{
  *(void *)this = off_1003A75F0;
  *(_DWORD *)(this + 116) = 0;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 23);
    int v3 = 0x10000;
    *(_DWORD *)(this + 116) = 0x10000;
    *(_DWORD *)(this + 92) = v4;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x200) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 16);
    v3 |= 0x200u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 64) = v5;
    int v2 = *((_DWORD *)a2 + 29);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_DWORD *)(this + 116) = v3;
    *(_DWORD *)(this + 48) = v6;
    int v2 = *((_DWORD *)a2 + 29);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x100000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_34;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 17);
  v3 |= 0x400u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 68) = v7;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100000) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  char v8 = *((unsigned char *)a2 + 108);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 108) = v8;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x8000) == 0)
  {
LABEL_10:
    if ((v2 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v9 = *((_DWORD *)a2 + 22);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 88) = v9;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 4) == 0)
  {
LABEL_11:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v10 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 24) = v10;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x200000) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  char v11 = *((unsigned char *)a2 + 109);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 109) = v11;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 60) = v12;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v13 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 8) = v13;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 2) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v14 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 16) = v14;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v15 = *((_DWORD *)a2 + 19);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 76) = v15;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v16 = *((_DWORD *)a2 + 18);
  v3 |= 0x800u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 72) = v16;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v17 = *((unsigned char *)a2 + 113);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 113) = v17;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v18 = *((unsigned char *)a2 + 112);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 112) = v18;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v19 = *((unsigned char *)a2 + 110);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 110) = v19;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  char v20 = *((unsigned char *)a2 + 114);
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 114) = v20;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x800000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v21 = *((unsigned char *)a2 + 111);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 116) = v3;
  *(unsigned char *)(this + 111) = v21;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v22 = *((_DWORD *)a2 + 25);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 100) = v22;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80) == 0)
  {
LABEL_24:
    if ((v2 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v23 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 56) = v23;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x40) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v24 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 52) = v24;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x4000) == 0)
  {
LABEL_26:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v25 = *((_DWORD *)a2 + 21);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 84) = v25;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x80000) == 0)
  {
LABEL_27:
    if ((v2 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v26 = *((_DWORD *)a2 + 26);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 104) = v26;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 8) == 0)
  {
LABEL_28:
    if ((v2 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v27 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 32) = v27;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x10) == 0)
  {
LABEL_29:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v28 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 116) = v3;
  *(void *)(this + 40) = v28;
  int v2 = *((_DWORD *)a2 + 29);
  if ((v2 & 0x20000) == 0)
  {
LABEL_30:
    if ((v2 & 0x2000) == 0) {
      return this;
    }
LABEL_56:
    int v30 = *((_DWORD *)a2 + 20);
    *(_DWORD *)(this + 116) = v3 | 0x2000;
    *(_DWORD *)(this + 80) = v30;
    return this;
  }
LABEL_55:
  int v29 = *((_DWORD *)a2 + 24);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 116) = v3;
  *(_DWORD *)(this + 96) = v29;
  if ((*((_DWORD *)a2 + 29) & 0x2000) != 0) {
    goto LABEL_56;
  }
  return this;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, const CMMsl::MotionActivity *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivity *a2, CMMsl::MotionActivity *a3)
{
  int v3 = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v3;
  int v4 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  int v5 = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v5;
  int v6 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v6;
  int v7 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LOBYTE(v7) = *((unsigned char *)this + 108);
  *((unsigned char *)this + 108) = *((unsigned char *)a2 + 108);
  *((unsigned char *)a2 + 108) = v7;
  int v8 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v8;
  uint64_t v9 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v9;
  LOBYTE(v7) = *((unsigned char *)this + 109);
  *((unsigned char *)this + 109) = *((unsigned char *)a2 + 109);
  *((unsigned char *)a2 + 109) = v7;
  int v10 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v10;
  uint64_t v11 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v11;
  uint64_t v12 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v12;
  int v13 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v13;
  int v14 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 113);
  *((unsigned char *)this + 113) = *((unsigned char *)a2 + 113);
  *((unsigned char *)a2 + 113) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 112);
  *((unsigned char *)this + 112) = *((unsigned char *)a2 + 112);
  *((unsigned char *)a2 + 112) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 110);
  *((unsigned char *)this + 110) = *((unsigned char *)a2 + 110);
  *((unsigned char *)a2 + 110) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 114);
  *((unsigned char *)this + 114) = *((unsigned char *)a2 + 114);
  *((unsigned char *)a2 + 114) = v14;
  LOBYTE(v14) = *((unsigned char *)this + 111);
  *((unsigned char *)this + 111) = *((unsigned char *)a2 + 111);
  *((unsigned char *)a2 + 111) = v14;
  int v15 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v15;
  LODWORD(v12) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v12;
  LODWORD(v12) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v12;
  LODWORD(v12) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v12;
  int v16 = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v16;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v18 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v18;
  LODWORD(v18) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v18;
  LODWORD(v18) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v18;
  return result;
}

double CMMsl::MotionActivity::MotionActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A75F0;
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 110) = *(unsigned char *)(a2 + 110);
  *(unsigned char *)(a1 + 114) = *(unsigned char *)(a2 + 114);
  *(unsigned char *)(a1 + 111) = *(unsigned char *)(a2 + 111);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return result;
}

CMMsl *CMMsl::MotionActivity::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionActivity::MotionActivity((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionActivity *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionActivity::formatText(CMMsl::MotionActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 12));
    int v5 = *((_DWORD *)this + 29);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "estExitTime", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "exitState", *((_DWORD *)this + 15));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "isStanding", *((unsigned char *)this + 108));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "isVehicleConnected", *((unsigned char *)this + 109));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "mountedConfidence", *((_DWORD *)this + 16));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "mountedState", *((_DWORD *)this + 17));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "rawConfidence", *((_DWORD *)this + 18));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "rawType", *((_DWORD *)this + 19));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "source", *((_DWORD *)this + 20));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "tilt", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 23));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "typeYouth", *((_DWORD *)this + 24));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "vehicularBasebandHint", *((unsigned char *)this + 110));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "vehicularBtHint", *((unsigned char *)this + 111));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "vehicularConfidence", *((_DWORD *)this + 25));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "vehicularGpsHint", *((unsigned char *)this + 112));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "vehicularMotionHint", *((unsigned char *)this + 113));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "vehicularWifiHint", *((unsigned char *)this + 114));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 29);
  if ((v5 & 0x80000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "workoutDetectionType", *((_DWORD *)this + 26));
  if ((*((_DWORD *)this + 29) & 0x10) != 0) {
LABEL_28:
  }
    PB::TextFormatter::format(a2, "workoutEscalationTime", *((void *)this + 5));
LABEL_29:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivity::readFrom(CMMsl::MotionActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 29) |= 0x10000u;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v154 = 0;
            unsigned int v155 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)a2 + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)a2 + 24) = 1;
                goto LABEL_251;
              }
              unint64_t v156 = v20 + 1;
              char v157 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_251;
              }
              v154 += 7;
              unint64_t v20 = v156;
              BOOL v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_153;
              }
            }
          }
LABEL_251:
          *((_DWORD *)this + 23) = v25;
          goto LABEL_296;
        case 2u:
          *((_DWORD *)this + 29) |= 0x200u;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_255;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          char v158 = 0;
          unsigned int v159 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v160 = v29 + 1;
              char v161 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                unint64_t v29 = v160;
                BOOL v14 = v159++ > 8;
                if (v14) {
                  goto LABEL_160;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_255:
          *((_DWORD *)this + 16) = v34;
          goto LABEL_296;
        case 3u:
          *((_DWORD *)this + 29) |= 0x20u;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_259;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          char v162 = 0;
          unsigned int v163 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v164 = v37 + 1;
              char v165 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                unint64_t v37 = v164;
                BOOL v14 = v163++ > 8;
                if (v14) {
                  goto LABEL_167;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_259:
          *((_DWORD *)this + 12) = v42;
          goto LABEL_296;
        case 4u:
          *((_DWORD *)this + 29) |= 0x400u;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_263;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          char v166 = 0;
          unsigned int v167 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v168 = v45 + 1;
              char v169 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                unint64_t v45 = v168;
                BOOL v14 = v167++ > 8;
                if (v14) {
                  goto LABEL_174;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_263:
          *((_DWORD *)this + 17) = v50;
          goto LABEL_296;
        case 5u:
          *((_DWORD *)this + 29) |= 0x100000u;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 >= *((void *)a2 + 2))
          {
            BOOL v56 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v54 = v53 + 1;
            int v55 = *(unsigned __int8 *)(*(void *)a2 + v53);
            *((void *)a2 + 1) = v54;
            BOOL v56 = v55 != 0;
          }
          *((unsigned char *)this + 108) = v56;
          goto LABEL_296;
        case 6u:
          *((_DWORD *)this + 29) |= 0x8000u;
          unint64_t v57 = *((void *)a2 + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v57);
          goto LABEL_115;
        case 7u:
          *((_DWORD *)this + 29) |= 4u;
          unint64_t v58 = *((void *)a2 + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v58);
          goto LABEL_246;
        case 8u:
          *((_DWORD *)this + 29) |= 0x200000u;
          unint64_t v59 = *((void *)a2 + 1);
          if (v59 >= *((void *)a2 + 2))
          {
            BOOL v62 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v60 = v59 + 1;
            int v61 = *(unsigned __int8 *)(*(void *)a2 + v59);
            *((void *)a2 + 1) = v60;
            BOOL v62 = v61 != 0;
          }
          *((unsigned char *)this + 109) = v62;
          goto LABEL_296;
        case 9u:
          *((_DWORD *)this + 29) |= 0x100u;
          unint64_t v63 = *((void *)a2 + 1);
          unint64_t v64 = *((void *)a2 + 2);
          uint64_t v65 = *(void *)a2;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v68 = 0;
            do
            {
              unint64_t v69 = v63 + 1;
              *((void *)a2 + 1) = v63 + 1;
              char v70 = *(unsigned char *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0) {
                goto LABEL_267;
              }
              v66 += 7;
              unint64_t v63 = v69;
              BOOL v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          char v170 = 0;
          unsigned int v171 = 0;
          uint64_t v68 = 0;
          if (v64 <= v63) {
            unint64_t v64 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v172 = v63 + 1;
              char v173 = *(unsigned char *)(v65 + v63);
              *((void *)a2 + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                unint64_t v63 = v172;
                BOOL v14 = v171++ > 8;
                if (v14) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v68) = 0;
              }
            }
            break;
          }
LABEL_267:
          *((_DWORD *)this + 15) = v68;
          goto LABEL_296;
        case 0xAu:
          *((_DWORD *)this + 29) |= 1u;
          unint64_t v71 = *((void *)a2 + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v71);
          goto LABEL_246;
        case 0xBu:
          *((_DWORD *)this + 29) |= 2u;
          unint64_t v72 = *((void *)a2 + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v72);
          goto LABEL_246;
        case 0xCu:
          *((_DWORD *)this + 29) |= 0x1000u;
          unint64_t v73 = *((void *)a2 + 1);
          unint64_t v74 = *((void *)a2 + 2);
          uint64_t v75 = *(void *)a2;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            char v76 = 0;
            unsigned int v77 = 0;
            uint64_t v78 = 0;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)a2 + 1) = v73 + 1;
              char v80 = *(unsigned char *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_271;
              }
              v76 += 7;
              unint64_t v73 = v79;
              BOOL v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          char v174 = 0;
          unsigned int v175 = 0;
          uint64_t v78 = 0;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v176 = v73 + 1;
              char v177 = *(unsigned char *)(v75 + v73);
              *((void *)a2 + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                unint64_t v73 = v176;
                BOOL v14 = v175++ > 8;
                if (v14) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v78) = 0;
              }
            }
            break;
          }
LABEL_271:
          *((_DWORD *)this + 19) = v78;
          goto LABEL_296;
        case 0xDu:
          *((_DWORD *)this + 29) |= 0x800u;
          unint64_t v81 = *((void *)a2 + 1);
          unint64_t v82 = *((void *)a2 + 2);
          uint64_t v83 = *(void *)a2;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            char v84 = 0;
            unsigned int v85 = 0;
            uint64_t v86 = 0;
            do
            {
              unint64_t v87 = v81 + 1;
              *((void *)a2 + 1) = v81 + 1;
              char v88 = *(unsigned char *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0) {
                goto LABEL_275;
              }
              v84 += 7;
              unint64_t v81 = v87;
              BOOL v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          char v178 = 0;
          unsigned int v179 = 0;
          uint64_t v86 = 0;
          if (v82 <= v81) {
            unint64_t v82 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v180 = v81 + 1;
              char v181 = *(unsigned char *)(v83 + v81);
              *((void *)a2 + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                unint64_t v81 = v180;
                BOOL v14 = v179++ > 8;
                if (v14) {
                  goto LABEL_199;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v86) = 0;
              }
            }
            break;
          }
LABEL_275:
          *((_DWORD *)this + 18) = v86;
          goto LABEL_296;
        case 0xEu:
          *((_DWORD *)this + 29) |= 0x2000000u;
          unint64_t v89 = *((void *)a2 + 1);
          if (v89 >= *((void *)a2 + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)a2 + v89);
            *((void *)a2 + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *((unsigned char *)this + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *((_DWORD *)this + 29) |= 0x1000000u;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 >= *((void *)a2 + 2))
          {
            BOOL v96 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v94 = v93 + 1;
            int v95 = *(unsigned __int8 *)(*(void *)a2 + v93);
            *((void *)a2 + 1) = v94;
            BOOL v96 = v95 != 0;
          }
          *((unsigned char *)this + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *((_DWORD *)this + 29) |= 0x400000u;
          unint64_t v97 = *((void *)a2 + 1);
          if (v97 >= *((void *)a2 + 2))
          {
            BOOL v100 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v98 = v97 + 1;
            int v99 = *(unsigned __int8 *)(*(void *)a2 + v97);
            *((void *)a2 + 1) = v98;
            BOOL v100 = v99 != 0;
          }
          *((unsigned char *)this + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *((_DWORD *)this + 29) |= 0x4000000u;
          unint64_t v101 = *((void *)a2 + 1);
          if (v101 >= *((void *)a2 + 2))
          {
            BOOL v104 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v102 = v101 + 1;
            int v103 = *(unsigned __int8 *)(*(void *)a2 + v101);
            *((void *)a2 + 1) = v102;
            BOOL v104 = v103 != 0;
          }
          *((unsigned char *)this + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *((_DWORD *)this + 29) |= 0x800000u;
          unint64_t v105 = *((void *)a2 + 1);
          if (v105 >= *((void *)a2 + 2))
          {
            BOOL v108 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v106 = v105 + 1;
            int v107 = *(unsigned __int8 *)(*(void *)a2 + v105);
            *((void *)a2 + 1) = v106;
            BOOL v108 = v107 != 0;
          }
          *((unsigned char *)this + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *((_DWORD *)this + 29) |= 0x40000u;
          unint64_t v109 = *((void *)a2 + 1);
          unint64_t v110 = *((void *)a2 + 2);
          uint64_t v111 = *(void *)a2;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)a2 + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_279;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          char v182 = 0;
          unsigned int v183 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v184 = v109 + 1;
              char v185 = *(unsigned char *)(v111 + v109);
              *((void *)a2 + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                unint64_t v109 = v184;
                BOOL v14 = v183++ > 8;
                if (v14) {
                  goto LABEL_216;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_279:
          *((_DWORD *)this + 25) = v114;
          goto LABEL_296;
        case 0x14u:
          *((_DWORD *)this + 29) |= 0x80u;
          unint64_t v117 = *((void *)a2 + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v117);
          goto LABEL_115;
        case 0x15u:
          *((_DWORD *)this + 29) |= 0x40u;
          unint64_t v118 = *((void *)a2 + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v118);
          goto LABEL_115;
        case 0x16u:
          *((_DWORD *)this + 29) |= 0x4000u;
          unint64_t v119 = *((void *)a2 + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v119);
LABEL_115:
          uint64_t v120 = *((void *)a2 + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *((_DWORD *)this + 29) |= 0x80000u;
          unint64_t v121 = *((void *)a2 + 1);
          unint64_t v122 = *((void *)a2 + 2);
          uint64_t v123 = *(void *)a2;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            char v124 = 0;
            unsigned int v125 = 0;
            uint64_t v126 = 0;
            do
            {
              unint64_t v127 = v121 + 1;
              *((void *)a2 + 1) = v121 + 1;
              char v128 = *(unsigned char *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0) {
                goto LABEL_283;
              }
              v124 += 7;
              unint64_t v121 = v127;
              BOOL v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          char v186 = 0;
          unsigned int v187 = 0;
          uint64_t v126 = 0;
          if (v122 <= v121) {
            unint64_t v122 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v188 = v121 + 1;
              char v189 = *(unsigned char *)(v123 + v121);
              *((void *)a2 + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                unint64_t v121 = v188;
                BOOL v14 = v187++ > 8;
                if (v14) {
                  goto LABEL_223;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v126) = 0;
              }
            }
            break;
          }
LABEL_283:
          *((_DWORD *)this + 26) = v126;
          goto LABEL_296;
        case 0x18u:
          *((_DWORD *)this + 29) |= 8u;
          unint64_t v129 = *((void *)a2 + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 4) = *(void *)(*(void *)a2 + v129);
LABEL_246:
            uint64_t v120 = *((void *)a2 + 1) + 8;
LABEL_247:
            *((void *)a2 + 1) = v120;
          }
          else
          {
LABEL_125:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *((_DWORD *)this + 29) |= 0x10u;
          unint64_t v130 = *((void *)a2 + 1);
          unint64_t v131 = *((void *)a2 + 2);
          uint64_t v132 = *(void *)a2;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            char v133 = 0;
            unsigned int v134 = 0;
            uint64_t v135 = 0;
            do
            {
              unint64_t v136 = v130 + 1;
              *((void *)a2 + 1) = v130 + 1;
              char v137 = *(unsigned char *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0) {
                goto LABEL_287;
              }
              v133 += 7;
              unint64_t v130 = v136;
              BOOL v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            uint64_t v135 = 0;
            goto LABEL_287;
          }
          char v190 = 0;
          unsigned int v191 = 0;
          uint64_t v135 = 0;
          if (v131 <= v130) {
            unint64_t v131 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v131 == v130)
            {
              uint64_t v135 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v192 = v130 + 1;
              char v193 = *(unsigned char *)(v132 + v130);
              *((void *)a2 + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                unint64_t v130 = v192;
                BOOL v14 = v191++ > 8;
                if (v14) {
                  goto LABEL_230;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v135 = 0;
              }
            }
            break;
          }
LABEL_287:
          *((void *)this + 5) = v135;
          goto LABEL_296;
        case 0x1Au:
          *((_DWORD *)this + 29) |= 0x20000u;
          unint64_t v138 = *((void *)a2 + 1);
          unint64_t v139 = *((void *)a2 + 2);
          uint64_t v140 = *(void *)a2;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            char v141 = 0;
            unsigned int v142 = 0;
            uint64_t v143 = 0;
            do
            {
              unint64_t v144 = v138 + 1;
              *((void *)a2 + 1) = v138 + 1;
              char v145 = *(unsigned char *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0) {
                goto LABEL_291;
              }
              v141 += 7;
              unint64_t v138 = v144;
              BOOL v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          char v194 = 0;
          unsigned int v195 = 0;
          uint64_t v143 = 0;
          if (v139 <= v138) {
            unint64_t v139 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v196 = v138 + 1;
              char v197 = *(unsigned char *)(v140 + v138);
              *((void *)a2 + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                unint64_t v138 = v196;
                BOOL v14 = v195++ > 8;
                if (v14) {
                  goto LABEL_237;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v143) = 0;
              }
            }
            break;
          }
LABEL_291:
          *((_DWORD *)this + 24) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *((_DWORD *)this + 29) |= 0x2000u;
          unint64_t v146 = *((void *)a2 + 1);
          unint64_t v147 = *((void *)a2 + 2);
          uint64_t v148 = *(void *)a2;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            char v149 = 0;
            unsigned int v150 = 0;
            uint64_t v151 = 0;
            do
            {
              unint64_t v152 = v146 + 1;
              *((void *)a2 + 1) = v146 + 1;
              char v153 = *(unsigned char *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0) {
                goto LABEL_295;
              }
              v149 += 7;
              unint64_t v146 = v152;
              BOOL v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          char v198 = 0;
          unsigned int v199 = 0;
          uint64_t v151 = 0;
          if (v147 <= v146) {
            unint64_t v147 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_295;
        }
        unint64_t v200 = v146 + 1;
        char v201 = *(unsigned char *)(v148 + v146);
        *((void *)a2 + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0) {
          break;
        }
        v198 += 7;
        unint64_t v146 = v200;
        BOOL v14 = v199++ > 8;
        if (v14) {
          goto LABEL_244;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v151) = 0;
      }
LABEL_295:
      *((_DWORD *)this + 20) = v151;
LABEL_296:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 116);
  if ((v4 & 0x10000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 92), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 4u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 108), 5u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 6u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 7u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 109), 8u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 9u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 0xBu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 76), 0xCu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 0xDu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 113), 0xEu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 112), 0xFu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 110), 0x10u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 114), 0x11u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 111), 0x12u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 100), 0x13u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 0x14u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x15u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x16u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 0x17u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x18u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 96), 0x1Au);
    if ((*(_DWORD *)(v3 + 116) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 40), 0x19u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x2000) == 0) {
    return this;
  }
LABEL_55:
  unsigned int v5 = *(_DWORD *)(v3 + 80);

  return PB::Writer::writeVarInt(a2, v5, 0x1Bu);
}

uint64_t CMMsl::MotionActivity::hash_value(CMMsl::MotionActivity *this)
{
  int v1 = *((_DWORD *)this + 29);
  if ((v1 & 0x10000) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 23);
    if ((v1 & 0x200) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 16);
      if ((v1 & 0x20) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned int *)this + 12);
    if ((v1 & 0x400) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v4 = 0;
  if ((v1 & 0x400) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned int *)this + 17);
    if ((v1 & 0x100000) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v5 = 0;
  if ((v1 & 0x100000) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 108);
    if ((v1 & 0x8000) != 0) {
      goto LABEL_7;
    }
LABEL_50:
    uint64_t v8 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_51:
    double v9 = 0.0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_49:
  uint64_t v6 = 0;
  if ((v1 & 0x8000) == 0) {
    goto LABEL_50;
  }
LABEL_7:
  float v7 = *((float *)this + 22);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_51;
  }
LABEL_10:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 0x200000) != 0)
  {
LABEL_13:
    uint64_t v10 = *((unsigned __int8 *)this + 109);
    if ((v1 & 0x100) != 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = 0;
  if ((v1 & 0x100) != 0)
  {
LABEL_14:
    uint64_t v11 = *((unsigned int *)this + 15);
    if (v1) {
      goto LABEL_15;
    }
LABEL_54:
    double v12 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_18;
    }
LABEL_55:
    double v13 = 0.0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v11 = 0;
  if ((v1 & 1) == 0) {
    goto LABEL_54;
  }
LABEL_15:
  double v12 = *((double *)this + 1);
  if (v12 == 0.0) {
    double v12 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_55;
  }
LABEL_18:
  double v13 = *((double *)this + 2);
  if (v13 == 0.0) {
    double v13 = 0.0;
  }
  if ((v1 & 0x1000) != 0)
  {
LABEL_21:
    uint64_t v14 = *((unsigned int *)this + 19);
    if ((v1 & 0x800) != 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = 0;
  if ((v1 & 0x800) != 0)
  {
LABEL_22:
    uint64_t v15 = *((unsigned int *)this + 18);
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = 0;
  if ((v1 & 0x2000000) != 0)
  {
LABEL_23:
    uint64_t v16 = *((unsigned __int8 *)this + 113);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v16 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_24:
    uint64_t v17 = *((unsigned __int8 *)this + 112);
    if ((v1 & 0x400000) != 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v17 = 0;
  if ((v1 & 0x400000) != 0)
  {
LABEL_25:
    uint64_t v18 = *((unsigned __int8 *)this + 110);
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v18 = 0;
  if ((v1 & 0x4000000) != 0)
  {
LABEL_26:
    uint64_t v19 = *((unsigned __int8 *)this + 114);
    if ((v1 & 0x800000) != 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v19 = 0;
  if ((v1 & 0x800000) != 0)
  {
LABEL_27:
    uint64_t v20 = *((unsigned __int8 *)this + 111);
    if ((v1 & 0x40000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v20 = 0;
  if ((v1 & 0x40000) != 0)
  {
LABEL_28:
    uint64_t v21 = *((unsigned int *)this + 25);
    if ((v1 & 0x80) != 0) {
      goto LABEL_29;
    }
LABEL_64:
    uint64_t v23 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_32;
    }
LABEL_65:
    uint64_t v25 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_35;
    }
LABEL_66:
    uint64_t v27 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_38;
    }
    goto LABEL_67;
  }
LABEL_63:
  uint64_t v21 = 0;
  if ((v1 & 0x80) == 0) {
    goto LABEL_64;
  }
LABEL_29:
  float v22 = *((float *)this + 14);
  uint64_t v23 = LODWORD(v22);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_65;
  }
LABEL_32:
  float v24 = *((float *)this + 13);
  uint64_t v25 = LODWORD(v24);
  if (v24 == 0.0) {
    uint64_t v25 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_66;
  }
LABEL_35:
  float v26 = *((float *)this + 21);
  uint64_t v27 = LODWORD(v26);
  if (v26 == 0.0) {
    uint64_t v27 = 0;
  }
  if ((v1 & 0x80000) != 0)
  {
LABEL_38:
    uint64_t v28 = *((unsigned int *)this + 26);
    if ((v1 & 8) != 0) {
      goto LABEL_39;
    }
LABEL_68:
    double v29 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_42;
    }
    goto LABEL_69;
  }
LABEL_67:
  uint64_t v28 = 0;
  if ((v1 & 8) == 0) {
    goto LABEL_68;
  }
LABEL_39:
  double v29 = *((double *)this + 4);
  if (v29 == 0.0) {
    double v29 = 0.0;
  }
  if ((v1 & 0x10) != 0)
  {
LABEL_42:
    uint64_t v30 = *((void *)this + 5);
    if ((v1 & 0x20000) != 0) {
      goto LABEL_43;
    }
LABEL_70:
    uint64_t v31 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_44;
    }
LABEL_71:
    uint64_t v32 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(void *)&v29 ^ v30 ^ v31 ^ v32;
  }
LABEL_69:
  uint64_t v30 = 0;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_70;
  }
LABEL_43:
  uint64_t v31 = *((unsigned int *)this + 24);
  if ((v1 & 0x2000) == 0) {
    goto LABEL_71;
  }
LABEL_44:
  uint64_t v32 = *((unsigned int *)this + 20);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v8 ^ *(void *)&v9 ^ v10 ^ v11 ^ *(void *)&v12 ^ *(void *)&v13 ^ v14 ^ v15 ^ v16 ^ v17 ^ v18 ^ v19 ^ v20 ^ v21 ^ v23 ^ v25 ^ v27 ^ v28 ^ *(void *)&v29 ^ v30 ^ v31 ^ v32;
}

void CMMsl::MotionActivityReplay::~MotionActivityReplay(CMMsl::MotionActivityReplay *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t this, const CMMsl::MotionActivityReplay *a2)
{
  *(void *)this = off_1003A7628;
  *(_DWORD *)(this + 36) = 0;
  __int16 v2 = *((_WORD *)a2 + 18);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 36) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 7);
    v3 |= 0x10u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 28) = v5;
    __int16 v2 = *((_WORD *)a2 + 18);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    int v6 = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *(_WORD *)(this + 36) = v3;
    *(_DWORD *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 18);
    if ((v2 & 0x80) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *((unsigned char *)a2 + 34);
  v3 |= 0x80u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 34) = v7;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  char v8 = *((unsigned char *)a2 + 35);
  v3 |= 0x100u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 35) = v8;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v9 = *((unsigned char *)a2 + 32);
  v3 |= 0x20u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 32) = v9;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *((unsigned char *)a2 + 33);
  v3 |= 0x40u;
  *(_WORD *)(this + 36) = v3;
  *(unsigned char *)(this + 33) = v10;
  __int16 v2 = *((_WORD *)a2 + 18);
  if ((v2 & 2) == 0)
  {
LABEL_12:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_20:
    int v12 = *((_DWORD *)a2 + 5);
    *(_WORD *)(this + 36) = v3 | 4;
    *(_DWORD *)(this + 20) = v12;
    return this;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *(_WORD *)(this + 36) = v3;
  *(_DWORD *)(this + 16) = v11;
  if ((*((_WORD *)a2 + 18) & 4) != 0) {
    goto LABEL_20;
  }
  return this;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, const CMMsl::MotionActivityReplay *a2)
{
  if ((const CMMsl::MotionActivityReplay *)a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionActivityReplay *a2, CMMsl::MotionActivityReplay *a3)
{
  int v3 = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  int v6 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 34);
  *((unsigned char *)this + 34) = *((unsigned char *)a2 + 34);
  *((unsigned char *)a2 + 34) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 35);
  *((unsigned char *)this + 35) = *((unsigned char *)a2 + 35);
  *((unsigned char *)a2 + 35) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 32);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v6;
  LOBYTE(v6) = *((unsigned char *)this + 33);
  *((unsigned char *)this + 33) = *((unsigned char *)a2 + 33);
  *((unsigned char *)a2 + 33) = v6;
  int v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
  int v8 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v8;
  return result;
}

double CMMsl::MotionActivityReplay::MotionActivityReplay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7628;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  *(unsigned char *)(a1 + 35) = *(unsigned char *)(a2 + 35);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionActivityReplay::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionActivityReplay::MotionActivityReplay((uint64_t)v8, a2);
    int v3 = *(_DWORD *)(a1 + 36);
    *(_DWORD *)(a1 + 36) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    int v5 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v11;
    int v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::MotionActivityReplay::formatText(CMMsl::MotionActivityReplay *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 18);
  if (v5)
  {
    PB::TextFormatter::format(a2, "iostime", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 18);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineFrom", *((_DWORD *)this + 4));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "outdoorCyclingStateMachineTo", *((_DWORD *)this + 5));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "workoutLocationType", *((_DWORD *)this + 6));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "workoutPause", *((unsigned char *)this + 32));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "workoutResume", *((unsigned char *)this + 33));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "workoutStart", *((unsigned char *)this + 34));
  __int16 v5 = *((_WORD *)this + 18);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "workoutStop", *((unsigned char *)this + 35));
  if ((*((_WORD *)this + 18) & 0x10) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "workoutType", *((_DWORD *)this + 7));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionActivityReplay::readFrom(CMMsl::MotionActivityReplay *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 18) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *((_WORD *)this + 18) |= 0x10u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v55 = v20++;
                  char v56 = *(unsigned char *)(v21 + v55);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
                goto LABEL_103;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)a2 + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *((_DWORD *)this + 7) = v24;
              goto LABEL_120;
            case 3u:
              *((_WORD *)this + 18) |= 8u;
              unint64_t v26 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v27 = *(void *)a2;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v59 = v26++;
                  char v60 = *(unsigned char *)(v27 + v59);
                  *((void *)a2 + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_108;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)a2 + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *((_DWORD *)this + 6) = v30;
              goto LABEL_120;
            case 0xAu:
              *((_WORD *)this + 18) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *((_WORD *)this + 18) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *((unsigned char *)this + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *((_WORD *)this + 18) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *((unsigned char *)this + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *((_WORD *)this + 18) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *((unsigned char *)this + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *((_WORD *)this + 18) |= 2u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v63 = v41++;
                  char v64 = *(unsigned char *)(v42 + v63);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_113;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *((_DWORD *)this + 4) = v45;
              goto LABEL_120;
            case 0x16u:
              *((_WORD *)this + 18) |= 4u;
              unint64_t v47 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v48 = *(void *)a2;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v67 = v47++;
                  char v68 = *(unsigned char *)(v48 + v67);
                  *((void *)a2 + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_118;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)a2 + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *((_DWORD *)this + 5) = v51;
LABEL_120:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_120;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionActivityReplay::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 36);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 34), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 35), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 32), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 0x15u);
    if ((*(_WORD *)(v3 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 33), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_19:
  int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(a2, v5, 0x16u);
}

uint64_t CMMsl::MotionActivityReplay::hash_value(CMMsl::MotionActivityReplay *this)
{
  __int16 v1 = *((_WORD *)this + 18);
  if (v1)
  {
    double v2 = *((double *)this + 1);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x10) != 0)
    {
LABEL_3:
      uint64_t v3 = *((int *)this + 7);
      if ((v1 & 8) != 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_4:
    uint64_t v4 = *((int *)this + 6);
    if ((v1 & 0x80) != 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v4 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_5:
    uint64_t v5 = *((unsigned __int8 *)this + 34);
    if ((*((_WORD *)this + 18) & 0x100) != 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((_WORD *)this + 18) & 0x100) != 0)
  {
LABEL_6:
    uint64_t v6 = *((unsigned __int8 *)this + 35);
    if ((v1 & 0x20) != 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v6 = 0;
  if ((v1 & 0x20) != 0)
  {
LABEL_7:
    uint64_t v7 = *((unsigned __int8 *)this + 32);
    if ((v1 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v7 = 0;
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    uint64_t v8 = *((unsigned __int8 *)this + 33);
    if ((v1 & 2) != 0) {
      goto LABEL_9;
    }
LABEL_20:
    uint64_t v9 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v10 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
  }
LABEL_19:
  uint64_t v8 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v9 = *((int *)this + 4);
  if ((v1 & 4) == 0) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v10 = *((int *)this + 5);
  return v3 ^ *(void *)&v2 ^ v4 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10;
}

void CMMsl::MotionContextActivity::~MotionContextActivity(CMMsl::MotionContextActivity *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A7660;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionContextActivity::~MotionContextActivity(this);

  operator delete();
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t this, const CMMsl::MotionContextActivity *a2)
{
  *(void *)this = off_1003A7660;
  *(void *)(this + 8) = 0;
  *(void *)(this + 24) = 0;
  if ((*((unsigned char *)a2 + 28) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 6);
    *(unsigned char *)(this + 28) = 2;
    *(_DWORD *)(this + 24) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 28) & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 28))
  {
LABEL_5:
    uint64_t v4 = *((void *)a2 + 2);
    *(unsigned char *)(this + 28) = v2;
    *(void *)(this + 16) = v4;
  }
LABEL_6:
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::MotionContextActivity *CMMsl::MotionContextActivity::operator=(const CMMsl::MotionContextActivity *a1, const CMMsl::MotionContextActivity *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((uint64_t)&v8, a2);
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v3 = *((void *)a1 + 3);
    uint64_t v5 = v11;
    *((void *)a1 + 2) = v10;
    *((void *)a1 + 3) = v5;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    uint64_t v6 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v9;
    uint64_t v9 = v6;
    CMMsl::MotionContextActivity::~MotionContextActivity((CMMsl::MotionContextActivity *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionContextActivity *a2, CMMsl::MotionContextActivity *a3)
{
  int v3 = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v3;
  int v4 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  return result;
}

uint64_t CMMsl::MotionContextActivity::MotionContextActivity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7660;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void *CMMsl::MotionContextActivity::operator=(void *a1, uint64_t a2)
{
  if (a1 != (void *)a2)
  {
    CMMsl::MotionContextActivity::MotionContextActivity((uint64_t)&v8, a2);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1[3];
    uint64_t v5 = v11;
    a1[2] = v10;
    a1[3] = v5;
    uint64_t v10 = v4;
    uint64_t v11 = v3;
    uint64_t v6 = a1[1];
    a1[1] = v9;
    uint64_t v9 = v6;
    CMMsl::MotionContextActivity::~MotionContextActivity((CMMsl::MotionContextActivity *)&v8);
  }
  return a1;
}

uint64_t CMMsl::MotionContextActivity::formatText(CMMsl::MotionContextActivity *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "impulse");
  }
  char v6 = *((unsigned char *)this + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "state", *((_DWORD *)this + 6));
    char v6 = *((unsigned char *)this + 28);
  }
  if (v6) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionContextActivity::readFrom(CMMsl::MotionContextActivity *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *((unsigned char *)this + 28) |= 1u;
        unint64_t v29 = *((void *)a2 + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 2) = *(void *)(*(void *)a2 + v29);
          *((void *)a2 + 1) += 8;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 28) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v22 = *((void *)a2 + 2);
        uint64_t v23 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v33 = v21 + 1;
            char v34 = *(unsigned char *)(v23 + v21);
            *((void *)a2 + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v21 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }
LABEL_48:
        *((_DWORD *)this + 6) = v26;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionContextActivity::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 28);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 24), 1u);
    char v4 = *(unsigned char *)(v3 + 28);
  }
  if (v4) {
    this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(a2, v5, 3u);
  }
  return this;
}

uint64_t CMMsl::MotionContextActivity::hash_value(CMMsl::MotionContextActivity *this)
{
  if ((*((unsigned char *)this + 28) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 28)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    goto LABEL_8;
  }
  uint64_t v1 = *((int *)this + 6);
  if ((*((unsigned char *)this + 28) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 2);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
LABEL_8:
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(int *)(v3 + 16);
    if ((*(unsigned char *)(v3 + 20) & 2) == 0) {
      uint64_t v4 = 0;
    }
    BOOL v5 = *(double *)(v3 + 8) == 0.0 || (*(unsigned char *)(v3 + 20) & 1) == 0;
    uint64_t v6 = *(void *)(v3 + 8);
    if (v5) {
      uint64_t v6 = 0;
    }
    uint64_t v3 = v6 ^ v4;
  }
  return *(void *)&v2 ^ v1 ^ v3;
}

uint64_t CMMsl::MotionContextActivity::makeImpulse(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionGPSLocation::~MotionGPSLocation(CMMsl::MotionGPSLocation *this)
{
  *(void *)this = off_1003A7698;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionGPSLocation::~MotionGPSLocation(this);

  operator delete();
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t this, const CMMsl::MotionGPSLocation *a2)
{
  *(void *)this = off_1003A7698;
  *(void *)(this + 112) = 0;
  *(_DWORD *)(this + 180) = 0;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800) != 0)
  {
    uint64_t v4 = *((void *)a2 + 12);
    int v3 = 2048;
    *(_DWORD *)(this + 180) = 2048;
    *(void *)(this + 96) = v4;
    int v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 7);
    v3 |= 0x40u;
    *(_DWORD *)(this + 180) = v3;
    *(void *)(this + 56) = v5;
    int v2 = *((_DWORD *)a2 + 45);
  }
LABEL_6:
  if ((v2 & 0x80) != 0)
  {
    uint64_t v10 = *((void *)a2 + 8);
    v3 |= 0x80u;
    *(_DWORD *)(this + 180) = v3;
    *(void *)(this + 64) = v10;
    int v2 = *((_DWORD *)a2 + 45);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x400) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v11 = *((void *)a2 + 10);
  v3 |= 0x200u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 80) = v11;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v12 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 88) = v12;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v13 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 48) = v13;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v14 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 16) = v14;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v15 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 24) = v15;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v16 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 8) = v16;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v17 = *((void *)a2 + 15);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 120) = v17;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x800000) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v18 = *((_DWORD *)a2 + 41);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 164) = v18;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v19 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 104) = v19;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v20 = *((_DWORD *)a2 + 42);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 168) = v20;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v21 = *((_DWORD *)a2 + 43);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 172) = v21;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x20000) == 0)
  {
LABEL_19:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v22 = *((_DWORD *)a2 + 35);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 140) = v22;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x80000) == 0)
  {
LABEL_20:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v23 = *((_DWORD *)a2 + 37);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 148) = v23;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x40000) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v24 = *((_DWORD *)a2 + 36);
  v3 |= 0x40000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 144) = v24;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v25 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 72) = v25;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v26 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 32) = v26;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v27 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 180) = v3;
  *(void *)(this + 40) = v27;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v28 = *((_DWORD *)a2 + 39);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 156) = v28;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  v3 |= 0x4000000u;
  *(_DWORD *)(this + 176) = *((_DWORD *)a2 + 44);
  *(_DWORD *)(this + 180) = v3;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x400000) == 0)
  {
LABEL_27:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 160) = v29;
  int v2 = *((_DWORD *)a2 + 45);
  if ((v2 & 0x10000) == 0)
  {
LABEL_28:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_58:
  int v30 = *((_DWORD *)a2 + 34);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 180) = v3;
  *(_DWORD *)(this + 136) = v30;
  if ((*((_DWORD *)a2 + 45) & 0x100000) != 0)
  {
LABEL_29:
    int v6 = *((_DWORD *)a2 + 38);
    *(_DWORD *)(this + 180) = v3 | 0x100000;
    *(_DWORD *)(this + 152) = v6;
  }
LABEL_30:
  if (*((void *)a2 + 14)) {
    operator new();
  }
  int v7 = *((_DWORD *)a2 + 45);
  if ((v7 & 0x8000) != 0)
  {
    int v8 = *((_DWORD *)a2 + 33);
    *(_DWORD *)(this + 180) |= 0x8000u;
    *(_DWORD *)(this + 132) = v8;
    int v7 = *((_DWORD *)a2 + 45);
  }
  if ((v7 & 0x4000) != 0)
  {
    int v9 = *((_DWORD *)a2 + 32);
    *(_DWORD *)(this + 180) |= 0x4000u;
    *(_DWORD *)(this + 128) = v9;
  }
  return this;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, const CMMsl::MotionGPSLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v5, v3);
    CMMsl::MotionGPSLocation::~MotionGPSLocation((CMMsl::MotionGPSLocation *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionGPSLocation *a2, CMMsl::MotionGPSLocation *a3)
{
  int v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  uint64_t v4 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v6;
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v7;
  uint64_t v8 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v13;
  int v14 = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v14;
  uint64_t v15 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v15;
  LODWORD(v15) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v15;
  int v16 = *((_DWORD *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((_DWORD *)a2 + 43) = v16;
  LODWORD(v15) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v15;
  LODWORD(v15) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v15;
  LODWORD(v15) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v15;
  uint64_t v17 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  int v20 = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v20;
  int v21 = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v21;
  int v22 = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v22;
  int v23 = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v23;
  int v24 = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v24;
  uint64_t v25 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v25;
  LODWORD(v25) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v25;
  float result = *((float *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((float *)a2 + 32) = result;
  return result;
}

uint64_t CMMsl::MotionGPSLocation::MotionGPSLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7698;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = 0;
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  return a1;
}

CMMsl *CMMsl::MotionGPSLocation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionGPSLocation::MotionGPSLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionGPSLocation *)v5, v3);
    CMMsl::MotionGPSLocation::~MotionGPSLocation((CMMsl::MotionGPSLocation *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionGPSLocation::formatText(CMMsl::MotionGPSLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 45);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 45);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "demConfidence", *((float *)this + 32));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "demNumContiguousFlatPoints", *((_DWORD *)this + 33));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "gnssModesOfOperation", *((_DWORD *)this + 34));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 35));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 36));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 37));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "notificationType", *((_DWORD *)this + 38));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 39));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "roadClass", *((_DWORD *)this + 40));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 45);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 12));
  if ((*((_DWORD *)this + 45) & 0x1000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 13));
LABEL_24:
  uint64_t v6 = *((void *)this + 14);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "trackRunData");
  }
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 41));
    int v7 = *((_DWORD *)this + 45);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 42));
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "undulationModel", *((_DWORD *)this + 43));
  int v7 = *((_DWORD *)this + 45);
  if ((v7 & 0x2000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 15));
  if ((*((_DWORD *)this + 45) & 0x4000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(a2, "wayForm", *((_DWORD *)this + 44));
LABEL_32:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionGPSLocation::readFrom(CMMsl::MotionGPSLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 45) |= 0x800u;
          unint64_t v20 = *((void *)a2 + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 12) = *(void *)(*(void *)a2 + v20);
          goto LABEL_92;
        case 2u:
          *((_DWORD *)this + 45) |= 0x40u;
          unint64_t v22 = *((void *)a2 + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v22);
          goto LABEL_92;
        case 3u:
          *((_DWORD *)this + 45) |= 0x80u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 8) = *(void *)(*(void *)a2 + v23);
          goto LABEL_92;
        case 4u:
          *((_DWORD *)this + 45) |= 0x200u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 10) = *(void *)(*(void *)a2 + v24);
          goto LABEL_92;
        case 5u:
          *((_DWORD *)this + 45) |= 0x400u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 11) = *(void *)(*(void *)a2 + v25);
          goto LABEL_92;
        case 6u:
          *((_DWORD *)this + 45) |= 0x20u;
          unint64_t v26 = *((void *)a2 + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 6) = *(void *)(*(void *)a2 + v26);
          goto LABEL_92;
        case 7u:
          *((_DWORD *)this + 45) |= 2u;
          unint64_t v27 = *((void *)a2 + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 2) = *(void *)(*(void *)a2 + v27);
          goto LABEL_92;
        case 8u:
          *((_DWORD *)this + 45) |= 4u;
          unint64_t v28 = *((void *)a2 + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 3) = *(void *)(*(void *)a2 + v28);
          goto LABEL_92;
        case 9u:
          *((_DWORD *)this + 45) |= 1u;
          unint64_t v29 = *((void *)a2 + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v29);
          goto LABEL_92;
        case 0xAu:
          *((_DWORD *)this + 45) |= 0x2000u;
          unint64_t v30 = *((void *)a2 + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 15) = *(void *)(*(void *)a2 + v30);
          goto LABEL_92;
        case 0xBu:
          *((_DWORD *)this + 45) |= 0x800000u;
          unint64_t v31 = *((void *)a2 + 1);
          unint64_t v32 = *((void *)a2 + 2);
          uint64_t v33 = *(void *)a2;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            do
            {
              unint64_t v37 = v31 + 1;
              *((void *)a2 + 1) = v31 + 1;
              char v38 = *(unsigned char *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_213;
              }
              v34 += 7;
              unint64_t v31 = v37;
              BOOL v14 = v35++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v36) = 0;
            goto LABEL_213;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v36 = 0;
          if (v32 <= v31) {
            unint64_t v32 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v107 = v31 + 1;
              char v108 = *(unsigned char *)(v33 + v31);
              *((void *)a2 + 1) = v107;
              v36 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v31 = v107;
                BOOL v14 = v106++ > 8;
                if (v14) {
                  goto LABEL_145;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v36) = 0;
              }
            }
            break;
          }
LABEL_213:
          *((_DWORD *)this + 41) = v36;
          goto LABEL_198;
        case 0xCu:
          *((_DWORD *)this + 45) |= 0x1000u;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 13) = *(void *)(*(void *)a2 + v39);
          goto LABEL_92;
        case 0xDu:
          *((_DWORD *)this + 45) |= 0x1000000u;
          unint64_t v40 = *((void *)a2 + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v40);
          goto LABEL_196;
        case 0xEu:
          *((_DWORD *)this + 45) |= 0x2000000u;
          unint64_t v41 = *((void *)a2 + 1);
          unint64_t v42 = *((void *)a2 + 2);
          uint64_t v43 = *(void *)a2;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)a2 + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_216;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v46) = 0;
            goto LABEL_216;
          }
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v111 = v41 + 1;
              char v112 = *(unsigned char *)(v43 + v41);
              *((void *)a2 + 1) = v111;
              v46 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                unint64_t v41 = v111;
                BOOL v14 = v110++ > 8;
                if (v14) {
                  goto LABEL_152;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_216:
          *((_DWORD *)this + 43) = v46;
          goto LABEL_198;
        case 0xFu:
          *((_DWORD *)this + 45) |= 0x20000u;
          unint64_t v49 = *((void *)a2 + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v49);
          goto LABEL_196;
        case 0x10u:
          *((_DWORD *)this + 45) |= 0x80000u;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((_DWORD *)this + 37) = *(_DWORD *)(*(void *)a2 + v50);
          goto LABEL_196;
        case 0x11u:
          *((_DWORD *)this + 45) |= 0x40000u;
          unint64_t v51 = *((void *)a2 + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((_DWORD *)this + 36) = *(_DWORD *)(*(void *)a2 + v51);
          goto LABEL_196;
        case 0x12u:
          *((_DWORD *)this + 45) |= 0x100u;
          unint64_t v52 = *((void *)a2 + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 9) = *(void *)(*(void *)a2 + v52);
          goto LABEL_92;
        case 0x13u:
          *((_DWORD *)this + 45) |= 8u;
          unint64_t v53 = *((void *)a2 + 1);
          if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v53);
          goto LABEL_92;
        case 0x14u:
          *((_DWORD *)this + 45) |= 0x10u;
          unint64_t v54 = *((void *)a2 + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)a2 + 2)) {
            goto LABEL_138;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v54);
LABEL_92:
          uint64_t v55 = *((void *)a2 + 1) + 8;
          goto LABEL_197;
        case 0x15u:
          *((_DWORD *)this + 45) |= 0x200000u;
          unint64_t v56 = *((void *)a2 + 1);
          unint64_t v57 = *((void *)a2 + 2);
          uint64_t v58 = *(void *)a2;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v62 = v56 + 1;
              *((void *)a2 + 1) = v56 + 1;
              char v63 = *(unsigned char *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0) {
                goto LABEL_219;
              }
              v59 += 7;
              unint64_t v56 = v62;
              BOOL v14 = v60++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v61) = 0;
            goto LABEL_219;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v61 = 0;
          if (v57 <= v56) {
            unint64_t v57 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v115 = v56 + 1;
              char v116 = *(unsigned char *)(v58 + v56);
              *((void *)a2 + 1) = v115;
              v61 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                unint64_t v56 = v115;
                BOOL v14 = v114++ > 8;
                if (v14) {
                  goto LABEL_159;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v61) = 0;
              }
            }
            break;
          }
LABEL_219:
          *((_DWORD *)this + 39) = v61;
          goto LABEL_198;
        case 0x16u:
          *((_DWORD *)this + 45) |= 0x4000000u;
          unint64_t v64 = *((void *)a2 + 1);
          unint64_t v65 = *((void *)a2 + 2);
          uint64_t v66 = *(void *)a2;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            char v67 = 0;
            unsigned int v68 = 0;
            uint64_t v69 = 0;
            do
            {
              unint64_t v70 = v64 + 1;
              *((void *)a2 + 1) = v64 + 1;
              char v71 = *(unsigned char *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0) {
                goto LABEL_222;
              }
              v67 += 7;
              unint64_t v64 = v70;
              BOOL v14 = v68++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v69) = 0;
            goto LABEL_222;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v69 = 0;
          if (v65 <= v64) {
            unint64_t v65 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v119 = v64 + 1;
              char v120 = *(unsigned char *)(v66 + v64);
              *((void *)a2 + 1) = v119;
              v69 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v64 = v119;
                BOOL v14 = v118++ > 8;
                if (v14) {
                  goto LABEL_166;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v69) = 0;
              }
            }
            break;
          }
LABEL_222:
          *((_DWORD *)this + 44) = v69;
          goto LABEL_198;
        case 0x17u:
          *((_DWORD *)this + 45) |= 0x400000u;
          unint64_t v72 = *((void *)a2 + 1);
          unint64_t v73 = *((void *)a2 + 2);
          uint64_t v74 = *(void *)a2;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            char v75 = 0;
            unsigned int v76 = 0;
            uint64_t v77 = 0;
            do
            {
              unint64_t v78 = v72 + 1;
              *((void *)a2 + 1) = v72 + 1;
              char v79 = *(unsigned char *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_225;
              }
              v75 += 7;
              unint64_t v72 = v78;
              BOOL v14 = v76++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v77) = 0;
            goto LABEL_225;
          }
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v77 = 0;
          if (v73 <= v72) {
            unint64_t v73 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v123 = v72 + 1;
              char v124 = *(unsigned char *)(v74 + v72);
              *((void *)a2 + 1) = v123;
              v77 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v72 = v123;
                BOOL v14 = v122++ > 8;
                if (v14) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v77) = 0;
              }
            }
            break;
          }
LABEL_225:
          *((_DWORD *)this + 40) = v77;
          goto LABEL_198;
        case 0x18u:
          *((_DWORD *)this + 45) |= 0x10000u;
          unint64_t v80 = *((void *)a2 + 1);
          unint64_t v81 = *((void *)a2 + 2);
          uint64_t v82 = *(void *)a2;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v86 = v80 + 1;
              *((void *)a2 + 1) = v80 + 1;
              char v87 = *(unsigned char *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_228;
              }
              v83 += 7;
              unint64_t v80 = v86;
              BOOL v14 = v84++ > 8;
            }
            while (!v14);
LABEL_180:
            LODWORD(v85) = 0;
            goto LABEL_228;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v85 = 0;
          if (v81 <= v80) {
            unint64_t v81 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v127 = v80 + 1;
              char v128 = *(unsigned char *)(v82 + v80);
              *((void *)a2 + 1) = v127;
              v85 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v80 = v127;
                BOOL v14 = v126++ > 8;
                if (v14) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v85) = 0;
              }
            }
            break;
          }
LABEL_228:
          *((_DWORD *)this + 34) = v85;
          goto LABEL_198;
        case 0x19u:
          *((_DWORD *)this + 45) |= 0x100000u;
          unint64_t v88 = *((void *)a2 + 1);
          unint64_t v89 = *((void *)a2 + 2);
          uint64_t v90 = *(void *)a2;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            char v91 = 0;
            unsigned int v92 = 0;
            uint64_t v93 = 0;
            do
            {
              unint64_t v94 = v88 + 1;
              *((void *)a2 + 1) = v88 + 1;
              char v95 = *(unsigned char *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0) {
                goto LABEL_231;
              }
              v91 += 7;
              unint64_t v88 = v94;
              BOOL v14 = v92++ > 8;
            }
            while (!v14);
LABEL_187:
            LODWORD(v93) = 0;
            goto LABEL_231;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v93 = 0;
          if (v89 <= v88) {
            unint64_t v89 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v89 == v88)
            {
              LODWORD(v93) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v131 = v88 + 1;
              char v132 = *(unsigned char *)(v90 + v88);
              *((void *)a2 + 1) = v131;
              v93 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v88 = v131;
                BOOL v14 = v130++ > 8;
                if (v14) {
                  goto LABEL_187;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v93) = 0;
              }
            }
            break;
          }
LABEL_231:
          *((_DWORD *)this + 38) = v93;
          goto LABEL_198;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *((_DWORD *)this + 45) |= 0x8000u;
          unint64_t v96 = *((void *)a2 + 1);
          unint64_t v97 = *((void *)a2 + 2);
          uint64_t v98 = *(void *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)a2 + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_234;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_194:
            LODWORD(v101) = 0;
            goto LABEL_234;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)a2 + 1);
          }
          break;
        case 0x1Cu:
          *((_DWORD *)this + 45) |= 0x4000u;
          unint64_t v104 = *((void *)a2 + 1);
          if (v104 <= 0xFFFFFFFFFFFFFFFBLL && v104 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v104);
LABEL_196:
            uint64_t v55 = *((void *)a2 + 1) + 4;
LABEL_197:
            *((void *)a2 + 1) = v55;
          }
          else
          {
LABEL_138:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_198;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_198;
      }
      while (1)
      {
        if (v97 == v96)
        {
          LODWORD(v101) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_234;
        }
        unint64_t v135 = v96 + 1;
        char v136 = *(unsigned char *)(v98 + v96);
        *((void *)a2 + 1) = v135;
        v101 |= (unint64_t)(v136 & 0x7F) << v133;
        if ((v136 & 0x80) == 0) {
          break;
        }
        v133 += 7;
        unint64_t v96 = v135;
        BOOL v14 = v134++ > 8;
        if (v14) {
          goto LABEL_194;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v101) = 0;
      }
LABEL_234:
      *((_DWORD *)this + 33) = v101;
LABEL_198:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionGPSLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 180);
  if ((v4 & 0x800) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 96), 1u);
    int v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 3u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 4u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 5u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0xAu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 164), 0xBu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0xCu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0xDu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 172), 0xEu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0xFu);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 148), 0x10u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 144), 0x11u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 0x12u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x13u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x14u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 156), 0x15u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 176), 0x16u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x17u);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 0x18u);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0) {
LABEL_26:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x19u);
LABEL_27:
  int v5 = *(const PB::Base **)(v3 + 112);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 0x1Au);
  }
  int v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 132), 0x1Bu);
    int v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
  {
    float v7 = *(float *)(v3 + 128);
    return PB::Writer::write(a2, v7, 0x1Cu);
  }
  return this;
}

unint64_t CMMsl::MotionGPSLocation::hash_value(CMMsl::MotionGPSLocation *this)
{
  uint64_t v1 = this;
  int v2 = *((_DWORD *)this + 45);
  if ((v2 & 0x800) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 0x40) != 0) {
      goto LABEL_3;
    }
LABEL_82:
    uint64_t v4 = 0;
    if ((v2 & 0x80) != 0) {
      goto LABEL_7;
    }
LABEL_83:
    uint64_t v5 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_11;
    }
LABEL_84:
    uint64_t v6 = 0;
    if ((v2 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_85:
    uint64_t v7 = 0;
    if ((v2 & 0x20) != 0) {
      goto LABEL_19;
    }
LABEL_86:
    uint64_t v8 = 0;
    if ((v2 & 2) != 0) {
      goto LABEL_23;
    }
LABEL_87:
    uint64_t v9 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_88:
    uint64_t v10 = 0;
    if (v2) {
      goto LABEL_31;
    }
LABEL_89:
    uint64_t v11 = 0;
    if ((v2 & 0x2000) != 0) {
      goto LABEL_35;
    }
LABEL_90:
    uint64_t v12 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
  if (*((double *)this + 12) == 0.0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *((void *)this + 12);
  }
  if ((v2 & 0x40) == 0) {
    goto LABEL_82;
  }
LABEL_3:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *((void *)this + 7);
  }
  if ((v2 & 0x80) == 0) {
    goto LABEL_83;
  }
LABEL_7:
  if (*((double *)this + 8) == 0.0) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 8);
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_84;
  }
LABEL_11:
  if (*((double *)this + 10) == 0.0) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *((void *)this + 10);
  }
  if ((v2 & 0x400) == 0) {
    goto LABEL_85;
  }
LABEL_15:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 11);
  }
  if ((v2 & 0x20) == 0) {
    goto LABEL_86;
  }
LABEL_19:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 6);
  }
  if ((v2 & 2) == 0) {
    goto LABEL_87;
  }
LABEL_23:
  if (*((double *)this + 2) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 2);
  }
  if ((v2 & 4) == 0) {
    goto LABEL_88;
  }
LABEL_27:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 3);
  }
  if ((v2 & 1) == 0) {
    goto LABEL_89;
  }
LABEL_31:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = *((void *)this + 1);
  }
  if ((v2 & 0x2000) == 0) {
    goto LABEL_90;
  }
LABEL_35:
  if (*((double *)this + 15) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 15);
  }
  if ((v2 & 0x800000) != 0)
  {
LABEL_39:
    uint64_t v13 = *((unsigned int *)this + 41);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_40;
    }
LABEL_92:
    uint64_t v14 = 0;
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_44;
    }
LABEL_93:
    uint64_t v16 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_48;
    }
    goto LABEL_94;
  }
LABEL_91:
  uint64_t v13 = 0;
  if ((v2 & 0x1000) == 0) {
    goto LABEL_92;
  }
LABEL_40:
  if (*((double *)this + 13) == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 13);
  }
  if ((v2 & 0x1000000) == 0) {
    goto LABEL_93;
  }
LABEL_44:
  float v15 = *((float *)this + 42);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = LODWORD(v15);
  }
  if ((v2 & 0x2000000) != 0)
  {
LABEL_48:
    uint64_t v17 = *((unsigned int *)this + 43);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_49;
    }
LABEL_95:
    uint64_t v19 = 0;
    if ((v2 & 0x80000) != 0) {
      goto LABEL_53;
    }
LABEL_96:
    uint64_t v21 = 0;
    if ((v2 & 0x40000) != 0) {
      goto LABEL_57;
    }
LABEL_97:
    uint64_t v23 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_61;
    }
LABEL_98:
    uint64_t v24 = 0;
    if ((v2 & 8) != 0) {
      goto LABEL_65;
    }
LABEL_99:
    uint64_t v25 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_69;
    }
LABEL_100:
    uint64_t v26 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_73;
    }
    goto LABEL_101;
  }
LABEL_94:
  uint64_t v17 = 0;
  if ((v2 & 0x20000) == 0) {
    goto LABEL_95;
  }
LABEL_49:
  float v18 = *((float *)this + 35);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v2 & 0x80000) == 0) {
    goto LABEL_96;
  }
LABEL_53:
  float v20 = *((float *)this + 37);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v2 & 0x40000) == 0) {
    goto LABEL_97;
  }
LABEL_57:
  float v22 = *((float *)this + 36);
  if (v22 == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = LODWORD(v22);
  }
  if ((v2 & 0x100) == 0) {
    goto LABEL_98;
  }
LABEL_61:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 9);
  }
  if ((v2 & 8) == 0) {
    goto LABEL_99;
  }
LABEL_65:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = *((void *)this + 4);
  }
  if ((v2 & 0x10) == 0) {
    goto LABEL_100;
  }
LABEL_69:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = *((void *)this + 5);
  }
  if ((v2 & 0x200000) != 0)
  {
LABEL_73:
    uint64_t v27 = *((unsigned int *)this + 39);
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_74;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t v27 = 0;
  if ((v2 & 0x4000000) != 0)
  {
LABEL_74:
    uint64_t v28 = *((int *)this + 44);
    if ((v2 & 0x400000) != 0) {
      goto LABEL_75;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v28 = 0;
  if ((v2 & 0x400000) != 0)
  {
LABEL_75:
    uint64_t v29 = *((int *)this + 40);
    if ((v2 & 0x10000) != 0) {
      goto LABEL_76;
    }
LABEL_104:
    uint64_t v30 = 0;
    if ((v2 & 0x100000) != 0) {
      goto LABEL_77;
    }
    goto LABEL_105;
  }
LABEL_103:
  uint64_t v29 = 0;
  if ((v2 & 0x10000) == 0) {
    goto LABEL_104;
  }
LABEL_76:
  uint64_t v30 = *((unsigned int *)this + 34);
  if ((v2 & 0x100000) != 0)
  {
LABEL_77:
    uint64_t v61 = *((int *)this + 38);
    goto LABEL_106;
  }
LABEL_105:
  uint64_t v61 = 0;
LABEL_106:
  unint64_t v31 = *((void *)this + 14);
  if (v31)
  {
    uint64_t v58 = v3;
    uint64_t v50 = v25;
    uint64_t v32 = v4;
    uint64_t v56 = v5;
    uint64_t v48 = v27;
    uint64_t v33 = v6;
    uint64_t v54 = v7;
    uint64_t v45 = v30;
    uint64_t v46 = v29;
    uint64_t v34 = v8;
    uint64_t v35 = v9;
    uint64_t v52 = v23;
    uint64_t v36 = v10;
    uint64_t v60 = v11;
    uint64_t v53 = v21;
    unint64_t v37 = v1;
    uint64_t v59 = v12;
    uint64_t v51 = v24;
    uint64_t v38 = v13;
    uint64_t v57 = v14;
    uint64_t v49 = v26;
    uint64_t v39 = v16;
    uint64_t v55 = v17;
    uint64_t v47 = v28;
    uint64_t v40 = v19;
    unint64_t v31 = CMMsl::TrackRunData::hash_value((CMMsl::TrackRunData *)v31);
    uint64_t v19 = v40;
    uint64_t v7 = v54;
    uint64_t v17 = v55;
    uint64_t v16 = v39;
    uint64_t v5 = v56;
    uint64_t v14 = v57;
    uint64_t v13 = v38;
    uint64_t v12 = v59;
    uint64_t v11 = v60;
    uint64_t v1 = v37;
    uint64_t v21 = v53;
    uint64_t v10 = v36;
    uint64_t v24 = v51;
    uint64_t v23 = v52;
    uint64_t v9 = v35;
    uint64_t v30 = v45;
    uint64_t v8 = v34;
    uint64_t v29 = v46;
    uint64_t v28 = v47;
    uint64_t v6 = v33;
    uint64_t v27 = v48;
    uint64_t v26 = v49;
    uint64_t v4 = v32;
    uint64_t v25 = v50;
    uint64_t v3 = v58;
  }
  if ((v2 & 0x8000) == 0)
  {
    uint64_t v41 = 0;
    if ((v2 & 0x4000) != 0) {
      goto LABEL_110;
    }
LABEL_114:
    uint64_t v43 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
  }
  uint64_t v41 = *((int *)v1 + 33);
  if ((v2 & 0x4000) == 0) {
    goto LABEL_114;
  }
LABEL_110:
  float v42 = *((float *)v1 + 32);
  uint64_t v43 = LODWORD(v42);
  if (v42 == 0.0) {
    uint64_t v43 = 0;
  }
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v16 ^ v17 ^ v19 ^ v21 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v61 ^ v31 ^ v41 ^ v43;
}

uint64_t CMMsl::MotionGPSLocation::makeTrackRunData(uint64_t this)
{
  if (!*(void *)(this + 112)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionHint::~MotionHint(CMMsl::MotionHint *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionHint::MotionHint(uint64_t this, const CMMsl::MotionHint *a2)
{
  *(void *)this = off_1003A76D0;
  *(_DWORD *)(this + 24) = 0;
  char v2 = *((unsigned char *)a2 + 24);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *(unsigned char *)(this + 24) = 1;
    *(void *)(this + 8) = v4;
    char v2 = *((unsigned char *)a2 + 24);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 24) & 2) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *(unsigned char *)(this + 24) = v3;
    *(_DWORD *)(this + 16) = v5;
    char v2 = *((unsigned char *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *((_DWORD *)a2 + 5);
    *(unsigned char *)(this + 24) = v3 | 4;
    *(_DWORD *)(this + 20) = v6;
  }
  return this;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, const CMMsl::MotionHint *a2)
{
  if ((const CMMsl::MotionHint *)a1 != a2)
  {
    CMMsl::MotionHint::MotionHint((uint64_t)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v11;
    int v11 = v3;
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v4;
    uint64_t v9 = v5;
    uint64_t v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionHint *a2, CMMsl::MotionHint *a3)
{
  int v3 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  int v6 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v6;
  return result;
}

double CMMsl::MotionHint::MotionHint(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A76D0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A76D0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return result;
}

uint64_t CMMsl::MotionHint::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(a2 + 24) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    v7[0] = off_1003A76D0;
    int v8 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = v3;
    v7[1] = v4;
    void v7[2] = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

uint64_t CMMsl::MotionHint::formatText(CMMsl::MotionHint *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "event", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(a2, "value", *((_DWORD *)this + 5));
LABEL_5:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionHint::readFrom(CMMsl::MotionHint *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *((unsigned char *)this + 24) |= 4u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *((_DWORD *)this + 5) = v25;
      }
      else if (v20 == 2)
      {
        *((unsigned char *)this + 24) |= 2u;
        unint64_t v27 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v28 = *(void *)a2;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)a2 + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)a2 + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *((_DWORD *)this + 4) = v31;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 24) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionHint::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(this + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 16), 2u);
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_7:
  unsigned int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(a2, v5, 3u);
}

uint64_t CMMsl::MotionHint::hash_value(CMMsl::MotionHint *this)
{
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 24) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 4) != 0) {
      goto LABEL_4;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v2 ^ *(void *)&v1 ^ v3;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 24) & 2) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  if ((*((unsigned char *)this + 24) & 4) == 0) {
    goto LABEL_9;
  }
LABEL_4:
  uint64_t v3 = *((unsigned int *)this + 5);
  return v2 ^ *(void *)&v1 ^ v3;
}

void CMMsl::MotionLocation::~MotionLocation(CMMsl::MotionLocation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionLocation::MotionLocation(uint64_t this, const CMMsl::MotionLocation *a2)
{
  *(void *)this = off_1003A7708;
  *(_DWORD *)(this + 220) = 0;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000) != 0)
  {
    uint64_t v4 = *((void *)a2 + 19);
    int v3 = 0x40000;
    *(_DWORD *)(this + 220) = 0x40000;
    *(void *)(this + 152) = v4;
    int v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 9);
    v3 |= 0x100u;
    *(_DWORD *)(this + 220) = v3;
    *(void *)(this + 72) = v5;
    int v2 = *((_DWORD *)a2 + 55);
  }
LABEL_6:
  if ((v2 & 0x200) != 0)
  {
    uint64_t v6 = *((void *)a2 + 10);
    v3 |= 0x200u;
    *(_DWORD *)(this + 220) = v3;
    *(void *)(this + 80) = v6;
    int v2 = *((_DWORD *)a2 + 55);
    if ((v2 & 0x10000) == 0)
    {
LABEL_8:
      if ((v2 & 0x20000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_39;
    }
  }
  else if ((v2 & 0x10000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 17);
  v3 |= 0x10000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 136) = v7;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t v8 = *((void *)a2 + 18);
  v3 |= 0x20000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 144) = v8;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t v9 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 64) = v9;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v10 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 16) = v10;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 24) = v11;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 1) == 0)
  {
LABEL_13:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v12 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 8) = v12;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x100000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v13 = *((void *)a2 + 21);
  v3 |= 0x100000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 168) = v13;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v14 = *((_DWORD *)a2 + 51);
  v3 |= 0x10000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 204) = v14;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000) == 0)
  {
LABEL_16:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v15 = *((void *)a2 + 20);
  v3 |= 0x80000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 160) = v15;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v16 = *((_DWORD *)a2 + 52);
  v3 |= 0x20000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 208) = v16;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  int v17 = *((_DWORD *)a2 + 53);
  v3 |= 0x40000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 212) = v17;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x200000) == 0)
  {
LABEL_19:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v18 = *((_DWORD *)a2 + 44);
  v3 |= 0x200000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 176) = v18;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800000) == 0)
  {
LABEL_20:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v19 = *((_DWORD *)a2 + 46);
  v3 |= 0x800000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 184) = v19;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400000) == 0)
  {
LABEL_21:
    if ((v2 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v20 = *((_DWORD *)a2 + 45);
  v3 |= 0x400000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 180) = v20;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x800) == 0)
  {
LABEL_22:
    if ((v2 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v21 = *((void *)a2 + 12);
  v3 |= 0x800u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 96) = v21;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 8) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v22 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 32) = v22;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v23 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 40) = v23;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  int v24 = *((_DWORD *)a2 + 48);
  v3 |= 0x2000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 192) = v24;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v25 = *((_DWORD *)a2 + 50);
  v3 |= 0x8000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 200) = v25;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x20) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v26 = *((_DWORD *)a2 + 47);
  v3 |= 0x1000000u;
  *(_DWORD *)(this + 220) = v3;
  *(_DWORD *)(this + 188) = v26;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x20) == 0)
  {
LABEL_28:
    if ((v2 & 0x40) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v27 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 48) = v27;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x40) == 0)
  {
LABEL_29:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v28 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 56) = v28;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x8000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v29 = *((void *)a2 + 16);
  v3 |= 0x8000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 128) = v29;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x400) == 0)
  {
LABEL_31:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v30 = *((void *)a2 + 11);
  v3 |= 0x400u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 88) = v30;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v31 = *((unsigned char *)a2 + 216);
  v3 |= 0x80000000;
  *(_DWORD *)(this + 220) = v3;
  *(unsigned char *)(this + 216) = v31;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x1000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v32 = *((void *)a2 + 13);
  v3 |= 0x1000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 104) = v32;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x4000) == 0)
  {
LABEL_34:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v33 = *((void *)a2 + 15);
  v3 |= 0x4000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 120) = v33;
  int v2 = *((_DWORD *)a2 + 55);
  if ((v2 & 0x2000) == 0)
  {
LABEL_35:
    if ((v2 & 0x4000000) == 0) {
      return this;
    }
LABEL_66:
    int v35 = *((_DWORD *)a2 + 49);
    *(_DWORD *)(this + 220) = v3 | 0x4000000;
    *(_DWORD *)(this + 196) = v35;
    return this;
  }
LABEL_65:
  uint64_t v34 = *((void *)a2 + 14);
  v3 |= 0x2000u;
  *(_DWORD *)(this + 220) = v3;
  *(void *)(this + 112) = v34;
  if ((*((_DWORD *)a2 + 55) & 0x4000000) != 0) {
    goto LABEL_66;
  }
  return this;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, const CMMsl::MotionLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLocation *a2, CMMsl::MotionLocation *a3)
{
  int v3 = *((_DWORD *)this + 55);
  *((_DWORD *)this + 55) = *((_DWORD *)a2 + 55);
  *((_DWORD *)a2 + 55) = v3;
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v4;
  uint64_t v5 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v5;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v6;
  uint64_t v7 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v7;
  uint64_t v8 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v8;
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v9;
  uint64_t v10 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v10;
  uint64_t v11 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v11;
  uint64_t v12 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v12;
  uint64_t v13 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v13;
  int v14 = *((_DWORD *)this + 51);
  *((_DWORD *)this + 51) = *((_DWORD *)a2 + 51);
  *((_DWORD *)a2 + 51) = v14;
  uint64_t v15 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v15;
  LODWORD(v15) = *((_DWORD *)this + 52);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_DWORD *)a2 + 52) = v15;
  int v16 = *((_DWORD *)this + 53);
  *((_DWORD *)this + 53) = *((_DWORD *)a2 + 53);
  *((_DWORD *)a2 + 53) = v16;
  LODWORD(v15) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v15;
  LODWORD(v15) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v15;
  LODWORD(v15) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v15;
  uint64_t v17 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v17;
  uint64_t v18 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v18;
  uint64_t v19 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v19;
  int v20 = *((_DWORD *)this + 48);
  *((_DWORD *)this + 48) = *((_DWORD *)a2 + 48);
  *((_DWORD *)a2 + 48) = v20;
  int v21 = *((_DWORD *)this + 50);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 50);
  *((_DWORD *)a2 + 50) = v21;
  int v22 = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v22;
  uint64_t v23 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v23;
  uint64_t v24 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v24;
  uint64_t v25 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v25;
  uint64_t v26 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v26;
  LOBYTE(v22) = *((unsigned char *)this + 216);
  *((unsigned char *)this + 216) = *((unsigned char *)a2 + 216);
  *((unsigned char *)a2 + 216) = v22;
  uint64_t v27 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v27;
  uint64_t v28 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v28;
  double result = *((double *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((double *)a2 + 14) = result;
  int v30 = *((_DWORD *)this + 49);
  *((_DWORD *)this + 49) = *((_DWORD *)a2 + 49);
  *((_DWORD *)a2 + 49) = v30;
  return result;
}

double CMMsl::MotionLocation::MotionLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7708;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
  *(_DWORD *)(a2 + 220) = 0;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 192) = *(_DWORD *)(a2 + 192);
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  double result = *(double *)(a2 + 112);
  *(double *)(a1 + 112) = result;
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 196);
  return result;
}

CMMsl *CMMsl::MotionLocation::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLocation::MotionLocation((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLocation *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLocation::formatText(CMMsl::MotionLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 55);
  if (v5)
  {
    PB::TextFormatter::format(a2, "altitude", *((double *)this + 1));
    int v5 = *((_DWORD *)this + 55);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "course", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "courseAccuracy", *((double *)this + 3));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "deltaDistance", *((double *)this + 4));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "deltaDistanceAccuracy", *((double *)this + 5));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 6));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 7));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 8));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "horzUncSemiMaj", *((float *)this + 44));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "horzUncSemiMajAz", *((float *)this + 45));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "horzUncSemiMin", *((float *)this + 46));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "isPrefilteredLocation", *((unsigned char *)this + 216));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 9));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 10));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "matchQuality", *((_DWORD *)this + 47));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 11));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 12));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 48));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "rawAltitude", *((double *)this + 13));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "rawUndulation", *((double *)this + 14));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "rawUndulationModel", *((_DWORD *)this + 49));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "rawVerticalAccuracy", *((double *)this + 15));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "signalEnvironment", *((_DWORD *)this + 50));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 16));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 17));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "speedAccuracy", *((double *)this + 18));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 19));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 20));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 51));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "undulation", *((float *)this + 52));
  int v5 = *((_DWORD *)this + 55);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "undulationModel", *((_DWORD *)this + 53));
  if ((*((_DWORD *)this + 55) & 0x100000) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(a2, "verticalAccuracy", *((double *)this + 21));
LABEL_34:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLocation::readFrom(CMMsl::MotionLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_DWORD *)this + 55) |= 0x40000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 19) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 2u:
              *((_DWORD *)this + 55) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 3u:
              *((_DWORD *)this + 55) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 10) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 4u:
              *((_DWORD *)this + 55) |= 0x10000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 17) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 5u:
              *((_DWORD *)this + 55) |= 0x20000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 18) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 6u:
              *((_DWORD *)this + 55) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 7u:
              *((_DWORD *)this + 55) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 8u:
              *((_DWORD *)this + 55) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 9u:
              *((_DWORD *)this + 55) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0xAu:
              *((_DWORD *)this + 55) |= 0x100000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 21) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0xBu:
              *((_DWORD *)this + 55) |= 0x10000000u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_200;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_199;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_200;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *((_DWORD *)this + 51) = v25;
              goto LABEL_191;
            case 0xCu:
              *((_DWORD *)this + 55) |= 0x80000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 20) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0xDu:
              *((_DWORD *)this + 55) |= 0x20000000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((_DWORD *)this + 52) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0xEu:
              *((_DWORD *)this + 55) |= 0x40000000u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_205;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_204;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_205;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *((_DWORD *)this + 53) = v31;
              goto LABEL_191;
            case 0xFu:
              *((_DWORD *)this + 55) |= 0x200000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0x10u:
              *((_DWORD *)this + 55) |= 0x800000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((_DWORD *)this + 46) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_83;
            case 0x11u:
              *((_DWORD *)this + 55) |= 0x400000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((_DWORD *)this + 45) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_83:
              unint64_t v2 = *((void *)a2 + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *((_DWORD *)this + 55) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 12) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x13u:
              *((_DWORD *)this + 55) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x14u:
              *((_DWORD *)this + 55) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x15u:
              *((_DWORD *)this + 55) |= 0x2000000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_210;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_209;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_210;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *((_DWORD *)this + 48) = v37;
              goto LABEL_191;
            case 0x16u:
              *((_DWORD *)this + 55) |= 0x8000000u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_215;
                  }
                  unint64_t v73 = v39++;
                  char v74 = *(unsigned char *)(v40 + v73);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_214;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_215;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *((_DWORD *)this + 50) = v43;
              goto LABEL_191;
            case 0x17u:
              *((_DWORD *)this + 55) |= 0x1000000u;
              unint64_t v45 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v46 = *(void *)a2;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_220;
                  }
                  unint64_t v77 = v45++;
                  char v78 = *(unsigned char *)(v46 + v77);
                  *((void *)a2 + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_219;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)a2 + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_220;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *((_DWORD *)this + 47) = v49;
              goto LABEL_191;
            case 0x18u:
              *((_DWORD *)this + 55) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x19u:
              *((_DWORD *)this + 55) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x1Au:
              *((_DWORD *)this + 55) |= 0x8000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 16) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x1Bu:
              *((_DWORD *)this + 55) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 11) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x1Cu:
              *((_DWORD *)this + 55) |= 0x80000000;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *((unsigned char *)this + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *((_DWORD *)this + 55) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 13) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x1Eu:
              *((_DWORD *)this + 55) |= 0x4000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_136;
              }
              *((void *)this + 15) = *(void *)(*(void *)a2 + v2);
              goto LABEL_189;
            case 0x1Fu:
              *((_DWORD *)this + 55) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 14) = *(void *)(*(void *)a2 + v2);
LABEL_189:
                unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_190:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_136:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *((_DWORD *)this + 55) |= 0x4000000u;
              unint64_t v53 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v54 = *(void *)a2;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_225;
                  }
                  unint64_t v81 = v53++;
                  char v82 = *(unsigned char *)(v54 + v81);
                  *((void *)a2 + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_224;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)a2 + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_225;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *((_DWORD *)this + 49) = v57;
LABEL_191:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_191;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 220);
  if ((v4 & 0x40000) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 152), 1u);
    int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 2u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(double *)(v3 + 80), 3u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(double *)(v3 + 136), 4u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(double *)(v3 + 144), 5u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 6u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 7u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 9u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(double *)(v3 + 168), 0xAu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 204), 0xBu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(double *)(v3 + 160), 0xCu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::write(a2, *(float *)(v3 + 208), 0xDu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 212), 0xEu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::write(a2, *(float *)(v3 + 176), 0xFu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::write(a2, *(float *)(v3 + 184), 0x10u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::write(a2, *(float *)(v3 + 180), 0x11u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::write(a2, *(double *)(v3 + 96), 0x12u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 0x13u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0x14u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 192), 0x15u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 200), 0x16u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x17u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 0x18u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 0x19u);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(double *)(v3 + 128), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(double *)(v3 + 88), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 216), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(double *)(v3 + 104), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    this = PB::Writer::write(a2, *(double *)(v3 + 112), 0x1Fu);
    if ((*(_DWORD *)(v3 + 220) & 0x4000000) == 0) {
      return this;
    }
    goto LABEL_65;
  }
LABEL_63:
  this = PB::Writer::write(a2, *(double *)(v3 + 120), 0x1Eu);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x4000000) == 0) {
    return this;
  }
LABEL_65:
  unsigned int v5 = *(_DWORD *)(v3 + 196);

  return PB::Writer::writeVarInt(a2, v5, 0x20u);
}

uint64_t CMMsl::MotionLocation::hash_value(CMMsl::MotionLocation *this)
{
  int v1 = *((_DWORD *)this + 55);
  if ((v1 & 0x40000) == 0)
  {
    double v39 = 0.0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_3;
    }
LABEL_102:
    uint64_t v2 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_7;
    }
LABEL_103:
    double v43 = 0.0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_10;
    }
LABEL_104:
    double v42 = 0.0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_13;
    }
LABEL_105:
    double v41 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_16;
    }
LABEL_106:
    double v40 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_19;
    }
LABEL_107:
    uint64_t v7 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_23;
    }
LABEL_108:
    uint64_t v8 = 0;
    if (v1) {
      goto LABEL_27;
    }
LABEL_109:
    uint64_t v9 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_31;
    }
LABEL_110:
    uint64_t v10 = 0;
    if ((v1 & 0x10000000) != 0) {
      goto LABEL_35;
    }
    goto LABEL_111;
  }
  double v37 = *((double *)this + 19);
  if (v37 == 0.0) {
    double v37 = 0.0;
  }
  double v39 = v37;
  if ((v1 & 0x100) == 0) {
    goto LABEL_102;
  }
LABEL_3:
  if (*((double *)this + 9) == 0.0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *((void *)this + 9);
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_103;
  }
LABEL_7:
  double v3 = *((double *)this + 10);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  double v43 = v3;
  if ((v1 & 0x10000) == 0) {
    goto LABEL_104;
  }
LABEL_10:
  double v4 = *((double *)this + 17);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  double v42 = v4;
  if ((v1 & 0x20000) == 0) {
    goto LABEL_105;
  }
LABEL_13:
  double v5 = *((double *)this + 18);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  double v41 = v5;
  if ((v1 & 0x80) == 0) {
    goto LABEL_106;
  }
LABEL_16:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  double v40 = v6;
  if ((v1 & 2) == 0) {
    goto LABEL_107;
  }
LABEL_19:
  if (*((double *)this + 2) == 0.0) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *((void *)this + 2);
  }
  if ((v1 & 4) == 0) {
    goto LABEL_108;
  }
LABEL_23:
  if (*((double *)this + 3) == 0.0) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = *((void *)this + 3);
  }
  if ((v1 & 1) == 0) {
    goto LABEL_109;
  }
LABEL_27:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *((void *)this + 1);
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_110;
  }
LABEL_31:
  if (*((double *)this + 21) == 0.0) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *((void *)this + 21);
  }
  if ((v1 & 0x10000000) != 0)
  {
LABEL_35:
    uint64_t v11 = *((unsigned int *)this + 51);
    if ((v1 & 0x80000) != 0) {
      goto LABEL_36;
    }
LABEL_112:
    uint64_t v12 = 0;
    if ((v1 & 0x20000000) != 0) {
      goto LABEL_40;
    }
LABEL_113:
    uint64_t v14 = 0;
    if ((v1 & 0x40000000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_114;
  }
LABEL_111:
  uint64_t v11 = 0;
  if ((v1 & 0x80000) == 0) {
    goto LABEL_112;
  }
LABEL_36:
  if (*((double *)this + 20) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 20);
  }
  if ((v1 & 0x20000000) == 0) {
    goto LABEL_113;
  }
LABEL_40:
  float v13 = *((float *)this + 52);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = LODWORD(v13);
  }
  if ((v1 & 0x40000000) != 0)
  {
LABEL_44:
    uint64_t v15 = *((unsigned int *)this + 53);
    if ((v1 & 0x200000) != 0) {
      goto LABEL_45;
    }
LABEL_115:
    uint64_t v17 = 0;
    if ((v1 & 0x800000) != 0) {
      goto LABEL_49;
    }
LABEL_116:
    uint64_t v19 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_53;
    }
LABEL_117:
    uint64_t v21 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_57;
    }
LABEL_118:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_61;
    }
LABEL_119:
    uint64_t v23 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_65;
    }
LABEL_120:
    uint64_t v24 = 0;
    if ((v1 & 0x2000000) != 0) {
      goto LABEL_69;
    }
    goto LABEL_121;
  }
LABEL_114:
  uint64_t v15 = 0;
  if ((v1 & 0x200000) == 0) {
    goto LABEL_115;
  }
LABEL_45:
  float v16 = *((float *)this + 44);
  if (v16 == 0.0) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = LODWORD(v16);
  }
  if ((v1 & 0x800000) == 0) {
    goto LABEL_116;
  }
LABEL_49:
  float v18 = *((float *)this + 46);
  if (v18 == 0.0) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = LODWORD(v18);
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_117;
  }
LABEL_53:
  float v20 = *((float *)this + 45);
  if (v20 == 0.0) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = LODWORD(v20);
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_118;
  }
LABEL_57:
  if (*((double *)this + 12) == 0.0) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *((void *)this + 12);
  }
  if ((v1 & 8) == 0) {
    goto LABEL_119;
  }
LABEL_61:
  if (*((double *)this + 4) == 0.0) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = *((void *)this + 4);
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_120;
  }
LABEL_65:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = *((void *)this + 5);
  }
  if ((v1 & 0x2000000) != 0)
  {
LABEL_69:
    uint64_t v25 = *((unsigned int *)this + 48);
    if ((v1 & 0x8000000) != 0) {
      goto LABEL_70;
    }
    goto LABEL_122;
  }
LABEL_121:
  uint64_t v25 = 0;
  if ((v1 & 0x8000000) != 0)
  {
LABEL_70:
    uint64_t v26 = *((unsigned int *)this + 50);
    if ((v1 & 0x1000000) != 0) {
      goto LABEL_71;
    }
    goto LABEL_123;
  }
LABEL_122:
  uint64_t v26 = 0;
  if ((v1 & 0x1000000) != 0)
  {
LABEL_71:
    uint64_t v27 = *((unsigned int *)this + 47);
    if ((v1 & 0x20) != 0) {
      goto LABEL_72;
    }
LABEL_124:
    uint64_t v28 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_76;
    }
LABEL_125:
    uint64_t v29 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_80;
    }
LABEL_126:
    uint64_t v30 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_84;
    }
LABEL_127:
    uint64_t v31 = 0;
    if (v1 < 0) {
      goto LABEL_88;
    }
    goto LABEL_128;
  }
LABEL_123:
  uint64_t v27 = 0;
  if ((v1 & 0x20) == 0) {
    goto LABEL_124;
  }
LABEL_72:
  if (*((double *)this + 6) == 0.0) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = *((void *)this + 6);
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_125;
  }
LABEL_76:
  if (*((double *)this + 7) == 0.0) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = *((void *)this + 7);
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_126;
  }
LABEL_80:
  if (*((double *)this + 16) == 0.0) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = *((void *)this + 16);
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_127;
  }
LABEL_84:
  if (*((double *)this + 11) == 0.0) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = *((void *)this + 11);
  }
  if (v1 < 0)
  {
LABEL_88:
    uint64_t v32 = *((unsigned __int8 *)this + 216);
    if ((v1 & 0x1000) != 0) {
      goto LABEL_89;
    }
LABEL_129:
    double v33 = 0.0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_92;
    }
LABEL_130:
    double v34 = 0.0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_95;
    }
    goto LABEL_131;
  }
LABEL_128:
  uint64_t v32 = 0;
  if ((v1 & 0x1000) == 0) {
    goto LABEL_129;
  }
LABEL_89:
  double v33 = *((double *)this + 13);
  if (v33 == 0.0) {
    double v33 = 0.0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_130;
  }
LABEL_92:
  double v34 = *((double *)this + 15);
  if (v34 == 0.0) {
    double v34 = 0.0;
  }
  if ((v1 & 0x2000) != 0)
  {
LABEL_95:
    double v35 = *((double *)this + 14);
    if (v35 == 0.0) {
      double v35 = 0.0;
    }
    if ((v1 & 0x4000000) != 0) {
      goto LABEL_98;
    }
LABEL_132:
    uint64_t v36 = 0;
    return v2 ^ *(void *)&v39 ^ *(void *)&v43 ^ *(void *)&v42 ^ *(void *)&v41 ^ *(void *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(void *)&v33 ^ *(void *)&v34 ^ *(void *)&v35 ^ v36;
  }
LABEL_131:
  double v35 = 0.0;
  if ((v1 & 0x4000000) == 0) {
    goto LABEL_132;
  }
LABEL_98:
  uint64_t v36 = *((unsigned int *)this + 49);
  return v2 ^ *(void *)&v39 ^ *(void *)&v43 ^ *(void *)&v42 ^ *(void *)&v41 ^ *(void *)&v40 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v14 ^ v15 ^ v17 ^ v19 ^ v21 ^ v22 ^ v23 ^ v24 ^ v25 ^ v26 ^ v27 ^ v28 ^ v29 ^ v30 ^ v31 ^ v32 ^ *(void *)&v33 ^ *(void *)&v34 ^ *(void *)&v35 ^ v36;
}

void CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this)
{
  *(void *)this = off_1003A7740;
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  double v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData(this);

  operator delete();
}

CMMsl::MotionLoiAltitudeData *CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(CMMsl::MotionLoiAltitudeData *this, const CMMsl::MotionLoiAltitudeData *a2)
{
  *(void *)this = off_1003A7740;
  *(_OWORD *)((char *)this + 8) = 0u;
  double v3 = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (this != a2)
  {
    sub_1000330C4(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
    sub_1000330C4((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 3);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, const CMMsl::MotionLoiAltitudeData *a2)
{
  if ((const CMMsl::MotionLoiAltitudeData *)a1 != a2)
  {
    CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)v7, a2);
    long long v3 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v9;
    long long v8 = v3;
    long long v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v10;
    long long v10 = v5;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)v7);
  }
  return a1;
}

void *CMMsl::swap(void *this, CMMsl::MotionLoiAltitudeData *a2, CMMsl::MotionLoiAltitudeData *a3)
{
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  uint64_t v5 = this[3];
  this[3] = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = this[4];
  this[4] = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = this[5];
  this[5] = *((void *)a2 + 5);
  *((void *)a2 + 5) = v7;
  uint64_t v8 = this[6];
  this[6] = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::MotionLoiAltitudeData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7740;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

{
  uint64_t v4;

  *(void *)a1 = off_1003A7740;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v11 = off_1003A7740;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    long long v6 = *(_OWORD *)(a2 + 32);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    long long v12 = v7;
    long long v13 = v8;
    long long v9 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v6;
    *(void *)(a1 + 48) = v5;
    long long v14 = v9;
    CMMsl::MotionLoiAltitudeData::~MotionLoiAltitudeData((CMMsl::MotionLoiAltitudeData *)&v11);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiAltitudeData::formatText(CMMsl::MotionLoiAltitudeData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "loiAltitude", v7);
  }
  long long v8 = (double *)*((void *)this + 4);
  long long v9 = (double *)*((void *)this + 5);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(a2, "loiVerticalUncertainty", v10);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MotionLoiAltitudeData::readFrom(CMMsl::MotionLoiAltitudeData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    long long v8 = (void **)((char *)this + 32);
    long long v9 = (char *)this + 48;
    double v10 = (void **)((char *)this + 8);
    uint64_t v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)a2 + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 2) {
        break;
      }
      if (v25 == 1)
      {
        if (v24 != 2)
        {
          char v55 = (char *)*((void *)this + 2);
          unint64_t v54 = *((void *)this + 3);
          if ((unint64_t)v55 >= v54)
          {
            char v59 = (char *)*v10;
            uint64_t v60 = (v55 - (unsigned char *)*v10) >> 3;
            unint64_t v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61) {
LABEL_122:
            }
              sub_10000EE98();
            uint64_t v62 = v54 - (void)v59;
            if (v62 >> 2 > v61) {
              unint64_t v61 = v62 >> 2;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              unsigned int v64 = (char *)sub_10000EEB0((uint64_t)v11, v63);
              char v59 = (char *)*((void *)this + 1);
              char v55 = (char *)*((void *)this + 2);
            }
            else
            {
              unsigned int v64 = 0;
            }
            char v71 = &v64[8 * v60];
            *(void *)char v71 = 0;
            unsigned int v56 = v71 + 8;
            while (v55 != v59)
            {
              uint64_t v72 = *((void *)v55 - 1);
              v55 -= 8;
              *((void *)v71 - 1) = v72;
              v71 -= 8;
            }
            *((void *)this + 1) = v71;
            *((void *)this + 2) = v56;
            *((void *)this + 3) = &v64[8 * v63];
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(void *)char v55 = 0;
            unsigned int v56 = v55 + 8;
          }
          *((void *)this + 2) = v56;
LABEL_110:
          unint64_t v75 = *((void *)a2 + 1);
          if (v75 <= 0xFFFFFFFFFFFFFFF7 && v75 + 8 <= *((void *)a2 + 2))
          {
            *(v56 - 1) = *(void *)(*(void *)a2 + v75);
            *((void *)a2 + 1) += 8;
          }
          else
          {
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_114;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v26 = *((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        while (v26 < v27 && !*((unsigned char *)a2 + 24))
        {
          uint64_t v29 = (char *)*((void *)this + 2);
          unint64_t v28 = *((void *)this + 3);
          if ((unint64_t)v29 >= v28)
          {
            uint64_t v31 = (char *)*v10;
            uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_122;
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              uint64_t v36 = (char *)sub_10000EEB0((uint64_t)v11, v35);
              uint64_t v31 = (char *)*((void *)this + 1);
              uint64_t v29 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v36 = 0;
            }
            double v37 = &v36[8 * v32];
            *(void *)double v37 = 0;
            uint64_t v30 = v37 + 8;
            while (v29 != v31)
            {
              uint64_t v38 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *((void *)this + 1) = v37;
            *((void *)this + 2) = v30;
            *((void *)this + 3) = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)uint64_t v29 = 0;
            uint64_t v30 = v29 + 8;
          }
          *((void *)this + 2) = v30;
          unint64_t v39 = *((void *)a2 + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)a2 + 2)) {
            goto LABEL_78;
          }
          *(v30 - 1) = *(void *)(*(void *)a2 + v39);
          unint64_t v27 = *((void *)a2 + 2);
          unint64_t v26 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v26;
        }
LABEL_79:
        PB::Reader::recallMark();
        goto LABEL_114;
      }
      if ((PB::Reader::skip(a2, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_114:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      char v58 = (char *)*((void *)this + 5);
      unint64_t v57 = *((void *)this + 6);
      if ((unint64_t)v58 >= v57)
      {
        unint64_t v65 = (char *)*v8;
        uint64_t v66 = (v58 - (unsigned char *)*v8) >> 3;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 61) {
LABEL_123:
        }
          sub_10000EE98();
        uint64_t v68 = v57 - (void)v65;
        if (v68 >> 2 > v67) {
          unint64_t v67 = v68 >> 2;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          char v70 = (char *)sub_10000EEB0((uint64_t)v9, v69);
          unint64_t v65 = (char *)*((void *)this + 4);
          char v58 = (char *)*((void *)this + 5);
        }
        else
        {
          char v70 = 0;
        }
        unint64_t v73 = &v70[8 * v66];
        *(void *)unint64_t v73 = 0;
        unsigned int v56 = v73 + 8;
        while (v58 != v65)
        {
          uint64_t v74 = *((void *)v58 - 1);
          v58 -= 8;
          *((void *)v73 - 1) = v74;
          v73 -= 8;
        }
        *((void *)this + 4) = v73;
        *((void *)this + 5) = v56;
        *((void *)this + 6) = &v70[8 * v69];
        if (v65) {
          operator delete(v65);
        }
      }
      else
      {
        *(void *)char v58 = 0;
        unsigned int v56 = v58 + 8;
      }
      *((void *)this + 5) = v56;
      goto LABEL_110;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v40 = *((void *)a2 + 1);
    unint64_t v41 = *((void *)a2 + 2);
    while (v40 < v41 && !*((unsigned char *)a2 + 24))
    {
      double v43 = (char *)*((void *)this + 5);
      unint64_t v42 = *((void *)this + 6);
      if ((unint64_t)v43 >= v42)
      {
        unint64_t v45 = (char *)*v8;
        uint64_t v46 = (v43 - (unsigned char *)*v8) >> 3;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61) {
          goto LABEL_123;
        }
        uint64_t v48 = v42 - (void)v45;
        if (v48 >> 2 > v47) {
          unint64_t v47 = v48 >> 2;
        }
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49)
        {
          char v50 = (char *)sub_10000EEB0((uint64_t)v9, v49);
          unint64_t v45 = (char *)*((void *)this + 4);
          double v43 = (char *)*((void *)this + 5);
        }
        else
        {
          char v50 = 0;
        }
        int v51 = &v50[8 * v46];
        *(void *)int v51 = 0;
        char v44 = v51 + 8;
        while (v43 != v45)
        {
          uint64_t v52 = *((void *)v43 - 1);
          v43 -= 8;
          *((void *)v51 - 1) = v52;
          v51 -= 8;
        }
        *((void *)this + 4) = v51;
        *((void *)this + 5) = v44;
        *((void *)this + 6) = &v50[8 * v49];
        if (v45) {
          operator delete(v45);
        }
      }
      else
      {
        *(void *)double v43 = 0;
        char v44 = v43 + 8;
      }
      *((void *)this + 5) = v44;
      unint64_t v53 = *((void *)a2 + 1);
      if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)a2 + 2))
      {
LABEL_78:
        *((unsigned char *)a2 + 24) = 1;
        goto LABEL_79;
      }
      *(v44 - 1) = *(void *)(*(void *)a2 + v53);
      unint64_t v41 = *((void *)a2 + 2);
      unint64_t v40 = *((void *)a2 + 1) + 8;
      *((void *)a2 + 1) = v40;
    }
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiAltitudeData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(double **)(this + 8);
  uint64_t v5 = *(double **)(this + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  long long v8 = *(double **)(v3 + 32);
  double v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    double v9 = *v8++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  return this;
}

uint64_t CMMsl::MotionLoiAltitudeData::hash_value(CMMsl::MotionLoiAltitudeData *this)
{
  uint64_t v1 = PBHashBytes();
  return PBHashBytes() ^ v1;
}

void CMMsl::MotionLoiData::~MotionLoiData(CMMsl::MotionLoiData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionLoiData::MotionLoiData(uint64_t this, const CMMsl::MotionLoiData *a2)
{
  *(void *)this = off_1003A7778;
  *(_DWORD *)(this + 84) = -1;
  *(_DWORD *)(this + 92) = 0;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x40) != 0)
  {
    uint64_t v4 = *((void *)a2 + 7);
    __int16 v3 = 64;
    *(_WORD *)(this + 92) = 64;
    *(void *)(this + 56) = v4;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 6);
    v3 |= 0x20u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 46);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    uint64_t v6 = *((void *)a2 + 3);
    v3 |= 4u;
    *(_WORD *)(this + 92) = v3;
    *(void *)(this + 24) = v6;
    __int16 v2 = *((_WORD *)a2 + 46);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v8 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v9 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 80) = v9;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v10 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 72) = v10;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v11 = *((void *)a2 + 8);
  v3 |= 0x80u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 92) = v3;
  *(_DWORD *)(this + 84) = v13;
  __int16 v2 = *((_WORD *)a2 + 46);
  if ((v2 & 8) == 0)
  {
LABEL_15:
    if ((v2 & 0x800) == 0) {
      return this;
    }
LABEL_26:
    char v15 = *((unsigned char *)a2 + 88);
    *(_WORD *)(this + 92) = v3 | 0x800;
    *(unsigned char *)(this + 88) = v15;
    return this;
  }
LABEL_25:
  uint64_t v14 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 92) = v3;
  *(void *)(this + 32) = v14;
  if ((*((_WORD *)a2 + 46) & 0x800) != 0) {
    goto LABEL_26;
  }
  return this;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, const CMMsl::MotionLoiData *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::MotionLoiData *a2, CMMsl::MotionLoiData *a3)
{
  int v3 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v5;
  uint64_t v6 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v9;
  uint64_t v10 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v12;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  LOBYTE(v3) = *((unsigned char *)this + 88);
  *((unsigned char *)this + 88) = *((unsigned char *)a2 + 88);
  *((unsigned char *)a2 + 88) = v3;
  return result;
}

double CMMsl::MotionLoiData::MotionLoiData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7778;
  *(_DWORD *)(a1 + 84) = -1;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  double result = *(double *)(a2 + 32);
  *(double *)(a1 + 32) = result;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return result;
}

CMMsl *CMMsl::MotionLoiData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionLoiData::MotionLoiData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionLoiData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionLoiData::formatText(CMMsl::MotionLoiData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 46);
  if (v5)
  {
    PB::TextFormatter::format(a2, "arrivalDate", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 46);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((*((_WORD *)this + 46) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 20));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "confidenceOfGeoLocation", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "departureDate", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distanceToLoi", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "hashedLatLong", *((unsigned char *)this + 88));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "horizontalAccuracy", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "latitude", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "longitude", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 46);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "uncertaintyOfGeoLocation", *((double *)this + 8));
  if ((*((_WORD *)this + 46) & 0x100) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(a2, "withinDistance", *((double *)this + 9));
LABEL_14:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionLoiData::readFrom(CMMsl::MotionLoiData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 46) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 2u:
              *((_WORD *)this + 46) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 3u:
              *((_WORD *)this + 46) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 4u:
              *((_WORD *)this + 46) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 5u:
              *((_WORD *)this + 46) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 6u:
              *((_WORD *)this + 46) |= 0x200u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_89;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_88;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_89;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *((_DWORD *)this + 20) = v25;
              goto LABEL_95;
            case 7u:
              *((_WORD *)this + 46) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 8u:
              *((_WORD *)this + 46) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 46) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_64;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_84;
            case 0xAu:
              *((_WORD *)this + 46) |= 0x400u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_94;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_93;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *((_DWORD *)this + 21) = v31;
LABEL_95:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *((_WORD *)this + 46) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
LABEL_84:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *((_WORD *)this + 46) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 88) = v34;
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_95;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionLoiData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 92);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 3u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 6u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 7u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 8u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    this = PB::Writer::write(a2, *(double *)(v3 + 32), 0xBu);
    if ((*(_WORD *)(v3 + 92) & 0x800) == 0) {
      return this;
    }
    goto LABEL_25;
  }
LABEL_23:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x800) == 0) {
    return this;
  }
LABEL_25:
  char v5 = *(unsigned char *)(v3 + 88);

  return PB::Writer::write(a2, v5, 0xCu);
}

uint64_t CMMsl::MotionLoiData::hash_value(CMMsl::MotionLoiData *this)
{
  __int16 v1 = *((_WORD *)this + 46);
  if ((v1 & 0x40) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
LABEL_33:
    double v3 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_6;
    }
LABEL_34:
    double v4 = 0.0;
    if (v1) {
      goto LABEL_9;
    }
LABEL_35:
    double v5 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_12;
    }
LABEL_36:
    double v6 = 0.0;
    if ((*((_WORD *)this + 46) & 0x200) != 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
  double v2 = *((double *)this + 7);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_33;
  }
LABEL_3:
  double v3 = *((double *)this + 6);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_34;
  }
LABEL_6:
  double v4 = *((double *)this + 3);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_9:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_36;
  }
LABEL_12:
  double v6 = *((double *)this + 5);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x200) != 0)
  {
LABEL_15:
    uint64_t v7 = *((unsigned int *)this + 20);
    if ((*((_WORD *)this + 46) & 0x100) != 0) {
      goto LABEL_16;
    }
LABEL_38:
    double v8 = 0.0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_19;
    }
LABEL_39:
    double v9 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_40:
    double v10 = 0.0;
    if ((*((_WORD *)this + 46) & 0x400) != 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v7 = 0;
  if ((*((_WORD *)this + 46) & 0x100) == 0) {
    goto LABEL_38;
  }
LABEL_16:
  double v8 = *((double *)this + 9);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_39;
  }
LABEL_19:
  double v9 = *((double *)this + 8);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_40;
  }
LABEL_22:
  double v10 = *((double *)this + 2);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 46) & 0x400) != 0)
  {
LABEL_25:
    uint64_t v11 = *((int *)this + 21);
    if ((v1 & 8) != 0) {
      goto LABEL_26;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t v11 = 0;
  if ((v1 & 8) != 0)
  {
LABEL_26:
    double v12 = *((double *)this + 4);
    if (v12 == 0.0) {
      double v12 = 0.0;
    }
    if ((*((_WORD *)this + 46) & 0x800) != 0) {
      goto LABEL_29;
    }
LABEL_43:
    uint64_t v13 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ v13;
  }
LABEL_42:
  double v12 = 0.0;
  if ((*((_WORD *)this + 46) & 0x800) == 0) {
    goto LABEL_43;
  }
LABEL_29:
  uint64_t v13 = *((unsigned __int8 *)this + 88);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ *(void *)&v12 ^ v13;
}

void CMMsl::MotionStateUpdate::~MotionStateUpdate(CMMsl::MotionStateUpdate *this)
{
  *(void *)this = off_1003A77B0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionStateUpdate::~MotionStateUpdate(this);

  operator delete();
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t this, const CMMsl::MotionStateUpdate *a2)
{
  *(void *)this = off_1003A77B0;
  *(void *)(this + 32) = 0;
  *(void *)(this + 192) = 0;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x8000) != 0)
  {
    int v4 = *((_DWORD *)a2 + 25);
    uint64_t v3 = 0x8000;
    *(void *)(this + 192) = 0x8000;
    *(_DWORD *)(this + 100) = v4;
    uint64_t v2 = *((void *)a2 + 24);
    if ((v2 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 0x100) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 18);
    v3 |= 0x100uLL;
    *(void *)(this + 192) = v3;
    *(_DWORD *)(this + 72) = v5;
    uint64_t v2 = *((void *)a2 + 24);
  }
LABEL_6:
  if ((v2 & 0x10000) != 0)
  {
    int v9 = *((_DWORD *)a2 + 26);
    v3 |= 0x10000uLL;
    *(void *)(this + 192) = v3;
    *(_DWORD *)(this + 104) = v9;
    uint64_t v2 = *((void *)a2 + 24);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_49;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  int v10 = *((_DWORD *)a2 + 27);
  v3 |= 0x20000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 108) = v10;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  int v11 = *((_DWORD *)a2 + 21);
  v3 |= 0x800uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 84) = v11;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  int v12 = *((_DWORD *)a2 + 37);
  v3 |= 0x8000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 148) = v12;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v13 = *((_DWORD *)a2 + 23);
  v3 |= 0x2000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 92) = v13;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  int v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x1000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 88) = v14;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v15 = *((_DWORD *)a2 + 34);
  v3 |= 0x1000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 136) = v15;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v16 = *((void *)a2 + 5);
  v3 |= 8uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 40) = v16;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 1) == 0)
  {
LABEL_15:
    if ((v2 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v17 = *((void *)a2 + 1);
  v3 |= 1uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 8) = v17;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 4) == 0)
  {
LABEL_16:
    if ((v2 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v18 = *((void *)a2 + 3);
  v3 |= 4uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 24) = v18;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 2) == 0)
  {
LABEL_17:
    if ((v2 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v19 = *((void *)a2 + 2);
  v3 |= 2uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 16) = v19;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x80) == 0)
  {
LABEL_18:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v20 = *((_DWORD *)a2 + 17);
  v3 |= 0x80uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 68) = v20;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v21 = *((_DWORD *)a2 + 39);
  v3 |= 0x20000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 156) = v21;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  int v22 = *((_DWORD *)a2 + 36);
  v3 |= 0x4000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 144) = v22;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x4000) == 0)
  {
LABEL_21:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v23 = *((_DWORD *)a2 + 24);
  v3 |= 0x4000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 96) = v23;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x400000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v24 = *((_DWORD *)a2 + 32);
  v3 |= 0x400000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 128) = v24;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x200000) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v25 = *((_DWORD *)a2 + 31);
  v3 |= 0x200000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 124) = v25;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v26 = *((_DWORD *)a2 + 33);
  v3 |= 0x800000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 132) = v26;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x10) == 0)
  {
LABEL_25:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v27 = *((void *)a2 + 6);
  v3 |= 0x10uLL;
  *(void *)(this + 192) = v3;
  *(void *)(this + 48) = v27;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  int v28 = *((_DWORD *)a2 + 45);
  v3 |= 0x800000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 180) = v28;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_27:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v29 = *((_DWORD *)a2 + 40);
  v3 |= 0x40000000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 160) = v29;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x100000) == 0)
  {
LABEL_28:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  int v30 = *((_DWORD *)a2 + 30);
  v3 |= 0x100000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 120) = v30;
  uint64_t v2 = *((void *)a2 + 24);
  if ((v2 & 0x80000) == 0)
  {
LABEL_29:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_69:
  int v31 = *((_DWORD *)a2 + 29);
  v3 |= 0x80000uLL;
  *(void *)(this + 192) = v3;
  *(_DWORD *)(this + 116) = v31;
  if ((*((void *)a2 + 24) & 0x40000) != 0)
  {
LABEL_30:
    int v6 = *((_DWORD *)a2 + 28);
    *(void *)(this + 192) = v3 | 0x40000;
    *(_DWORD *)(this + 112) = v6;
  }
LABEL_31:
  if (*((void *)a2 + 4)) {
    operator new();
  }
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x400) != 0)
  {
    int v32 = *((_DWORD *)a2 + 20);
    *(void *)(this + 192) |= 0x400uLL;
    *(_DWORD *)(this + 80) = v32;
    uint64_t v7 = *((void *)a2 + 24);
    if ((v7 & 0x200) == 0)
    {
LABEL_35:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_73;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_35;
  }
  int v33 = *((_DWORD *)a2 + 19);
  *(void *)(this + 192) |= 0x200uLL;
  *(_DWORD *)(this + 76) = v33;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v7 & 0x1000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_74;
  }
LABEL_73:
  int v34 = *((_DWORD *)a2 + 35);
  *(void *)(this + 192) |= 0x2000000uLL;
  *(_DWORD *)(this + 140) = v34;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v7 & 0x20) == 0) {
      goto LABEL_38;
    }
    goto LABEL_75;
  }
LABEL_74:
  int v35 = *((_DWORD *)a2 + 46);
  *(void *)(this + 192) |= 0x1000000000uLL;
  *(_DWORD *)(this + 184) = v35;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_38:
    if ((v7 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v36 = *((void *)a2 + 7);
  *(void *)(this + 192) |= 0x20uLL;
  *(void *)(this + 56) = v36;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_77;
  }
LABEL_76:
  int v37 = *((_DWORD *)a2 + 38);
  *(void *)(this + 192) |= 0x10000000uLL;
  *(_DWORD *)(this + 152) = v37;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x40) == 0) {
      goto LABEL_41;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v38 = *((_DWORD *)a2 + 47);
  *(void *)(this + 192) |= 0x2000000000uLL;
  *(_DWORD *)(this + 188) = v38;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x40) == 0)
  {
LABEL_41:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v39 = *((_DWORD *)a2 + 16);
  *(void *)(this + 192) |= 0x40uLL;
  *(_DWORD *)(this + 64) = v39;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v7 & 0x100000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v40 = *((_DWORD *)a2 + 41);
  *(void *)(this + 192) |= 0x80000000uLL;
  *(_DWORD *)(this + 164) = v40;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x100000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x200000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v41 = *((_DWORD *)a2 + 42);
  *(void *)(this + 192) |= (unint64_t)&_mh_execute_header;
  *(_DWORD *)(this + 168) = v41;
  uint64_t v7 = *((void *)a2 + 24);
  if ((v7 & 0x200000000) == 0)
  {
LABEL_44:
    if ((v7 & 0x400000000) == 0) {
      return this;
    }
    goto LABEL_45;
  }
LABEL_81:
  int v42 = *((_DWORD *)a2 + 43);
  *(void *)(this + 192) |= 0x200000000uLL;
  *(_DWORD *)(this + 172) = v42;
  if ((*((void *)a2 + 24) & 0x400000000) == 0) {
    return this;
  }
LABEL_45:
  int v8 = *((_DWORD *)a2 + 44);
  *(void *)(this + 192) |= 0x400000000uLL;
  *(_DWORD *)(this + 176) = v8;
  return this;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, const CMMsl::MotionStateUpdate *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v5, v3);
    CMMsl::MotionStateUpdate::~MotionStateUpdate((CMMsl::MotionStateUpdate *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MotionStateUpdate *a2, CMMsl::MotionStateUpdate *a3)
{
  uint64_t v3 = *((void *)this + 24);
  *((void *)this + 24) = *((void *)a2 + 24);
  *((void *)a2 + 24) = v3;
  LODWORD(v3) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  LODWORD(v3) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  LODWORD(v3) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v3;
  LODWORD(v3) = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  LODWORD(v3) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v3;
  LODWORD(v3) = *((_DWORD *)this + 37);
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  *((_DWORD *)a2 + 37) = v3;
  LODWORD(v3) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v3;
  LODWORD(v3) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v3;
  LODWORD(v3) = *((_DWORD *)this + 34);
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  *((_DWORD *)a2 + 34) = v3;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)a2 + 4);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)this + 4) = v6;
  *((void *)a2 + 3) = v4;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v7;
  LODWORD(v7) = *((_DWORD *)this + 36);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_DWORD *)a2 + 36) = v7;
  uint64_t v8 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v8;
  LODWORD(v8) = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v8;
  LODWORD(v8) = *((_DWORD *)this + 40);
  *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
  *((_DWORD *)a2 + 40) = v8;
  LODWORD(v8) = *((_DWORD *)this + 30);
  *((_DWORD *)this + 30) = *((_DWORD *)a2 + 30);
  *((_DWORD *)a2 + 30) = v8;
  LODWORD(v8) = *((_DWORD *)this + 29);
  *((_DWORD *)this + 29) = *((_DWORD *)a2 + 29);
  *((_DWORD *)a2 + 29) = v8;
  LODWORD(v8) = *((_DWORD *)this + 28);
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  LODWORD(v10) = *((_DWORD *)this + 39);
  *((_DWORD *)this + 39) = *((_DWORD *)a2 + 39);
  *((_DWORD *)a2 + 39) = v10;
  LODWORD(v10) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v10;
  LODWORD(v10) = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = *((_DWORD *)a2 + 32);
  *((_DWORD *)a2 + 32) = v10;
  LODWORD(v10) = *((_DWORD *)this + 31);
  *((_DWORD *)this + 31) = *((_DWORD *)a2 + 31);
  *((_DWORD *)a2 + 31) = v10;
  LODWORD(v10) = *((_DWORD *)this + 33);
  *((_DWORD *)this + 33) = *((_DWORD *)a2 + 33);
  *((_DWORD *)a2 + 33) = v10;
  *((_DWORD *)a2 + 28) = v8;
  *((void *)a2 + 4) = v5;
  LODWORD(v10) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v10;
  LODWORD(v10) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v10;
  LODWORD(v10) = *((_DWORD *)this + 35);
  *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
  *((_DWORD *)a2 + 35) = v10;
  LODWORD(v8) = *((_DWORD *)this + 46);
  *((_DWORD *)this + 46) = *((_DWORD *)a2 + 46);
  *((_DWORD *)a2 + 46) = v8;
  uint64_t v11 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v11;
  LODWORD(v11) = *((_DWORD *)this + 38);
  *((_DWORD *)this + 38) = *((_DWORD *)a2 + 38);
  *((_DWORD *)a2 + 38) = v11;
  LODWORD(v11) = *((_DWORD *)this + 47);
  *((_DWORD *)this + 47) = *((_DWORD *)a2 + 47);
  *((_DWORD *)a2 + 47) = v11;
  LODWORD(v11) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v11;
  LODWORD(v10) = *((_DWORD *)this + 41);
  *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
  *((_DWORD *)a2 + 41) = v10;
  LODWORD(v10) = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v10;
  float result = *((float *)this + 43);
  *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
  *((float *)a2 + 43) = result;
  LODWORD(v11) = *((_DWORD *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_DWORD *)a2 + 44) = v11;
  return result;
}

uint64_t CMMsl::MotionStateUpdate::MotionStateUpdate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A77B0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(void *)(a1 + 32) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2 + 188);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  return a1;
}

CMMsl *CMMsl::MotionStateUpdate::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::MotionStateUpdate::MotionStateUpdate((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::MotionStateUpdate *)v5, v3);
    CMMsl::MotionStateUpdate::~MotionStateUpdate((CMMsl::MotionStateUpdate *)v5);
  }
  return a1;
}

uint64_t CMMsl::MotionStateUpdate::formatText(CMMsl::MotionStateUpdate *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(a2, "alsLux", *((_DWORD *)this + 16));
    uint64_t v5 = *((void *)this + 24);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "caltype", *((_DWORD *)this + 17));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "confidence", *((_DWORD *)this + 18));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "drivingArmLikelihoodSum", *((float *)this + 19));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(a2, "drivingStowedLikelihoodSum", *((float *)this + 20));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(a2, "exitState", *((_DWORD *)this + 21));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(a2, "hidTimestamp", *((double *)this + 1));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(a2, "isMoving", *((_DWORD *)this + 22));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(a2, "isVehicular", *((_DWORD *)this + 23));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(a2, "machineFrequency", *((float *)this + 24));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(a2, "motionType", *((_DWORD *)this + 25));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(a2, "mounted", *((_DWORD *)this + 26));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(a2, "mountedConfidence", *((_DWORD *)this + 27));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(a2, "now", *((void *)this + 2));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(a2, "rawConfidence", *((_DWORD *)this + 28));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(a2, "rawIsVehicular", *((_DWORD *)this + 29));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(a2, "rawMotionType", *((_DWORD *)this + 30));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(a2, "rowStrokeAmplitude", *((float *)this + 31));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(a2, "rowStrokeFrequency", *((float *)this + 32));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(a2, "rowStrokePower", *((float *)this + 33));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(a2, "seq", *((_DWORD *)this + 34));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(a2, "ssLikelihoodSum", *((float *)this + 35));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(a2, "standing", *((_DWORD *)this + 36));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(a2, "startTime", *((void *)this + 3));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(a2, "turn", *((_DWORD *)this + 37));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(a2, "typeYouth", *((_DWORD *)this + 38));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(a2, "vectorMagnitude", *((float *)this + 39));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(a2, "vehicleExitState", *((_DWORD *)this + 40));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean0", *((float *)this + 41));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean1", *((float *)this + 42));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(a2, "vehicleProbabilityLongTermMean2", *((float *)this + 43));
  uint64_t v5 = *((void *)this + 24);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_77:
  PB::TextFormatter::format(a2, "vehicleType", *((_DWORD *)this + 44));
  if ((*((void *)this + 24) & 0x800000000) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(a2, "vehicularConfidence", *((_DWORD *)this + 45));
LABEL_35:
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "vehicularFlags");
  }
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "wallStartTime", *((double *)this + 5));
    uint64_t v7 = *((void *)this + 24);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_81;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(a2, "workoutDetectionTime", *((void *)this + 6));
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0) {
      goto LABEL_41;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(a2, "workoutDetectionType", *((_DWORD *)this + 46));
  uint64_t v7 = *((void *)this + 24);
  if ((v7 & 0x20) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_82:
  PB::TextFormatter::format(a2, "workoutEscalationTime", *((void *)this + 7));
  if ((*((void *)this + 24) & 0x2000000000) != 0) {
LABEL_42:
  }
    PB::TextFormatter::format(a2, "youthClassificationReason", *((_DWORD *)this + 47));
LABEL_43:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionStateUpdate::readFrom(CMMsl::MotionStateUpdate *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((void *)this + 24) |= 0x8000uLL;
          unint64_t v20 = *((void *)a2 + 1);
          unint64_t v21 = *((void *)a2 + 2);
          uint64_t v22 = *(void *)a2;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)a2 + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_445;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_246:
            LODWORD(v25) = 0;
            goto LABEL_445;
          }
          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v237 = v20 + 1;
              char v238 = *(unsigned char *)(v22 + v20);
              *((void *)a2 + 1) = v237;
              v25 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v20 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_246;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_445:
          *((_DWORD *)this + 25) = v25;
          goto LABEL_518;
        case 2u:
          *((void *)this + 24) |= 0x100uLL;
          unint64_t v29 = *((void *)a2 + 1);
          unint64_t v30 = *((void *)a2 + 2);
          uint64_t v31 = *(void *)a2;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)a2 + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_448;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_253:
            LODWORD(v34) = 0;
            goto LABEL_448;
          }
          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v241 = v29 + 1;
              char v242 = *(unsigned char *)(v31 + v29);
              *((void *)a2 + 1) = v241;
              v34 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v29 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_253;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_448:
          *((_DWORD *)this + 18) = v34;
          goto LABEL_518;
        case 3u:
          *((void *)this + 24) |= 0x10000uLL;
          unint64_t v37 = *((void *)a2 + 1);
          unint64_t v38 = *((void *)a2 + 2);
          uint64_t v39 = *(void *)a2;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)a2 + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_451;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_260:
            LODWORD(v42) = 0;
            goto LABEL_451;
          }
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v245 = v37 + 1;
              char v246 = *(unsigned char *)(v39 + v37);
              *((void *)a2 + 1) = v245;
              v42 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v37 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_260;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_451:
          *((_DWORD *)this + 26) = v42;
          goto LABEL_518;
        case 4u:
          *((void *)this + 24) |= 0x20000uLL;
          unint64_t v45 = *((void *)a2 + 1);
          unint64_t v46 = *((void *)a2 + 2);
          uint64_t v47 = *(void *)a2;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)a2 + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_454;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_267:
            LODWORD(v50) = 0;
            goto LABEL_454;
          }
          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v249 = v45 + 1;
              char v250 = *(unsigned char *)(v47 + v45);
              *((void *)a2 + 1) = v249;
              v50 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v45 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_267;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_454:
          *((_DWORD *)this + 27) = v50;
          goto LABEL_518;
        case 5u:
          *((void *)this + 24) |= 0x800uLL;
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          uint64_t v55 = *(void *)a2;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)a2 + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_457;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v58) = 0;
            goto LABEL_457;
          }
          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v253 = v53 + 1;
              char v254 = *(unsigned char *)(v55 + v53);
              *((void *)a2 + 1) = v253;
              v58 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v53 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_457:
          *((_DWORD *)this + 21) = v58;
          goto LABEL_518;
        case 6u:
          *((void *)this + 24) |= 0x8000000uLL;
          unint64_t v61 = *((void *)a2 + 1);
          unint64_t v62 = *((void *)a2 + 2);
          uint64_t v63 = *(void *)a2;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)a2 + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_460;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v66) = 0;
            goto LABEL_460;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v257 = v61 + 1;
              char v258 = *(unsigned char *)(v63 + v61);
              *((void *)a2 + 1) = v257;
              v66 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v61 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_460:
          *((_DWORD *)this + 37) = v66;
          goto LABEL_518;
        case 7u:
          *((void *)this + 24) |= 0x2000uLL;
          unint64_t v69 = *((void *)a2 + 1);
          unint64_t v70 = *((void *)a2 + 2);
          uint64_t v71 = *(void *)a2;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)a2 + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_463;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v74) = 0;
            goto LABEL_463;
          }
          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v261 = v69 + 1;
              char v262 = *(unsigned char *)(v71 + v69);
              *((void *)a2 + 1) = v261;
              v74 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v69 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_463:
          *((_DWORD *)this + 23) = v74;
          goto LABEL_518;
        case 8u:
          *((void *)this + 24) |= 0x1000uLL;
          unint64_t v77 = *((void *)a2 + 1);
          unint64_t v78 = *((void *)a2 + 2);
          uint64_t v79 = *(void *)a2;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)a2 + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_466;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_295:
            LODWORD(v82) = 0;
            goto LABEL_466;
          }
          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v265 = v77 + 1;
              char v266 = *(unsigned char *)(v79 + v77);
              *((void *)a2 + 1) = v265;
              v82 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v77 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_295;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_466:
          *((_DWORD *)this + 22) = v82;
          goto LABEL_518;
        case 9u:
          *((void *)this + 24) |= 0x1000000uLL;
          unint64_t v85 = *((void *)a2 + 1);
          unint64_t v86 = *((void *)a2 + 2);
          uint64_t v87 = *(void *)a2;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)a2 + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_469;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_302:
            LODWORD(v90) = 0;
            goto LABEL_469;
          }
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v269 = v85 + 1;
              char v270 = *(unsigned char *)(v87 + v85);
              *((void *)a2 + 1) = v269;
              v90 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v85 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_302;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_469:
          *((_DWORD *)this + 34) = v90;
          goto LABEL_518;
        case 0xAu:
          *((void *)this + 24) |= 8uLL;
          unint64_t v93 = *((void *)a2 + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v93);
          goto LABEL_93;
        case 0xBu:
          *((void *)this + 24) |= 1uLL;
          unint64_t v94 = *((void *)a2 + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v94);
LABEL_93:
          uint64_t v95 = *((void *)a2 + 1) + 8;
          goto LABEL_417;
        case 0xCu:
          *((void *)this + 24) |= 4uLL;
          unint64_t v96 = *((void *)a2 + 1);
          unint64_t v97 = *((void *)a2 + 2);
          uint64_t v98 = *(void *)a2;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)a2 + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_472;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_309:
            uint64_t v101 = 0;
            goto LABEL_472;
          }
          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              uint64_t v101 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v273 = v96 + 1;
              char v274 = *(unsigned char *)(v98 + v96);
              *((void *)a2 + 1) = v273;
              v101 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v96 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_309;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v101 = 0;
              }
            }
            break;
          }
LABEL_472:
          *((void *)this + 3) = v101;
          goto LABEL_518;
        case 0xDu:
          *((void *)this + 24) |= 2uLL;
          unint64_t v104 = *((void *)a2 + 1);
          unint64_t v105 = *((void *)a2 + 2);
          uint64_t v106 = *(void *)a2;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            char v107 = 0;
            unsigned int v108 = 0;
            uint64_t v109 = 0;
            do
            {
              unint64_t v110 = v104 + 1;
              *((void *)a2 + 1) = v104 + 1;
              char v111 = *(unsigned char *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_475;
              }
              v107 += 7;
              unint64_t v104 = v110;
              BOOL v14 = v108++ > 8;
            }
            while (!v14);
LABEL_316:
            uint64_t v109 = 0;
            goto LABEL_475;
          }
          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v109 = 0;
          if (v105 <= v104) {
            unint64_t v105 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              uint64_t v109 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v277 = v104 + 1;
              char v278 = *(unsigned char *)(v106 + v104);
              *((void *)a2 + 1) = v277;
              v109 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v104 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_316;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v109 = 0;
              }
            }
            break;
          }
LABEL_475:
          *((void *)this + 2) = v109;
          goto LABEL_518;
        case 0xEu:
          *((void *)this + 24) |= 0x80uLL;
          unint64_t v112 = *((void *)a2 + 1);
          unint64_t v113 = *((void *)a2 + 2);
          uint64_t v114 = *(void *)a2;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            char v115 = 0;
            unsigned int v116 = 0;
            uint64_t v117 = 0;
            do
            {
              unint64_t v118 = v112 + 1;
              *((void *)a2 + 1) = v112 + 1;
              char v119 = *(unsigned char *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0) {
                goto LABEL_478;
              }
              v115 += 7;
              unint64_t v112 = v118;
              BOOL v14 = v116++ > 8;
            }
            while (!v14);
LABEL_323:
            LODWORD(v117) = 0;
            goto LABEL_478;
          }
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v117 = 0;
          if (v113 <= v112) {
            unint64_t v113 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v113 == v112)
            {
              LODWORD(v117) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v281 = v112 + 1;
              char v282 = *(unsigned char *)(v114 + v112);
              *((void *)a2 + 1) = v281;
              v117 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v112 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_323;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v117) = 0;
              }
            }
            break;
          }
LABEL_478:
          *((_DWORD *)this + 17) = v117;
          goto LABEL_518;
        case 0xFu:
          *((void *)this + 24) |= 0x20000000uLL;
          unint64_t v120 = *((void *)a2 + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 39) = *(_DWORD *)(*(void *)a2 + v120);
          goto LABEL_416;
        case 0x10u:
          *((void *)this + 24) |= 0x4000000uLL;
          unint64_t v121 = *((void *)a2 + 1);
          unint64_t v122 = *((void *)a2 + 2);
          uint64_t v123 = *(void *)a2;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            char v124 = 0;
            unsigned int v125 = 0;
            uint64_t v126 = 0;
            do
            {
              unint64_t v127 = v121 + 1;
              *((void *)a2 + 1) = v121 + 1;
              char v128 = *(unsigned char *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0) {
                goto LABEL_481;
              }
              v124 += 7;
              unint64_t v121 = v127;
              BOOL v14 = v125++ > 8;
            }
            while (!v14);
LABEL_330:
            LODWORD(v126) = 0;
            goto LABEL_481;
          }
          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v126 = 0;
          if (v122 <= v121) {
            unint64_t v122 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v285 = v121 + 1;
              char v286 = *(unsigned char *)(v123 + v121);
              *((void *)a2 + 1) = v285;
              v126 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v121 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_330;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v126) = 0;
              }
            }
            break;
          }
LABEL_481:
          *((_DWORD *)this + 36) = v126;
          goto LABEL_518;
        case 0x11u:
          *((void *)this + 24) |= 0x4000uLL;
          unint64_t v129 = *((void *)a2 + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v129);
          goto LABEL_416;
        case 0x12u:
          *((void *)this + 24) |= 0x400000uLL;
          unint64_t v130 = *((void *)a2 + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 32) = *(_DWORD *)(*(void *)a2 + v130);
          goto LABEL_416;
        case 0x13u:
          *((void *)this + 24) |= 0x200000uLL;
          unint64_t v131 = *((void *)a2 + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 31) = *(_DWORD *)(*(void *)a2 + v131);
          goto LABEL_416;
        case 0x14u:
          *((void *)this + 24) |= 0x800000uLL;
          unint64_t v132 = *((void *)a2 + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 33) = *(_DWORD *)(*(void *)a2 + v132);
          goto LABEL_416;
        case 0x15u:
          *((void *)this + 24) |= 0x10uLL;
          unint64_t v133 = *((void *)a2 + 1);
          unint64_t v134 = *((void *)a2 + 2);
          uint64_t v135 = *(void *)a2;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)a2 + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_484;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_337:
            uint64_t v138 = 0;
            goto LABEL_484;
          }
          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              uint64_t v138 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v289 = v133 + 1;
              char v290 = *(unsigned char *)(v135 + v133);
              *((void *)a2 + 1) = v289;
              v138 |= (unint64_t)(v290 & 0x7F) << v287;
              if (v290 < 0)
              {
                v287 += 7;
                unint64_t v133 = v289;
                BOOL v14 = v288++ > 8;
                if (v14) {
                  goto LABEL_337;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v138 = 0;
              }
            }
            break;
          }
LABEL_484:
          *((void *)this + 6) = v138;
          goto LABEL_518;
        case 0x16u:
          *((void *)this + 24) |= 0x800000000uLL;
          unint64_t v141 = *((void *)a2 + 1);
          unint64_t v142 = *((void *)a2 + 2);
          uint64_t v143 = *(void *)a2;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)a2 + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_487;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_344:
            LODWORD(v146) = 0;
            goto LABEL_487;
          }
          char v291 = 0;
          unsigned int v292 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v293 = v141 + 1;
              char v294 = *(unsigned char *)(v143 + v141);
              *((void *)a2 + 1) = v293;
              v146 |= (unint64_t)(v294 & 0x7F) << v291;
              if (v294 < 0)
              {
                v291 += 7;
                unint64_t v141 = v293;
                BOOL v14 = v292++ > 8;
                if (v14) {
                  goto LABEL_344;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_487:
          *((_DWORD *)this + 45) = v146;
          goto LABEL_518;
        case 0x17u:
          *((void *)this + 24) |= 0x40000000uLL;
          unint64_t v149 = *((void *)a2 + 1);
          unint64_t v150 = *((void *)a2 + 2);
          uint64_t v151 = *(void *)a2;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)a2 + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_490;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_351:
            LODWORD(v154) = 0;
            goto LABEL_490;
          }
          char v295 = 0;
          unsigned int v296 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v297 = v149 + 1;
              char v298 = *(unsigned char *)(v151 + v149);
              *((void *)a2 + 1) = v297;
              v154 |= (unint64_t)(v298 & 0x7F) << v295;
              if (v298 < 0)
              {
                v295 += 7;
                unint64_t v149 = v297;
                BOOL v14 = v296++ > 8;
                if (v14) {
                  goto LABEL_351;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_490:
          *((_DWORD *)this + 40) = v154;
          goto LABEL_518;
        case 0x18u:
          *((void *)this + 24) |= 0x100000uLL;
          unint64_t v157 = *((void *)a2 + 1);
          unint64_t v158 = *((void *)a2 + 2);
          uint64_t v159 = *(void *)a2;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)a2 + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_493;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_358:
            LODWORD(v162) = 0;
            goto LABEL_493;
          }
          char v299 = 0;
          unsigned int v300 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v301 = v157 + 1;
              char v302 = *(unsigned char *)(v159 + v157);
              *((void *)a2 + 1) = v301;
              v162 |= (unint64_t)(v302 & 0x7F) << v299;
              if (v302 < 0)
              {
                v299 += 7;
                unint64_t v157 = v301;
                BOOL v14 = v300++ > 8;
                if (v14) {
                  goto LABEL_358;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_493:
          *((_DWORD *)this + 30) = v162;
          goto LABEL_518;
        case 0x19u:
          *((void *)this + 24) |= 0x80000uLL;
          unint64_t v165 = *((void *)a2 + 1);
          unint64_t v166 = *((void *)a2 + 2);
          uint64_t v167 = *(void *)a2;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            char v168 = 0;
            unsigned int v169 = 0;
            uint64_t v170 = 0;
            do
            {
              unint64_t v171 = v165 + 1;
              *((void *)a2 + 1) = v165 + 1;
              char v172 = *(unsigned char *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0) {
                goto LABEL_496;
              }
              v168 += 7;
              unint64_t v165 = v171;
              BOOL v14 = v169++ > 8;
            }
            while (!v14);
LABEL_365:
            LODWORD(v170) = 0;
            goto LABEL_496;
          }
          char v303 = 0;
          unsigned int v304 = 0;
          uint64_t v170 = 0;
          if (v166 <= v165) {
            unint64_t v166 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v305 = v165 + 1;
              char v306 = *(unsigned char *)(v167 + v165);
              *((void *)a2 + 1) = v305;
              v170 |= (unint64_t)(v306 & 0x7F) << v303;
              if (v306 < 0)
              {
                v303 += 7;
                unint64_t v165 = v305;
                BOOL v14 = v304++ > 8;
                if (v14) {
                  goto LABEL_365;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v170) = 0;
              }
            }
            break;
          }
LABEL_496:
          *((_DWORD *)this + 29) = v170;
          goto LABEL_518;
        case 0x1Au:
          *((void *)this + 24) |= 0x40000uLL;
          unint64_t v173 = *((void *)a2 + 1);
          unint64_t v174 = *((void *)a2 + 2);
          uint64_t v175 = *(void *)a2;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            char v176 = 0;
            unsigned int v177 = 0;
            uint64_t v178 = 0;
            do
            {
              unint64_t v179 = v173 + 1;
              *((void *)a2 + 1) = v173 + 1;
              char v180 = *(unsigned char *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0) {
                goto LABEL_499;
              }
              v176 += 7;
              unint64_t v173 = v179;
              BOOL v14 = v177++ > 8;
            }
            while (!v14);
LABEL_372:
            LODWORD(v178) = 0;
            goto LABEL_499;
          }
          char v307 = 0;
          unsigned int v308 = 0;
          uint64_t v178 = 0;
          if (v174 <= v173) {
            unint64_t v174 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v174 == v173)
            {
              LODWORD(v178) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v309 = v173 + 1;
              char v310 = *(unsigned char *)(v175 + v173);
              *((void *)a2 + 1) = v309;
              v178 |= (unint64_t)(v310 & 0x7F) << v307;
              if (v310 < 0)
              {
                v307 += 7;
                unint64_t v173 = v309;
                BOOL v14 = v308++ > 8;
                if (v14) {
                  goto LABEL_372;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v178) = 0;
              }
            }
            break;
          }
LABEL_499:
          *((_DWORD *)this + 28) = v178;
          goto LABEL_518;
        case 0x1Bu:
          operator new();
        case 0x1Cu:
          *((void *)this + 24) |= 0x400uLL;
          unint64_t v181 = *((void *)a2 + 1);
          if (v181 > 0xFFFFFFFFFFFFFFFBLL || v181 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v181);
          goto LABEL_416;
        case 0x1Du:
          *((void *)this + 24) |= 0x200uLL;
          unint64_t v182 = *((void *)a2 + 1);
          if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v182);
          goto LABEL_416;
        case 0x1Eu:
          *((void *)this + 24) |= 0x2000000uLL;
          unint64_t v183 = *((void *)a2 + 1);
          if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 35) = *(_DWORD *)(*(void *)a2 + v183);
          goto LABEL_416;
        case 0x1Fu:
          *((void *)this + 24) |= 0x1000000000uLL;
          unint64_t v184 = *((void *)a2 + 1);
          unint64_t v185 = *((void *)a2 + 2);
          uint64_t v186 = *(void *)a2;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            char v187 = 0;
            unsigned int v188 = 0;
            uint64_t v189 = 0;
            do
            {
              unint64_t v190 = v184 + 1;
              *((void *)a2 + 1) = v184 + 1;
              char v191 = *(unsigned char *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0) {
                goto LABEL_502;
              }
              v187 += 7;
              unint64_t v184 = v190;
              BOOL v14 = v188++ > 8;
            }
            while (!v14);
LABEL_379:
            LODWORD(v189) = 0;
            goto LABEL_502;
          }
          char v311 = 0;
          unsigned int v312 = 0;
          uint64_t v189 = 0;
          if (v185 <= v184) {
            unint64_t v185 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v185 == v184)
            {
              LODWORD(v189) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v313 = v184 + 1;
              char v314 = *(unsigned char *)(v186 + v184);
              *((void *)a2 + 1) = v313;
              v189 |= (unint64_t)(v314 & 0x7F) << v311;
              if (v314 < 0)
              {
                v311 += 7;
                unint64_t v184 = v313;
                BOOL v14 = v312++ > 8;
                if (v14) {
                  goto LABEL_379;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v189) = 0;
              }
            }
            break;
          }
LABEL_502:
          *((_DWORD *)this + 46) = v189;
          goto LABEL_518;
        case 0x20u:
          *((void *)this + 24) |= 0x20uLL;
          unint64_t v192 = *((void *)a2 + 1);
          unint64_t v193 = *((void *)a2 + 2);
          uint64_t v194 = *(void *)a2;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v197 = 0;
            do
            {
              unint64_t v198 = v192 + 1;
              *((void *)a2 + 1) = v192 + 1;
              char v199 = *(unsigned char *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_505;
              }
              v195 += 7;
              unint64_t v192 = v198;
              BOOL v14 = v196++ > 8;
            }
            while (!v14);
LABEL_386:
            uint64_t v197 = 0;
            goto LABEL_505;
          }
          char v315 = 0;
          unsigned int v316 = 0;
          uint64_t v197 = 0;
          if (v193 <= v192) {
            unint64_t v193 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v193 == v192)
            {
              uint64_t v197 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v317 = v192 + 1;
              char v318 = *(unsigned char *)(v194 + v192);
              *((void *)a2 + 1) = v317;
              v197 |= (unint64_t)(v318 & 0x7F) << v315;
              if (v318 < 0)
              {
                v315 += 7;
                unint64_t v192 = v317;
                BOOL v14 = v316++ > 8;
                if (v14) {
                  goto LABEL_386;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v197 = 0;
              }
            }
            break;
          }
LABEL_505:
          *((void *)this + 7) = v197;
          goto LABEL_518;
        case 0x21u:
          *((void *)this + 24) |= 0x10000000uLL;
          unint64_t v200 = *((void *)a2 + 1);
          unint64_t v201 = *((void *)a2 + 2);
          uint64_t v202 = *(void *)a2;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v205 = 0;
            do
            {
              unint64_t v206 = v200 + 1;
              *((void *)a2 + 1) = v200 + 1;
              char v207 = *(unsigned char *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0) {
                goto LABEL_508;
              }
              v203 += 7;
              unint64_t v200 = v206;
              BOOL v14 = v204++ > 8;
            }
            while (!v14);
LABEL_393:
            LODWORD(v205) = 0;
            goto LABEL_508;
          }
          char v319 = 0;
          unsigned int v320 = 0;
          uint64_t v205 = 0;
          if (v201 <= v200) {
            unint64_t v201 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v201 == v200)
            {
              LODWORD(v205) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v321 = v200 + 1;
              char v322 = *(unsigned char *)(v202 + v200);
              *((void *)a2 + 1) = v321;
              v205 |= (unint64_t)(v322 & 0x7F) << v319;
              if (v322 < 0)
              {
                v319 += 7;
                unint64_t v200 = v321;
                BOOL v14 = v320++ > 8;
                if (v14) {
                  goto LABEL_393;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v205) = 0;
              }
            }
            break;
          }
LABEL_508:
          *((_DWORD *)this + 38) = v205;
          goto LABEL_518;
        case 0x22u:
          *((void *)this + 24) |= 0x2000000000uLL;
          unint64_t v208 = *((void *)a2 + 1);
          unint64_t v209 = *((void *)a2 + 2);
          uint64_t v210 = *(void *)a2;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            char v211 = 0;
            unsigned int v212 = 0;
            uint64_t v213 = 0;
            do
            {
              unint64_t v214 = v208 + 1;
              *((void *)a2 + 1) = v208 + 1;
              char v215 = *(unsigned char *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0) {
                goto LABEL_511;
              }
              v211 += 7;
              unint64_t v208 = v214;
              BOOL v14 = v212++ > 8;
            }
            while (!v14);
LABEL_400:
            LODWORD(v213) = 0;
            goto LABEL_511;
          }
          char v323 = 0;
          unsigned int v324 = 0;
          uint64_t v213 = 0;
          if (v209 <= v208) {
            unint64_t v209 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v209 == v208)
            {
              LODWORD(v213) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v325 = v208 + 1;
              char v326 = *(unsigned char *)(v210 + v208);
              *((void *)a2 + 1) = v325;
              v213 |= (unint64_t)(v326 & 0x7F) << v323;
              if (v326 < 0)
              {
                v323 += 7;
                unint64_t v208 = v325;
                BOOL v14 = v324++ > 8;
                if (v14) {
                  goto LABEL_400;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v213) = 0;
              }
            }
            break;
          }
LABEL_511:
          *((_DWORD *)this + 47) = v213;
          goto LABEL_518;
        case 0x23u:
          *((void *)this + 24) |= 0x40uLL;
          unint64_t v216 = *((void *)a2 + 1);
          unint64_t v217 = *((void *)a2 + 2);
          uint64_t v218 = *(void *)a2;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            char v219 = 0;
            unsigned int v220 = 0;
            uint64_t v221 = 0;
            do
            {
              unint64_t v222 = v216 + 1;
              *((void *)a2 + 1) = v216 + 1;
              char v223 = *(unsigned char *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0) {
                goto LABEL_514;
              }
              v219 += 7;
              unint64_t v216 = v222;
              BOOL v14 = v220++ > 8;
            }
            while (!v14);
LABEL_407:
            LODWORD(v221) = 0;
            goto LABEL_514;
          }
          char v327 = 0;
          unsigned int v328 = 0;
          uint64_t v221 = 0;
          if (v217 <= v216) {
            unint64_t v217 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v217 == v216)
            {
              LODWORD(v221) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v329 = v216 + 1;
              char v330 = *(unsigned char *)(v218 + v216);
              *((void *)a2 + 1) = v329;
              v221 |= (unint64_t)(v330 & 0x7F) << v327;
              if (v330 < 0)
              {
                v327 += 7;
                unint64_t v216 = v329;
                BOOL v14 = v328++ > 8;
                if (v14) {
                  goto LABEL_407;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v221) = 0;
              }
            }
            break;
          }
LABEL_514:
          *((_DWORD *)this + 16) = v221;
          goto LABEL_518;
        case 0x24u:
          *((void *)this + 24) |= 0x80000000uLL;
          unint64_t v224 = *((void *)a2 + 1);
          if (v224 > 0xFFFFFFFFFFFFFFFBLL || v224 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 41) = *(_DWORD *)(*(void *)a2 + v224);
          goto LABEL_416;
        case 0x25u:
          *((void *)this + 24) |= (unint64_t)&_mh_execute_header;
          unint64_t v225 = *((void *)a2 + 1);
          if (v225 > 0xFFFFFFFFFFFFFFFBLL || v225 + 4 > *((void *)a2 + 2)) {
            goto LABEL_232;
          }
          *((_DWORD *)this + 42) = *(_DWORD *)(*(void *)a2 + v225);
          goto LABEL_416;
        case 0x26u:
          *((void *)this + 24) |= 0x200000000uLL;
          unint64_t v226 = *((void *)a2 + 1);
          if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 43) = *(_DWORD *)(*(void *)a2 + v226);
LABEL_416:
            uint64_t v95 = *((void *)a2 + 1) + 4;
LABEL_417:
            *((void *)a2 + 1) = v95;
          }
          else
          {
LABEL_232:
            *((unsigned char *)a2 + 24) = 1;
          }
          goto LABEL_518;
        case 0x27u:
          *((void *)this + 24) |= 0x400000000uLL;
          unint64_t v227 = *((void *)a2 + 1);
          unint64_t v228 = *((void *)a2 + 2);
          uint64_t v229 = *(void *)a2;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            char v230 = 0;
            unsigned int v231 = 0;
            uint64_t v232 = 0;
            do
            {
              unint64_t v233 = v227 + 1;
              *((void *)a2 + 1) = v227 + 1;
              char v234 = *(unsigned char *)(v229 + v227);
              v232 |= (unint64_t)(v234 & 0x7F) << v230;
              if ((v234 & 0x80) == 0) {
                goto LABEL_517;
              }
              v230 += 7;
              unint64_t v227 = v233;
              BOOL v14 = v231++ > 8;
            }
            while (!v14);
LABEL_414:
            LODWORD(v232) = 0;
            goto LABEL_517;
          }
          char v331 = 0;
          unsigned int v332 = 0;
          uint64_t v232 = 0;
          if (v228 <= v227) {
            unint64_t v228 = *((void *)a2 + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_518;
      }
      while (1)
      {
        if (v228 == v227)
        {
          LODWORD(v232) = 0;
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_517;
        }
        unint64_t v333 = v227 + 1;
        char v334 = *(unsigned char *)(v229 + v227);
        *((void *)a2 + 1) = v333;
        v232 |= (unint64_t)(v334 & 0x7F) << v331;
        if ((v334 & 0x80) == 0) {
          break;
        }
        v331 += 7;
        unint64_t v227 = v333;
        BOOL v14 = v332++ > 8;
        if (v14) {
          goto LABEL_414;
        }
      }
      if (*((unsigned char *)a2 + 24)) {
        LODWORD(v232) = 0;
      }
LABEL_517:
      *((_DWORD *)this + 44) = v232;
LABEL_518:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::VehicularFlagsData::VehicularFlagsData(uint64_t this)
{
  *(void *)this = off_1003A9AB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

{
  *(void *)this = off_1003A9AB0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CMMsl::MotionStateUpdate::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)(this + 192);
  if ((v4 & 0x8000) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 100), 1u);
    uint64_t v4 = *(void *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 72), 2u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 104), 3u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 108), 4u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 5u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 148), 6u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 7u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 8u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 136), 9u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 0xAu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_53:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xBu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }
LABEL_54:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 24), 0xCu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_55:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 16), 0xDu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }
LABEL_56:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 68), 0xEu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  this = PB::Writer::write(a2, *(float *)(v3 + 156), 0xFu);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 144), 0x10u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 0x11u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  this = PB::Writer::write(a2, *(float *)(v3 + 128), 0x12u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  this = PB::Writer::write(a2, *(float *)(v3 + 124), 0x13u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  this = PB::Writer::write(a2, *(float *)(v3 + 132), 0x14u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 48), 0x15u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }
LABEL_64:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 180), 0x16u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_65:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 160), 0x17u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_67;
  }
LABEL_66:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 120), 0x18u);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_67:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 116), 0x19u);
  if ((*(void *)(v3 + 192) & 0x40000) != 0) {
LABEL_27:
  }
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 112), 0x1Au);
LABEL_28:
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    this = PB::Writer::writeSubmessage(a2, v5, 0x1Bu);
  }
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x1Cu);
    uint64_t v6 = *(void *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x1Du);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  this = PB::Writer::write(a2, *(float *)(v3 + 140), 0x1Eu);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 184), 0x1Fu);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  this = PB::Writer::writeVarInt(a2, *(void *)(v3 + 56), 0x20u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 152), 0x21u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }
LABEL_75:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 188), 0x22u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_76:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 64), 0x23u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }
LABEL_77:
  this = PB::Writer::write(a2, *(float *)(v3 + 164), 0x24u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_41;
    }
LABEL_79:
    this = PB::Writer::write(a2, *(float *)(v3 + 172), 0x26u);
    if ((*(void *)(v3 + 192) & 0x400000000) == 0) {
      return this;
    }
    goto LABEL_80;
  }
LABEL_78:
  this = PB::Writer::write(a2, *(float *)(v3 + 168), 0x25u);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x200000000) != 0) {
    goto LABEL_79;
  }
LABEL_41:
  if ((v6 & 0x400000000) == 0) {
    return this;
  }
LABEL_80:
  unsigned int v7 = *(_DWORD *)(v3 + 176);

  return PB::Writer::writeVarInt(a2, v7, 0x27u);
}

BOOL CMMsl::VehicularFlagsData::operator==(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 20) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 0x10) == 0 || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 0x10) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 8) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 8) == 0 || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 8) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 2) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 2) == 0 || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 0x20) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 0x20) == 0 || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 0x20) != 0)
  {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 20) & 4) != 0)
  {
    if ((*(unsigned char *)(a2 + 20) & 4) == 0 || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 20) & 4) != 0)
  {
    return 0;
  }
  BOOL v2 = (*(unsigned char *)(a2 + 20) & 1) == 0;
  if (*(unsigned char *)(a1 + 20)) {
    return (*(unsigned char *)(a2 + 20) & 1) != 0 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
  }
  return v2;
}

unint64_t CMMsl::MotionStateUpdate::hash_value(CMMsl::MotionStateUpdate *this)
{
  __int16 v1 = this;
  uint64_t v2 = *((void *)this + 24);
  if ((v2 & 0x8000) != 0)
  {
    uint64_t v3 = *((unsigned int *)this + 25);
    if ((v2 & 0x100) != 0)
    {
LABEL_3:
      uint64_t v4 = *((unsigned int *)this + 18);
      if ((v2 & 0x10000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 0x100) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v4 = 0;
  if ((v2 & 0x10000) != 0)
  {
LABEL_4:
    uint64_t v5 = *((unsigned int *)this + 26);
    if ((v2 & 0x20000) != 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v5 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    uint64_t v6 = *((unsigned int *)this + 27);
    if ((v2 & 0x800) != 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v6 = 0;
  if ((v2 & 0x800) != 0)
  {
LABEL_6:
    uint64_t v7 = *((unsigned int *)this + 21);
    if ((v2 & 0x8000000) != 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v7 = 0;
  if ((v2 & 0x8000000) != 0)
  {
LABEL_7:
    uint64_t v8 = *((unsigned int *)this + 37);
    if ((v2 & 0x2000) != 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v8 = 0;
  if ((v2 & 0x2000) != 0)
  {
LABEL_8:
    uint64_t v9 = *((unsigned int *)this + 23);
    if ((v2 & 0x1000) != 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v9 = 0;
  if ((v2 & 0x1000) != 0)
  {
LABEL_9:
    uint64_t v10 = *((unsigned int *)this + 22);
    if ((v2 & 0x1000000) != 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = 0;
  if ((v2 & 0x1000000) != 0)
  {
LABEL_10:
    uint64_t v11 = *((unsigned int *)this + 34);
    if ((v2 & 8) != 0) {
      goto LABEL_11;
    }
LABEL_54:
    uint64_t v12 = 0;
    if (v2) {
      goto LABEL_15;
    }
LABEL_55:
    uint64_t v13 = 0;
    if ((v2 & 4) != 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_53:
  uint64_t v11 = 0;
  if ((v2 & 8) == 0) {
    goto LABEL_54;
  }
LABEL_11:
  if (*((double *)this + 5) == 0.0) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = *((void *)this + 5);
  }
  if ((v2 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_15:
  if (*((double *)this + 1) == 0.0) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)this + 1);
  }
  if ((v2 & 4) != 0)
  {
LABEL_19:
    uint64_t v14 = *((void *)this + 3);
    if ((v2 & 2) != 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_20:
    uint64_t v15 = *((void *)this + 2);
    if ((v2 & 0x80) != 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_21:
    uint64_t v16 = *((unsigned int *)this + 17);
    if ((v2 & 0x20000000) != 0) {
      goto LABEL_22;
    }
LABEL_59:
    uint64_t v18 = 0;
    if ((v2 & 0x4000000) != 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_58:
  uint64_t v16 = 0;
  if ((v2 & 0x20000000) == 0) {
    goto LABEL_59;
  }
LABEL_22:
  float v17 = *((float *)this + 39);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = LODWORD(v17);
  }
  if ((v2 & 0x4000000) != 0)
  {
LABEL_26:
    uint64_t v61 = *((unsigned int *)this + 36);
    if ((v2 & 0x4000) != 0) {
      goto LABEL_27;
    }
LABEL_61:
    uint64_t v71 = 0;
    if ((v2 & 0x400000) != 0) {
      goto LABEL_30;
    }
LABEL_62:
    uint64_t v70 = 0;
    if ((v2 & 0x200000) != 0) {
      goto LABEL_33;
    }
LABEL_63:
    uint64_t v69 = 0;
    if ((v2 & 0x800000) != 0) {
      goto LABEL_36;
    }
LABEL_64:
    uint64_t v68 = 0;
    if ((v2 & 0x10) != 0) {
      goto LABEL_39;
    }
    goto LABEL_65;
  }
LABEL_60:
  uint64_t v61 = 0;
  if ((v2 & 0x4000) == 0) {
    goto LABEL_61;
  }
LABEL_27:
  float v19 = *((float *)this + 24);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  uint64_t v71 = v20;
  if ((v2 & 0x400000) == 0) {
    goto LABEL_62;
  }
LABEL_30:
  float v21 = *((float *)this + 32);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  uint64_t v70 = v22;
  if ((v2 & 0x200000) == 0) {
    goto LABEL_63;
  }
LABEL_33:
  float v23 = *((float *)this + 31);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  uint64_t v69 = v24;
  if ((v2 & 0x800000) == 0) {
    goto LABEL_64;
  }
LABEL_36:
  float v25 = *((float *)this + 33);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  uint64_t v68 = v26;
  if ((v2 & 0x10) != 0)
  {
LABEL_39:
    uint64_t v67 = *((void *)this + 6);
    if ((v2 & 0x800000000) != 0) {
      goto LABEL_40;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v67 = 0;
  if ((v2 & 0x800000000) != 0)
  {
LABEL_40:
    uint64_t v66 = *((unsigned int *)this + 45);
    if ((v2 & 0x40000000) != 0) {
      goto LABEL_41;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v66 = 0;
  if ((v2 & 0x40000000) != 0)
  {
LABEL_41:
    uint64_t v65 = *((unsigned int *)this + 40);
    if ((v2 & 0x100000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v65 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_42:
    uint64_t v64 = *((unsigned int *)this + 30);
    if ((v2 & 0x80000) != 0) {
      goto LABEL_43;
    }
LABEL_69:
    uint64_t v63 = 0;
    if ((v2 & 0x40000) != 0) {
      goto LABEL_44;
    }
    goto LABEL_70;
  }
LABEL_68:
  uint64_t v64 = 0;
  if ((v2 & 0x80000) == 0) {
    goto LABEL_69;
  }
LABEL_43:
  uint64_t v63 = *((unsigned int *)this + 29);
  if ((v2 & 0x40000) != 0)
  {
LABEL_44:
    uint64_t v62 = *((unsigned int *)this + 28);
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v62 = 0;
LABEL_71:
  unint64_t v27 = *((void *)this + 4);
  if (v27)
  {
    uint64_t v57 = v8;
    uint64_t v58 = v9;
    uint64_t v28 = v3;
    uint64_t v60 = v11;
    uint64_t v29 = v4;
    uint64_t v59 = v13;
    uint64_t v30 = v5;
    uint64_t v55 = v14;
    uint64_t v56 = v16;
    uint64_t v31 = v6;
    uint64_t v32 = v15;
    uint64_t v33 = v7;
    uint64_t v34 = v12;
    unint64_t v35 = v1;
    unint64_t v27 = CMMsl::VehicularFlagsData::hash_value((CMMsl::VehicularFlagsData *)v27);
    __int16 v1 = v35;
    uint64_t v12 = v34;
    uint64_t v7 = v33;
    uint64_t v15 = v32;
    uint64_t v6 = v31;
    uint64_t v14 = v55;
    uint64_t v16 = v56;
    uint64_t v5 = v30;
    uint64_t v4 = v29;
    uint64_t v9 = v58;
    uint64_t v13 = v59;
    uint64_t v11 = v60;
    uint64_t v3 = v28;
    uint64_t v8 = v57;
  }
  if ((v2 & 0x400) == 0)
  {
    uint64_t v36 = 0;
    if ((v2 & 0x200) != 0) {
      goto LABEL_75;
    }
LABEL_99:
    uint64_t v38 = 0;
    if ((v2 & 0x2000000) != 0) {
      goto LABEL_78;
    }
LABEL_100:
    uint64_t v40 = 0;
    if ((v2 & 0x1000000000) != 0) {
      goto LABEL_81;
    }
    goto LABEL_101;
  }
  float v53 = *((float *)v1 + 20);
  uint64_t v36 = LODWORD(v53);
  if (v53 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v2 & 0x200) == 0) {
    goto LABEL_99;
  }
LABEL_75:
  float v37 = *((float *)v1 + 19);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v2 & 0x2000000) == 0) {
    goto LABEL_100;
  }
LABEL_78:
  float v39 = *((float *)v1 + 35);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v2 & 0x1000000000) != 0)
  {
LABEL_81:
    uint64_t v41 = *((unsigned int *)v1 + 46);
    if ((v2 & 0x20) != 0) {
      goto LABEL_82;
    }
    goto LABEL_102;
  }
LABEL_101:
  uint64_t v41 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_82:
    uint64_t v42 = *((void *)v1 + 7);
    if ((v2 & 0x10000000) != 0) {
      goto LABEL_83;
    }
    goto LABEL_103;
  }
LABEL_102:
  uint64_t v42 = 0;
  if ((v2 & 0x10000000) != 0)
  {
LABEL_83:
    uint64_t v43 = *((unsigned int *)v1 + 38);
    if ((v2 & 0x2000000000) != 0) {
      goto LABEL_84;
    }
    goto LABEL_104;
  }
LABEL_103:
  uint64_t v43 = 0;
  if ((v2 & 0x2000000000) != 0)
  {
LABEL_84:
    uint64_t v44 = *((unsigned int *)v1 + 47);
    if ((v2 & 0x40) != 0) {
      goto LABEL_85;
    }
    goto LABEL_105;
  }
LABEL_104:
  uint64_t v44 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_85:
    uint64_t v45 = *((unsigned int *)v1 + 16);
    if ((v2 & 0x80000000) != 0) {
      goto LABEL_86;
    }
LABEL_106:
    uint64_t v47 = 0;
    if ((v2 & 0x100000000) != 0) {
      goto LABEL_89;
    }
LABEL_107:
    uint64_t v49 = 0;
    if ((v2 & 0x200000000) != 0) {
      goto LABEL_92;
    }
    goto LABEL_108;
  }
LABEL_105:
  uint64_t v45 = 0;
  if ((v2 & 0x80000000) == 0) {
    goto LABEL_106;
  }
LABEL_86:
  float v46 = *((float *)v1 + 41);
  uint64_t v47 = LODWORD(v46);
  if (v46 == 0.0) {
    uint64_t v47 = 0;
  }
  if ((v2 & 0x100000000) == 0) {
    goto LABEL_107;
  }
LABEL_89:
  float v48 = *((float *)v1 + 42);
  uint64_t v49 = LODWORD(v48);
  if (v48 == 0.0) {
    uint64_t v49 = 0;
  }
  if ((v2 & 0x200000000) != 0)
  {
LABEL_92:
    float v50 = *((float *)v1 + 43);
    uint64_t v51 = LODWORD(v50);
    if (v50 == 0.0) {
      uint64_t v51 = 0;
    }
    if ((v2 & 0x400000000) != 0) {
      goto LABEL_95;
    }
LABEL_109:
    uint64_t v52 = 0;
    return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
  }
LABEL_108:
  uint64_t v51 = 0;
  if ((v2 & 0x400000000) == 0) {
    goto LABEL_109;
  }
LABEL_95:
  uint64_t v52 = *((unsigned int *)v1 + 44);
  return v4 ^ v3 ^ v5 ^ v6 ^ v7 ^ v8 ^ v9 ^ v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15 ^ v16 ^ v18 ^ v61 ^ v71 ^ v70 ^ v69 ^ v68 ^ v67 ^ v66 ^ v65 ^ v64 ^ v63 ^ v62 ^ v27 ^ v36 ^ v38 ^ v40 ^ v41 ^ v42 ^ v43 ^ v44 ^ v45 ^ v47 ^ v49 ^ v51 ^ v52;
}

uint64_t CMMsl::MotionStateUpdate::makeVehicularFlags(uint64_t this)
{
  if (!*(void *)(this + 32)) {
    operator new();
  }
  return this;
}

void CMMsl::MotionWifiAssociation::~MotionWifiAssociation(CMMsl::MotionWifiAssociation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::MotionWifiAssociation::MotionWifiAssociation(uint64_t this, const CMMsl::MotionWifiAssociation *a2)
{
  *(void *)this = off_1003A77E8;
  *(_DWORD *)(this + 12) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    char v2 = *((unsigned char *)a2 + 8);
    *(unsigned char *)(this + 12) = 1;
    *(unsigned char *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = off_1003A77E8;
    char v3 = *(unsigned char *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    char v5 = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v3;
    char v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  char v4;
  int v5;
  void (**v7)(CMMsl::MotionWifiAssociation *__hidden);
  char v8;
  int v9;

  if (a1 != a2)
  {
    uint64_t v7 = off_1003A77E8;
    char v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(unsigned char *)(a2 + 8);
    char v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    int v9 = v5;
    LOBYTE(v3) = *(unsigned char *)(a1 + 8);
    *(unsigned char *)(a1 + 8) = v4;
    char v8 = v3;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiAssociation *a2, CMMsl::MotionWifiAssociation *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  LOBYTE(v3) = *(unsigned char *)(this + 8);
  *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
  *((unsigned char *)a2 + 8) = v3;
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::formatText(CMMsl::MotionWifiAssociation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "isWifiAssociated", *((unsigned char *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiAssociation::readFrom(CMMsl::MotionWifiAssociation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)a2 + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)a2 + v2++);
          *((void *)a2 + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *((unsigned char *)this + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiAssociation::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(unsigned char *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::MotionWifiAssociation::hash_value(CMMsl::MotionWifiAssociation *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((unsigned __int8 *)this + 8);
  }
  else {
    return 0;
  }
}

void CMMsl::MotionWifiLocation::~MotionWifiLocation(CMMsl::MotionWifiLocation *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = off_1003A7820;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MotionWifiLocation::~MotionWifiLocation(this);

  operator delete();
}

void *CMMsl::MotionWifiLocation::MotionWifiLocation(void *this, const CMMsl::MotionWifiLocation *a2)
{
  *this = off_1003A7820;
  this[1] = 0;
  if (*((void *)a2 + 1)) {
    operator new();
  }
  return this;
}

const CMMsl::MotionWifiLocation *CMMsl::MotionWifiLocation::operator=(const CMMsl::MotionWifiLocation *a1, const CMMsl::MotionWifiLocation *a2)
{
  if (a1 != a2)
  {
    CMMsl::MotionWifiLocation::MotionWifiLocation(&v5, a2);
    uint64_t v3 = *((void *)a1 + 1);
    *((void *)a1 + 1) = v6;
    uint64_t v6 = v3;
    CMMsl::MotionWifiLocation::~MotionWifiLocation((CMMsl::MotionWifiLocation *)&v5);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::MotionWifiLocation *a2, CMMsl::MotionWifiLocation *a3)
{
  uint64_t v3 = *(void *)(this + 8);
  *(void *)(this + 8) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  return this;
}

void *CMMsl::MotionWifiLocation::MotionWifiLocation(void *a1, uint64_t a2)
{
  *a1 = off_1003A7820;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1003A7820;
  a1[1] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = a1[1];
  a1[1] = v3;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[0] = off_1003A7820;
    v6[1] = v4;
    CMMsl::MotionWifiLocation::~MotionWifiLocation((CMMsl::MotionWifiLocation *)v6);
  }
  return a1;
}

uint64_t CMMsl::MotionWifiLocation::formatText(CMMsl::MotionWifiLocation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = *((void *)this + 1);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MotionWifiLocation::readFrom(CMMsl::MotionWifiLocation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(a2, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)a2 + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MotionWifiLocation::writeTo(uint64_t this, PB::Writer *a2)
{
  unint64_t v2 = *(const PB::Base **)(this + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(a2, v2, 1u);
  }
  return this;
}

CMMsl::MotionGPSLocation *CMMsl::MotionWifiLocation::hash_value(CMMsl::MotionWifiLocation *this)
{
  uint64_t result = (CMMsl::MotionGPSLocation *)*((void *)this + 1);
  if (result) {
    return (CMMsl::MotionGPSLocation *)CMMsl::MotionGPSLocation::hash_value(result);
  }
  return result;
}

uint64_t CMMsl::MotionWifiLocation::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 8)) {
    operator new();
  }
  return this;
}

void CMMsl::MovementStats::~MovementStats(CMMsl::MovementStats *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::MovementStats::MovementStats(CMMsl::MovementStats *this, const CMMsl::MovementStats *a2)
{
  *(void *)this = off_1003A7858;
  *((_DWORD *)this + 3) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    float result = *((float *)a2 + 2);
    *((unsigned char *)this + 12) = 1;
    *((float *)this + 2) = result;
  }
  return result;
}

uint64_t CMMsl::MovementStats::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v7 = off_1003A7858;
    int v3 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(unsigned char *)(a2 + 12) & 1;
    int v9 = v4;
    int v5 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v3;
    int v8 = v5;
    PB::Base::~Base((PB::Base *)&v7);
  }
  return a1;
}

{
  int v3;
  int v4;
  int v5;
  int v6;
  void (**v8)(CMMsl::MovementStats *__hidden);
  int v9;
  int v10;

  if (a1 != a2)
  {
    int v8 = off_1003A7858;
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = 0;
    int v4 = *(_DWORD *)(a2 + 8);
    int v5 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = v3;
    unint64_t v10 = v5;
    uint64_t v6 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    int v9 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStats *a2, CMMsl::MovementStats *a3)
{
  int v3 = *((_DWORD *)this + 3);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  float result = *((float *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((float *)a2 + 2) = result;
  return result;
}

uint64_t CMMsl::MovementStats::formatText(CMMsl::MovementStats *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "walkingVariable01", *((float *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStats::readFrom(CMMsl::MovementStats *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
        {
          *((_DWORD *)this + 2) = *(_DWORD *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 4;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStats::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::write(a2, *(float *)(this + 8), 1u);
  }
  return this;
}

float CMMsl::MovementStats::hash_value(CMMsl::MovementStats *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((float *)this + 2);
  }
  return result;
}

void CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this)
{
  *(void *)this = off_1003A7890;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection(this);

  operator delete();
}

CMMsl::MovementStatsGravityProjection *CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(CMMsl::MovementStatsGravityProjection *this, const CMMsl::MovementStatsGravityProjection *a2)
{
  *(void *)this = off_1003A7890;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v4 = (char *)this + 8;
  *((_DWORD *)this + 19) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  char v5 = *((unsigned char *)a2 + 76);
  if ((v5 & 2) != 0)
  {
    uint64_t v7 = *((void *)a2 + 8);
    char v6 = 2;
    *((unsigned char *)this + 76) = 2;
    *((void *)this + 8) = v7;
    char v5 = *((unsigned char *)a2 + 76);
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v6 = 0;
  if (*((unsigned char *)a2 + 76))
  {
LABEL_5:
    uint64_t v8 = *((void *)a2 + 7);
    v6 |= 1u;
    *((unsigned char *)this + 76) = v6;
    *((void *)this + 7) = v8;
    char v5 = *((unsigned char *)a2 + 76);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    int v9 = *((_DWORD *)a2 + 18);
    *((unsigned char *)this + 76) = v6 | 4;
    *((_DWORD *)this + 18) = v9;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, const CMMsl::MovementStatsGravityProjection *a2)
{
  if ((const CMMsl::MovementStatsGravityProjection *)a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsGravityProjection *a2, CMMsl::MovementStatsGravityProjection *a3)
{
  int v3 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v5;
  float result = *((float *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((float *)a2 + 18) = result;
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v7;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v11;
  uint64_t v12 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v12;
  return result;
}

uint64_t CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7890;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_100274A30(a1 + 32, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::MovementStatsGravityProjection::MovementStatsGravityProjection((uint64_t)&v10, a2);
    int v3 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)(a1 + 76) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = v15;
    uint64_t v15 = v4;
    uint64_t v5 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v14;
    uint64_t v14 = v5;
    LODWORD(v5) = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v16;
    int v16 = v5;
    long long v6 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v6;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v8 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v12 = v8;
    CMMsl::MovementStatsGravityProjection::~MovementStatsGravityProjection((CMMsl::MovementStatsGravityProjection *)&v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsGravityProjection::formatText(CMMsl::MovementStatsGravityProjection *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "accel", v7);
  }
  if (*((unsigned char *)this + 76)) {
    PB::TextFormatter::format(a2, "adjustedTimestamp", *((double *)this + 7));
  }
  long long v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "gravity", v10);
  }
  char v11 = *((unsigned char *)this + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "rawProjectedSignal", *((float *)this + 18));
    char v11 = *((unsigned char *)this + 76);
  }
  if ((v11 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestamp", *((void *)this + 8));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::MovementStatsGravityProjection::readFrom(CMMsl::MovementStatsGravityProjection *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    long long v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    float v10 = (void **)((char *)this + 32);
    char v11 = (char *)this + 48;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 76) |= 2u;
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          uint64_t v27 = *(void *)a2;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)a2 + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_118;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_92:
            uint64_t v30 = 0;
            goto LABEL_118;
          }
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              uint64_t v30 = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v66 = v25 + 1;
              char v67 = *(unsigned char *)(v27 + v25);
              *((void *)a2 + 1) = v66;
              v30 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                unint64_t v25 = v66;
                BOOL v18 = v65++ > 8;
                if (v18) {
                  goto LABEL_92;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                uint64_t v30 = 0;
              }
            }
            break;
          }
LABEL_118:
          *((void *)this + 8) = v30;
          goto LABEL_139;
        case 2u:
          *((unsigned char *)this + 76) |= 1u;
          unint64_t v33 = *((void *)a2 + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)a2 + 2)) {
            goto LABEL_135;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v33);
          uint64_t v34 = *((void *)a2 + 1) + 8;
          goto LABEL_138;
        case 3u:
          *((unsigned char *)this + 76) |= 4u;
          unint64_t v35 = *((void *)a2 + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)a2 + 2)) {
            goto LABEL_135;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v35);
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            uint64_t v69 = (char *)*((void *)this + 5);
            unint64_t v68 = *((void *)this + 6);
            if ((unint64_t)v69 >= v68)
            {
              unsigned int v73 = (char *)*v10;
              uint64_t v74 = (v69 - (unsigned char *)*v10) >> 2;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62) {
LABEL_149:
              }
                sub_10000EE98();
              uint64_t v76 = v68 - (void)v73;
              if (v76 >> 1 > v75) {
                unint64_t v75 = v76 >> 1;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v75;
              }
              if (v77)
              {
                unint64_t v78 = (char *)sub_100024458((uint64_t)v11, v77);
                unsigned int v73 = (char *)*((void *)this + 4);
                uint64_t v69 = (char *)*((void *)this + 5);
              }
              else
              {
                unint64_t v78 = 0;
              }
              unint64_t v85 = &v78[4 * v74];
              *(_DWORD *)unint64_t v85 = 0;
              uint64_t v70 = v85 + 4;
              while (v69 != v73)
              {
                int v86 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *((void *)this + 4) = v85;
              *((void *)this + 5) = v70;
              *((void *)this + 6) = &v78[4 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v69 = 0;
              uint64_t v70 = v69 + 4;
            }
            *((void *)this + 5) = v70;
            goto LABEL_133;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)a2 + 1);
          unint64_t v37 = *((void *)a2 + 2);
          while (v36 < v37 && !*((unsigned char *)a2 + 24))
          {
            float v39 = (char *)*((void *)this + 5);
            unint64_t v38 = *((void *)this + 6);
            if ((unint64_t)v39 >= v38)
            {
              uint64_t v41 = (char *)*v10;
              uint64_t v42 = (v39 - (unsigned char *)*v10) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                goto LABEL_149;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                float v46 = (char *)sub_100024458((uint64_t)v11, v45);
                uint64_t v41 = (char *)*((void *)this + 4);
                float v39 = (char *)*((void *)this + 5);
              }
              else
              {
                float v46 = 0;
              }
              uint64_t v47 = &v46[4 * v42];
              *(_DWORD *)uint64_t v47 = 0;
              uint64_t v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *((void *)this + 4) = v47;
              *((void *)this + 5) = v40;
              *((void *)this + 6) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)float v39 = 0;
              uint64_t v40 = v39 + 4;
            }
            *((void *)this + 5) = v40;
            unint64_t v49 = *((void *)a2 + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)a2 + 2)) {
              goto LABEL_97;
            }
            *(v40 - 1) = *(_DWORD *)(*(void *)a2 + v49);
            unint64_t v37 = *((void *)a2 + 2);
            unint64_t v36 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v36;
          }
          goto LABEL_98;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)a2 + 1);
            unint64_t v51 = *((void *)a2 + 2);
            while (v50 < v51 && !*((unsigned char *)a2 + 24))
            {
              float v53 = (char *)*((void *)this + 2);
              unint64_t v52 = *((void *)this + 3);
              if ((unint64_t)v53 >= v52)
              {
                uint64_t v55 = (char *)*v8;
                uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_150;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  uint64_t v60 = (char *)sub_100024458((uint64_t)v9, v59);
                  uint64_t v55 = (char *)*((void *)this + 1);
                  float v53 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v60 = 0;
                }
                uint64_t v61 = &v60[4 * v56];
                *(_DWORD *)uint64_t v61 = 0;
                unint64_t v54 = v61 + 4;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *((void *)this + 1) = v61;
                *((void *)this + 2) = v54;
                *((void *)this + 3) = &v60[4 * v59];
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)float v53 = 0;
                unint64_t v54 = v53 + 4;
              }
              *((void *)this + 2) = v54;
              unint64_t v63 = *((void *)a2 + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)a2 + 2))
              {
LABEL_97:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              unint64_t v51 = *((void *)a2 + 2);
              unint64_t v50 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v50;
            }
LABEL_98:
            PB::Reader::recallMark();
          }
          else
          {
            char v72 = (char *)*((void *)this + 2);
            unint64_t v71 = *((void *)this + 3);
            if ((unint64_t)v72 >= v71)
            {
              uint64_t v79 = (char *)*v8;
              uint64_t v80 = (v72 - (unsigned char *)*v8) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
LABEL_150:
              }
                sub_10000EE98();
              uint64_t v82 = v71 - (void)v79;
              if (v82 >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                char v84 = (char *)sub_100024458((uint64_t)v9, v83);
                uint64_t v79 = (char *)*((void *)this + 1);
                char v72 = (char *)*((void *)this + 2);
              }
              else
              {
                char v84 = 0;
              }
              uint64_t v87 = &v84[4 * v80];
              *(_DWORD *)uint64_t v87 = 0;
              uint64_t v70 = v87 + 4;
              while (v72 != v79)
              {
                int v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *((void *)this + 1) = v87;
              *((void *)this + 2) = v70;
              *((void *)this + 3) = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              *(_DWORD *)char v72 = 0;
              uint64_t v70 = v72 + 4;
            }
            *((void *)this + 2) = v70;
LABEL_133:
            unint64_t v89 = *((void *)a2 + 1);
            if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((void *)a2 + 2))
            {
              *(v70 - 1) = *(_DWORD *)(*(void *)a2 + v89);
LABEL_137:
              uint64_t v34 = *((void *)a2 + 1) + 4;
LABEL_138:
              *((void *)a2 + 1) = v34;
            }
            else
            {
LABEL_135:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_139:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_139;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsGravityProjection::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(this + 76) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    this = PB::Writer::write(a2, *(double *)(v3 + 56), 2u);
    if ((*(unsigned char *)(v3 + 76) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  this = PB::Writer::writeVarInt(a2, *(void *)(this + 64), 1u);
  char v4 = *(unsigned char *)(v3 + 76);
  if (v4) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    this = PB::Writer::write(a2, *(float *)(v3 + 72), 3u);
LABEL_5:
  uint64_t v5 = *(float **)(v3 + 32);
  long long v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 4u);
  }
  uint64_t v9 = *(float **)(v3 + 8);
  long long v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    this = PB::Writer::write(a2, v10, 5u);
  }
  return this;
}

uint64_t CMMsl::MovementStatsGravityProjection::hash_value(CMMsl::MovementStatsGravityProjection *this)
{
  if ((*((unsigned char *)this + 76) & 2) != 0)
  {
    uint64_t v1 = *((void *)this + 8);
    if (*((unsigned char *)this + 76))
    {
LABEL_3:
      double v2 = *((double *)this + 7);
      if (v2 == 0.0) {
        double v2 = 0.0;
      }
      if ((*((unsigned char *)this + 76) & 4) != 0) {
        goto LABEL_6;
      }
LABEL_11:
      uint64_t v4 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 76)) {
      goto LABEL_3;
    }
  }
  double v2 = 0.0;
  if ((*((unsigned char *)this + 76) & 4) == 0) {
    goto LABEL_11;
  }
LABEL_6:
  float v3 = *((float *)this + 18);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
LABEL_12:
  uint64_t v5 = *(void *)&v2 ^ v1 ^ v4 ^ PBHashBytes();
  return v5 ^ PBHashBytes();
}

void CMMsl::MovementStatsSignal::~MovementStatsSignal(CMMsl::MovementStatsSignal *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(CMMsl::MovementStatsSignal *this, const CMMsl::MovementStatsSignal *a2)
{
  *(void *)this = off_1003A78C8;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 8) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    v3 |= 8u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 6) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 0x40) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 9);
    v3 |= 0x40u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 9) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 4);
  v3 |= 2u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 4) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 5);
  v3 |= 4u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 5) = v4;
  if ((*((unsigned char *)a2 + 40) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  *((unsigned char *)this + 40) = v3 | 0x10;
  *((_DWORD *)this + 7) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, const CMMsl::MovementStatsSignal *a2)
{
  if ((const CMMsl::MovementStatsSignal *)a1 != a2)
  {
    CMMsl::MovementStatsSignal::MovementStatsSignal((CMMsl::MovementStatsSignal *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::MovementStatsSignal *a2, CMMsl::MovementStatsSignal *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  float result = *((float *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((float *)a2 + 7) = result;
  return result;
}

float CMMsl::MovementStatsSignal::MovementStatsSignal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A78C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A78C8;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  float result = *(float *)(a2 + 28);
  *(float *)(a1 + 28) = result;
  return result;
}

uint64_t CMMsl::MovementStatsSignal::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A78C8;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::MovementStatsSignal::formatText(CMMsl::MovementStatsSignal *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "cadence", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "horizontalRotationRateFiltered", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "sample", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "verticalRotationRateFiltered", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "verticalUserAcceleration", *((float *)this + 8));
  if ((*((unsigned char *)this + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "walkSpeedFilteredSample", *((float *)this + 9));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::MovementStatsSignal::readFrom(CMMsl::MovementStatsSignal *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((unsigned char *)this + 40) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((unsigned char *)this + 40) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((unsigned char *)this + 40) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_46:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_47:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::MovementStatsSignal::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 20), 6u);
    if ((*(unsigned char *)(v3 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x10) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 28);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::MovementStatsSignal::hash_value(CMMsl::MovementStatsSignal *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 9);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 4);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 8);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 4) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 5);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 0x10) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 7);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::NatalieData::~NatalieData(CMMsl::NatalieData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::NatalieData::NatalieData(uint64_t this, const CMMsl::NatalieData *a2)
{
  *(void *)this = off_1003A7900;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) != 0)
  {
    uint64_t v4 = *((void *)a2 + 5);
    __int16 v3 = 16;
    *(_WORD *)(this + 68) = 16;
    *(void *)(this + 40) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x20) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 12);
    v3 |= 0x20u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 48) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    char v6 = *((unsigned char *)a2 + 65);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(unsigned char *)(this + 65) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 16) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  int v8 = *((_DWORD *)a2 + 13);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 52) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v9 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v10 = *((_DWORD *)a2 + 14);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 56) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 24) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v12 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 32) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 1) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      return this;
    }
LABEL_24:
    char v14 = *((unsigned char *)a2 + 64);
    *(_WORD *)(this + 68) = v3 | 0x200;
    *(unsigned char *)(this + 64) = v14;
    return this;
  }
LABEL_23:
  uint64_t v13 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 8) = v13;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0) {
    goto LABEL_24;
  }
  return this;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, const CMMsl::NatalieData *a2)
{
  if (a1 != a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::NatalieData *a2, CMMsl::NatalieData *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  LOBYTE(v5) = *((unsigned char *)this + 65);
  *((unsigned char *)this + 65) = *((unsigned char *)a2 + 65);
  *((unsigned char *)a2 + 65) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  int v7 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v7;
  int v8 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v8;
  int v9 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v9;
  uint64_t v10 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  LOBYTE(v9) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v9;
  return result;
}

double CMMsl::NatalieData::NatalieData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7900;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return result;
}

CMMsl *CMMsl::NatalieData::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NatalieData::NatalieData((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NatalieData *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::NatalieData::formatText(CMMsl::NatalieData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(a2, "activityType", *((_DWORD *)this + 12));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "duration", *((double *)this + 1));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "fGpsAvailability", *((unsigned char *)this + 64));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "fractionalGrade", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "gradeType", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "hrmin", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "isStanding", *((unsigned char *)this + 65));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "metSource", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "mets", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "rawGradeType", *((_DWORD *)this + 15));
  if ((*((_WORD *)this + 34) & 0x10) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(a2, "startTime", *((double *)this + 5));
LABEL_13:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::NatalieData::readFrom(CMMsl::NatalieData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_68;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 2u:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *((_DWORD *)this + 12) = v25;
              goto LABEL_125;
            case 3u:
              *((_WORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *((unsigned char *)this + 65) = v28;
              goto LABEL_125;
            case 4u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_68;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 5u:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v29 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v30 = *(void *)a2;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v55 = v29++;
                  char v56 = *(unsigned char *)(v30 + v55);
                  *((void *)a2 + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_113;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)a2 + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *((_DWORD *)this + 13) = v33;
              goto LABEL_125;
            case 6u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v59 = v35++;
                  char v60 = *(unsigned char *)(v36 + v59);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_118;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_125;
            case 7u:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v63 = v41++;
                  char v64 = *(unsigned char *)(v42 + v63);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_123;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *((_DWORD *)this + 14) = v45;
LABEL_125:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_68;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 9u:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_68;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_104;
            case 0xAu:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
LABEL_104:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_68:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *((unsigned char *)this + 64) = v48;
              goto LABEL_125;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_125;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::NatalieData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x10) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 40), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 65), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 52), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    this = PB::Writer::write(a2, *(double *)(v3 + 8), 0xAu);
    if ((*(_WORD *)(v3 + 68) & 0x200) == 0) {
      return this;
    }
    goto LABEL_23;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if (v4) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return this;
  }
LABEL_23:
  char v5 = *(unsigned char *)(v3 + 64);

  return PB::Writer::write(a2, v5, 0xBu);
}

uint64_t CMMsl::NatalieData::hash_value(CMMsl::NatalieData *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 0x10) != 0)
  {
    double v2 = *((double *)this + 5);
    if (v2 == 0.0) {
      double v2 = 0.0;
    }
    if ((v1 & 0x20) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      if ((*((_WORD *)this + 34) & 0x400) != 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else
  {
    double v2 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((*((_WORD *)this + 34) & 0x400) != 0)
  {
LABEL_4:
    uint64_t v4 = *((unsigned __int8 *)this + 65);
    if ((v1 & 2) != 0) {
      goto LABEL_5;
    }
LABEL_26:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t v4 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_26;
  }
LABEL_5:
  double v5 = *((double *)this + 2);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) != 0)
  {
LABEL_8:
    uint64_t v6 = *((unsigned int *)this + 13);
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v6 = 0;
  if ((*((_WORD *)this + 34) & 0x100) != 0)
  {
LABEL_9:
    uint64_t v7 = *((unsigned int *)this + 15);
    if ((v1 & 0x80) != 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v7 = 0;
  if ((v1 & 0x80) != 0)
  {
LABEL_10:
    uint64_t v8 = *((unsigned int *)this + 14);
    if ((v1 & 4) != 0) {
      goto LABEL_11;
    }
LABEL_30:
    double v9 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_14;
    }
LABEL_31:
    double v10 = 0.0;
    if (v1) {
      goto LABEL_17;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v8 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_30;
  }
LABEL_11:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_31;
  }
LABEL_14:
  double v10 = *((double *)this + 4);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if (v1)
  {
LABEL_17:
    double v11 = *((double *)this + 1);
    if (v11 == 0.0) {
      double v11 = 0.0;
    }
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_20;
    }
LABEL_33:
    uint64_t v12 = 0;
    return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v12;
  }
LABEL_32:
  double v11 = 0.0;
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_33;
  }
LABEL_20:
  uint64_t v12 = *((unsigned __int8 *)this + 64);
  return v3 ^ *(void *)&v2 ^ v4 ^ *(void *)&v5 ^ v6 ^ v7 ^ v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ *(void *)&v11 ^ v12;
}

void CMMsl::NonlinearBiasFit::~NonlinearBiasFit(CMMsl::NonlinearBiasFit *this)
{
  *(void *)this = off_1003A7938;
  double v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::NonlinearBiasFit::~NonlinearBiasFit(this);

  operator delete();
}

CMMsl::NonlinearBiasFit *CMMsl::NonlinearBiasFit::NonlinearBiasFit(CMMsl::NonlinearBiasFit *this, const CMMsl::NonlinearBiasFit *a2)
{
  *(void *)this = off_1003A7938;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (char *)this + 8;
  *(_OWORD *)((char *)this + 56) = 0u;
  double v5 = (char *)this + 56;
  *(_OWORD *)((char *)this + 104) = 0u;
  uint64_t v6 = (char *)this + 104;
  *(_OWORD *)((char *)this + 152) = 0u;
  uint64_t v7 = (char *)this + 152;
  *((_DWORD *)this + 45) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 21) = 0;
  if (this != a2)
  {
    sub_100024308((char *)this + 128, *((char **)a2 + 16), *((void *)a2 + 17), (uint64_t)(*((void *)a2 + 17) - *((void *)a2 + 16)) >> 2);
    sub_100024308(v6, *((char **)a2 + 13), *((void *)a2 + 14), (uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 2);
    sub_100024308(v7, *((char **)a2 + 19), *((void *)a2 + 20), (uint64_t)(*((void *)a2 + 20) - *((void *)a2 + 19)) >> 2);
  }
  if (*((unsigned char *)a2 + 180))
  {
    int v8 = *((_DWORD *)a2 + 44);
    *((unsigned char *)this + 180) |= 1u;
    *((_DWORD *)this + 44) = v8;
  }
  if (this != a2)
  {
    sub_100024308((char *)this + 80, *((char **)a2 + 10), *((void *)a2 + 11), (uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 2);
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
    sub_100024308(v5, *((char **)a2 + 7), *((void *)a2 + 8), (uint64_t)(*((void *)a2 + 8) - *((void *)a2 + 7)) >> 2);
  }
  return this;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, const CMMsl::NonlinearBiasFit *a2)
{
  if (a1 != a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::NonlinearBiasFit *a2, CMMsl::NonlinearBiasFit *a3)
{
  int v3 = *((_DWORD *)this + 45);
  *((_DWORD *)this + 45) = *((_DWORD *)a2 + 45);
  *((_DWORD *)a2 + 45) = v3;
  uint64_t v4 = *((void *)this + 16);
  *((void *)this + 16) = *((void *)a2 + 16);
  *((void *)a2 + 16) = v4;
  uint64_t v5 = *((void *)this + 17);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)a2 + 17) = v5;
  uint64_t v6 = *((void *)this + 18);
  *((void *)this + 18) = *((void *)a2 + 18);
  *((void *)a2 + 18) = v6;
  uint64_t v7 = *((void *)this + 13);
  *((void *)this + 13) = *((void *)a2 + 13);
  *((void *)a2 + 13) = v7;
  uint64_t v8 = *((void *)this + 14);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)a2 + 14) = v8;
  uint64_t v9 = *((void *)this + 15);
  *((void *)this + 15) = *((void *)a2 + 15);
  *((void *)a2 + 15) = v9;
  uint64_t v10 = *((void *)this + 19);
  *((void *)this + 19) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v10;
  uint64_t v11 = *((void *)this + 20);
  *((void *)this + 20) = *((void *)a2 + 20);
  *((void *)a2 + 20) = v11;
  uint64_t v12 = *((void *)this + 21);
  *((void *)this + 21) = *((void *)a2 + 21);
  *((void *)a2 + 21) = v12;
  float result = *((float *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((float *)a2 + 44) = result;
  uint64_t v14 = *((void *)this + 10);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((void *)a2 + 10) = v14;
  uint64_t v15 = *((void *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((void *)a2 + 11) = v15;
  uint64_t v16 = *((void *)this + 12);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)a2 + 12) = v16;
  uint64_t v17 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v17;
  uint64_t v18 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v18;
  uint64_t v19 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v19;
  uint64_t v20 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v20;
  uint64_t v21 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v21;
  uint64_t v22 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v22;
  uint64_t v23 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v23;
  uint64_t v24 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v24;
  uint64_t v25 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v25;
  return result;
}

uint64_t CMMsl::NonlinearBiasFit::NonlinearBiasFit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7938;
  uint64_t v4 = a1 + 32;
  uint64_t v5 = a1 + 80;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
  *(_DWORD *)(a2 + 180) = 0;
  sub_100274A30(a1 + 128, (__n128 *)(a2 + 128));
  sub_100274A30(a1 + 104, (__n128 *)(a2 + 104));
  sub_100274A30(a1 + 152, (__n128 *)(a2 + 152));
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  sub_100274A30(v5, (__n128 *)(a2 + 80));
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  sub_100274A30(a1 + 56, (__n128 *)(a2 + 56));
  return a1;
}

CMMsl *CMMsl::NonlinearBiasFit::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::NonlinearBiasFit::NonlinearBiasFit((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::NonlinearBiasFit *)v5, v3);
    CMMsl::NonlinearBiasFit::~NonlinearBiasFit((CMMsl::NonlinearBiasFit *)v5);
  }
  return a1;
}

uint64_t CMMsl::NonlinearBiasFit::formatText(CMMsl::NonlinearBiasFit *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (unsigned int *)*((void *)this + 10);
  uint64_t v6 = (unsigned int *)*((void *)this + 11);
  while (v5 != v6)
  {
    unsigned int v7 = *v5++;
    PB::TextFormatter::format(a2, "error", v7);
  }
  uint64_t v8 = (unsigned int *)*((void *)this + 1);
  uint64_t v9 = (unsigned int *)*((void *)this + 2);
  while (v8 != v9)
  {
    unsigned int v10 = *v8++;
    PB::TextFormatter::format(a2, "errorX", v10);
  }
  uint64_t v11 = (unsigned int *)*((void *)this + 4);
  uint64_t v12 = (unsigned int *)*((void *)this + 5);
  while (v11 != v12)
  {
    unsigned int v13 = *v11++;
    PB::TextFormatter::format(a2, "errorY", v13);
  }
  uint64_t v14 = (unsigned int *)*((void *)this + 7);
  uint64_t v15 = (unsigned int *)*((void *)this + 8);
  while (v14 != v15)
  {
    unsigned int v16 = *v14++;
    PB::TextFormatter::format(a2, "errorZ", v16);
  }
  uint64_t v17 = (float *)*((void *)this + 13);
  uint64_t v18 = (float *)*((void *)this + 14);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(a2, "intercept", v19);
  }
  if (*((unsigned char *)this + 180)) {
    PB::TextFormatter::format(a2, "overlap", *((float *)this + 44));
  }
  uint64_t v20 = (float *)*((void *)this + 16);
  uint64_t v21 = (float *)*((void *)this + 17);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(a2, "slope", v22);
  }
  uint64_t v23 = (float *)*((void *)this + 19);
  uint64_t v24 = (float *)*((void *)this + 20);
  while (v23 != v24)
  {
    float v25 = *v23++;
    PB::TextFormatter::format(a2, "temperature", v25);
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::NonlinearBiasFit::readFrom(CMMsl::NonlinearBiasFit *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)((char *)this + 72);
    char v278 = (void **)((char *)this + 32);
    char v279 = (void **)((char *)this + 56);
    uint64_t v9 = (void *)((char *)this + 48);
    unint64_t v277 = (void **)((char *)this + 8);
    unsigned int v10 = (void *)((char *)this + 24);
    uint64_t v11 = (void *)((char *)this + 96);
    unint64_t v285 = (void **)((char *)this + 152);
    char v283 = (char *)this + 168;
    unsigned int v284 = (void **)((char *)this + 104);
    char v282 = (char *)this + 120;
    uint64_t v12 = (void **)((char *)this + 128);
    unsigned int v280 = (void **)((char *)this + 80);
    unint64_t v281 = (char *)this + 144;
    while (1)
    {
      uint64_t v13 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v81 = v15++ > 8;
        if (v81) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v16 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            uint64_t v162 = (char *)*((void *)this + 17);
            unint64_t v161 = *((void *)this + 18);
            if ((unint64_t)v162 >= v161)
            {
              unsigned int v177 = (char *)*v12;
              uint64_t v178 = (v162 - (unsigned char *)*v12) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
LABEL_482:
              }
                sub_10000EE98();
              uint64_t v180 = v161 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                unint64_t v182 = (char *)sub_100024458((uint64_t)v281, v181);
                unsigned int v177 = (char *)*((void *)this + 16);
                uint64_t v162 = (char *)*((void *)this + 17);
              }
              else
              {
                unint64_t v182 = 0;
              }
              char v219 = &v182[4 * v178];
              *(_DWORD *)char v219 = 0;
              unint64_t v163 = v219 + 4;
              while (v162 != v177)
              {
                int v220 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *((_DWORD *)v219 - 1) = v220;
                v219 -= 4;
              }
              *((void *)this + 16) = v219;
              *((void *)this + 17) = v163;
              *((void *)this + 18) = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v162 = 0;
              unint64_t v163 = v162 + 4;
            }
            *((void *)this + 17) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)a2 + 1);
          unint64_t v26 = *((void *)a2 + 2);
          while (v25 < v26 && !*((unsigned char *)a2 + 24))
          {
            BOOL v28 = (char *)*((void *)this + 17);
            unint64_t v27 = *((void *)this + 18);
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v30 = (char *)*v12;
              uint64_t v31 = (v28 - (unsigned char *)*v12) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_482;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_100024458((uint64_t)v281, v34);
                uint64_t v30 = (char *)*((void *)this + 16);
                BOOL v28 = (char *)*((void *)this + 17);
              }
              else
              {
                unint64_t v35 = 0;
              }
              uint64_t v36 = &v35[4 * v31];
              *(_DWORD *)uint64_t v36 = 0;
              unint64_t v29 = v36 + 4;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *((void *)this + 16) = v36;
              *((void *)this + 17) = v29;
              *((void *)this + 18) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)BOOL v28 = 0;
              unint64_t v29 = v28 + 4;
            }
            *((void *)this + 17) = v29;
            unint64_t v38 = *((void *)a2 + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)a2 + 2)) {
              goto LABEL_295;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)a2 + v38);
            unint64_t v26 = *((void *)a2 + 2);
            unint64_t v25 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v25;
          }
          goto LABEL_296;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v165 = (char *)*((void *)this + 14);
            unint64_t v164 = *((void *)this + 15);
            if ((unint64_t)v165 >= v164)
            {
              unint64_t v183 = (char *)*v284;
              uint64_t v184 = (v165 - (unsigned char *)*v284) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
LABEL_483:
              }
                sub_10000EE98();
              uint64_t v186 = v164 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                unsigned int v188 = (char *)sub_100024458((uint64_t)v282, v187);
                unint64_t v183 = (char *)*((void *)this + 13);
                unint64_t v165 = (char *)*((void *)this + 14);
              }
              else
              {
                unsigned int v188 = 0;
              }
              uint64_t v221 = &v188[4 * v184];
              *(_DWORD *)uint64_t v221 = 0;
              unint64_t v163 = v221 + 4;
              while (v165 != v183)
              {
                int v222 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v221 - 1) = v222;
                v221 -= 4;
              }
              *((void *)this + 13) = v221;
              *((void *)this + 14) = v163;
              *((void *)this + 15) = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v165 = 0;
              unint64_t v163 = v165 + 4;
            }
            *((void *)this + 14) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)a2 + 1);
          unint64_t v40 = *((void *)a2 + 2);
          while (v39 < v40 && !*((unsigned char *)a2 + 24))
          {
            uint64_t v42 = (char *)*((void *)this + 14);
            unint64_t v41 = *((void *)this + 15);
            if ((unint64_t)v42 >= v41)
            {
              unsigned int v44 = (char *)*v284;
              uint64_t v45 = (v42 - (unsigned char *)*v284) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_483;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                char v49 = (char *)sub_100024458((uint64_t)v282, v48);
                unsigned int v44 = (char *)*((void *)this + 13);
                uint64_t v42 = (char *)*((void *)this + 14);
              }
              else
              {
                char v49 = 0;
              }
              unsigned int v50 = &v49[4 * v45];
              *(_DWORD *)unsigned int v50 = 0;
              char v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *((void *)this + 13) = v50;
              *((void *)this + 14) = v43;
              *((void *)this + 15) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v42 = 0;
              char v43 = v42 + 4;
            }
            *((void *)this + 14) = v43;
            unint64_t v52 = *((void *)a2 + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)a2 + 2)) {
              goto LABEL_295;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)a2 + v52);
            unint64_t v40 = *((void *)a2 + 2);
            unint64_t v39 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v39;
          }
          goto LABEL_296;
        case 3u:
          if (v24 != 2)
          {
            uint64_t v167 = (char *)*((void *)this + 20);
            unint64_t v166 = *((void *)this + 21);
            if ((unint64_t)v167 >= v166)
            {
              uint64_t v189 = (char *)*v285;
              uint64_t v190 = (v167 - (unsigned char *)*v285) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
LABEL_484:
              }
                sub_10000EE98();
              uint64_t v192 = v166 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_100024458((uint64_t)v283, v193);
                uint64_t v189 = (char *)*((void *)this + 19);
                uint64_t v167 = (char *)*((void *)this + 20);
              }
              else
              {
                uint64_t v194 = 0;
              }
              char v223 = &v194[4 * v190];
              *(_DWORD *)char v223 = 0;
              unint64_t v163 = v223 + 4;
              while (v167 != v189)
              {
                int v224 = *((_DWORD *)v167 - 1);
                v167 -= 4;
                *((_DWORD *)v223 - 1) = v224;
                v223 -= 4;
              }
              *((void *)this + 19) = v223;
              *((void *)this + 20) = v163;
              *((void *)this + 21) = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v167 = 0;
              unint64_t v163 = v167 + 4;
            }
            *((void *)this + 20) = v163;
LABEL_374:
            unint64_t v225 = *((void *)a2 + 1);
            if (v225 <= 0xFFFFFFFFFFFFFFFBLL && v225 + 4 <= *((void *)a2 + 2))
            {
              *(v163 - 1) = *(_DWORD *)(*(void *)a2 + v225);
LABEL_378:
              *((void *)a2 + 1) += 4;
            }
            else
            {
LABEL_376:
              *((unsigned char *)a2 + 24) = 1;
            }
            goto LABEL_472;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v53 = *((void *)a2 + 1);
          unint64_t v54 = *((void *)a2 + 2);
          while (v53 < v54 && !*((unsigned char *)a2 + 24))
          {
            char v56 = (char *)*((void *)this + 20);
            unint64_t v55 = *((void *)this + 21);
            if ((unint64_t)v56 >= v55)
            {
              unsigned int v58 = (char *)*v285;
              uint64_t v59 = (v56 - (unsigned char *)*v285) >> 2;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
                goto LABEL_484;
              }
              uint64_t v61 = v55 - (void)v58;
              if (v61 >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                unint64_t v63 = (char *)sub_100024458((uint64_t)v283, v62);
                unsigned int v58 = (char *)*((void *)this + 19);
                char v56 = (char *)*((void *)this + 20);
              }
              else
              {
                unint64_t v63 = 0;
              }
              char v64 = &v63[4 * v59];
              *(_DWORD *)char v64 = 0;
              char v57 = v64 + 4;
              while (v56 != v58)
              {
                int v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              *((void *)this + 19) = v64;
              *((void *)this + 20) = v57;
              *((void *)this + 21) = &v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(_DWORD *)char v56 = 0;
              char v57 = v56 + 4;
            }
            *((void *)this + 20) = v57;
            unint64_t v66 = *((void *)a2 + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)a2 + 2))
            {
LABEL_295:
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_296;
            }
            *(v57 - 1) = *(_DWORD *)(*(void *)a2 + v66);
            unint64_t v54 = *((void *)a2 + 2);
            unint64_t v53 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v53;
          }
          goto LABEL_296;
        case 4u:
          *((unsigned char *)this + 180) |= 1u;
          unint64_t v67 = *((void *)a2 + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)a2 + 2)) {
            goto LABEL_376;
          }
          *((_DWORD *)this + 44) = *(_DWORD *)(*(void *)a2 + v67);
          goto LABEL_378;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v68 = (char *)*((void *)this + 11);
              do
              {
                if ((unint64_t)v68 >= *v11)
                {
                  uint64_t v69 = (char *)*v280;
                  uint64_t v70 = (v68 - (unsigned char *)*v280) >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    goto LABEL_485;
                  }
                  uint64_t v72 = *v11 - (void)v69;
                  if (v72 >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    uint64_t v74 = (char *)sub_100024458((uint64_t)v11, v73);
                    uint64_t v69 = (char *)*((void *)this + 10);
                    unint64_t v68 = (char *)*((void *)this + 11);
                  }
                  else
                  {
                    uint64_t v74 = 0;
                  }
                  unint64_t v75 = &v74[4 * v70];
                  *(_DWORD *)unint64_t v75 = 0;
                  uint64_t v76 = v75 + 4;
                  while (v68 != v69)
                  {
                    int v77 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v75 - 1) = v77;
                    v75 -= 4;
                  }
                  *((void *)this + 10) = v75;
                  *((void *)this + 11) = v76;
                  *((void *)this + 12) = &v74[4 * v73];
                  if (v69) {
                    operator delete(v69);
                  }
                  unint64_t v68 = v76;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *((void *)this + 11) = v68;
                unint64_t v79 = *((void *)a2 + 1);
                unint64_t v78 = *((void *)a2 + 2);
                uint64_t v80 = *(void *)a2;
                BOOL v81 = v79 > 0xFFFFFFFFFFFFFFF5 || v79 + 10 > v78;
                if (v81)
                {
                  char v82 = 0;
                  unsigned int v83 = 0;
                  uint64_t v89 = 0;
                  if (v78 <= v79) {
                    uint64_t v84 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v84 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v84 == v79) {
                      goto LABEL_280;
                    }
                    unint64_t v85 = v79++;
                    char v86 = *(unsigned char *)(v80 + v85);
                    *((void *)a2 + 1) = v79;
                    v89 |= (unint64_t)(v86 & 0x7F) << v82;
                    if ((v86 & 0x80) == 0) {
                      break;
                    }
                    v82 += 7;
                    BOOL v81 = v83++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v89) = 0;
                  }
LABEL_141:
                  unint64_t v90 = v85 + 1;
                }
                else
                {
                  char v87 = 0;
                  unsigned int v88 = 0;
                  uint64_t v89 = 0;
                  while (1)
                  {
                    unint64_t v90 = v79 + 1;
                    *((void *)a2 + 1) = v79 + 1;
                    char v91 = *(unsigned char *)(v80 + v79);
                    v89 |= (unint64_t)(v91 & 0x7F) << v87;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v87 += 7;
                    unint64_t v79 = v90;
                    BOOL v81 = v88++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v89;
              }
              while (v90 < v78 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_296;
          }
          unsigned int v169 = (char *)*((void *)this + 11);
          unint64_t v168 = *((void *)this + 12);
          if ((unint64_t)v169 >= v168)
          {
            char v195 = (char *)*v280;
            uint64_t v196 = (v169 - (unsigned char *)*v280) >> 2;
            unint64_t v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 62) {
LABEL_485:
            }
              sub_10000EE98();
            uint64_t v198 = v168 - (void)v195;
            if (v198 >> 1 > v197) {
              unint64_t v197 = v198 >> 1;
            }
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v199 = v197;
            }
            if (v199)
            {
              unint64_t v200 = (char *)sub_100024458((uint64_t)v11, v199);
              char v195 = (char *)*((void *)this + 10);
              unsigned int v169 = (char *)*((void *)this + 11);
            }
            else
            {
              unint64_t v200 = 0;
            }
            unint64_t v226 = &v200[4 * v196];
            *(_DWORD *)unint64_t v226 = 0;
            uint64_t v170 = v226 + 4;
            while (v169 != v195)
            {
              int v227 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v226 - 1) = v227;
              v226 -= 4;
            }
            *((void *)this + 10) = v226;
            *((void *)this + 11) = v170;
            *((void *)this + 12) = &v200[4 * v199];
            if (v195) {
              operator delete(v195);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v169 = 0;
            uint64_t v170 = v169 + 4;
          }
          *((void *)this + 11) = v170;
          unint64_t v228 = *((void *)a2 + 1);
          unint64_t v229 = *((void *)a2 + 2);
          uint64_t v230 = *(void *)a2;
          char v231 = 0;
          unsigned int v232 = 0;
          if (v228 <= 0xFFFFFFFFFFFFFFF5 && v228 + 10 <= v229)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v237 = v228 + 1;
              *((void *)a2 + 1) = v228 + 1;
              char v238 = *(unsigned char *)(v230 + v228);
              v236 |= (unint64_t)(v238 & 0x7F) << v231;
              if ((v238 & 0x80) == 0) {
                goto LABEL_471;
              }
              v231 += 7;
              unint64_t v228 = v237;
              BOOL v81 = v232++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v229 <= v228) {
            unint64_t v229 = *((void *)a2 + 1);
          }
          while (v229 != v228)
          {
            unint64_t v234 = v228 + 1;
            char v235 = *(unsigned char *)(v230 + v228);
            *((void *)a2 + 1) = v234;
            v236 |= (unint64_t)(v235 & 0x7F) << v231;
            if ((v235 & 0x80) == 0) {
              goto LABEL_464;
            }
            v231 += 7;
            unint64_t v228 = v234;
            BOOL v81 = v232++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v68 = (char *)*((void *)this + 2);
              do
              {
                if ((unint64_t)v68 >= *v10)
                {
                  char v92 = (char *)*v277;
                  uint64_t v93 = (v68 - (unsigned char *)*v277) >> 2;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    goto LABEL_486;
                  }
                  uint64_t v95 = *v10 - (void)v92;
                  if (v95 >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    unint64_t v97 = (char *)sub_100024458((uint64_t)v10, v96);
                    char v92 = (char *)*((void *)this + 1);
                    unint64_t v68 = (char *)*((void *)this + 2);
                  }
                  else
                  {
                    unint64_t v97 = 0;
                  }
                  uint64_t v98 = &v97[4 * v93];
                  *(_DWORD *)uint64_t v98 = 0;
                  char v99 = v98 + 4;
                  while (v68 != v92)
                  {
                    int v100 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v98 - 1) = v100;
                    v98 -= 4;
                  }
                  *((void *)this + 1) = v98;
                  *((void *)this + 2) = v99;
                  *((void *)this + 3) = &v97[4 * v96];
                  if (v92) {
                    operator delete(v92);
                  }
                  unint64_t v68 = v99;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *((void *)this + 2) = v68;
                unint64_t v102 = *((void *)a2 + 1);
                unint64_t v101 = *((void *)a2 + 2);
                uint64_t v103 = *(void *)a2;
                if (v102 > 0xFFFFFFFFFFFFFFF5 || v102 + 10 > v101)
                {
                  char v105 = 0;
                  unsigned int v106 = 0;
                  uint64_t v112 = 0;
                  if (v101 <= v102) {
                    uint64_t v107 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v107 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v107 == v102) {
                      goto LABEL_280;
                    }
                    unint64_t v108 = v102++;
                    char v109 = *(unsigned char *)(v103 + v108);
                    *((void *)a2 + 1) = v102;
                    v112 |= (unint64_t)(v109 & 0x7F) << v105;
                    if ((v109 & 0x80) == 0) {
                      break;
                    }
                    v105 += 7;
                    BOOL v81 = v106++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v112) = 0;
                  }
LABEL_186:
                  unint64_t v113 = v108 + 1;
                }
                else
                {
                  char v110 = 0;
                  unsigned int v111 = 0;
                  uint64_t v112 = 0;
                  while (1)
                  {
                    unint64_t v113 = v102 + 1;
                    *((void *)a2 + 1) = v102 + 1;
                    char v114 = *(unsigned char *)(v103 + v102);
                    v112 |= (unint64_t)(v114 & 0x7F) << v110;
                    if ((v114 & 0x80) == 0) {
                      break;
                    }
                    v110 += 7;
                    unint64_t v102 = v113;
                    BOOL v81 = v111++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v112;
              }
              while (v113 < v101 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_296;
          }
          char v172 = (char *)*((void *)this + 2);
          unint64_t v171 = *((void *)this + 3);
          if ((unint64_t)v172 >= v171)
          {
            unint64_t v201 = (char *)*v277;
            uint64_t v202 = (v172 - (unsigned char *)*v277) >> 2;
            unint64_t v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 62) {
LABEL_486:
            }
              sub_10000EE98();
            uint64_t v204 = v171 - (void)v201;
            if (v204 >> 1 > v203) {
              unint64_t v203 = v204 >> 1;
            }
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v205 = v203;
            }
            if (v205)
            {
              unint64_t v206 = (char *)sub_100024458((uint64_t)v10, v205);
              unint64_t v201 = (char *)*((void *)this + 1);
              char v172 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v206 = 0;
            }
            char v239 = &v206[4 * v202];
            *(_DWORD *)char v239 = 0;
            uint64_t v170 = v239 + 4;
            while (v172 != v201)
            {
              int v240 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *((_DWORD *)v239 - 1) = v240;
              v239 -= 4;
            }
            *((void *)this + 1) = v239;
            *((void *)this + 2) = v170;
            *((void *)this + 3) = &v206[4 * v205];
            if (v201) {
              operator delete(v201);
            }
          }
          else
          {
            *(_DWORD *)char v172 = 0;
            uint64_t v170 = v172 + 4;
          }
          *((void *)this + 2) = v170;
          unint64_t v241 = *((void *)a2 + 1);
          unint64_t v242 = *((void *)a2 + 2);
          uint64_t v243 = *(void *)a2;
          char v244 = 0;
          unsigned int v245 = 0;
          if (v241 <= 0xFFFFFFFFFFFFFFF5 && v241 + 10 <= v242)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v249 = v241 + 1;
              *((void *)a2 + 1) = v241 + 1;
              char v250 = *(unsigned char *)(v243 + v241);
              v236 |= (unint64_t)(v250 & 0x7F) << v244;
              if ((v250 & 0x80) == 0) {
                goto LABEL_471;
              }
              v244 += 7;
              unint64_t v241 = v249;
              BOOL v81 = v245++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v242 <= v241) {
            unint64_t v242 = *((void *)a2 + 1);
          }
          while (v242 != v241)
          {
            unint64_t v247 = v241 + 1;
            char v248 = *(unsigned char *)(v243 + v241);
            *((void *)a2 + 1) = v247;
            v236 |= (unint64_t)(v248 & 0x7F) << v244;
            if ((v248 & 0x80) == 0) {
              goto LABEL_464;
            }
            v244 += 7;
            unint64_t v241 = v247;
            BOOL v81 = v245++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v68 = (char *)*((void *)this + 5);
              do
              {
                if ((unint64_t)v68 >= *v9)
                {
                  char v115 = (char *)*v278;
                  uint64_t v116 = (v68 - (unsigned char *)*v278) >> 2;
                  unint64_t v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 62) {
                    goto LABEL_487;
                  }
                  uint64_t v118 = *v9 - (void)v115;
                  if (v118 >> 1 > v117) {
                    unint64_t v117 = v118 >> 1;
                  }
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v119 = v117;
                  }
                  if (v119)
                  {
                    unint64_t v120 = (char *)sub_100024458((uint64_t)v9, v119);
                    char v115 = (char *)*((void *)this + 4);
                    unint64_t v68 = (char *)*((void *)this + 5);
                  }
                  else
                  {
                    unint64_t v120 = 0;
                  }
                  unint64_t v121 = &v120[4 * v116];
                  *(_DWORD *)unint64_t v121 = 0;
                  unint64_t v122 = v121 + 4;
                  while (v68 != v115)
                  {
                    int v123 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v121 - 1) = v123;
                    v121 -= 4;
                  }
                  *((void *)this + 4) = v121;
                  *((void *)this + 5) = v122;
                  *((void *)this + 6) = &v120[4 * v119];
                  if (v115) {
                    operator delete(v115);
                  }
                  unint64_t v68 = v122;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *((void *)this + 5) = v68;
                unint64_t v125 = *((void *)a2 + 1);
                unint64_t v124 = *((void *)a2 + 2);
                uint64_t v126 = *(void *)a2;
                if (v125 > 0xFFFFFFFFFFFFFFF5 || v125 + 10 > v124)
                {
                  char v128 = 0;
                  unsigned int v129 = 0;
                  uint64_t v135 = 0;
                  if (v124 <= v125) {
                    uint64_t v130 = *((void *)a2 + 1);
                  }
                  else {
                    uint64_t v130 = *((void *)a2 + 2);
                  }
                  while (1)
                  {
                    if (v130 == v125) {
                      goto LABEL_280;
                    }
                    unint64_t v131 = v125++;
                    char v132 = *(unsigned char *)(v126 + v131);
                    *((void *)a2 + 1) = v125;
                    v135 |= (unint64_t)(v132 & 0x7F) << v128;
                    if ((v132 & 0x80) == 0) {
                      break;
                    }
                    v128 += 7;
                    BOOL v81 = v129++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v135) = 0;
                  }
LABEL_231:
                  unint64_t v136 = v131 + 1;
                }
                else
                {
                  char v133 = 0;
                  unsigned int v134 = 0;
                  uint64_t v135 = 0;
                  while (1)
                  {
                    unint64_t v136 = v125 + 1;
                    *((void *)a2 + 1) = v125 + 1;
                    char v137 = *(unsigned char *)(v126 + v125);
                    v135 |= (unint64_t)(v137 & 0x7F) << v133;
                    if ((v137 & 0x80) == 0) {
                      break;
                    }
                    v133 += 7;
                    unint64_t v125 = v136;
                    BOOL v81 = v134++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v135;
              }
              while (v136 < v124 && !*((unsigned char *)a2 + 24));
            }
            goto LABEL_296;
          }
          unint64_t v174 = (char *)*((void *)this + 5);
          unint64_t v173 = *((void *)this + 6);
          if ((unint64_t)v174 >= v173)
          {
            char v207 = (char *)*v278;
            uint64_t v208 = (v174 - (unsigned char *)*v278) >> 2;
            unint64_t v209 = v208 + 1;
            if ((unint64_t)(v208 + 1) >> 62) {
LABEL_487:
            }
              sub_10000EE98();
            uint64_t v210 = v173 - (void)v207;
            if (v210 >> 1 > v209) {
              unint64_t v209 = v210 >> 1;
            }
            if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v211 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v211 = v209;
            }
            if (v211)
            {
              unsigned int v212 = (char *)sub_100024458((uint64_t)v9, v211);
              char v207 = (char *)*((void *)this + 4);
              unint64_t v174 = (char *)*((void *)this + 5);
            }
            else
            {
              unsigned int v212 = 0;
            }
            char v251 = &v212[4 * v208];
            *(_DWORD *)char v251 = 0;
            uint64_t v170 = v251 + 4;
            while (v174 != v207)
            {
              int v252 = *((_DWORD *)v174 - 1);
              v174 -= 4;
              *((_DWORD *)v251 - 1) = v252;
              v251 -= 4;
            }
            *((void *)this + 4) = v251;
            *((void *)this + 5) = v170;
            *((void *)this + 6) = &v212[4 * v211];
            if (v207) {
              operator delete(v207);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v174 = 0;
            uint64_t v170 = v174 + 4;
          }
          *((void *)this + 5) = v170;
          unint64_t v253 = *((void *)a2 + 1);
          unint64_t v254 = *((void *)a2 + 2);
          uint64_t v255 = *(void *)a2;
          char v256 = 0;
          unsigned int v257 = 0;
          if (v253 <= 0xFFFFFFFFFFFFFFF5 && v253 + 10 <= v254)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v261 = v253 + 1;
              *((void *)a2 + 1) = v253 + 1;
              char v262 = *(unsigned char *)(v255 + v253);
              v236 |= (unint64_t)(v262 & 0x7F) << v256;
              if ((v262 & 0x80) == 0) {
                goto LABEL_471;
              }
              v256 += 7;
              unint64_t v253 = v261;
              BOOL v81 = v257++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v254 <= v253) {
            unint64_t v254 = *((void *)a2 + 1);
          }
          while (v254 != v253)
          {
            unint64_t v259 = v253 + 1;
            char v260 = *(unsigned char *)(v255 + v253);
            *((void *)a2 + 1) = v259;
            v236 |= (unint64_t)(v260 & 0x7F) << v256;
            if ((v260 & 0x80) == 0) {
              goto LABEL_464;
            }
            v256 += 7;
            unint64_t v253 = v259;
            BOOL v81 = v257++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 8u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)a2 + 1) < *((void *)a2 + 2) && !*((unsigned char *)a2 + 24))
            {
              unint64_t v68 = (char *)*((void *)this + 8);
              do
              {
                if ((unint64_t)v68 >= *v8)
                {
                  uint64_t v138 = (char *)*v279;
                  uint64_t v139 = (v68 - (unsigned char *)*v279) >> 2;
                  unint64_t v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 62) {
                    goto LABEL_488;
                  }
                  uint64_t v141 = *v8 - (void)v138;
                  if (v141 >> 1 > v140) {
                    unint64_t v140 = v141 >> 1;
                  }
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v142 = v140;
                  }
                  if (v142)
                  {
                    uint64_t v143 = (char *)sub_100024458((uint64_t)v8, v142);
                    uint64_t v138 = (char *)*((void *)this + 7);
                    unint64_t v68 = (char *)*((void *)this + 8);
                  }
                  else
                  {
                    uint64_t v143 = 0;
                  }
                  char v144 = &v143[4 * v139];
                  *(_DWORD *)char v144 = 0;
                  unsigned int v145 = v144 + 4;
                  while (v68 != v138)
                  {
                    int v146 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v144 - 1) = v146;
                    v144 -= 4;
                  }
                  *((void *)this + 7) = v144;
                  *((void *)this + 8) = v145;
                  *((void *)this + 9) = &v143[4 * v142];
                  if (v138) {
                    operator delete(v138);
                  }
                  unint64_t v68 = v145;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *((void *)this + 8) = v68;
                unint64_t v148 = *((void *)a2 + 1);
                unint64_t v147 = *((void *)a2 + 2);
                uint64_t v149 = *(void *)a2;
                if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v147)
                {
                  char v156 = 0;
                  unsigned int v157 = 0;
                  uint64_t v158 = 0;
                  while (1)
                  {
                    unint64_t v159 = v148 + 1;
                    *((void *)a2 + 1) = v148 + 1;
                    char v160 = *(unsigned char *)(v149 + v148);
                    v158 |= (unint64_t)(v160 & 0x7F) << v156;
                    if ((v160 & 0x80) == 0) {
                      goto LABEL_277;
                    }
                    v156 += 7;
                    unint64_t v148 = v159;
                    BOOL v81 = v157++ > 8;
                    if (v81)
                    {
                      LODWORD(v158) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                char v151 = 0;
                unsigned int v152 = 0;
                uint64_t v158 = 0;
                if (v147 <= v148) {
                  uint64_t v153 = *((void *)a2 + 1);
                }
                else {
                  uint64_t v153 = *((void *)a2 + 2);
                }
                while (1)
                {
                  if (v153 == v148)
                  {
LABEL_280:
                    *((unsigned char *)a2 + 24) = 1;
                    *((_DWORD *)v68 - 1) = 0;
                    goto LABEL_296;
                  }
                  unint64_t v154 = v148++;
                  char v155 = *(unsigned char *)(v149 + v154);
                  *((void *)a2 + 1) = v148;
                  v158 |= (unint64_t)(v155 & 0x7F) << v151;
                  if ((v155 & 0x80) == 0) {
                    break;
                  }
                  v151 += 7;
                  BOOL v81 = v152++ > 8;
                  if (v81)
                  {
                    LODWORD(v158) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v158) = 0;
                }
LABEL_276:
                unint64_t v159 = v154 + 1;
LABEL_277:
                *((_DWORD *)v68 - 1) = v158;
              }
              while (v159 < v147 && !*((unsigned char *)a2 + 24));
            }
LABEL_296:
            PB::Reader::recallMark();
          }
          else
          {
            char v176 = (char *)*((void *)this + 8);
            unint64_t v175 = *((void *)this + 9);
            if ((unint64_t)v176 >= v175)
            {
              uint64_t v213 = (char *)*v279;
              uint64_t v214 = (v176 - (unsigned char *)*v279) >> 2;
              unint64_t v215 = v214 + 1;
              if ((unint64_t)(v214 + 1) >> 62) {
LABEL_488:
              }
                sub_10000EE98();
              uint64_t v216 = v175 - (void)v213;
              if (v216 >> 1 > v215) {
                unint64_t v215 = v216 >> 1;
              }
              if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v215;
              }
              if (v217)
              {
                uint64_t v218 = (char *)sub_100024458((uint64_t)v8, v217);
                uint64_t v213 = (char *)*((void *)this + 7);
                char v176 = (char *)*((void *)this + 8);
              }
              else
              {
                uint64_t v218 = 0;
              }
              char v263 = &v218[4 * v214];
              *(_DWORD *)char v263 = 0;
              uint64_t v170 = v263 + 4;
              while (v176 != v213)
              {
                int v264 = *((_DWORD *)v176 - 1);
                v176 -= 4;
                *((_DWORD *)v263 - 1) = v264;
                v263 -= 4;
              }
              *((void *)this + 7) = v263;
              *((void *)this + 8) = v170;
              *((void *)this + 9) = &v218[4 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *(_DWORD *)char v176 = 0;
              uint64_t v170 = v176 + 4;
            }
            *((void *)this + 8) = v170;
            unint64_t v265 = *((void *)a2 + 1);
            unint64_t v266 = *((void *)a2 + 2);
            uint64_t v267 = *(void *)a2;
            char v268 = 0;
            unsigned int v269 = 0;
            if (v265 > 0xFFFFFFFFFFFFFFF5 || v265 + 10 > v266)
            {
              uint64_t v236 = 0;
              if (v266 <= v265) {
                unint64_t v266 = *((void *)a2 + 1);
              }
              while (v266 != v265)
              {
                unint64_t v271 = v265 + 1;
                char v272 = *(unsigned char *)(v267 + v265);
                *((void *)a2 + 1) = v271;
                v236 |= (unint64_t)(v272 & 0x7F) << v268;
                if ((v272 & 0x80) == 0)
                {
LABEL_464:
                  if (*((unsigned char *)a2 + 24)) {
                    LODWORD(v236) = 0;
                  }
                  goto LABEL_471;
                }
                v268 += 7;
                unint64_t v265 = v271;
                BOOL v81 = v269++ > 8;
                if (v81)
                {
LABEL_470:
                  LODWORD(v236) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v236) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              uint64_t v236 = 0;
              while (1)
              {
                unint64_t v273 = v265 + 1;
                *((void *)a2 + 1) = v265 + 1;
                char v274 = *(unsigned char *)(v267 + v265);
                v236 |= (unint64_t)(v274 & 0x7F) << v268;
                if ((v274 & 0x80) == 0) {
                  break;
                }
                v268 += 7;
                unint64_t v265 = v273;
                BOOL v81 = v269++ > 8;
                if (v81) {
                  goto LABEL_470;
                }
              }
            }
LABEL_471:
            *(v170 - 1) = v236;
          }
LABEL_472:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(a2, v16 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_472;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v13 + v2);
      *((void *)a2 + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::NonlinearBiasFit::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(float **)(this + 128);
  uint64_t v5 = *(float **)(this + 136);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 1u);
  }
  unsigned int v7 = *(float **)(v3 + 104);
  uint64_t v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 2u);
  }
  unsigned int v10 = *(float **)(v3 + 152);
  uint64_t v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    float v12 = *v10++;
    this = PB::Writer::write(a2, v12, 3u);
  }
  if (*(unsigned char *)(v3 + 180)) {
    this = PB::Writer::write(a2, *(float *)(v3 + 176), 4u);
  }
  uint64_t v13 = *(unsigned int **)(v3 + 80);
  char v14 = *(unsigned int **)(v3 + 88);
  while (v13 != v14)
  {
    unsigned int v15 = *v13++;
    this = PB::Writer::writeVarInt(a2, v15, 5u);
  }
  unint64_t v16 = *(unsigned int **)(v3 + 8);
  unint64_t v17 = *(unsigned int **)(v3 + 16);
  while (v16 != v17)
  {
    unsigned int v18 = *v16++;
    this = PB::Writer::writeVarInt(a2, v18, 6u);
  }
  char v19 = *(unsigned int **)(v3 + 32);
  unsigned int v20 = *(unsigned int **)(v3 + 40);
  while (v19 != v20)
  {
    unsigned int v21 = *v19++;
    this = PB::Writer::writeVarInt(a2, v21, 7u);
  }
  uint64_t v23 = *(unsigned int **)(v3 + 56);
  char v22 = *(unsigned int **)(v3 + 64);
  while (v23 != v22)
  {
    unsigned int v24 = *v23++;
    this = PB::Writer::writeVarInt(a2, v24, 8u);
  }
  return this;
}

uint64_t CMMsl::NonlinearBiasFit::hash_value(CMMsl::NonlinearBiasFit *this)
{
  uint64_t v2 = PBHashBytes();
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if (*((unsigned char *)this + 180))
  {
    float v6 = *((float *)this + 44);
    uint64_t v5 = LODWORD(v6);
    if (v6 == 0.0) {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = v3 ^ v2 ^ v4 ^ v5;
  uint64_t v8 = PBHashBytes();
  uint64_t v9 = v8 ^ PBHashBytes();
  uint64_t v10 = v7 ^ v9 ^ PBHashBytes();
  return v10 ^ PBHashBytes();
}

void CMMsl::ODTPose::~ODTPose(CMMsl::ODTPose *this)
{
  *(void *)this = off_1003A7970;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::ODTPose::~ODTPose(this);

  operator delete();
}

CMMsl::ODTPose *CMMsl::ODTPose::ODTPose(CMMsl::ODTPose *this, const CMMsl::ODTPose *a2)
{
  *(void *)this = off_1003A7970;
  *((void *)this + 1) = 0;
  uint64_t v3 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    uint64_t v4 = *((void *)a2 + 4);
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 4) = v4;
  }
  if (this != a2) {
    sub_1000330C4(v3, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3);
  }
  return this;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, const CMMsl::ODTPose *a2)
{
  if ((const CMMsl::ODTPose *)a1 != a2)
  {
    CMMsl::ODTPose::ODTPose((CMMsl::ODTPose *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v5;
    uint64_t v6 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v6;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::ODTPose *a2, CMMsl::ODTPose *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  double result = *((double *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((double *)a2 + 4) = result;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  return result;
}

uint64_t CMMsl::ODTPose::ODTPose(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7970;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

{
  *(void *)a1 = off_1003A7970;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  return a1;
}

uint64_t CMMsl::ODTPose::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v12 = off_1003A7970;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 32);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v7 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v3;
    int v16 = v7;
    uint64_t v8 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v4;
    uint64_t v15 = v8;
    long long v9 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v13 = v9;
    uint64_t v10 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v14 = v10;
    CMMsl::ODTPose::~ODTPose((CMMsl::ODTPose *)&v12);
  }
  return a1;
}

uint64_t CMMsl::ODTPose::formatText(CMMsl::ODTPose *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  uint64_t v5 = (double *)*((void *)this + 1);
  long long v6 = (double *)*((void *)this + 2);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(a2, "pose", v7);
  }
  if (*((unsigned char *)this + 40)) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::ODTPose::readFrom(CMMsl::ODTPose *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    do
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)a2 + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v23 = v13 >> 3;
      if ((v13 >> 3) == 2)
      {
        if (v22 != 2)
        {
          unint64_t v40 = (char *)*((void *)this + 2);
          unint64_t v39 = *((void *)this + 3);
          if ((unint64_t)v40 >= v39)
          {
            uint64_t v42 = (char *)*v8;
            uint64_t v43 = (v40 - (unsigned char *)*v8) >> 3;
            unint64_t v44 = v43 + 1;
            if ((unint64_t)(v43 + 1) >> 61) {
LABEL_84:
            }
              sub_10000EE98();
            uint64_t v45 = v39 - (void)v42;
            if (v45 >> 2 > v44) {
              unint64_t v44 = v45 >> 2;
            }
            if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v46 = v44;
            }
            if (v46)
            {
              uint64_t v47 = (char *)sub_10000EEB0((uint64_t)v9, v46);
              uint64_t v42 = (char *)*((void *)this + 1);
              unint64_t v40 = (char *)*((void *)this + 2);
            }
            else
            {
              uint64_t v47 = 0;
            }
            unint64_t v48 = &v47[8 * v43];
            *(void *)unint64_t v48 = 0;
            unint64_t v41 = v48 + 8;
            while (v40 != v42)
            {
              uint64_t v49 = *((void *)v40 - 1);
              v40 -= 8;
              *((void *)v48 - 1) = v49;
              v48 -= 8;
            }
            *((void *)this + 1) = v48;
            *((void *)this + 2) = v41;
            *((void *)this + 3) = &v47[8 * v46];
            if (v42) {
              operator delete(v42);
            }
          }
          else
          {
            *(void *)unint64_t v40 = 0;
            unint64_t v41 = v40 + 8;
          }
          *((void *)this + 2) = v41;
          unint64_t v50 = *((void *)a2 + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)a2 + 2))
          {
LABEL_73:
            *((unsigned char *)a2 + 24) = 1;
            goto LABEL_76;
          }
          *(v41 - 1) = *(void *)(*(void *)a2 + v50);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        while (v25 < v26 && !*((unsigned char *)a2 + 24))
        {
          BOOL v28 = (char *)*((void *)this + 2);
          unint64_t v27 = *((void *)this + 3);
          if ((unint64_t)v28 >= v27)
          {
            uint64_t v30 = (char *)*v8;
            uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              unint64_t v35 = (char *)sub_10000EEB0((uint64_t)v9, v34);
              uint64_t v30 = (char *)*((void *)this + 1);
              BOOL v28 = (char *)*((void *)this + 2);
            }
            else
            {
              unint64_t v35 = 0;
            }
            uint64_t v36 = &v35[8 * v31];
            *(void *)uint64_t v36 = 0;
            unint64_t v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            *((void *)this + 1) = v36;
            *((void *)this + 2) = v29;
            *((void *)this + 3) = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)BOOL v28 = 0;
            unint64_t v29 = v28 + 8;
          }
          *((void *)this + 2) = v29;
          unint64_t v38 = *((void *)a2 + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)a2 + 2))
          {
            *((unsigned char *)a2 + 24) = 1;
            break;
          }
          *(v29 - 1) = *(void *)(*(void *)a2 + v38);
          unint64_t v26 = *((void *)a2 + 2);
          unint64_t v25 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v25;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v23 == 1)
        {
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
            goto LABEL_73;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v24);
LABEL_75:
          *((void *)a2 + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(a2, v23, v22, 0) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)a2 + 1);
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::ODTPose::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 40)) {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  return this;
}

uint64_t CMMsl::ODTPose::hash_value(CMMsl::ODTPose *this)
{
  if (*((unsigned char *)this + 40))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v1 = 0;
    }
    else {
      uint64_t v1 = *((void *)this + 4);
    }
  }
  else
  {
    uint64_t v1 = 0;
  }
  return PBHashBytes() ^ v1;
}

void CMMsl::Odometer::~Odometer(CMMsl::Odometer *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Odometer::Odometer(uint64_t this, const CMMsl::Odometer *a2)
{
  *(void *)this = off_1003A79A8;
  *(_DWORD *)(this + 100) = 0;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 8);
    __int16 v3 = 128;
    *(_WORD *)(this + 100) = 128;
    *(void *)(this + 64) = v4;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 100) = v3;
    *(void *)(this + 16) = v5;
    __int16 v2 = *((_WORD *)a2 + 50);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *((void *)a2 + 1);
    v3 |= 1u;
    *(_WORD *)(this + 100) = v3;
    *(void *)(this + 8) = v6;
    __int16 v2 = *((_WORD *)a2 + 50);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 24) = v7;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v8 = *((void *)a2 + 7);
  v3 |= 0x40u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 56) = v8;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t v9 = *((void *)a2 + 6);
  v3 |= 0x20u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 48) = v9;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x10) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v10 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 40) = v10;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v11 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 32) = v11;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v12 = *((void *)a2 + 9);
  v3 |= 0x100u;
  *(_WORD *)(this + 100) = v3;
  *(void *)(this + 72) = v12;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x400) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v13 = *((_DWORD *)a2 + 21);
  v3 |= 0x400u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 84) = v13;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v14 = *((_DWORD *)a2 + 22);
  v3 |= 0x800u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 88) = v14;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x1000) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v15 = *((_DWORD *)a2 + 23);
  v3 |= 0x1000u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 92) = v15;
  __int16 v2 = *((_WORD *)a2 + 50);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x2000) == 0) {
      return this;
    }
LABEL_30:
    char v17 = *((unsigned char *)a2 + 96);
    *(_WORD *)(this + 100) = v3 | 0x2000;
    *(unsigned char *)(this + 96) = v17;
    return this;
  }
LABEL_29:
  int v16 = *((_DWORD *)a2 + 20);
  v3 |= 0x200u;
  *(_WORD *)(this + 100) = v3;
  *(_DWORD *)(this + 80) = v16;
  if ((*((_WORD *)a2 + 50) & 0x2000) != 0) {
    goto LABEL_30;
  }
  return this;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, const CMMsl::Odometer *a2)
{
  if (a1 != a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Odometer *a2, CMMsl::Odometer *a3)
{
  int v3 = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v3;
  uint64_t v4 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v8;
  uint64_t v9 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v9;
  uint64_t v10 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v10;
  uint64_t v11 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v11;
  double result = *((double *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((double *)a2 + 9) = result;
  int v13 = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v13;
  int v14 = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v14;
  int v15 = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v15;
  int v16 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v16;
  LOBYTE(v16) = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v16;
  return result;
}

double CMMsl::Odometer::Odometer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A79A8;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = 0;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 72);
  *(double *)(a1 + 72) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  return result;
}

CMMsl *CMMsl::Odometer::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::Odometer::Odometer((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::Odometer *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::Odometer::formatText(CMMsl::Odometer *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 50);
  if (v5)
  {
    PB::TextFormatter::format(a2, "accuracy", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 50);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*((_WORD *)this + 50) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "batchedLocationFixType", *((_DWORD *)this + 20));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "distance", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "gpsAltitude", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "gpsSpeedAccuracy", *((double *)this + 4));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "odometer", *((double *)this + 5));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "originDevice", *((_DWORD *)this + 21));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "quality", *((_DWORD *)this + 22));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "rawSpeed", *((double *)this + 6));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "speed", *((double *)this + 7));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 8));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "timestampGps", *((double *)this + 9));
  __int16 v5 = *((_WORD *)this + 50);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "trackRunOdometerHasBeenCorrected", *((unsigned char *)this + 96));
  if ((*((_WORD *)this + 50) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 23));
LABEL_16:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Odometer::readFrom(CMMsl::Odometer *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 50) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 2u:
              *((_WORD *)this + 50) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 3u:
              *((_WORD *)this + 50) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 4u:
              *((_WORD *)this + 50) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 5u:
              *((_WORD *)this + 50) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 6u:
              *((_WORD *)this + 50) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 7u:
              *((_WORD *)this + 50) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 8u:
              *((_WORD *)this + 50) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_50;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_112;
            case 9u:
              *((_WORD *)this + 50) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 9) = *(void *)(*(void *)a2 + v2);
LABEL_112:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_50:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *((_WORD *)this + 50) |= 0x400u;
              unint64_t v21 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v22 = *(void *)a2;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_117;
                  }
                  unint64_t v49 = v21++;
                  char v50 = *(unsigned char *)(v22 + v49);
                  *((void *)a2 + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_116;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)a2 + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_117;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *((_DWORD *)this + 21) = v25;
              goto LABEL_133;
            case 0xBu:
              *((_WORD *)this + 50) |= 0x800u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_122;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_121;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_122;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *((_DWORD *)this + 22) = v31;
              goto LABEL_133;
            case 0xCu:
              *((_WORD *)this + 50) |= 0x1000u;
              unint64_t v33 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v34 = *(void *)a2;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v57 = v33++;
                  char v58 = *(unsigned char *)(v34 + v57);
                  *((void *)a2 + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_126;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)a2 + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *((_DWORD *)this + 23) = v37;
              goto LABEL_133;
            case 0xDu:
              *((_WORD *)this + 50) |= 0x200u;
              unint64_t v39 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v40 = *(void *)a2;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v61 = v39++;
                  char v62 = *(unsigned char *)(v40 + v61);
                  *((void *)a2 + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_131;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)a2 + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *((_DWORD *)this + 20) = v43;
LABEL_133:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *((_WORD *)this + 50) |= 0x2000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *((unsigned char *)this + 96) = v46;
              goto LABEL_133;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_133;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::Odometer::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 100);
  if ((v4 & 0x80) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(this + 64), 1u);
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 4u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 5u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(double *)(v3 + 48), 6u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 8u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(double *)(v3 + 72), 9u);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 84), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 88), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 80), 0xDu);
    if ((*(_WORD *)(v3 + 100) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_29;
  }
LABEL_27:
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 92), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return this;
  }
LABEL_29:
  char v5 = *(unsigned char *)(v3 + 96);

  return PB::Writer::write(a2, v5, 0xEu);
}

uint64_t CMMsl::Odometer::hash_value(CMMsl::Odometer *this)
{
  __int16 v1 = *((_WORD *)this + 50);
  if ((v1 & 0x80) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 2) != 0) {
      goto LABEL_3;
    }
LABEL_35:
    double v3 = 0.0;
    if (v1) {
      goto LABEL_6;
    }
LABEL_36:
    double v4 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_37:
    double v5 = 0.0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_38:
    double v6 = 0.0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_15;
    }
LABEL_39:
    double v7 = 0.0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_18;
    }
LABEL_40:
    double v8 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_21;
    }
LABEL_41:
    double v9 = 0.0;
    if ((*((_WORD *)this + 50) & 0x100) != 0) {
      goto LABEL_24;
    }
LABEL_42:
    double v10 = 0.0;
    if ((*((_WORD *)this + 50) & 0x400) != 0) {
      goto LABEL_27;
    }
    goto LABEL_43;
  }
  double v2 = *((double *)this + 8);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 2) == 0) {
    goto LABEL_35;
  }
LABEL_3:
  double v3 = *((double *)this + 2);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_36;
  }
LABEL_6:
  double v4 = *((double *)this + 1);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_37;
  }
LABEL_9:
  double v5 = *((double *)this + 3);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_38;
  }
LABEL_12:
  double v6 = *((double *)this + 7);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_39;
  }
LABEL_15:
  double v7 = *((double *)this + 6);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_40;
  }
LABEL_18:
  double v8 = *((double *)this + 5);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_41;
  }
LABEL_21:
  double v9 = *((double *)this + 4);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x100) == 0) {
    goto LABEL_42;
  }
LABEL_24:
  double v10 = *((double *)this + 9);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  if ((*((_WORD *)this + 50) & 0x400) != 0)
  {
LABEL_27:
    uint64_t v11 = *((unsigned int *)this + 21);
    if ((*((_WORD *)this + 50) & 0x800) != 0) {
      goto LABEL_28;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v11 = 0;
  if ((*((_WORD *)this + 50) & 0x800) != 0)
  {
LABEL_28:
    uint64_t v12 = *((unsigned int *)this + 22);
    if ((*((_WORD *)this + 50) & 0x1000) != 0) {
      goto LABEL_29;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v12 = 0;
  if ((*((_WORD *)this + 50) & 0x1000) != 0)
  {
LABEL_29:
    uint64_t v13 = *((unsigned int *)this + 23);
    if ((*((_WORD *)this + 50) & 0x200) != 0) {
      goto LABEL_30;
    }
LABEL_46:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 50) & 0x2000) != 0) {
      goto LABEL_31;
    }
LABEL_47:
    uint64_t v15 = 0;
    return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
  }
LABEL_45:
  uint64_t v13 = 0;
  if ((*((_WORD *)this + 50) & 0x200) == 0) {
    goto LABEL_46;
  }
LABEL_30:
  uint64_t v14 = *((unsigned int *)this + 20);
  if ((*((_WORD *)this + 50) & 0x2000) == 0) {
    goto LABEL_47;
  }
LABEL_31:
  uint64_t v15 = *((unsigned __int8 *)this + 96);
  return *(void *)&v3 ^ *(void *)&v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10 ^ v11 ^ v12 ^ v13 ^ v14 ^ v15;
}

void CMMsl::OdometerWithAltitude::~OdometerWithAltitude(CMMsl::OdometerWithAltitude *this)
{
  *(void *)this = off_1003A79E0;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::OdometerWithAltitude::~OdometerWithAltitude(this);

  operator delete();
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t this, const CMMsl::OdometerWithAltitude *a2)
{
  *(void *)this = off_1003A79E0;
  *(void *)(this + 72) = 0;
  *(_DWORD *)(this + 80) = 0;
  if (*((void *)a2 + 9)) {
    operator new();
  }
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *((void *)a2 + 3);
    *(unsigned char *)(this + 80) |= 4u;
    *(void *)(this + 24) = v4;
    char v2 = *((unsigned char *)a2 + 80);
    if ((v2 & 8) == 0)
    {
LABEL_5:
      if ((v2 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
  }
  else if ((*((unsigned char *)a2 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)a2 + 4);
  *(unsigned char *)(this + 80) |= 8u;
  *(void *)(this + 32) = v5;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v6 = *((void *)a2 + 7);
  *(unsigned char *)(this + 80) |= 0x40u;
  *(void *)(this + 56) = v6;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v7 = *((void *)a2 + 8);
  *(unsigned char *)(this + 80) |= 0x80u;
  *(void *)(this + 64) = v7;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_8:
    if ((v2 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v8 = *((void *)a2 + 2);
  *(unsigned char *)(this + 80) |= 2u;
  *(void *)(this + 16) = v8;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 1);
  *(unsigned char *)(this + 80) |= 1u;
  *(void *)(this + 8) = v9;
  char v2 = *((unsigned char *)a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_10:
    if ((v2 & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 6);
  *(unsigned char *)(this + 80) |= 0x20u;
  *(void *)(this + 48) = v10;
  if ((*((unsigned char *)a2 + 80) & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v3 = *((void *)a2 + 5);
  *(unsigned char *)(this + 80) |= 0x10u;
  *(void *)(this + 40) = v3;
  return this;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, const CMMsl::OdometerWithAltitude *a2)
{
  if ((const CMMsl::OdometerWithAltitude *)a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v5;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    long long v14 = v6;
    CMMsl::OdometerWithAltitude::~OdometerWithAltitude((CMMsl::OdometerWithAltitude *)v10);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OdometerWithAltitude *a2, CMMsl::OdometerWithAltitude *a3)
{
  int v3 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v3;
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v4;
  uint64_t v5 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v5;
  uint64_t v6 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v6;
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v7;
  uint64_t v8 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v8;
  uint64_t v9 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v9;
  uint64_t v10 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v10;
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v11;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::OdometerWithAltitude::OdometerWithAltitude(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A79E0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = 0;
  uint64_t v4 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::OdometerWithAltitude::OdometerWithAltitude((uint64_t)v10, a2);
    int v3 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)(a1 + 80) = v16;
    int v16 = v3;
    uint64_t v4 = *(void *)(a1 + 72);
    *(void *)(a1 + 72) = v15;
    uint64_t v15 = v4;
    long long v5 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v12;
    long long v6 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = v14;
    long long v7 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v11;
    long long v11 = v7;
    long long v12 = v5;
    long long v8 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v13;
    long long v13 = v8;
    long long v14 = v6;
    CMMsl::OdometerWithAltitude::~OdometerWithAltitude((CMMsl::OdometerWithAltitude *)v10);
  }
  return a1;
}

uint64_t CMMsl::OdometerWithAltitude::formatText(CMMsl::OdometerWithAltitude *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 80);
  if (v5)
  {
    PB::TextFormatter::format(a2, "gpsCourseAccuracy", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*((unsigned char *)this + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "gpsCourseRadians", *((double *)this + 2));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "groundAltitude", *((double *)this + 3));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "groundAltitudeUncertainty", *((double *)this + 4));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "maxAbsSlope", *((double *)this + 5));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    PB::TextFormatter::format(a2, "smoothedGPSAltitude", *((double *)this + 7));
    if ((*((unsigned char *)this + 80) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "slope", *((double *)this + 6));
  char v5 = *((unsigned char *)this + 80);
  if ((v5 & 0x40) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "smoothedGPSAltitudeUncertainty", *((double *)this + 8));
LABEL_9:
  uint64_t v6 = *((void *)this + 9);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, a2, "super");
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OdometerWithAltitude::readFrom(CMMsl::OdometerWithAltitude *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              *((unsigned char *)this + 80) |= 4u;
              unint64_t v21 = *((void *)a2 + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 3) = *(void *)(*(void *)a2 + v21);
              goto LABEL_50;
            case 3u:
              *((unsigned char *)this + 80) |= 8u;
              unint64_t v22 = *((void *)a2 + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v22);
              goto LABEL_50;
            case 4u:
              *((unsigned char *)this + 80) |= 0x40u;
              unint64_t v23 = *((void *)a2 + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 7) = *(void *)(*(void *)a2 + v23);
              goto LABEL_50;
            case 5u:
              *((unsigned char *)this + 80) |= 0x80u;
              unint64_t v24 = *((void *)a2 + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 8) = *(void *)(*(void *)a2 + v24);
              goto LABEL_50;
            case 6u:
              *((unsigned char *)this + 80) |= 2u;
              unint64_t v25 = *((void *)a2 + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v25);
              goto LABEL_50;
            case 7u:
              *((unsigned char *)this + 80) |= 1u;
              unint64_t v26 = *((void *)a2 + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v26);
              goto LABEL_50;
            case 8u:
              *((unsigned char *)this + 80) |= 0x20u;
              unint64_t v27 = *((void *)a2 + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)a2 + 2)) {
                goto LABEL_48;
              }
              *((void *)this + 6) = *(void *)(*(void *)a2 + v27);
              goto LABEL_50;
            case 9u:
              *((unsigned char *)this + 80) |= 0x10u;
              unint64_t v28 = *((void *)a2 + 1);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 5) = *(void *)(*(void *)a2 + v28);
LABEL_50:
                *((void *)a2 + 1) += 8;
              }
              else
              {
LABEL_48:
                *((unsigned char *)a2 + 24) = 1;
              }
LABEL_51:
              unint64_t v2 = *((void *)a2 + 1);
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_51;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::OdometerWithAltitude::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(const PB::Base **)(this + 72);
  if (v4) {
    this = PB::Writer::writeSubmessage(a2, v4, 1u);
  }
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    this = PB::Writer::write(a2, *(double *)(v3 + 24), 2u);
    char v5 = *(unsigned char *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 3u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 56), 4u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 64), 5u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 6u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    this = PB::Writer::write(a2, *(double *)(v3 + 48), 8u);
    if ((*(unsigned char *)(v3 + 80) & 0x10) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 7u);
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    return this;
  }
LABEL_19:
  double v6 = *(double *)(v3 + 40);

  return PB::Writer::write(a2, v6, 9u);
}

unint64_t CMMsl::OdometerWithAltitude::hash_value(CMMsl::OdometerWithAltitude *this)
{
  unint64_t v2 = *((void *)this + 9);
  if (v2) {
    unint64_t v2 = CMMsl::Odometer::hash_value((CMMsl::Odometer *)v2);
  }
  if ((*((unsigned char *)this + 80) & 4) == 0)
  {
    double v3 = 0.0;
    if ((*((unsigned char *)this + 80) & 8) != 0) {
      goto LABEL_5;
    }
LABEL_29:
    double v4 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x40) != 0) {
      goto LABEL_8;
    }
LABEL_30:
    double v5 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x80) != 0) {
      goto LABEL_11;
    }
LABEL_31:
    double v6 = 0.0;
    if ((*((unsigned char *)this + 80) & 2) != 0) {
      goto LABEL_14;
    }
LABEL_32:
    double v7 = 0.0;
    if (*((unsigned char *)this + 80)) {
      goto LABEL_17;
    }
LABEL_33:
    double v8 = 0.0;
    if ((*((unsigned char *)this + 80) & 0x20) != 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
  double v3 = *((double *)this + 3);
  if (v3 == 0.0) {
    double v3 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_5:
  double v4 = *((double *)this + 4);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x40) == 0) {
    goto LABEL_30;
  }
LABEL_8:
  double v5 = *((double *)this + 7);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x80) == 0) {
    goto LABEL_31;
  }
LABEL_11:
  double v6 = *((double *)this + 8);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 2) == 0) {
    goto LABEL_32;
  }
LABEL_14:
  double v7 = *((double *)this + 2);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 1) == 0) {
    goto LABEL_33;
  }
LABEL_17:
  double v8 = *((double *)this + 1);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((*((unsigned char *)this + 80) & 0x20) != 0)
  {
LABEL_20:
    double v9 = *((double *)this + 6);
    if (v9 == 0.0) {
      double v9 = 0.0;
    }
    if ((*((unsigned char *)this + 80) & 0x10) != 0) {
      goto LABEL_23;
    }
LABEL_35:
    double v10 = 0.0;
    return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
  }
LABEL_34:
  double v9 = 0.0;
  if ((*((unsigned char *)this + 80) & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_23:
  double v10 = *((double *)this + 5);
  if (v10 == 0.0) {
    double v10 = 0.0;
  }
  return *(void *)&v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ *(void *)&v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ *(void *)&v10;
}

uint64_t CMMsl::OdometerWithAltitude::makeSuper(uint64_t this)
{
  if (!*(void *)(this + 72)) {
    operator new();
  }
  return this;
}

void CMMsl::OnsetHeartRateData::~OnsetHeartRateData(CMMsl::OnsetHeartRateData *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t this, const CMMsl::OnsetHeartRateData *a2)
{
  *(void *)this = off_1003A7A18;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) != 0)
  {
    int v4 = *((_DWORD *)a2 + 13);
    __int16 v3 = 64;
    *(_WORD *)(this + 68) = 64;
    *(_DWORD *)(this + 52) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x80) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 14);
    v3 |= 0x80u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *((void *)a2 + 2);
    v3 |= 2u;
    *(_WORD *)(this + 68) = v3;
    *(void *)(this + 16) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *((void *)a2 + 1);
  v3 |= 1u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 8) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  char v8 = *((unsigned char *)a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(this + 68) = v3;
  *(unsigned char *)(this + 64) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v9 = *((void *)a2 + 5);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 40) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v10 = *((void *)a2 + 4);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 32) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 4) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v11 = *((void *)a2 + 3);
  v3 |= 4u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 24) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 0x20) == 0) {
      return this;
    }
LABEL_22:
    int v13 = *((_DWORD *)a2 + 12);
    *(_WORD *)(this + 68) = v3 | 0x20;
    *(_DWORD *)(this + 48) = v13;
    return this;
  }
LABEL_21:
  int v12 = *((_DWORD *)a2 + 15);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v12;
  if ((*((_WORD *)a2 + 34) & 0x20) != 0) {
    goto LABEL_22;
  }
  return this;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, const CMMsl::OnsetHeartRateData *a2)
{
  if ((const CMMsl::OnsetHeartRateData *)a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v14;
    char v14 = v3;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::OnsetHeartRateData *a2, CMMsl::OnsetHeartRateData *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  int v4 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  int v5 = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v7;
  LOBYTE(v5) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v5;
  uint64_t v8 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v8;
  uint64_t v9 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v9;
  double result = *((double *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((double *)a2 + 3) = result;
  int v11 = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v11;
  int v12 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v12;
  return result;
}

double CMMsl::OnsetHeartRateData::OnsetHeartRateData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7A18;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t CMMsl::OnsetHeartRateData::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::OnsetHeartRateData::OnsetHeartRateData((uint64_t)v9, a2);
    int v3 = *(_DWORD *)(a1 + 68);
    *(_DWORD *)(a1 + 68) = v15;
    int v15 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    LOBYTE(v3) = *(unsigned char *)(a1 + 64);
    *(unsigned char *)(a1 + 64) = v14;
    char v14 = v3;
    uint64_t v5 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    uint64_t v12 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v10 = v4;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 48) = v13;
    long long v13 = v7;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::OnsetHeartRateData::formatText(CMMsl::OnsetHeartRateData *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if (v5)
  {
    PB::TextFormatter::format(a2, "confidence", *((double *)this + 1));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "context", *((_DWORD *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "dataSource", *((_DWORD *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(a2, "error", *((unsigned char *)this + 64));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(a2, "heartRate", *((double *)this + 2));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "interpolation", *((_DWORD *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "mode", *((_DWORD *)this + 15));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "sinceLastGood", *((double *)this + 3));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "startTime", *((double *)this + 4));
  if ((*((_WORD *)this + 34) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 5));
LABEL_12:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::OnsetHeartRateData::readFrom(CMMsl::OnsetHeartRateData *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v20 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v21 = *(void *)a2;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_105;
                  }
                  unint64_t v49 = v20++;
                  char v50 = *(unsigned char *)(v21 + v49);
                  *((void *)a2 + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_104:
                unint64_t v2 = v49 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)a2 + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_105;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *((_DWORD *)this + 13) = v24;
              goto LABEL_121;
            case 2u:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v27 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v28 = *(void *)a2;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)a2 + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_109;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)a2 + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *((_DWORD *)this + 14) = v31;
              goto LABEL_121;
            case 3u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_54;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 4u:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_54;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 5u:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *((unsigned char *)this + 64) = v34;
              goto LABEL_121;
            case 6u:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_54;
              }
              *((void *)this + 5) = *(void *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 7u:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_54;
              }
              *((void *)this + 4) = *(void *)(*(void *)a2 + v2);
              goto LABEL_100;
            case 8u:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
              {
                *((void *)this + 3) = *(void *)(*(void *)a2 + v2);
LABEL_100:
                unint64_t v2 = *((void *)a2 + 1) + 8;
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_54:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v35 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v36 = *(void *)a2;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v57 = v35++;
                  char v58 = *(unsigned char *)(v36 + v57);
                  *((void *)a2 + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_114;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)a2 + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *((_DWORD *)this + 15) = v39;
              goto LABEL_121;
            case 0xAu:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v41 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v42 = *(void *)a2;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_120;
                  }
                  unint64_t v61 = v41++;
                  char v62 = *(unsigned char *)(v42 + v61);
                  *((void *)a2 + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_119;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)a2 + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *((_DWORD *)this + 12) = v45;
LABEL_121:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_121;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::OnsetHeartRateData::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if ((v4 & 0x40) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 52), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 56), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = PB::Writer::write(a2, *(double *)(v3 + 8), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 64), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(double *)(v3 + 32), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 60), 9u);
    if ((*(_WORD *)(v3 + 68) & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(double *)(v3 + 24), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return this;
  }
LABEL_21:
  unsigned int v5 = *(_DWORD *)(v3 + 48);

  return PB::Writer::writeVarInt(a2, v5, 0xAu);
}

uint64_t CMMsl::OnsetHeartRateData::hash_value(CMMsl::OnsetHeartRateData *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 0x40) != 0)
  {
    uint64_t v2 = *((unsigned int *)this + 13);
    if ((v1 & 0x80) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 14);
      if ((v1 & 2) != 0) {
        goto LABEL_4;
      }
LABEL_24:
      double v4 = 0.0;
      if (v1) {
        goto LABEL_7;
      }
LABEL_25:
      double v5 = 0.0;
      if ((*((_WORD *)this + 34) & 0x200) != 0) {
        goto LABEL_10;
      }
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_3;
    }
  }
  uint64_t v3 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_24;
  }
LABEL_4:
  double v4 = *((double *)this + 2);
  if (v4 == 0.0) {
    double v4 = 0.0;
  }
  if ((v1 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_7:
  double v5 = *((double *)this + 1);
  if (v5 == 0.0) {
    double v5 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x200) != 0)
  {
LABEL_10:
    uint64_t v6 = *((unsigned __int8 *)this + 64);
    if ((v1 & 0x10) != 0) {
      goto LABEL_11;
    }
LABEL_27:
    double v7 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_14;
    }
LABEL_28:
    double v8 = 0.0;
    if ((v1 & 4) != 0) {
      goto LABEL_17;
    }
LABEL_29:
    double v9 = 0.0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_20;
    }
LABEL_30:
    uint64_t v10 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_21;
    }
LABEL_31:
    uint64_t v11 = 0;
    return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11;
  }
LABEL_26:
  uint64_t v6 = 0;
  if ((v1 & 0x10) == 0) {
    goto LABEL_27;
  }
LABEL_11:
  double v7 = *((double *)this + 5);
  if (v7 == 0.0) {
    double v7 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_28;
  }
LABEL_14:
  double v8 = *((double *)this + 4);
  if (v8 == 0.0) {
    double v8 = 0.0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_29;
  }
LABEL_17:
  double v9 = *((double *)this + 3);
  if (v9 == 0.0) {
    double v9 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_30;
  }
LABEL_20:
  uint64_t v10 = *((unsigned int *)this + 15);
  if ((v1 & 0x20) == 0) {
    goto LABEL_31;
  }
LABEL_21:
  uint64_t v11 = *((unsigned int *)this + 12);
  return v3 ^ v2 ^ *(void *)&v4 ^ *(void *)&v5 ^ v6 ^ *(void *)&v7 ^ *(void *)&v8 ^ *(void *)&v9 ^ v10 ^ v11;
}

void CMMsl::Orientation::~Orientation(CMMsl::Orientation *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::Orientation::Orientation(uint64_t this, const CMMsl::Orientation *a2)
{
  *(void *)this = off_1003A7A50;
  *(_DWORD *)(this + 20) = 0;
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v3 = *((void *)a2 + 1);
    *(unsigned char *)(this + 20) = 1;
    *(void *)(this + 8) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return this;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    int v4 = *((_DWORD *)a2 + 4);
    *(unsigned char *)(this + 20) = v2;
    *(_DWORD *)(this + 16) = v4;
  }
  return this;
}

const CMMsl::Orientation *CMMsl::Orientation::operator=(const CMMsl::Orientation *a1, const CMMsl::Orientation *a2)
{
  if (a1 != a2)
  {
    CMMsl::Orientation::Orientation((uint64_t)v7, a2);
    uint64_t v3 = v9;
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v5 = *((void *)a1 + 2);
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v3;
    uint64_t v8 = v4;
    uint64_t v9 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::Orientation *a2, CMMsl::Orientation *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  int v5 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v5;
  return result;
}

double CMMsl::Orientation::Orientation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7A50;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7A50;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return result;
}

uint64_t CMMsl::Orientation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A7A50;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v5;
    v8[2] = v6;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::Orientation::formatText(CMMsl::Orientation *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "orientation", *((_DWORD *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::Orientation::readFrom(CMMsl::Orientation *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::Orientation::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::Orientation::hash_value(CMMsl::Orientation *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v2 = 0;
    return v2 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v2 = *((unsigned int *)this + 4);
  return v2 ^ *(void *)&v1;
}

void CMMsl::PDRAlgType::~PDRAlgType(CMMsl::PDRAlgType *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PDRAlgType::PDRAlgType(uint64_t this, const CMMsl::PDRAlgType *a2)
{
  *(void *)this = off_1003A7A88;
  *(void *)(this + 8) = 0;
  if (*((unsigned char *)a2 + 12))
  {
    int v2 = *((_DWORD *)a2 + 2);
    *(unsigned char *)(this + 12) = 1;
    *(_DWORD *)(this + 8) = v2;
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v6[0] = off_1003A7A88;
    int v3 = *(unsigned __int8 *)(a2 + 12);
    uint64_t v4 = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = (v3 << 31 >> 31) & *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 12) = v3 & 1;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void v6[2];

  if (a1 != a2)
  {
    v6[0] = off_1003A7A88;
    int v3 = *(void *)(a2 + 8);
    *(_DWORD *)(a2 + 12) = 0;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    v6[1] = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

uint64_t CMMsl::swap(uint64_t this, CMMsl::PDRAlgType *a2, CMMsl::PDRAlgType *a3)
{
  int v3 = *(_DWORD *)(this + 12);
  *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v3;
  int v4 = *(_DWORD *)(this + 8);
  *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  return this;
}

uint64_t CMMsl::PDRAlgType::formatText(CMMsl::PDRAlgType *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if (*((unsigned char *)this + 12)) {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 2));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRAlgType::readFrom(CMMsl::PDRAlgType *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *((unsigned char *)this + 12) |= 1u;
        unint64_t v20 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
        uint64_t v21 = *(void *)a2;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          else {
            unint64_t v2 = *((void *)a2 + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)a2 + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)a2 + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *((_DWORD *)this + 2) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
        unint64_t v3 = *((void *)a2 + 2);
      }
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRAlgType::writeTo(uint64_t this, PB::Writer *a2)
{
  if (*(unsigned char *)(this + 12)) {
    return PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 8), 1u);
  }
  return this;
}

uint64_t CMMsl::PDRAlgType::hash_value(CMMsl::PDRAlgType *this)
{
  if (*((unsigned char *)this + 12)) {
    return *((int *)this + 2);
  }
  else {
    return 0;
  }
}

void CMMsl::PDRDOTEstimatorState::~PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(CMMsl::PDRDOTEstimatorState *this, const CMMsl::PDRDOTEstimatorState *a2)
{
  *(void *)this = off_1003A7AC0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorState *a2)
{
  if ((const CMMsl::PDRDOTEstimatorState *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState((CMMsl::PDRDOTEstimatorState *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorState *a2, CMMsl::PDRDOTEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorState::PDRDOTEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7AC0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7AC0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7AC0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorState::formatText(CMMsl::PDRDOTEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorState::readFrom(CMMsl::PDRDOTEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRDOTEstimatorState::hash_value(CMMsl::PDRDOTEstimatorState *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateArmSwing::~PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(CMMsl::PDRDOTEstimatorStateArmSwing *this, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  *(void *)this = off_1003A7AF8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateArmSwing *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateArmSwing *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing((CMMsl::PDRDOTEstimatorStateArmSwing *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateArmSwing *a2, CMMsl::PDRDOTEstimatorStateArmSwing *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateArmSwing::PDRDOTEstimatorStateArmSwing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7AF8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7AF8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7AF8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::formatText(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::readFrom(CMMsl::PDRDOTEstimatorStateArmSwing *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRDOTEstimatorStateArmSwing::hash_value(CMMsl::PDRDOTEstimatorStateArmSwing *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBody::~PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(CMMsl::PDRDOTEstimatorStateBody *this, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  *(void *)this = off_1003A7B30;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBody *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody((CMMsl::PDRDOTEstimatorStateBody *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBody *a2, CMMsl::PDRDOTEstimatorStateBody *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateBody::PDRDOTEstimatorStateBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7B30;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7B30;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7B30;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::formatText(CMMsl::PDRDOTEstimatorStateBody *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::readFrom(CMMsl::PDRDOTEstimatorStateBody *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRDOTEstimatorStateBody::hash_value(CMMsl::PDRDOTEstimatorStateBody *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  *(void *)this = off_1003A7B68;
  float v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug(this);

  operator delete();
}

CMMsl::PDRDOTEstimatorStateBodyDebug *CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(CMMsl::PDRDOTEstimatorStateBodyDebug *this, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  *(void *)this = off_1003A7B68;
  *(_OWORD *)((char *)this + 8) = 0u;
  float v4 = (char *)this + 8;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (*((unsigned char *)a2 + 72))
  {
    uint64_t v5 = *((void *)a2 + 7);
    *((unsigned char *)this + 72) = 1;
    *((void *)this + 7) = v5;
  }
  if (this != a2)
  {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
    sub_100024308((char *)this + 32, *((char **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  }
  char v6 = *((unsigned char *)a2 + 72);
  if ((v6 & 2) == 0)
  {
    if ((*((unsigned char *)a2 + 72) & 8) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    char v10 = *((unsigned char *)a2 + 69);
    *((unsigned char *)this + 72) |= 8u;
    *((unsigned char *)this + 69) = v10;
    if ((*((unsigned char *)a2 + 72) & 4) == 0) {
      return this;
    }
    goto LABEL_8;
  }
  int v9 = *((_DWORD *)a2 + 16);
  *((unsigned char *)this + 72) |= 2u;
  *((_DWORD *)this + 16) = v9;
  char v6 = *((unsigned char *)a2 + 72);
  if ((v6 & 8) != 0) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v6 & 4) != 0)
  {
LABEL_8:
    char v7 = *((unsigned char *)a2 + 68);
    *((unsigned char *)this + 72) |= 4u;
    *((unsigned char *)this + 68) = v7;
  }
  return this;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateBodyDebug *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateBodyDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 69);
    *(unsigned char *)(a1 + 69) = v16;
    char v16 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v15;
    char v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateBodyDebug *a2, CMMsl::PDRDOTEstimatorStateBodyDebug *a3)
{
  int v3 = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v3;
  uint64_t v4 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v4;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v8;
  uint64_t v9 = *((void *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((void *)a2 + 5) = v9;
  uint64_t v10 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v10;
  float result = *((float *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((float *)a2 + 16) = result;
  LOBYTE(v10) = *((unsigned char *)this + 69);
  *((unsigned char *)this + 69) = *((unsigned char *)a2 + 69);
  *((unsigned char *)a2 + 69) = v10;
  LOBYTE(v10) = *((unsigned char *)this + 68);
  *((unsigned char *)this + 68) = *((unsigned char *)a2 + 68);
  *((unsigned char *)a2 + 68) = v10;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7B68;
  uint64_t v4 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  sub_100274A30(v4, (__n128 *)(a2 + 32));
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 69) = *(unsigned char *)(a2 + 69);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateBodyDebug::PDRDOTEstimatorStateBodyDebug((uint64_t)&v9, a2);
    int v3 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v17;
    int v17 = v3;
    uint64_t v4 = *(void *)(a1 + 56);
    *(void *)(a1 + 56) = v13;
    uint64_t v13 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v10;
    long long v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 24) = v11;
    long long v11 = v6;
    long long v7 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a1 + 40) = v12;
    long long v12 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(a1 + 64) = v14;
    int v14 = v4;
    LOBYTE(v3) = *(unsigned char *)(a1 + 69);
    *(unsigned char *)(a1 + 69) = v16;
    char v16 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 68);
    *(unsigned char *)(a1 + 68) = v15;
    char v15 = v3;
    CMMsl::PDRDOTEstimatorStateBodyDebug::~PDRDOTEstimatorStateBodyDebug((CMMsl::PDRDOTEstimatorStateBodyDebug *)&v9);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::formatText(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  long long v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "dotVector", v7);
  }
  if ((*((unsigned char *)this + 72) & 4) != 0) {
    PB::TextFormatter::format(a2, "hasValidTNBFrame", *((unsigned char *)this + 68));
  }
  uint64_t v8 = (float *)*((void *)this + 4);
  uint64_t v9 = (float *)*((void *)this + 5);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(a2, "headingVector", v10);
  }
  char v11 = *((unsigned char *)this + 72);
  if ((v11 & 8) != 0)
  {
    PB::TextFormatter::format(a2, "isPedestrian", *((unsigned char *)this + 69));
    char v11 = *((unsigned char *)this + 72);
    if ((v11 & 1) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*((unsigned char *)this + 72) & 1) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 7));
  if ((*((unsigned char *)this + 72) & 2) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(a2, "uncertainty", *((float *)this + 16));
LABEL_11:

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTEstimatorStateBodyDebug::readFrom(CMMsl::PDRDOTEstimatorStateBodyDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)((char *)this + 32);
    uint64_t v9 = (char *)this + 48;
    float v10 = (void **)((char *)this + 8);
    char v11 = (char *)this + 24;
    while (1)
    {
      uint64_t v12 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 72) |= 1u;
          unint64_t v25 = *((void *)a2 + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((void *)this + 7) = *(void *)(*(void *)a2 + v25);
          uint64_t v26 = *((void *)a2 + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            int v65 = (char *)*((void *)this + 2);
            unint64_t v64 = *((void *)this + 3);
            if ((unint64_t)v65 >= v64)
            {
              uint64_t v69 = (char *)*v10;
              uint64_t v70 = (v65 - (unsigned char *)*v10) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
LABEL_137:
              }
                sub_10000EE98();
              uint64_t v72 = v64 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                uint64_t v74 = (char *)sub_100024458((uint64_t)v11, v73);
                uint64_t v69 = (char *)*((void *)this + 1);
                int v65 = (char *)*((void *)this + 2);
              }
              else
              {
                uint64_t v74 = 0;
              }
              BOOL v81 = &v74[4 * v70];
              *(_DWORD *)BOOL v81 = 0;
              unint64_t v66 = v81 + 4;
              while (v65 != v69)
              {
                int v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *((void *)this + 1) = v81;
              *((void *)this + 2) = v66;
              *((void *)this + 3) = &v74[4 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(_DWORD *)int v65 = 0;
              unint64_t v66 = v65 + 4;
            }
            *((void *)this + 2) = v66;
            goto LABEL_123;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)a2 + 1);
          unint64_t v28 = *((void *)a2 + 2);
          while (v27 < v28 && !*((unsigned char *)a2 + 24))
          {
            char v30 = (char *)*((void *)this + 2);
            unint64_t v29 = *((void *)this + 3);
            if ((unint64_t)v30 >= v29)
            {
              char v32 = (char *)*v10;
              uint64_t v33 = (v30 - (unsigned char *)*v10) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_137;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                char v37 = (char *)sub_100024458((uint64_t)v11, v36);
                char v32 = (char *)*((void *)this + 1);
                char v30 = (char *)*((void *)this + 2);
              }
              else
              {
                char v37 = 0;
              }
              unsigned int v38 = &v37[4 * v33];
              *(_DWORD *)unsigned int v38 = 0;
              char v31 = v38 + 4;
              while (v30 != v32)
              {
                int v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *((void *)this + 1) = v38;
              *((void *)this + 2) = v31;
              *((void *)this + 3) = &v37[4 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)char v30 = 0;
              char v31 = v30 + 4;
            }
            *((void *)this + 2) = v31;
            unint64_t v40 = *((void *)a2 + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)a2 + 2)) {
              goto LABEL_91;
            }
            *(v31 - 1) = *(_DWORD *)(*(void *)a2 + v40);
            unint64_t v28 = *((void *)a2 + 2);
            unint64_t v27 = *((void *)a2 + 1) + 4;
            *((void *)a2 + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v41 = *((void *)a2 + 1);
            unint64_t v42 = *((void *)a2 + 2);
            while (v41 < v42 && !*((unsigned char *)a2 + 24))
            {
              unsigned int v44 = (char *)*((void *)this + 5);
              unint64_t v43 = *((void *)this + 6);
              if ((unint64_t)v44 >= v43)
              {
                char v46 = (char *)*v8;
                uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62) {
                  goto LABEL_138;
                }
                uint64_t v49 = v43 - (void)v46;
                if (v49 >> 1 > v48) {
                  unint64_t v48 = v49 >> 1;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  char v51 = (char *)sub_100024458((uint64_t)v9, v50);
                  char v46 = (char *)*((void *)this + 4);
                  unsigned int v44 = (char *)*((void *)this + 5);
                }
                else
                {
                  char v51 = 0;
                }
                unsigned int v52 = &v51[4 * v47];
                *(_DWORD *)unsigned int v52 = 0;
                uint64_t v45 = v52 + 4;
                while (v44 != v46)
                {
                  int v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *((void *)this + 4) = v52;
                *((void *)this + 5) = v45;
                *((void *)this + 6) = &v51[4 * v50];
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v44 = 0;
                uint64_t v45 = v44 + 4;
              }
              *((void *)this + 5) = v45;
              unint64_t v54 = *((void *)a2 + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)a2 + 2))
              {
LABEL_91:
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(void *)a2 + v54);
              unint64_t v42 = *((void *)a2 + 2);
              unint64_t v41 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v68 = (char *)*((void *)this + 5);
            unint64_t v67 = *((void *)this + 6);
            if ((unint64_t)v68 >= v67)
            {
              unint64_t v75 = (char *)*v8;
              uint64_t v76 = (v68 - (unsigned char *)*v8) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
LABEL_138:
              }
                sub_10000EE98();
              uint64_t v78 = v67 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_100024458((uint64_t)v9, v79);
                unint64_t v75 = (char *)*((void *)this + 4);
                unint64_t v68 = (char *)*((void *)this + 5);
              }
              else
              {
                uint64_t v80 = 0;
              }
              unsigned int v83 = &v80[4 * v76];
              *(_DWORD *)unsigned int v83 = 0;
              unint64_t v66 = v83 + 4;
              while (v68 != v75)
              {
                int v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *((void *)this + 4) = v83;
              *((void *)this + 5) = v66;
              *((void *)this + 6) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v68 = 0;
              unint64_t v66 = v68 + 4;
            }
            *((void *)this + 5) = v66;
LABEL_123:
            unint64_t v85 = *((void *)a2 + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((void *)a2 + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(void *)a2 + v85);
LABEL_127:
              uint64_t v26 = *((void *)a2 + 1) + 4;
LABEL_128:
              *((void *)a2 + 1) = v26;
            }
            else
            {
LABEL_125:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_129:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 72) |= 2u;
          unint64_t v55 = *((void *)a2 + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)a2 + 2)) {
            goto LABEL_125;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v55);
          goto LABEL_127;
        case 5u:
          *((unsigned char *)this + 72) |= 8u;
          unint64_t v56 = *((void *)a2 + 1);
          if (v56 >= *((void *)a2 + 2))
          {
            BOOL v59 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v57 = v56 + 1;
            int v58 = *(unsigned __int8 *)(*(void *)a2 + v56);
            *((void *)a2 + 1) = v57;
            BOOL v59 = v58 != 0;
          }
          *((unsigned char *)this + 69) = v59;
          goto LABEL_129;
        case 6u:
          *((unsigned char *)this + 72) |= 4u;
          unint64_t v60 = *((void *)a2 + 1);
          if (v60 >= *((void *)a2 + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)a2 + v60);
            *((void *)a2 + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *((unsigned char *)this + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(a2, v15 >> 3, v24, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_129;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)a2 + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  if (*(unsigned char *)(this + 72)) {
    this = PB::Writer::write(a2, *(double *)(this + 56), 1u);
  }
  int v4 = *(float **)(v3 + 8);
  long long v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    this = PB::Writer::write(a2, v6, 2u);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    this = PB::Writer::write(a2, v9, 3u);
  }
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 69), 5u);
    if ((*(unsigned char *)(v3 + 72) & 4) == 0) {
      return this;
    }
    goto LABEL_15;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 4u);
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((v10 & 4) == 0) {
    return this;
  }
LABEL_15:
  char v11 = *(unsigned char *)(v3 + 68);

  return PB::Writer::write(a2, v11, 6u);
}

uint64_t CMMsl::PDRDOTEstimatorStateBodyDebug::hash_value(CMMsl::PDRDOTEstimatorStateBodyDebug *this)
{
  if (*((unsigned char *)this + 72))
  {
    if (*((double *)this + 7) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 7);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = PBHashBytes();
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 72) & 2) == 0)
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 72) & 8) != 0) {
      goto LABEL_8;
    }
LABEL_13:
    uint64_t v6 = 0;
    if ((*((unsigned char *)this + 72) & 4) != 0) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t v7 = 0;
    return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
  }
  float v8 = *((float *)this + 16);
  uint64_t v5 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 72) & 8) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v6 = *((unsigned __int8 *)this + 69);
  if ((*((unsigned char *)this + 72) & 4) == 0) {
    goto LABEL_14;
  }
LABEL_9:
  uint64_t v7 = *((unsigned __int8 *)this + 68);
  return v3 ^ v2 ^ v4 ^ v5 ^ v6 ^ v7;
}

void CMMsl::PDRDOTEstimatorStateDebug::~PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(CMMsl::PDRDOTEstimatorStateDebug *this, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  *(void *)this = off_1003A7BA0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateDebug *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateDebug *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug((CMMsl::PDRDOTEstimatorStateDebug *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateDebug *a2, CMMsl::PDRDOTEstimatorStateDebug *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateDebug::PDRDOTEstimatorStateDebug(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7BA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7BA0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7BA0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::formatText(CMMsl::PDRDOTEstimatorStateDebug *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dotMeasurement", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotMeasurementUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::readFrom(CMMsl::PDRDOTEstimatorStateDebug *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRDOTEstimatorStateDebug::hash_value(CMMsl::PDRDOTEstimatorStateDebug *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorStateHeading::~PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(CMMsl::PDRDOTEstimatorStateHeading *this, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  *(void *)this = off_1003A7BD8;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorStateHeading *a2)
{
  if ((const CMMsl::PDRDOTEstimatorStateHeading *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading((CMMsl::PDRDOTEstimatorStateHeading *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorStateHeading *a2, CMMsl::PDRDOTEstimatorStateHeading *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRDOTEstimatorStateHeading::PDRDOTEstimatorStateHeading(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7BD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7BD8;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7BD8;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::formatText(CMMsl::PDRDOTEstimatorStateHeading *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "dot", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::readFrom(CMMsl::PDRDOTEstimatorStateHeading *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRDOTEstimatorStateHeading::hash_value(CMMsl::PDRDOTEstimatorStateHeading *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}

void CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::~PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  *(void *)this = off_1003A7C10;
  *((_DWORD *)this + 10) = 0;
  char v2 = *((unsigned char *)a2 + 40);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 40) = 1;
    *((void *)this + 1) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 40) & 4) != 0)
  {
LABEL_5:
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    v3 |= 4u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 5) = v4;
    char v2 = *((unsigned char *)a2 + 40);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    LODWORD(v4) = *((_DWORD *)a2 + 4);
    v3 |= 2u;
    *((unsigned char *)this + 40) = v3;
    *((_DWORD *)this + 4) = v4;
    char v2 = *((unsigned char *)a2 + 40);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *((_DWORD *)a2 + 8);
  v3 |= 0x20u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 8) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  LODWORD(v4) = *((_DWORD *)a2 + 9);
  v3 |= 0x40u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 9) = v4;
  char v2 = *((unsigned char *)a2 + 40);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_16;
  }
LABEL_15:
  LODWORD(v4) = *((_DWORD *)a2 + 7);
  v3 |= 0x10u;
  *((unsigned char *)this + 40) = v3;
  *((_DWORD *)this + 7) = v4;
  if ((*((unsigned char *)a2 + 40) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_16:
  LODWORD(v4) = *((_DWORD *)a2 + 6);
  *((unsigned char *)this + 40) = v3 | 8;
  *((_DWORD *)this + 6) = v4;
  return *(float *)&v4;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2)
{
  if ((const CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)a1 != a2)
  {
    CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody((CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *)&v8, a2);
    int v3 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = v12;
    int v12 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v9;
    uint64_t v9 = v4;
    uint64_t v5 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = v11;
    uint64_t v11 = v5;
    long long v6 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a1 + 16) = v10;
    long long v10 = v6;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a2, CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *a3)
{
  int v3 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v4;
  LODWORD(v4) = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  float result = *((float *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = result;
  return result;
}

float CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::PDRDOTEstimatorUncertaintyModelOnBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7C10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7C10;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  float result = *(float *)(a2 + 24);
  *(float *)(a1 + 24) = result;
  return result;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v10[0] = off_1003A7C10;
    int v3 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v13 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v10[1] = v5;
    uint64_t v12 = *(void *)(a1 + 32);
    long long v6 = *(_OWORD *)(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 40) = v3;
    *(void *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v11 = v6;
    PB::Base::~Base((PB::Base *)v10);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::formatText(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "dotDeltaBufferMaxAbs", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "dotDeltaBufferVar", *((float *)this + 5));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(a2, "dotErrorEstimate", *((float *)this + 6));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(a2, "dotRelativeChangeOverBuffer", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(a2, "headingDeltaBufferVar", *((float *)this + 8));
  char v5 = *((unsigned char *)this + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(a2, "headingRelativeChangeOverBuffer", *((float *)this + 9));
  if (*((unsigned char *)this + 40)) {
LABEL_8:
  }
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
LABEL_9:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::readFrom(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 40) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          goto LABEL_47;
        case 2u:
          *((unsigned char *)this + 40) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 5) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 3u:
          *((unsigned char *)this + 40) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 4u:
          *((unsigned char *)this + 40) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 5u:
          *((unsigned char *)this + 40) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 6u:
          *((unsigned char *)this + 40) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_44;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_46;
        case 7u:
          *((unsigned char *)this + 40) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
          {
            *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_46:
            unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_47:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 40);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(this + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 20), 2u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  this = PB::Writer::write(a2, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    this = PB::Writer::write(a2, *(float *)(v3 + 28), 6u);
    if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
      return this;
    }
    goto LABEL_15;
  }
LABEL_13:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return this;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(a2, v5, 7u);
}

uint64_t CMMsl::PDRDOTEstimatorUncertaintyModelOnBody::hash_value(CMMsl::PDRDOTEstimatorUncertaintyModelOnBody *this)
{
  if ((*((unsigned char *)this + 40) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 40) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_24:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 2) != 0) {
      goto LABEL_6;
    }
LABEL_25:
    uint64_t v5 = 0;
    if ((*((unsigned char *)this + 40) & 0x20) != 0) {
      goto LABEL_9;
    }
LABEL_26:
    uint64_t v7 = 0;
    if ((*((unsigned char *)this + 40) & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_27:
    uint64_t v9 = 0;
    if ((*((unsigned char *)this + 40) & 0x10) != 0) {
      goto LABEL_15;
    }
    goto LABEL_28;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 40) & 4) == 0) {
    goto LABEL_24;
  }
LABEL_3:
  float v2 = *((float *)this + 5);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 40) & 2) == 0) {
    goto LABEL_25;
  }
LABEL_6:
  float v4 = *((float *)this + 4);
  uint64_t v5 = LODWORD(v4);
  if (v4 == 0.0) {
    uint64_t v5 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x20) == 0) {
    goto LABEL_26;
  }
LABEL_9:
  float v6 = *((float *)this + 8);
  uint64_t v7 = LODWORD(v6);
  if (v6 == 0.0) {
    uint64_t v7 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x40) == 0) {
    goto LABEL_27;
  }
LABEL_12:
  float v8 = *((float *)this + 9);
  uint64_t v9 = LODWORD(v8);
  if (v8 == 0.0) {
    uint64_t v9 = 0;
  }
  if ((*((unsigned char *)this + 40) & 0x10) != 0)
  {
LABEL_15:
    float v10 = *((float *)this + 7);
    uint64_t v11 = LODWORD(v10);
    if (v10 == 0.0) {
      uint64_t v11 = 0;
    }
    if ((*((unsigned char *)this + 40) & 8) != 0) {
      goto LABEL_18;
    }
LABEL_29:
    uint64_t v13 = 0;
    return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
  }
LABEL_28:
  uint64_t v11 = 0;
  if ((*((unsigned char *)this + 40) & 8) == 0) {
    goto LABEL_29;
  }
LABEL_18:
  float v12 = *((float *)this + 6);
  uint64_t v13 = LODWORD(v12);
  if (v12 == 0.0) {
    uint64_t v13 = 0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ v7 ^ v9 ^ v11 ^ v13;
}

void CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  *(void *)this = off_1003A7C48;
  float v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState(this);

  operator delete();
}

CMMsl::PDRDOTMeasurementSelectorState *CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(CMMsl::PDRDOTMeasurementSelectorState *this, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  *(void *)this = off_1003A7C48;
  *((void *)this + 1) = 0;
  float v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, const CMMsl::PDRDOTMeasurementSelectorState *a2)
{
  if ((const CMMsl::PDRDOTMeasurementSelectorState *)a1 != a2)
  {
    CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRDOTMeasurementSelectorState *a2, CMMsl::PDRDOTMeasurementSelectorState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::PDRDOTMeasurementSelectorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7C48;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = off_1003A7C48;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = off_1003A7C48;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v15 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v12 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    long long v14 = v8;
    CMMsl::PDRDOTMeasurementSelectorState::~PDRDOTMeasurementSelectorState((CMMsl::PDRDOTMeasurementSelectorState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::formatText(CMMsl::PDRDOTMeasurementSelectorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "placementFiltered", *((_DWORD *)this + 12));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbabilityFiltered", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRDOTMeasurementSelectorState::readFrom(CMMsl::PDRDOTMeasurementSelectorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 52) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_95;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_60;
        case 2u:
          *((unsigned char *)this + 52) |= 4u;
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          uint64_t v26 = *(void *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)a2 + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_84;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v50 = v24 + 1;
              char v51 = *(unsigned char *)(v26 + v24);
              *((void *)a2 + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                unint64_t v24 = v50;
                BOOL v16 = v49++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_84:
          *((_DWORD *)this + 12) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v32 = *((void *)a2 + 1);
            unint64_t v33 = *((void *)a2 + 2);
            while (v32 < v33 && !*((unsigned char *)a2 + 24))
            {
              uint64_t v35 = (char *)*((void *)this + 2);
              unint64_t v34 = *((void *)this + 3);
              if ((unint64_t)v35 >= v34)
              {
                char v37 = (char *)*v8;
                uint64_t v38 = (v35 - (unsigned char *)*v8) >> 2;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 1 > v39) {
                  unint64_t v39 = v40 >> 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v42 = (char *)sub_100024458((uint64_t)v9, v41);
                  char v37 = (char *)*((void *)this + 1);
                  uint64_t v35 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v42 = 0;
                }
                unint64_t v43 = &v42[4 * v38];
                *(_DWORD *)unint64_t v43 = 0;
                unint64_t v36 = v43 + 4;
                while (v35 != v37)
                {
                  int v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *((void *)this + 1) = v43;
                *((void *)this + 2) = v36;
                *((void *)this + 3) = &v42[4 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v35 = 0;
                unint64_t v36 = v35 + 4;
              }
              *((void *)this + 2) = v36;
              unint64_t v45 = *((void *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(void *)a2 + v45);
              unint64_t v33 = *((void *)a2 + 2);
              unint64_t v32 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v32;
            }
            PB::Reader::recallMark();
          }
          else
          {
            int v53 = (char *)*((void *)this + 2);
            unint64_t v52 = *((void *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v8;
              uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
LABEL_107:
              }
                sub_10000EE98();
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_100024458((uint64_t)v9, v59);
                unint64_t v55 = (char *)*((void *)this + 1);
                int v53 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v61 = &v60[4 * v56];
              *(_DWORD *)unint64_t v61 = 0;
              unint64_t v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((void *)this + 1) = v61;
              *((void *)this + 2) = v54;
              *((void *)this + 3) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)int v53 = 0;
              unint64_t v54 = v53 + 4;
            }
            *((void *)this + 2) = v54;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              uint64_t v47 = *((void *)a2 + 1) + 4;
LABEL_61:
              *((void *)a2 + 1) = v47;
            }
            else
            {
LABEL_95:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 52) |= 2u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)a2 + 2)) {
            goto LABEL_95;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v46);
LABEL_60:
          uint64_t v47 = *((void *)a2 + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8, 4u);
  }
  return this;
}

uint64_t CMMsl::PDRDOTMeasurementSelectorState::hash_value(CMMsl::PDRDOTMeasurementSelectorState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRFeatures::~PDRFeatures(CMMsl::PDRFeatures *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRFeatures::PDRFeatures(CMMsl::PDRFeatures *this, const CMMsl::PDRFeatures *a2)
{
  *(void *)this = off_1003A7C80;
  *((_DWORD *)this + 27) = 0;
  int v2 = *((_DWORD *)a2 + 27);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    int v3 = 1;
    *((_DWORD *)this + 27) = 1;
    *((double *)this + 1) = result;
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x40000) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 22);
    v3 |= 0x40000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 22) = LODWORD(result);
    int v2 = *((_DWORD *)a2 + 27);
  }
LABEL_6:
  if ((v2 & 0x100000) != 0)
  {
    LODWORD(result) = *((_DWORD *)a2 + 24);
    v3 |= 0x100000u;
    *((_DWORD *)this + 27) = v3;
    *((_DWORD *)this + 24) = LODWORD(result);
    int v2 = *((_DWORD *)a2 + 27);
    if ((v2 & 0x80000) == 0)
    {
LABEL_8:
      if ((v2 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *((_DWORD *)a2 + 23);
  v3 |= 0x80000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 23) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200000) == 0)
  {
LABEL_9:
    if ((v2 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(result) = *((_DWORD *)a2 + 25);
  v3 |= 0x200000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 25) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(result) = *((_DWORD *)a2 + 14);
  v3 |= 0x400u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 14) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(result) = *((_DWORD *)a2 + 16);
  v3 |= 0x1000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 16) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  LODWORD(result) = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 15) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  LODWORD(result) = *((_DWORD *)a2 + 17);
  v3 |= 0x2000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 17) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(result) = *((_DWORD *)a2 + 6);
  v3 |= 4u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 6) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(result) = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 8) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20) == 0)
  {
LABEL_17:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(result) = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 9) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x400000) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(result) = *((_DWORD *)a2 + 26);
  v3 |= 0x400000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 26) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(result) = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 11) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(result) = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 10) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x200) == 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(result) = *((_DWORD *)a2 + 13);
  v3 |= 0x200u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 13) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x100) == 0)
  {
LABEL_22:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 12) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x8000) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *((_DWORD *)a2 + 19);
  v3 |= 0x8000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 19) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(result) = *((_DWORD *)a2 + 18);
  v3 |= 0x4000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 18) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x20000) == 0)
  {
LABEL_25:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(result) = *((_DWORD *)a2 + 21);
  v3 |= 0x20000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 21) = LODWORD(result);
  int v2 = *((_DWORD *)a2 + 27);
  if ((v2 & 0x10000) == 0)
  {
LABEL_26:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_48:
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 27) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
LABEL_47:
  LODWORD(result) = *((_DWORD *)a2 + 20);
  v3 |= 0x10000u;
  *((_DWORD *)this + 27) = v3;
  *((_DWORD *)this + 20) = LODWORD(result);
  if ((*((_DWORD *)a2 + 27) & 2) != 0) {
    goto LABEL_48;
  }
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, const CMMsl::PDRFeatures *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((CMMsl::PDRFeatures *)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRFeatures *a2, CMMsl::PDRFeatures *a3)
{
  int v3 = *((_DWORD *)this + 27);
  *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
  *((_DWORD *)a2 + 27) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
  *((_DWORD *)a2 + 22) = v4;
  LODWORD(v4) = *((_DWORD *)this + 24);
  *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
  *((_DWORD *)a2 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)this + 23);
  *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
  *((_DWORD *)a2 + 23) = v4;
  LODWORD(v4) = *((_DWORD *)this + 25);
  *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
  *((_DWORD *)a2 + 25) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  LODWORD(v4) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v4;
  LODWORD(v4) = *((_DWORD *)this + 26);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LODWORD(v4) = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)a2 + 19) = v4;
  LODWORD(v4) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v4;
  LODWORD(v4) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
  *((_DWORD *)a2 + 21) = v4;
  LODWORD(v4) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRFeatures::PDRFeatures(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7C80;
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

CMMsl *CMMsl::PDRFeatures::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFeatures::PDRFeatures((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFeatures *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFeatures::formatText(CMMsl::PDRFeatures *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "pitchMean", *((float *)this + 6));
    int v5 = *((_DWORD *)this + 27);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "pitchStd", *((float *)this + 7));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(a2, "rollMeanAbs", *((float *)this + 8));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(a2, "rollStd", *((float *)this + 9));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYHigh", *((float *)this + 10));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpXYPed", *((float *)this + 11));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZHigh", *((float *)this + 12));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(a2, "rotRateInerFFTAmpZPed", *((float *)this + 13));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(a2, "rotRateInerXYMean", *((float *)this + 14));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(a2, "rotRateInerXYStd", *((float *)this + 15));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(a2, "rotRateInerZMean", *((float *)this + 16));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(a2, "rotRateInerZStd", *((float *)this + 17));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYHigh", *((float *)this + 18));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpXYPed", *((float *)this + 19));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZHigh", *((float *)this + 20));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(a2, "userAccelInerFFTAmpZPed", *((float *)this + 21));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(a2, "userAccelInerXYMean", *((float *)this + 22));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(a2, "userAccelInerXYStd", *((float *)this + 23));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(a2, "userAccelInerZMean", *((float *)this + 24));
  int v5 = *((_DWORD *)this + 27);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(a2, "userAccelInerZStd", *((float *)this + 25));
  if ((*((_DWORD *)this + 27) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(a2, "yawStd", *((float *)this + 26));
LABEL_25:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFeatures::readFrom(CMMsl::PDRFeatures *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((_DWORD *)this + 27) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_88;
        case 2u:
          *((_DWORD *)this + 27) |= 0x40000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 22) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 3u:
          *((_DWORD *)this + 27) |= 0x100000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 24) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 4u:
          *((_DWORD *)this + 27) |= 0x80000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 23) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 5u:
          *((_DWORD *)this + 27) |= 0x200000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 25) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 6u:
          *((_DWORD *)this + 27) |= 0x400u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 7u:
          *((_DWORD *)this + 27) |= 0x1000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 16) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 8u:
          *((_DWORD *)this + 27) |= 0x800u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 9u:
          *((_DWORD *)this + 27) |= 0x2000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 17) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xAu:
          *((_DWORD *)this + 27) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xBu:
          *((_DWORD *)this + 27) |= 0x10u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xCu:
          *((_DWORD *)this + 27) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xDu:
          *((_DWORD *)this + 27) |= 0x20u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xEu:
          *((_DWORD *)this + 27) |= 0x400000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 26) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0xFu:
          *((_DWORD *)this + 27) |= 0x80u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x10u:
          *((_DWORD *)this + 27) |= 0x40u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x11u:
          *((_DWORD *)this + 27) |= 0x200u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x12u:
          *((_DWORD *)this + 27) |= 0x100u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x13u:
          *((_DWORD *)this + 27) |= 0x8000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 19) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x14u:
          *((_DWORD *)this + 27) |= 0x4000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 18) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x15u:
          *((_DWORD *)this + 27) |= 0x20000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 21) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_95;
        case 0x16u:
          *((_DWORD *)this + 27) |= 0x10000u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_93;
          }
          *((_DWORD *)this + 20) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_95:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *((_DWORD *)this + 27) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
          {
LABEL_93:
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_88:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_96:
            *((void *)a2 + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFeatures::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  int v4 = *(_DWORD *)(this + 108);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 88), 2u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = PB::Writer::write(a2, *(float *)(v3 + 96), 3u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  this = PB::Writer::write(a2, *(float *)(v3 + 92), 4u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  this = PB::Writer::write(a2, *(float *)(v3 + 100), 5u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 6u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  this = PB::Writer::write(a2, *(float *)(v3 + 64), 7u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 8u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  this = PB::Writer::write(a2, *(float *)(v3 + 68), 9u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 0xAu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xCu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xDu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = PB::Writer::write(a2, *(float *)(v3 + 104), 0xEu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 0xFu);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 0x11u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 0x12u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = PB::Writer::write(a2, *(float *)(v3 + 76), 0x13u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  this = PB::Writer::write(a2, *(float *)(v3 + 72), 0x14u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    this = PB::Writer::write(a2, *(float *)(v3 + 80), 0x16u);
    if ((*(_DWORD *)(v3 + 108) & 2) == 0) {
      return this;
    }
    goto LABEL_47;
  }
LABEL_45:
  this = PB::Writer::write(a2, *(float *)(v3 + 84), 0x15u);
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_47:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 0x17u);
}

uint64_t CMMsl::PDRFeatures::hash_value(CMMsl::PDRFeatures *this)
{
  int v1 = *((_DWORD *)this + 27);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((v1 & 0x40000) != 0) {
      goto LABEL_3;
    }
LABEL_72:
    uint64_t v4 = 0;
    if ((v1 & 0x100000) != 0) {
      goto LABEL_6;
    }
LABEL_73:
    uint64_t v6 = 0;
    if ((v1 & 0x80000) != 0) {
      goto LABEL_9;
    }
LABEL_74:
    uint64_t v8 = 0;
    if ((v1 & 0x200000) != 0) {
      goto LABEL_12;
    }
LABEL_75:
    uint64_t v10 = 0;
    if ((v1 & 0x400) != 0) {
      goto LABEL_15;
    }
LABEL_76:
    uint64_t v12 = 0;
    if ((v1 & 0x1000) != 0) {
      goto LABEL_18;
    }
LABEL_77:
    uint64_t v14 = 0;
    if ((v1 & 0x800) != 0) {
      goto LABEL_21;
    }
LABEL_78:
    uint64_t v16 = 0;
    if ((v1 & 0x2000) != 0) {
      goto LABEL_24;
    }
LABEL_79:
    uint64_t v18 = 0;
    if ((v1 & 4) != 0) {
      goto LABEL_27;
    }
LABEL_80:
    uint64_t v20 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_30;
    }
LABEL_81:
    uint64_t v22 = 0;
    if ((v1 & 8) != 0) {
      goto LABEL_33;
    }
LABEL_82:
    uint64_t v24 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_36;
    }
LABEL_83:
    uint64_t v26 = 0;
    if ((v1 & 0x400000) != 0) {
      goto LABEL_39;
    }
LABEL_84:
    uint64_t v28 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_42;
    }
LABEL_85:
    uint64_t v30 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_45;
    }
LABEL_86:
    uint64_t v32 = 0;
    if ((v1 & 0x200) != 0) {
      goto LABEL_48;
    }
LABEL_87:
    uint64_t v34 = 0;
    if ((v1 & 0x100) != 0) {
      goto LABEL_51;
    }
LABEL_88:
    uint64_t v36 = 0;
    if ((v1 & 0x8000) != 0) {
      goto LABEL_54;
    }
LABEL_89:
    uint64_t v38 = 0;
    if ((v1 & 0x4000) != 0) {
      goto LABEL_57;
    }
LABEL_90:
    uint64_t v40 = 0;
    if ((v1 & 0x20000) != 0) {
      goto LABEL_60;
    }
LABEL_91:
    uint64_t v42 = 0;
    if ((v1 & 0x10000) != 0) {
      goto LABEL_63;
    }
    goto LABEL_92;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((v1 & 0x40000) == 0) {
    goto LABEL_72;
  }
LABEL_3:
  float v3 = *((float *)this + 22);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((v1 & 0x100000) == 0) {
    goto LABEL_73;
  }
LABEL_6:
  float v5 = *((float *)this + 24);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((v1 & 0x80000) == 0) {
    goto LABEL_74;
  }
LABEL_9:
  float v7 = *((float *)this + 23);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x200000) == 0) {
    goto LABEL_75;
  }
LABEL_12:
  float v9 = *((float *)this + 25);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x400) == 0) {
    goto LABEL_76;
  }
LABEL_15:
  float v11 = *((float *)this + 14);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((v1 & 0x1000) == 0) {
    goto LABEL_77;
  }
LABEL_18:
  float v13 = *((float *)this + 16);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((v1 & 0x800) == 0) {
    goto LABEL_78;
  }
LABEL_21:
  float v15 = *((float *)this + 15);
  uint64_t v16 = LODWORD(v15);
  if (v15 == 0.0) {
    uint64_t v16 = 0;
  }
  if ((v1 & 0x2000) == 0) {
    goto LABEL_79;
  }
LABEL_24:
  float v17 = *((float *)this + 17);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 4) == 0) {
    goto LABEL_80;
  }
LABEL_27:
  float v19 = *((float *)this + 6);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_81;
  }
LABEL_30:
  float v21 = *((float *)this + 8);
  uint64_t v22 = LODWORD(v21);
  if (v21 == 0.0) {
    uint64_t v22 = 0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_82;
  }
LABEL_33:
  float v23 = *((float *)this + 7);
  uint64_t v24 = LODWORD(v23);
  if (v23 == 0.0) {
    uint64_t v24 = 0;
  }
  if ((v1 & 0x20) == 0) {
    goto LABEL_83;
  }
LABEL_36:
  float v25 = *((float *)this + 9);
  uint64_t v26 = LODWORD(v25);
  if (v25 == 0.0) {
    uint64_t v26 = 0;
  }
  if ((v1 & 0x400000) == 0) {
    goto LABEL_84;
  }
LABEL_39:
  float v27 = *((float *)this + 26);
  uint64_t v28 = LODWORD(v27);
  if (v27 == 0.0) {
    uint64_t v28 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_85;
  }
LABEL_42:
  float v29 = *((float *)this + 11);
  uint64_t v30 = LODWORD(v29);
  if (v29 == 0.0) {
    uint64_t v30 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_86;
  }
LABEL_45:
  float v31 = *((float *)this + 10);
  uint64_t v32 = LODWORD(v31);
  if (v31 == 0.0) {
    uint64_t v32 = 0;
  }
  if ((v1 & 0x200) == 0) {
    goto LABEL_87;
  }
LABEL_48:
  float v33 = *((float *)this + 13);
  uint64_t v34 = LODWORD(v33);
  if (v33 == 0.0) {
    uint64_t v34 = 0;
  }
  if ((v1 & 0x100) == 0) {
    goto LABEL_88;
  }
LABEL_51:
  float v35 = *((float *)this + 12);
  uint64_t v36 = LODWORD(v35);
  if (v35 == 0.0) {
    uint64_t v36 = 0;
  }
  if ((v1 & 0x8000) == 0) {
    goto LABEL_89;
  }
LABEL_54:
  float v37 = *((float *)this + 19);
  uint64_t v38 = LODWORD(v37);
  if (v37 == 0.0) {
    uint64_t v38 = 0;
  }
  if ((v1 & 0x4000) == 0) {
    goto LABEL_90;
  }
LABEL_57:
  float v39 = *((float *)this + 18);
  uint64_t v40 = LODWORD(v39);
  if (v39 == 0.0) {
    uint64_t v40 = 0;
  }
  if ((v1 & 0x20000) == 0) {
    goto LABEL_91;
  }
LABEL_60:
  float v41 = *((float *)this + 21);
  uint64_t v42 = LODWORD(v41);
  if (v41 == 0.0) {
    uint64_t v42 = 0;
  }
  if ((v1 & 0x10000) != 0)
  {
LABEL_63:
    float v43 = *((float *)this + 20);
    uint64_t v44 = LODWORD(v43);
    if (v43 == 0.0) {
      uint64_t v44 = 0;
    }
    if ((v1 & 2) != 0) {
      goto LABEL_66;
    }
LABEL_93:
    double v45 = 0.0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(void *)&v45;
  }
LABEL_92:
  uint64_t v44 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_93;
  }
LABEL_66:
  double v45 = *((double *)this + 2);
  if (v45 == 0.0) {
    double v45 = 0.0;
  }
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v16 ^ v18 ^ v20 ^ v22 ^ v24 ^ v26 ^ v28 ^ v30 ^ v32 ^ v34 ^ v36 ^ v38 ^ v40 ^ v42 ^ v44 ^ *(void *)&v45;
}

void CMMsl::PDRFenceReference::~PDRFenceReference(CMMsl::PDRFenceReference *this)
{
  PB::Base::~Base(this);

  operator delete();
}

float CMMsl::PDRFenceReference::PDRFenceReference(CMMsl::PDRFenceReference *this, const CMMsl::PDRFenceReference *a2)
{
  *(void *)this = off_1003A7CB8;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 1) == 0)
  {
    char v2 = 2;
    if ((*((unsigned char *)a2 + 20) & 2) == 0) {
      return *(float *)&v3;
    }
    goto LABEL_5;
  }
  uint64_t v3 = *((void *)a2 + 1);
  *((unsigned char *)this + 20) = 1;
  *((void *)this + 1) = v3;
  char v2 = 3;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
LABEL_5:
    LODWORD(v3) = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = v2;
    *((_DWORD *)this + 4) = v3;
  }
  return *(float *)&v3;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, const CMMsl::PDRFenceReference *a2)
{
  if ((const CMMsl::PDRFenceReference *)a1 != a2)
  {
    CMMsl::PDRFenceReference::PDRFenceReference((CMMsl::PDRFenceReference *)v6, a2);
    int v3 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v9;
    int v9 = v3;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v4;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v8;
    int v8 = v4;
    PB::Base::~Base((PB::Base *)v6);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceReference *a2, CMMsl::PDRFenceReference *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  float result = *((float *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((float *)a2 + 4) = result;
  return result;
}

float CMMsl::PDRFenceReference::PDRFenceReference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7CB8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

{
  float result;

  *(void *)a1 = off_1003A7CB8;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  float result = *(float *)(a2 + 16);
  *(float *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRFenceReference::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v9[0] = off_1003A7CB8;
    int v3 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    int v5 = *(_DWORD *)(a2 + 16);
    int v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v3;
    int v11 = v6;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v4;
    v9[1] = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v5;
    int v10 = v4;
    PB::Base::~Base((PB::Base *)v9);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceReference::formatText(CMMsl::PDRFenceReference *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(a2, "radius", *((float *)this + 4));
    char v5 = *((unsigned char *)this + 20);
  }
  if (v5) {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceReference::readFrom(CMMsl::PDRFenceReference *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 4) = *(_DWORD *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 4;
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          goto LABEL_33;
        }
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2))
        {
LABEL_28:
          *((unsigned char *)a2 + 24) = 1;
          goto LABEL_33;
        }
        *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
        unint64_t v2 = *((void *)a2 + 1) + 8;
      }
      *((void *)a2 + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
    }
    while (v2 < v3 && !*((unsigned char *)a2 + 24));
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceReference::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PDRFenceReference::hash_value(CMMsl::PDRFenceReference *this)
{
  if (*((unsigned char *)this + 20))
  {
    double v1 = *((double *)this + 1);
    if (v1 == 0.0) {
      double v1 = 0.0;
    }
    if ((*((unsigned char *)this + 20) & 2) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v3 = 0;
    return v3 ^ *(void *)&v1;
  }
  double v1 = 0.0;
  if ((*((unsigned char *)this + 20) & 2) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  float v2 = *((float *)this + 4);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  return v3 ^ *(void *)&v1;
}

void CMMsl::PDRFenceState::~PDRFenceState(CMMsl::PDRFenceState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

uint64_t CMMsl::PDRFenceState::PDRFenceState(uint64_t this, const CMMsl::PDRFenceState *a2)
{
  *(void *)this = off_1003A7CF0;
  *(_DWORD *)(this + 68) = 0;
  __int16 v2 = *((_WORD *)a2 + 34);
  if (v2)
  {
    uint64_t v4 = *((void *)a2 + 1);
    __int16 v3 = 1;
    *(_WORD *)(this + 68) = 1;
    *(void *)(this + 8) = v4;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((*((_WORD *)a2 + 34) & 0x200) != 0)
  {
LABEL_5:
    int v5 = *((_DWORD *)a2 + 13);
    v3 |= 0x200u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 52) = v5;
    __int16 v2 = *((_WORD *)a2 + 34);
  }
LABEL_6:
  if ((v2 & 0x400) != 0)
  {
    int v6 = *((_DWORD *)a2 + 14);
    v3 |= 0x400u;
    *(_WORD *)(this + 68) = v3;
    *(_DWORD *)(this + 56) = v6;
    __int16 v2 = *((_WORD *)a2 + 34);
    if ((v2 & 0x800) == 0)
    {
LABEL_8:
      if ((v2 & 0x40) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x800) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *((_DWORD *)a2 + 15);
  v3 |= 0x800u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 60) = v7;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x40) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *((_DWORD *)a2 + 10);
  v3 |= 0x40u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 40) = v8;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *((_DWORD *)a2 + 11);
  v3 |= 0x80u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 44) = v9;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *((_DWORD *)a2 + 12);
  v3 |= 0x100u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 48) = v10;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x1000) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *((unsigned char *)a2 + 64);
  v3 |= 0x1000u;
  *(_WORD *)(this + 68) = v3;
  *(unsigned char *)(this + 64) = v11;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 2) == 0)
  {
LABEL_13:
    if ((v2 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v12 = *((void *)a2 + 2);
  v3 |= 2u;
  *(_WORD *)(this + 68) = v3;
  *(void *)(this + 16) = v12;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 8) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 28) = v13;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v14 = *((_DWORD *)a2 + 8);
  v3 |= 0x10u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 32) = v14;
  __int16 v2 = *((_WORD *)a2 + 34);
  if ((v2 & 0x20) == 0)
  {
LABEL_16:
    if ((v2 & 4) == 0) {
      return this;
    }
LABEL_28:
    int v16 = *((_DWORD *)a2 + 6);
    *(_WORD *)(this + 68) = v3 | 4;
    *(_DWORD *)(this + 24) = v16;
    return this;
  }
LABEL_27:
  int v15 = *((_DWORD *)a2 + 9);
  v3 |= 0x20u;
  *(_WORD *)(this + 68) = v3;
  *(_DWORD *)(this + 36) = v15;
  if ((*((_WORD *)a2 + 34) & 4) != 0) {
    goto LABEL_28;
  }
  return this;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, const CMMsl::PDRFenceState *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

float CMMsl::swap(CMMsl *this, CMMsl::PDRFenceState *a2, CMMsl::PDRFenceState *a3)
{
  int v3 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v4;
  LODWORD(v4) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v4;
  LODWORD(v4) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v4;
  LODWORD(v4) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v4;
  LODWORD(v4) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)a2 + 11) = v4;
  LODWORD(v4) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v3;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v5;
  LODWORD(v5) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5;
  LODWORD(v5) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v5;
  float result = *((float *)this + 9);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
  *((float *)a2 + 9) = result;
  int v7 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v7;
  return result;
}

float CMMsl::PDRFenceState::PDRFenceState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7CF0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a2 + 68) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  float result = *(float *)(a2 + 36);
  *(float *)(a1 + 36) = result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return result;
}

CMMsl *CMMsl::PDRFenceState::operator=(CMMsl *a1, uint64_t a2)
{
  if (a1 != (CMMsl *)a2)
  {
    CMMsl::PDRFenceState::PDRFenceState((uint64_t)v5, a2);
    CMMsl::swap(a1, (CMMsl::PDRFenceState *)v5, v3);
    PB::Base::~Base((PB::Base *)v5);
  }
  return a1;
}

uint64_t CMMsl::PDRFenceState::formatText(CMMsl::PDRFenceState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(a2, "didExceedRadius", *((unsigned char *)this + 64));
    __int16 v5 = *((_WORD *)this + 34);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "fenceID", *((_DWORD *)this + 6));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(a2, "positionRefX", *((float *)this + 7));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(a2, "positionRefY", *((float *)this + 8));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(a2, "positionRefZ", *((float *)this + 9));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(a2, "positionUncX", *((float *)this + 10));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(a2, "positionUncY", *((float *)this + 11));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(a2, "positionUncZ", *((float *)this + 12));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(a2, "positionX", *((float *)this + 13));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(a2, "positionY", *((float *)this + 14));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(a2, "positionZ", *((float *)this + 15));
  __int16 v5 = *((_WORD *)this + 34);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((_WORD *)this + 34) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_15:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRFenceState::readFrom(CMMsl::PDRFenceState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)a2 + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)a2 + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)a2 + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *((_WORD *)this + 34) |= 1u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
              goto LABEL_50;
            case 2u:
              *((_WORD *)this + 34) |= 0x200u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 13) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 3u:
              *((_WORD *)this + 34) |= 0x400u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 14) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 4u:
              *((_WORD *)this + 34) |= 0x800u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 15) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 5u:
              *((_WORD *)this + 34) |= 0x40u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 10) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 6u:
              *((_WORD *)this + 34) |= 0x80u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 11) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 7u:
              *((_WORD *)this + 34) |= 0x100u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 12) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 8u:
              *((_WORD *)this + 34) |= 0x1000u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 >= *((void *)a2 + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)a2 + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)a2 + v2++);
                *((void *)a2 + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *((unsigned char *)this + 64) = v22;
              goto LABEL_84;
            case 9u:
              *((_WORD *)this + 34) |= 2u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_50:
              unint64_t v2 = *((void *)a2 + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *((_WORD *)this + 34) |= 8u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 0xBu:
              *((_WORD *)this + 34) |= 0x10u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
                goto LABEL_59;
              }
              *((_DWORD *)this + 8) = *(_DWORD *)(*(void *)a2 + v2);
              goto LABEL_77;
            case 0xCu:
              *((_WORD *)this + 34) |= 0x20u;
              unint64_t v2 = *((void *)a2 + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)a2 + 2))
              {
                *((_DWORD *)this + 9) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_77:
                unint64_t v2 = *((void *)a2 + 1) + 4;
LABEL_78:
                *((void *)a2 + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)a2 + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *((_WORD *)this + 34) |= 4u;
              unint64_t v23 = *((void *)a2 + 1);
              unint64_t v2 = *((void *)a2 + 2);
              uint64_t v24 = *(void *)a2;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)a2 + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)a2 + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)a2 + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)a2 + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)a2 + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *((_DWORD *)this + 6) = v27;
LABEL_84:
              unint64_t v3 = *((void *)a2 + 2);
              int v4 = *((unsigned __int8 *)a2 + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)a2 + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRFenceState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  __int16 v4 = *(_WORD *)(this + 68);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(this + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 52), 2u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = PB::Writer::write(a2, *(float *)(v3 + 56), 3u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = PB::Writer::write(a2, *(float *)(v3 + 60), 4u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  this = PB::Writer::write(a2, *(float *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  this = PB::Writer::write(a2, *(float *)(v3 + 44), 6u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  this = PB::Writer::write(a2, *(float *)(v3 + 48), 7u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = PB::Writer::write(a2, *(unsigned char *)(v3 + 64), 8u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = PB::Writer::write(a2, *(double *)(v3 + 16), 9u);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = PB::Writer::write(a2, *(float *)(v3 + 28), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    this = PB::Writer::write(a2, *(float *)(v3 + 36), 0xCu);
    if ((*(_WORD *)(v3 + 68) & 4) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  this = PB::Writer::write(a2, *(float *)(v3 + 32), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 4) == 0) {
    return this;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 24);

  return PB::Writer::writeVarInt(a2, v5, 0xDu);
}

uint64_t CMMsl::PDRFenceState::hash_value(CMMsl::PDRFenceState *this)
{
  __int16 v1 = *((_WORD *)this + 34);
  if ((v1 & 1) == 0)
  {
    double v2 = 0.0;
    if ((*((_WORD *)this + 34) & 0x200) != 0) {
      goto LABEL_3;
    }
LABEL_38:
    uint64_t v4 = 0;
    if ((*((_WORD *)this + 34) & 0x400) != 0) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v6 = 0;
    if ((*((_WORD *)this + 34) & 0x800) != 0) {
      goto LABEL_9;
    }
LABEL_40:
    uint64_t v8 = 0;
    if ((v1 & 0x40) != 0) {
      goto LABEL_12;
    }
LABEL_41:
    uint64_t v10 = 0;
    if ((v1 & 0x80) != 0) {
      goto LABEL_15;
    }
LABEL_42:
    uint64_t v12 = 0;
    if ((*((_WORD *)this + 34) & 0x100) != 0) {
      goto LABEL_18;
    }
LABEL_43:
    uint64_t v14 = 0;
    if ((*((_WORD *)this + 34) & 0x1000) != 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  if ((*((_WORD *)this + 34) & 0x200) == 0) {
    goto LABEL_38;
  }
LABEL_3:
  float v3 = *((float *)this + 13);
  uint64_t v4 = LODWORD(v3);
  if (v3 == 0.0) {
    uint64_t v4 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x400) == 0) {
    goto LABEL_39;
  }
LABEL_6:
  float v5 = *((float *)this + 14);
  uint64_t v6 = LODWORD(v5);
  if (v5 == 0.0) {
    uint64_t v6 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x800) == 0) {
    goto LABEL_40;
  }
LABEL_9:
  float v7 = *((float *)this + 15);
  uint64_t v8 = LODWORD(v7);
  if (v7 == 0.0) {
    uint64_t v8 = 0;
  }
  if ((v1 & 0x40) == 0) {
    goto LABEL_41;
  }
LABEL_12:
  float v9 = *((float *)this + 10);
  uint64_t v10 = LODWORD(v9);
  if (v9 == 0.0) {
    uint64_t v10 = 0;
  }
  if ((v1 & 0x80) == 0) {
    goto LABEL_42;
  }
LABEL_15:
  float v11 = *((float *)this + 11);
  uint64_t v12 = LODWORD(v11);
  if (v11 == 0.0) {
    uint64_t v12 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x100) == 0) {
    goto LABEL_43;
  }
LABEL_18:
  float v13 = *((float *)this + 12);
  uint64_t v14 = LODWORD(v13);
  if (v13 == 0.0) {
    uint64_t v14 = 0;
  }
  if ((*((_WORD *)this + 34) & 0x1000) != 0)
  {
LABEL_21:
    uint64_t v15 = *((unsigned __int8 *)this + 64);
    if ((v1 & 2) != 0) {
      goto LABEL_22;
    }
LABEL_45:
    double v16 = 0.0;
    if ((v1 & 8) != 0) {
      goto LABEL_25;
    }
LABEL_46:
    uint64_t v18 = 0;
    if ((v1 & 0x10) != 0) {
      goto LABEL_28;
    }
LABEL_47:
    uint64_t v20 = 0;
    if ((v1 & 0x20) != 0) {
      goto LABEL_31;
    }
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v15 = 0;
  if ((v1 & 2) == 0) {
    goto LABEL_45;
  }
LABEL_22:
  double v16 = *((double *)this + 2);
  if (v16 == 0.0) {
    double v16 = 0.0;
  }
  if ((v1 & 8) == 0) {
    goto LABEL_46;
  }
LABEL_25:
  float v17 = *((float *)this + 7);
  uint64_t v18 = LODWORD(v17);
  if (v17 == 0.0) {
    uint64_t v18 = 0;
  }
  if ((v1 & 0x10) == 0) {
    goto LABEL_47;
  }
LABEL_28:
  float v19 = *((float *)this + 8);
  uint64_t v20 = LODWORD(v19);
  if (v19 == 0.0) {
    uint64_t v20 = 0;
  }
  if ((v1 & 0x20) != 0)
  {
LABEL_31:
    float v21 = *((float *)this + 9);
    uint64_t v22 = LODWORD(v21);
    if (v21 == 0.0) {
      uint64_t v22 = 0;
    }
    if ((v1 & 4) != 0) {
      goto LABEL_34;
    }
LABEL_49:
    uint64_t v23 = 0;
    return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
  }
LABEL_48:
  uint64_t v22 = 0;
  if ((v1 & 4) == 0) {
    goto LABEL_49;
  }
LABEL_34:
  uint64_t v23 = *((unsigned int *)this + 6);
  return v4 ^ *(void *)&v2 ^ v6 ^ v8 ^ v10 ^ v12 ^ v14 ^ v15 ^ *(void *)&v16 ^ v18 ^ v20 ^ v22 ^ v23;
}

void CMMsl::PDRImpulse::~PDRImpulse(CMMsl::PDRImpulse *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRImpulse::PDRImpulse(CMMsl::PDRImpulse *this, const CMMsl::PDRImpulse *a2)
{
  *(void *)this = off_1003A7D28;
  *((_DWORD *)this + 5) = 0;
  if ((*((unsigned char *)a2 + 20) & 2) != 0)
  {
    int v3 = *((_DWORD *)a2 + 4);
    *((unsigned char *)this + 20) = 2;
    *((_DWORD *)this + 4) = v3;
    char v2 = 3;
    if ((*((unsigned char *)a2 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 1;
  if (*((unsigned char *)a2 + 20))
  {
LABEL_5:
    double result = *((double *)a2 + 1);
    *((unsigned char *)this + 20) = v2;
    *((double *)this + 1) = result;
  }
  return result;
}

const CMMsl::PDRImpulse *CMMsl::PDRImpulse::operator=(const CMMsl::PDRImpulse *a1, const CMMsl::PDRImpulse *a2)
{
  if (a1 != a2)
  {
    CMMsl::PDRImpulse::PDRImpulse((CMMsl::PDRImpulse *)v7, a2);
    uint64_t v4 = *((void *)a1 + 1);
    uint64_t v3 = *((void *)a1 + 2);
    uint64_t v5 = v9;
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v5;
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRImpulse *a2, CMMsl::PDRImpulse *a3)
{
  int v3 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = v3;
  int v4 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v4;
  double result = *((double *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((double *)a2 + 1) = result;
  return result;
}

double CMMsl::PDRImpulse::PDRImpulse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7D28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7D28;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 20) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t CMMsl::PDRImpulse::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    v8[0] = off_1003A7D28;
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_DWORD *)(a2 + 20) = 0;
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    v8[1] = v6;
    v8[2] = v5;
    PB::Base::~Base((PB::Base *)v8);
  }
  return a1;
}

uint64_t CMMsl::PDRImpulse::formatText(CMMsl::PDRImpulse *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 20);
  if (v5)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
    char v5 = *((unsigned char *)this + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(a2, "type", *((_DWORD *)this + 4));
  }

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRImpulse::readFrom(CMMsl::PDRImpulse *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *((unsigned char *)this + 20) |= 1u;
        unint64_t v2 = *((void *)a2 + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
        {
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          unint64_t v2 = *((void *)a2 + 1) + 8;
          *((void *)a2 + 1) = v2;
        }
        else
        {
          *((unsigned char *)a2 + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *((unsigned char *)this + 20) |= 2u;
        unint64_t v21 = *((void *)a2 + 1);
        unint64_t v2 = *((void *)a2 + 2);
        uint64_t v22 = *(void *)a2;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)a2 + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)a2 + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)a2 + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)a2 + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_46:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)a2 + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_47:
        *((_DWORD *)this + 4) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(a2, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)a2 + 1);
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRImpulse::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 20);
  if ((v4 & 2) != 0)
  {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(this + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(a2, v5, 2u);
  }
  return this;
}

uint64_t CMMsl::PDRImpulse::hash_value(CMMsl::PDRImpulse *this)
{
  if ((*((unsigned char *)this + 20) & 2) == 0)
  {
    uint64_t v1 = 0;
    if (*((unsigned char *)this + 20)) {
      goto LABEL_3;
    }
LABEL_7:
    double v2 = 0.0;
    return *(void *)&v2 ^ v1;
  }
  uint64_t v1 = *((int *)this + 4);
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  double v2 = *((double *)this + 1);
  if (v2 == 0.0) {
    double v2 = 0.0;
  }
  return *(void *)&v2 ^ v1;
}

void CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this)
{
  *(void *)this = off_1003A7D60;
  double v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState(this);

  operator delete();
}

CMMsl::PDRPedestrianClassifierState *CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(CMMsl::PDRPedestrianClassifierState *this, const CMMsl::PDRPedestrianClassifierState *a2)
{
  *(void *)this = off_1003A7D60;
  *((void *)this + 1) = 0;
  char v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    char v7 = *((unsigned char *)a2 + 48);
    *((unsigned char *)this + 52) = v5;
    *((unsigned char *)this + 48) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, const CMMsl::PDRPedestrianClassifierState *a2)
{
  if ((const CMMsl::PDRPedestrianClassifierState *)a1 != a2)
  {
    CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8, a2);
    int v3 = *(_DWORD *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v13;
    int v13 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v12;
    char v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPedestrianClassifierState *a2, CMMsl::PDRPedestrianClassifierState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  LOBYTE(v3) = *((unsigned char *)this + 48);
  *((unsigned char *)this + 48) = *((unsigned char *)a2 + 48);
  *((unsigned char *)a2 + 48) = v3;
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v5;
  uint64_t v6 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v6;
  uint64_t v7 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v7;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPedestrianClassifierState::PDRPedestrianClassifierState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7D60;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = off_1003A7D60;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v13 = off_1003A7D60;
    int v3 = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    char v4 = *(unsigned char *)(a2 + 48);
    uint64_t v5 = *(void *)(a2 + 24);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    int v18 = *(_DWORD *)(a1 + 52);
    char v7 = *(unsigned char *)(a1 + 48);
    *(unsigned char *)(a1 + 48) = v4;
    char v17 = v7;
    long long v8 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v6;
    long long v14 = v8;
    uint64_t v9 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v5;
    uint64_t v15 = v9;
    long long v10 = *(_OWORD *)(a1 + 32);
    long long v11 = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 52) = v3;
    *(_OWORD *)(a1 + 32) = v11;
    long long v16 = v10;
    CMMsl::PDRPedestrianClassifierState::~PDRPedestrianClassifierState((CMMsl::PDRPedestrianClassifierState *)&v13);
  }
  return a1;
}

uint64_t CMMsl::PDRPedestrianClassifierState::formatText(CMMsl::PDRPedestrianClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "isPedestrian", *((unsigned char *)this + 48));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "pedestrianClassProbability", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPedestrianClassifierState::readFrom(CMMsl::PDRPedestrianClassifierState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 8);
    uint64_t v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 52) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_81;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_55;
        case 2u:
          *((unsigned char *)this + 52) |= 4u;
          unint64_t v24 = *((void *)a2 + 1);
          if (v24 >= *((void *)a2 + 2))
          {
            BOOL v27 = 0;
            *((unsigned char *)a2 + 24) = 1;
          }
          else
          {
            unint64_t v25 = v24 + 1;
            int v26 = *(unsigned __int8 *)(*(void *)a2 + v24);
            *((void *)a2 + 1) = v25;
            BOOL v27 = v26 != 0;
          }
          *((unsigned char *)this + 48) = v27;
          goto LABEL_82;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v28 = *((void *)a2 + 1);
            unint64_t v29 = *((void *)a2 + 2);
            while (v28 < v29 && !*((unsigned char *)a2 + 24))
            {
              char v31 = (char *)*((void *)this + 2);
              unint64_t v30 = *((void *)this + 3);
              if ((unint64_t)v31 >= v30)
              {
                float v33 = (char *)*v8;
                uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62) {
                  goto LABEL_91;
                }
                uint64_t v36 = v30 - (void)v33;
                if (v36 >> 1 > v35) {
                  unint64_t v35 = v36 >> 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v35;
                }
                if (v37)
                {
                  uint64_t v38 = (char *)sub_100024458((uint64_t)v9, v37);
                  float v33 = (char *)*((void *)this + 1);
                  char v31 = (char *)*((void *)this + 2);
                }
                else
                {
                  uint64_t v38 = 0;
                }
                float v39 = &v38[4 * v34];
                *(_DWORD *)float v39 = 0;
                char v32 = v39 + 4;
                while (v31 != v33)
                {
                  int v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *((void *)this + 1) = v39;
                *((void *)this + 2) = v32;
                *((void *)this + 3) = &v38[4 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(_DWORD *)char v31 = 0;
                char v32 = v31 + 4;
              }
              *((void *)this + 2) = v32;
              unint64_t v41 = *((void *)a2 + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(void *)a2 + v41);
              unint64_t v29 = *((void *)a2 + 2);
              unint64_t v28 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            double v45 = (char *)*((void *)this + 2);
            unint64_t v44 = *((void *)this + 3);
            if ((unint64_t)v45 >= v44)
            {
              uint64_t v47 = (char *)*v8;
              uint64_t v48 = (v45 - (unsigned char *)*v8) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
LABEL_91:
              }
                sub_10000EE98();
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_100024458((uint64_t)v9, v51);
                uint64_t v47 = (char *)*((void *)this + 1);
                double v45 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v52 = 0;
              }
              int v53 = &v52[4 * v48];
              *(_DWORD *)int v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *((void *)this + 1) = v53;
              *((void *)this + 2) = v46;
              *((void *)this + 3) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)double v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *((void *)this + 2) = v46;
            unint64_t v55 = *((void *)a2 + 1);
            if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *((void *)a2 + 2))
            {
              *(v46 - 1) = *(_DWORD *)(*(void *)a2 + v55);
              uint64_t v43 = *((void *)a2 + 1) + 4;
LABEL_56:
              *((void *)a2 + 1) = v43;
            }
            else
            {
LABEL_81:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_82:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 52) |= 2u;
          unint64_t v42 = *((void *)a2 + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)a2 + 2)) {
            goto LABEL_81;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v42);
LABEL_55:
          uint64_t v43 = *((void *)a2 + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_82;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRPedestrianClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::write(a2, *(unsigned char *)(v3 + 48), 2u);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8, 4u);
  }
  return this;
}

uint64_t CMMsl::PDRPedestrianClassifierState::hash_value(CMMsl::PDRPedestrianClassifierState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned __int8 *)this + 48);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this)
{
  *(void *)this = off_1003A7D98;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

{
  uint64_t vars8;

  CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState(this);

  operator delete();
}

CMMsl::PDRPlacementClassifierState *CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(CMMsl::PDRPlacementClassifierState *this, const CMMsl::PDRPlacementClassifierState *a2)
{
  *(void *)this = off_1003A7D98;
  *((void *)this + 1) = 0;
  uint64_t v4 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 13) = 0;
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v6 = *((void *)a2 + 4);
    *((unsigned char *)this + 52) = 1;
    *((void *)this + 4) = v6;
    char v5 = 5;
    if ((*((unsigned char *)a2 + 52) & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v5 = 4;
  if ((*((unsigned char *)a2 + 52) & 4) != 0)
  {
LABEL_5:
    int v7 = *((_DWORD *)a2 + 12);
    *((unsigned char *)this + 52) = v5;
    *((_DWORD *)this + 12) = v7;
  }
LABEL_6:
  if (this != a2) {
    sub_100024308(v4, *((char **)a2 + 1), *((void *)a2 + 2), (uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2);
  }
  if ((*((unsigned char *)a2 + 52) & 2) != 0)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *((unsigned char *)this + 52) |= 2u;
    *((void *)this + 5) = v8;
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, const CMMsl::PDRPlacementClassifierState *a2)
{
  if ((const CMMsl::PDRPlacementClassifierState *)a1 != a2)
  {
    CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8, a2);
    uint64_t v3 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v12;
    uint64_t v12 = v3;
    long long v4 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v9;
    long long v9 = v4;
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v10;
    uint64_t v10 = v5;
    long long v6 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 32) = v11;
    long long v11 = v6;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)v8);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRPlacementClassifierState *a2, CMMsl::PDRPlacementClassifierState *a3)
{
  int v3 = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)a2 + 13) = v3;
  uint64_t v4 = *((void *)this + 4);
  *((void *)this + 4) = *((void *)a2 + 4);
  *((void *)a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v5;
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v6;
  uint64_t v7 = *((void *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)a2 + 2) = v7;
  uint64_t v8 = *((void *)this + 3);
  *((void *)this + 3) = *((void *)a2 + 3);
  *((void *)a2 + 3) = v8;
  double result = *((double *)this + 5);
  *((void *)this + 5) = *((void *)a2 + 5);
  *((double *)a2 + 5) = result;
  return result;
}

uint64_t CMMsl::PDRPlacementClassifierState::PDRPlacementClassifierState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7D98;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

{
  *(void *)a1 = off_1003A7D98;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  sub_100274A30(a1 + 8, (__n128 *)(a2 + 8));
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v11 = off_1003A7D98;
    uint64_t v3 = *(void *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v5 = *(void *)(a2 + 48);
    *(_DWORD *)(a2 + 52) = 0;
    uint64_t v15 = *(void *)(a1 + 48);
    long long v6 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v4;
    long long v12 = v6;
    uint64_t v7 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v3;
    uint64_t v13 = v7;
    long long v8 = *(_OWORD *)(a1 + 32);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = v5;
    *(_OWORD *)(a1 + 32) = v9;
    long long v14 = v8;
    CMMsl::PDRPlacementClassifierState::~PDRPlacementClassifierState((CMMsl::PDRPlacementClassifierState *)&v11);
  }
  return a1;
}

uint64_t CMMsl::PDRPlacementClassifierState::formatText(CMMsl::PDRPlacementClassifierState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  if ((*((unsigned char *)this + 52) & 4) != 0) {
    PB::TextFormatter::format(a2, "placement", *((_DWORD *)this + 12));
  }
  uint64_t v5 = (float *)*((void *)this + 1);
  long long v6 = (float *)*((void *)this + 2);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(a2, "placementProbability", v7);
  }
  char v8 = *((unsigned char *)this + 52);
  if (v8)
  {
    PB::TextFormatter::format(a2, "timestamp", *((double *)this + 4));
    char v8 = *((unsigned char *)this + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 5));
  }

  return PB::TextFormatter::endObject(a2);
}

BOOL CMMsl::PDRPlacementClassifierState::readFrom(CMMsl::PDRPlacementClassifierState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)((char *)this + 8);
    long long v9 = (char *)this + 24;
    while (1)
    {
      uint64_t v10 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v22 = v13 & 7;
      if (v22 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 52) |= 1u;
          unint64_t v23 = *((void *)a2 + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)a2 + 2)) {
            goto LABEL_95;
          }
          *((void *)this + 4) = *(void *)(*(void *)a2 + v23);
          goto LABEL_60;
        case 2u:
          *((unsigned char *)this + 52) |= 4u;
          unint64_t v24 = *((void *)a2 + 1);
          unint64_t v25 = *((void *)a2 + 2);
          uint64_t v26 = *(void *)a2;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)a2 + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_84;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v16 = v28++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v29) = 0;
            goto LABEL_84;
          }
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)a2 + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)a2 + 24) = 1;
            }
            else
            {
              unint64_t v50 = v24 + 1;
              char v51 = *(unsigned char *)(v26 + v24);
              *((void *)a2 + 1) = v50;
              v29 |= (unint64_t)(v51 & 0x7F) << v48;
              if (v51 < 0)
              {
                v48 += 7;
                unint64_t v24 = v50;
                BOOL v16 = v49++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)a2 + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_84:
          *((_DWORD *)this + 12) = v29;
          goto LABEL_96;
        case 3u:
          if (v22 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v32 = *((void *)a2 + 1);
            unint64_t v33 = *((void *)a2 + 2);
            while (v32 < v33 && !*((unsigned char *)a2 + 24))
            {
              unint64_t v35 = (char *)*((void *)this + 2);
              unint64_t v34 = *((void *)this + 3);
              if ((unint64_t)v35 >= v34)
              {
                unint64_t v37 = (char *)*v8;
                uint64_t v38 = (v35 - (unsigned char *)*v8) >> 2;
                unint64_t v39 = v38 + 1;
                if ((unint64_t)(v38 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v40 = v34 - (void)v37;
                if (v40 >> 1 > v39) {
                  unint64_t v39 = v40 >> 1;
                }
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v41 = v39;
                }
                if (v41)
                {
                  unint64_t v42 = (char *)sub_100024458((uint64_t)v9, v41);
                  unint64_t v37 = (char *)*((void *)this + 1);
                  unint64_t v35 = (char *)*((void *)this + 2);
                }
                else
                {
                  unint64_t v42 = 0;
                }
                uint64_t v43 = &v42[4 * v38];
                *(_DWORD *)uint64_t v43 = 0;
                uint64_t v36 = v43 + 4;
                while (v35 != v37)
                {
                  int v44 = *((_DWORD *)v35 - 1);
                  v35 -= 4;
                  *((_DWORD *)v43 - 1) = v44;
                  v43 -= 4;
                }
                *((void *)this + 1) = v43;
                *((void *)this + 2) = v36;
                *((void *)this + 3) = &v42[4 * v41];
                if (v37) {
                  operator delete(v37);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v35 = 0;
                uint64_t v36 = v35 + 4;
              }
              *((void *)this + 2) = v36;
              unint64_t v45 = *((void *)a2 + 1);
              if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)a2 + 2))
              {
                *((unsigned char *)a2 + 24) = 1;
                break;
              }
              *(v36 - 1) = *(_DWORD *)(*(void *)a2 + v45);
              unint64_t v33 = *((void *)a2 + 2);
              unint64_t v32 = *((void *)a2 + 1) + 4;
              *((void *)a2 + 1) = v32;
            }
            PB::Reader::recallMark();
          }
          else
          {
            int v53 = (char *)*((void *)this + 2);
            unint64_t v52 = *((void *)this + 3);
            if ((unint64_t)v53 >= v52)
            {
              unint64_t v55 = (char *)*v8;
              uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
              unint64_t v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62) {
LABEL_107:
              }
                sub_10000EE98();
              uint64_t v58 = v52 - (void)v55;
              if (v58 >> 1 > v57) {
                unint64_t v57 = v58 >> 1;
              }
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v59 = v57;
              }
              if (v59)
              {
                unint64_t v60 = (char *)sub_100024458((uint64_t)v9, v59);
                unint64_t v55 = (char *)*((void *)this + 1);
                int v53 = (char *)*((void *)this + 2);
              }
              else
              {
                unint64_t v60 = 0;
              }
              unint64_t v61 = &v60[4 * v56];
              *(_DWORD *)unint64_t v61 = 0;
              int v54 = v61 + 4;
              while (v53 != v55)
              {
                int v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              *((void *)this + 1) = v61;
              *((void *)this + 2) = v54;
              *((void *)this + 3) = &v60[4 * v59];
              if (v55) {
                operator delete(v55);
              }
            }
            else
            {
              *(_DWORD *)int v53 = 0;
              int v54 = v53 + 4;
            }
            *((void *)this + 2) = v54;
            unint64_t v63 = *((void *)a2 + 1);
            if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *((void *)a2 + 2))
            {
              *(v54 - 1) = *(_DWORD *)(*(void *)a2 + v63);
              uint64_t v47 = *((void *)a2 + 1) + 4;
LABEL_61:
              *((void *)a2 + 1) = v47;
            }
            else
            {
LABEL_95:
              *((unsigned char *)a2 + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)a2 + 1);
          unint64_t v3 = *((void *)a2 + 2);
          int v4 = *((unsigned __int8 *)a2 + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *((unsigned char *)this + 52) |= 2u;
          unint64_t v46 = *((void *)a2 + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)a2 + 2)) {
            goto LABEL_95;
          }
          *((void *)this + 5) = *(void *)(*(void *)a2 + v46);
LABEL_60:
          uint64_t v47 = *((void *)a2 + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(a2, v13 >> 3, v22, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)a2 + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRPlacementClassifierState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 52);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 32), 1u);
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    this = PB::Writer::writeVarInt(a2, *(_DWORD *)(v3 + 48), 2u);
  }
  uint64_t v5 = *(float **)(v3 + 8);
  long long v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    this = PB::Writer::write(a2, v7, 3u);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(a2, v8, 4u);
  }
  return this;
}

uint64_t CMMsl::PDRPlacementClassifierState::hash_value(CMMsl::PDRPlacementClassifierState *this)
{
  if (*((unsigned char *)this + 52))
  {
    if (*((double *)this + 4) == 0.0) {
      uint64_t v2 = 0;
    }
    else {
      uint64_t v2 = *((void *)this + 4);
    }
    if ((*((unsigned char *)this + 52) & 4) != 0) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) != 0)
    {
LABEL_3:
      uint64_t v3 = *((unsigned int *)this + 12);
      goto LABEL_9;
    }
  }
  uint64_t v3 = 0;
LABEL_9:
  uint64_t v4 = PBHashBytes();
  if ((*((unsigned char *)this + 52) & 2) != 0)
  {
    double v5 = *((double *)this + 5);
    if (v5 == 0.0) {
      double v5 = 0.0;
    }
  }
  else
  {
    double v5 = 0.0;
  }
  return v3 ^ v2 ^ *(void *)&v5 ^ v4;
}

void CMMsl::PDRSpeedEstimatorState::~PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this)
{
  PB::Base::~Base(this);

  operator delete();
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(CMMsl::PDRSpeedEstimatorState *this, const CMMsl::PDRSpeedEstimatorState *a2)
{
  *(void *)this = off_1003A7DD0;
  *((_DWORD *)this + 8) = 0;
  char v2 = *((unsigned char *)a2 + 32);
  if (v2)
  {
    double result = *((double *)a2 + 1);
    char v3 = 1;
    *((unsigned char *)this + 32) = 1;
    *((double *)this + 1) = result;
    char v2 = *((unsigned char *)a2 + 32);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*((unsigned char *)a2 + 32) & 4) != 0)
  {
LABEL_5:
    LODWORD(result) = *((_DWORD *)a2 + 6);
    v3 |= 4u;
    *((unsigned char *)this + 32) = v3;
    *((_DWORD *)this + 6) = LODWORD(result);
    char v2 = *((unsigned char *)a2 + 32);
  }
LABEL_6:
  if ((v2 & 8) == 0)
  {
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_10:
    double result = *((double *)a2 + 2);
    *((unsigned char *)this + 32) = v3 | 2;
    *((double *)this + 2) = result;
    return result;
  }
  LODWORD(result) = *((_DWORD *)a2 + 7);
  v3 |= 8u;
  *((unsigned char *)this + 32) = v3;
  *((_DWORD *)this + 7) = LODWORD(result);
  if ((*((unsigned char *)a2 + 32) & 2) != 0) {
    goto LABEL_10;
  }
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, const CMMsl::PDRSpeedEstimatorState *a2)
{
  if ((const CMMsl::PDRSpeedEstimatorState *)a1 != a2)
  {
    CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState((CMMsl::PDRSpeedEstimatorState *)v7, a2);
    int v3 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v10;
    int v10 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v8;
    long long v8 = v5;
    PB::Base::~Base((PB::Base *)v7);
  }
  return a1;
}

double CMMsl::swap(CMMsl *this, CMMsl::PDRSpeedEstimatorState *a2, CMMsl::PDRSpeedEstimatorState *a3)
{
  int v3 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v3;
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)a2 + 1) = v4;
  LODWORD(v4) = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = v4;
  LODWORD(v4) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v4;
  double result = *((double *)this + 2);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

double CMMsl::PDRSpeedEstimatorState::PDRSpeedEstimatorState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1003A7DD0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

{
  double result;

  *(void *)a1 = off_1003A7DD0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 16) = result;
  return result;
}

uint64_t CMMsl::PDRSpeedEstimatorState::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    long long v8 = off_1003A7DD0;
    int v3 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    int v11 = *(_DWORD *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 8);
    long long v6 = *(_OWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 8) = v6;
    long long v9 = v5;
    PB::Base::~Base((PB::Base *)&v8);
  }
  return a1;
}

uint64_t CMMsl::PDRSpeedEstimatorState::formatText(CMMsl::PDRSpeedEstimatorState *this, PB::TextFormatter *a2, const char *a3)
{
  PB::TextFormatter::beginObject(a2, a3);
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(a2, "speed", *((float *)this + 6));
    char v5 = *((unsigned char *)this + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*((unsigned char *)this + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(a2, "speedUnc", *((float *)this + 7));
  char v5 = *((unsigned char *)this + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(a2, "timestamp", *((double *)this + 1));
  if ((*((unsigned char *)this + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(a2, "timestampPast", *((double *)this + 2));
LABEL_6:

  return PB::TextFormatter::endObject(a2);
}

uint64_t CMMsl::PDRSpeedEstimatorState::readFrom(CMMsl::PDRSpeedEstimatorState *this, PB::Reader *a2)
{
  unint64_t v2 = *((void *)a2 + 1);
  unint64_t v3 = *((void *)a2 + 2);
  int v4 = *((unsigned __int8 *)a2 + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)a2;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)a2 + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *((unsigned char *)this + 32) |= 1u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((void *)this + 1) = *(void *)(*(void *)a2 + v2);
          goto LABEL_38;
        case 2u:
          *((unsigned char *)this + 32) |= 4u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 6) = *(_DWORD *)(*(void *)a2 + v2);
          goto LABEL_33;
        case 3u:
          *((unsigned char *)this + 32) |= 8u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)a2 + 2)) {
            goto LABEL_36;
          }
          *((_DWORD *)this + 7) = *(_DWORD *)(*(void *)a2 + v2);
LABEL_33:
          unint64_t v2 = *((void *)a2 + 1) + 4;
          goto LABEL_39;
        case 4u:
          *((unsigned char *)this + 32) |= 2u;
          unint64_t v2 = *((void *)a2 + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)a2 + 2))
          {
            *((void *)this + 2) = *(void *)(*(void *)a2 + v2);
LABEL_38:
            unint64_t v2 = *((void *)a2 + 1) + 8;
LABEL_39:
            *((void *)a2 + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)a2 + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(a2, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)a2 + 1);
          break;
      }
      unint64_t v3 = *((void *)a2 + 2);
      int v4 = *((unsigned __int8 *)a2 + 24);
      if (v2 >= v3 || *((unsigned char *)a2 + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)a2 + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)a2 + 24) = 1;
  }
  return v4 == 0;
}

uint64_t CMMsl::PDRSpeedEstimatorState::writeTo(uint64_t this, PB::Writer *a2)
{
  uint64_t v3 = this;
  char v4 = *(unsigned char *)(this + 32);
  if (v4)
  {
    this = PB::Writer::write(a2, *(double *)(this + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = PB::Writer::write(a2, *(float *)(v3 + 28), 3u);
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(this + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  this = PB::Writer::write(a2, *(float *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return this;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(a2, v5, 4u);
}

uint64_t CMMsl::PDRSpeedEstimatorState::hash_value(CMMsl::PDRSpeedEstimatorState *this)
{
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    double v1 = 0.0;
    if ((*((unsigned char *)this + 32) & 4) != 0) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 8) != 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
  double v1 = *((double *)this + 1);
  if (v1 == 0.0) {
    double v1 = 0.0;
  }
  if ((*((unsigned char *)this + 32) & 4) == 0) {
    goto LABEL_15;
  }
LABEL_3:
  float v2 = *((float *)this + 6);
  uint64_t v3 = LODWORD(v2);
  if (v2 == 0.0) {
    uint64_t v3 = 0;
  }
  if ((*((unsigned char *)this + 32) & 8) != 0)
  {
LABEL_6:
    float v4 = *((float *)this + 7);
    uint64_t v5 = LODWORD(v4);
    if (v4 == 0.0) {
      uint64_t v5 = 0;
    }
    if ((*((unsigned char *)this + 32) & 2) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    double v6 = 0.0;
    return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
  }
LABEL_16:
  uint64_t v5 = 0;
  if ((*((unsigned char *)this + 32) & 2) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  double v6 = *((double *)this + 2);
  if (v6 == 0.0) {
    double v6 = 0.0;
  }
  return v3 ^ *(void *)&v1 ^ v5 ^ *(void *)&v6;
}